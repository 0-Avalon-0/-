{"remainingRequest":"/Users/liwenxu/Public/学习/program/web/git/FileManagingSystem/front-end/file_system_angular/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/liwenxu/Public/学习/program/web/git/FileManagingSystem/front-end/file_system_angular/node_modules/ng-zorro-antd/fesm5/ng-zorro-antd.js","dependencies":[{"path":"/Users/liwenxu/Public/学习/program/web/git/FileManagingSystem/front-end/file_system_angular/node_modules/ng-zorro-antd/fesm5/ng-zorro-antd.js","mtime":499162500000},{"path":"/Users/liwenxu/Public/学习/program/web/git/FileManagingSystem/front-end/file_system_angular/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liwenxu/Public/学习/program/web/git/FileManagingSystem/front-end/file_system_angular/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _angular_common,_angular_core,tslib,_angular_cdk_coercion,_angular_common_http,_ant_design_icons_angular,_ant_design_icons_angular_icons,_angular_animations,rxjs,rxjs_operators,_angular_cdk_keycodes,_angular_cdk_overlay,_angular_cdk_portal,_angular_forms,_angular_cdk_observers,_angular_router,_angular_cdk_platform,date_fns_parse,date_fns_set_month,date_fns_add_days,date_fns_difference_in_calendar_days,date_fns_difference_in_calendar_months,date_fns_difference_in_calendar_weeks,date_fns_end_of_month,date_fns_is_same_day,date_fns_is_same_month,date_fns_is_same_year,date_fns_is_this_month,date_fns_is_this_year,date_fns_set_year,date_fns_start_of_month,date_fns_start_of_week,date_fns_start_of_year,date_fns_add_months,date_fns_add_years,date_fns_set_day,_angular_cdk_a11y,_angular_cdk_bidi PURE_IMPORTS_END */\nimport { DOCUMENT, CommonModule, DatePipe } from '@angular/common';\nimport { Inject, Injectable, Optional, SkipSelf, TemplateRef, Type, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Output, ViewChild, NgModule, isDevMode, InjectionToken, RendererFactory2, ContentChild, HostBinding, Directive, HostListener, Renderer2, Pipe, ContentChildren, Host, NgZone, forwardRef, Self, IterableDiffers, ComponentFactoryResolver, ViewContainerRef, Version, Injector, defineInjectable, inject, ApplicationRef, INJECTOR, ViewChildren, SimpleChange } from '@angular/core';\nimport { __extends, __spread, __values, __assign, __decorate, __metadata, __read } from 'tslib';\nimport { coerceBooleanProperty, coerceCssPixelValue, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { HttpBackend, HttpRequest, HttpHeaders, HttpEventType, HttpResponse, HttpClient } from '@angular/common/http';\nimport { IconService, IconDirective } from '@ant-design/icons-angular';\nimport { CalendarOutline, CheckCircleFill, CheckCircleOutline, CheckOutline, ClockCircleOutline, CloseCircleFill, CloseCircleOutline, CloseOutline, DoubleLeftOutline, DoubleRightOutline, DownOutline, ExclamationCircleFill, ExclamationCircleOutline, FilterFill, InfoCircleFill, InfoCircleOutline, LeftOutline, LoadingOutline, PaperClipOutline, QuestionCircleOutline, RightOutline, UploadOutline, UpOutline } from '@ant-design/icons-angular/icons';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { fromEvent, defer, merge, Subject, BehaviorSubject, combineLatest, of, Observable, ReplaySubject, Subscription } from 'rxjs';\nimport { distinctUntilChanged, throttleTime, filter, switchMap, take, delay, distinct, map, takeUntil, debounceTime, mapTo, auditTime, pluck, tap, startWith } from 'rxjs/operators';\nimport { DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW, SPACE, LEFT_ARROW, RIGHT_ARROW, BACKSPACE } from '@angular/cdk/keycodes';\nexport { MAC_ENTER, BACKSPACE, TAB, NUM_CENTER, ENTER, SHIFT, CONTROL, ALT, PAUSE, CAPS_LOCK, ESCAPE, SPACE, PAGE_UP, PAGE_DOWN, END, HOME, LEFT_ARROW, UP_ARROW, RIGHT_ARROW, DOWN_ARROW, PLUS_SIGN, PRINT_SCREEN, INSERT, DELETE, ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, FF_SEMICOLON, FF_EQUALS, QUESTION_MARK, AT_SIGN, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, META, MAC_WK_CMD_LEFT, MAC_WK_CMD_RIGHT, CONTEXT_MENU, NUMPAD_ZERO, NUMPAD_ONE, NUMPAD_TWO, NUMPAD_THREE, NUMPAD_FOUR, NUMPAD_FIVE, NUMPAD_SIX, NUMPAD_SEVEN, NUMPAD_EIGHT, NUMPAD_NINE, NUMPAD_MULTIPLY, NUMPAD_PLUS, NUMPAD_MINUS, NUMPAD_PERIOD, NUMPAD_DIVIDE, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, NUM_LOCK, SCROLL_LOCK, FIRST_MEDIA, FF_MINUS, MUTE, VOLUME_DOWN, VOLUME_UP, FF_MUTE, FF_VOLUME_DOWN, LAST_MEDIA, FF_VOLUME_UP, SEMICOLON, EQUALS, COMMA, DASH, SLASH, APOSTROPHE, TILDE, OPEN_SQUARE_BRACKET, BACKSLASH, CLOSE_SQUARE_BRACKET, SINGLE_QUOTE, MAC_META } from '@angular/cdk/keycodes';\nimport { ConnectionPositionPair, Overlay, OverlayConfig, OverlayModule, CdkConnectedOverlay, CdkOverlayOrigin, OverlayPositionBuilder, OverlayRef } from '@angular/cdk/overlay';\nimport { TemplatePortal, CdkPortalOutlet, ComponentPortal, PortalInjector, PortalModule } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR, FormsModule, NgControl, NgModel, FormControl } from '@angular/forms';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { ActivatedRoute, NavigationEnd, PRIMARY_OUTLET, Router } from '@angular/router';\nimport { Platform, PlatformModule } from '@angular/cdk/platform';\nimport parse from 'date-fns/parse';\nimport setMonth from 'date-fns/set_month';\nimport addDays from 'date-fns/add_days';\nimport differenceInCalendarDays from 'date-fns/difference_in_calendar_days';\nimport differenceInCalendarMonths from 'date-fns/difference_in_calendar_months';\nimport differenceInCalendarWeeks from 'date-fns/difference_in_calendar_weeks';\nimport endOfMonth from 'date-fns/end_of_month';\nimport isSameDay from 'date-fns/is_same_day';\nimport isSameMonth from 'date-fns/is_same_month';\nimport isSameYear from 'date-fns/is_same_year';\nimport isThisMonth from 'date-fns/is_this_month';\nimport isThisYear from 'date-fns/is_this_year';\nimport setYear from 'date-fns/set_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport startOfWeek from 'date-fns/start_of_week';\nimport startOfYear from 'date-fns/start_of_year';\nimport addMonths from 'date-fns/add_months';\nimport addYears from 'date-fns/add_years';\nimport setDay from 'date-fns/set_day';\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar availablePrefixs = ['moz', 'ms', 'webkit'];\n/**\n * @return {?}\n */\nfunction requestAnimationFramePolyfill() {\n    /** @type {?} */\n    var lastTime = 0;\n    return function (callback) {\n        /** @type {?} */\n        var currTime = new Date().getTime();\n        /** @type {?} */\n        var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n        /** @type {?} */\n        var id = window.setTimeout(function () { callback(currTime + timeToCall); }, timeToCall);\n        lastTime = currTime + timeToCall;\n        return id;\n    };\n}\n/**\n * @return {?}\n */\nfunction getRequestAnimationFrame() {\n    if (typeof window === 'undefined') {\n        return function () { return null; };\n    }\n    if (window.requestAnimationFrame) {\n        // https://github.com/vuejs/vue/issues/4465\n        return window.requestAnimationFrame.bind(window);\n    }\n    /** @type {?} */\n    var prefix = availablePrefixs.filter(function (key) { return key + \"RequestAnimationFrame\" in window; })[0];\n    return prefix\n        ? window[prefix + \"RequestAnimationFrame\"]\n        : requestAnimationFramePolyfill();\n}\n/**\n * @param {?} id\n * @return {?}\n */\nfunction cancelRequestAnimationFrame(id) {\n    if (typeof window === 'undefined') {\n        return null;\n    }\n    if (window.cancelAnimationFrame) {\n        return window.cancelAnimationFrame(id);\n    }\n    /** @type {?} */\n    var prefix = availablePrefixs.filter(function (key) {\n        return key + \"CancelAnimationFrame\" in window || key + \"CancelRequestAnimationFrame\" in window;\n    })[0];\n    return prefix ?\n        (( /** @type {?} */(window))[prefix + \"CancelAnimationFrame\"] ||\n            ( /** @type {?} */(window))[prefix + \"CancelRequestAnimationFrame\"]).call(this, id) : clearTimeout(id);\n}\n/** @type {?} */\nvar reqAnimFrame = /*@__PURE__*/ getRequestAnimationFrame();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} t\n * @param {?} b\n * @param {?} c\n * @param {?} d\n * @return {?}\n */\nfunction easeInOutCubic(t, b, c, d) {\n    /** @type {?} */\n    var cc = c - b;\n    /** @type {?} */\n    var tt = t / (d / 2);\n    if (tt < 1) {\n        return cc / 2 * tt * tt * tt + b;\n    }\n    else {\n        return cc / 2 * ((tt -= 2) * tt * tt + 2) + b;\n    }\n}\nvar NzScrollService = /** @class */ /*@__PURE__*/ (function () {\n    /* tslint:disable-next-line:no-any */\n    function NzScrollService(doc) {\n        this.doc = doc;\n    }\n    /** 设置 `el` 滚动条位置 */\n    /**\n     * 设置 `el` 滚动条位置\n     * @param {?} el\n     * @param {?=} topValue\n     * @return {?}\n     */\n    NzScrollService.prototype.setScrollTop = /**\n     * 设置 `el` 滚动条位置\n     * @param {?} el\n     * @param {?=} topValue\n     * @return {?}\n     */\n        function (el, topValue) {\n            if (topValue === void 0) {\n                topValue = 0;\n            }\n            if (el === window) {\n                this.doc.body.scrollTop = topValue;\n                this.doc.documentElement.scrollTop = topValue;\n            }\n            else {\n                ( /** @type {?} */(el)).scrollTop = topValue;\n            }\n        };\n    /** 获取 `el` 相对于视窗距离 */\n    /**\n     * 获取 `el` 相对于视窗距离\n     * @param {?} el\n     * @return {?}\n     */\n    NzScrollService.prototype.getOffset = /**\n     * 获取 `el` 相对于视窗距离\n     * @param {?} el\n     * @return {?}\n     */\n        function (el) {\n            /** @type {?} */\n            var ret = {\n                top: 0,\n                left: 0\n            };\n            if (!el || !el.getClientRects().length)\n                return ret;\n            /** @type {?} */\n            var rect = el.getBoundingClientRect();\n            if (rect.width || rect.height) {\n                /** @type {?} */\n                var doc = el.ownerDocument.documentElement;\n                ret.top = rect.top - doc.clientTop;\n                ret.left = rect.left - doc.clientLeft;\n            }\n            else {\n                ret.top = rect.top;\n                ret.left = rect.left;\n            }\n            return ret;\n        };\n    /** 获取 `el` 滚动条位置 */\n    // TODO: remove '| Window' as the fallback already happens here\n    /**\n     * 获取 `el` 滚动条位置\n     * @param {?=} el\n     * @param {?=} top\n     * @return {?}\n     */\n    NzScrollService.prototype.getScroll = /**\n     * 获取 `el` 滚动条位置\n     * @param {?=} el\n     * @param {?=} top\n     * @return {?}\n     */\n        function (el, top) {\n            if (top === void 0) {\n                top = true;\n            }\n            /** @type {?} */\n            var target = el ? el : window;\n            /** @type {?} */\n            var prop = top ? 'pageYOffset' : 'pageXOffset';\n            /** @type {?} */\n            var method = top ? 'scrollTop' : 'scrollLeft';\n            /** @type {?} */\n            var isWindow = target === window;\n            /** @type {?} */\n            var ret = isWindow ? target[prop] : target[method];\n            if (isWindow && typeof ret !== 'number') {\n                ret = this.doc.documentElement[method];\n            }\n            return ret;\n        };\n    /**\n     * 使用动画形式将 `el` 滚动至某位置\n     *\n     * @param containerEl 容器，默认 `window`\n     * @param targetTopValue 滚动至目标 `top` 值，默认：0，相当于顶部\n     * @param easing 动作算法，默认：`easeInOutCubic`\n     * @param callback 动画结束后回调\n     */\n    /**\n     * 使用动画形式将 `el` 滚动至某位置\n     *\n     * @param {?} containerEl 容器，默认 `window`\n     * @param {?=} targetTopValue 滚动至目标 `top` 值，默认：0，相当于顶部\n     * @param {?=} easing 动作算法，默认：`easeInOutCubic`\n     * @param {?=} callback 动画结束后回调\n     * @return {?}\n     */\n    NzScrollService.prototype.scrollTo = /**\n     * 使用动画形式将 `el` 滚动至某位置\n     *\n     * @param {?} containerEl 容器，默认 `window`\n     * @param {?=} targetTopValue 滚动至目标 `top` 值，默认：0，相当于顶部\n     * @param {?=} easing 动作算法，默认：`easeInOutCubic`\n     * @param {?=} callback 动画结束后回调\n     * @return {?}\n     */\n        function (containerEl, targetTopValue, easing, callback) {\n            var _this = this;\n            if (targetTopValue === void 0) {\n                targetTopValue = 0;\n            }\n            /** @type {?} */\n            var target = containerEl ? containerEl : window;\n            /** @type {?} */\n            var scrollTop = this.getScroll(target);\n            /** @type {?} */\n            var startTime = Date.now();\n            /** @type {?} */\n            var frameFunc = function () {\n                /** @type {?} */\n                var timestamp = Date.now();\n                /** @type {?} */\n                var time = timestamp - startTime;\n                _this.setScrollTop(target, (easing || easeInOutCubic)(time, scrollTop, targetTopValue, 450));\n                if (time < 450) {\n                    reqAnimFrame(frameFunc);\n                }\n                else {\n                    if (callback)\n                        callback();\n                }\n            };\n            reqAnimFrame(frameFunc);\n        };\n    return NzScrollService;\n}());\n/**\n * @param {?} doc\n * @param {?} scrollService\n * @return {?}\n */\nfunction SCROLL_SERVICE_PROVIDER_FACTORY(doc, scrollService) {\n    return scrollService || new NzScrollService(doc);\n}\n/** @type {?} */\nvar SCROLL_SERVICE_PROVIDER = {\n    provide: NzScrollService,\n    useFactory: SCROLL_SERVICE_PROVIDER_FACTORY,\n    deps: [DOCUMENT, [/*@__PURE__*/ new Optional(), /*@__PURE__*/ new SkipSelf(), NzScrollService]]\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isNotNil(value) {\n    return (typeof (value) !== 'undefined') && value !== null;\n}\n/**\n * 校验对象是否相等\n * @param {?} objA\n * @param {?} objB\n * @return {?}\n */\nfunction shallowEqual(objA, objB) {\n    if (objA === objB) {\n        return true;\n    }\n    if (typeof objA !== 'object' || !objA || typeof objB !== 'object' || !objB) {\n        return false;\n    }\n    /** @type {?} */\n    var keysA = Object.keys(objA);\n    /** @type {?} */\n    var keysB = Object.keys(objB);\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n    /** @type {?} */\n    var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);\n    // tslint:disable-next-line:prefer-for-of\n    for (var idx = 0; idx < keysA.length; idx++) {\n        /** @type {?} */\n        var key = keysA[idx];\n        if (!bHasOwnProperty(key)) {\n            return false;\n        }\n        if (objA[key] !== objB[key]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isInteger(value) {\n    return typeof value === 'number' &&\n        isFinite(value) &&\n        Math.floor(value) === value;\n}\n/**\n * @param {?} element\n * @return {?}\n */\nfunction isEmpty(element) {\n    /** @type {?} */\n    var nodes = element.childNodes;\n    for (var i = 0; i < nodes.length; i++) {\n        if (filterNotEmptyNode(nodes.item(i))) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction filterNotEmptyNode(node) {\n    if (node) {\n        if ((node.nodeType === 1) && (( /** @type {?} */(node)).outerHTML.toString().trim().length !== 0)) {\n            // ELEMENT_NODE\n            return node;\n        }\n        else if ((node.nodeType === 3) && (node.textContent.toString().trim().length !== 0)) {\n            // TEXT_NODE\n            return node;\n        }\n        return null;\n    }\n    return null;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isNonEmptyString(value) {\n    // tslint:disable-line:no-any\n    return typeof value === 'string' && value !== '';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isTemplateRef(value) {\n    // tslint:disable-line:no-any\n    return value instanceof TemplateRef;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isComponent(value) {\n    // tslint:disable-line:no-any\n    return value instanceof Type;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} value\n * @return {?}\n */\nfunction toBoolean(value) {\n    return coerceBooleanProperty(value);\n}\n/**\n * @template D\n * @param {?} value\n * @param {?} fallback\n * @return {?}\n */\nfunction toNumber(value, fallback) {\n    return coerceNumberProperty(value, fallback);\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction toCssPixel(value) {\n    return coerceCssPixelValue(value);\n}\n/**\n * @template T\n * @param {?} prop\n * @param {...?} args\n * @return {?}\n */\nfunction valueFunctionProp(prop) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    // tslint:disable-line: no-any\n    return typeof prop === 'function' ? prop.apply(void 0, __spread(args)) : prop;\n}\n/**\n * Input decorator that handle a prop to do get/set automatically with toBoolean\n *\n * Why not using \\@InputBoolean alone without \\@Input? AOT needs \\@Input to be visible\n *\n * \\@howToUse\n * ```\n * \\@Input() \\@InputBoolean() visible: boolean = false;\n *\n * // Act as below:\n * // \\@Input()\n * // get visible() { return this.__visibile; }\n * // set visible(value) { this.__visible = value; }\n * // __visible = false;\n * ```\n * @return {?}\n */\nfunction InputBoolean() {\n    // tslint:disable-line:no-any\n    return function InputBooleanPropDecorator(target, name) {\n        /** @type {?} */\n        var privatePropName = \"$$__\" + name;\n        if (Object.prototype.hasOwnProperty.call(target, privatePropName)) {\n            console.warn(\"The prop \\\"\" + privatePropName + \"\\\" is already exist, it will be overrided by InputBoolean decorator.\");\n        }\n        Object.defineProperty(target, privatePropName, {\n            configurable: true,\n            writable: true\n        });\n        Object.defineProperty(target, name, {\n            get: /**\n             * @return {?}\n             */ function () {\n                return this[privatePropName]; // tslint:disable-line:no-invalid-this\n            },\n            set: /**\n             * @param {?} value\n             * @return {?}\n             */ function (value) {\n                this[privatePropName] = toBoolean(value); // tslint:disable-line:no-invalid-this\n            }\n        });\n        // // Do rest things for input decorator\n        // const inputDecorator = Input();\n        // inputDecorator(target, name);\n    };\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} fn\n * @return {?}\n */\nfunction throttleByAnimationFrame(fn) {\n    /** @type {?} */\n    var requestId;\n    /** @type {?} */\n    var later = function (args) {\n        return function () {\n            requestId = null;\n            fn.apply(void 0, __spread(args));\n        };\n    };\n    /** @type {?} */\n    var throttled = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (requestId == null) {\n            requestId = reqAnimFrame(later(args));\n        }\n    };\n    // tslint:disable-next-line:no-non-null-assertion\n    ( /** @type {?} */(throttled)).cancel = function () { return cancelRequestAnimationFrame(/** @type {?} */ ((requestId))); };\n    return throttled;\n}\n/**\n * @return {?}\n */\nfunction throttleByAnimationFrameDecorator() {\n    return function (target, key, descriptor) {\n        /** @type {?} */\n        var fn = descriptor.value;\n        /** @type {?} */\n        var definingProperty = false;\n        return {\n            configurable: true,\n            get: /**\n             * @return {?}\n             */ function () {\n                if (definingProperty || this === target.prototype || this.hasOwnProperty(key)) {\n                    return fn;\n                }\n                /** @type {?} */\n                var boundFn = throttleByAnimationFrame(fn.bind(this));\n                definingProperty = true;\n                Object.defineProperty(this, key, {\n                    value: boundFn,\n                    configurable: true,\n                    writable: true,\n                });\n                definingProperty = false;\n                return boundFn;\n            },\n        };\n    };\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzAffixComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzAffixComponent(scrollSrv, _el, cd) {\n        this.scrollSrv = scrollSrv;\n        this._el = _el;\n        this.cd = cd;\n        this.events = [\n            'resize',\n            'scroll',\n            'touchstart',\n            'touchmove',\n            'touchend',\n            'pageshow',\n            'load'\n        ];\n        this._target = window;\n        this.nzChange = new EventEmitter();\n    }\n    Object.defineProperty(NzAffixComponent.prototype, \"nzTarget\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.clearEventListeners();\n            this._target = value || window;\n            this.setTargetEventListeners();\n            this.updatePosition({});\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzAffixComponent.prototype, \"nzOffsetTop\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._offsetTop;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (typeof value === 'undefined') {\n                return;\n            }\n            this._offsetTop = toNumber(value, null);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzAffixComponent.prototype, \"nzOffsetBottom\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (typeof value === 'undefined') {\n                return;\n            }\n            this._offsetBottom = toNumber(value, null);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzAffixComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.timeout = setTimeout(function () {\n                _this.setTargetEventListeners();\n                _this.updatePosition({});\n            });\n        };\n    /**\n     * @return {?}\n     */\n    NzAffixComponent.prototype.setTargetEventListeners = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.clearEventListeners();\n            this.events.forEach(function (eventName) {\n                _this._target.addEventListener(eventName, _this.updatePosition, false);\n            });\n        };\n    /**\n     * @return {?}\n     */\n    NzAffixComponent.prototype.clearEventListeners = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.events.forEach(function (eventName) {\n                _this._target.removeEventListener(eventName, _this.updatePosition, false);\n            });\n        };\n    /**\n     * @return {?}\n     */\n    NzAffixComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.clearEventListeners();\n            clearTimeout(this.timeout);\n            ( /** @type {?} */(this.updatePosition)).cancel();\n        };\n    /**\n     * @param {?} target\n     * @return {?}\n     */\n    NzAffixComponent.prototype.getTargetRect = /**\n     * @param {?} target\n     * @return {?}\n     */\n        function (target) {\n            return target !== window ?\n                ( /** @type {?} */(target)).getBoundingClientRect() : /** @type {?} */ ({ top: 0, left: 0, bottom: 0 });\n        };\n    /**\n     * @param {?} element\n     * @param {?} target\n     * @return {?}\n     */\n    NzAffixComponent.prototype.getOffset = /**\n     * @param {?} element\n     * @param {?} target\n     * @return {?}\n     */\n        function (element, target) {\n            /** @type {?} */\n            var elemRect = element.getBoundingClientRect();\n            /** @type {?} */\n            var targetRect = this.getTargetRect(target);\n            /** @type {?} */\n            var scrollTop = this.scrollSrv.getScroll(target, true);\n            /** @type {?} */\n            var scrollLeft = this.scrollSrv.getScroll(target, false);\n            /** @type {?} */\n            var docElem = window.document.body;\n            /** @type {?} */\n            var clientTop = docElem.clientTop || 0;\n            /** @type {?} */\n            var clientLeft = docElem.clientLeft || 0;\n            return {\n                top: elemRect.top - targetRect.top + scrollTop - clientTop,\n                left: elemRect.left - targetRect.left + scrollLeft - clientLeft,\n                width: elemRect.width,\n                height: elemRect.height\n            };\n        };\n    /**\n     * @param {?} affixStyle\n     * @return {?}\n     */\n    NzAffixComponent.prototype.genStyle = /**\n     * @param {?} affixStyle\n     * @return {?}\n     */\n        function (affixStyle) {\n            if (affixStyle == null) {\n                return '';\n            }\n            return Object.keys(affixStyle).map(function (key) {\n                /** @type {?} */\n                var val = affixStyle[key];\n                return key + \":\" + (typeof val === 'string' ? val : val + 'px');\n            }).join(';');\n        };\n    /**\n     * @param {?} e\n     * @param {?} affixStyle\n     * @return {?}\n     */\n    NzAffixComponent.prototype.setAffixStyle = /**\n     * @param {?} e\n     * @param {?} affixStyle\n     * @return {?}\n     */\n        function (e, affixStyle) {\n            /** @type {?} */\n            var originalAffixStyle = this.affixStyle;\n            /** @type {?} */\n            var isWindow = this._target === window;\n            if (e.type === 'scroll' && originalAffixStyle && affixStyle && isWindow) {\n                return;\n            }\n            if (shallowEqual(originalAffixStyle, affixStyle)) {\n                return;\n            }\n            /** @type {?} */\n            var fixed = !!affixStyle;\n            /** @type {?} */\n            var wrapEl = /** @type {?} */ (this.wrap.nativeElement);\n            wrapEl.style.cssText = this.genStyle(affixStyle);\n            this.affixStyle = affixStyle;\n            /** @type {?} */\n            var cls = 'ant-affix';\n            if (fixed) {\n                wrapEl.classList.add(cls);\n            }\n            else {\n                wrapEl.classList.remove(cls);\n            }\n            if ((affixStyle && !originalAffixStyle) || (!affixStyle && originalAffixStyle)) {\n                this.nzChange.emit(fixed);\n            }\n        };\n    /**\n     * @param {?} placeholderStyle\n     * @return {?}\n     */\n    NzAffixComponent.prototype.setPlaceholderStyle = /**\n     * @param {?} placeholderStyle\n     * @return {?}\n     */\n        function (placeholderStyle) {\n            /** @type {?} */\n            var originalPlaceholderStyle = this.placeholderStyle;\n            if (shallowEqual(placeholderStyle, originalPlaceholderStyle)) {\n                return;\n            }\n            ( /** @type {?} */(this._el.nativeElement)).style.cssText = this.genStyle(placeholderStyle);\n            this.placeholderStyle = placeholderStyle;\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzAffixComponent.prototype.updatePosition = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            /** @type {?} */\n            var targetNode = this._target;\n            /** @type {?} */\n            var offsetTop = this.nzOffsetTop;\n            /** @type {?} */\n            var scrollTop = this.scrollSrv.getScroll(targetNode, true);\n            /** @type {?} */\n            var affixNode = /** @type {?} */ (this._el.nativeElement);\n            /** @type {?} */\n            var elemOffset = this.getOffset(affixNode, targetNode);\n            /** @type {?} */\n            var elemSize = {\n                width: affixNode.offsetWidth,\n                height: affixNode.offsetHeight\n            };\n            /** @type {?} */\n            var offsetMode = {\n                top: false,\n                bottom: false\n            };\n            // Default to `offsetTop=0`.\n            if (typeof offsetTop !== 'number' && typeof this._offsetBottom !== 'number') {\n                offsetMode.top = true;\n                offsetTop = 0;\n            }\n            else {\n                offsetMode.top = typeof offsetTop === 'number';\n                offsetMode.bottom = typeof this._offsetBottom === 'number';\n            }\n            /** @type {?} */\n            var targetRect = this.getTargetRect(targetNode);\n            /** @type {?} */\n            var targetInnerHeight = ( /** @type {?} */(targetNode)).innerHeight || ( /** @type {?} */(targetNode)).clientHeight;\n            if (scrollTop > elemOffset.top - ( /** @type {?} */(offsetTop)) && offsetMode.top) {\n                /** @type {?} */\n                var width = elemOffset.width;\n                /** @type {?} */\n                var top_1 = targetRect.top + ( /** @type {?} */(offsetTop));\n                this.setAffixStyle(e, {\n                    position: 'fixed',\n                    top: top_1,\n                    left: targetRect.left + elemOffset.left,\n                    maxHeight: \"calc(100vh - \" + top_1 + \"px)\",\n                    width: width\n                });\n                this.setPlaceholderStyle({\n                    width: width,\n                    height: elemSize.height\n                });\n            }\n            else if (scrollTop < elemOffset.top + elemSize.height + ( /** @type {?} */(this._offsetBottom)) - targetInnerHeight &&\n                offsetMode.bottom) {\n                /** @type {?} */\n                var targetBottomOffet = targetNode === window ? 0 : (window.innerHeight - targetRect.bottom);\n                /** @type {?} */\n                var width = elemOffset.width;\n                this.setAffixStyle(e, {\n                    position: 'fixed',\n                    bottom: targetBottomOffet + ( /** @type {?} */(this._offsetBottom)),\n                    left: targetRect.left + elemOffset.left,\n                    width: width\n                });\n                this.setPlaceholderStyle({\n                    width: width,\n                    height: elemOffset.height\n                });\n            }\n            else {\n                if (e.type === 'resize' && this.affixStyle && this.affixStyle.position === 'fixed' && affixNode.offsetWidth) {\n                    this.setAffixStyle(e, __assign({}, this.affixStyle, { width: affixNode.offsetWidth }));\n                }\n                else {\n                    this.setAffixStyle(e, null);\n                }\n                this.setPlaceholderStyle(null);\n            }\n        };\n    __decorate([\n        throttleByAnimationFrameDecorator(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], NzAffixComponent.prototype, \"updatePosition\", null);\n    return NzAffixComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzAffixModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzAffixModule() {\n    }\n    return NzAffixModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar NZ_ICONS$$1 = /*@__PURE__*/ new InjectionToken('nz_icons');\n/** @type {?} */\nvar NZ_ICON_DEFAULT_TWOTONE_COLOR$$1 = /*@__PURE__*/ new InjectionToken('nz_icon_default_twotone_color');\n/** @type {?} */\nvar DEFAULT_TWOTONE_COLOR$$1 = '#1890ff';\n/**\n * It should be a global singleton, otherwise registered icons could not be found.\n */\nvar NzIconService$$1 = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(NzIconService$$1, _super);\n    // tslint:disable:no-any\n    function NzIconService$$1(_rendererFactory, _handler, _document, _icons, _defaultColor) {\n        var _this = _super.call(this, _rendererFactory, _handler, _document) || this;\n        _this._rendererFactory = _rendererFactory;\n        _this._handler = _handler;\n        _this._document = _document;\n        _this._icons = _icons;\n        _this._defaultColor = _defaultColor;\n        _this._iconfontCache = new Set();\n        _this.warnedAboutAPI = false;\n        _this.warnedAboutCross = false;\n        _this.warnedAboutVertical = false;\n        /** @type {?} */\n        var iconsUsedByZorro = [\n            CalendarOutline,\n            CheckCircleFill,\n            CheckCircleOutline,\n            CheckOutline,\n            ClockCircleOutline,\n            CloseCircleOutline,\n            CloseCircleFill,\n            CloseOutline,\n            DoubleLeftOutline,\n            DoubleRightOutline,\n            DownOutline,\n            ExclamationCircleFill,\n            ExclamationCircleOutline,\n            FilterFill,\n            InfoCircleFill,\n            InfoCircleOutline,\n            LeftOutline,\n            LoadingOutline,\n            PaperClipOutline,\n            QuestionCircleOutline,\n            RightOutline,\n            UploadOutline,\n            UpOutline\n        ];\n        _this.addIcon.apply(_this, __spread(iconsUsedByZorro));\n        if (_this._icons) {\n            _this.addIcon.apply(_this, __spread(_this._icons));\n        }\n        /** @type {?} */\n        var primaryColor = DEFAULT_TWOTONE_COLOR$$1;\n        if (_this._defaultColor) {\n            if (_this._defaultColor.startsWith('#')) {\n                primaryColor = _this._defaultColor;\n            }\n            else {\n                if (isDevMode()) {\n                    console.error('[NG-ZORRO] twotone color must be a hex color!');\n                }\n            }\n        }\n        _this.twoToneColor = { primaryColor: primaryColor };\n        return _this;\n    }\n    /**\n     * @param {?} svg\n     * @return {?}\n     */\n    NzIconService$$1.prototype.normalizeSvgElement = /**\n     * @param {?} svg\n     * @return {?}\n     */\n        function (svg) {\n            if (!svg.getAttribute('viewBox')) {\n                this._renderer.setAttribute(svg, 'viewBox', '0 0 1024 1024');\n            }\n            if (!svg.getAttribute('width') || !svg.getAttribute('height')) {\n                this._renderer.setAttribute(svg, 'width', '1em');\n                this._renderer.setAttribute(svg, 'height', '1em');\n            }\n            if (!svg.getAttribute('fill')) {\n                this._renderer.setAttribute(svg, 'fill', 'currentColor');\n            }\n        };\n    /**\n     * @param {?} opt\n     * @return {?}\n     */\n    NzIconService$$1.prototype.fetchFromIconfont = /**\n     * @param {?} opt\n     * @return {?}\n     */\n        function (opt) {\n            var scriptUrl = opt.scriptUrl;\n            if (this._document && !this._iconfontCache.has(scriptUrl)) {\n                /** @type {?} */\n                var script = this._renderer.createElement('script');\n                this._renderer.setAttribute(script, 'src', scriptUrl);\n                this._renderer.setAttribute(script, 'data-namespace', scriptUrl.replace(/^(https?|http):/g, ''));\n                this._iconfontCache.add(scriptUrl);\n                this._renderer.appendChild(this._document.body, script);\n            }\n        };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    NzIconService$$1.prototype.createIconfontIcon = /**\n     * @param {?} type\n     * @return {?}\n     */\n        function (type) {\n            return this._createSVGElementFromString(\"<svg><use xlink:href=\\\"\" + type + \"\\\"></svg>\");\n        };\n    /** @nocollapse */ NzIconService$$1.ngInjectableDef = defineInjectable({ factory: function NzIconService_Factory() { return new NzIconService$$1(inject(RendererFactory2), inject(HttpBackend, 8), inject(DOCUMENT, 8), inject(NZ_ICONS$$1, 8), inject(NZ_ICON_DEFAULT_TWOTONE_COLOR$$1, 8)); }, token: NzIconService$$1, providedIn: \"root\" });\n    return NzIconService$$1;\n}(IconService));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar iconTypeRE = /^anticon\\-\\w/;\n/**\n * This directive extends IconDirective to provide:\n *\n * - IconFont support\n * - spinning\n * - old API compatibility\n */\nvar NzIconDirective = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(NzIconDirective, _super);\n    function NzIconDirective(_iconService, _elementRef, _renderer) {\n        var _this = _super.call(this, _iconService, _elementRef, _renderer) || this;\n        _this._iconService = _iconService;\n        _this._elementRef = _elementRef;\n        _this._renderer = _renderer;\n        _this.spin = false;\n        return _this;\n    }\n    /**\n     * In order to make this directive compatible to old API, we had do some ugly stuff here.\n     * TODO: Should be removed in next major version.\n     * @param {?} className\n     * @return {?}\n     */\n    NzIconDirective.prototype._classChangeHandler = /**\n     * In order to make this directive compatible to old API, we had do some ugly stuff here.\n     * TODO: Should be removed in next major version.\n     * @param {?} className\n     * @return {?}\n     */\n        function (className) {\n            if (className) {\n                /** @type {?} */\n                var iconType = className\n                    .split(/\\s/)\n                    .filter(function (cls) { return cls !== 'anticon' && cls !== 'anticon-spin' && !!cls.match(iconTypeRE); })[0];\n                if (!iconType) {\n                    return;\n                }\n                /** @type {?} */\n                var parsedIconType = iconType.replace('anticon-', '');\n                if (parsedIconType.includes('verticle')) {\n                    parsedIconType = parsedIconType.replace('verticle', 'vertical');\n                    this._warnAPI('cross');\n                }\n                if (parsedIconType.startsWith('cross')) {\n                    parsedIconType = parsedIconType.replace('cross', 'close');\n                    this._warnAPI('vertical');\n                }\n                // Only change icon when icon type does change.\n                if (this.type !== parsedIconType) {\n                    this.type = parsedIconType;\n                    this._changeIcon().catch(function (err) {\n                        console.warn('[NG-ZORRO]', \"You can find more about this error on http://ng.ant.design/components/icon/en\\n\", err);\n                    });\n                }\n            }\n        };\n    /**\n     * In order to make this directive compatible to old API, we had do some ugly stuff here.\n     * TODO: Should be removed in next major version.\n     * @param {?} type\n     * @return {?}\n     */\n    NzIconDirective.prototype._warnAPI = /**\n     * In order to make this directive compatible to old API, we had do some ugly stuff here.\n     * TODO: Should be removed in next major version.\n     * @param {?} type\n     * @return {?}\n     */\n        function (type) {\n            if (isDevMode()) {\n                if (type === 'old' && !this._iconService.warnedAboutAPI) {\n                    console.warn('[NG-ZORRO]', \"<i class=\\\"anticon\\\"></i> would be deprecated soon. Please use <i nz-icon type=\\\"\\\"></i> API.\");\n                    this._iconService.warnedAboutAPI = true;\n                }\n                if (type === 'cross' && !this._iconService.warnedAboutCross) {\n                    console.warn('[NG-ZORRO]', \"'cross' icon is replaced by 'close' icon.\");\n                    this._iconService.warnedAboutCross = true;\n                }\n                if (type === 'vertical' && !this._iconService.warnedAboutVertical) {\n                    console.warn('[NG-ZORRO]', \"'verticle' is misspelled, would be corrected in the next major version.\");\n                    this._iconService.warnedAboutVertical = true;\n                }\n            }\n        };\n    /**\n     * @param {?} svg\n     * @return {?}\n     */\n    NzIconDirective.prototype._toggleSpin = /**\n     * @param {?} svg\n     * @return {?}\n     */\n        function (svg) {\n            if ((this.spin || this.type === 'loading') && !this._el.classList.contains('anticon-spin')) {\n                this._renderer.addClass(svg, 'anticon-spin');\n            }\n            else {\n                this._renderer.removeClass(svg, 'anticon-spin');\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzIconDirective.prototype._setClassName = /**\n     * @return {?}\n     */\n        function () {\n            // If there's not an anticon class, usually a new API icon, get the icon class name back.\n            // anticon should be added before other class names.\n            if (this._el && typeof this.type === 'string') {\n                /** @type {?} */\n                var iconClassNameArr = this._el.className.split(/\\s/);\n                /** @type {?} */\n                var oldTypeNameIndex = iconClassNameArr.findIndex(function (cls) { return cls !== 'anticon' && cls !== 'anticon-spin' && !!cls.match(iconTypeRE); });\n                if (oldTypeNameIndex !== -1) {\n                    iconClassNameArr.splice(oldTypeNameIndex, 1, \"anticon-\" + this.type);\n                    this._renderer.setAttribute(this._el, 'class', iconClassNameArr.join(' '));\n                }\n                else {\n                    this._renderer.addClass(this._el, \"anticon-\" + this.type);\n                }\n            }\n        };\n    /**\n     * @param {?} svg\n     * @return {?}\n     */\n    NzIconDirective.prototype._setSVGData = /**\n     * @param {?} svg\n     * @return {?}\n     */\n        function (svg) {\n            if (typeof this.type === 'string') {\n                this._renderer.setAttribute(svg, 'data-icon', this.type);\n                this._renderer.setAttribute(svg, 'aria-hidden', 'true');\n            }\n        };\n    /**\n     * @param {?} svg\n     * @return {?}\n     */\n    NzIconDirective.prototype._addExtraModifications = /**\n     * @param {?} svg\n     * @return {?}\n     */\n        function (svg) {\n            this._toggleSpin(svg);\n            this._setSVGData(svg);\n        };\n    /**\n     * @return {?}\n     */\n    NzIconDirective.prototype.ngOnChanges = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (!this.iconfont) {\n                // For ant design icons.\n                this._setClassName();\n                this._changeIcon().then(function (svg) {\n                    _this._addExtraModifications(svg);\n                }).catch(function (err) {\n                    if (err) {\n                        console.error(err);\n                        console.warn('[NG-ZORRO]', \"You can find more about this error on http://ng.ant.design/components/icon/en\");\n                    }\n                });\n            }\n            else {\n                // For iconfont icons.\n                this._setSVGElement(this._iconService.createIconfontIcon(\"#\" + this.iconfont));\n            }\n        };\n    /**\n     * Subscribe to DOM element attribute change events, so when user use ngClass or something the icon changes with it.\n     */\n    /**\n     * Subscribe to DOM element attribute change events, so when user use ngClass or something the icon changes with it.\n     * @return {?}\n     */\n    NzIconDirective.prototype.ngOnInit = /**\n     * Subscribe to DOM element attribute change events, so when user use ngClass or something the icon changes with it.\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this._el = this._elementRef.nativeElement;\n            // Make the component compatible to old class=\"anticon\" API.\n            if (this._el && !this.type) {\n                this._warnAPI('old');\n                this._classChangeHandler(this._el.className);\n                this._classNameObserver = new MutationObserver(function (mutations) {\n                    mutations\n                        .filter(function (mutation) { return mutation.attributeName === 'class'; })\n                        .forEach(function (mutation) { return _this._classChangeHandler(( /** @type {?} */(mutation.target)).className); });\n                });\n                this._classNameObserver.observe(this._elementRef.nativeElement, { attributes: true });\n            }\n            if (!this._el.classList.contains('anticon')) {\n                this._renderer.setAttribute(this._el, 'class', \"anticon \" + this._el.className);\n            }\n            if (this.type) {\n                this._setClassName();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzIconDirective.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            if (this._classNameObserver) {\n                this._classNameObserver.disconnect();\n            }\n        };\n    /**\n     * If custom content is provided, should try to normalize the svg element.\n     */\n    /**\n     * If custom content is provided, should try to normalize the svg element.\n     * @return {?}\n     */\n    NzIconDirective.prototype.ngAfterContentChecked = /**\n     * If custom content is provided, should try to normalize the svg element.\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var children = ( /** @type {?} */(this._elementRef.nativeElement)).children;\n            if (children && children.length && !this.type) {\n                this._iconService.normalizeSvgElement(/** @type {?} */ (children[0]));\n            }\n        };\n    return NzIconDirective;\n}(IconDirective));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzIconModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzIconModule() {\n    }\n    return NzIconModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar fadeAnimation = /*@__PURE__*/ trigger('fadeAnimation', [\n    /*@__PURE__*/ state('void', /*@__PURE__*/ style({ opacity: 0 })),\n    /*@__PURE__*/ state('true', /*@__PURE__*/ style({ opacity: 1 })),\n    /*@__PURE__*/ state('false', /*@__PURE__*/ style({ opacity: 0 })),\n    /*@__PURE__*/ transition('* => true', /*@__PURE__*/ animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    /*@__PURE__*/ transition('* => void', /*@__PURE__*/ animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n]);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzAlertComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzAlertComponent() {\n        this._banner = false;\n        this._closeable = false;\n        this._showIcon = false;\n        this._type = 'info';\n        this.display = true;\n        this.isTypeSet = false;\n        this.isShowIconSet = false;\n        this.prefixClass = 'ant-alert';\n        this.nzOnClose = new EventEmitter();\n    }\n    Object.defineProperty(NzAlertComponent.prototype, \"nzDescription\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._description;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.isDescriptionString = !(value instanceof TemplateRef);\n            this._description = value;\n            this.updateOuterClassMap();\n            this.updateIconClassMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzAlertComponent.prototype, \"nzCloseText\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._closeText;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.isCloseTextString = !(value instanceof TemplateRef);\n            this._closeText = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzAlertComponent.prototype, \"nzMessage\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._message;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.isMessageString = !(value instanceof TemplateRef);\n            this._message = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzAlertComponent.prototype, \"nzType\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._type;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._type = value;\n            this.isTypeSet = true;\n            this.updateOuterClassMap();\n            this.updateIconClassMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzAlertComponent.prototype, \"nzBanner\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._banner;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._banner = toBoolean(value);\n            if (!this.isTypeSet) {\n                this.nzType = 'warning';\n            }\n            if (!this.isShowIconSet) {\n                this.nzShowIcon = true;\n            }\n            this.updateOuterClassMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzAlertComponent.prototype, \"nzCloseable\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._closeable;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._closeable = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzAlertComponent.prototype, \"nzShowIcon\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._showIcon;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._showIcon = toBoolean(value);\n            this.isShowIconSet = true;\n            this.updateOuterClassMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzAlertComponent.prototype.closeAlert = /**\n     * @return {?}\n     */\n        function () {\n            this.display = false;\n        };\n    /**\n     * @return {?}\n     */\n    NzAlertComponent.prototype.onFadeAnimationDone = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.display) {\n                this.nzOnClose.emit(true);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzAlertComponent.prototype.updateOuterClassMap = /**\n     * @return {?}\n     */\n        function () {\n            var _a;\n            this.outerClassMap = (_a = {},\n                _a[\"\" + this.prefixClass] = true,\n                _a[this.prefixClass + \"-\" + this.nzType] = true,\n                _a[this.prefixClass + \"-no-icon\"] = !this.nzShowIcon,\n                _a[this.prefixClass + \"-banner\"] = this.nzBanner,\n                _a[this.prefixClass + \"-with-description\"] = !!this.nzDescription,\n                _a);\n        };\n    /**\n     * @return {?}\n     */\n    NzAlertComponent.prototype.updateIconClassMap = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            /** @type {?} */\n            var iconType = {\n                'close-circle-o': this.nzDescription && this.nzType === 'error',\n                'check-circle-o': this.nzDescription && this.nzType === 'success',\n                'info-circle-o': this.nzDescription && this.nzType === 'info',\n                'exclamation-circle-o': this.nzDescription && this.nzType === 'warning',\n                'close-circle-fill': (!this.nzDescription) && this.nzType === 'error',\n                'check-circle-fill': (!this.nzDescription) && this.nzType === 'success',\n                'info-circle-fill': (!this.nzDescription) && this.nzType === 'info',\n                'exclamation-circle-fill': (!this.nzDescription) && this.nzType === 'warning'\n            };\n            Object.keys(iconType).forEach(function (key) {\n                if (iconType[key]) {\n                    _this.iconType = key;\n                }\n            });\n        };\n    /**\n     * @return {?}\n     */\n    NzAlertComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.updateIconClassMap();\n            this.updateOuterClassMap();\n        };\n    return NzAlertComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzAlertModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzAlertModule() {\n    }\n    return NzAlertModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar sharpMatcherRegx = /#([^#]+)$/;\nvar NzAnchorComponent = /** @class */ /*@__PURE__*/ (function () {\n    // endregion\n    /* tslint:disable-next-line:no-any */\n    function NzAnchorComponent(scrollSrv, doc, cd) {\n        this.scrollSrv = scrollSrv;\n        this.doc = doc;\n        this.cd = cd;\n        this.links = [];\n        this.animating = false;\n        this.target = null;\n        this.scroll$ = null;\n        this.visible = false;\n        this.wrapperStyle = { 'max-height': '100vh' };\n        this._affix = true;\n        this._bounds = 5;\n        this._showInkInFixed = false;\n        this.nzClick = new EventEmitter();\n        this.nzScroll = new EventEmitter();\n    }\n    Object.defineProperty(NzAnchorComponent.prototype, \"nzAffix\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._affix;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._affix = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzAnchorComponent.prototype, \"nzBounds\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._bounds;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._bounds = toNumber(value, 5);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzAnchorComponent.prototype, \"nzOffsetTop\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._offsetTop;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._offsetTop = toNumber(value, 0);\n            this.wrapperStyle = {\n                'max-height': \"calc(100vh - \" + this._offsetTop + \"px)\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzAnchorComponent.prototype, \"nzShowInkInFixed\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._showInkInFixed;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._showInkInFixed = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzAnchorComponent.prototype, \"nzTarget\", {\n        set: /**\n         * @param {?} el\n         * @return {?}\n         */ function (el) {\n            this.target = el;\n            this.registerScrollEvent();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} link\n     * @return {?}\n     */\n    NzAnchorComponent.prototype.registerLink = /**\n     * @param {?} link\n     * @return {?}\n     */\n        function (link) {\n            this.links.push(link);\n        };\n    /**\n     * @param {?} link\n     * @return {?}\n     */\n    NzAnchorComponent.prototype.unregisterLink = /**\n     * @param {?} link\n     * @return {?}\n     */\n        function (link) {\n            this.links.splice(this.links.indexOf(link), 1);\n        };\n    /**\n     * @return {?}\n     */\n    NzAnchorComponent.prototype.getTarget = /**\n     * @return {?}\n     */\n        function () {\n            return this.target || window;\n        };\n    /**\n     * @return {?}\n     */\n    NzAnchorComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            this.registerScrollEvent();\n        };\n    /**\n     * @return {?}\n     */\n    NzAnchorComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.removeListen();\n        };\n    /**\n     * @return {?}\n     */\n    NzAnchorComponent.prototype.registerScrollEvent = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.removeListen();\n            this.scroll$ = fromEvent(this.getTarget(), 'scroll').pipe(throttleTime(50), distinctUntilChanged())\n                .subscribe(function (e) { return _this.handleScroll(); });\n            // 由于页面刷新时滚动条位置的记忆\n            // 倒置在dom未渲染完成，导致计算不正确\n            setTimeout(function () { return _this.handleScroll(); });\n        };\n    /**\n     * @return {?}\n     */\n    NzAnchorComponent.prototype.removeListen = /**\n     * @return {?}\n     */\n        function () {\n            if (this.scroll$) {\n                this.scroll$.unsubscribe();\n            }\n        };\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    NzAnchorComponent.prototype.getOffsetTop = /**\n     * @param {?} element\n     * @return {?}\n     */\n        function (element) {\n            if (!element || !element.getClientRects().length) {\n                return 0;\n            }\n            /** @type {?} */\n            var rect = element.getBoundingClientRect();\n            if (!rect.width && !rect.height) {\n                return rect.top;\n            }\n            return rect.top - element.ownerDocument.documentElement.clientTop;\n        };\n    /**\n     * @return {?}\n     */\n    NzAnchorComponent.prototype.handleScroll = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this.animating) {\n                return;\n            }\n            /** @type {?} */\n            var sections = [];\n            /** @type {?} */\n            var scope = (this.nzOffsetTop || 0) + this.nzBounds;\n            this.links.forEach(function (comp) {\n                /** @type {?} */\n                var sharpLinkMatch = sharpMatcherRegx.exec(comp.nzHref.toString());\n                if (!sharpLinkMatch) {\n                    return;\n                }\n                /** @type {?} */\n                var target = _this.doc.getElementById(sharpLinkMatch[1]);\n                if (target && _this.getOffsetTop(target) < scope) {\n                    /** @type {?} */\n                    var top_1 = _this.getOffsetTop(target);\n                    sections.push({\n                        top: top_1,\n                        comp: comp\n                    });\n                }\n            });\n            this.visible = !!sections.length;\n            if (!this.visible) {\n                this.clearActive();\n                this.cd.detectChanges();\n            }\n            else {\n                /** @type {?} */\n                var maxSection = sections.reduce(function (prev, curr) { return curr.top > prev.top ? curr : prev; });\n                this.handleActive(maxSection.comp);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzAnchorComponent.prototype.clearActive = /**\n     * @return {?}\n     */\n        function () {\n            this.links.forEach(function (i) { return i.active = false; });\n        };\n    /**\n     * @param {?} comp\n     * @return {?}\n     */\n    NzAnchorComponent.prototype.handleActive = /**\n     * @param {?} comp\n     * @return {?}\n     */\n        function (comp) {\n            this.clearActive();\n            comp.active = true;\n            this.cd.detectChanges();\n            /** @type {?} */\n            var linkNode = /** @type {?} */ (( /** @type {?} */(comp.el.nativeElement)).querySelector('.ant-anchor-link-title'));\n            this.ink.nativeElement.style.top = linkNode.offsetTop + linkNode.clientHeight / 2 - 4.5 + \"px\";\n            this.nzScroll.emit(comp);\n        };\n    /**\n     * @param {?} linkComp\n     * @return {?}\n     */\n    NzAnchorComponent.prototype.handleScrollTo = /**\n     * @param {?} linkComp\n     * @return {?}\n     */\n        function (linkComp) {\n            var _this = this;\n            /** @type {?} */\n            var el = this.doc.querySelector(linkComp.nzHref);\n            if (!el) {\n                return;\n            }\n            this.animating = true;\n            /** @type {?} */\n            var containerScrollTop = this.scrollSrv.getScroll(this.getTarget());\n            /** @type {?} */\n            var elOffsetTop = this.scrollSrv.getOffset(el).top;\n            /** @type {?} */\n            var targetScrollTop = containerScrollTop + elOffsetTop - (this.nzOffsetTop || 0);\n            this.scrollSrv.scrollTo(this.getTarget(), targetScrollTop, null, function () {\n                _this.animating = false;\n                _this.handleActive(linkComp);\n            });\n            this.nzClick.emit(linkComp.nzHref);\n        };\n    return NzAnchorComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzAnchorLinkComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzAnchorLinkComponent(el, anchorComp) {\n        this.el = el;\n        this.anchorComp = anchorComp;\n        this.nzHref = '#';\n        this.titleStr = '';\n        this.active = false;\n    }\n    Object.defineProperty(NzAnchorLinkComponent.prototype, \"nzTitle\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (value instanceof TemplateRef) {\n                this.titleTpl = value;\n            }\n            else {\n                this.titleStr = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzAnchorLinkComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.anchorComp.registerLink(this);\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzAnchorLinkComponent.prototype.goToClick = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            e.preventDefault();\n            e.stopPropagation();\n            this.anchorComp.handleScrollTo(this);\n        };\n    /**\n     * @return {?}\n     */\n    NzAnchorLinkComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.anchorComp.unregisterLink(this);\n        };\n    return NzAnchorLinkComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzAnchorModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzAnchorModule() {\n    }\n    return NzAnchorModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzAutocompleteOptgroupComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzAutocompleteOptgroupComponent() {\n    }\n    Object.defineProperty(NzAutocompleteOptgroupComponent.prototype, \"nzLabel\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._label;\n        },\n        /** group 的 label，支持 'string' 和 `TemplateRef` */\n        set: /**\n         * group 的 label，支持 'string' 和 `TemplateRef`\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.isLabelString = !(value instanceof TemplateRef);\n            this._label = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return NzAutocompleteOptgroupComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzOptionSelectionChange = /** @class */ /*@__PURE__*/ (function () {\n    function NzOptionSelectionChange(source, isUserInput) {\n        if (isUserInput === void 0) {\n            isUserInput = false;\n        }\n        this.source = source;\n        this.isUserInput = isUserInput;\n    }\n    return NzOptionSelectionChange;\n}());\nvar NzAutocompleteOptionComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzAutocompleteOptionComponent(changeDetectorRef, element) {\n        this.changeDetectorRef = changeDetectorRef;\n        this.element = element;\n        this.disabled = false;\n        this.active = false;\n        this.selected = false;\n        this.selectionChange = new EventEmitter();\n    }\n    Object.defineProperty(NzAutocompleteOptionComponent.prototype, \"nzDisabled\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.disabled;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.disabled = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** 选择 */\n    /**\n     * 选择\n     * @return {?}\n     */\n    NzAutocompleteOptionComponent.prototype.select = /**\n     * 选择\n     * @return {?}\n     */\n        function () {\n            this.selected = true;\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent();\n        };\n    /** 取消选择 */\n    /**\n     * 取消选择\n     * @return {?}\n     */\n    NzAutocompleteOptionComponent.prototype.deselect = /**\n     * 取消选择\n     * @return {?}\n     */\n        function () {\n            this.selected = false;\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent();\n        };\n    /** 获取用于显示的 label */\n    /**\n     * 获取用于显示的 label\n     * @return {?}\n     */\n    NzAutocompleteOptionComponent.prototype.getLabel = /**\n     * 获取用于显示的 label\n     * @return {?}\n     */\n        function () {\n            return this.nzLabel || this.nzValue.toString();\n        };\n    /** 设置激活样式 (仅限样式) */\n    /**\n     * 设置激活样式 (仅限样式)\n     * @return {?}\n     */\n    NzAutocompleteOptionComponent.prototype.setActiveStyles = /**\n     * 设置激活样式 (仅限样式)\n     * @return {?}\n     */\n        function () {\n            if (!this.active) {\n                this.active = true;\n                this.changeDetectorRef.markForCheck();\n            }\n        };\n    /** 设置非激活样式 (仅限样式) */\n    /**\n     * 设置非激活样式 (仅限样式)\n     * @return {?}\n     */\n    NzAutocompleteOptionComponent.prototype.setInactiveStyles = /**\n     * 设置非激活样式 (仅限样式)\n     * @return {?}\n     */\n        function () {\n            if (this.active) {\n                this.active = false;\n                this.changeDetectorRef.markForCheck();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzAutocompleteOptionComponent.prototype.scrollIntoViewIfNeeded = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            /* tslint:disable-next-line:no-string-literal */\n            if (this.element.nativeElement && this.element.nativeElement['scrollIntoViewIfNeeded']) {\n                /* tslint:disable-next-line:no-string-literal */\n                setTimeout(function () { return _this.element.nativeElement['scrollIntoViewIfNeeded'](false); }, 150);\n            }\n        };\n    /**\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    NzAutocompleteOptionComponent.prototype.emitSelectionChangeEvent = /**\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n        function (isUserInput) {\n            if (isUserInput === void 0) {\n                isUserInput = false;\n            }\n            this.selectionChange.emit(new NzOptionSelectionChange(this, isUserInput));\n        };\n    /**\n     * @return {?}\n     */\n    NzAutocompleteOptionComponent.prototype.selectViaInteraction = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.disabled) {\n                this.selected = !this.selected;\n                if (this.selected) {\n                    this.setActiveStyles();\n                }\n                else {\n                    this.setInactiveStyles();\n                }\n                this.emitSelectionChangeEvent(true);\n                this.changeDetectorRef.markForCheck();\n            }\n        };\n    return NzAutocompleteOptionComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar dropDownAnimation = /*@__PURE__*/ trigger('dropDownAnimation', [\n    /*@__PURE__*/ state('bottom', /*@__PURE__*/ style({\n        opacity: 1,\n        transform: 'scaleY(1)',\n        transformOrigin: '0% 0%'\n    })),\n    /*@__PURE__*/ transition('void => bottom', [\n        /*@__PURE__*/ style({\n            opacity: 0,\n            transform: 'scaleY(0.8)',\n            transformOrigin: '0% 0%'\n        }),\n        /*@__PURE__*/ animate('150ms cubic-bezier(0.23, 1, 0.32, 1)')\n    ]),\n    /*@__PURE__*/ transition('bottom => void', [\n        /*@__PURE__*/ animate('150ms cubic-bezier(0.23, 1, 0.32, 1)', /*@__PURE__*/ style({\n            opacity: 0,\n            transform: 'scaleY(0.8)',\n            transformOrigin: '0% 0%'\n        }))\n    ]),\n    /*@__PURE__*/ state('top', /*@__PURE__*/ style({\n        opacity: 1,\n        transform: 'scaleY(1)',\n        transformOrigin: '0% 100%'\n    })),\n    /*@__PURE__*/ transition('void => top', [\n        /*@__PURE__*/ style({\n            opacity: 0,\n            transform: 'scaleY(0.8)',\n            transformOrigin: '0% 100%'\n        }),\n        /*@__PURE__*/ animate('150ms cubic-bezier(0.23, 1, 0.32, 1)')\n    ]),\n    /*@__PURE__*/ transition('top => void', [\n        /*@__PURE__*/ animate('150ms cubic-bezier(0.23, 1, 0.32, 1)', /*@__PURE__*/ style({\n            opacity: 0,\n            transform: 'scaleY(0.8)',\n            transformOrigin: '0% 100%'\n        }))\n    ])\n]);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzAutocompleteComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzAutocompleteComponent(changeDetectorRef, _ngZone) {\n        var _this = this;\n        this.changeDetectorRef = changeDetectorRef;\n        this._ngZone = _ngZone;\n        this.activeItemIndex = -1;\n        this.showPanel = false;\n        this.isOpen = false;\n        this.dropDownPosition = 'bottom';\n        this._defaultActiveFirstOption = true;\n        this._backfill = false;\n        /**\n         * 选择时发出的事件\n         */\n        this.selectionChange = new EventEmitter();\n        /**\n         * 用于组件内部监听 options 的选择变化\n         */\n        this.optionSelectionChanges = defer(function () {\n            if (_this.options) {\n                return merge.apply(void 0, __spread(_this.options.map(function (option) { return option.selectionChange; })));\n            }\n            return _this._ngZone.onStable\n                .asObservable()\n                .pipe(take(1), switchMap(function () { return _this.optionSelectionChanges; }));\n        });\n    }\n    Object.defineProperty(NzAutocompleteComponent.prototype, \"options\", {\n        /** 组件支持设置 dataSource 和 content 设置 options\n         *  这个属性为其提供方便的访问方式 */\n        get: /**\n         * 组件支持设置 dataSource 和 content 设置 options\n         *  这个属性为其提供方便的访问方式\n         * @return {?}\n         */ function () {\n            // 优先使用 dataSource\n            if (this.nzDataSource) {\n                return this.fromDataSourceOptions;\n            }\n            else {\n                return this.fromContentOptions;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzAutocompleteComponent.prototype, \"nzDefaultActiveFirstOption\", {\n        /** 是否默认高亮第一个选项，默认 `true` */\n        get: /**\n         * 是否默认高亮第一个选项，默认 `true`\n         * @return {?}\n         */ function () {\n            return this._defaultActiveFirstOption;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._defaultActiveFirstOption = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzAutocompleteComponent.prototype, \"nzBackfill\", {\n        /** 使用键盘选择选项的时候把选中项回填到输入框中，默认 `false` */\n        get: /**\n         * 使用键盘选择选项的时候把选中项回填到输入框中，默认 `false`\n         * @return {?}\n         */ function () {\n            return this._backfill;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._backfill = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzAutocompleteComponent.prototype, \"nzDataSource\", {\n        /** 自动完成的数据源 */\n        get: /**\n         * 自动完成的数据源\n         * @return {?}\n         */ function () {\n            return this._dataSource;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._dataSource = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzAutocompleteComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            this.optionsInit();\n        };\n    /**\n     * @return {?}\n     */\n    NzAutocompleteComponent.prototype.setVisibility = /**\n     * @return {?}\n     */\n        function () {\n            this.showPanel = !!this.options.length;\n            this.changeDetectorRef.markForCheck();\n        };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    NzAutocompleteComponent.prototype.setActiveItem = /**\n     * @param {?} index\n     * @return {?}\n     */\n        function (index) {\n            /** @type {?} */\n            var activeItem = this.options.toArray()[index];\n            if (activeItem && !activeItem.active) {\n                this.activeItem = activeItem;\n                this.activeItemIndex = index;\n                this.clearSelectedOptions(this.activeItem);\n                this.activeItem.setActiveStyles();\n                this.changeDetectorRef.markForCheck();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzAutocompleteComponent.prototype.setNextItemActive = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var nextIndex = this.activeItemIndex + 1 <= this.options.length - 1 ? this.activeItemIndex + 1 : 0;\n            this.setActiveItem(nextIndex);\n        };\n    /**\n     * @return {?}\n     */\n    NzAutocompleteComponent.prototype.setPreviousItemActive = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var previousIndex = this.activeItemIndex - 1 < 0 ? this.options.length - 1 : this.activeItemIndex - 1;\n            this.setActiveItem(previousIndex);\n        };\n    /**\n     * @param {?} option\n     * @return {?}\n     */\n    NzAutocompleteComponent.prototype.getOptionIndex = /**\n     * @param {?} option\n     * @return {?}\n     */\n        function (option) {\n            return this.options.reduce(function (result, current, index) {\n                return result === undefined ? (option === current ? index : undefined) : result;\n            }, undefined);\n        };\n    /**\n     * @return {?}\n     */\n    NzAutocompleteComponent.prototype.optionsInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.setVisibility();\n            this.subscribeOptionChanges();\n            /** @type {?} */\n            var changes = this.nzDataSource ? this.fromDataSourceOptions.changes : this.fromContentOptions.changes;\n            // 用于处理动态/异步的 options\n            changes.subscribe(function (e) {\n                if (!e.dirty && _this.isOpen) {\n                    setTimeout(function (_) { return _this.setVisibility(); });\n                }\n                _this.subscribeOptionChanges();\n            });\n        };\n    /**\n     * 清除 Options 的激活状态\n     * @param {?=} skip\n     * @param {?=} deselect\n     * @return {?}\n     */\n    NzAutocompleteComponent.prototype.clearSelectedOptions = /**\n     * 清除 Options 的激活状态\n     * @param {?=} skip\n     * @param {?=} deselect\n     * @return {?}\n     */\n        function (skip, deselect) {\n            if (deselect === void 0) {\n                deselect = false;\n            }\n            this.options.forEach(function (option) {\n                if (option !== skip) {\n                    if (deselect) {\n                        option.deselect();\n                    }\n                    option.setInactiveStyles();\n                }\n            });\n        };\n    /**\n     * @return {?}\n     */\n    NzAutocompleteComponent.prototype.subscribeOptionChanges = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.selectionChangeSubscription = this.optionSelectionChanges\n                .pipe(filter(function (event) { return event.isUserInput; }))\n                .subscribe(function (event) {\n                event.source.select();\n                event.source.setActiveStyles();\n                _this.activeItem = event.source;\n                _this.activeItemIndex = _this.getOptionIndex(_this.activeItem);\n                _this.clearSelectedOptions(event.source, true);\n                _this.selectionChange.emit(event.source);\n            });\n        };\n    return NzAutocompleteComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar NZ_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: /*@__PURE__*/ forwardRef(function () { return NzAutocompleteTriggerDirective; }),\n    multi: true\n};\n/**\n * @return {?}\n */\nfunction getNzAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `nz-autocomplete`. ' +\n        'Make sure that the id passed to the `nzAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\nvar NzAutocompleteTriggerDirective = /** @class */ /*@__PURE__*/ (function () {\n    function NzAutocompleteTriggerDirective(_element, _overlay, _viewContainerRef, \n    // tslint:disable-next-line:no-any\n    _document) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._document = _document;\n        this._onChange = function () { };\n        this._onTouched = function () { };\n        this.panelOpen = false;\n    }\n    Object.defineProperty(NzAutocompleteTriggerDirective.prototype, \"activeOption\", {\n        /**\n         * 当前被激活的 Option\n         */\n        get: /**\n         * 当前被激活的 Option\n         * @return {?}\n         */ function () {\n            if (this.nzAutocomplete && this.nzAutocomplete.options.length) {\n                return this.nzAutocomplete.activeItem;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzAutocompleteTriggerDirective.prototype.openPanel = /**\n     * @return {?}\n     */\n        function () {\n            this.attachOverlay();\n        };\n    /**\n     * @return {?}\n     */\n    NzAutocompleteTriggerDirective.prototype.closePanel = /**\n     * @return {?}\n     */\n        function () {\n            if (this.panelOpen) {\n                this.nzAutocomplete.isOpen = this.panelOpen = false;\n                if (this.overlayRef && this.overlayRef.hasAttached()) {\n                    this.overlayRef.detach();\n                    this.selectionChangeSubscription.unsubscribe();\n                    this.overlayBackdropClickSubscription.unsubscribe();\n                    this.overlayPositionChangeSubscription.unsubscribe();\n                    this.optionsChangeSubscription.unsubscribe();\n                }\n            }\n        };\n    /**\n     * 订阅数据源改变事件\n     * @return {?}\n     */\n    NzAutocompleteTriggerDirective.prototype.subscribeOptionsChange = /**\n     * 订阅数据源改变事件\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            return this.nzAutocomplete.options.changes.pipe(delay(0)).subscribe(function () {\n                _this.resetActiveItem();\n            });\n        };\n    /**\n     * 订阅 option 选择事件\n     * 并设置值\n     * @return {?}\n     */\n    NzAutocompleteTriggerDirective.prototype.subscribeSelectionChange = /**\n     * 订阅 option 选择事件\n     * 并设置值\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            return this.nzAutocomplete.selectionChange\n                .subscribe(function (option) {\n                _this.setValueAndClose(option);\n            });\n        };\n    /**\n     * 订阅组件外部的单击事件\n     * 并关闭弹窗\n     * @return {?}\n     */\n    NzAutocompleteTriggerDirective.prototype.subscribeOverlayBackdropClick = /**\n     * 订阅组件外部的单击事件\n     * 并关闭弹窗\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'touchend'))\n                .subscribe(function (event) {\n                /** @type {?} */\n                var clickTarget = /** @type {?} */ (event.target);\n                // 确保不是点击组件自身\n                if (clickTarget !== _this._element.nativeElement && !_this.overlayRef.overlayElement.contains(clickTarget) && _this.panelOpen) {\n                    _this.closePanel();\n                }\n            });\n        };\n    /**\n     * 订阅 Overlay 位置改变事件\n     * 并重新设置动画方向\n     * @return {?}\n     */\n    NzAutocompleteTriggerDirective.prototype.subscribeOverlayPositionChange = /**\n     * 订阅 Overlay 位置改变事件\n     * 并重新设置动画方向\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            return this.positionStrategy.positionChanges\n                .pipe(map(function (position) { return position.connectionPair.originY; }), distinct())\n                .subscribe(function (position) {\n                _this.nzAutocomplete.dropDownPosition = position;\n            });\n        };\n    /**\n     * @return {?}\n     */\n    NzAutocompleteTriggerDirective.prototype.attachOverlay = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (!this.nzAutocomplete) {\n                throw getNzAutocompleteMissingPanelError();\n            }\n            if (!this.overlayRef) {\n                this.portal = new TemplatePortal(this.nzAutocomplete.template, this._viewContainerRef);\n                this.overlayRef = this._overlay.create(this.getOverlayConfig());\n            }\n            if (this.overlayRef && !this.overlayRef.hasAttached()) {\n                this.overlayRef.attach(this.portal);\n                this.overlayPositionChangeSubscription = this.subscribeOverlayPositionChange();\n                this.selectionChangeSubscription = this.subscribeSelectionChange();\n                this.overlayBackdropClickSubscription = this.subscribeOverlayBackdropClick();\n                this.optionsChangeSubscription = this.subscribeOptionsChange();\n            }\n            this.nzAutocomplete.isOpen = this.panelOpen = true;\n            this.nzAutocomplete.setVisibility();\n            this.overlayRef.updateSize({ width: this.nzAutocomplete.nzWidth || this.getHostWidth() });\n            setTimeout(function () {\n                if (_this.overlayRef) {\n                    _this.overlayRef.updatePosition();\n                }\n            }, 150);\n            this.resetActiveItem();\n            if (this.activeOption) {\n                this.activeOption.scrollIntoViewIfNeeded();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzAutocompleteTriggerDirective.prototype.destroyPanel = /**\n     * @return {?}\n     */\n        function () {\n            if (this.overlayRef) {\n                this.closePanel();\n                this.overlayRef.dispose();\n                this.overlayRef = null;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzAutocompleteTriggerDirective.prototype.getOverlayConfig = /**\n     * @return {?}\n     */\n        function () {\n            return new OverlayConfig({\n                positionStrategy: this.getOverlayPosition(),\n                scrollStrategy: this._overlay.scrollStrategies.reposition(),\n                // 如果没有设置 nzWidth 则使用 Host 元素的宽度\n                width: this.nzAutocomplete.nzWidth || this.getHostWidth()\n            });\n        };\n    /**\n     * @return {?}\n     */\n    NzAutocompleteTriggerDirective.prototype.getConnectedElement = /**\n     * @return {?}\n     */\n        function () {\n            return this._element;\n        };\n    /**\n     * @return {?}\n     */\n    NzAutocompleteTriggerDirective.prototype.getHostWidth = /**\n     * @return {?}\n     */\n        function () {\n            return this.getConnectedElement().nativeElement.getBoundingClientRect().width;\n        };\n    /**\n     * @return {?}\n     */\n    NzAutocompleteTriggerDirective.prototype.getOverlayPosition = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var positions = [\n                new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\n                new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' })\n            ];\n            this.positionStrategy = this._overlay.position()\n                .flexibleConnectedTo(this.getConnectedElement())\n                .withPositions(positions)\n                .withFlexibleDimensions(false)\n                .withPush(false);\n            return this.positionStrategy;\n        };\n    /**\n     * @return {?}\n     */\n    NzAutocompleteTriggerDirective.prototype.resetActiveItem = /**\n     * @return {?}\n     */\n        function () {\n            if (this.nzAutocomplete.activeItem && this.nzAutocomplete.getOptionIndex(this.nzAutocomplete.activeItem)) {\n                this.nzAutocomplete.setActiveItem(this.nzAutocomplete.getOptionIndex(this.nzAutocomplete.activeItem));\n            }\n            else {\n                this.nzAutocomplete.setActiveItem(this.nzAutocomplete.nzDefaultActiveFirstOption ? 0 : -1);\n            }\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NzAutocompleteTriggerDirective.prototype.handleKeydown = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            /** @type {?} */\n            var keyCode = event.keyCode;\n            /** @type {?} */\n            var isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (keyCode === ESCAPE) {\n                event.preventDefault();\n            }\n            if (this.panelOpen && (keyCode === ESCAPE || keyCode === TAB)) {\n                // 通过 tab / ESC 关闭，重置输入标签 value\n                if (this.activeOption.getLabel() !== this.previousValue) {\n                    this.setTriggerValue(this.previousValue);\n                }\n                this.closePanel();\n            }\n            else if (this.panelOpen && keyCode === ENTER) {\n                event.preventDefault();\n                if (this.nzAutocomplete.showPanel && this.activeOption) {\n                    this.activeOption.selectViaInteraction();\n                }\n            }\n            else if (this.panelOpen && isArrowKey && this.nzAutocomplete.showPanel) {\n                event.stopPropagation();\n                if (keyCode === UP_ARROW) {\n                    this.nzAutocomplete.setPreviousItemActive();\n                }\n                else {\n                    this.nzAutocomplete.setNextItemActive();\n                }\n                if (this.activeOption) {\n                    this.activeOption.scrollIntoViewIfNeeded();\n                }\n                this.doBackfill();\n            }\n        };\n    /**\n     * @param {?} option\n     * @return {?}\n     */\n    NzAutocompleteTriggerDirective.prototype.setValueAndClose = /**\n     * @param {?} option\n     * @return {?}\n     */\n        function (option) {\n            /** @type {?} */\n            var value = option.nzValue;\n            this.setTriggerValue(option.getLabel());\n            this._onChange(value);\n            this._element.nativeElement.focus();\n            this.closePanel();\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzAutocompleteTriggerDirective.prototype.setTriggerValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this._element.nativeElement.value = value || '';\n        };\n    /**\n     * @return {?}\n     */\n    NzAutocompleteTriggerDirective.prototype.doBackfill = /**\n     * @return {?}\n     */\n        function () {\n            if (this.nzAutocomplete.nzBackfill) {\n                // 只设置标签显示值\n                this.setTriggerValue(this.nzAutocomplete.activeItem.getLabel());\n            }\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NzAutocompleteTriggerDirective.prototype.handleInput = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            /** @type {?} */\n            var target = /** @type {?} */ (event.target);\n            /** @type {?} */\n            var value = target.value;\n            if (target.type === 'number') {\n                value = value === '' ? null : parseFloat(value);\n            }\n            if (this.canOpen() && document.activeElement === event.target &&\n                this.previousValue !== value) {\n                this.previousValue = value;\n                this._onChange(value);\n                this.openPanel();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzAutocompleteTriggerDirective.prototype.handleFocus = /**\n     * @return {?}\n     */\n        function () {\n            if (this.canOpen()) {\n                this.previousValue = this._element.nativeElement.value;\n                this.openPanel();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzAutocompleteTriggerDirective.prototype.handleBlur = /**\n     * @return {?}\n     */\n        function () {\n            this._onTouched();\n        };\n    /**\n     * @return {?}\n     */\n    NzAutocompleteTriggerDirective.prototype.canOpen = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var element = this._element.nativeElement;\n            return !element.readOnly && !element.disabled;\n        };\n    // tslint:disable-next-line:no-any\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzAutocompleteTriggerDirective.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.setTriggerValue(value);\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzAutocompleteTriggerDirective.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this._onChange = fn;\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzAutocompleteTriggerDirective.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this._onTouched = fn;\n        };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    NzAutocompleteTriggerDirective.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n        function (isDisabled) {\n            /** @type {?} */\n            var element = this._element.nativeElement;\n            element.disabled = isDisabled;\n            this.closePanel();\n        };\n    /**\n     * @return {?}\n     */\n    NzAutocompleteTriggerDirective.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.destroyPanel();\n        };\n    return NzAutocompleteTriggerDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzAutocompleteModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzAutocompleteModule() {\n    }\n    return NzAutocompleteModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzUpdateHostClassService = /** @class */ /*@__PURE__*/ (function () {\n    function NzUpdateHostClassService(renderer) {\n        this.renderer = renderer;\n        this.classMap = {};\n    }\n    /**\n     * @param {?} el\n     * @param {?} classMap\n     * @return {?}\n     */\n    NzUpdateHostClassService.prototype.updateHostClass = /**\n     * @param {?} el\n     * @param {?} classMap\n     * @return {?}\n     */\n        function (el, classMap) {\n            this.removeClass(el, this.classMap, this.renderer);\n            this.classMap = __assign({}, classMap);\n            this.addClass(el, this.classMap, this.renderer);\n        };\n    /**\n     * @param {?} el\n     * @param {?} classMap\n     * @param {?} renderer\n     * @return {?}\n     */\n    NzUpdateHostClassService.prototype.removeClass = /**\n     * @param {?} el\n     * @param {?} classMap\n     * @param {?} renderer\n     * @return {?}\n     */\n        function (el, classMap, renderer) {\n            for (var i in classMap) {\n                if (classMap.hasOwnProperty(i)) {\n                    renderer.removeClass(el, i);\n                }\n            }\n        };\n    /**\n     * @param {?} el\n     * @param {?} classMap\n     * @param {?} renderer\n     * @return {?}\n     */\n    NzUpdateHostClassService.prototype.addClass = /**\n     * @param {?} el\n     * @param {?} classMap\n     * @param {?} renderer\n     * @return {?}\n     */\n        function (el, classMap, renderer) {\n            for (var i in classMap) {\n                if (classMap.hasOwnProperty(i)) {\n                    if (classMap[i]) {\n                        renderer.addClass(el, i);\n                    }\n                }\n            }\n        };\n    return NzUpdateHostClassService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzAvatarComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzAvatarComponent(elementRef, cd, updateHostClassService) {\n        this.elementRef = elementRef;\n        this.cd = cd;\n        this.updateHostClassService = updateHostClassService;\n        this.el = this.elementRef.nativeElement;\n        this.prefixCls = 'ant-avatar';\n        this.sizeMap = { large: 'lg', small: 'sm' };\n        this.oldAPIIcon = true;\n        this.hasText = false;\n        this.hasSrc = true;\n        this.hasIcon = false;\n        this.nzShape = 'circle';\n        this.nzSize = 'default';\n    }\n    Object.defineProperty(NzAvatarComponent.prototype, \"nzIcon\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._icon;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (value) {\n                this.oldAPIIcon = value.indexOf('anticon') > -1;\n            }\n            this._icon = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzAvatarComponent.prototype.setClass = /**\n     * @return {?}\n     */\n        function () {\n            var _a;\n            /** @type {?} */\n            var classMap = (_a = {},\n                _a[this.prefixCls] = true,\n                _a[this.prefixCls + \"-\" + this.sizeMap[this.nzSize]] = this.sizeMap[this.nzSize],\n                _a[this.prefixCls + \"-\" + this.nzShape] = this.nzShape,\n                _a[this.prefixCls + \"-icon\"] = this.nzIcon,\n                _a[this.prefixCls + \"-image\"] = this.nzSrc,\n                _a);\n            this.updateHostClassService.updateHostClass(this.el, classMap);\n            this.cd.detectChanges();\n            return this;\n        };\n    /**\n     * @return {?}\n     */\n    NzAvatarComponent.prototype.imgError = /**\n     * @return {?}\n     */\n        function () {\n            this.hasSrc = false;\n            this.hasIcon = false;\n            this.hasText = false;\n            if (this.nzIcon) {\n                this.hasIcon = true;\n            }\n            else if (this.nzText) {\n                this.hasText = true;\n            }\n            this.setClass().notifyCalc();\n        };\n    /**\n     * @return {?}\n     */\n    NzAvatarComponent.prototype.calcStringSize = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.hasText) {\n                return;\n            }\n            /** @type {?} */\n            var childrenWidth = this.textEl.nativeElement.offsetWidth;\n            /** @type {?} */\n            var avatarWidth = this.el.getBoundingClientRect().width;\n            /** @type {?} */\n            var scale = avatarWidth - 8 < childrenWidth ? (avatarWidth - 8) / childrenWidth : 1;\n            if (scale === 1) {\n                this.textStyles = {};\n            }\n            else {\n                this.textStyles = {\n                    transform: \"scale(\" + scale + \")\",\n                    position: 'absolute',\n                    display: 'inline-block',\n                    left: \"calc(50% - \" + Math.round(childrenWidth / 2) + \"px)\"\n                };\n            }\n            this.cd.detectChanges();\n        };\n    /**\n     * @return {?}\n     */\n    NzAvatarComponent.prototype.notifyCalc = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            // If use ngAfterViewChecked, always demands more computations, so......\n            setTimeout(function () {\n                _this.calcStringSize();\n            });\n            return this;\n        };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NzAvatarComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            this.hasText = !this.nzSrc && !!this.nzText;\n            this.hasIcon = !this.nzSrc && !!this.nzIcon;\n            this.hasSrc = !!this.nzSrc;\n            this.setClass().notifyCalc();\n        };\n    return NzAvatarComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzAvatarModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzAvatarModule() {\n    }\n    return NzAvatarModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzBackTopComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzBackTopComponent(scrollSrv, cd) {\n        this.scrollSrv = scrollSrv;\n        this.cd = cd;\n        this.scroll$ = null;\n        this.target = null;\n        this.visible = false;\n        this._visibilityHeight = 400;\n        this.nzClick = new EventEmitter();\n    }\n    Object.defineProperty(NzBackTopComponent.prototype, \"nzVisibilityHeight\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._visibilityHeight;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._visibilityHeight = toNumber(value, 400);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzBackTopComponent.prototype, \"nzTarget\", {\n        set: /**\n         * @param {?} el\n         * @return {?}\n         */ function (el) {\n            this.target = el;\n            this.registerScrollEvent();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzBackTopComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.scroll$) {\n                this.registerScrollEvent();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzBackTopComponent.prototype.clickBackTop = /**\n     * @return {?}\n     */\n        function () {\n            this.scrollSrv.scrollTo(this.getTarget(), 0);\n            this.nzClick.emit(true);\n        };\n    /**\n     * @return {?}\n     */\n    NzBackTopComponent.prototype.getTarget = /**\n     * @return {?}\n     */\n        function () {\n            return this.target || window;\n        };\n    /**\n     * @return {?}\n     */\n    NzBackTopComponent.prototype.handleScroll = /**\n     * @return {?}\n     */\n        function () {\n            if (this.visible === this.scrollSrv.getScroll(this.getTarget()) > this.nzVisibilityHeight) {\n                return;\n            }\n            this.visible = !this.visible;\n            this.cd.detectChanges();\n        };\n    /**\n     * @return {?}\n     */\n    NzBackTopComponent.prototype.removeListen = /**\n     * @return {?}\n     */\n        function () {\n            if (this.scroll$) {\n                this.scroll$.unsubscribe();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzBackTopComponent.prototype.registerScrollEvent = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.removeListen();\n            this.handleScroll();\n            this.scroll$ = fromEvent(this.getTarget(), 'scroll').pipe(throttleTime(50), distinctUntilChanged())\n                .subscribe(function (e) { return _this.handleScroll(); });\n        };\n    /**\n     * @return {?}\n     */\n    NzBackTopComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.removeListen();\n        };\n    return NzBackTopComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzBackTopModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzBackTopModule() {\n    }\n    return NzBackTopModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzBadgeComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzBadgeComponent(zone, renderer, elementRef) {\n        this.zone = zone;\n        this.renderer = renderer;\n        this.elementRef = elementRef;\n        this._showDot = false;\n        this._showZero = false;\n        this.maxNumberArray = [];\n        this.countArray = [];\n        this.countSingleArray = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n        this.nzOverflowCount = 99;\n    }\n    Object.defineProperty(NzBadgeComponent.prototype, \"nzShowZero\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._showZero;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._showZero = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzBadgeComponent.prototype, \"nzDot\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._showDot;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._showDot = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzBadgeComponent.prototype, \"nzCount\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._count;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (value < 0) {\n                this._count = 0;\n            }\n            else {\n                this._count = value;\n            }\n            this.countArray = this._count.toString().split('');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzBadgeComponent.prototype, \"showSup\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzDot || this.nzCount > 0 || ((this.nzCount === 0) && this.nzShowZero);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzBadgeComponent.prototype.checkContent = /**\n     * @return {?}\n     */\n        function () {\n            if (isEmpty(this.contentElement.nativeElement)) {\n                this.renderer.addClass(this.elementRef.nativeElement, 'ant-badge-not-a-wrapper');\n            }\n            else {\n                this.renderer.removeClass(this.elementRef.nativeElement, 'ant-badge-not-a-wrapper');\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzBadgeComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.maxNumberArray = this.nzOverflowCount.toString().split('');\n        };\n    /**\n     * @return {?}\n     */\n    NzBadgeComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            this.checkContent();\n        };\n    return NzBadgeComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzBadgeModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzBadgeModule() {\n    }\n    return NzBadgeModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar ROUTE_DATA_BREADCRUMB = 'breadcrumb';\nvar NzBreadCrumbComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzBreadCrumbComponent(_injector) {\n        this._injector = _injector;\n        this._separator = '/';\n        this.$destroy = new Subject();\n        this.isTemplateRef = false;\n        this.nzAutoGenerate = false;\n        this.breadcrumbs = [];\n    }\n    Object.defineProperty(NzBreadCrumbComponent.prototype, \"nzSeparator\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._separator;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._separator = value;\n            this.isTemplateRef = value instanceof TemplateRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} route\n     * @param {?=} url\n     * @param {?=} breadcrumbs\n     * @return {?}\n     */\n    NzBreadCrumbComponent.prototype.getBreadcrumbs = /**\n     * @param {?} route\n     * @param {?=} url\n     * @param {?=} breadcrumbs\n     * @return {?}\n     */\n        function (route, url, breadcrumbs) {\n            if (url === void 0) {\n                url = '';\n            }\n            if (breadcrumbs === void 0) {\n                breadcrumbs = [];\n            }\n            var e_1, _a;\n            /** @type {?} */\n            var children = route.children;\n            if (children.length === 0) {\n                return breadcrumbs; // If there's no sub root, then stop the recurse and returns the generated breadcrumbs.\n            }\n            try {\n                for (var children_1 = __values(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {\n                    var child = children_1_1.value;\n                    if (child.outlet === PRIMARY_OUTLET) {\n                        /** @type {?} */\n                        var routeURL = child.snapshot.url.map(function (segment) { return segment.path; }).join('/');\n                        /** @type {?} */\n                        var nextUrl = url + (\"/\" + routeURL);\n                        // If have data, go to generate a breadcrumb for it.\n                        if (child.snapshot.data.hasOwnProperty(ROUTE_DATA_BREADCRUMB)) {\n                            /** @type {?} */\n                            var breadcrumb = {\n                                label: child.snapshot.data[ROUTE_DATA_BREADCRUMB] || 'Breadcrumb',\n                                params: child.snapshot.params,\n                                url: nextUrl\n                            };\n                            breadcrumbs.push(breadcrumb);\n                        }\n                        return this.getBreadcrumbs(child, nextUrl, breadcrumbs);\n                    }\n                }\n            }\n            catch (e_1_1) {\n                e_1 = { error: e_1_1 };\n            }\n            finally {\n                try {\n                    if (children_1_1 && !children_1_1.done && (_a = children_1.return))\n                        _a.call(children_1);\n                }\n                finally {\n                    if (e_1)\n                        throw e_1.error;\n                }\n            }\n        };\n    /**\n     * @param {?} url\n     * @param {?} e\n     * @return {?}\n     */\n    NzBreadCrumbComponent.prototype.navigate = /**\n     * @param {?} url\n     * @param {?} e\n     * @return {?}\n     */\n        function (url, e) {\n            e.preventDefault(); // Stop browsers' default navigation behavior.\n            try {\n                /** @type {?} */\n                var router = this._injector.get(Router);\n                router.navigateByUrl(url);\n            }\n            catch (e) {\n                console.error(e);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzBreadCrumbComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this.nzAutoGenerate) {\n                try {\n                    /** @type {?} */\n                    var activatedRoute_1 = this._injector.get(ActivatedRoute);\n                    /** @type {?} */\n                    var router = this._injector.get(Router);\n                    router.events.pipe(filter(function (e) { return e instanceof NavigationEnd; }), takeUntil(this.$destroy)).subscribe(function () {\n                        _this.breadcrumbs = _this.getBreadcrumbs(activatedRoute_1.root); // Build the breadcrumb tree from root route.\n                    });\n                }\n                catch (e) {\n                    throw new Error('You should import RouterModule if you want to use NzAutoGenerate');\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzBreadCrumbComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.$destroy.next();\n            this.$destroy.complete();\n        };\n    return NzBreadCrumbComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzBreadCrumbItemComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzBreadCrumbItemComponent(nzBreadCrumbComponent) {\n        this.nzBreadCrumbComponent = nzBreadCrumbComponent;\n    }\n    return NzBreadCrumbItemComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzBreadCrumbModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzBreadCrumbModule() {\n    }\n    return NzBreadCrumbModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzWaveRenderer = /** @class */ /*@__PURE__*/ (function () {\n    function NzWaveRenderer(triggerElement, ngZone, insertExtraNode) {\n        var _this = this;\n        this.triggerElement = triggerElement;\n        this.ngZone = ngZone;\n        this.insertExtraNode = insertExtraNode;\n        this.waveTransitionDuration = 400;\n        this.lastTime = 0;\n        this.onClick = function (event) {\n            if (!_this.triggerElement ||\n                !_this.triggerElement.getAttribute ||\n                _this.triggerElement.getAttribute('disabled') ||\n                ( /** @type {?} */(event.target)).tagName === 'INPUT' ||\n                _this.triggerElement.className.indexOf('disabled') >= 0) {\n                return;\n            }\n            _this.fadeOutWave();\n        };\n        /** @type {?} */\n        var platform = new Platform();\n        if (platform.isBrowser) {\n            this.bindTriggerEvent();\n        }\n    }\n    Object.defineProperty(NzWaveRenderer.prototype, \"waveAttributeName\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.insertExtraNode ? 'ant-click-animating' : 'ant-click-animating-without-extra-node';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzWaveRenderer.prototype.bindTriggerEvent = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.ngZone.runOutsideAngular(function () {\n                if (_this.triggerElement) {\n                    _this.triggerElement.addEventListener('click', _this.onClick, true);\n                }\n            });\n        };\n    /**\n     * @return {?}\n     */\n    NzWaveRenderer.prototype.removeTriggerEvent = /**\n     * @return {?}\n     */\n        function () {\n            if (this.triggerElement) {\n                this.triggerElement.removeEventListener('click', this.onClick, true);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzWaveRenderer.prototype.removeStyleAndExtraNode = /**\n     * @return {?}\n     */\n        function () {\n            if (this.styleForPseudo && document.body.contains(this.styleForPseudo)) {\n                document.body.removeChild(this.styleForPseudo);\n                this.styleForPseudo = null;\n            }\n            if (this.insertExtraNode && this.triggerElement.contains(this.extraNode)) {\n                this.triggerElement.removeChild(this.extraNode);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzWaveRenderer.prototype.destroy = /**\n     * @return {?}\n     */\n        function () {\n            this.removeTriggerEvent();\n            this.removeStyleAndExtraNode();\n        };\n    /**\n     * @return {?}\n     */\n    NzWaveRenderer.prototype.fadeOutWave = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            /** @type {?} */\n            var node = this.triggerElement;\n            /** @type {?} */\n            var waveColor = this.getWaveColor(node);\n            node.setAttribute(this.waveAttributeName, 'true');\n            if (Date.now() < this.lastTime + this.waveTransitionDuration) {\n                return;\n            }\n            if (this.isValidColor(waveColor)) {\n                if (!this.styleForPseudo) {\n                    this.styleForPseudo = document.createElement('style');\n                }\n                this.styleForPseudo.innerHTML =\n                    \"[ant-click-animating-without-extra-node]:after { border-color: \" + waveColor + \"; }\";\n                document.body.appendChild(this.styleForPseudo);\n            }\n            if (this.insertExtraNode) {\n                if (!this.extraNode) {\n                    this.extraNode = document.createElement('div');\n                }\n                this.extraNode.className = 'ant-click-animating-node';\n                node.appendChild(this.extraNode);\n            }\n            this.lastTime = Date.now();\n            this.runTimeoutOutsideZone(function () {\n                node.removeAttribute(_this.waveAttributeName);\n                _this.removeStyleAndExtraNode();\n            }, this.waveTransitionDuration);\n        };\n    /**\n     * @param {?} color\n     * @return {?}\n     */\n    NzWaveRenderer.prototype.isValidColor = /**\n     * @param {?} color\n     * @return {?}\n     */\n        function (color) {\n            return color\n                && color !== '#ffffff'\n                && color !== 'rgb(255, 255, 255)'\n                && this.isNotGrey(color)\n                && !/rgba\\(\\d*, \\d*, \\d*, 0\\)/.test(color)\n                && color !== 'transparent';\n        };\n    /**\n     * @param {?} color\n     * @return {?}\n     */\n    NzWaveRenderer.prototype.isNotGrey = /**\n     * @param {?} color\n     * @return {?}\n     */\n        function (color) {\n            /** @type {?} */\n            var match = color.match(/rgba?\\((\\d*), (\\d*), (\\d*)(, [\\.\\d]*)?\\)/);\n            if (match && match[1] && match[2] && match[3]) {\n                return !(match[1] === match[2] && match[2] === match[3]);\n            }\n            return true;\n        };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    NzWaveRenderer.prototype.getWaveColor = /**\n     * @param {?} node\n     * @return {?}\n     */\n        function (node) {\n            /** @type {?} */\n            var nodeStyle = getComputedStyle(node);\n            return nodeStyle.getPropertyValue('border-top-color') || // Firefox Compatible\n                // Firefox Compatible\n                nodeStyle.getPropertyValue('border-color') ||\n                nodeStyle.getPropertyValue('background-color');\n        };\n    /**\n     * @param {?} fn\n     * @param {?} delay\n     * @return {?}\n     */\n    NzWaveRenderer.prototype.runTimeoutOutsideZone = /**\n     * @param {?} fn\n     * @param {?} delay\n     * @return {?}\n     */\n        function (fn, delay$$1) {\n            this.ngZone.runOutsideAngular(function () { return setTimeout(fn, delay$$1); });\n        };\n    return NzWaveRenderer;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzWaveDirective = /** @class */ /*@__PURE__*/ (function () {\n    function NzWaveDirective(ngZone, elementRef) {\n        this.ngZone = ngZone;\n        this.elementRef = elementRef;\n        this.nzWaveExtraNode = false;\n    }\n    /**\n     * @return {?}\n     */\n    NzWaveDirective.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            if (this.waveRenderer) {\n                this.waveRenderer.destroy();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzWaveDirective.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            if (this.elementRef.nativeElement) {\n                this.waveRenderer = new NzWaveRenderer(this.elementRef.nativeElement, this.ngZone, this.nzWaveExtraNode);\n            }\n        };\n    return NzWaveDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzWaveModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzWaveModule() {\n    }\n    return NzWaveModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzButtonGroupComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzButtonGroupComponent() {\n        var _a;\n        this.prefixCls = 'ant-btn-group';\n        this.sizeMap = { large: 'lg', small: 'sm' };\n        this.classMap = (_a = {},\n            _a[this.prefixCls] = true,\n            _a[this.prefixCls + \"-\" + this.sizeMap[this.nzSize]] = this.sizeMap[this.nzSize],\n            _a);\n    }\n    Object.defineProperty(NzButtonGroupComponent.prototype, \"nzSize\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._size;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            var _a;\n            this._size = value;\n            this.classMap = (_a = {},\n                _a[this.prefixCls] = true,\n                _a[this.prefixCls + \"-\" + this.sizeMap[this.nzSize]] = this.sizeMap[this.nzSize],\n                _a);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return NzButtonGroupComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzButtonComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzButtonComponent(elementRef, cdr, renderer, nzUpdateHostClassService, ngZone) {\n        this.elementRef = elementRef;\n        this.cdr = cdr;\n        this.renderer = renderer;\n        this.nzUpdateHostClassService = nzUpdateHostClassService;\n        this.ngZone = ngZone;\n        this._ghost = false;\n        this._search = false;\n        this._loading = false;\n        this._block = false;\n        this.el = this.elementRef.nativeElement;\n        this.iconOnly = false;\n        this.prefixCls = 'ant-btn';\n        this.sizeMap = { large: 'lg', small: 'sm' };\n        this.nzWave = new NzWaveDirective(this.ngZone, this.elementRef);\n    }\n    Object.defineProperty(NzButtonComponent.prototype, \"nzBlock\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._block;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._block = toBoolean(value);\n            this.setClassMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzButtonComponent.prototype, \"nzGhost\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._ghost;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._ghost = toBoolean(value);\n            this.setClassMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzButtonComponent.prototype, \"nzSearch\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._search;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._search = toBoolean(value);\n            this.setClassMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzButtonComponent.prototype, \"nzType\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._type;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._type = value;\n            this.setClassMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzButtonComponent.prototype, \"nzShape\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._shape;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._shape = value;\n            this.setClassMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzButtonComponent.prototype, \"nzSize\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._size;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._size = value;\n            this.setClassMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzButtonComponent.prototype, \"nzLoading\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._loading;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._loading = toBoolean(value);\n            this.setClassMap();\n            this.updateIconDisplay(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzButtonComponent.prototype.updateIconDisplay = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            if (this.iconElement) {\n                this.renderer.setStyle(this.iconElement, 'display', value ? 'none' : 'inline-block');\n            }\n        };\n    /** temp solution since no method add classMap to host https://github.com/angular/angular/issues/7289 */\n    /**\n     * temp solution since no method add classMap to host https://github.com/angular/angular/issues/7289\n     * @return {?}\n     */\n    NzButtonComponent.prototype.setClassMap = /**\n     * temp solution since no method add classMap to host https://github.com/angular/angular/issues/7289\n     * @return {?}\n     */\n        function () {\n            var _a;\n            /** @type {?} */\n            var classMap = (_a = {},\n                _a[this.prefixCls + \"-\" + this.nzType] = this.nzType,\n                _a[this.prefixCls + \"-\" + this.nzShape] = this.nzShape,\n                _a[this.prefixCls + \"-\" + this.sizeMap[this.nzSize]] = this.sizeMap[this.nzSize],\n                _a[this.prefixCls + \"-loading\"] = this.nzLoading,\n                _a[this.prefixCls + \"-icon-only\"] = this.iconOnly,\n                _a[this.prefixCls + \"-background-ghost\"] = this.nzGhost,\n                _a[this.prefixCls + \"-block\"] = this.nzBlock,\n                _a[\"ant-input-search-button\"] = this.nzSearch,\n                _a);\n            this.nzUpdateHostClassService.updateHostClass(this.el, classMap);\n        };\n    /**\n     * @return {?}\n     */\n    NzButtonComponent.prototype.checkContent = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var hasIcon = this.listOfIconElement && this.listOfIconElement.length;\n            if (hasIcon) {\n                this.moveIcon();\n            }\n            this.renderer.removeStyle(this.contentElement.nativeElement, 'display');\n            /** https://github.com/angular/angular/issues/12530 **/\n            if (isEmpty(this.contentElement.nativeElement)) {\n                this.renderer.setStyle(this.contentElement.nativeElement, 'display', 'none');\n                this.iconOnly = !!hasIcon;\n            }\n            else {\n                this.renderer.removeStyle(this.contentElement.nativeElement, 'display');\n                this.iconOnly = false;\n            }\n            this.setClassMap();\n            this.updateIconDisplay(this.nzLoading);\n            this.cdr.detectChanges();\n        };\n    /**\n     * @return {?}\n     */\n    NzButtonComponent.prototype.moveIcon = /**\n     * @return {?}\n     */\n        function () {\n            if (this.listOfIconElement && this.listOfIconElement.length) {\n                /** @type {?} */\n                var firstChildElement = this.findFirstNotEmptyNode(this.contentElement.nativeElement);\n                /** @type {?} */\n                var lastChildElement = this.findLastNotEmptyNode(this.contentElement.nativeElement);\n                if (firstChildElement && (firstChildElement === this.listOfIconElement.first.nativeElement)) {\n                    this.renderer.insertBefore(this.el, firstChildElement, this.contentElement.nativeElement);\n                    this.iconElement = /** @type {?} */ (firstChildElement);\n                }\n                else if (lastChildElement && (lastChildElement === this.listOfIconElement.last.nativeElement)) {\n                    this.renderer.appendChild(this.el, lastChildElement);\n                }\n            }\n        };\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    NzButtonComponent.prototype.findFirstNotEmptyNode = /**\n     * @param {?} element\n     * @return {?}\n     */\n        function (element) {\n            /** @type {?} */\n            var children = element.childNodes;\n            for (var i = 0; i < children.length; i++) {\n                /** @type {?} */\n                var node = children.item(i);\n                if (filterNotEmptyNode(node)) {\n                    return node;\n                }\n            }\n            return null;\n        };\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    NzButtonComponent.prototype.findLastNotEmptyNode = /**\n     * @param {?} element\n     * @return {?}\n     */\n        function (element) {\n            /** @type {?} */\n            var children = element.childNodes;\n            for (var i = children.length - 1; i >= 0; i--) {\n                /** @type {?} */\n                var node = children.item(i);\n                if (filterNotEmptyNode(node)) {\n                    return node;\n                }\n            }\n            return null;\n        };\n    /**\n     * @return {?}\n     */\n    NzButtonComponent.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n        function () {\n            this.checkContent();\n        };\n    /**\n     * @return {?}\n     */\n    NzButtonComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.renderer.addClass(this.el, this.prefixCls);\n            this.nzWave.ngOnInit();\n        };\n    /**\n     * @return {?}\n     */\n    NzButtonComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.nzWave.ngOnDestroy();\n        };\n    return NzButtonComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzButtonModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzButtonModule() {\n    }\n    return NzButtonModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar LoggerService = /** @class */ /*@__PURE__*/ (function () {\n    function LoggerService(_loggerState) {\n        this._loggerState = _loggerState;\n    }\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n    LoggerService.prototype.log = /**\n     * @param {...?} args\n     * @return {?}\n     */\n        function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            if (this._loggerState) {\n                // console.log(...args);\n                console.log.apply(console, arguments);\n            }\n        };\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n    LoggerService.prototype.warn = /**\n     * @param {...?} args\n     * @return {?}\n     */\n        function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            if (this._loggerState) {\n                // console.warn(...args);\n                console.warn.apply(console, arguments);\n            }\n        };\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n    LoggerService.prototype.error = /**\n     * @param {...?} args\n     * @return {?}\n     */\n        function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            if (this._loggerState) {\n                // console.error(...args);\n                console.error.apply(console, arguments);\n            }\n        };\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n    LoggerService.prototype.info = /**\n     * @param {...?} args\n     * @return {?}\n     */\n        function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            if (this._loggerState) {\n                // console.log(...args);\n                console.log.apply(console, arguments);\n            }\n        };\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n    LoggerService.prototype.debug = /**\n     * @param {...?} args\n     * @return {?}\n     */\n        function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            if (this._loggerState) {\n                /** @type {?} */\n                var arrs = Array.prototype.slice.call(arguments);\n                console.log.apply(console, ['[NG-ZORRO-DEBUG]'].concat(arrs));\n            }\n        };\n    return LoggerService;\n}());\n/** @type {?} */\nvar NZ_LOGGER_STATE = /*@__PURE__*/ new InjectionToken('nz-logger-state');\n/**\n * @param {?} exist\n * @param {?} loggerState\n * @return {?}\n */\nfunction LOGGER_SERVICE_PROVIDER_FACTORY(exist, loggerState) { return exist || new LoggerService(loggerState); }\n/** @type {?} */\nvar LOGGER_SERVICE_PROVIDER = {\n    provide: LoggerService,\n    useFactory: LOGGER_SERVICE_PROVIDER_FACTORY,\n    deps: [[/*@__PURE__*/ new Optional(), /*@__PURE__*/ new SkipSelf(), LoggerService], NZ_LOGGER_STATE]\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar LoggerModule = /** @class */ /*@__PURE__*/ (function () {\n    function LoggerModule() {\n    }\n    return LoggerModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarLocale = {\n    today: '今天',\n    now: '此刻',\n    backToToday: '返回今天',\n    ok: '确定',\n    timeSelect: '选择时间',\n    dateSelect: '选择日期',\n    clear: '清除',\n    month: '月',\n    year: '年',\n    previousMonth: '上个月 (翻页上键)',\n    nextMonth: '下个月 (翻页下键)',\n    monthSelect: '选择月份',\n    yearSelect: '选择年份',\n    decadeSelect: '选择年代',\n    yearFormat: 'YYYY年',\n    dayFormat: 'D日',\n    dateFormat: 'YYYY年M月D日',\n    dateTimeFormat: 'YYYY年M月D日 HH时mm分ss秒',\n    previousYear: '上一年 (Control键加左方向键)',\n    nextYear: '下一年 (Control键加右方向键)',\n    previousDecade: '上一年代',\n    nextDecade: '下一年代',\n    previousCentury: '上一世纪',\n    nextCentury: '下一世纪',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale = {\n    placeholder: '请选择时间',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$1 = {\n    lang: /*@__PURE__*/ __assign({ placeholder: '请选择日期', rangePlaceholder: ['开始日期', '结束日期'] }, CalendarLocale),\n    timePickerLocale: /*@__PURE__*/ __assign({}, locale),\n};\n// should add whitespace between char in Button\nlocale$1.lang.ok = '确 定';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Pagination = {\n    // Options.jsx\n    items_per_page: '条/页',\n    jump_to: '跳至',\n    jump_to_confirm: '确定',\n    page: '页',\n    // Pagination.jsx\n    prev_page: '上一页',\n    next_page: '下一页',\n    prev_5: '向前 5 页',\n    next_5: '向后 5 页',\n    prev_3: '向前 3 页',\n    next_3: '向后 3 页',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar zh_CN = {\n    locale: 'zh-cn',\n    Pagination: Pagination,\n    DatePicker: locale$1,\n    TimePicker: locale,\n    Calendar: CalendarLocale,\n    Table: {\n        filterTitle: '筛选',\n        filterConfirm: '确定',\n        filterReset: '重置',\n        emptyText: '暂无数据',\n        selectAll: '全选当页',\n        selectInvert: '反选当页',\n    },\n    Modal: {\n        okText: '确定',\n        cancelText: '取消',\n        justOkText: '知道了',\n    },\n    Popconfirm: {\n        cancelText: '取消',\n        okText: '确定',\n    },\n    Transfer: {\n        notFoundContent: '无匹配结果',\n        searchPlaceholder: '请输入搜索内容',\n        itemUnit: '项',\n        itemsUnit: '项',\n    },\n    Select: {\n        notFoundContent: '无匹配结果',\n    },\n    Upload: {\n        uploading: '文件上传中',\n        removeFile: '删除文件',\n        uploadError: '上传错误',\n        previewFile: '预览文件',\n    },\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar NZ_I18N = /*@__PURE__*/ new InjectionToken('nz-i18n');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzI18nService = /** @class */ /*@__PURE__*/ (function () {\n    function NzI18nService(locale, _logger, datePipe) {\n        this._logger = _logger;\n        this.datePipe = datePipe;\n        this._change = new BehaviorSubject(this._locale);\n        this.setLocale(locale || zh_CN);\n    }\n    Object.defineProperty(NzI18nService.prototype, \"localeChange\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._change.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // [NOTE] Performance issue: this method may called by every change detections\n    // TODO: cache more deeply paths for performance\n    /* tslint:disable-next-line:no-any */\n    /**\n     * @param {?} path\n     * @param {?=} data\n     * @return {?}\n     */\n    NzI18nService.prototype.translate = /**\n     * @param {?} path\n     * @param {?=} data\n     * @return {?}\n     */\n        function (path, data) {\n            /** @type {?} */\n            var content = /** @type {?} */ (this._getObjectPath(this._locale, path));\n            if (typeof content === 'string') {\n                if (data) {\n                    Object.keys(data).forEach(function (key) { return content = content.replace(new RegExp(\"%\" + key + \"%\", 'g'), data[key]); });\n                }\n                return content;\n            }\n            return path;\n        };\n    /**\n     * Set/Change current locale globally throughout the WHOLE application\n     * [NOTE] If called at runtime, rendered interface may not change along with the locale change (because this do not trigger another render schedule)\n     * @param locale The translating letters\n     */\n    /**\n     * Set/Change current locale globally throughout the WHOLE application\n     * [NOTE] If called at runtime, rendered interface may not change along with the locale change (because this do not trigger another render schedule)\n     * @param {?} locale The translating letters\n     * @return {?}\n     */\n    NzI18nService.prototype.setLocale = /**\n     * Set/Change current locale globally throughout the WHOLE application\n     * [NOTE] If called at runtime, rendered interface may not change along with the locale change (because this do not trigger another render schedule)\n     * @param {?} locale The translating letters\n     * @return {?}\n     */\n        function (locale) {\n            if (this._locale && this._locale.locale === locale.locale) {\n                return;\n            }\n            this._locale = locale;\n            this._change.next(locale);\n        };\n    /**\n     * @return {?}\n     */\n    NzI18nService.prototype.getLocale = /**\n     * @return {?}\n     */\n        function () {\n            return this._locale;\n        };\n    /**\n     * @return {?}\n     */\n    NzI18nService.prototype.getLocaleId = /**\n     * @return {?}\n     */\n        function () {\n            return this._locale ? this._locale.locale : '';\n        };\n    /**\n     * Get locale data\n     * @param path dot paths for finding exist value from locale data, eg. \"a.b.c\"\n     * @param defaultValue default value if the result is not \"truthy\"\n     */\n    /**\n     * Get locale data\n     * @param {?=} path dot paths for finding exist value from locale data, eg. \"a.b.c\"\n     * @param {?=} defaultValue default value if the result is not \"truthy\"\n     * @return {?}\n     */\n    NzI18nService.prototype.getLocaleData = /**\n     * Get locale data\n     * @param {?=} path dot paths for finding exist value from locale data, eg. \"a.b.c\"\n     * @param {?=} defaultValue default value if the result is not \"truthy\"\n     * @return {?}\n     */\n        function (path, defaultValue) {\n            /** @type {?} */\n            var result = path ? this._getObjectPath(this._locale, path) : this._locale;\n            return result || defaultValue;\n        };\n    /**\n     * @param {?} date\n     * @param {?=} format\n     * @param {?=} locale\n     * @return {?}\n     */\n    NzI18nService.prototype.formatDate = /**\n     * @param {?} date\n     * @param {?=} format\n     * @param {?=} locale\n     * @return {?}\n     */\n        function (date, format, locale) {\n            return date ? this.datePipe.transform(date, format, null, locale || this.getLocale().locale) : '';\n        };\n    /**\n     * Format date with compatible for the format of moment and others\n     * Why? For now, we need to support the existing language formats in AntD, and AntD uses the default temporal syntax.\n     */\n    /**\n     * Format date with compatible for the format of moment and others\n     * Why? For now, we need to support the existing language formats in AntD, and AntD uses the default temporal syntax.\n     * @param {?} date\n     * @param {?=} format\n     * @param {?=} locale\n     * @return {?}\n     */\n    NzI18nService.prototype.formatDateCompatible = /**\n     * Format date with compatible for the format of moment and others\n     * Why? For now, we need to support the existing language formats in AntD, and AntD uses the default temporal syntax.\n     * @param {?} date\n     * @param {?=} format\n     * @param {?=} locale\n     * @return {?}\n     */\n        function (date, format, locale) {\n            return this.formatDate(date, this.compatDateFormat(format), locale);\n        };\n    /**\n     * @param {?} text\n     * @return {?}\n     */\n    NzI18nService.prototype.parseDate = /**\n     * @param {?} text\n     * @return {?}\n     */\n        function (text) {\n            if (!text) {\n                return;\n            }\n            return parse(text);\n        };\n    /**\n     * @param {?} text\n     * @return {?}\n     */\n    NzI18nService.prototype.parseTime = /**\n     * @param {?} text\n     * @return {?}\n     */\n        function (text) {\n            if (!text) {\n                return;\n            }\n            return parse(\"1970-01-01 \" + text);\n        };\n    /**\n     * @param {?} obj\n     * @param {?} path\n     * @return {?}\n     */\n    NzI18nService.prototype._getObjectPath = /**\n     * @param {?} obj\n     * @param {?} path\n     * @return {?}\n     */\n        function (obj, path) {\n            /** @type {?} */\n            var res = obj;\n            /** @type {?} */\n            var paths = path.split('.');\n            /** @type {?} */\n            var depth = paths.length;\n            /** @type {?} */\n            var index = 0;\n            while (res && index < depth) {\n                res = res[paths[index++]];\n            }\n            return index === depth ? res : null;\n        };\n    /**\n     * Compatible translate the moment-like format pattern to angular's pattern\n     * Why? For now, we need to support the existing language formats in AntD, and AntD uses the default temporal syntax.\n     *\n     * TODO: compare and complete all format patterns\n     * Each format docs as below:\n     * @link https://momentjs.com/docs/#/displaying/format/\n     * @link https://angular.io/api/common/DatePipe#description\n     * @param {?} format input format pattern\n     * @return {?}\n     */\n    NzI18nService.prototype.compatDateFormat = /**\n     * Compatible translate the moment-like format pattern to angular's pattern\n     * Why? For now, we need to support the existing language formats in AntD, and AntD uses the default temporal syntax.\n     *\n     * TODO: compare and complete all format patterns\n     * Each format docs as below:\n     * @link https://momentjs.com/docs/#/displaying/format/\n     * @link https://angular.io/api/common/DatePipe#description\n     * @param {?} format input format pattern\n     * @return {?}\n     */\n        function (format) {\n            return format && format\n                .replace(/Y/g, 'y') // only support y, yy, yyy, yyyy\n                .replace(/D/g, 'd'); // d, dd represent of D, DD for momentjs, others are not support\n        };\n    return NzI18nService;\n}());\n/**\n * @param {?} exist\n * @param {?} locale\n * @param {?} logger\n * @param {?} datePipe\n * @return {?}\n */\nfunction NZ_LOCALE_SERVICE_PROVIDER_FACTORY(exist, locale, logger, datePipe) {\n    return exist || new NzI18nService(locale, logger, datePipe);\n}\n/** @type {?} */\nvar NZ_I18N_SERVICE_PROVIDER = {\n    provide: NzI18nService,\n    useFactory: NZ_LOCALE_SERVICE_PROVIDER_FACTORY,\n    deps: [[/*@__PURE__*/ new Optional(), /*@__PURE__*/ new SkipSelf(), NzI18nService], NZ_I18N, LoggerService, DatePipe]\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzI18nPipe = /** @class */ /*@__PURE__*/ (function () {\n    function NzI18nPipe(_locale) {\n        this._locale = _locale;\n    }\n    /**\n     * @param {?} path\n     * @param {?=} keyValue\n     * @return {?}\n     */\n    NzI18nPipe.prototype.transform = /**\n     * @param {?} path\n     * @param {?=} keyValue\n     * @return {?}\n     */\n        function (path, keyValue) {\n            return this._locale.translate(path, keyValue);\n        };\n    return NzI18nPipe;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ɵ0 = zh_CN;\nvar NzI18nModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzI18nModule() {\n    }\n    return NzI18nModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzRadioGroupComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzRadioGroupComponent(elementRef) {\n        this.elementRef = elementRef;\n        this._size = 'default';\n        this.el = this.elementRef.nativeElement;\n        // ngModel Access\n        this.onChange = function () { return null; };\n        this.onTouched = function () { return null; };\n        this.radios = [];\n        this.nzButtonStyle = 'outline';\n    }\n    Object.defineProperty(NzRadioGroupComponent.prototype, \"nzSize\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._size;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._size = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzRadioGroupComponent.prototype, \"nzDisabled\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._disabled;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._disabled = toBoolean(value);\n            this.updateDisabledState();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzRadioGroupComponent.prototype, \"nzName\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._name;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._name = value;\n            this.updateChildrenName();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzRadioGroupComponent.prototype.updateDisabledState = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (isNotNil(this.nzDisabled)) {\n                this.radios.forEach(function (radio) {\n                    radio.nzDisabled = _this.nzDisabled;\n                });\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzRadioGroupComponent.prototype.updateChildrenName = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this.nzName) {\n                this.radios.forEach(function (item) {\n                    item.name = _this.nzName;\n                });\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzRadioGroupComponent.prototype.syncCheckedValue = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.radios.forEach(function (item) {\n                item.nzChecked = item.nzValue === _this.value;\n            });\n        };\n    Object.defineProperty(NzRadioGroupComponent.prototype, \"isLarge\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzSize === 'large';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzRadioGroupComponent.prototype, \"isSmall\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzSize === 'small';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzRadioGroupComponent.prototype, \"isSolid\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzButtonStyle === 'solid';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} radio\n     * @return {?}\n     */\n    NzRadioGroupComponent.prototype.addRadio = /**\n     * @param {?} radio\n     * @return {?}\n     */\n        function (radio) {\n            this.radios.push(radio);\n            radio.nzChecked = radio.nzValue === this.value;\n        };\n    /**\n     * @param {?} radio\n     * @return {?}\n     */\n    NzRadioGroupComponent.prototype.selectRadio = /**\n     * @param {?} radio\n     * @return {?}\n     */\n        function (radio) {\n            this.updateValue(radio.nzValue, true);\n        };\n    /**\n     * @param {?} value\n     * @param {?} emit\n     * @return {?}\n     */\n    NzRadioGroupComponent.prototype.updateValue = /**\n     * @param {?} value\n     * @param {?} emit\n     * @return {?}\n     */\n        function (value, emit) {\n            this.value = value;\n            this.syncCheckedValue();\n            if (emit) {\n                this.onChange(value);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzRadioGroupComponent.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.syncCheckedValue();\n            this.updateChildrenName();\n            Promise.resolve().then(function () {\n                _this.updateDisabledState();\n            });\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzRadioGroupComponent.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.updateValue(value, false);\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzRadioGroupComponent.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this.onChange = fn;\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzRadioGroupComponent.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this.onTouched = fn;\n        };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    NzRadioGroupComponent.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n        function (isDisabled) {\n            this.nzDisabled = isDisabled;\n        };\n    return NzRadioGroupComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzRadioComponent = /** @class */ /*@__PURE__*/ (function () {\n    /* tslint:disable-next-line:no-any */\n    function NzRadioComponent(nzRadioGroup, renderer, document) {\n        this.nzRadioGroup = nzRadioGroup;\n        this.renderer = renderer;\n        this.document = document;\n        this._checked = false;\n        this._disabled = false;\n        this._autoFocus = false;\n        this.isInit = false;\n        this.prefixCls = 'ant-radio';\n        this.onChange = function () { return null; };\n        this.onTouched = function () { return null; };\n    }\n    Object.defineProperty(NzRadioComponent.prototype, \"nzChecked\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._checked;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._checked = toBoolean(value);\n            this.setClassMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzRadioComponent.prototype, \"nzDisabled\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._disabled;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._disabled = toBoolean(value);\n            this.setClassMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzRadioComponent.prototype, \"nzAutoFocus\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._autoFocus;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._autoFocus = toBoolean(value);\n            this.updateAutoFocus();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzRadioComponent.prototype.updateAutoFocus = /**\n     * @return {?}\n     */\n        function () {\n            if (this.isInit) {\n                if (this.nzAutoFocus) {\n                    this.renderer.setAttribute(this.inputElement.nativeElement, 'autofocus', 'autofocus');\n                }\n                else {\n                    this.renderer.removeAttribute(this.inputElement.nativeElement, 'autofocus');\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzRadioComponent.prototype.updateInputFocus = /**\n     * @return {?}\n     */\n        function () {\n            if (this.inputElement) {\n                if (this.nzChecked) {\n                    if (this.document.activeElement.nodeName === 'BODY') {\n                        this.inputElement.nativeElement.focus();\n                    }\n                }\n                else {\n                    this.inputElement.nativeElement.blur();\n                }\n            }\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzRadioComponent.prototype.onClick = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            e.preventDefault();\n            this.setClassMap();\n            if (this.nzDisabled || this.nzChecked) {\n                this.updateInputFocus();\n                return;\n            }\n            else {\n                if (this.nzRadioGroup) {\n                    this.nzRadioGroup.selectRadio(this);\n                }\n                else {\n                    this.updateValue(true);\n                }\n                this.updateInputFocus();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzRadioComponent.prototype.onBlur = /**\n     * @return {?}\n     */\n        function () {\n            this.onTouched();\n            if (this.nzRadioGroup) {\n                this.nzRadioGroup.onTouched();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzRadioComponent.prototype.setClassMap = /**\n     * @return {?}\n     */\n        function () {\n            var _a;\n            this.classMap = (_a = {},\n                _a[this.prefixCls] = true,\n                _a[this.prefixCls + \"-checked\"] = this.nzChecked,\n                _a[this.prefixCls + \"-disabled\"] = this.nzDisabled,\n                _a);\n        };\n    /**\n     * @return {?}\n     */\n    NzRadioComponent.prototype.focus = /**\n     * @return {?}\n     */\n        function () {\n            this.inputElement.nativeElement.focus();\n        };\n    /**\n     * @return {?}\n     */\n    NzRadioComponent.prototype.blur = /**\n     * @return {?}\n     */\n        function () {\n            this.inputElement.nativeElement.blur();\n            this.onBlur();\n        };\n    /**\n     * @return {?}\n     */\n    NzRadioComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            if (this.nzRadioGroup) {\n                this.nzRadioGroup.addRadio(this);\n            }\n            this.setClassMap();\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzRadioComponent.prototype.updateValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.onChange(value);\n            this.nzChecked = value;\n            this.setClassMap();\n        };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    NzRadioComponent.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n        function (isDisabled) {\n            this.nzDisabled = isDisabled;\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzRadioComponent.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.nzChecked = value;\n            this.setClassMap();\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzRadioComponent.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this.onChange = fn;\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzRadioComponent.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this.onTouched = fn;\n        };\n    /**\n     * @return {?}\n     */\n    NzRadioComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            this.isInit = true;\n            this.updateAutoFocus();\n            this.updateInputFocus();\n        };\n    return NzRadioComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzRadioButtonComponent = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(NzRadioButtonComponent, _super);\n    /* tslint:disable-next-line:no-any */\n    function NzRadioButtonComponent(nzRadioGroup, renderer, document) {\n        var _this = _super.call(this, nzRadioGroup, renderer, document) || this;\n        _this.prefixCls = 'ant-radio-button';\n        return _this;\n    }\n    return NzRadioButtonComponent;\n}(NzRadioComponent));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzRadioModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzRadioModule() {\n    }\n    return NzRadioModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzOptionComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzOptionComponent() {\n        this._disabled = false;\n        this._customContent = false;\n    }\n    Object.defineProperty(NzOptionComponent.prototype, \"nzDisabled\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._disabled;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._disabled = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzOptionComponent.prototype, \"nzCustomContent\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._customContent;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._customContent = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return NzOptionComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzOptionLiComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzOptionLiComponent(elementRef) {\n        this.elementRef = elementRef;\n        this.el = this.elementRef.nativeElement;\n        this.selected = false;\n        this.active = false;\n        this.nzShowActive = true;\n        this.nzMode = 'default';\n    }\n    Object.defineProperty(NzOptionLiComponent.prototype, \"nzActiveOption\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (value) {\n                this.active = this.compareWith(value.nzValue, this.nzOption.nzValue);\n            }\n            else {\n                this.active = false;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzOptionLiComponent.prototype, \"nzListOfSelectedValue\", {\n        set: /**\n         * @param {?} valueList\n         * @return {?}\n         */ function (valueList) {\n            var _this = this;\n            this.selected = isNotNil(valueList.find(function (v) { return _this.compareWith(v, _this.nzOption.nzValue); }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return NzOptionLiComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzOptionPipe = /** @class */ /*@__PURE__*/ (function () {\n    function NzOptionPipe() {\n    }\n    /**\n     * @param {?} options\n     * @param {?} input\n     * @param {?} filterOption\n     * @param {?} serverSearch\n     * @return {?}\n     */\n    NzOptionPipe.prototype.transform = /**\n     * @param {?} options\n     * @param {?} input\n     * @param {?} filterOption\n     * @param {?} serverSearch\n     * @return {?}\n     */\n        function (options, input, filterOption, serverSearch) {\n            if (serverSearch || !input) {\n                return options;\n            }\n            else {\n                return ( /** @type {?} */(options)).filter(function (o) { return filterOption(input, o); });\n            }\n        };\n    return NzOptionPipe;\n}());\nvar NzSubOptionPipe = /** @class */ /*@__PURE__*/ (function () {\n    function NzSubOptionPipe() {\n    }\n    /**\n     * @param {?} groups\n     * @param {?} input\n     * @param {?} filterOption\n     * @param {?} serverSearch\n     * @return {?}\n     */\n    NzSubOptionPipe.prototype.transform = /**\n     * @param {?} groups\n     * @param {?} input\n     * @param {?} filterOption\n     * @param {?} serverSearch\n     * @return {?}\n     */\n        function (groups, input, filterOption, serverSearch) {\n            if (serverSearch || !input) {\n                return groups;\n            }\n            else {\n                return ( /** @type {?} */(groups)).filter(function (g) {\n                    return g.listOfNzOptionComponent.some(function (o) { return filterOption(input, o); });\n                });\n            }\n        };\n    return NzSubOptionPipe;\n}());\n/**\n * @param {?} input\n * @param {?} option\n * @return {?}\n */\nfunction defaultFilterOption(input, option) {\n    if (option && option.nzLabel) {\n        return option.nzLabel.toLowerCase().indexOf(input.toLowerCase()) > -1;\n    }\n    else {\n        return false;\n    }\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzOptionContainerComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzOptionContainerComponent() {\n        this.isInit = false;\n        this.isAddTagOptionDisplay = false;\n        this.listOfAllTemplateOption = [];\n        this.listOfTagOption = [];\n        this.listOfFilterOption = [];\n        // tslint:disable-next-line:no-any\n        this.nzListOfSelectedValueChange = new EventEmitter();\n        this.nzListOfTemplateOptionChange = new EventEmitter();\n        this.nzClickOption = new EventEmitter();\n        this.nzScrollToBottom = new EventEmitter();\n        this.nzMode = 'default';\n        this.nzServerSearch = false;\n        this.nzFilterOption = defaultFilterOption;\n        this.nzMaxMultipleCount = Infinity;\n        // tslint:disable-next-line:no-any\n        this.compareWith = function (o1, o2) { return o1 === o2; };\n    }\n    Object.defineProperty(NzOptionContainerComponent.prototype, \"nzSearchValue\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._searchValue;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._searchValue = value;\n            this.updateAddTagOptionDisplay();\n            this.updateListOfFilterOption();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzOptionContainerComponent.prototype, \"nzListOfSelectedValue\", {\n        // tslint:disable-next-line:no-any\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._listOfSelectedValue;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (this._listOfSelectedValue !== value) {\n                this._listOfSelectedValue = value;\n                /** should clear activedOption when listOfSelectedValue change **/\n                this.clearActivatedOption();\n                this.refreshAllOptionStatus(false);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzOptionContainerComponent.prototype.addTagOption = /**\n     * @return {?}\n     */\n        function () {\n            if (this.nzListOfSelectedValue.length < this.nzMaxMultipleCount) {\n                this.nzListOfSelectedValue = __spread(this.nzListOfSelectedValue, [this.nzSearchValue]);\n                this.nzListOfSelectedValueChange.emit(this.nzListOfSelectedValue);\n            }\n        };\n    /**\n     * @param {?} option\n     * @param {?} isPressEnter\n     * @return {?}\n     */\n    NzOptionContainerComponent.prototype.clickOption = /**\n     * @param {?} option\n     * @param {?} isPressEnter\n     * @return {?}\n     */\n        function (option, isPressEnter) {\n            this.updateSelectedOption(option, isPressEnter);\n            this.nzClickOption.emit();\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzOptionContainerComponent.prototype.onKeyDownUl = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            var _this = this;\n            if ([UP_ARROW, DOWN_ARROW, ENTER].indexOf(e.keyCode) > -1) {\n                e.preventDefault();\n                /** @type {?} */\n                var activeIndex = this.listOfFilterOption.findIndex(function (item) { return item === _this.activatedOption; });\n                if (e.keyCode === UP_ARROW) {\n                    /** @type {?} */\n                    var preIndex = activeIndex > 0 ? (activeIndex - 1) : (this.listOfFilterOption.length - 1);\n                    this.setActiveOption(this.listOfFilterOption[preIndex]);\n                }\n                else if (e.keyCode === DOWN_ARROW) {\n                    /** @type {?} */\n                    var nextIndex = activeIndex < this.listOfFilterOption.length - 1 ? (activeIndex + 1) : 0;\n                    this.setActiveOption(this.listOfFilterOption[nextIndex]);\n                }\n                else if (e.keyCode === ENTER) {\n                    // enter\n                    if (this.isTagsMode) {\n                        if (!this.isAddTagOptionDisplay) {\n                            this.clickOption(this.activatedOption, true);\n                        }\n                        else {\n                            this.addTagOption();\n                            this.nzClickOption.emit();\n                        }\n                    }\n                    else {\n                        this.clickOption(this.activatedOption, true);\n                    }\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzOptionContainerComponent.prototype.resetActiveOption = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            /** @type {?} */\n            var firstActiveOption = this.listOfAllTemplateOption.concat(this.listOfTagOption).find(function (item) { return _this.compareWith(item.nzValue, _this.nzListOfSelectedValue[0]); });\n            this.setActiveOption(firstActiveOption);\n        };\n    /**\n     * @return {?}\n     */\n    NzOptionContainerComponent.prototype.clearActivatedOption = /**\n     * @return {?}\n     */\n        function () {\n            this.setActiveOption(null);\n        };\n    /**\n     * @param {?} option\n     * @param {?=} scroll\n     * @return {?}\n     */\n    NzOptionContainerComponent.prototype.setActiveOption = /**\n     * @param {?} option\n     * @param {?=} scroll\n     * @return {?}\n     */\n        function (option, scroll) {\n            if (scroll === void 0) {\n                scroll = true;\n            }\n            this.activatedOption = option;\n            if (scroll) {\n                this.scrollIntoView();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzOptionContainerComponent.prototype.scrollIntoView = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this.listOfNzOptionLiComponent && this.listOfNzOptionLiComponent.length) {\n                /** @type {?} */\n                var targetOption_1 = this.listOfNzOptionLiComponent.find(function (o) { return o.nzOption === _this.activatedOption; });\n                /* tslint:disable-next-line:no-string-literal */\n                if (targetOption_1 && targetOption_1.el && targetOption_1.el['scrollIntoViewIfNeeded']) {\n                    /* tslint:disable-next-line:no-string-literal */\n                    setTimeout(function () { return targetOption_1.el['scrollIntoViewIfNeeded'](false); }, 150);\n                }\n            }\n        };\n    /**\n     * @param {?} option\n     * @param {?} isPressEnter\n     * @return {?}\n     */\n    NzOptionContainerComponent.prototype.updateSelectedOption = /**\n     * @param {?} option\n     * @param {?} isPressEnter\n     * @return {?}\n     */\n        function (option, isPressEnter) {\n            var _this = this;\n            /** update listOfSelectedOption -> update nzListOfSelectedValue -> emit nzListOfSelectedValueChange **/\n            if (option && !option.nzDisabled) {\n                /** @type {?} */\n                var changed = false;\n                this.setActiveOption(option);\n                /** @type {?} */\n                var listOfSelectedValue = __spread(this.nzListOfSelectedValue);\n                if (this.isMultipleOrTags) {\n                    /** @type {?} */\n                    var targetValue = listOfSelectedValue.find(function (o) { return _this.compareWith(o, option.nzValue); });\n                    if (isNotNil(targetValue)) {\n                        if (!isPressEnter) {\n                            /** should not toggle option when press enter **/\n                            listOfSelectedValue.splice(listOfSelectedValue.indexOf(targetValue), 1);\n                            changed = true;\n                        }\n                    }\n                    else if (this.nzListOfSelectedValue.length < this.nzMaxMultipleCount) {\n                        listOfSelectedValue.push(option.nzValue);\n                        changed = true;\n                    }\n                }\n                else if (!this.compareWith(listOfSelectedValue[0], option.nzValue)) {\n                    listOfSelectedValue = [option.nzValue];\n                    changed = true;\n                }\n                /** update selectedValues when click option **/\n                if (changed) {\n                    this._listOfSelectedValue = listOfSelectedValue;\n                    this.nzListOfSelectedValueChange.emit(this.nzListOfSelectedValue);\n                    if (this.isTagsMode) {\n                        this.refreshAllOptionStatus(false);\n                    }\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzOptionContainerComponent.prototype.refreshListOfTagOption = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this.isTagsMode) {\n                /** *\n                 * refresh tags option *\n                  @type {?} */\n                var listOfTagsOption_1 = [];\n                this.nzListOfSelectedValue.forEach(function (value) {\n                    /** @type {?} */\n                    var existedOption = _this.listOfAllTemplateOption.find(function (o) { return _this.compareWith(o.nzValue, value); });\n                    if (!existedOption) {\n                        /** @type {?} */\n                        var nzOptionComponent = new NzOptionComponent();\n                        nzOptionComponent.nzValue = value;\n                        nzOptionComponent.nzLabel = value;\n                        listOfTagsOption_1.push(nzOptionComponent);\n                    }\n                });\n                this.listOfTagOption = listOfTagsOption_1;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzOptionContainerComponent.prototype.refreshListOfAllTemplateOption = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.listOfAllTemplateOption = this.listOfNzOptionComponent.toArray().concat(this.listOfNzOptionGroupComponent.toArray().reduce(function (pre, cur) { return __spread(pre, cur.listOfNzOptionComponent.toArray()); }, []));\n            Promise.resolve().then(function () { return _this.nzListOfTemplateOptionChange.emit(_this.listOfAllTemplateOption); });\n        };\n    /**\n     * @param {?} isTemplateOptionChange\n     * @return {?}\n     */\n    NzOptionContainerComponent.prototype.refreshAllOptionStatus = /**\n     * @param {?} isTemplateOptionChange\n     * @return {?}\n     */\n        function (isTemplateOptionChange) {\n            /** update nzListOfSelectedValue | update option list -> update listOfAllTemplateOption -> update listOfSelectedOption -> update activatedOption **/\n            if (this.isInit) {\n                if (isTemplateOptionChange) {\n                    this.refreshListOfAllTemplateOption();\n                }\n                this.refreshListOfTagOption();\n                this.updateListOfFilterOption();\n                this.updateAddTagOptionDisplay();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzOptionContainerComponent.prototype.updateListOfFilterOption = /**\n     * @return {?}\n     */\n        function () {\n            this.listOfFilterOption = /** @type {?} */ (new NzOptionPipe().transform(this.listOfAllTemplateOption.concat(this.listOfTagOption), this.nzSearchValue, this.nzFilterOption, this.nzServerSearch));\n            if (this.nzSearchValue) {\n                this.setActiveOption(this.listOfFilterOption[0]);\n            }\n        };\n    /** watch options change in option group **/\n    /**\n     * watch options change in option group *\n     * @return {?}\n     */\n    NzOptionContainerComponent.prototype.watchSubOptionChanges = /**\n     * watch options change in option group *\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.unsubscribeOption();\n            /** @type {?} */\n            var optionChanges$ = merge(new Subject().asObservable(), this.listOfNzOptionGroupComponent.changes, this.listOfNzOptionComponent.changes);\n            if (this.listOfNzOptionGroupComponent.length) {\n                this.listOfNzOptionGroupComponent.forEach(function (group) { return optionChanges$ = group.listOfNzOptionComponent ? merge(group.listOfNzOptionComponent.changes, optionChanges$) : optionChanges$; });\n            }\n            this.optionSubscription = optionChanges$.subscribe(function () { return _this.refreshAllOptionStatus(true); });\n        };\n    /**\n     * @return {?}\n     */\n    NzOptionContainerComponent.prototype.unsubscribeGroup = /**\n     * @return {?}\n     */\n        function () {\n            if (this.groupSubscription) {\n                this.groupSubscription.unsubscribe();\n                this.groupSubscription = null;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzOptionContainerComponent.prototype.unsubscribeOption = /**\n     * @return {?}\n     */\n        function () {\n            if (this.optionSubscription) {\n                this.optionSubscription.unsubscribe();\n                this.optionSubscription = null;\n            }\n        };\n    Object.defineProperty(NzOptionContainerComponent.prototype, \"isTagsMode\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzMode === 'tags';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzOptionContainerComponent.prototype, \"isMultipleOrTags\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzMode === 'tags' || this.nzMode === 'multiple';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzOptionContainerComponent.prototype, \"isNotFoundDisplay\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return (!this.isTagsMode) && (!this.listOfFilterOption.length);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzOptionContainerComponent.prototype.updateAddTagOptionDisplay = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var listOfAllOption = this.listOfAllTemplateOption.concat(this.listOfTagOption).map(function (item) { return item.nzLabel; });\n            /** @type {?} */\n            var isMatch = listOfAllOption.indexOf(this.nzSearchValue) > -1;\n            this.isAddTagOptionDisplay = this.isTagsMode && this.nzSearchValue && (!isMatch);\n        };\n    /**\n     * @param {?} e\n     * @param {?} ul\n     * @return {?}\n     */\n    NzOptionContainerComponent.prototype.dropDownScroll = /**\n     * @param {?} e\n     * @param {?} ul\n     * @return {?}\n     */\n        function (e, ul) {\n            e.preventDefault();\n            e.stopPropagation();\n            if (ul && (ul.scrollHeight - ul.scrollTop === ul.clientHeight)) {\n                this.nzScrollToBottom.emit();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzOptionContainerComponent.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.isInit = true;\n            this.refreshAllOptionStatus(true);\n            this.watchSubOptionChanges();\n            this.groupSubscription = this.listOfNzOptionGroupComponent.changes.subscribe(function () { return _this.watchSubOptionChanges(); });\n        };\n    /**\n     * @return {?}\n     */\n    NzOptionContainerComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.unsubscribeGroup();\n            this.unsubscribeOption();\n        };\n    return NzOptionContainerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzOptionGroupComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzOptionGroupComponent() {\n    }\n    Object.defineProperty(NzOptionGroupComponent.prototype, \"nzLabel\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._label;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.isLabelString = !(value instanceof TemplateRef);\n            this._label = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return NzOptionGroupComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzSelectTopControlComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzSelectTopControlComponent(renderer) {\n        this.renderer = renderer;\n        this._listTemplateOfOption = [];\n        this.listOfCachedSelectedOption = [];\n        this.isComposing = false;\n        // tslint:disable-next-line:no-any\n        this.nzListOfSelectedValueChange = new EventEmitter();\n        this.nzOnSearch = new EventEmitter();\n        this.nzMode = 'default';\n        this.nzShowSearch = false;\n        this.nzDisabled = false;\n        this.nzOpen = false;\n    }\n    Object.defineProperty(NzSelectTopControlComponent.prototype, \"nzListOfSelectedValue\", {\n        // tslint:disable-next-line:no-any\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._listOfSelectedValue;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._listOfSelectedValue = value;\n            this.updateListOfCachedOption();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSelectTopControlComponent.prototype, \"nzListTemplateOfOption\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._listTemplateOfOption;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._listTemplateOfOption = value;\n            this.updateListOfCachedOption();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** cached selected option list **/\n    /**\n     * cached selected option list *\n     * @return {?}\n     */\n    NzSelectTopControlComponent.prototype.updateListOfCachedOption = /**\n     * cached selected option list *\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this.isSingleMode) {\n                /** @type {?} */\n                var selectedOption = this.nzListTemplateOfOption.find(function (o) { return _this.compareWith(o.nzValue, _this.nzListOfSelectedValue[0]); });\n                if (isNotNil(selectedOption)) {\n                    this.listOfCachedSelectedOption = [selectedOption];\n                }\n            }\n            else {\n                /** @type {?} */\n                var listOfCachedOptionFromLatestTemplate_1 = this.nzListTemplateOfOption.filter(function (o) { return isNotNil(_this.nzListOfSelectedValue.find(function (v) { return _this.compareWith(v, o.nzValue); })); });\n                /** @type {?} */\n                var restSelectedValue_1 = this.nzListOfSelectedValue.filter(function (v) { return !isNotNil(listOfCachedOptionFromLatestTemplate_1.find(function (o) { return _this.compareWith(o.nzValue, v); })); });\n                /** @type {?} */\n                var listOfCachedOptionFromOld = this.listOfCachedSelectedOption.filter(function (o) { return isNotNil(restSelectedValue_1.find(function (v) { return _this.compareWith(o.nzValue, v); })); });\n                this.listOfCachedSelectedOption = listOfCachedOptionFromLatestTemplate_1.concat(listOfCachedOptionFromOld);\n            }\n        };\n    /**\n     * @param {?} value\n     * @param {?} emit\n     * @return {?}\n     */\n    NzSelectTopControlComponent.prototype.setInputValue = /**\n     * @param {?} value\n     * @param {?} emit\n     * @return {?}\n     */\n        function (value, emit) {\n            this.inputValue = value;\n            this.updateWidth();\n            this.nzOnSearch.emit({ value: value, emit: emit });\n        };\n    Object.defineProperty(NzSelectTopControlComponent.prototype, \"isSingleMode\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzMode === 'default';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSelectTopControlComponent.prototype, \"isMultipleOrTags\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzMode === 'tags' || this.nzMode === 'multiple';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSelectTopControlComponent.prototype, \"placeHolderDisplay\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.inputValue || this.isComposing || this.nzListOfSelectedValue.length ? 'none' : 'block';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSelectTopControlComponent.prototype, \"selectedValueDisplay\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            /** @type {?} */\n            var showSelectedValue = false;\n            /** @type {?} */\n            var opacity = 1;\n            if (!this.nzShowSearch) {\n                showSelectedValue = true;\n            }\n            else {\n                if (this.nzOpen) {\n                    showSelectedValue = !(this.inputValue || this.isComposing);\n                    if (showSelectedValue) {\n                        opacity = 0.4;\n                    }\n                }\n                else {\n                    showSelectedValue = true;\n                }\n            }\n            return {\n                display: showSelectedValue ? 'block' : 'none',\n                opacity: \"\" + opacity\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSelectTopControlComponent.prototype, \"singleValueLabel\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.getPropertyFromValue(this.nzListOfSelectedValue[0], 'nzLabel');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzSelectTopControlComponent.prototype.focusOnInput = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            setTimeout(function () {\n                if (_this.inputElement) {\n                    _this.inputElement.nativeElement.focus();\n                }\n            });\n        };\n    // tslint:disable-next-line:no-any\n    /**\n     * @param {?} value\n     * @param {?} prop\n     * @return {?}\n     */\n    NzSelectTopControlComponent.prototype.getPropertyFromValue = /**\n     * @param {?} value\n     * @param {?} prop\n     * @return {?}\n     */\n        function (value, prop) {\n            var _this = this;\n            /** @type {?} */\n            var targetOption = this.listOfCachedSelectedOption.find(function (item) { return _this.compareWith(item.nzValue, value); });\n            return targetOption ? targetOption[prop] : '';\n        };\n    // tslint:disable-next-line:no-any\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzSelectTopControlComponent.prototype.isOptionDisplay = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            return (this.nzMode === 'tags') || !!this.getPropertyFromValue(value, 'nzLabel');\n        };\n    // tslint:disable-next-line:no-any\n    /**\n     * @param {?} value\n     * @param {?=} event\n     * @return {?}\n     */\n    NzSelectTopControlComponent.prototype.removeValueFormSelected = /**\n     * @param {?} value\n     * @param {?=} event\n     * @return {?}\n     */\n        function (value, event) {\n            if (this.nzDisabled || this.getPropertyFromValue(value, 'nzDisabled')) {\n                return;\n            }\n            this._listOfSelectedValue = this.nzListOfSelectedValue.filter(function (item) { return item !== value; });\n            this.nzListOfSelectedValueChange.emit(this.nzListOfSelectedValue);\n            // Do not trigger the popup\n            if (event && event.stopPropagation) {\n                event.stopPropagation();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzSelectTopControlComponent.prototype.updateWidth = /**\n     * @return {?}\n     */\n        function () {\n            if (this.isMultipleOrTags && this.inputElement) {\n                if (this.inputValue || this.isComposing) {\n                    this.renderer.setStyle(this.inputElement.nativeElement, 'width', this.inputElement.nativeElement.scrollWidth + \"px\");\n                }\n                else {\n                    this.renderer.removeStyle(this.inputElement.nativeElement, 'width');\n                }\n            }\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzSelectTopControlComponent.prototype.onKeyDownInput = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            /** @type {?} */\n            var keyCode = e.keyCode;\n            /** @type {?} */\n            var eventTarget = /** @type {?} */ (e.target);\n            if (this.isMultipleOrTags &&\n                !eventTarget.value &&\n                // BackSpace\n                keyCode === 8) {\n                e.preventDefault();\n                if (this.nzListOfSelectedValue.length) {\n                    this.removeValueFormSelected(this.nzListOfSelectedValue[this.nzListOfSelectedValue.length - 1]);\n                }\n            }\n        };\n    return NzSelectTopControlComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzSelectUnselectableDirective = /** @class */ /*@__PURE__*/ (function () {\n    function NzSelectUnselectableDirective() {\n    }\n    return NzSelectUnselectableDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzSelectComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzSelectComponent(renderer) {\n        this.renderer = renderer;\n        this._disabled = false;\n        this._allowClear = false;\n        this._showSearch = false;\n        this._open = false;\n        this._autoFocus = false;\n        this.onChange = function () { return null; };\n        this.onTouched = function () { return null; };\n        this.dropDownPosition = 'bottom';\n        // tslint:disable-next-line:no-any\n        this.listOfSelectedValue = [];\n        this.listOfTemplateOption = [];\n        this.searchValue = '';\n        this.isDestroy = true;\n        this.isInit = false;\n        this.nzOnSearch = new EventEmitter();\n        this.nzScrollToBottom = new EventEmitter();\n        this.nzOpenChange = new EventEmitter();\n        this.nzSize = 'default';\n        this.nzServerSearch = false;\n        this.nzMode = 'default';\n        this.nzDropdownMatchSelectWidth = true;\n        this.nzFilterOption = defaultFilterOption;\n        this.nzMaxMultipleCount = Infinity;\n        /**\n         * https://github.com/angular/angular/pull/13349/files *\n         */\n        this.compareWith = function (o1, o2) { return o1 === o2; };\n    }\n    Object.defineProperty(NzSelectComponent.prototype, \"nzDropdownClassName\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._dropdownClassName;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._dropdownClassName = value;\n            this.updateDropDownClassMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSelectComponent.prototype, \"nzAutoFocus\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._autoFocus;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._autoFocus = toBoolean(value);\n            this.updateAutoFocus();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSelectComponent.prototype, \"nzOpen\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._open;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._open = value;\n            this.handleEscBug();\n            this.updateCdkConnectedOverlayStatus();\n            this.updateDropDownClassMap();\n            if (this.nzOpen) {\n                if (this.nzSelectTopControlComponent) {\n                    this.nzSelectTopControlComponent.focusOnInput();\n                    this.nzSelectTopControlComponent.setInputValue('', true);\n                }\n                if (this.nzOptionContainerComponent) {\n                    this.nzOptionContainerComponent.scrollIntoView();\n                }\n                if (this.cdkConnectedOverlay && this.cdkConnectedOverlay.overlayRef) {\n                    this.cdkConnectedOverlay.overlayRef.updatePosition();\n                    /** @type {?} */\n                    var backdropElement = this.cdkConnectedOverlay.overlayRef.backdropElement;\n                    /** @type {?} */\n                    var parentNode = this.renderer.parentNode(backdropElement);\n                    /** @type {?} */\n                    var hostElement = this.cdkConnectedOverlay.overlayRef.hostElement;\n                    this.renderer.appendChild(parentNode, backdropElement);\n                    this.renderer.appendChild(parentNode, hostElement);\n                }\n            }\n            else {\n                if (this.nzSelectTopControlComponent) {\n                    this.nzSelectTopControlComponent.setInputValue('', false);\n                }\n                if (this.nzOptionContainerComponent) {\n                    this.nzOptionContainerComponent.resetActiveOption();\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSelectComponent.prototype, \"nzDisabled\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._disabled;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._disabled = toBoolean(value);\n            if (this.nzDisabled) {\n                this.closeDropDown();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSelectComponent.prototype, \"nzAllowClear\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._allowClear;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._allowClear = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSelectComponent.prototype, \"nzShowSearch\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._showSearch;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._showSearch = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSelectComponent.prototype, \"nzPlaceHolder\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._placeholder;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._placeholder = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzSelectComponent.prototype.onClick = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.nzDisabled) {\n                this.nzOpen = !this.nzOpen;\n                this.nzOpenChange.emit(this.nzOpen);\n            }\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NzSelectComponent.prototype._handleKeydown = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            if (this._disabled) {\n                return;\n            }\n            /** @type {?} */\n            var keyCode = event.keyCode;\n            if (!this._open) {\n                if (keyCode === SPACE || keyCode === DOWN_ARROW) {\n                    this.nzOpen = true;\n                    this.nzOpenChange.emit(this.nzOpen);\n                    event.preventDefault();\n                }\n            }\n            else {\n                if (keyCode === TAB) {\n                    // if (keyCode === SPACE || keyCode === TAB) { // #2201\n                    this.nzOpen = false;\n                    this.nzOpenChange.emit(this.nzOpen);\n                    event.preventDefault();\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzSelectComponent.prototype.updateAutoFocus = /**\n     * @return {?}\n     */\n        function () {\n            if (this.isInit && this.nzSelectTopControlComponent.inputElement) {\n                if (this.nzAutoFocus) {\n                    this.renderer.setAttribute(this.nzSelectTopControlComponent.inputElement.nativeElement, 'autofocus', 'autofocus');\n                }\n                else {\n                    this.renderer.removeAttribute(this.nzSelectTopControlComponent.inputElement.nativeElement, 'autofocus');\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzSelectComponent.prototype.focus = /**\n     * @return {?}\n     */\n        function () {\n            if (this.nzSelectTopControlComponent.inputElement) {\n                this.nzSelectTopControlComponent.inputElement.nativeElement.focus();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzSelectComponent.prototype.blur = /**\n     * @return {?}\n     */\n        function () {\n            if (this.nzSelectTopControlComponent.inputElement) {\n                this.nzSelectTopControlComponent.inputElement.nativeElement.blur();\n            }\n        };\n    /** overlay can not be always open , reopen overlay after press esc **/\n    /**\n     * overlay can not be always open , reopen overlay after press esc *\n     * @return {?}\n     */\n    NzSelectComponent.prototype.handleEscBug = /**\n     * overlay can not be always open , reopen overlay after press esc *\n     * @return {?}\n     */\n        function () {\n            if (this.nzOpen && this.cdkConnectedOverlay && this.cdkConnectedOverlay.overlayRef && !this.cdkConnectedOverlay.overlayRef.backdropElement) {\n                this.cdkConnectedOverlay.open = true;\n                this.cdkConnectedOverlay.ngOnChanges({ open: new SimpleChange(false, true, false) });\n            }\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzSelectComponent.prototype.onKeyDownCdkOverlayOrigin = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            if (this.nzOptionContainerComponent) {\n                this.nzOptionContainerComponent.onKeyDownUl(e);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzSelectComponent.prototype.closeDropDown = /**\n     * @return {?}\n     */\n        function () {\n            if (this.nzOpen) {\n                this.onTouched();\n                this.nzOpen = false;\n                this.nzOpenChange.emit(this.nzOpen);\n                this.blur();\n            }\n        };\n    /**\n     * @param {?} position\n     * @return {?}\n     */\n    NzSelectComponent.prototype.onPositionChange = /**\n     * @param {?} position\n     * @return {?}\n     */\n        function (position) {\n            this.dropDownPosition = position.connectionPair.originY;\n            this.updateDropDownClassMap();\n        };\n    /**\n     * @return {?}\n     */\n    NzSelectComponent.prototype.onClickOptionFromOptionContainer = /**\n     * @return {?}\n     */\n        function () {\n            if (this.isSingleMode) {\n                this.closeDropDown();\n            }\n            else if (this.nzMode === 'tags') {\n                this.onSearch('', true);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzSelectComponent.prototype.updateCdkConnectedOverlayStatus = /**\n     * @return {?}\n     */\n        function () {\n            if (this.isInit && this.nzOpen && this.cdkOverlayOrigin) {\n                if (this.nzDropdownMatchSelectWidth) {\n                    this.overlayWidth = this.cdkOverlayOrigin.elementRef.nativeElement.getBoundingClientRect().width;\n                    this.cdkConnectedOverlay.overlayRef.updateSize({ width: this.overlayWidth });\n                }\n                else {\n                    this.overlayMinWidth = this.cdkOverlayOrigin.elementRef.nativeElement.getBoundingClientRect().width;\n                    this.cdkConnectedOverlay.overlayRef.updateSize({ minWidth: this.overlayMinWidth });\n                }\n            }\n            this.updateCdkConnectedOverlayPositions();\n            if (this.cdkConnectedOverlay && this.cdkConnectedOverlay.overlayRef && this.cdkConnectedOverlay.overlayRef.backdropElement) {\n                if (this.nzOpen) {\n                    this.renderer.removeStyle(this.cdkConnectedOverlay.overlayRef.backdropElement, 'display');\n                }\n                else {\n                    this.renderer.setStyle(this.cdkConnectedOverlay.overlayRef.backdropElement, 'display', 'none');\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzSelectComponent.prototype.updateCdkConnectedOverlayPositions = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            /** wait for input size change **/\n            setTimeout(function () { return _this.cdkConnectedOverlay.overlayRef.updatePosition(); }, 160);\n        };\n    Object.defineProperty(NzSelectComponent.prototype, \"isSingleMode\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzMode === 'default';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSelectComponent.prototype, \"isMultipleOrTags\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzMode === 'tags' || this.nzMode === 'multiple';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** option container nzListOfSelectedValueChange -> update ngModel **/\n    // tslint:disable-next-line:no-any\n    /**\n     * option container nzListOfSelectedValueChange -> update ngModel *\n     * @param {?} value\n     * @return {?}\n     */\n    NzSelectComponent.prototype.updateListOfSelectedValueFromOptionContainer = /**\n     * option container nzListOfSelectedValueChange -> update ngModel *\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.clearSearchValue();\n            this.updateFromSelectedList(value);\n        };\n    /** option container nzListOfSelectedValueChange -> update ngModel **/\n    // tslint:disable-next-line:no-any\n    /**\n     * option container nzListOfSelectedValueChange -> update ngModel *\n     * @param {?} value\n     * @return {?}\n     */\n    NzSelectComponent.prototype.updateListOfSelectedValueFromTopControl = /**\n     * option container nzListOfSelectedValueChange -> update ngModel *\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.clearSearchValue();\n            this.updateFromSelectedList(value);\n        };\n    // tslint:disable-next-line:no-any\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzSelectComponent.prototype.updateFromSelectedList = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            /** @type {?} */\n            var modelValue;\n            if (this.isSingleMode) {\n                if (value.length) {\n                    modelValue = value[0];\n                }\n            }\n            else {\n                modelValue = value;\n                this.updateCdkConnectedOverlayPositions();\n            }\n            this.updateNgModel(value, modelValue);\n        };\n    /**\n     * @param {?} value\n     * @param {?} emit\n     * @return {?}\n     */\n    NzSelectComponent.prototype.onSearch = /**\n     * @param {?} value\n     * @param {?} emit\n     * @return {?}\n     */\n        function (value, emit) {\n            if (emit && (this.searchValue !== value)) {\n                this.nzOnSearch.emit(value);\n                this.searchValue = value;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzSelectComponent.prototype.clearNgModel = /**\n     * @return {?}\n     */\n        function () {\n            if (this.isSingleMode) {\n                this.updateNgModel([], null);\n            }\n            else {\n                this.updateNgModel([], []);\n            }\n        };\n    // tslint:disable-next-line:no-any\n    /**\n     * @param {?} list\n     * @param {?} value\n     * @return {?}\n     */\n    NzSelectComponent.prototype.updateNgModel = /**\n     * @param {?} list\n     * @param {?} value\n     * @return {?}\n     */\n        function (list, value) {\n            this.listOfSelectedValue = list;\n            if (value !== this.value) {\n                this.value = value;\n                this.onChange(this.value);\n            }\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzSelectComponent.prototype.listOfTemplateOptionChange = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.listOfTemplateOption = value;\n        };\n    /**\n     * @return {?}\n     */\n    NzSelectComponent.prototype.updateDropDownClassMap = /**\n     * @return {?}\n     */\n        function () {\n            var _a;\n            this.dropDownClassMap = (_a = {},\n                _a['ant-select-dropdown'] = true,\n                _a[\"ant-select-dropdown--single\"] = this.isSingleMode,\n                _a[\"ant-select-dropdown--multiple\"] = this.isMultipleOrTags,\n                _a[\"ant-select-dropdown-placement-bottomLeft\"] = this.dropDownPosition === 'bottom',\n                _a[\"ant-select-dropdown-placement-topLeft\"] = this.dropDownPosition === 'top',\n                _a[\"\" + this.nzDropdownClassName] = !!this.nzDropdownClassName,\n                _a);\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzSelectComponent.prototype.onClearSelection = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            // TODO: should not clear disabled option ?\n            e.stopPropagation();\n            this.clearNgModel();\n        };\n    /**\n     * @return {?}\n     */\n    NzSelectComponent.prototype.clearSearchValue = /**\n     * @return {?}\n     */\n        function () {\n            if (this.isSingleMode) {\n                this.nzSelectTopControlComponent.setInputValue('', false);\n            }\n            else {\n                this.nzSelectTopControlComponent.setInputValue('', false);\n            }\n        };\n    /** update ngModel -> update listOfSelectedValue **/\n    // tslint:disable-next-line:no-any\n    /**\n     * update ngModel -> update listOfSelectedValue *\n     * @param {?} value\n     * @return {?}\n     */\n    NzSelectComponent.prototype.writeValue = /**\n     * update ngModel -> update listOfSelectedValue *\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.value = value;\n            if (isNotNil(value)) {\n                if (Array.isArray(value)) {\n                    this.listOfSelectedValue = value;\n                }\n                else {\n                    this.listOfSelectedValue = [value];\n                }\n            }\n            else {\n                this.listOfSelectedValue = [];\n            }\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzSelectComponent.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this.onChange = fn;\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzSelectComponent.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this.onTouched = fn;\n        };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    NzSelectComponent.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n        function (isDisabled) {\n            this.nzDisabled = isDisabled;\n        };\n    /**\n     * @return {?}\n     */\n    NzSelectComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.isDestroy = false;\n            this.updateDropDownClassMap();\n        };\n    /**\n     * @return {?}\n     */\n    NzSelectComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.isInit = true;\n            Promise.resolve().then(function () { return _this.updateCdkConnectedOverlayStatus(); });\n        };\n    /**\n     * @return {?}\n     */\n    NzSelectComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.isDestroy = true;\n        };\n    return NzSelectComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzSelectModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzSelectModule() {\n    }\n    return NzSelectModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzDateCellDirective = /** @class */ /*@__PURE__*/ (function () {\n    function NzDateCellDirective() {\n    }\n    return NzDateCellDirective;\n}());\nvar NzMonthCellDirective = /** @class */ /*@__PURE__*/ (function () {\n    function NzMonthCellDirective() {\n    }\n    return NzMonthCellDirective;\n}());\nvar NzDateFullCellDirective = /** @class */ /*@__PURE__*/ (function () {\n    function NzDateFullCellDirective() {\n    }\n    return NzDateFullCellDirective;\n}());\nvar NzMonthFullCellDirective = /** @class */ /*@__PURE__*/ (function () {\n    function NzMonthFullCellDirective() {\n    }\n    return NzMonthFullCellDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzCalendarHeaderComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzCalendarHeaderComponent(i18n) {\n        this.i18n = i18n;\n        this.mode = 'month';\n        this.modeChange = new EventEmitter();\n        this.fullscreen = true;\n        this.yearChange = new EventEmitter();\n        this.monthChange = new EventEmitter();\n        this._activeDate = new Date();\n        this.yearOffset = 10;\n        this.yearTotal = 20;\n        this.prefixCls = 'ant-fullcalendar';\n    }\n    Object.defineProperty(NzCalendarHeaderComponent.prototype, \"activeDate\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._activeDate;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._activeDate = value;\n            this.setUpYears();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCalendarHeaderComponent.prototype, \"activeYear\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.activeDate.getFullYear();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCalendarHeaderComponent.prototype, \"activeMonth\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.activeDate.getMonth();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCalendarHeaderComponent.prototype, \"size\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.fullscreen ? 'default' : 'small';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCalendarHeaderComponent.prototype, \"yearTypeText\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.i18n.getLocale().Calendar.year;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCalendarHeaderComponent.prototype, \"monthTypeText\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.i18n.getLocale().Calendar.month;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzCalendarHeaderComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.setUpYears();\n            this.setUpMonths();\n        };\n    /**\n     * @param {?} year\n     * @return {?}\n     */\n    NzCalendarHeaderComponent.prototype.updateYear = /**\n     * @param {?} year\n     * @return {?}\n     */\n        function (year) {\n            this.yearChange.emit(year);\n            this.setUpYears(year);\n        };\n    /**\n     * @param {?=} year\n     * @return {?}\n     */\n    NzCalendarHeaderComponent.prototype.setUpYears = /**\n     * @param {?=} year\n     * @return {?}\n     */\n        function (year) {\n            /** @type {?} */\n            var start = (year || this.activeYear) - this.yearOffset;\n            /** @type {?} */\n            var end = start + this.yearTotal;\n            this.years = [];\n            for (var i = start; i < end; i++) {\n                this.years.push({ label: \"\" + i, value: i });\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzCalendarHeaderComponent.prototype.setUpMonths = /**\n     * @return {?}\n     */\n        function () {\n            this.months = [];\n            for (var i = 0; i < 12; i++) {\n                /** @type {?} */\n                var dateInMonth = setMonth(this.activeDate, i);\n                /** @type {?} */\n                var monthText = this.i18n.formatDate(dateInMonth, 'MMM');\n                this.months.push({ label: monthText, value: i });\n            }\n        };\n    return NzCalendarHeaderComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzCalendarComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzCalendarComponent(i18n) {\n        this.i18n = i18n;\n        this.nzMode = 'month';\n        this.nzModeChange = new EventEmitter();\n        this.nzValueChange = new EventEmitter();\n        this.fullscreen = true;\n        this.daysInWeek = [];\n        this.monthsInYear = [];\n        this.dateMatrix = [];\n        this.activeDate = new Date();\n        this.currentDateRow = -1;\n        this.currentDateCol = -1;\n        this.activeDateRow = -1;\n        this.activeDateCol = -1;\n        this.currentMonthRow = -1;\n        this.currentMonthCol = -1;\n        this.activeMonthRow = -1;\n        this.activeMonthCol = -1;\n        this.dateCell = null;\n        this.dateFullCell = null;\n        this.monthCell = null;\n        this.monthFullCell = null;\n        this.prefixCls = 'ant-fullcalendar';\n        this.currentDate = new Date();\n        this.onChangeFn = function () { };\n        this.onTouchFn = function () { };\n    }\n    Object.defineProperty(NzCalendarComponent.prototype, \"nzValue\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) { this.updateDate(value, false); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCalendarComponent.prototype, \"nzDateCell\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) { this.dateCell = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCalendarComponent.prototype, \"nzDateFullCell\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) { this.dateFullCell = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCalendarComponent.prototype, \"nzMonthCell\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) { this.monthCell = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCalendarComponent.prototype, \"nzMonthFullCell\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) { this.monthFullCell = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCalendarComponent.prototype, \"nzFullscreen\", {\n        get: /**\n         * @return {?}\n         */ function () { return this.fullscreen; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) { this.fullscreen = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCalendarComponent.prototype, \"nzCard\", {\n        get: /**\n         * @return {?}\n         */ function () { return !this.fullscreen; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) { this.fullscreen = !coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCalendarComponent.prototype, \"dateCellChild\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (value) {\n                this.dateCell = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCalendarComponent.prototype, \"dateFullCellChild\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (value) {\n                this.dateFullCell = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCalendarComponent.prototype, \"monthCellChild\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (value) {\n                this.monthCell = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCalendarComponent.prototype, \"monthFullCellChild\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (value) {\n                this.monthFullCell = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCalendarComponent.prototype, \"calendarStart\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return startOfWeek(startOfMonth(this.activeDate));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzCalendarComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.setUpDaysInWeek();\n            this.setUpMonthsInYear();\n            this.setUpDateMatrix();\n            this.calculateCurrentDate();\n            this.calculateActiveDate();\n            this.calculateCurrentMonth();\n            this.calculateActiveMonth();\n        };\n    /**\n     * @param {?} mode\n     * @return {?}\n     */\n    NzCalendarComponent.prototype.onModeChange = /**\n     * @param {?} mode\n     * @return {?}\n     */\n        function (mode) {\n            this.nzModeChange.emit(mode);\n        };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    NzCalendarComponent.prototype.onDateSelect = /**\n     * @param {?} date\n     * @return {?}\n     */\n        function (date) {\n            this.updateDate(date);\n        };\n    /**\n     * @param {?} year\n     * @return {?}\n     */\n    NzCalendarComponent.prototype.onYearSelect = /**\n     * @param {?} year\n     * @return {?}\n     */\n        function (year) {\n            /** @type {?} */\n            var date = setYear(this.activeDate, year);\n            this.updateDate(date);\n        };\n    /**\n     * @param {?} month\n     * @return {?}\n     */\n    NzCalendarComponent.prototype.onMonthSelect = /**\n     * @param {?} month\n     * @return {?}\n     */\n        function (month) {\n            /** @type {?} */\n            var date = setMonth(this.activeDate, month);\n            this.updateDate(date);\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzCalendarComponent.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.updateDate(value || new Date(), false);\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzCalendarComponent.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this.onChangeFn = fn;\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzCalendarComponent.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this.onTouchFn = fn;\n        };\n    /**\n     * @param {?} date\n     * @param {?=} touched\n     * @return {?}\n     */\n    NzCalendarComponent.prototype.updateDate = /**\n     * @param {?} date\n     * @param {?=} touched\n     * @return {?}\n     */\n        function (date, touched) {\n            if (touched === void 0) {\n                touched = true;\n            }\n            /** @type {?} */\n            var dayChanged = !isSameDay(date, this.activeDate);\n            /** @type {?} */\n            var monthChanged = !isSameMonth(date, this.activeDate);\n            /** @type {?} */\n            var yearChanged = !isSameYear(date, this.activeDate);\n            this.activeDate = date;\n            if (dayChanged) {\n                this.calculateActiveDate();\n            }\n            if (monthChanged) {\n                this.setUpDateMatrix();\n                this.calculateCurrentDate();\n                this.calculateActiveMonth();\n            }\n            if (yearChanged) {\n                this.calculateCurrentMonth();\n            }\n            if (touched) {\n                this.onChangeFn(date);\n                this.onTouchFn();\n                this.nzValueChange.emit(date);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzCalendarComponent.prototype.setUpDaysInWeek = /**\n     * @return {?}\n     */\n        function () {\n            this.daysInWeek = [];\n            /** @type {?} */\n            var weekStart = startOfWeek(this.activeDate);\n            for (var i = 0; i < 7; i++) {\n                /** @type {?} */\n                var date = addDays(weekStart, i);\n                /** @type {?} */\n                var title = this.i18n.formatDate(date, 'E');\n                /** @type {?} */\n                var label = this.i18n.formatDate(date, 'EEEEEE');\n                this.daysInWeek.push({ title: title, label: label });\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzCalendarComponent.prototype.setUpMonthsInYear = /**\n     * @return {?}\n     */\n        function () {\n            this.monthsInYear = [];\n            for (var i = 0; i < 12; i++) {\n                /** @type {?} */\n                var date = setMonth(this.activeDate, i);\n                /** @type {?} */\n                var title = this.i18n.formatDate(date, 'MMM');\n                /** @type {?} */\n                var label = this.i18n.formatDate(date, 'MMM');\n                /** @type {?} */\n                var start = startOfMonth(date);\n                this.monthsInYear.push({ title: title, label: label, start: start });\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzCalendarComponent.prototype.setUpDateMatrix = /**\n     * @return {?}\n     */\n        function () {\n            this.dateMatrix = [];\n            /** @type {?} */\n            var monthStart = startOfMonth(this.activeDate);\n            /** @type {?} */\n            var monthEnd = endOfMonth(this.activeDate);\n            /** @type {?} */\n            var weekDiff = differenceInCalendarWeeks(monthEnd, monthStart) + 2;\n            for (var week = 0; week < weekDiff; week++) {\n                /** @type {?} */\n                var row = [];\n                /** @type {?} */\n                var weekStart = addDays(this.calendarStart, week * 7);\n                for (var day = 0; day < 7; day++) {\n                    /** @type {?} */\n                    var date = addDays(weekStart, day);\n                    /** @type {?} */\n                    var monthDiff = differenceInCalendarMonths(date, this.activeDate);\n                    /** @type {?} */\n                    var title = this.i18n.formatDate(date, 'longDate');\n                    /** @type {?} */\n                    var label = this.i18n.formatDate(date, 'dd');\n                    /** @type {?} */\n                    var rel = monthDiff === 0 ? 'current' : monthDiff < 0 ? 'last' : 'next';\n                    row.push({ title: title, label: label, rel: rel, value: date });\n                }\n                this.dateMatrix.push(row);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzCalendarComponent.prototype.calculateCurrentDate = /**\n     * @return {?}\n     */\n        function () {\n            if (isThisMonth(this.activeDate)) {\n                this.currentDateRow = differenceInCalendarWeeks(this.currentDate, this.calendarStart);\n                this.currentDateCol = differenceInCalendarDays(this.currentDate, addDays(this.calendarStart, this.currentDateRow * 7));\n            }\n            else {\n                this.currentDateRow = -1;\n                this.currentDateCol = -1;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzCalendarComponent.prototype.calculateActiveDate = /**\n     * @return {?}\n     */\n        function () {\n            this.activeDateRow = differenceInCalendarWeeks(this.activeDate, this.calendarStart);\n            this.activeDateCol = differenceInCalendarDays(this.activeDate, addDays(this.calendarStart, this.activeDateRow * 7));\n        };\n    /**\n     * @return {?}\n     */\n    NzCalendarComponent.prototype.calculateCurrentMonth = /**\n     * @return {?}\n     */\n        function () {\n            if (isThisYear(this.activeDate)) {\n                /** @type {?} */\n                var yearStart = startOfYear(this.currentDate);\n                /** @type {?} */\n                var monthDiff = differenceInCalendarMonths(this.currentDate, yearStart);\n                this.currentMonthRow = Math.floor(monthDiff / 3);\n                this.currentMonthCol = monthDiff % 3;\n            }\n            else {\n                this.currentMonthRow = -1;\n                this.currentMonthCol = -1;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzCalendarComponent.prototype.calculateActiveMonth = /**\n     * @return {?}\n     */\n        function () {\n            this.activeMonthRow = Math.floor(this.activeDate.getMonth() / 3);\n            this.activeMonthCol = this.activeDate.getMonth() % 3;\n        };\n    return NzCalendarComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzCalendarModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzCalendarModule() {\n    }\n    return NzCalendarModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzCardGridDirective = /** @class */ /*@__PURE__*/ (function () {\n    function NzCardGridDirective() {\n    }\n    return NzCardGridDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzCardLoadingComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzCardLoadingComponent() {\n    }\n    return NzCardLoadingComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzCardMetaComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzCardMetaComponent() {\n    }\n    Object.defineProperty(NzCardMetaComponent.prototype, \"nzTitle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._title;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.isTitleString = !(value instanceof TemplateRef);\n            this._title = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCardMetaComponent.prototype, \"nzDescription\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._description;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.isDescriptionString = !(value instanceof TemplateRef);\n            this._description = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return NzCardMetaComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzCardTabComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzCardTabComponent() {\n    }\n    return NzCardTabComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzCardComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzCardComponent() {\n        this._bordered = true;\n        this._loading = false;\n        this._hoverable = false;\n        this.nzActions = [];\n    }\n    Object.defineProperty(NzCardComponent.prototype, \"nzTitle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._title;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.isTitleString = !(value instanceof TemplateRef);\n            this._title = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCardComponent.prototype, \"nzExtra\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._extra;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.isExtraString = !(value instanceof TemplateRef);\n            this._extra = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCardComponent.prototype, \"isInner\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzType === 'inner';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCardComponent.prototype, \"isTabs\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return !!this.tab;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCardComponent.prototype, \"nzBordered\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._bordered;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._bordered = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCardComponent.prototype, \"nzLoading\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._loading;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._loading = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCardComponent.prototype, \"nzHoverable\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._hoverable;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._hoverable = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return NzCardComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzCardModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzCardModule() {\n    }\n    return NzCardModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzCarouselContentDirective = /** @class */ /*@__PURE__*/ (function () {\n    function NzCarouselContentDirective(elementRef, renderer) {\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        this._active = false;\n        this._width = 0;\n        this._fadeMode = false;\n        this.el = this.elementRef.nativeElement;\n    }\n    Object.defineProperty(NzCarouselContentDirective.prototype, \"width\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._width;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._width = value;\n            this.renderer.setStyle(this.el, 'width', this.width + \"px\");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCarouselContentDirective.prototype, \"left\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._left;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._left = value;\n            if (isNotNil(this.left)) {\n                this.renderer.setStyle(this.el, 'left', this.left + \"px\");\n            }\n            else {\n                this.renderer.removeStyle(this.el, 'left');\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCarouselContentDirective.prototype, \"top\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._top;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._top = value;\n            if (isNotNil(this.top)) {\n                this.renderer.setStyle(this.el, 'top', this.top + \"px\");\n            }\n            else {\n                this.renderer.removeStyle(this.el, 'top');\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCarouselContentDirective.prototype, \"isActive\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._active;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._active = value;\n            this.updateOpacity();\n            if (this.isActive) {\n                this.renderer.addClass(this.el, 'slick-active');\n            }\n            else {\n                this.renderer.removeClass(this.el, 'slick-active');\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCarouselContentDirective.prototype, \"fadeMode\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._fadeMode;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._fadeMode = value;\n            if (this.fadeMode) {\n                this.renderer.setStyle(this.el, 'position', 'relative');\n            }\n            else {\n                this.renderer.removeStyle(this.el, 'position');\n            }\n            this.updateOpacity();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzCarouselContentDirective.prototype.updateOpacity = /**\n     * @return {?}\n     */\n        function () {\n            if (this.fadeMode) {\n                this.renderer.setStyle(this.el, 'opacity', this.isActive ? 1 : 0);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzCarouselContentDirective.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.renderer.setStyle(this.el, 'transition', 'opacity 500ms ease');\n        };\n    return NzCarouselContentDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzCarouselComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzCarouselComponent(elementRef, renderer) {\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        this._autoPlay = false;\n        this._autoPlaySpeed = 3000;\n        this._dots = true;\n        this._vertical = false;\n        this._effect = 'scrollx';\n        this.unsubscribe$ = new Subject();\n        this.activeIndex = 0;\n        this.transform = 'translate3d(0px, 0px, 0px)';\n        this.nzAfterChange = new EventEmitter();\n        this.nzBeforeChange = new EventEmitter();\n        this.nzEnableSwipe = true;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzCarouselComponent.prototype.onWindowResize = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            this.renderContent();\n        };\n    Object.defineProperty(NzCarouselComponent.prototype, \"nextIndex\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.activeIndex < this.slideContents.length - 1 ? (this.activeIndex + 1) : 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCarouselComponent.prototype, \"prevIndex\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.activeIndex > 0 ? (this.activeIndex - 1) : (this.slideContents.length - 1);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCarouselComponent.prototype, \"nzDots\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._dots;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._dots = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCarouselComponent.prototype, \"nzEffect\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._effect;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._effect = value;\n            this.updateMode();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCarouselComponent.prototype, \"nzAutoPlay\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._autoPlay;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._autoPlay = toBoolean(value);\n            this.setUpAutoPlay();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCarouselComponent.prototype, \"nzAutoPlaySpeed\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._autoPlaySpeed;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._autoPlaySpeed = toNumber(value, null);\n            this.setUpAutoPlay();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCarouselComponent.prototype, \"nzVertical\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._vertical;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._vertical = toBoolean(value);\n            this.updateMode();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} content\n     * @param {?} i\n     * @return {?}\n     */\n    NzCarouselComponent.prototype.setActive = /**\n     * @param {?} content\n     * @param {?} i\n     * @return {?}\n     */\n        function (content, i) {\n            if (this.slideContents && this.slideContents.length) {\n                this.setUpAutoPlay();\n                /** @type {?} */\n                var beforeIndex = this.slideContents.toArray().findIndex(function (slide) { return slide.isActive; });\n                this.nzBeforeChange.emit({ from: beforeIndex, to: i });\n                this.activeIndex = i;\n                if (this.nzEffect === 'scrollx') {\n                    if (this.nzVertical) {\n                        this.transform = \"translate3d(0px, \" + -this.activeIndex * this.elementRef.nativeElement.offsetHeight + \"px, 0px)\";\n                    }\n                    else {\n                        this.transform = \"translate3d(\" + -this.activeIndex * this.elementRef.nativeElement.offsetWidth + \"px, 0px, 0px)\";\n                    }\n                }\n                else {\n                    this.transform = 'translate3d(0px, 0px, 0px)';\n                }\n                this.slideContents.forEach(function (slide) { return slide.isActive = slide === content; });\n                this.nzAfterChange.emit(i);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzCarouselComponent.prototype.renderContent = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this.slideContents && this.slideContents.length) {\n                this.slideContents.forEach(function (content, i) {\n                    content.width = _this.elementRef.nativeElement.offsetWidth;\n                    if (_this.nzEffect === 'fade') {\n                        content.fadeMode = true;\n                        if (_this.nzVertical) {\n                            content.top = -i * _this.elementRef.nativeElement.offsetHeight;\n                        }\n                        else {\n                            content.left = -i * content.width;\n                        }\n                    }\n                    else {\n                        content.fadeMode = false;\n                        content.left = null;\n                        content.top = null;\n                    }\n                });\n                if (this.nzVertical) {\n                    this.renderer.removeStyle(this.slickTrack.nativeElement, 'width');\n                    this.renderer.removeStyle(this.slickList.nativeElement, 'width');\n                    this.renderer.removeStyle(this.slickList.nativeElement, 'height');\n                    this.renderer.setStyle(this.slickList.nativeElement, 'height', this.slideContents.first.el.offsetHeight + \"px\");\n                    this.renderer.removeStyle(this.slickTrack.nativeElement, 'height');\n                    this.renderer.setStyle(this.slickTrack.nativeElement, 'height', this.slideContents.length * this.elementRef.nativeElement.offsetHeight + \"px\");\n                }\n                else {\n                    this.renderer.removeStyle(this.slickTrack.nativeElement, 'height');\n                    this.renderer.removeStyle(this.slickList.nativeElement, 'height');\n                    this.renderer.removeStyle(this.slickTrack.nativeElement, 'width');\n                    this.renderer.setStyle(this.slickTrack.nativeElement, 'width', this.slideContents.length * this.elementRef.nativeElement.offsetWidth + \"px\");\n                }\n                this.setUpAutoPlay();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzCarouselComponent.prototype.setUpAutoPlay = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.clearTimeout();\n            if (this.nzAutoPlay && this.nzAutoPlaySpeed > 0) {\n                this.timeout = setTimeout(function (_) {\n                    _this.setActive(_this.slideContents.toArray()[_this.nextIndex], _this.nextIndex);\n                }, this.nzAutoPlaySpeed);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzCarouselComponent.prototype.updateMode = /**\n     * @return {?}\n     */\n        function () {\n            if (this.slideContents && this.slideContents.length) {\n                this.renderContent();\n                this.setActive(this.slideContents.first, 0);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzCarouselComponent.prototype.clearTimeout = /**\n     * @return {?}\n     */\n        function () {\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n                this.timeout = null;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzCarouselComponent.prototype.next = /**\n     * @return {?}\n     */\n        function () {\n            this.setActive(this.slideContents.toArray()[this.nextIndex], this.nextIndex);\n        };\n    /**\n     * @return {?}\n     */\n    NzCarouselComponent.prototype.pre = /**\n     * @return {?}\n     */\n        function () {\n            this.setActive(this.slideContents.toArray()[this.prevIndex], this.prevIndex);\n        };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    NzCarouselComponent.prototype.goTo = /**\n     * @param {?} index\n     * @return {?}\n     */\n        function (index) {\n            if (index >= 0 && index <= this.slideContents.length - 1) {\n                this.setActive(this.slideContents.toArray()[index], index);\n            }\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzCarouselComponent.prototype.onKeyDown = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            if (e.keyCode === LEFT_ARROW) { // Left\n                // Left\n                this.pre();\n                e.preventDefault();\n            }\n            else if (e.keyCode === RIGHT_ARROW) { // Right\n                // Right\n                this.next();\n                e.preventDefault();\n            }\n        };\n    /**\n     * @param {?=} action\n     * @return {?}\n     */\n    NzCarouselComponent.prototype.swipe = /**\n     * @param {?=} action\n     * @return {?}\n     */\n        function (action) {\n            if (action === void 0) {\n                action = 'swipeleft';\n            }\n            if (!this.nzEnableSwipe) {\n                return;\n            }\n            if (action === 'swipeleft') {\n                this.next();\n            }\n            if (action === 'swiperight') {\n                this.pre();\n            }\n        };\n    /* tslint:disable:no-any */\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzCarouselComponent.prototype.swipeInProgress = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            if (this.nzEffect === 'scrollx') {\n                /** @type {?} */\n                var final = e.isFinal;\n                /** @type {?} */\n                var scrollWidth = final ? 0 : e.deltaX * 1.2;\n                /** @type {?} */\n                var totalWidth = this.elementRef.nativeElement.offsetWidth;\n                if (this.nzVertical) {\n                    /** @type {?} */\n                    var totalHeight = this.elementRef.nativeElement.offsetHeight;\n                    /** @type {?} */\n                    var scrollPercent = scrollWidth / totalWidth;\n                    /** @type {?} */\n                    var scrollHeight = scrollPercent * totalHeight;\n                    this.transform = \"translate3d(0px, \" + (-this.activeIndex * totalHeight + scrollHeight) + \"px, 0px)\";\n                }\n                else {\n                    this.transform = \"translate3d(\" + (-this.activeIndex * totalWidth + scrollWidth) + \"px, 0px, 0px)\";\n                }\n            }\n            if (e.isFinal) {\n                this.setUpAutoPlay();\n            }\n            else {\n                this.clearTimeout();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzCarouselComponent.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n        function () {\n            if (this.slideContents && this.slideContents.length) {\n                this.slideContents.first.isActive = true;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzCarouselComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.slideContents.changes\n                .pipe(takeUntil(this.unsubscribe$))\n                .subscribe(function () {\n                _this.renderContent();\n            });\n            this.renderContent();\n        };\n    /**\n     * @return {?}\n     */\n    NzCarouselComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.unsubscribe$.next();\n            this.unsubscribe$.complete();\n            this.clearTimeout();\n        };\n    return NzCarouselComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzCarouselModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzCarouselModule() {\n    }\n    return NzCarouselModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// Thanks to https://github.com/andreypopp/react-textarea-autosize/\n/**\n * calculateNodeHeight(uiTextNode, useCache = false)\n */\n/** @type {?} */\nvar HIDDEN_TEXTAREA_STYLE = \"\\n  min-height:0 !important;\\n  max-height:none !important;\\n  height:0 !important;\\n  visibility:hidden !important;\\n  overflow:hidden !important;\\n  position:absolute !important;\\n  z-index:-1000 !important;\\n  top:0 !important;\\n  right:0 !important\\n\";\n/** @type {?} */\nvar SIZING_STYLE = [\n    'letter-spacing',\n    'line-height',\n    'padding-top',\n    'padding-bottom',\n    'font-family',\n    'font-weight',\n    'font-size',\n    'text-rendering',\n    'text-transform',\n    'width',\n    'text-indent',\n    'padding-left',\n    'padding-right',\n    'border-width',\n    'box-sizing'\n];\n/** @type {?} */\nvar computedStyleCache = {};\n/** @type {?} */\nvar hiddenTextarea;\n/**\n * @param {?} node\n * @param {?=} useCache\n * @return {?}\n */\nfunction calculateNodeStyling(node, useCache) {\n    if (useCache === void 0) {\n        useCache = false;\n    }\n    /** @type {?} */\n    var nodeRef = /** @type {?} */ ((node.getAttribute('id') ||\n        node.getAttribute('data-reactid') ||\n        node.getAttribute('name')));\n    if (useCache && computedStyleCache[nodeRef]) {\n        return computedStyleCache[nodeRef];\n    }\n    /** @type {?} */\n    var style$$1 = window.getComputedStyle(node);\n    /** @type {?} */\n    var boxSizing = (style$$1.getPropertyValue('box-sizing') ||\n        style$$1.getPropertyValue('-moz-box-sizing') ||\n        style$$1.getPropertyValue('-webkit-box-sizing'));\n    /** @type {?} */\n    var paddingSize = (parseFloat(style$$1.getPropertyValue('padding-bottom')) +\n        parseFloat(style$$1.getPropertyValue('padding-top')));\n    /** @type {?} */\n    var borderSize = (parseFloat(style$$1.getPropertyValue('border-bottom-width')) +\n        parseFloat(style$$1.getPropertyValue('border-top-width')));\n    /** @type {?} */\n    var sizingStyle = SIZING_STYLE\n        .map(function (name) { return name + \":\" + style$$1.getPropertyValue(name); })\n        .join(';');\n    /** @type {?} */\n    var nodeInfo = {\n        sizingStyle: sizingStyle,\n        paddingSize: paddingSize,\n        borderSize: borderSize,\n        boxSizing: boxSizing\n    };\n    if (useCache && nodeRef) {\n        computedStyleCache[nodeRef] = nodeInfo;\n    }\n    return nodeInfo;\n}\n/**\n * @param {?} uiTextNode\n * @param {?=} useCache\n * @param {?=} minRows\n * @param {?=} maxRows\n * @return {?}\n */\nfunction calculateNodeHeight(uiTextNode, useCache, minRows, maxRows) {\n    if (useCache === void 0) {\n        useCache = false;\n    }\n    if (minRows === void 0) {\n        minRows = null;\n    }\n    if (maxRows === void 0) {\n        maxRows = null;\n    }\n    if (!hiddenTextarea) {\n        hiddenTextarea = document.createElement('textarea');\n        document.body.appendChild(hiddenTextarea);\n    }\n    // Fix wrap=\"off\" issue\n    // https://github.com/ant-design/ant-design/issues/6577\n    if (uiTextNode.getAttribute('wrap')) {\n        hiddenTextarea.setAttribute('wrap', /** @type {?} */ (uiTextNode.getAttribute('wrap')));\n    }\n    else {\n        hiddenTextarea.removeAttribute('wrap');\n    }\n    var _a = calculateNodeStyling(uiTextNode, useCache), paddingSize = _a.paddingSize, borderSize = _a.borderSize, boxSizing = _a.boxSizing, sizingStyle = _a.sizingStyle;\n    // Need to have the overflow attribute to hide the scrollbar otherwise\n    // text-lines will not calculated properly as the shadow will technically be\n    // narrower for content\n    hiddenTextarea.setAttribute('style', sizingStyle + \";\" + HIDDEN_TEXTAREA_STYLE);\n    hiddenTextarea.value = uiTextNode.value || uiTextNode.placeholder || '';\n    /** @type {?} */\n    var minHeight = Number.MIN_SAFE_INTEGER;\n    /** @type {?} */\n    var maxHeight = Number.MAX_SAFE_INTEGER;\n    /** @type {?} */\n    var height = hiddenTextarea.scrollHeight;\n    /** @type {?} */\n    var overflowY;\n    if (boxSizing === 'border-box') {\n        // border-box: add border, since height = content + padding + border\n        height = height + borderSize;\n    }\n    else if (boxSizing === 'content-box') {\n        // remove padding, since height = content\n        height = height - paddingSize;\n    }\n    if (minRows !== null || maxRows !== null) {\n        // measure height of a textarea with a single row\n        hiddenTextarea.value = '';\n        /** @type {?} */\n        var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;\n        if (minRows !== null) {\n            minHeight = singleRowHeight * minRows;\n            if (boxSizing === 'border-box') {\n                minHeight = minHeight + paddingSize + borderSize;\n            }\n            height = Math.max(minHeight, height);\n        }\n        if (maxRows !== null) {\n            maxHeight = singleRowHeight * maxRows;\n            if (boxSizing === 'border-box') {\n                maxHeight = maxHeight + paddingSize + borderSize;\n            }\n            overflowY = height > maxHeight ? '' : 'hidden';\n            height = Math.min(maxHeight, height);\n        }\n    }\n    // Remove scroll bar flash when autosize without maxRows\n    if (!maxRows) {\n        overflowY = 'hidden';\n    }\n    return { height: height, minHeight: minHeight, maxHeight: maxHeight, overflowY: overflowY };\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzInputDirective = /** @class */ /*@__PURE__*/ (function () {\n    function NzInputDirective(elementRef, renderer, ngModel, ngControl) {\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        this.ngModel = ngModel;\n        this.ngControl = ngControl;\n        this._size = 'default';\n        this._disabled = false;\n        this._autosize = false;\n        this.el = this.elementRef.nativeElement;\n        this.isInit = false;\n    }\n    Object.defineProperty(NzInputDirective.prototype, \"nzSize\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._size;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._size = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzInputDirective.prototype, \"disabled\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            if (this.ngControl && this.ngControl.disabled !== null) {\n                return this.ngControl.disabled;\n            }\n            return this._disabled;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._disabled = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzInputDirective.prototype, \"nzAutosize\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._autosize;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (typeof value === 'string') {\n                this._autosize = true;\n            }\n            else {\n                this._autosize = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzInputDirective.prototype, \"setLgClass\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzSize === 'large';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzInputDirective.prototype, \"setSmClass\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzSize === 'small';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzInputDirective.prototype.textAreaOnChange = /**\n     * @return {?}\n     */\n        function () {\n            if (this.nzAutosize) {\n                this.resizeTextArea();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzInputDirective.prototype.resizeTextArea = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var textAreaRef = /** @type {?} */ (this.el);\n            /** @type {?} */\n            var maxRows = this.nzAutosize ? ( /** @type {?} */(this.nzAutosize)).maxRows || null : null;\n            /** @type {?} */\n            var minRows = this.nzAutosize ? ( /** @type {?} */(this.nzAutosize)).minRows || null : null;\n            if ((this.previousValue === textAreaRef.value) && (this.previewsMaxRows === maxRows) && (this.previewsMinRows === minRows)) {\n                return;\n            }\n            this.previousValue = textAreaRef.value;\n            this.previewsMinRows = minRows;\n            this.previewsMaxRows = maxRows;\n            // eliminate jitter\n            this.renderer.setStyle(textAreaRef, 'height', 'auto');\n            /** @type {?} */\n            var textAreaStyles = calculateNodeHeight(textAreaRef, false, minRows, maxRows);\n            this.renderer.setStyle(textAreaRef, 'height', textAreaStyles.height + \"px\");\n            this.renderer.setStyle(textAreaRef, 'overflowY', textAreaStyles.overflowY);\n            this.renderer.setStyle(textAreaRef, 'minHeight', textAreaStyles.minHeight + \"px\");\n            this.renderer.setStyle(textAreaRef, 'maxHeight', textAreaStyles.maxHeight + \"px\");\n        };\n    /**\n     * @return {?}\n     */\n    NzInputDirective.prototype.ngDoCheck = /**\n     * @return {?}\n     */\n        function () {\n            if (this.nzAutosize && this.isInit) {\n                this.resizeTextArea();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzInputDirective.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            this.isInit = true;\n            if (this.nzAutosize) {\n                this.resizeTextArea();\n            }\n        };\n    return NzInputDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzInputGroupComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzInputGroupComponent(el) {\n        this.el = el;\n        this._addOnBefore = '';\n        this._addOnAfter = '';\n        this._prefix = '';\n        this._suffix = '';\n        this._size = 'default';\n        this._compact = false;\n        this._search = false;\n    }\n    Object.defineProperty(NzInputGroupComponent.prototype, \"nzSize\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._size;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._size = value;\n            this.updateChildrenInputSize();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzInputGroupComponent.prototype, \"nzCompact\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._compact;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._compact = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzInputGroupComponent.prototype, \"nzAddOnBefore\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._addOnBefore;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.isAddOnBeforeString = !(value instanceof TemplateRef);\n            this._addOnBefore = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzInputGroupComponent.prototype, \"nzAddOnAfter\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._addOnAfter;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.isAddOnAfterString = !(value instanceof TemplateRef);\n            this._addOnAfter = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzInputGroupComponent.prototype, \"nzPrefix\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._prefix;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.isPrefixString = !(value instanceof TemplateRef);\n            this._prefix = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzInputGroupComponent.prototype, \"nzSuffix\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._suffix;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.isSuffixString = !(value instanceof TemplateRef);\n            this._suffix = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzInputGroupComponent.prototype, \"nzSearch\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._search;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._search = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzInputGroupComponent.prototype, \"isLarge\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzSize === 'large';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzInputGroupComponent.prototype, \"isSmall\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzSize === 'small';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzInputGroupComponent.prototype, \"isAffix\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return (!!(this.nzSuffix || this.nzPrefix || this.nzPrefixIcon || this.nzSuffixIcon));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzInputGroupComponent.prototype, \"isAffixWrapper\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return (!!(this.nzSuffix || this.nzPrefix || this.nzPrefixIcon || this.nzSuffixIcon)) && !this.isAddOn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzInputGroupComponent.prototype, \"isAddOn\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return !!(this.nzAddOnAfter || this.nzAddOnBefore || this.nzAddOnAfterIcon || this.nzAddOnBeforeIcon);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzInputGroupComponent.prototype, \"isGroup\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return (!this.isAffix) && (!this.isAddOn);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzInputGroupComponent.prototype, \"isLargeGroup\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.isGroup && this.isLarge;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzInputGroupComponent.prototype, \"isLargeGroupWrapper\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.isAddOn && this.isLarge;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzInputGroupComponent.prototype, \"isLargeAffix\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.isAffixWrapper && this.isLarge;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzInputGroupComponent.prototype, \"isLargeSearch\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzSearch && this.isLarge;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzInputGroupComponent.prototype, \"isSmallGroup\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.isGroup && this.isSmall;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzInputGroupComponent.prototype, \"isSmallAffix\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.isAffixWrapper && this.isSmall;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzInputGroupComponent.prototype, \"isSmallGroupWrapper\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.isAddOn && this.isSmall;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzInputGroupComponent.prototype, \"isSmallSearch\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzSearch && this.isSmall;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzInputGroupComponent.prototype.updateChildrenInputSize = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this.nzInputDirectiveQueryList) {\n                this.nzInputDirectiveQueryList.forEach(function (item) { return item.nzSize = _this.nzSize; });\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzInputGroupComponent.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n        function () {\n            this.updateChildrenInputSize();\n        };\n    return NzInputGroupComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzInputModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzInputModule() {\n    }\n    return NzInputModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar POSITION_MAP = /** @type {?} */ (({\n    'top': {\n        originX: 'center',\n        originY: 'top',\n        overlayX: 'center',\n        overlayY: 'bottom'\n    },\n    'topCenter': {\n        originX: 'center',\n        originY: 'top',\n        overlayX: 'center',\n        overlayY: 'bottom'\n    },\n    'topLeft': {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    'topRight': {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    'right': {\n        originX: 'end',\n        originY: 'center',\n        overlayX: 'start',\n        overlayY: 'center',\n    },\n    'rightTop': {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'top',\n    },\n    'rightBottom': {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'bottom',\n    },\n    'bottom': {\n        originX: 'center',\n        originY: 'bottom',\n        overlayX: 'center',\n        overlayY: 'top',\n    },\n    'bottomCenter': {\n        originX: 'center',\n        originY: 'bottom',\n        overlayX: 'center',\n        overlayY: 'top',\n    },\n    'bottomLeft': {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top',\n    },\n    'bottomRight': {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top',\n    },\n    'left': {\n        originX: 'start',\n        originY: 'center',\n        overlayX: 'end',\n        overlayY: 'center',\n    },\n    'leftTop': {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'top',\n    },\n    'leftBottom': {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'bottom',\n    },\n}));\n/** @type {?} */\nvar DEFAULT_4_POSITIONS = /*@__PURE__*/ _objectValues([POSITION_MAP[\"top\"], POSITION_MAP[\"right\"], POSITION_MAP[\"bottom\"], POSITION_MAP[\"left\"]]);\n/** @type {?} */\nvar DEFAULT_DROPDOWN_POSITIONS = /*@__PURE__*/ _objectValues([POSITION_MAP[\"bottomLeft\"], POSITION_MAP[\"topLeft\"]]);\n/** @type {?} */\nvar DEFAULT_MENTION_POSITIONS = /** @type {?} */ ([\n    POSITION_MAP[\"bottomLeft\"],\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    }\n]);\n/**\n * @template T, S\n * @param {?} array\n * @param {?} iteratee\n * @return {?}\n */\nfunction arrayMap(array, iteratee) {\n    /** @type {?} */\n    var index = -1;\n    /** @type {?} */\n    var length = array == null ? 0 : array.length;\n    /** @type {?} */\n    var result = Array(length);\n    while (++index < length) {\n        result[index] = iteratee(array[index], index, array);\n    }\n    return result;\n}\n/**\n * @template T\n * @param {?} object\n * @param {?} props\n * @return {?}\n */\nfunction baseValues(object, props) {\n    return arrayMap(props, function (key) {\n        return object[key];\n    });\n}\n/**\n * @template T\n * @param {?} object\n * @return {?}\n */\nfunction _objectValues(object) {\n    return object == null ? [] : baseValues(object, Object.keys(object));\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @template T\n * @param {?} value\n * @return {?}\n */\nfunction toArray(value) {\n    /** @type {?} */\n    var ret;\n    if (value == null) {\n        ret = [];\n    }\n    else if (!Array.isArray(value)) {\n        ret = [value];\n    }\n    else {\n        ret = value;\n    }\n    return ret;\n}\n/**\n * @template T\n * @param {?} array1\n * @param {?} array2\n * @return {?}\n */\nfunction arrayEquals(array1, array2) {\n    if (!array1 || !array2 || array1.length !== array2.length) {\n        return false;\n    }\n    /** @type {?} */\n    var len = array1.length;\n    for (var i = 0; i < len; i++) {\n        if (array1[i] !== array2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n/** @type {?} */\nvar defaultDisplayRender = function (label) { return label.join(' / '); };\nvar NzCascaderComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzCascaderComponent(elementRef, cdr, nzUpdateHostClassService) {\n        this.elementRef = elementRef;\n        this.cdr = cdr;\n        this.nzUpdateHostClassService = nzUpdateHostClassService;\n        this.allowClear = true;\n        this.autoFocus = false;\n        this.disabled = false;\n        this.enableCache = true;\n        this.showArrow = true;\n        this.showInput = true;\n        this.size = 'default';\n        this.prefixCls = 'ant-cascader';\n        this.inputPrefixCls = 'ant-input';\n        this.changeOnSelect = false;\n        this.dropDownPosition = 'bottom';\n        this.menuVisible = false;\n        this.isLoading = false;\n        this.isOpening = false;\n        this.el = this.elementRef.nativeElement;\n        this.isFocused = false;\n        this.isLabelRenderTemplate = false;\n        this.labelRenderContext = {};\n        this.selectedOptions = [];\n        this.activatedOptions = [];\n        this.nzColumns = [];\n        /**\n         * 搜索相关的输入值\n         */\n        this._inputValue = '';\n        // ngModel Access\n        this.onChange = Function.prototype;\n        this.onTouched = Function.prototype;\n        this.positions = __spread(DEFAULT_DROPDOWN_POSITIONS);\n        /**\n         * If cascader is in search mode.\n         */\n        this.inSearch = false;\n        /**\n         * Hover text for the clear icon\n         */\n        this.nzClearText = 'Clear';\n        /**\n         * Expand column item when click or hover, one of 'click' 'hover'\n         */\n        this.nzExpandTrigger = 'click';\n        /**\n         * Specify content to show when no result matches.\n         */\n        this.nzNotFoundContent = 'Not Found';\n        /**\n         * Input placeholder\n         */\n        this.nzPlaceHolder = 'Please select';\n        /**\n         * Delay time to show when mouse enter, when `nzExpandTrigger` is `hover`.\n         */\n        this.nzMouseEnterDelay = 150;\n        /**\n         * Delay time to hide when mouse enter, when `nzExpandTrigger` is `hover`.\n         */\n        this.nzMouseLeaveDelay = 150;\n        /**\n         * Triggering mode: can be Array<'click'|'hover'>\n         */\n        this.nzTriggerAction = ['click'];\n        /**\n         * Property name for getting `value` in the option\n         */\n        this.nzValueProperty = 'value';\n        /**\n         * Property name for getting `label` in the option\n         */\n        this.nzLabelProperty = 'label';\n        /**\n         * Event: emit on popup show or hide\n         */\n        this.nzVisibleChange = new EventEmitter();\n        /**\n         * Event: emit on values changed\n         */\n        this.nzChange = new EventEmitter();\n        /**\n         * Event: emit on values and selection changed\n         */\n        this.nzSelectionChange = new EventEmitter();\n        /**\n         * Event: emit on option selected, event data：{option: any, index: number}\n         */\n        this.nzSelect = new EventEmitter();\n        /**\n         * Event: emit on the clear button clicked\n         */\n        this.nzClear = new EventEmitter();\n    }\n    Object.defineProperty(NzCascaderComponent.prototype, \"inputValue\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._inputValue;\n        },\n        set: /**\n         * @param {?} inputValue\n         * @return {?}\n         */ function (inputValue) {\n            this._inputValue = inputValue;\n            /** @type {?} */\n            var willBeInSearch = !!inputValue;\n            // 搜索状态变动之前，如要进入则要保留之前激活选项的快照，退出搜索状态要还原该快照\n            if (!this.inSearch && willBeInSearch) {\n                this.oldActivatedOptions = this.activatedOptions;\n                this.activatedOptions = [];\n            }\n            else if (this.inSearch && !willBeInSearch) {\n                this.activatedOptions = this.oldActivatedOptions;\n            }\n            // 搜索状态变更之后\n            this.inSearch = !!willBeInSearch;\n            if (this.inSearch) {\n                this.labelRenderText = '';\n                this.prepareSearchValue();\n            }\n            else {\n                if (this.showSearch) {\n                    this.nzColumns = this.oldColumnsHolder;\n                }\n                this.buildDisplayLabel();\n                this.searchWidthStyle = '';\n            }\n            this.setClassMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCascaderComponent.prototype, \"nzLabelRender\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.labelRenderTpl;\n        },\n        /** Display Render ngTemplate */\n        set: /**\n         * Display Render ngTemplate\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.labelRenderTpl = value;\n            this.isLabelRenderTemplate = (value instanceof TemplateRef);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCascaderComponent.prototype, \"nzPrefixCls\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.prefixCls;\n        },\n        /** prefixCls */\n        set: /**\n         * prefixCls\n         * @param {?} prefixCls\n         * @return {?}\n         */ function (prefixCls) {\n            this.prefixCls = prefixCls;\n            this.setClassMap();\n            this.setLabelClass();\n            this.setArrowClass();\n            this.setLoadingClass();\n            this.setClearClass();\n            this.setInputClass();\n            this.setMenuClass();\n            this.setMenuColumnClass();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCascaderComponent.prototype, \"nzDisabled\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.disabled;\n        },\n        /** Whether is disabled */\n        set: /**\n         * Whether is disabled\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.disabled = toBoolean(value);\n            this.setClassMap();\n            this.setInputClass();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCascaderComponent.prototype, \"nzSize\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.size;\n        },\n        /** Input size, one of `large` `default` `small` */\n        set: /**\n         * Input size, one of `large` `default` `small`\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.size = value;\n            this.setClassMap();\n            this.setInputClass();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCascaderComponent.prototype, \"nzShowInput\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.showInput;\n        },\n        /** Whether show input box. Defaults to `true`. */\n        set: /**\n         * Whether show input box. Defaults to `true`.\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.showInput = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCascaderComponent.prototype, \"nzShowSearch\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.showSearch;\n        },\n        /** Whether can search. Defaults to `false`. */\n        set: /**\n         * Whether can search. Defaults to `false`.\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.showSearch = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCascaderComponent.prototype, \"nzAllowClear\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.allowClear;\n        },\n        /** Whether allow clear. Defaults to `true`. */\n        set: /**\n         * Whether allow clear. Defaults to `true`.\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.allowClear = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCascaderComponent.prototype, \"nzAutoFocus\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.autoFocus;\n        },\n        /** Whether auto focus. */\n        set: /**\n         * Whether auto focus.\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.autoFocus = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCascaderComponent.prototype, \"nzShowArrow\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.showArrow;\n        },\n        /** Whether to show arrow */\n        set: /**\n         * Whether to show arrow\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.showArrow = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCascaderComponent.prototype, \"nzMenuClassName\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.menuClassName;\n        },\n        /** Additional className of popup overlay */\n        set: /**\n         * Additional className of popup overlay\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.menuClassName = value;\n            this.setMenuClass();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCascaderComponent.prototype, \"nzColumnClassName\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.columnClassName;\n        },\n        /** Additional className of popup overlay column */\n        set: /**\n         * Additional className of popup overlay column\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.columnClassName = value;\n            this.setMenuColumnClass();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCascaderComponent.prototype, \"nzOptions\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzColumns[0];\n        },\n        /** Options for first column, sub column will be load async */\n        set: /**\n         * Options for first column, sub column will be load async\n         * @param {?} options\n         * @return {?}\n         */ function (options) {\n            this.oldColumnsHolder = this.nzColumns = options && options.length ? [options] : [];\n            if (!this.inSearch) {\n                if (this.defaultValue && this.nzColumns.length) {\n                    this.initOptions(0);\n                }\n            }\n            else {\n                this.prepareSearchValue();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCascaderComponent.prototype, \"nzChangeOnSelect\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.changeOnSelect;\n        },\n        /** Change value on each selection if set to true */\n        set: /**\n         * Change value on each selection if set to true\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.changeOnSelect = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} position\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.onPositionChange = /**\n     * @param {?} position\n     * @return {?}\n     */\n        function (position) {\n            /** @type {?} */\n            var newValue = position.connectionPair.originY === 'bottom' ? 'bottom' : 'top';\n            if (this.dropDownPosition !== newValue) {\n                this.dropDownPosition = newValue;\n                this.cdr.detectChanges();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.focus = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.isFocused) {\n                /** @type {?} */\n                var input = /** @type {?} */ (this.el.querySelector(\".\" + this.prefixCls + \"-input\"));\n                if (input && input.focus) {\n                    input.focus();\n                }\n                else {\n                    this.el.focus();\n                }\n                this.isFocused = true;\n                this.setClassMap();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.blur = /**\n     * @return {?}\n     */\n        function () {\n            if (this.isFocused) {\n                /** @type {?} */\n                var input = /** @type {?} */ (this.el.querySelector(\".\" + this.prefixCls + \"-input\"));\n                if (input && input.blur) {\n                    input.blur();\n                }\n                else {\n                    this.el.blur();\n                }\n                this.isFocused = false;\n                this.setClassMap();\n                this.setLabelClass();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.setClassMap = /**\n     * @return {?}\n     */\n        function () {\n            var _a;\n            /** @type {?} */\n            var classMap = (_a = {},\n                _a[\"\" + this.prefixCls] = 1,\n                _a[this.prefixCls + \"-picker\"] = 1,\n                _a[this.prefixCls + \"-lg\"] = this.nzSize === 'large',\n                _a[this.prefixCls + \"-sm\"] = this.nzSize === 'small',\n                _a[this.prefixCls + \"-picker-disabled\"] = this.disabled,\n                _a[this.prefixCls + \"-focused\"] = this.isFocused,\n                _a[this.prefixCls + \"-picker-open\"] = this.menuVisible,\n                _a[this.prefixCls + \"-picker-with-value\"] = this.inputValue && this.inputValue.length,\n                _a);\n            this.nzUpdateHostClassService.updateHostClass(this.el, classMap);\n        };\n    Object.defineProperty(NzCascaderComponent.prototype, \"labelCls\", {\n        get: /**\n         * 标签 样式\n         * @return {?}\n         */ function () {\n            return this._labelCls;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.setLabelClass = /**\n     * @return {?}\n     */\n        function () {\n            var _a;\n            this._labelCls = (_a = {},\n                _a[this.prefixCls + \"-picker-label\"] = true,\n                _a[this.prefixCls + \"-show-search\"] = !!this.nzShowSearch,\n                _a[this.prefixCls + \"-focused\"] = !!this.nzShowSearch && this.isFocused && !this._inputValue,\n                _a);\n        };\n    Object.defineProperty(NzCascaderComponent.prototype, \"arrowCls\", {\n        get: /**\n         * 箭头 样式\n         * @return {?}\n         */ function () {\n            return this._arrowCls;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.setArrowClass = /**\n     * @return {?}\n     */\n        function () {\n            var _a;\n            this._arrowCls = (_a = {},\n                _a[this.prefixCls + \"-picker-arrow\"] = true,\n                _a[this.prefixCls + \"-picker-arrow-expand\"] = this.menuVisible,\n                _a);\n        };\n    Object.defineProperty(NzCascaderComponent.prototype, \"loadingCls\", {\n        get: /**\n         * 加载中图标 样式\n         * @return {?}\n         */ function () {\n            return this._loadingCls;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.setLoadingClass = /**\n     * @return {?}\n     */\n        function () {\n            var _a;\n            this._loadingCls = (_a = {},\n                _a[this.prefixCls + \"-picker-arrow\"] = true,\n                _a);\n        };\n    Object.defineProperty(NzCascaderComponent.prototype, \"clearCls\", {\n        get: /**\n         * 清除图标 样式\n         * @return {?}\n         */ function () {\n            return this._clearCls;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.setClearClass = /**\n     * @return {?}\n     */\n        function () {\n            var _a;\n            this._clearCls = (_a = {},\n                _a[this.prefixCls + \"-picker-clear\"] = true,\n                _a);\n        };\n    Object.defineProperty(NzCascaderComponent.prototype, \"inputCls\", {\n        get: /**\n         * 输入框 样式\n         * @return {?}\n         */ function () {\n            return this._inputCls;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.setInputClass = /**\n     * @return {?}\n     */\n        function () {\n            var _a;\n            this._inputCls = (_a = {},\n                _a[this.prefixCls + \"-input\"] = 1,\n                _a[this.inputPrefixCls + \"-disabled\"] = this.nzDisabled,\n                _a[this.inputPrefixCls + \"-lg\"] = this.nzSize === 'large',\n                _a[this.inputPrefixCls + \"-sm\"] = this.nzSize === 'small',\n                _a);\n        };\n    Object.defineProperty(NzCascaderComponent.prototype, \"menuCls\", {\n        get: /**\n         * 浮层 样式\n         * @return {?}\n         */ function () {\n            return this._menuCls;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.setMenuClass = /**\n     * @return {?}\n     */\n        function () {\n            var _a;\n            this._menuCls = (_a = {},\n                _a[this.prefixCls + \"-menus\"] = true,\n                _a[this.prefixCls + \"-menus-hidden\"] = !this.menuVisible,\n                _a[\"\" + this.nzMenuClassName] = this.nzMenuClassName,\n                _a);\n        };\n    Object.defineProperty(NzCascaderComponent.prototype, \"menuColumnCls\", {\n        get: /**\n         * 浮层列 样式\n         * @return {?}\n         */ function () {\n            return this._menuColumnCls;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.setMenuColumnClass = /**\n     * @return {?}\n     */\n        function () {\n            var _a;\n            this._menuColumnCls = (_a = {},\n                _a[this.prefixCls + \"-menu\"] = true,\n                _a[\"\" + this.nzColumnClassName] = this.nzColumnClassName,\n                _a);\n        };\n    /**\n     * 获取列中Option的样式\n     * @param {?} option\n     * @param {?} index\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.getOptionCls = /**\n     * 获取列中Option的样式\n     * @param {?} option\n     * @param {?} index\n     * @return {?}\n     */\n        function (option, index) {\n            var _a;\n            return _a = {},\n                _a[this.prefixCls + \"-menu-item\"] = true,\n                _a[this.prefixCls + \"-menu-item-expand\"] = !option.isLeaf,\n                _a[this.prefixCls + \"-menu-item-active\"] = this.isActivedOption(option, index),\n                _a[this.prefixCls + \"-menu-item-disabled\"] = option.disabled,\n                _a;\n        };\n    /**\n     * prevent input change event\n     * @param {?} event\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.handlerInputChange = /**\n     * prevent input change event\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            event.stopPropagation();\n        };\n    /**\n     * input element blur\n     * @param {?} event\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.handleInputBlur = /**\n     * input element blur\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            /*\n                if (!this.nzShowSearch) {\n                  return;\n                }\n                */\n            if (this.menuVisible) {\n                this.focus(); // keep input has focus when menu opened\n            }\n            else {\n                this.blur();\n            }\n        };\n    /**\n     * input element focus\n     * @param {?} event\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.handleInputFocus = /**\n     * input element focus\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            /*\n                if (!this.nzShowSearch) {\n                  return;\n                }\n                */\n            this.focus();\n            this.setLabelClass();\n        };\n    /**\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.hasInput = /**\n     * @return {?}\n     */\n        function () {\n            return this.inputValue.length > 0;\n        };\n    /**\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.hasValue = /**\n     * @return {?}\n     */\n        function () {\n            return this.value && this.value.length > 0;\n        };\n    Object.defineProperty(NzCascaderComponent.prototype, \"showPlaceholder\", {\n        get: /**\n         * Whether to show input element placeholder\n         * @return {?}\n         */ function () {\n            return !(this.hasInput() || this.hasValue());\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCascaderComponent.prototype, \"showClearIcon\", {\n        get: /**\n         * Whether the clear button is visible\n         * @return {?}\n         */ function () {\n            /** @type {?} */\n            var isHasValue = this.hasValue();\n            /** @type {?} */\n            var isHasInput = this.hasInput();\n            return this.nzAllowClear && !this.nzDisabled && (isHasValue || isHasInput);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * clear the input box and selected options\n     * @param {?=} event\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.clearSelection = /**\n     * clear the input box and selected options\n     * @param {?=} event\n     * @return {?}\n     */\n        function (event) {\n            if (event) {\n                event.preventDefault();\n                event.stopPropagation();\n            }\n            this.labelRenderText = '';\n            // this.isLabelRenderTemplate = false;\n            // clear custom context\n            this.labelRenderContext = {};\n            this.selectedOptions = [];\n            this.activatedOptions = [];\n            this.inputValue = '';\n            this.setMenuVisible(false);\n            // trigger change event\n            this.onValueChange();\n        };\n    /**\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.buildDisplayLabel = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            /** @type {?} */\n            var selectedOptions = this.selectedOptions;\n            /** @type {?} */\n            var labels = selectedOptions.map(function (o) { return _this.getOptionLabel(o); });\n            // 设置当前控件的显示值\n            if (this.isLabelRenderTemplate) {\n                this.labelRenderContext = { labels: labels, selectedOptions: selectedOptions };\n            }\n            else {\n                this.labelRenderText = defaultDisplayRender.call(this, labels, selectedOptions);\n            }\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.onKeyDown = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            /** @type {?} */\n            var keyCode = event.keyCode;\n            if (keyCode !== DOWN_ARROW &&\n                keyCode !== UP_ARROW &&\n                keyCode !== LEFT_ARROW &&\n                keyCode !== RIGHT_ARROW &&\n                keyCode !== ENTER &&\n                keyCode !== BACKSPACE &&\n                keyCode !== ESCAPE) {\n                return;\n            }\n            if (this.inSearch && (keyCode === BACKSPACE ||\n                keyCode === LEFT_ARROW ||\n                keyCode === RIGHT_ARROW)) {\n                return;\n            }\n            // Press any keys above to reopen menu\n            if (!this.isMenuVisible() &&\n                keyCode !== BACKSPACE &&\n                keyCode !== ESCAPE) {\n                this.setMenuVisible(true);\n                return;\n            }\n            // Press ESC to close menu\n            if (keyCode === ESCAPE) {\n                // this.setMenuVisible(false); // already call by cdk-overlay detach\n                return;\n            }\n            if (this.isMenuVisible()) {\n                event.preventDefault();\n                if (keyCode === DOWN_ARROW) {\n                    this.moveDown();\n                }\n                else if (keyCode === UP_ARROW) {\n                    this.moveUp();\n                }\n                else if (keyCode === LEFT_ARROW) {\n                    this.moveLeft();\n                }\n                else if (keyCode === RIGHT_ARROW) {\n                    this.moveRight();\n                }\n                else if (keyCode === ENTER) {\n                    this.onEnter();\n                }\n            }\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.onTriggerClick = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            if (this.nzDisabled) {\n                return;\n            }\n            this.onTouched(); // set your control to 'touched'\n            if (this.nzShowSearch) {\n                this.focus();\n            }\n            if (this.isClickTiggerAction()) {\n                this.delaySetMenuVisible(!this.menuVisible, 100);\n            }\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.onTriggerMouseEnter = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            if (this.nzDisabled) {\n                return;\n            }\n            if (this.isPointerTiggerAction()) {\n                this.delaySetMenuVisible(true, this.nzMouseEnterDelay, true);\n            }\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.onTriggerMouseLeave = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            if (this.nzDisabled) {\n                return;\n            }\n            if (!this.isMenuVisible() || this.isOpening) {\n                event.preventDefault();\n                return;\n            }\n            if (this.isPointerTiggerAction()) {\n                /** @type {?} */\n                var mouseTarget = /** @type {?} */ (event.relatedTarget);\n                /** @type {?} */\n                var hostEl = this.el;\n                /** @type {?} */\n                var menuEl = this.menu && /** @type {?} */ (this.menu.nativeElement);\n                if (hostEl.contains(mouseTarget) || (menuEl && menuEl.contains(mouseTarget))\n                /*|| mouseTarget.parentElement.contains(menuEl)*/ ) {\n                    // 因为浮层的backdrop出现，暂时没有办法自动消失\n                    return;\n                }\n                this.delaySetMenuVisible(false, this.nzMouseLeaveDelay);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.isClickTiggerAction = /**\n     * @return {?}\n     */\n        function () {\n            if (typeof this.nzTriggerAction === 'string') {\n                return this.nzTriggerAction === 'click';\n            }\n            return this.nzTriggerAction.indexOf('click') !== -1;\n        };\n    /**\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.isPointerTiggerAction = /**\n     * @return {?}\n     */\n        function () {\n            if (typeof this.nzTriggerAction === 'string') {\n                return this.nzTriggerAction === 'hover';\n            }\n            return this.nzTriggerAction.indexOf('hover') !== -1;\n        };\n    /**\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.closeMenu = /**\n     * @return {?}\n     */\n        function () {\n            this.blur();\n            this.clearDelayTimer();\n            this.setMenuVisible(false);\n        };\n    /**\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.clearDelayTimer = /**\n     * @return {?}\n     */\n        function () {\n            if (this.delayTimer) {\n                clearTimeout(this.delayTimer);\n                this.delayTimer = null;\n            }\n        };\n    /**\n     * 显示或者隐藏菜单\n     *\n     * @param {?} visible true-显示，false-隐藏\n     * @param {?} delay 延迟时间\n     * @param {?=} setOpening\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.delaySetMenuVisible = /**\n     * 显示或者隐藏菜单\n     *\n     * @param {?} visible true-显示，false-隐藏\n     * @param {?} delay 延迟时间\n     * @param {?=} setOpening\n     * @return {?}\n     */\n        function (visible, delay$$1, setOpening) {\n            var _this = this;\n            if (setOpening === void 0) {\n                setOpening = false;\n            }\n            this.clearDelayTimer();\n            if (delay$$1) {\n                if (visible && setOpening) {\n                    this.isOpening = true;\n                }\n                this.delayTimer = setTimeout(function () {\n                    _this.setMenuVisible(visible);\n                    _this.clearDelayTimer();\n                    if (visible) {\n                        setTimeout(function () {\n                            _this.isOpening = false;\n                        }, 100);\n                    }\n                }, delay$$1);\n            }\n            else {\n                this.setMenuVisible(visible);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.isMenuVisible = /**\n     * @return {?}\n     */\n        function () {\n            return this.menuVisible;\n        };\n    /**\n     * @param {?} menuVisible\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.setMenuVisible = /**\n     * @param {?} menuVisible\n     * @return {?}\n     */\n        function (menuVisible) {\n            if (this.nzDisabled) {\n                return;\n            }\n            if (this.menuVisible !== menuVisible) {\n                this.menuVisible = menuVisible;\n                // update class\n                this.setClassMap();\n                this.setArrowClass();\n                this.setMenuClass();\n                if (menuVisible) {\n                    this.beforeVisible();\n                }\n                this.nzVisibleChange.emit(menuVisible);\n            }\n        };\n    /**\n     * load init data if necessary\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.beforeVisible = /**\n     * load init data if necessary\n     * @return {?}\n     */\n        function () {\n            this.loadRootOptions();\n        };\n    /**\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.loadRootOptions = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.nzColumns.length) {\n                /** @type {?} */\n                var root = {};\n                this.loadChildren(root, -1);\n            }\n        };\n    /**\n     * 获取Option的值，例如，可以指定labelProperty=\"name\"来取Name\n     * @param {?} option\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.getOptionLabel = /**\n     * 获取Option的值，例如，可以指定labelProperty=\"name\"来取Name\n     * @param {?} option\n     * @return {?}\n     */\n        function (option) {\n            return option[this.nzLabelProperty || 'label'];\n        };\n    /**\n     * 获取Option的值，例如，可以指定valueProperty=\"id\"来取ID\n     * @param {?} option\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.getOptionValue = /**\n     * 获取Option的值，例如，可以指定valueProperty=\"id\"来取ID\n     * @param {?} option\n     * @return {?}\n     */\n        function (option) {\n            return option[this.nzValueProperty || 'value'];\n        };\n    /**\n     * @param {?} option\n     * @param {?} index\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.isActivedOption = /**\n     * @param {?} option\n     * @param {?} index\n     * @return {?}\n     */\n        function (option, index) {\n            /** @type {?} */\n            var activeOpt = this.activatedOptions[index];\n            return activeOpt === option;\n        };\n    /**\n     * 设置某列的激活的菜单选项\n     *\n     * @param {?} option 菜单选项\n     * @param {?} index  选项所在的列组的索引\n     * @param {?=} select 是否触发选择结点\n     * @param {?=} loadChildren\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.setActiveOption = /**\n     * 设置某列的激活的菜单选项\n     *\n     * @param {?} option 菜单选项\n     * @param {?} index  选项所在的列组的索引\n     * @param {?=} select 是否触发选择结点\n     * @param {?=} loadChildren\n     * @return {?}\n     */\n        function (option, index, select, loadChildren) {\n            if (select === void 0) {\n                select = false;\n            }\n            if (loadChildren === void 0) {\n                loadChildren = true;\n            }\n            if (!option || option.disabled) {\n                return;\n            }\n            this.activatedOptions[index] = option;\n            // 当直接选择最后一级时，前面的选项要补全。例如，选择“城市”，则自动补全“国家”、“省份”\n            for (var i = index - 1; i >= 0; i--) {\n                if (!this.activatedOptions[i]) {\n                    this.activatedOptions[i] = this.activatedOptions[i + 1].parent;\n                }\n            }\n            // 截断多余的选项，如选择“省份”，则只会有“国家”、“省份”，去掉“城市”、“区县”\n            if (index < this.activatedOptions.length - 1) {\n                this.activatedOptions = this.activatedOptions.slice(0, index + 1);\n            }\n            // load children\n            if (option.children && option.children.length) {\n                option.isLeaf = false;\n                option.children.forEach(function (child) { return child.parent = option; });\n                this.setColumnData(option.children, index + 1);\n            }\n            else if (!option.isLeaf && loadChildren) {\n                this.loadChildren(option, index);\n            }\n            else {\n                // clicking leaf node will remove any children columns\n                if (index < this.nzColumns.length - 1) {\n                    this.nzColumns = this.nzColumns.slice(0, index + 1);\n                }\n            }\n            // trigger select event, and display label\n            if (select) {\n                this.onSelectOption(option, index);\n            }\n        };\n    /**\n     * @param {?} option\n     * @param {?} index\n     * @param {?=} success\n     * @param {?=} failure\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.loadChildren = /**\n     * @param {?} option\n     * @param {?} index\n     * @param {?=} success\n     * @param {?=} failure\n     * @return {?}\n     */\n        function (option, index, success, failure) {\n            var _this = this;\n            if (this.nzLoadData) {\n                this.isLoading = index < 0;\n                option.loading = true;\n                this.nzLoadData(option, index).then(function () {\n                    option.loading = _this.isLoading = false;\n                    if (option.children) {\n                        option.children.forEach(function (child) { return child.parent = index < 0 ? undefined : option; });\n                        _this.setColumnData(option.children, index + 1);\n                    }\n                    if (success) {\n                        success();\n                    }\n                }, function () {\n                    option.loading = _this.isLoading = false;\n                    option.isLeaf = true;\n                    if (failure) {\n                        failure();\n                    }\n                });\n            }\n        };\n    /**\n     * @param {?} option\n     * @param {?} index\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.onSelectOption = /**\n     * @param {?} option\n     * @param {?} index\n     * @return {?}\n     */\n        function (option, index) {\n            // trigger `nzSelect` event\n            this.nzSelect.emit({ option: option, index: index });\n            // 生成显示\n            if (option.isLeaf || this.nzChangeOnSelect || this.isChangeOn(option, index)) {\n                this.selectedOptions = this.activatedOptions;\n                // 设置当前控件的显示值\n                this.buildDisplayLabel();\n                // 触发变更事件\n                this.onValueChange();\n            }\n            // close menu if click on leaf\n            if (option.isLeaf) {\n                this.delaySetMenuVisible(false, this.nzMouseLeaveDelay);\n            }\n        };\n    /**\n     * 由用户来定义点击后是否变更\n     * @param {?} option\n     * @param {?} index\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.isChangeOn = /**\n     * 由用户来定义点击后是否变更\n     * @param {?} option\n     * @param {?} index\n     * @return {?}\n     */\n        function (option, index) {\n            if (typeof this.nzChangeOn === 'function') {\n                return this.nzChangeOn(option, index) === true;\n            }\n            return false;\n        };\n    /**\n     * @param {?} options\n     * @param {?} index\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.setColumnData = /**\n     * @param {?} options\n     * @param {?} index\n     * @return {?}\n     */\n        function (options, index) {\n            if (!arrayEquals(this.nzColumns[index], options)) {\n                this.nzColumns[index] = options;\n                if (index < this.nzColumns.length - 1) {\n                    this.nzColumns = this.nzColumns.slice(0, index + 1);\n                }\n            }\n        };\n    /**\n     * 鼠标点击选项\n     *\n     * @param option 菜单选项\n     * @param index 选项所在的列组的索引\n     * @param event 鼠标事件\n     */\n    /**\n     * 鼠标点击选项\n     *\n     * @param {?} option 菜单选项\n     * @param {?} index 选项所在的列组的索引\n     * @param {?} event 鼠标事件\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.onOptionClick = /**\n     * 鼠标点击选项\n     *\n     * @param {?} option 菜单选项\n     * @param {?} index 选项所在的列组的索引\n     * @param {?} event 鼠标事件\n     * @return {?}\n     */\n        function (option, index, event) {\n            if (event) {\n                event.preventDefault();\n            }\n            // Keep focused state for keyboard support\n            this.el.focus();\n            if (option && option.disabled) {\n                return;\n            }\n            if (this.inSearch) {\n                this.setSearchActiveOption(/** @type {?} */ (option), event);\n            }\n            else {\n                this.setActiveOption(option, index, true);\n            }\n        };\n    /**\n     * 按下回车键时选择\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.onEnter = /**\n     * 按下回车键时选择\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var columnIndex = Math.max(this.activatedOptions.length - 1, 0);\n            /** @type {?} */\n            var activeOption = this.activatedOptions[columnIndex];\n            if (activeOption && !activeOption.disabled) {\n                if (this.inSearch) {\n                    this.setSearchActiveOption(/** @type {?} */ (activeOption), null);\n                }\n                else {\n                    this.onSelectOption(activeOption, columnIndex);\n                }\n            }\n        };\n    /**\n     * press `up` or `down` arrow to activate the sibling option.\n     * @param {?} isUp\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.moveUpOrDown = /**\n     * press `up` or `down` arrow to activate the sibling option.\n     * @param {?} isUp\n     * @return {?}\n     */\n        function (isUp) {\n            /** @type {?} */\n            var columnIndex = Math.max(this.activatedOptions.length - 1, 0);\n            /** @type {?} */\n            var activeOption = this.activatedOptions[columnIndex];\n            /** @type {?} */\n            var options = this.nzColumns[columnIndex] || [];\n            /** @type {?} */\n            var length = options.length;\n            /** @type {?} */\n            var nextIndex = -1;\n            if (!activeOption) { // 该列还没有选中的选项\n                // 该列还没有选中的选项\n                nextIndex = isUp ? length : -1;\n            }\n            else {\n                nextIndex = options.indexOf(activeOption);\n            }\n            while (true) {\n                nextIndex = isUp ? nextIndex - 1 : nextIndex + 1;\n                if (nextIndex < 0 || nextIndex >= length) {\n                    break;\n                }\n                /** @type {?} */\n                var nextOption = options[nextIndex];\n                if (!nextOption || nextOption.disabled) {\n                    continue;\n                }\n                this.setActiveOption(nextOption, columnIndex);\n                break;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.moveUp = /**\n     * @return {?}\n     */\n        function () {\n            this.moveUpOrDown(true);\n        };\n    /**\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.moveDown = /**\n     * @return {?}\n     */\n        function () {\n            this.moveUpOrDown(false);\n        };\n    /**\n     * press `left` arrow to remove the last selected option.\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.moveLeft = /**\n     * press `left` arrow to remove the last selected option.\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var options = this.activatedOptions;\n            if (options.length) {\n                options.pop(); // Remove the last one\n            }\n        };\n    /**\n     * press `right` arrow to select the next column option.\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.moveRight = /**\n     * press `right` arrow to select the next column option.\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var length = this.activatedOptions.length;\n            /** @type {?} */\n            var options = this.nzColumns[length];\n            if (options && options.length) {\n                /** @type {?} */\n                var nextOpt = options.find(function (o) { return !o.disabled; });\n                if (nextOpt) {\n                    this.setActiveOption(nextOpt, length);\n                }\n            }\n        };\n    /**\n     * 鼠标划入选项\n     *\n     * @param option 菜单选项\n     * @param index 选项所在的列组的索引\n     * @param event 鼠标事件\n     */\n    /**\n     * 鼠标划入选项\n     *\n     * @param {?} option 菜单选项\n     * @param {?} index 选项所在的列组的索引\n     * @param {?} event 鼠标事件\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.onOptionMouseEnter = /**\n     * 鼠标划入选项\n     *\n     * @param {?} option 菜单选项\n     * @param {?} index 选项所在的列组的索引\n     * @param {?} event 鼠标事件\n     * @return {?}\n     */\n        function (option, index, event) {\n            event.preventDefault();\n            if (this.nzExpandTrigger === 'hover' && !option.isLeaf) {\n                this.delaySelect(option, index, true);\n            }\n        };\n    /**\n     * 鼠标划出选项\n     *\n     * @param option 菜单选项\n     * @param index 选项所在的列组的索引\n     * @param event 鼠标事件\n     */\n    /**\n     * 鼠标划出选项\n     *\n     * @param {?} option 菜单选项\n     * @param {?} index 选项所在的列组的索引\n     * @param {?} event 鼠标事件\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.onOptionMouseLeave = /**\n     * 鼠标划出选项\n     *\n     * @param {?} option 菜单选项\n     * @param {?} index 选项所在的列组的索引\n     * @param {?} event 鼠标事件\n     * @return {?}\n     */\n        function (option, index, event) {\n            event.preventDefault();\n            if (this.nzExpandTrigger === 'hover' && !option.isLeaf) {\n                this.delaySelect(option, index, false);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.clearDelaySelectTimer = /**\n     * @return {?}\n     */\n        function () {\n            if (this.delaySelectTimer) {\n                clearTimeout(this.delaySelectTimer);\n                this.delaySelectTimer = null;\n            }\n        };\n    /**\n     * @param {?} option\n     * @param {?} index\n     * @param {?} doSelect\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.delaySelect = /**\n     * @param {?} option\n     * @param {?} index\n     * @param {?} doSelect\n     * @return {?}\n     */\n        function (option, index, doSelect) {\n            var _this = this;\n            this.clearDelaySelectTimer();\n            if (doSelect) {\n                this.delaySelectTimer = setTimeout(function () {\n                    // 鼠标滑入只展开，不进行选中操作\n                    // 鼠标滑入只展开，不进行选中操作\n                    _this.setActiveOption(option, index);\n                    _this.delaySelectTimer = null;\n                }, 150);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.getSubmitValue = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            /** @type {?} */\n            var values = [];\n            this.selectedOptions.forEach(function (option) {\n                values.push(_this.getOptionValue(option));\n            });\n            return values;\n        };\n    /**\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.onValueChange = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var value = this.getSubmitValue();\n            if (!arrayEquals(this.value, value)) {\n                this.defaultValue = null; // clear the init-value\n                this.value = value;\n                this.onChange(value); // Angular need this\n                if (value.length === 0) {\n                    this.nzClear.emit(); // first trigger `clear` and then `change`\n                }\n                this.nzSelectionChange.emit(this.selectedOptions);\n                this.nzChange.emit(value);\n            }\n        };\n    /**\n     * @param {?} option\n     * @param {?} index\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.findOption = /**\n     * @param {?} option\n     * @param {?} index\n     * @return {?}\n     */\n        function (option, index) {\n            var _this = this;\n            /** @type {?} */\n            var options = this.nzColumns[index];\n            if (options) {\n                /** @type {?} */\n                var value_1 = typeof option === 'object' ? this.getOptionValue(option) : option;\n                return options.find(function (o) { return value_1 === _this.getOptionValue(o); });\n            }\n            return null;\n        };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.isLoaded = /**\n     * @param {?} index\n     * @return {?}\n     */\n        function (index) {\n            return this.nzColumns[index] && this.nzColumns[index].length > 0;\n        };\n    /**\n     * @param {?} index\n     * @param {?} value\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.activateOnInit = /**\n     * @param {?} index\n     * @param {?} value\n     * @return {?}\n     */\n        function (index, value) {\n            var _a;\n            /** @type {?} */\n            var option = this.findOption(value, index);\n            if (!option) {\n                option = typeof value === 'object' ? value : (_a = {},\n                    _a[\"\" + (this.nzValueProperty || 'value')] = value,\n                    _a[\"\" + (this.nzLabelProperty || 'label')] = value,\n                    _a);\n            }\n            this.setActiveOption(option, index, false, false);\n        };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.initOptions = /**\n     * @param {?} index\n     * @return {?}\n     */\n        function (index) {\n            var _this = this;\n            /** @type {?} */\n            var vs = this.defaultValue;\n            /** @type {?} */\n            var load = function () {\n                _this.activateOnInit(index, vs[index]);\n                if (index < vs.length - 1) {\n                    _this.initOptions(index + 1);\n                }\n                if (index === vs.length - 1) {\n                    _this.afterWriteValue();\n                }\n            };\n            if (this.isLoaded(index) || !this.nzLoadData) {\n                load();\n            }\n            else {\n                /** @type {?} */\n                var node = this.activatedOptions[index - 1] || {};\n                this.loadChildren(node, index - 1, load, this.afterWriteValue);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.afterWriteValue = /**\n     * @return {?}\n     */\n        function () {\n            this.selectedOptions = this.activatedOptions;\n            this.value = this.getSubmitValue();\n            this.buildDisplayLabel();\n        };\n    /**\n     * Write a new value to the element.\n     *\n     * @Override (From ControlValueAccessor interface)\n     */\n    /**\n     * Write a new value to the element.\n     *\n     * \\@Override (From ControlValueAccessor interface)\n     * @param {?} value\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.writeValue = /**\n     * Write a new value to the element.\n     *\n     * \\@Override (From ControlValueAccessor interface)\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            /** @type {?} */\n            var vs = this.defaultValue = toArray(value);\n            if (vs.length) {\n                this.initOptions(0);\n            }\n            else {\n                this.value = vs;\n                this.activatedOptions = [];\n                this.afterWriteValue();\n            }\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this.onChange = fn;\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this.onTouched = fn;\n        };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n        function (isDisabled) {\n            if (isDisabled) {\n                this.closeMenu();\n            }\n            this.nzDisabled = isDisabled;\n        };\n    /**\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.prepareSearchValue = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            /** @type {?} */\n            var results = [];\n            /** @type {?} */\n            var path = [];\n            /** @type {?} */\n            var defaultFilter = function (inputValue, p) {\n                /** @type {?} */\n                var flag = false;\n                p.forEach(function (n) {\n                    /** @type {?} */\n                    var labelName = _this.nzLabelProperty;\n                    if (n[labelName] && n[labelName].indexOf(inputValue) > -1) {\n                        flag = true;\n                    }\n                });\n                return flag;\n            };\n            /** @type {?} */\n            var filter$$1 = this.nzShowSearch instanceof Object && ( /** @type {?} */(this.nzShowSearch)).filter\n                ? ( /** @type {?} */(this.nzShowSearch)).filter\n                : defaultFilter;\n            /** @type {?} */\n            var sorter = this.nzShowSearch instanceof Object && ( /** @type {?} */(this.nzShowSearch)).sorter;\n            /** @type {?} */\n            var loopParent = function (node, forceDisabled) {\n                if (forceDisabled === void 0) {\n                    forceDisabled = false;\n                }\n                /** @type {?} */\n                var disabled = forceDisabled || node.disabled;\n                path.push(node);\n                node.children.forEach(function (sNode) {\n                    if (!sNode.parent) {\n                        sNode.parent = node;\n                    }\n                    /** 搜索的同时建立 parent 连接，因为用户直接搜索的话是没有建立连接的，会提升从叶子节点回溯的难度 */\n                    if (!sNode.isLeaf) {\n                        loopParent(sNode, disabled);\n                    }\n                    if (sNode.isLeaf || !sNode.children || !sNode.children.length) {\n                        loopChild(sNode, disabled);\n                    }\n                });\n                path.pop();\n            };\n            /** @type {?} */\n            var loopChild = function (node, forceDisabled) {\n                if (forceDisabled === void 0) {\n                    forceDisabled = false;\n                }\n                var _a;\n                path.push(node);\n                /** @type {?} */\n                var cPath = Array.from(path);\n                if (filter$$1(_this._inputValue, cPath)) {\n                    /** @type {?} */\n                    var disabled = forceDisabled || node.disabled;\n                    /** @type {?} */\n                    var option = (_a = {\n                        disabled: disabled,\n                        isLeaf: true,\n                        path: cPath\n                    },\n                        _a[_this.nzLabelProperty] = cPath.map(function (p) { return p.label; }).join(' / '),\n                        _a);\n                    results.push(option);\n                }\n                path.pop();\n            };\n            this.oldColumnsHolder[0].forEach(function (node) {\n                return (node.isLeaf || !node.children || !node.children.length)\n                    ? loopChild(node)\n                    : loopParent(node);\n            });\n            if (sorter) {\n                results.sort(function (a, b) { return sorter(a.path, b.path, _this._inputValue); });\n            }\n            this.nzColumns = [results];\n        };\n    /**\n     * @param {?} str\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.renderSearchString = /**\n     * @param {?} str\n     * @return {?}\n     */\n        function (str) {\n            return str.replace(new RegExp(this._inputValue, 'g'), \"<span class=\\\"ant-cascader-menu-item-keyword\\\">\" + this._inputValue + \"</span>\");\n        };\n    /**\n     * @param {?} result\n     * @param {?} event\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.setSearchActiveOption = /**\n     * @param {?} result\n     * @param {?} event\n     * @return {?}\n     */\n        function (result, event) {\n            var _this = this;\n            this.activatedOptions = [result];\n            this.delaySetMenuVisible(false, 200);\n            setTimeout(function () {\n                _this.inputValue = '';\n                /** @type {?} */\n                var index = result.path.length - 1;\n                /** @type {?} */\n                var destiNode = result.path[index];\n                /** @type {?} */\n                var mockClickParent = function (node, cIndex) {\n                    if (node && node.parent) {\n                        mockClickParent(node.parent, cIndex - 1);\n                    }\n                    _this.onOptionClick(node, cIndex, event);\n                };\n                mockClickParent(destiNode, index);\n            }, 300);\n        };\n    /**\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            // 设置样式\n            this.setClassMap();\n            this.setLabelClass();\n            this.setArrowClass();\n            this.setLoadingClass();\n            this.setClearClass();\n            this.setInputClass();\n            this.setMenuClass();\n            this.setMenuColumnClass();\n        };\n    /**\n     * @return {?}\n     */\n    NzCascaderComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.clearDelayTimer();\n            this.clearDelaySelectTimer();\n        };\n    return NzCascaderComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzCascaderModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzCascaderModule() {\n    }\n    return NzCascaderModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzCheckboxGroupComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzCheckboxGroupComponent(elementRef, renderer) {\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        this._disabled = false;\n        this.el = this.elementRef.nativeElement;\n        this.prefixCls = 'ant-checkbox-group';\n        this.onChange = Function.prototype;\n        this.onTouched = Function.prototype;\n    }\n    Object.defineProperty(NzCheckboxGroupComponent.prototype, \"nzDisabled\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._disabled;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._disabled = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzCheckboxGroupComponent.prototype.onOptionChange = /**\n     * @return {?}\n     */\n        function () {\n            this.onChange(this.options);\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzCheckboxGroupComponent.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.options = value;\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzCheckboxGroupComponent.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this.onChange = fn;\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzCheckboxGroupComponent.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this.onTouched = fn;\n        };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    NzCheckboxGroupComponent.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n        function (isDisabled) {\n            this.nzDisabled = isDisabled;\n        };\n    /**\n     * @return {?}\n     */\n    NzCheckboxGroupComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.renderer.addClass(this.el, \"\" + this.prefixCls);\n        };\n    return NzCheckboxGroupComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzCheckboxWrapperComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzCheckboxWrapperComponent() {\n        this.nzOnChange = new EventEmitter();\n        this.checkboxList = [];\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzCheckboxWrapperComponent.prototype.addCheckbox = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.checkboxList.push(value);\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzCheckboxWrapperComponent.prototype.removeCheckbox = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.checkboxList.splice(this.checkboxList.indexOf(value), 1);\n        };\n    /**\n     * @return {?}\n     */\n    NzCheckboxWrapperComponent.prototype.outputValue = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var checkedList = this.checkboxList.filter(function (item) { return item.nzChecked; });\n            return checkedList.map(function (item) { return item.nzValue; });\n        };\n    /**\n     * @return {?}\n     */\n    NzCheckboxWrapperComponent.prototype.onChange = /**\n     * @return {?}\n     */\n        function () {\n            this.nzOnChange.emit(this.outputValue());\n        };\n    return NzCheckboxWrapperComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzCheckboxComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzCheckboxComponent(elementRef, renderer, nzCheckboxWrapperComponent) {\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        this.nzCheckboxWrapperComponent = nzCheckboxWrapperComponent;\n        this._disabled = false;\n        this._indeterminate = false;\n        this._autoFocus = false;\n        this._checked = false;\n        this.el = this.elementRef.nativeElement;\n        this.isInit = false;\n        this.prefixCls = 'ant-checkbox';\n        this.onChange = Function.prototype;\n        this.onTouched = Function.prototype;\n        this.classMap = {};\n        this.nzCheckedChange = new EventEmitter();\n    }\n    Object.defineProperty(NzCheckboxComponent.prototype, \"nzAutoFocus\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._autoFocus;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._autoFocus = toBoolean(value);\n            this.updateAutoFocus();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCheckboxComponent.prototype, \"nzDisabled\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._disabled;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._disabled = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCheckboxComponent.prototype, \"nzIndeterminate\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._indeterminate;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._indeterminate = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCheckboxComponent.prototype, \"nzChecked\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._checked;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._checked = value;\n            this.updateClassMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzCheckboxComponent.prototype.onClick = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            e.preventDefault();\n            this.inputElement.nativeElement.focus();\n            if (!this.nzDisabled) {\n                this.updateValue(!this.nzChecked);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzCheckboxComponent.prototype.onBlur = /**\n     * @return {?}\n     */\n        function () {\n            this.onTouched();\n        };\n    /**\n     * @return {?}\n     */\n    NzCheckboxComponent.prototype.updateAutoFocus = /**\n     * @return {?}\n     */\n        function () {\n            if (this.isInit) {\n                if (this.nzAutoFocus) {\n                    this.renderer.setAttribute(this.inputElement.nativeElement, 'autofocus', 'autofocus');\n                }\n                else {\n                    this.renderer.removeAttribute(this.inputElement.nativeElement, 'autofocus');\n                }\n            }\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzCheckboxComponent.prototype.updateValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.onChange(value);\n            this.nzCheckedChange.emit(value);\n            this.nzChecked = value;\n            if (this.nzCheckboxWrapperComponent) {\n                this.nzCheckboxWrapperComponent.onChange();\n            }\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzCheckboxComponent.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.nzChecked = value;\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzCheckboxComponent.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this.onChange = fn;\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzCheckboxComponent.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this.onTouched = fn;\n        };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    NzCheckboxComponent.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n        function (isDisabled) {\n            this.nzDisabled = isDisabled;\n        };\n    /**\n     * @return {?}\n     */\n    NzCheckboxComponent.prototype.updateClassMap = /**\n     * @return {?}\n     */\n        function () {\n            var _a;\n            this.classMap = (_a = {},\n                _a[this.prefixCls] = true,\n                _a[this.prefixCls + \"-checked\"] = this.nzChecked && (!this.nzIndeterminate),\n                _a[this.prefixCls + \"-disabled\"] = this.nzDisabled,\n                _a[this.prefixCls + \"-indeterminate\"] = this.nzIndeterminate,\n                _a);\n        };\n    /**\n     * @return {?}\n     */\n    NzCheckboxComponent.prototype.focus = /**\n     * @return {?}\n     */\n        function () {\n            this.inputElement.nativeElement.focus();\n        };\n    /**\n     * @return {?}\n     */\n    NzCheckboxComponent.prototype.blur = /**\n     * @return {?}\n     */\n        function () {\n            this.inputElement.nativeElement.blur();\n        };\n    /**\n     * @return {?}\n     */\n    NzCheckboxComponent.prototype.checkContent = /**\n     * @return {?}\n     */\n        function () {\n            if (isEmpty(this.contentElement.nativeElement)) {\n                this.renderer.setStyle(this.contentElement.nativeElement, 'display', 'none');\n            }\n            else {\n                this.renderer.removeStyle(this.contentElement.nativeElement, 'display');\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzCheckboxComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.renderer.addClass(this.el, this.prefixCls + \"-wrapper\");\n            this.updateClassMap();\n            if (this.nzCheckboxWrapperComponent) {\n                this.nzCheckboxWrapperComponent.addCheckbox(this);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzCheckboxComponent.prototype.ngOnChanges = /**\n     * @return {?}\n     */\n        function () {\n            this.updateClassMap();\n        };\n    /**\n     * @return {?}\n     */\n    NzCheckboxComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            this.isInit = true;\n            this.updateAutoFocus();\n            this.checkContent();\n        };\n    /**\n     * @return {?}\n     */\n    NzCheckboxComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            if (this.nzCheckboxWrapperComponent) {\n                this.nzCheckboxWrapperComponent.removeCheckbox(this);\n            }\n        };\n    return NzCheckboxComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzCheckboxModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzCheckboxModule() {\n    }\n    return NzCheckboxModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzCollapseComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzCollapseComponent() {\n        this._accordion = false;\n        this._bordered = true;\n        this.listOfPanel = [];\n    }\n    Object.defineProperty(NzCollapseComponent.prototype, \"nzAccordion\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._accordion;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._accordion = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCollapseComponent.prototype, \"nzBordered\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._bordered;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._bordered = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} collapse\n     * @return {?}\n     */\n    NzCollapseComponent.prototype.click = /**\n     * @param {?} collapse\n     * @return {?}\n     */\n        function (collapse) {\n            if (this.nzAccordion) {\n                this.listOfPanel.forEach(function (item) {\n                    /** @type {?} */\n                    var active = collapse === item;\n                    if (active && item.nzActive === active) {\n                        item.nzActive = false;\n                        item.nzActiveChange.emit(item.nzActive);\n                    }\n                    else if (item.nzActive !== active) {\n                        item.nzActive = active;\n                        item.nzActiveChange.emit(item.nzActive);\n                    }\n                });\n            }\n            else {\n                collapse.nzActive = !collapse.nzActive;\n                collapse.nzActiveChange.emit(collapse.nzActive);\n            }\n        };\n    /**\n     * @param {?} collapse\n     * @return {?}\n     */\n    NzCollapseComponent.prototype.addCollapse = /**\n     * @param {?} collapse\n     * @return {?}\n     */\n        function (collapse) {\n            this.listOfPanel.push(collapse);\n        };\n    /**\n     * @param {?} collapse\n     * @return {?}\n     */\n    NzCollapseComponent.prototype.removeCollapse = /**\n     * @param {?} collapse\n     * @return {?}\n     */\n        function (collapse) {\n            this.listOfPanel.splice(this.listOfPanel.indexOf(collapse), 1);\n        };\n    return NzCollapseComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzCollapsePanelComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzCollapsePanelComponent(nzCollapseComponent, elementRef) {\n        this.nzCollapseComponent = nzCollapseComponent;\n        this.elementRef = elementRef;\n        this._disabled = false;\n        this._showArrow = true;\n        this._active = false;\n        this.el = this.elementRef.nativeElement;\n        this.nzActiveChange = new EventEmitter();\n    }\n    Object.defineProperty(NzCollapsePanelComponent.prototype, \"nzShowArrow\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._showArrow;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._showArrow = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCollapsePanelComponent.prototype, \"isNoArrow\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return !this.nzShowArrow;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCollapsePanelComponent.prototype, \"nzHeader\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._header;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.isHeaderString = !(value instanceof TemplateRef);\n            this._header = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCollapsePanelComponent.prototype, \"nzDisabled\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._disabled;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._disabled = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzCollapsePanelComponent.prototype, \"nzActive\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._active;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._active = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzCollapsePanelComponent.prototype.clickHeader = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.nzDisabled) {\n                this.nzCollapseComponent.click(this);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzCollapsePanelComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.nzCollapseComponent.addCollapse(this);\n        };\n    /**\n     * @return {?}\n     */\n    NzCollapsePanelComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.nzCollapseComponent.removeCollapse(this);\n        };\n    return NzCollapsePanelComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzCollapseModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzCollapseModule() {\n    }\n    return NzCollapseModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzTimeValueAccessorDirective = /** @class */ /*@__PURE__*/ (function () {\n    function NzTimeValueAccessorDirective(i18n, elementRef) {\n        this.i18n = i18n;\n        this.elementRef = elementRef;\n    }\n    /**\n     * @return {?}\n     */\n    NzTimeValueAccessorDirective.prototype.keyup = /**\n     * @return {?}\n     */\n        function () {\n            this.changed();\n        };\n    /**\n     * @return {?}\n     */\n    NzTimeValueAccessorDirective.prototype.blur = /**\n     * @return {?}\n     */\n        function () {\n            this.touched();\n        };\n    /**\n     * @return {?}\n     */\n    NzTimeValueAccessorDirective.prototype.changed = /**\n     * @return {?}\n     */\n        function () {\n            if (this._onChange) {\n                /** @type {?} */\n                var value = this.i18n.parseTime(this.elementRef.nativeElement.value);\n                this._onChange(value);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzTimeValueAccessorDirective.prototype.touched = /**\n     * @return {?}\n     */\n        function () {\n            if (this._onTouch) {\n                this._onTouch();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzTimeValueAccessorDirective.prototype.setRange = /**\n     * @return {?}\n     */\n        function () {\n            this.elementRef.nativeElement.focus();\n            this.elementRef.nativeElement.setSelectionRange(0, this.elementRef.nativeElement.value.length);\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzTimeValueAccessorDirective.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.elementRef.nativeElement.value = this.i18n.formatDate(value, this.nzTime);\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzTimeValueAccessorDirective.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this._onChange = fn;\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzTimeValueAccessorDirective.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this._onTouch = fn;\n        };\n    return NzTimeValueAccessorDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar TimeHolder = /** @class */ /*@__PURE__*/ (function () {\n    function TimeHolder() {\n        this._seconds = undefined;\n        this._hours = undefined;\n        this._minutes = undefined;\n        this._defaultOpenValue = new Date();\n        this._changes = new Subject();\n    }\n    /**\n     * @return {?}\n     */\n    TimeHolder.prototype.setDefaultValueIfNil = /**\n     * @return {?}\n     */\n        function () {\n            if (!isNotNil(this._value)) {\n                this._value = new Date(this.defaultOpenValue);\n            }\n        };\n    /**\n     * @param {?} value\n     * @param {?} disabled\n     * @return {?}\n     */\n    TimeHolder.prototype.setMinutes = /**\n     * @param {?} value\n     * @param {?} disabled\n     * @return {?}\n     */\n        function (value, disabled) {\n            if (disabled) {\n                return this;\n            }\n            this.setDefaultValueIfNil();\n            this.minutes = value;\n            return this;\n        };\n    /**\n     * @param {?} value\n     * @param {?} disabled\n     * @return {?}\n     */\n    TimeHolder.prototype.setHours = /**\n     * @param {?} value\n     * @param {?} disabled\n     * @return {?}\n     */\n        function (value, disabled) {\n            if (disabled) {\n                return this;\n            }\n            this.setDefaultValueIfNil();\n            this.hours = value;\n            return this;\n        };\n    /**\n     * @param {?} value\n     * @param {?} disabled\n     * @return {?}\n     */\n    TimeHolder.prototype.setSeconds = /**\n     * @param {?} value\n     * @param {?} disabled\n     * @return {?}\n     */\n        function (value, disabled) {\n            if (disabled) {\n                return this;\n            }\n            this.setDefaultValueIfNil();\n            this.seconds = value;\n            return this;\n        };\n    Object.defineProperty(TimeHolder.prototype, \"changes\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._changes.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TimeHolder.prototype, \"value\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._value;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (value !== this._value) {\n                this._value = value;\n                if (isNotNil(this._value)) {\n                    this._hours = this._value.getHours();\n                    this._minutes = this._value.getMinutes();\n                    this._seconds = this._value.getSeconds();\n                }\n                else {\n                    this._clear();\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    TimeHolder.prototype.setValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.value = value;\n            return this;\n        };\n    /**\n     * @return {?}\n     */\n    TimeHolder.prototype.clear = /**\n     * @return {?}\n     */\n        function () {\n            this._clear();\n            this.update();\n        };\n    Object.defineProperty(TimeHolder.prototype, \"isEmpty\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return !(isNotNil(this._hours) || isNotNil(this._minutes) || isNotNil(this._seconds));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    TimeHolder.prototype._clear = /**\n     * @return {?}\n     */\n        function () {\n            this._hours = undefined;\n            this._minutes = undefined;\n            this._seconds = undefined;\n        };\n    /**\n     * @return {?}\n     */\n    TimeHolder.prototype.update = /**\n     * @return {?}\n     */\n        function () {\n            if (this.isEmpty) {\n                this._value = undefined;\n            }\n            else {\n                if (!isNotNil(this._hours)) {\n                    this._hours = this.defaultHours;\n                }\n                else {\n                    this._value.setHours(this.hours);\n                }\n                if (!isNotNil(this._minutes)) {\n                    this._minutes = this.defaultMinutes;\n                }\n                else {\n                    this._value.setMinutes(this.minutes);\n                }\n                if (!isNotNil(this._seconds)) {\n                    this._seconds = this.defaultSeconds;\n                }\n                else {\n                    this._value.setSeconds(this.seconds);\n                }\n                this._value = new Date(this._value);\n            }\n            this.changed();\n        };\n    /**\n     * @return {?}\n     */\n    TimeHolder.prototype.changed = /**\n     * @return {?}\n     */\n        function () {\n            this._changes.next(this._value);\n        };\n    Object.defineProperty(TimeHolder.prototype, \"hours\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._hours;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (value !== this._hours) {\n                this._hours = value;\n                this.update();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TimeHolder.prototype, \"minutes\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._minutes;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (value !== this._minutes) {\n                this._minutes = value;\n                this.update();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TimeHolder.prototype, \"seconds\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._seconds;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (value !== this._seconds) {\n                this._seconds = value;\n                this.update();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TimeHolder.prototype, \"defaultOpenValue\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._defaultOpenValue;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (this._defaultOpenValue !== value) {\n                this._defaultOpenValue = value;\n                this.update();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    TimeHolder.prototype.setDefaultOpenValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.defaultOpenValue = value;\n            return this;\n        };\n    Object.defineProperty(TimeHolder.prototype, \"defaultHours\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._defaultOpenValue.getHours();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TimeHolder.prototype, \"defaultMinutes\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._defaultOpenValue.getMinutes();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TimeHolder.prototype, \"defaultSeconds\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._defaultOpenValue.getSeconds();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return TimeHolder;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} length\n * @param {?=} step\n * @return {?}\n */\nfunction makeRange(length, step) {\n    if (step === void 0) {\n        step = 1;\n    }\n    return new Array(Math.ceil(length / step)).fill(0).map(function (_, i) { return i * step; });\n}\nvar NzTimePickerPanelComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzTimePickerPanelComponent(element, updateCls) {\n        this.element = element;\n        this.updateCls = updateCls;\n        this._nzHourStep = 1;\n        this._nzMinuteStep = 1;\n        this._nzSecondStep = 1;\n        this.unsubscribe$ = new Subject();\n        this._format = 'HH:mm:ss';\n        this._defaultOpenValue = new Date();\n        this._opened = false;\n        this._allowEmpty = true;\n        this.prefixCls = 'ant-time-picker-panel';\n        this.time = new TimeHolder();\n        this.hourEnabled = true;\n        this.minuteEnabled = true;\n        this.secondEnabled = true;\n        this.enabledColumns = 3;\n        this.nzInDatePicker = false;\n        this.nzHideDisabledOptions = false;\n        this.timeClear = new EventEmitter();\n    }\n    Object.defineProperty(NzTimePickerPanelComponent.prototype, \"nzAllowEmpty\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._allowEmpty;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (isNotNil(value)) {\n                this._allowEmpty = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTimePickerPanelComponent.prototype, \"opened\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._opened;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._opened = value;\n            if (this.opened) {\n                this.initPosition();\n                this.selectInputRange();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTimePickerPanelComponent.prototype, \"nzDefaultOpenValue\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._defaultOpenValue;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (isNotNil(value)) {\n                this._defaultOpenValue = value;\n                this.time.setDefaultOpenValue(this.nzDefaultOpenValue);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTimePickerPanelComponent.prototype, \"nzDisabledHours\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._disabledHours;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._disabledHours = value;\n            if (this._disabledHours) {\n                this.buildHours();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTimePickerPanelComponent.prototype, \"nzDisabledMinutes\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._disabledMinutes;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (isNotNil(value)) {\n                this._disabledMinutes = value;\n                this.buildMinutes();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTimePickerPanelComponent.prototype, \"nzDisabledSeconds\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._disabledSeconds;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (isNotNil(value)) {\n                this._disabledSeconds = value;\n                this.buildSeconds();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTimePickerPanelComponent.prototype, \"format\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._format;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (isNotNil(value)) {\n                this._format = value;\n                this.enabledColumns = 0;\n                /** @type {?} */\n                var charSet = new Set(value);\n                this.hourEnabled = charSet.has('H') || charSet.has('h');\n                this.minuteEnabled = charSet.has('m');\n                this.secondEnabled = charSet.has('s');\n                if (this.hourEnabled) {\n                    this.enabledColumns++;\n                }\n                if (this.minuteEnabled) {\n                    this.enabledColumns++;\n                }\n                if (this.secondEnabled) {\n                    this.enabledColumns++;\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTimePickerPanelComponent.prototype, \"nzHourStep\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._nzHourStep;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (isNotNil(value)) {\n                this._nzHourStep = value;\n                this.buildHours();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTimePickerPanelComponent.prototype, \"nzMinuteStep\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._nzMinuteStep;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (isNotNil(value)) {\n                this._nzMinuteStep = value;\n                this.buildMinutes();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTimePickerPanelComponent.prototype, \"nzSecondStep\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._nzSecondStep;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (isNotNil(value)) {\n                this._nzSecondStep = value;\n                this.buildSeconds();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzTimePickerPanelComponent.prototype.selectInputRange = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            setTimeout(function () {\n                if (_this.nzTimeValueAccessorDirective) {\n                    _this.nzTimeValueAccessorDirective.setRange();\n                }\n            });\n        };\n    /**\n     * @return {?}\n     */\n    NzTimePickerPanelComponent.prototype.buildHours = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.hourRange = makeRange(24, this.nzHourStep).map(function (r) {\n                return {\n                    index: r,\n                    disabled: _this.nzDisabledHours && (_this.nzDisabledHours().indexOf(r) !== -1)\n                };\n            });\n        };\n    /**\n     * @return {?}\n     */\n    NzTimePickerPanelComponent.prototype.buildMinutes = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.minuteRange = makeRange(60, this.nzMinuteStep).map(function (r) {\n                return {\n                    index: r,\n                    disabled: _this.nzDisabledMinutes && (_this.nzDisabledMinutes(_this.time.hours).indexOf(r) !== -1)\n                };\n            });\n        };\n    /**\n     * @return {?}\n     */\n    NzTimePickerPanelComponent.prototype.buildSeconds = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.secondRange = makeRange(60, this.nzSecondStep).map(function (r) {\n                return {\n                    index: r,\n                    disabled: _this.nzDisabledSeconds && (_this.nzDisabledSeconds(_this.time.hours, _this.time.minutes).indexOf(r) !== -1)\n                };\n            });\n        };\n    /**\n     * @return {?}\n     */\n    NzTimePickerPanelComponent.prototype.buildTimes = /**\n     * @return {?}\n     */\n        function () {\n            this.buildHours();\n            this.buildMinutes();\n            this.buildSeconds();\n        };\n    /**\n     * @param {?} hour\n     * @return {?}\n     */\n    NzTimePickerPanelComponent.prototype.selectHour = /**\n     * @param {?} hour\n     * @return {?}\n     */\n        function (hour) {\n            this.time.setHours(hour.index, hour.disabled);\n            this.scrollToSelected(this.hourListElement.nativeElement, hour.index, 120, 'hour');\n            if (this._disabledMinutes) {\n                this.buildMinutes();\n            }\n            if (this._disabledSeconds || this._disabledMinutes) {\n                this.buildSeconds();\n            }\n        };\n    /**\n     * @param {?} minute\n     * @return {?}\n     */\n    NzTimePickerPanelComponent.prototype.selectMinute = /**\n     * @param {?} minute\n     * @return {?}\n     */\n        function (minute) {\n            this.time.setMinutes(minute.index, minute.disabled);\n            this.scrollToSelected(this.minuteListElement.nativeElement, minute.index, 120, 'minute');\n            if (this._disabledSeconds) {\n                this.buildSeconds();\n            }\n        };\n    /**\n     * @param {?} second\n     * @return {?}\n     */\n    NzTimePickerPanelComponent.prototype.selectSecond = /**\n     * @param {?} second\n     * @return {?}\n     */\n        function (second) {\n            this.time.setSeconds(second.index, second.disabled);\n            this.scrollToSelected(this.secondListElement.nativeElement, second.index, 120, 'second');\n        };\n    /**\n     * @param {?} instance\n     * @param {?} index\n     * @param {?=} duration\n     * @param {?=} unit\n     * @return {?}\n     */\n    NzTimePickerPanelComponent.prototype.scrollToSelected = /**\n     * @param {?} instance\n     * @param {?} index\n     * @param {?=} duration\n     * @param {?=} unit\n     * @return {?}\n     */\n        function (instance, index, duration, unit) {\n            if (duration === void 0) {\n                duration = 0;\n            }\n            /** @type {?} */\n            var transIndex = this.translateIndex(index, unit);\n            /** @type {?} */\n            var currentOption = /** @type {?} */ ((instance.children[0].children[transIndex] || instance.children[0].children[0]));\n            this.scrollTo(instance, currentOption.offsetTop, duration);\n        };\n    /**\n     * @param {?} index\n     * @param {?} unit\n     * @return {?}\n     */\n    NzTimePickerPanelComponent.prototype.translateIndex = /**\n     * @param {?} index\n     * @param {?} unit\n     * @return {?}\n     */\n        function (index, unit) {\n            if (unit === 'hour') {\n                /** @type {?} */\n                var disabledHours = this.nzDisabledHours && this.nzDisabledHours();\n                return this.calcIndex(disabledHours, this.hourRange.map(function (item) { return item.index; }).indexOf(index));\n            }\n            else if (unit === 'minute') {\n                /** @type {?} */\n                var disabledMinutes = this.nzDisabledMinutes && this.nzDisabledMinutes(this.time.hours);\n                return this.calcIndex(disabledMinutes, this.minuteRange.map(function (item) { return item.index; }).indexOf(index));\n            }\n            else if (unit === 'second') {\n                /** @type {?} */\n                var disabledSeconds = this.nzDisabledSeconds && this.nzDisabledSeconds(this.time.hours, this.time.minutes);\n                return this.calcIndex(disabledSeconds, this.secondRange.map(function (item) { return item.index; }).indexOf(index));\n            }\n        };\n    /**\n     * @param {?} element\n     * @param {?} to\n     * @param {?} duration\n     * @return {?}\n     */\n    NzTimePickerPanelComponent.prototype.scrollTo = /**\n     * @param {?} element\n     * @param {?} to\n     * @param {?} duration\n     * @return {?}\n     */\n        function (element, to, duration) {\n            var _this = this;\n            if (duration <= 0) {\n                element.scrollTop = to;\n                return;\n            }\n            /** @type {?} */\n            var difference = to - element.scrollTop;\n            /** @type {?} */\n            var perTick = difference / duration * 10;\n            reqAnimFrame(function () {\n                element.scrollTop = element.scrollTop + perTick;\n                if (element.scrollTop === to) {\n                    return;\n                }\n                _this.scrollTo(element, to, duration - 10);\n            });\n        };\n    /**\n     * @param {?} array\n     * @param {?} index\n     * @return {?}\n     */\n    NzTimePickerPanelComponent.prototype.calcIndex = /**\n     * @param {?} array\n     * @param {?} index\n     * @return {?}\n     */\n        function (array, index) {\n            if (array && array.length && this.nzHideDisabledOptions) {\n                return index - array.reduce(function (pre, value) {\n                    return pre + (value < index ? 1 : 0);\n                }, 0);\n            }\n            else {\n                return index;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzTimePickerPanelComponent.prototype.clear = /**\n     * @return {?}\n     */\n        function () {\n            this.time.clear();\n            this.timeClear.emit();\n        };\n    /**\n     * @return {?}\n     */\n    NzTimePickerPanelComponent.prototype.changed = /**\n     * @return {?}\n     */\n        function () {\n            if (this.onChange) {\n                this.onChange(this.time.value);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzTimePickerPanelComponent.prototype.touched = /**\n     * @return {?}\n     */\n        function () {\n            if (this.onTouch) {\n                this.onTouch();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzTimePickerPanelComponent.prototype.setClassMap = /**\n     * @return {?}\n     */\n        function () {\n            var _a;\n            this.updateCls.updateHostClass(this.element.nativeElement, (_a = {},\n                _a[\"\" + this.prefixCls] = true,\n                _a[this.prefixCls + \"-column-\" + this.enabledColumns] = this.nzInDatePicker ? false : true,\n                _a[this.prefixCls + \"-narrow\"] = this.enabledColumns < 3,\n                _a[this.prefixCls + \"-placement-bottomLeft\"] = this.nzInDatePicker ? false : true,\n                _a));\n        };\n    /**\n     * @param {?} hour\n     * @return {?}\n     */\n    NzTimePickerPanelComponent.prototype.isSelectedHour = /**\n     * @param {?} hour\n     * @return {?}\n     */\n        function (hour) {\n            return (hour.index === this.time.hours) || (!isNotNil(this.time.hours) && (hour.index === this.time.defaultHours));\n        };\n    /**\n     * @param {?} minute\n     * @return {?}\n     */\n    NzTimePickerPanelComponent.prototype.isSelectedMinute = /**\n     * @param {?} minute\n     * @return {?}\n     */\n        function (minute) {\n            return (minute.index === this.time.minutes) || (!isNotNil(this.time.minutes) && (minute.index === this.time.defaultMinutes));\n        };\n    /**\n     * @param {?} second\n     * @return {?}\n     */\n    NzTimePickerPanelComponent.prototype.isSelectedSecond = /**\n     * @param {?} second\n     * @return {?}\n     */\n        function (second) {\n            return (second.index === this.time.seconds) || (!isNotNil(this.time.seconds) && (second.index === this.time.defaultSeconds));\n        };\n    /**\n     * @return {?}\n     */\n    NzTimePickerPanelComponent.prototype.initPosition = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            setTimeout(function () {\n                if (_this.hourEnabled && _this.hourListElement) {\n                    if (isNotNil(_this.time.hours)) {\n                        _this.scrollToSelected(_this.hourListElement.nativeElement, _this.time.hours, 0, 'hour');\n                    }\n                    else {\n                        _this.scrollToSelected(_this.hourListElement.nativeElement, _this.time.defaultHours, 0, 'hour');\n                    }\n                }\n                if (_this.minuteEnabled && _this.minuteListElement) {\n                    if (isNotNil(_this.time.minutes)) {\n                        _this.scrollToSelected(_this.minuteListElement.nativeElement, _this.time.minutes, 0, 'minute');\n                    }\n                    else {\n                        _this.scrollToSelected(_this.minuteListElement.nativeElement, _this.time.defaultMinutes, 0, 'minute');\n                    }\n                }\n                if (_this.secondEnabled && _this.secondListElement) {\n                    if (isNotNil(_this.time.seconds)) {\n                        _this.scrollToSelected(_this.secondListElement.nativeElement, _this.time.seconds, 0, 'second');\n                    }\n                    else {\n                        _this.scrollToSelected(_this.secondListElement.nativeElement, _this.time.defaultSeconds, 0, 'second');\n                    }\n                }\n            });\n        };\n    /**\n     * @return {?}\n     */\n    NzTimePickerPanelComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this.nzInDatePicker) {\n                this.prefixCls = 'ant-calendar-time-picker';\n            }\n            this.time.changes.pipe(takeUntil(this.unsubscribe$)).subscribe(function () {\n                _this.changed();\n                _this.touched();\n            });\n            this.buildTimes();\n            this.setClassMap();\n        };\n    /**\n     * @return {?}\n     */\n    NzTimePickerPanelComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.unsubscribe$.next();\n            this.unsubscribe$.complete();\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzTimePickerPanelComponent.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.time.value = value;\n            this.buildTimes();\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzTimePickerPanelComponent.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this.onChange = fn;\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzTimePickerPanelComponent.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this.onTouch = fn;\n        };\n    return NzTimePickerPanelComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzTimePickerComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzTimePickerComponent(element, renderer, overlay, positionBuilder, i18n, updateCls) {\n        this.element = element;\n        this.renderer = renderer;\n        this.overlay = overlay;\n        this.positionBuilder = positionBuilder;\n        this.i18n = i18n;\n        this.updateCls = updateCls;\n        this._disabled = false;\n        this._value = null;\n        this._allowEmpty = true;\n        this._autoFocus = false;\n        this._hideDisabledOptions = false;\n        this.isInit = false;\n        this.overlayPositions = [{\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'end',\n                overlayY: 'top',\n                offsetX: 0,\n                offsetY: 0\n            }];\n        this.nzSize = null;\n        this.nzHourStep = 1;\n        this.nzMinuteStep = 1;\n        this.nzSecondStep = 1;\n        this.nzClearText = 'clear';\n        this.nzPopupClassName = '';\n        this.nzPlaceHolder = '';\n        this.nzDefaultOpenValue = new Date();\n        this.nzFormat = 'HH:mm:ss';\n        this.nzOpen = false;\n        this.nzOpenChange = new EventEmitter();\n    }\n    Object.defineProperty(NzTimePickerComponent.prototype, \"nzHideDisabledOptions\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._hideDisabledOptions;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._hideDisabledOptions = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTimePickerComponent.prototype, \"nzAllowEmpty\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._allowEmpty;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._allowEmpty = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTimePickerComponent.prototype, \"nzAutoFocus\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._autoFocus;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._autoFocus = toBoolean(value);\n            this.updateAutoFocus();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTimePickerComponent.prototype, \"nzDisabled\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._disabled;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._disabled = toBoolean(value);\n            /** @type {?} */\n            var input = /** @type {?} */ (this.inputRef.nativeElement);\n            if (this._disabled) {\n                this.renderer.setAttribute(input, 'disabled', '');\n            }\n            else {\n                this.renderer.removeAttribute(input, 'disabled');\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTimePickerComponent.prototype, \"value\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._value;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._value = value;\n            if (this._onChange) {\n                this._onChange(this.value);\n            }\n            if (this._onTouched) {\n                this._onTouched();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzTimePickerComponent.prototype.open = /**\n     * @return {?}\n     */\n        function () {\n            if (this.nzDisabled) {\n                return;\n            }\n            this.nzOpen = true;\n            this.nzOpenChange.emit(this.nzOpen);\n        };\n    /**\n     * @return {?}\n     */\n    NzTimePickerComponent.prototype.close = /**\n     * @return {?}\n     */\n        function () {\n            this.nzOpen = false;\n            this.nzOpenChange.emit(this.nzOpen);\n        };\n    /**\n     * @return {?}\n     */\n    NzTimePickerComponent.prototype.updateAutoFocus = /**\n     * @return {?}\n     */\n        function () {\n            if (this.isInit && !this.nzDisabled) {\n                if (this.nzAutoFocus) {\n                    this.renderer.setAttribute(this.inputRef.nativeElement, 'autofocus', 'autofocus');\n                }\n                else {\n                    this.renderer.removeAttribute(this.inputRef.nativeElement, 'autofocus');\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzTimePickerComponent.prototype.setClassMap = /**\n     * @return {?}\n     */\n        function () {\n            var _a;\n            this.updateCls.updateHostClass(this.element.nativeElement, (_a = {},\n                _a[\"ant-time-picker\"] = true,\n                _a[\"ant-time-picker-\" + this.nzSize] = isNotNil(this.nzSize),\n                _a));\n        };\n    /**\n     * @return {?}\n     */\n    NzTimePickerComponent.prototype.focus = /**\n     * @return {?}\n     */\n        function () {\n            if (this.inputRef.nativeElement) {\n                this.inputRef.nativeElement.focus();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzTimePickerComponent.prototype.blur = /**\n     * @return {?}\n     */\n        function () {\n            if (this.inputRef.nativeElement) {\n                this.inputRef.nativeElement.blur();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzTimePickerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.setClassMap();\n            this.origin = new CdkOverlayOrigin(this.element);\n        };\n    /**\n     * @return {?}\n     */\n    NzTimePickerComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            this.isInit = true;\n            this.updateAutoFocus();\n        };\n    /**\n     * @param {?} time\n     * @return {?}\n     */\n    NzTimePickerComponent.prototype.writeValue = /**\n     * @param {?} time\n     * @return {?}\n     */\n        function (time) {\n            this._value = time;\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzTimePickerComponent.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this._onChange = fn;\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzTimePickerComponent.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this._onTouched = fn;\n        };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    NzTimePickerComponent.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n        function (isDisabled) {\n            this.nzDisabled = isDisabled;\n        };\n    return NzTimePickerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzTimePickerModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzTimePickerModule() {\n    }\n    return NzTimePickerModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarFooterComponent = /** @class */ /*@__PURE__*/ (function () {\n    function CalendarFooterComponent() {\n        this.showToday = false;\n        this.hasTimePicker = false;\n        this.isRange = false;\n        this.showTimePicker = false;\n        this.showTimePickerChange = new EventEmitter();\n        // @Input() disabled: boolean = false;\n        this.timePickerDisabled = false;\n        this.okDisabled = false;\n        this.clickOk = new EventEmitter();\n        this.clickToday = new EventEmitter();\n        this.prefixCls = 'ant-calendar';\n        this.isTemplateRef = isTemplateRef;\n        this.isNonEmptyString = isNonEmptyString;\n    }\n    return CalendarFooterComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * [Temporary] Get the first day of week depend on locale (0-6 represent as Sunday-Saturday)\n * @param {?=} locale Locale code\n * @return {?}\n */\nfunction firstDayOfWeek(locale) {\n    return locale && ['zh-cn', 'zh-tw'].indexOf(locale.toLowerCase()) > -1 ? 1 : 0;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Wrapping kind APIs for date operating and unify\n * NOTE: every new API return new CandyDate object without side effects to the former Date object\n * NOTE: most APIs are based on local time other than customized locale id (this needs tobe support in future)\n * TODO: support format() against to angular's core API\n */\nvar /**\n * Wrapping kind APIs for date operating and unify\n * NOTE: every new API return new CandyDate object without side effects to the former Date object\n * NOTE: most APIs are based on local time other than customized locale id (this needs tobe support in future)\n * TODO: support format() against to angular's core API\n */ CandyDate = /** @class */ /*@__PURE__*/ (function () {\n    // locale: string; // Custom specified locale ID\n    function CandyDate(date) {\n        // if (!(this instanceof CandyDate)) {\n        //   return new CandyDate(date);\n        // }\n        if (date) {\n            if (date instanceof Date) {\n                this.nativeDate = date;\n            }\n            else if (typeof date === 'string') {\n                this.nativeDate = new Date(date);\n            }\n            else {\n                throw new Error('The input date type is not supported (\"Date\" and \"string\" is now recommended)');\n            }\n        }\n        else {\n            this.nativeDate = new Date();\n        }\n    }\n    // getLocale(): string {\n    //   return this.locale;\n    // }\n    // setLocale(locale: string): CandyDate {\n    //   this.locale = locale;\n    //   return this;\n    // }\n    // ---------------------------------------------------------------------\n    // | Native shortcuts\n    // ---------------------------------------------------------------------\n    /**\n     * @return {?}\n     */\n    CandyDate.prototype.getYear = /**\n     * @return {?}\n     */\n        function () {\n            return this.nativeDate.getFullYear();\n        };\n    /**\n     * @return {?}\n     */\n    CandyDate.prototype.getMonth = /**\n     * @return {?}\n     */\n        function () {\n            return this.nativeDate.getMonth();\n        };\n    /**\n     * @return {?}\n     */\n    CandyDate.prototype.getDay = /**\n     * @return {?}\n     */\n        function () {\n            return this.nativeDate.getDay();\n        };\n    /**\n     * @return {?}\n     */\n    CandyDate.prototype.getTime = /**\n     * @return {?}\n     */\n        function () {\n            return this.nativeDate.getTime();\n        };\n    /**\n     * @return {?}\n     */\n    CandyDate.prototype.getDate = /**\n     * @return {?}\n     */\n        function () {\n            return this.nativeDate.getDate();\n        };\n    /**\n     * @return {?}\n     */\n    CandyDate.prototype.getHours = /**\n     * @return {?}\n     */\n        function () {\n            return this.nativeDate.getHours();\n        };\n    /**\n     * @return {?}\n     */\n    CandyDate.prototype.getMinutes = /**\n     * @return {?}\n     */\n        function () {\n            return this.nativeDate.getMinutes();\n        };\n    /**\n     * @return {?}\n     */\n    CandyDate.prototype.getSeconds = /**\n     * @return {?}\n     */\n        function () {\n            return this.nativeDate.getSeconds();\n        };\n    /**\n     * @return {?}\n     */\n    CandyDate.prototype.getMilliseconds = /**\n     * @return {?}\n     */\n        function () {\n            return this.nativeDate.getMilliseconds();\n        };\n    // ---------------------------------------------------------------------\n    // | New implementing APIs\n    // ---------------------------------------------------------------------\n    /**\n     * @return {?}\n     */\n    CandyDate.prototype.clone = /**\n     * @return {?}\n     */\n        function () {\n            return new CandyDate(new Date(this.nativeDate));\n        };\n    /**\n     * @param {?} hour\n     * @param {?} minute\n     * @param {?} second\n     * @return {?}\n     */\n    CandyDate.prototype.setHms = /**\n     * @param {?} hour\n     * @param {?} minute\n     * @param {?} second\n     * @return {?}\n     */\n        function (hour, minute, second) {\n            /** @type {?} */\n            var date = new Date(this.nativeDate);\n            date.setHours(hour, minute, second);\n            return new CandyDate(date);\n        };\n    /**\n     * @param {?} year\n     * @return {?}\n     */\n    CandyDate.prototype.setYear = /**\n     * @param {?} year\n     * @return {?}\n     */\n        function (year) {\n            /** @type {?} */\n            var date = new Date(this.nativeDate);\n            date.setFullYear(year);\n            return new CandyDate(date);\n        };\n    /**\n     * @param {?} amount\n     * @return {?}\n     */\n    CandyDate.prototype.addYears = /**\n     * @param {?} amount\n     * @return {?}\n     */\n        function (amount) {\n            return new CandyDate(addYears(this.nativeDate, amount));\n        };\n    // NOTE: month starts from 0\n    // NOTE: Don't use the native API for month manipulation as it not restrict the date when it overflows, eg. (new Date('2018-7-31')).setMonth(1) will be date of 2018-3-03 instead of 2018-2-28\n    /**\n     * @param {?} month\n     * @return {?}\n     */\n    CandyDate.prototype.setMonth = /**\n     * @param {?} month\n     * @return {?}\n     */\n        function (month) {\n            // const date = new Date(this.nativeDate);\n            // date.setMonth(month);\n            // return new CandyDate(date);\n            return new CandyDate(setMonth(this.nativeDate, month));\n        };\n    /**\n     * @param {?} amount\n     * @return {?}\n     */\n    CandyDate.prototype.addMonths = /**\n     * @param {?} amount\n     * @return {?}\n     */\n        function (amount) {\n            return new CandyDate(addMonths(this.nativeDate, amount));\n        };\n    /**\n     * @param {?} day\n     * @param {?=} options\n     * @return {?}\n     */\n    CandyDate.prototype.setDay = /**\n     * @param {?} day\n     * @param {?=} options\n     * @return {?}\n     */\n        function (day, options) {\n            return new CandyDate(setDay(this.nativeDate, day, options));\n        };\n    /**\n     * @param {?} amount\n     * @return {?}\n     */\n    CandyDate.prototype.setDate = /**\n     * @param {?} amount\n     * @return {?}\n     */\n        function (amount) {\n            /** @type {?} */\n            var date = new Date(this.nativeDate);\n            date.setDate(amount);\n            return new CandyDate(date);\n        };\n    /**\n     * @param {?} amount\n     * @return {?}\n     */\n    CandyDate.prototype.addDays = /**\n     * @param {?} amount\n     * @return {?}\n     */\n        function (amount) {\n            return this.setDate(this.getDate() + amount);\n        };\n    /**\n     * @param {?} grain\n     * @return {?}\n     */\n    CandyDate.prototype.endOf = /**\n     * @param {?} grain\n     * @return {?}\n     */\n        function (grain) {\n            switch (grain) {\n                case 'month': return new CandyDate(endOfMonth(this.nativeDate));\n            }\n            return null;\n        };\n    /**\n     * @param {?} date\n     * @param {?} grain\n     * @return {?}\n     */\n    CandyDate.prototype.isSame = /**\n     * @param {?} date\n     * @param {?} grain\n     * @return {?}\n     */\n        function (date, grain) {\n            // TODO: Precipitate into a function \"compare()\"\n            if (date) {\n                /** @type {?} */\n                var left = this.toNativeDate();\n                /** @type {?} */\n                var right = this.toNativeDate(date);\n                switch (grain) {\n                    case 'year':\n                        return left.getFullYear() === right.getFullYear();\n                    case 'month':\n                        return left.getFullYear() === right.getFullYear()\n                            && left.getMonth() === right.getMonth();\n                    case 'day':\n                        return left.getFullYear() === right.getFullYear()\n                            && left.getMonth() === right.getMonth()\n                            && left.getDate() === right.getDate();\n                    case 'hour':\n                        return left.getFullYear() === right.getFullYear()\n                            && left.getMonth() === right.getMonth()\n                            && left.getDate() === right.getDate()\n                            && left.getHours() === right.getHours();\n                    case 'minute':\n                        return left.getFullYear() === right.getFullYear()\n                            && left.getMonth() === right.getMonth()\n                            && left.getDate() === right.getDate()\n                            && left.getHours() === right.getHours()\n                            && left.getMinutes() === right.getMinutes();\n                    case 'second':\n                        return left.getFullYear() === right.getFullYear()\n                            && left.getMonth() === right.getMonth()\n                            && left.getDate() === right.getDate()\n                            && left.getHours() === right.getHours()\n                            && left.getMinutes() === right.getMinutes()\n                            && left.getSeconds() === right.getSeconds();\n                }\n            }\n            return false;\n        };\n    /**\n     * @param {?} date\n     * @param {?} grain\n     * @return {?}\n     */\n    CandyDate.prototype.isAfter = /**\n     * @param {?} date\n     * @param {?} grain\n     * @return {?}\n     */\n        function (date, grain) {\n            // TODO: Precipitate into a function \"compare()\"\n            if (date) {\n                /** @type {?} */\n                var left = this.toNativeDate();\n                /** @type {?} */\n                var right = this.toNativeDate(date);\n                switch (grain) {\n                    case 'year':\n                        return left.getFullYear() > right.getFullYear();\n                    case 'month':\n                        return (left.getFullYear() > right.getFullYear())\n                            || (left.getFullYear() === right.getFullYear() && left.getMonth() > right.getMonth());\n                    case 'day':\n                        return (left.getFullYear() > right.getFullYear())\n                            || (left.getFullYear() === right.getFullYear() && left.getMonth() > right.getMonth())\n                            || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() > right.getDate());\n                    case 'hour':\n                        return (left.getFullYear() > right.getFullYear())\n                            || (left.getFullYear() === right.getFullYear() && left.getMonth() > right.getMonth())\n                            || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() > right.getDate())\n                            || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() === right.getDate() && left.getHours() > right.getHours());\n                    case 'minute':\n                        return (left.getFullYear() > right.getFullYear())\n                            || (left.getFullYear() === right.getFullYear() && left.getMonth() > right.getMonth())\n                            || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() > right.getDate())\n                            || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() === right.getDate() && left.getHours() > right.getHours())\n                            || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() === right.getDate() && left.getHours() === right.getHours() && left.getMinutes() > right.getMinutes());\n                    case 'second':\n                        return (left.getFullYear() > right.getFullYear())\n                            || (left.getFullYear() === right.getFullYear() && left.getMonth() > right.getMonth())\n                            || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() > right.getDate())\n                            || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() === right.getDate() && left.getHours() > right.getHours())\n                            || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() === right.getDate() && left.getHours() === right.getHours() && left.getMinutes() > right.getMinutes())\n                            || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() === right.getDate() && left.getHours() === right.getHours() && left.getMinutes() === right.getMinutes() && left.getSeconds() > right.getSeconds());\n                }\n            }\n            return false;\n        };\n    /**\n     * @param {?} date\n     * @param {?} grain\n     * @return {?}\n     */\n    CandyDate.prototype.isBefore = /**\n     * @param {?} date\n     * @param {?} grain\n     * @return {?}\n     */\n        function (date, grain) {\n            // TODO: Precipitate into a function \"compare()\"\n            if (date) {\n                /** @type {?} */\n                var left = this.toNativeDate();\n                /** @type {?} */\n                var right = this.toNativeDate(date);\n                switch (grain) {\n                    case 'year':\n                        return left.getFullYear() < right.getFullYear();\n                    case 'month':\n                        return (left.getFullYear() < right.getFullYear())\n                            || (left.getFullYear() === right.getFullYear() && left.getMonth() < right.getMonth());\n                    case 'day':\n                        return (left.getFullYear() < right.getFullYear())\n                            || (left.getFullYear() === right.getFullYear() && left.getMonth() < right.getMonth())\n                            || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() < right.getDate());\n                    case 'hour':\n                        return (left.getFullYear() < right.getFullYear())\n                            || (left.getFullYear() === right.getFullYear() && left.getMonth() < right.getMonth())\n                            || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() < right.getDate())\n                            || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() === right.getDate() && left.getHours() < right.getHours());\n                    case 'minute':\n                        return (left.getFullYear() < right.getFullYear())\n                            || (left.getFullYear() === right.getFullYear() && left.getMonth() < right.getMonth())\n                            || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() < right.getDate())\n                            || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() === right.getDate() && left.getHours() < right.getHours())\n                            || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() === right.getDate() && left.getHours() === right.getHours() && left.getMinutes() < right.getMinutes());\n                    case 'second':\n                        return (left.getFullYear() < right.getFullYear())\n                            || (left.getFullYear() === right.getFullYear() && left.getMonth() < right.getMonth())\n                            || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() < right.getDate())\n                            || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() === right.getDate() && left.getHours() < right.getHours())\n                            || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() === right.getDate() && left.getHours() === right.getHours() && left.getMinutes() < right.getMinutes())\n                            || (left.getFullYear() === right.getFullYear() && left.getMonth() === right.getMonth() && left.getDate() === right.getDate() && left.getHours() === right.getHours() && left.getMinutes() === right.getMinutes() && left.getSeconds() < right.getSeconds());\n                }\n            }\n            return false;\n        };\n    // Equal to today accurate to \"day\"\n    /**\n     * @return {?}\n     */\n    CandyDate.prototype.isToday = /**\n     * @return {?}\n     */\n        function () {\n            return this.isSame(new Date(), 'day');\n        };\n    /**\n     * @return {?}\n     */\n    CandyDate.prototype.isInvalid = /**\n     * @return {?}\n     */\n        function () {\n            return isNaN(this.nativeDate.valueOf());\n        };\n    /**\n     * 0-6 (Sunday to Saturday)\n     */\n    /**\n     * 0-6 (Sunday to Saturday)\n     * @param {?=} locale\n     * @return {?}\n     */\n    CandyDate.prototype.firstDayOfWeek = /**\n     * 0-6 (Sunday to Saturday)\n     * @param {?=} locale\n     * @return {?}\n     */\n        function (locale) {\n            return firstDayOfWeek(locale);\n        };\n    /**\n     * @param {?=} date\n     * @return {?}\n     */\n    CandyDate.prototype.toNativeDate = /**\n     * @param {?=} date\n     * @return {?}\n     */\n        function (date) {\n            if (date === void 0) {\n                date = this;\n            }\n            return date instanceof CandyDate ? date.nativeDate : date;\n        };\n    return CandyDate;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarHeaderComponent = /** @class */ /*@__PURE__*/ (function () {\n    function CalendarHeaderComponent(i18n) {\n        this.i18n = i18n;\n        this.enablePrev = true;\n        this.enableNext = true;\n        this.showTimePicker = false;\n        this.valueChange = new EventEmitter();\n        this.panelModeChange = new EventEmitter();\n        this.chooseDecade = new EventEmitter();\n        this.chooseYear = new EventEmitter();\n        this.chooseMonth = new EventEmitter();\n        this.prefixCls = 'ant-calendar';\n        this.yearToMonth = false;\n    }\n    /**\n     * @return {?}\n     */\n    CalendarHeaderComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.value) {\n                this.value = new CandyDate(); // Show today by default\n            }\n        };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    CalendarHeaderComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            if (changes[\"value\"] || changes[\"showTimePicker\"] || changes[\"panelMode\"]) {\n                this.render();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    CalendarHeaderComponent.prototype.previousYear = /**\n     * @return {?}\n     */\n        function () {\n            this.gotoYear(-1);\n        };\n    /**\n     * @return {?}\n     */\n    CalendarHeaderComponent.prototype.nextYear = /**\n     * @return {?}\n     */\n        function () {\n            this.gotoYear(1);\n        };\n    /**\n     * @return {?}\n     */\n    CalendarHeaderComponent.prototype.previousMonth = /**\n     * @return {?}\n     */\n        function () {\n            this.gotoMonth(-1);\n        };\n    /**\n     * @return {?}\n     */\n    CalendarHeaderComponent.prototype.nextMonth = /**\n     * @return {?}\n     */\n        function () {\n            this.gotoMonth(1);\n        };\n    /**\n     * @param {?} mode\n     * @param {?=} value\n     * @return {?}\n     */\n    CalendarHeaderComponent.prototype.changePanel = /**\n     * @param {?} mode\n     * @param {?=} value\n     * @return {?}\n     */\n        function (mode, value) {\n            this.panelModeChange.emit(mode);\n            if (value) {\n                this.changeValueFromInside(value);\n            }\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    CalendarHeaderComponent.prototype.onChooseDecade = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.changePanel('year', value);\n            this.chooseDecade.emit(value);\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    CalendarHeaderComponent.prototype.onChooseYear = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.changePanel(this.yearToMonth ? 'month' : 'date', value);\n            this.yearToMonth = false; // Clear\n            this.chooseYear.emit(value);\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    CalendarHeaderComponent.prototype.onChooseMonth = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.changePanel('date', value);\n            this.yearToMonth = false; // Clear\n            this.chooseMonth.emit(value);\n        };\n    /**\n     * @return {?}\n     */\n    CalendarHeaderComponent.prototype.changeToMonthPanel = /**\n     * @return {?}\n     */\n        function () {\n            this.changePanel('month');\n            this.yearToMonth = true;\n        };\n    /**\n     * @return {?}\n     */\n    CalendarHeaderComponent.prototype.render = /**\n     * @return {?}\n     */\n        function () {\n            if (this.value) {\n                this.yearMonthDaySelectors = this.createYearMonthDaySelectors();\n            }\n        };\n    /**\n     * @param {?} amount\n     * @return {?}\n     */\n    CalendarHeaderComponent.prototype.gotoMonth = /**\n     * @param {?} amount\n     * @return {?}\n     */\n        function (amount) {\n            this.changeValueFromInside(this.value.addMonths(amount));\n        };\n    /**\n     * @param {?} amount\n     * @return {?}\n     */\n    CalendarHeaderComponent.prototype.gotoYear = /**\n     * @param {?} amount\n     * @return {?}\n     */\n        function (amount) {\n            this.changeValueFromInside(this.value.addYears(amount));\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    CalendarHeaderComponent.prototype.changeValueFromInside = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            if (this.value !== value) {\n                this.value = value;\n                this.valueChange.emit(this.value);\n                this.render();\n            }\n        };\n    /**\n     * @param {?} localeFormat\n     * @return {?}\n     */\n    CalendarHeaderComponent.prototype.formatDateTime = /**\n     * @param {?} localeFormat\n     * @return {?}\n     */\n        function (localeFormat) {\n            return this.i18n.formatDateCompatible(this.value.nativeDate, localeFormat);\n        };\n    /**\n     * @return {?}\n     */\n    CalendarHeaderComponent.prototype.createYearMonthDaySelectors = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            /** @type {?} */\n            var year;\n            /** @type {?} */\n            var month;\n            /** @type {?} */\n            var day;\n            year = {\n                className: this.prefixCls + \"-year-select\",\n                title: this.locale.yearSelect,\n                onClick: function () { return _this.showTimePicker ? null : _this.changePanel('year'); },\n                label: this.formatDateTime(this.locale.yearFormat)\n            };\n            month = {\n                className: this.prefixCls + \"-month-select\",\n                title: this.locale.monthSelect,\n                onClick: function () { return _this.showTimePicker ? null : _this.changeToMonthPanel(); },\n                label: this.locale.monthFormat ? this.formatDateTime(this.locale.monthFormat) : this.i18n.formatDate(this.value.nativeDate, 'MMM')\n            };\n            if (this.showTimePicker) {\n                day = {\n                    className: this.prefixCls + \"-day-select\",\n                    label: this.formatDateTime(this.locale.dayFormat)\n                };\n            }\n            /** @type {?} */\n            var result;\n            if (this.locale.monthBeforeYear) {\n                result = [month, day, year];\n            }\n            else {\n                result = [year, month, day];\n            }\n            return result.filter(function (selector) { return !!selector; });\n        };\n    return CalendarHeaderComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarInputComponent = /** @class */ /*@__PURE__*/ (function () {\n    function CalendarInputComponent(i18n) {\n        this.i18n = i18n;\n        this.valueChange = new EventEmitter();\n        this.prefixCls = 'ant-calendar';\n        this.invalidInputClass = '';\n    }\n    /**\n     * @return {?}\n     */\n    CalendarInputComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () { };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    CalendarInputComponent.prototype.onInputKeyup = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            /** @type {?} */\n            var date = this.checkValidInputDate(event);\n            if (!date || (this.disabledDate && this.disabledDate(date.nativeDate))) {\n                return;\n            }\n            if (!date.isSame(this.value, 'second')) { // Not same with original value\n                // Not same with original value\n                this.value = date;\n                this.valueChange.emit(this.value);\n            }\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    CalendarInputComponent.prototype.toReadableInput = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            return value ? this.i18n.formatDateCompatible(value.nativeDate, this.format) : '';\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    CalendarInputComponent.prototype.checkValidInputDate = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            /** @type {?} */\n            var input = ( /** @type {?} */(event.target)).value;\n            /** @type {?} */\n            var date = new CandyDate(input);\n            this.invalidInputClass = '';\n            if (date.isInvalid() || input !== this.toReadableInput(date)) { // Should also match the input format exactly\n                // Should also match the input format exactly\n                this.invalidInputClass = this.prefixCls + \"-input-invalid\";\n                return null;\n            }\n            return date;\n        };\n    return CalendarInputComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar OkButtonComponent = /** @class */ /*@__PURE__*/ (function () {\n    function OkButtonComponent() {\n        this.okDisabled = false;\n        this.clickOk = new EventEmitter();\n        this.prefixCls = 'ant-calendar';\n    }\n    return OkButtonComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar TimePickerButtonComponent = /** @class */ /*@__PURE__*/ (function () {\n    function TimePickerButtonComponent() {\n        this.timePickerDisabled = false;\n        this.showTimePicker = false;\n        this.showTimePickerChange = new EventEmitter();\n        this.prefixCls = 'ant-calendar';\n    }\n    /**\n     * @return {?}\n     */\n    TimePickerButtonComponent.prototype.onClick = /**\n     * @return {?}\n     */\n        function () {\n            this.showTimePicker = !this.showTimePicker;\n            this.showTimePickerChange.emit(this.showTimePicker);\n        };\n    return TimePickerButtonComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar TodayButtonComponent = /** @class */ /*@__PURE__*/ (function () {\n    function TodayButtonComponent(i18n) {\n        this.i18n = i18n;\n        this.hasTimePicker = false;\n        this.clickToday = new EventEmitter();\n        this.prefixCls = 'ant-calendar';\n        this.isDisabled = false;\n        this.now = new CandyDate();\n    }\n    Object.defineProperty(TodayButtonComponent.prototype, \"title\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.i18n.formatDate(this.now.nativeDate, 'longDate');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    TodayButtonComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () { };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    TodayButtonComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            if (changes[\"disabledDate\"]) {\n                this.isDisabled = this.disabledDate && this.disabledDate(this.now.nativeDate);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    TodayButtonComponent.prototype.onClickToday = /**\n     * @return {?}\n     */\n        function () {\n            this.clickToday.emit(this.now.clone()); // To prevent the \"now\" being modified from outside, we use clone\n        };\n    return TodayButtonComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar DATE_ROW_NUM = 6;\n/** @type {?} */\nvar DATE_COL_NUM = 7;\nvar DateTableComponent = /** @class */ /*@__PURE__*/ (function () {\n    function DateTableComponent(i18n) {\n        this.i18n = i18n;\n        this.valueChange = new EventEmitter();\n        this.dayHover = new EventEmitter();\n        this.prefixCls = 'ant-calendar';\n        this.isTemplateRef = isTemplateRef;\n        this.isNonEmptyString = isNonEmptyString;\n    }\n    /**\n     * @return {?}\n     */\n    DateTableComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () { };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    DateTableComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            if (this.isDateRealChange(changes[\"value\"]) ||\n                this.isDateRealChange(changes[\"selectedValue\"]) ||\n                this.isDateRealChange(changes[\"hoverValue\"])) {\n                this.render();\n            }\n        };\n    /**\n     * @param {?} change\n     * @return {?}\n     */\n    DateTableComponent.prototype.isDateRealChange = /**\n     * @param {?} change\n     * @return {?}\n     */\n        function (change) {\n            var _this = this;\n            if (change) {\n                /** @type {?} */\n                var previousValue_1 = change.previousValue;\n                /** @type {?} */\n                var currentValue = change.currentValue;\n                if (Array.isArray(currentValue)) {\n                    return !Array.isArray(previousValue_1) ||\n                        currentValue.length !== previousValue_1.length ||\n                        currentValue.some(function (value, index) { return !_this.isSameDate(previousValue_1[index], value); });\n                }\n                else {\n                    return !this.isSameDate(/** @type {?} */ (previousValue_1), currentValue);\n                }\n            }\n            return false;\n        };\n    /**\n     * @param {?} left\n     * @param {?} right\n     * @return {?}\n     */\n    DateTableComponent.prototype.isSameDate = /**\n     * @param {?} left\n     * @param {?} right\n     * @return {?}\n     */\n        function (left, right) {\n            return (!left && !right) || (left && right && right.isSame(left, 'day'));\n        };\n    /**\n     * @return {?}\n     */\n    DateTableComponent.prototype.render = /**\n     * @return {?}\n     */\n        function () {\n            if (this.value) {\n                this.headWeekDays = this.makeHeadWeekDays();\n                this.weekRows = this.makeWeekRows();\n            }\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DateTableComponent.prototype.changeValueFromInside = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            if (this.value !== value) {\n                // this.value = value;\n                // this.valueChange.emit(this.value);\n                // this.render();\n                this.valueChange.emit(value);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    DateTableComponent.prototype.makeHeadWeekDays = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var weekDays = [];\n            /** @type {?} */\n            var firstDayOfWeek = this.getFirstDayOfWeek();\n            for (var colIndex = 0; colIndex < DATE_COL_NUM; colIndex++) {\n                /** @type {?} */\n                var day = (firstDayOfWeek + colIndex) % DATE_COL_NUM;\n                /** @type {?} */\n                var tempDate = this.value.setDay(day);\n                weekDays[colIndex] = {\n                    short: this.i18n.formatDate(tempDate.nativeDate, 'E'),\n                    // eg. Tue\n                    veryShort: this.i18n.formatDate(tempDate.nativeDate, this.getVeryShortWeekFormat()) // eg. Tu\n                };\n            }\n            return weekDays;\n        };\n    /**\n     * @return {?}\n     */\n    DateTableComponent.prototype.getVeryShortWeekFormat = /**\n     * @return {?}\n     */\n        function () {\n            return this.i18n.getLocaleId().toLowerCase().indexOf('zh') === 0 ? 'EEEEE' : 'EEEEEE'; // Use extreme short for chinese\n        };\n    /**\n     * @return {?}\n     */\n    DateTableComponent.prototype.makeWeekRows = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            var _a;\n            /** @type {?} */\n            var weekRows = [];\n            /** @type {?} */\n            var firstDayOfWeek = this.getFirstDayOfWeek();\n            /** @type {?} */\n            var firstDateOfMonth = this.value.setDate(1);\n            /** @type {?} */\n            var firstDateOffset = (firstDateOfMonth.getDay() + 7 - firstDayOfWeek) % 7;\n            /** @type {?} */\n            var firstDateToShow = firstDateOfMonth.addDays(0 - firstDateOffset);\n            /** @type {?} */\n            var increased = 0;\n            for (var rowIndex = 0; rowIndex < DATE_ROW_NUM; rowIndex++) {\n                /** @type {?} */\n                var week = weekRows[rowIndex] = {\n                    isActive: false,\n                    isCurrent: false,\n                    dateCells: []\n                };\n                var _loop_1 = function (colIndex) {\n                    var _a;\n                    /** @type {?} */\n                    var current = firstDateToShow.addDays(increased++);\n                    /** @type {?} */\n                    var isBeforeMonthYear = this_1.isBeforeMonthYear(current, this_1.value);\n                    /** @type {?} */\n                    var isAfterMonthYear = this_1.isAfterMonthYear(current, this_1.value);\n                    /** @type {?} */\n                    var cell = {\n                        value: current,\n                        isSelected: false,\n                        isDisabled: false,\n                        isToday: false,\n                        title: this_1.getDateTitle(current),\n                        customContent: valueFunctionProp(this_1.dateRender, current),\n                        // Customized content\n                        content: \"\" + current.getDate(),\n                        onClick: function () { return _this.changeValueFromInside(current); },\n                        onMouseEnter: function () { return _this.dayHover.emit(cell.value); }\n                    };\n                    if (this_1.showWeek && !week.weekNum) {\n                        week.weekNum = this_1.getWeekNum(current);\n                    }\n                    if (current.isToday()) {\n                        cell.isToday = true;\n                        week.isCurrent = true;\n                    }\n                    if (Array.isArray(this_1.selectedValue) && !isBeforeMonthYear && !isAfterMonthYear) { // Range selections\n                        /** @type {?} */\n                        var rangeValue = this_1.hoverValue && this_1.hoverValue.length ? this_1.hoverValue : this_1.selectedValue;\n                        /** @type {?} */\n                        var start = rangeValue[0];\n                        /** @type {?} */\n                        var end = rangeValue[1];\n                        if (start) {\n                            if (current.isSame(start, 'day')) {\n                                cell.isSelectedStartDate = true;\n                                cell.isSelected = true;\n                                week.isActive = true;\n                            }\n                            if (end) {\n                                if (current.isSame(end, 'day')) {\n                                    cell.isSelectedEndDate = true;\n                                    cell.isSelected = true;\n                                    week.isActive = true;\n                                }\n                                else if (current.isAfter(start, 'day') && current.isBefore(end, 'day')) {\n                                    cell.isInRange = true;\n                                }\n                            }\n                        }\n                    }\n                    else if (current.isSame(this_1.value, 'day')) {\n                        cell.isSelected = true;\n                        week.isActive = true;\n                    }\n                    if (this_1.disabledDate && this_1.disabledDate(current.nativeDate)) {\n                        cell.isDisabled = true;\n                    }\n                    cell.classMap = (_a = {},\n                        _a[this_1.prefixCls + \"-cell\"] = true,\n                        // [`${this.prefixCls}-selected-date`]: false,\n                        _a[this_1.prefixCls + \"-today\"] = cell.isToday,\n                        _a[this_1.prefixCls + \"-last-month-cell\"] = isBeforeMonthYear,\n                        _a[this_1.prefixCls + \"-next-month-btn-day\"] = isAfterMonthYear,\n                        _a[this_1.prefixCls + \"-selected-day\"] = cell.isSelected,\n                        _a[this_1.prefixCls + \"-disabled-cell\"] = cell.isDisabled,\n                        _a[this_1.prefixCls + \"-selected-start-date\"] = !!cell.isSelectedStartDate,\n                        _a[this_1.prefixCls + \"-selected-end-date\"] = !!cell.isSelectedEndDate,\n                        _a[this_1.prefixCls + \"-in-range-cell\"] = !!cell.isInRange,\n                        _a);\n                    week.dateCells.push(cell);\n                };\n                var this_1 = this;\n                for (var colIndex = 0; colIndex < DATE_COL_NUM; colIndex++) {\n                    _loop_1(colIndex);\n                }\n                week.classMap = (_a = {},\n                    _a[this.prefixCls + \"-current-week\"] = week.isCurrent,\n                    _a[this.prefixCls + \"-active-week\"] = week.isActive,\n                    _a);\n            }\n            return weekRows;\n        };\n    /**\n     * @return {?}\n     */\n    DateTableComponent.prototype.getFirstDayOfWeek = /**\n     * @return {?}\n     */\n        function () {\n            return this.value.firstDayOfWeek(this.i18n.getLocaleId());\n        };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    DateTableComponent.prototype.getDateTitle = /**\n     * @param {?} date\n     * @return {?}\n     */\n        function (date) {\n            return this.i18n.formatDate(date.nativeDate, 'longDate');\n        };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    DateTableComponent.prototype.getWeekNum = /**\n     * @param {?} date\n     * @return {?}\n     */\n        function (date) {\n            return +this.i18n.formatDate(date.nativeDate, 'w');\n        };\n    /**\n     * @param {?} current\n     * @param {?} target\n     * @return {?}\n     */\n    DateTableComponent.prototype.isBeforeMonthYear = /**\n     * @param {?} current\n     * @param {?} target\n     * @return {?}\n     */\n        function (current, target) {\n            if (current.getYear() < target.getYear()) {\n                return true;\n            }\n            return current.getYear() === target.getYear() && current.getMonth() < target.getMonth();\n        };\n    /**\n     * @param {?} current\n     * @param {?} target\n     * @return {?}\n     */\n    DateTableComponent.prototype.isAfterMonthYear = /**\n     * @param {?} current\n     * @param {?} target\n     * @return {?}\n     */\n        function (current, target) {\n            if (current.getYear() > target.getYear()) {\n                return true;\n            }\n            return current.getYear() === target.getYear() && current.getMonth() > target.getMonth();\n        };\n    return DateTableComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar MAX_ROW = 4;\n/** @type {?} */\nvar MAX_COL = 3;\nvar DecadePanelComponent = /** @class */ /*@__PURE__*/ (function () {\n    function DecadePanelComponent() {\n        this.valueChange = new EventEmitter();\n        this.prefixCls = 'ant-calendar-decade-panel';\n    }\n    Object.defineProperty(DecadePanelComponent.prototype, \"startYear\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return parseInt(\"\" + this.value.getYear() / 100, 10) * 100;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DecadePanelComponent.prototype, \"endYear\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.startYear + 99;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    DecadePanelComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            if (changes[\"value\"]) {\n                this.render();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    DecadePanelComponent.prototype.previousCentury = /**\n     * @return {?}\n     */\n        function () {\n            this.gotoYear(-100);\n        };\n    /**\n     * @return {?}\n     */\n    DecadePanelComponent.prototype.nextCentury = /**\n     * @return {?}\n     */\n        function () {\n            this.gotoYear(100);\n        };\n    /**\n     * @param {?} index\n     * @param {?} decadeData\n     * @return {?}\n     */\n    DecadePanelComponent.prototype.trackPanelDecade = /**\n     * @param {?} index\n     * @param {?} decadeData\n     * @return {?}\n     */\n        function (index, decadeData) {\n            return decadeData.content;\n        };\n    /**\n     * @return {?}\n     */\n    DecadePanelComponent.prototype.render = /**\n     * @return {?}\n     */\n        function () {\n            if (this.value) {\n                this.panelDecades = this.makePanelDecades();\n            }\n        };\n    /**\n     * @param {?} amount\n     * @return {?}\n     */\n    DecadePanelComponent.prototype.gotoYear = /**\n     * @param {?} amount\n     * @return {?}\n     */\n        function (amount) {\n            this.value = this.value.addYears(amount);\n            // this.valueChange.emit(this.value); // Do not try to trigger final value change\n            this.render();\n        };\n    /**\n     * @param {?} startYear\n     * @return {?}\n     */\n    DecadePanelComponent.prototype.chooseDecade = /**\n     * @param {?} startYear\n     * @return {?}\n     */\n        function (startYear) {\n            this.value = this.value.setYear(startYear);\n            this.valueChange.emit(this.value);\n        };\n    /**\n     * @return {?}\n     */\n    DecadePanelComponent.prototype.makePanelDecades = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            /** @type {?} */\n            var decades = [];\n            /** @type {?} */\n            var currentYear = this.value.getYear();\n            /** @type {?} */\n            var startYear = this.startYear;\n            /** @type {?} */\n            var endYear = this.endYear;\n            /** @type {?} */\n            var previousYear = startYear - 10;\n            /** @type {?} */\n            var index = 0;\n            for (var rowIndex = 0; rowIndex < MAX_ROW; rowIndex++) {\n                decades[rowIndex] = [];\n                var _loop_1 = function (colIndex) {\n                    var _a;\n                    /** @type {?} */\n                    var start = previousYear + index * 10;\n                    /** @type {?} */\n                    var end = previousYear + index * 10 + 9;\n                    /** @type {?} */\n                    var content = start + \"-\" + end;\n                    /** @type {?} */\n                    var cell = decades[rowIndex][colIndex] = {\n                        content: content,\n                        title: content,\n                        isCurrent: currentYear >= start && currentYear <= end,\n                        isLowerThanStart: end < startYear,\n                        isBiggerThanEnd: start > endYear,\n                        classMap: null,\n                        onClick: null\n                    };\n                    cell.classMap = (_a = {},\n                        _a[this_1.prefixCls + \"-cell\"] = true,\n                        _a[this_1.prefixCls + \"-selected-cell\"] = cell.isCurrent,\n                        _a[this_1.prefixCls + \"-last-century-cell\"] = cell.isLowerThanStart,\n                        _a[this_1.prefixCls + \"-next-century-cell\"] = cell.isBiggerThanEnd,\n                        _a);\n                    if (cell.isLowerThanStart) {\n                        cell.onClick = function () { return _this.previousCentury(); };\n                    }\n                    else if (cell.isBiggerThanEnd) {\n                        cell.onClick = function () { return _this.nextCentury(); };\n                    }\n                    else {\n                        cell.onClick = function () { return _this.chooseDecade(start); };\n                    }\n                    index++;\n                };\n                var this_1 = this;\n                for (var colIndex = 0; colIndex < MAX_COL; colIndex++) {\n                    _loop_1(colIndex);\n                }\n            }\n            return decades;\n        };\n    return DecadePanelComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MonthPanelComponent = /** @class */ /*@__PURE__*/ (function () {\n    function MonthPanelComponent() {\n        this.valueChange = new EventEmitter();\n        this.yearPanelShow = new EventEmitter();\n        this.prefixCls = 'ant-calendar-month-panel';\n    }\n    /**\n     * @return {?}\n     */\n    MonthPanelComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () { };\n    /**\n     * @return {?}\n     */\n    MonthPanelComponent.prototype.previousYear = /**\n     * @return {?}\n     */\n        function () {\n            this.gotoYear(-1);\n        };\n    /**\n     * @return {?}\n     */\n    MonthPanelComponent.prototype.nextYear = /**\n     * @return {?}\n     */\n        function () {\n            this.gotoYear(1);\n        };\n    /**\n     * @param {?} amount\n     * @return {?}\n     */\n    MonthPanelComponent.prototype.gotoYear = /**\n     * @param {?} amount\n     * @return {?}\n     */\n        function (amount) {\n            this.value = this.value.addYears(amount);\n            // this.valueChange.emit(this.value); // Do not try to trigger final value change\n        };\n    return MonthPanelComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar MAX_ROW$1 = 4;\n/** @type {?} */\nvar MAX_COL$1 = 3;\nvar MonthTableComponent = /** @class */ /*@__PURE__*/ (function () {\n    function MonthTableComponent(i18n) {\n        this.i18n = i18n;\n        this.valueChange = new EventEmitter();\n        this.prefixCls = 'ant-calendar-month-panel';\n    }\n    /**\n     * @return {?}\n     */\n    MonthTableComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () { };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MonthTableComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            if (changes[\"value\"] || changes[\"disabledDate\"]) {\n                this.render();\n            }\n        };\n    /**\n     * @param {?} index\n     * @param {?} monthData\n     * @return {?}\n     */\n    MonthTableComponent.prototype.trackPanelMonth = /**\n     * @param {?} index\n     * @param {?} monthData\n     * @return {?}\n     */\n        function (index, monthData) {\n            return monthData.month;\n        };\n    /**\n     * @return {?}\n     */\n    MonthTableComponent.prototype.render = /**\n     * @return {?}\n     */\n        function () {\n            if (this.value) {\n                this.panelMonths = this.makePanelMonths();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    MonthTableComponent.prototype.makePanelMonths = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            /** @type {?} */\n            var months = [];\n            /** @type {?} */\n            var currentMonth = this.value.getMonth();\n            /** @type {?} */\n            var today = new CandyDate();\n            /** @type {?} */\n            var monthValue = 0;\n            for (var rowIndex = 0; rowIndex < MAX_ROW$1; rowIndex++) {\n                months[rowIndex] = [];\n                var _loop_1 = function (colIndex) {\n                    var _a;\n                    /** @type {?} */\n                    var month = this_1.value.setMonth(monthValue);\n                    /** @type {?} */\n                    var disabled = this_1.disabledDate ? this_1.disabledDate(this_1.value.setMonth(monthValue).nativeDate) : false;\n                    /** @type {?} */\n                    var content = this_1.i18n.formatDateCompatible(month.nativeDate, 'MMM');\n                    /** @type {?} */\n                    var cell = months[rowIndex][colIndex] = {\n                        disabled: disabled,\n                        content: content,\n                        month: monthValue,\n                        title: content,\n                        classMap: null,\n                        onClick: function () { return _this.chooseMonth(cell.month); }\n                    };\n                    cell.classMap = (_a = {},\n                        _a[this_1.prefixCls + \"-cell\"] = true,\n                        _a[this_1.prefixCls + \"-cell-disabled\"] = disabled,\n                        _a[this_1.prefixCls + \"-selected-cell\"] = cell.month === currentMonth,\n                        _a[this_1.prefixCls + \"-current-cell\"] = today.getYear() === this_1.value.getYear() && cell.month === today.getMonth(),\n                        _a);\n                    monthValue++;\n                };\n                var this_1 = this;\n                for (var colIndex = 0; colIndex < MAX_COL$1; colIndex++) {\n                    _loop_1(colIndex);\n                }\n            }\n            return months;\n        };\n    /**\n     * @param {?} month\n     * @return {?}\n     */\n    MonthTableComponent.prototype.chooseMonth = /**\n     * @param {?} month\n     * @return {?}\n     */\n        function (month) {\n            this.value = this.value.setMonth(month);\n            this.valueChange.emit(this.value);\n            this.render();\n        };\n    return MonthTableComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar defaultDisabledTime = {\n    nzDisabledHours: /**\n     * @return {?}\n     */ function () {\n        return [];\n    },\n    nzDisabledMinutes: /**\n     * @return {?}\n     */ function () {\n        return [];\n    },\n    nzDisabledSeconds: /**\n     * @return {?}\n     */ function () {\n        return [];\n    }\n};\n/**\n * @param {?} value\n * @param {?} disabledTime\n * @return {?}\n */\nfunction getTimeConfig(value, disabledTime) {\n    /** @type {?} */\n    var disabledTimeConfig = disabledTime ? disabledTime(value && value.nativeDate) : /** @type {?} */ ({});\n    disabledTimeConfig = __assign({}, defaultDisabledTime, disabledTimeConfig);\n    return disabledTimeConfig;\n}\n/**\n * @param {?} value\n * @param {?} disabledTimeConfig\n * @return {?}\n */\nfunction isTimeValidByConfig(value, disabledTimeConfig) {\n    /** @type {?} */\n    var invalidTime = false;\n    if (value) {\n        /** @type {?} */\n        var hour = value.getHours();\n        /** @type {?} */\n        var minutes = value.getMinutes();\n        /** @type {?} */\n        var seconds = value.getSeconds();\n        /** @type {?} */\n        var disabledHours = disabledTimeConfig.nzDisabledHours();\n        if (disabledHours.indexOf(hour) === -1) {\n            /** @type {?} */\n            var disabledMinutes = disabledTimeConfig.nzDisabledMinutes(hour);\n            if (disabledMinutes.indexOf(minutes) === -1) {\n                /** @type {?} */\n                var disabledSeconds = disabledTimeConfig.nzDisabledSeconds(hour, minutes);\n                invalidTime = disabledSeconds.indexOf(seconds) !== -1;\n            }\n            else {\n                invalidTime = true;\n            }\n        }\n        else {\n            invalidTime = true;\n        }\n    }\n    return !invalidTime;\n}\n/**\n * @param {?} value\n * @param {?} disabledTime\n * @return {?}\n */\nfunction isTimeValid(value, disabledTime) {\n    /** @type {?} */\n    var disabledTimeConfig = getTimeConfig(value, disabledTime);\n    return isTimeValidByConfig(value, disabledTimeConfig);\n}\n/**\n * @param {?} value\n * @param {?=} disabledDate\n * @param {?=} disabledTime\n * @return {?}\n */\nfunction isAllowedDate(value, disabledDate, disabledTime) {\n    if (disabledDate) {\n        if (disabledDate(value.nativeDate)) {\n            return false;\n        }\n    }\n    if (disabledTime) {\n        if (!isTimeValid(value, disabledTime)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar DateRangePopupComponent = /** @class */ /*@__PURE__*/ (function () {\n    function DateRangePopupComponent() {\n        var _this = this;\n        this.panelModeChange = new EventEmitter();\n        this.valueChange = new EventEmitter();\n        this.resultOk = new EventEmitter();\n        this.closePicker = new EventEmitter();\n        // @Output() selectDate = new EventEmitter<CandyDate>(); // Emitted when the date is selected by click the date panel (if isRange, the returned date is from one of the range parts)\n        this.prefixCls = 'ant-calendar';\n        this.showTimePicker = false;\n        this.partTypeMap = { 'left': 0, 'right': 1 };\n        this.disabledStartTime = function (value) {\n            return _this.disabledTime && _this.disabledTime(value, 'start');\n        };\n        this.disabledEndTime = function (value) {\n            return _this.disabledTime && _this.disabledTime(value, 'end');\n        };\n    }\n    Object.defineProperty(DateRangePopupComponent.prototype, \"hasTimePicker\", {\n        // initialValue: CandyDate = new CandyDate(); // Initial date to show when no value inputs\n        // get valueOrInitial(): CandyDate {\n        //   return this.value || this.initialValue;\n        // }\n        get: /**\n         * @return {?}\n         */ function () {\n            return !!this.showTime;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateRangePopupComponent.prototype, \"hasFooter\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.showToday || this.hasTimePicker || !!this.extraFooter || !!this.ranges;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            // Initialization for range properties to prevent errors while later assignment\n            if (this.isRange) {\n                ['placeholder', 'panelMode', 'selectedValue', 'hoverValue'].forEach(function (prop) { return _this.initialArray(prop); });\n            }\n        };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            if (this.isRange) {\n                if (changes[\"value\"]) { // Re-initialize all related values\n                    // Re-initialize all related values\n                    this.clearHoverValue();\n                    this.selectedValue = /** @type {?} */ (this.value);\n                    this.valueForRangeShow = this.normalizeRangeValue(/** @type {?} */ (this.value));\n                }\n            }\n            // Parse showTime options\n            if (changes[\"showTime\"] || changes[\"disabledTime\"]) {\n                if (this.showTime) {\n                    this.buildTimeOptions();\n                }\n            }\n            // Show time picker when assigned panel mode as \"time\"\n            if (changes[\"panelMode\"] && this.hasTimePicker) {\n                this.showTimePicker = this.panelMode === 'time';\n            }\n        };\n    /**\n     * @param {?} show\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.onShowTimePickerChange = /**\n     * @param {?} show\n     * @return {?}\n     */\n        function (show) {\n            // this.panelMode = show ? 'time' : 'date';\n            // this.panelModeChange.emit(this.panelMode);\n            this.panelModeChange.emit(show ? 'time' : 'date');\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.onClickToday = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            // if (this.isRange) { // Show today is not support by range\n            //   throw new Error('\"nzShowToday\" is not support for \"RangePicker\"!');\n            // } else {\n            if (!this.isRange) {\n                this.value = null; // Clear current value to not sync time by next step\n                this.changeValue(value);\n            }\n            this.closePickerPanel();\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.onDayHover = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            if (this.isRange && this.selectedValue[0] && !this.selectedValue[1]) { // When right value is selected, don't do hover\n                /** @type {?} */\n                var base = this.selectedValue[0]; // Use the left of selected value as the base to decide later hoverValue\n                if (base.isBefore(value, 'day')) {\n                    this.hoverValue = [base, value];\n                }\n                else {\n                    this.hoverValue = [value, base];\n                }\n            }\n        };\n    /**\n     * @param {?} mode\n     * @param {?=} partType\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.onPanelModeChange = /**\n     * @param {?} mode\n     * @param {?=} partType\n     * @return {?}\n     */\n        function (mode, partType) {\n            if (this.isRange) {\n                ( /** @type {?} */(this.panelMode))[this.getPartTypeIndex(partType)] = mode;\n            }\n            else {\n                this.panelMode = mode;\n            }\n            this.panelModeChange.emit(this.panelMode);\n        };\n    /**\n     * @param {?} value\n     * @param {?=} partType\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.onHeaderChange = /**\n     * @param {?} value\n     * @param {?=} partType\n     * @return {?}\n     */\n        function (value, partType) {\n            if (this.isRange) {\n                this.valueForRangeShow[this.getPartTypeIndex(partType)] = value;\n                this.valueForRangeShow = this.normalizeRangeValue(this.valueForRangeShow); // Should always take care of start/end\n            }\n        };\n    /**\n     * @param {?} value\n     * @param {?=} partType\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.onSelectTime = /**\n     * @param {?} value\n     * @param {?=} partType\n     * @return {?}\n     */\n        function (value, partType) {\n            if (this.isRange) {\n                /** @type {?} */\n                var newValue = this.cloneRangeDate(/** @type {?} */ (this.value));\n                /** @type {?} */\n                var index = this.getPartTypeIndex(partType);\n                newValue[index] = this.overrideHms(value, newValue[index]);\n                this.setValue(newValue);\n            }\n            else {\n                this.setValue(this.overrideHms(value, ( /** @type {?} */(this.value)) || new CandyDate())); // If not select a date currently, use today\n            }\n        };\n    /**\n     * @param {?} value\n     * @param {?=} partType\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.changeValue = /**\n     * @param {?} value\n     * @param {?=} partType\n     * @return {?}\n     */\n        function (value, partType) {\n            if (this.isRange) {\n                /** @type {?} */\n                var index = this.getPartTypeIndex(partType);\n                this.selectedValue[index] = value;\n                if (this.isValidRange(this.selectedValue)) {\n                    this.valueForRangeShow = this.normalizeRangeValue(this.selectedValue);\n                    this.setValue(this.cloneRangeDate(this.selectedValue));\n                }\n            }\n            else {\n                this.setValue(value);\n            }\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.changeValueFromSelect = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            if (this.isRange) {\n                var _a = __read(/** @type {?} */ (this.selectedValue), 2), left = _a[0], right = _a[1]; // NOTE: the left/right maybe not the sequence it select at the date panels\n                if ((!left && !right) || (left && right)) { // If totally full or empty, clean up && re-assign left first\n                    // If totally full or empty, clean up && re-assign left first\n                    this.hoverValue = this.selectedValue = [value];\n                }\n                else if (left && !right) { // If one of them is empty, assign the other one and sort, then set the final values\n                    // If one of them is empty, assign the other one and sort, then set the final values\n                    this.clearHoverValue(); // Clean up\n                    this.setRangeValue('selectedValue', 'right', value);\n                    this.sortRangeValue('selectedValue'); // Sort\n                    this.valueForRangeShow = this.normalizeRangeValue(this.selectedValue);\n                    this.setValue(this.cloneRangeDate(this.selectedValue));\n                }\n            }\n            else {\n                this.setValue(value);\n            }\n            // this.selectDate.emit(value);\n        };\n    /**\n     * @param {?} direction\n     * @param {?=} partType\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.enablePrevNext = /**\n     * @param {?} direction\n     * @param {?=} partType\n     * @return {?}\n     */\n        function (direction, partType) {\n            if (this.isRange) {\n                var _a = __read(this.valueForRangeShow, 2), start = _a[0], end = _a[1];\n                /** @type {?} */\n                var showMiddle = !start.addMonths(1).isSame(end, 'month'); // One month diff then don't show middle prev/next\n                if ((partType === 'left' && direction === 'next') || (partType === 'right' && direction === 'prev')) {\n                    return showMiddle;\n                }\n                return true;\n            }\n            else {\n                return true;\n            }\n        };\n    /**\n     * @param {?=} partType\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.getPanelMode = /**\n     * @param {?=} partType\n     * @return {?}\n     */\n        function (partType) {\n            if (this.isRange) {\n                return /** @type {?} */ (this.panelMode[this.getPartTypeIndex(partType)]);\n            }\n            else {\n                return /** @type {?} */ (this.panelMode);\n            }\n        };\n    // Get single value or part value of a range\n    /**\n     * @param {?=} partType\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.getValue = /**\n     * @param {?=} partType\n     * @return {?}\n     */\n        function (partType) {\n            if (this.isRange) {\n                return this.value[this.getPartTypeIndex(partType)];\n            }\n            else {\n                return /** @type {?} */ (this.value);\n            }\n        };\n    /**\n     * @param {?=} partType\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.getValueBySelector = /**\n     * @param {?=} partType\n     * @return {?}\n     */\n        function (partType) {\n            if (this.isRange) {\n                /** @type {?} */\n                var valueShow = this.showTimePicker ? this.value : this.valueForRangeShow; // Use the real time value that without decorations when timepicker is shown up\n                return valueShow[this.getPartTypeIndex(partType)];\n            }\n            else {\n                return /** @type {?} */ (this.value);\n            }\n        };\n    /**\n     * @param {?} partType\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.getPartTypeIndex = /**\n     * @param {?} partType\n     * @return {?}\n     */\n        function (partType) {\n            return this.partTypeMap[partType];\n        };\n    /**\n     * @param {?=} partType\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.getPlaceholder = /**\n     * @param {?=} partType\n     * @return {?}\n     */\n        function (partType) {\n            return this.isRange ? this.placeholder[this.getPartTypeIndex(partType)] : /** @type {?} */ (this.placeholder);\n        };\n    /**\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.hasSelectedValue = /**\n     * @return {?}\n     */\n        function () {\n            return this.selectedValue && !!this.selectedValue[1] && !!this.selectedValue[0];\n        };\n    /**\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.isAllowedSelectedValue = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var selectedValue = this.selectedValue;\n            if (selectedValue && selectedValue[0] && selectedValue[1]) {\n                return isAllowedDate(selectedValue[0], this.disabledDate, this.disabledStartTime) &&\n                    isAllowedDate(selectedValue[1], this.disabledDate, this.disabledEndTime);\n            }\n            return false;\n        };\n    /**\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.timePickerDisabled = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.hasTimePicker) {\n                return true;\n            }\n            if (this.isRange) {\n                return !this.hasSelectedValue() || !!this.hoverValue.length;\n            }\n            else {\n                return false;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.okDisabled = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.hasTimePicker) {\n                return true;\n            }\n            if (this.isRange) {\n                return !this.isAllowedSelectedValue() || !this.hasSelectedValue() || !!this.hoverValue.length;\n            }\n            else {\n                return this.value ? !isAllowedDate(/** @type {?} */ (this.value), this.disabledDate, this.disabledTime) : false;\n            }\n        };\n    /**\n     * @param {?=} partType\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.getTimeOptions = /**\n     * @param {?=} partType\n     * @return {?}\n     */\n        function (partType) {\n            if (this.showTime && this.timeOptions) {\n                return this.isRange ? this.timeOptions[this.getPartTypeIndex(partType)] : this.timeOptions;\n            }\n            return null;\n        };\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.onClickPresetRange = /**\n     * @param {?} val\n     * @return {?}\n     */\n        function (val) {\n            /** @type {?} */\n            var value = valueFunctionProp(val);\n            this.setValue([new CandyDate(value[0]), new CandyDate(value[1])]);\n            this.resultOk.emit();\n        };\n    /**\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.onPresetRangeMouseLeave = /**\n     * @return {?}\n     */\n        function () {\n            this.clearHoverValue();\n        };\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.onHoverPresetRange = /**\n     * @param {?} val\n     * @return {?}\n     */\n        function (val) {\n            this.hoverValue = ([new CandyDate(val[0]), new CandyDate(val[1])]);\n        };\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.getObjectKeys = /**\n     * @param {?} obj\n     * @return {?}\n     */\n        function (obj) {\n            return obj ? Object.keys(obj) : [];\n        };\n    /**\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.closePickerPanel = /**\n     * @return {?}\n     */\n        function () {\n            this.closePicker.emit();\n        };\n    /**\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.clearHoverValue = /**\n     * @return {?}\n     */\n        function () {\n            this.hoverValue = [];\n        };\n    /**\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.buildTimeOptions = /**\n     * @return {?}\n     */\n        function () {\n            if (this.showTime) {\n                /** @type {?} */\n                var showTime = typeof this.showTime === 'object' ? this.showTime : {};\n                if (this.isRange) {\n                    this.timeOptions = [this.overrideTimeOptions(showTime, this.value[0], 'start'), this.overrideTimeOptions(showTime, this.value[1], 'end')];\n                }\n                else {\n                    this.timeOptions = this.overrideTimeOptions(showTime, /** @type {?} */ (this.value));\n                }\n            }\n            else {\n                this.timeOptions = null;\n            }\n        };\n    /**\n     * @param {?} origin\n     * @param {?} value\n     * @param {?=} partial\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.overrideTimeOptions = /**\n     * @param {?} origin\n     * @param {?} value\n     * @param {?=} partial\n     * @return {?}\n     */\n        function (origin, value, partial) {\n            /** @type {?} */\n            var disabledTimeFn;\n            if (partial) {\n                disabledTimeFn = partial === 'start' ? this.disabledStartTime : this.disabledEndTime;\n            }\n            else {\n                disabledTimeFn = this.disabledTime;\n            }\n            return __assign({}, origin, getTimeConfig(value, disabledTimeFn));\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.setValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            /** @type {?} */\n            var newValue = value;\n            // TODO: Sync original time (NOTE: this should take more care of beacuse it may depend on many change sources)\n            // if (this.isRange) {\n            //   // TODO: Sync time\n            // } else {\n            //   if (this.value) { // Sync time from the original one if it's available\n            //     newValue = this.overrideHms(this.value as CandyDate, newValue as CandyDate);\n            //   }\n            // }\n            this.value = newValue;\n            this.valueChange.emit(this.value);\n            this.buildTimeOptions();\n        };\n    /**\n     * @param {?} from\n     * @param {?} to\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.overrideHms = /**\n     * @param {?} from\n     * @param {?} to\n     * @return {?}\n     */\n        function (from, to) {\n            if (!from || !to) {\n                return null;\n            }\n            return to.setHms(from.getHours(), from.getMinutes(), from.getSeconds());\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.isValidRange = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            if (Array.isArray(value)) {\n                var _a = __read(value, 2), start = _a[0], end = _a[1];\n                /** @type {?} */\n                var grain = this.hasTimePicker ? 'second' : 'day';\n                return start && end && (start.isBefore(end, grain) || start.isSame(end, grain));\n            }\n            return false;\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.normalizeRangeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            var _a = __read(value, 2), start = _a[0], end = _a[1];\n            /** @type {?} */\n            var newStart = start || new CandyDate();\n            /** @type {?} */\n            var newEnd = end && end.isSame(newStart, 'month') ? end.addMonths(1) : end || newStart.addMonths(1);\n            return [newStart, newEnd];\n        };\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.sortRangeValue = /**\n     * @param {?} key\n     * @return {?}\n     */\n        function (key) {\n            if (Array.isArray(this[key])) {\n                var _a = __read(this[key], 2), start = _a[0], end = _a[1];\n                if (start && end && start.isAfter(end, 'day')) {\n                    this[key] = [end, start];\n                }\n            }\n        };\n    /**\n     * @param {?} key\n     * @param {?} partType\n     * @param {?} value\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.setRangeValue = /**\n     * @param {?} key\n     * @param {?} partType\n     * @param {?} value\n     * @return {?}\n     */\n        function (key, partType, value) {\n            /** @type {?} */\n            var ref = this[key] = this.cloneRangeDate(/** @type {?} */ (this[key]));\n            ref[this.getPartTypeIndex(partType)] = value;\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.cloneRangeDate = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            return /** @type {?} */ ([value[0] && value[0].clone(), value[1] && value[1].clone()]);\n        };\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    DateRangePopupComponent.prototype.initialArray = /**\n     * @param {?} key\n     * @return {?}\n     */\n        function (key) {\n            if (!this[key] || !Array.isArray(this[key])) {\n                this[key] = [];\n            }\n        };\n    return DateRangePopupComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar InnerPopupComponent = /** @class */ /*@__PURE__*/ (function () {\n    function InnerPopupComponent() {\n        this.panelModeChange = new EventEmitter();\n        this.headerChange = new EventEmitter();\n        this.selectDate = new EventEmitter();\n        this.selectTime = new EventEmitter();\n        this.dayHover = new EventEmitter();\n        this.prefixCls = 'ant-calendar';\n    }\n    /**\n     * @return {?}\n     */\n    InnerPopupComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () { };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    InnerPopupComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            if (changes[\"value\"] && !this.value) {\n                this.value = new CandyDate();\n            }\n        };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    InnerPopupComponent.prototype.onSelectTime = /**\n     * @param {?} date\n     * @return {?}\n     */\n        function (date) {\n            this.selectTime.emit(new CandyDate(date));\n        };\n    // The value real changed to outside\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    InnerPopupComponent.prototype.onSelectDate = /**\n     * @param {?} date\n     * @return {?}\n     */\n        function (date) {\n            /** @type {?} */\n            var value = date instanceof CandyDate ? date : new CandyDate(date);\n            this.selectDate.emit(value);\n        };\n    return InnerPopupComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar MAX_ROW$2 = 4;\n/** @type {?} */\nvar MAX_COL$2 = 3;\nvar YearPanelComponent = /** @class */ /*@__PURE__*/ (function () {\n    function YearPanelComponent() {\n        this.valueChange = new EventEmitter();\n        this.decadePanelShow = new EventEmitter();\n        this.prefixCls = 'ant-calendar-year-panel';\n    }\n    Object.defineProperty(YearPanelComponent.prototype, \"currentYear\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.value.getYear();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(YearPanelComponent.prototype, \"startYear\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return parseInt(\"\" + this.currentYear / 10, 10) * 10;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(YearPanelComponent.prototype, \"endYear\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.startYear + 9;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    YearPanelComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            if (changes[\"value\"]) {\n                this.render();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    YearPanelComponent.prototype.previousDecade = /**\n     * @return {?}\n     */\n        function () {\n            this.gotoYear(-10);\n        };\n    /**\n     * @return {?}\n     */\n    YearPanelComponent.prototype.nextDecade = /**\n     * @return {?}\n     */\n        function () {\n            this.gotoYear(10);\n        };\n    /**\n     * @param {?} index\n     * @param {?} yearData\n     * @return {?}\n     */\n    YearPanelComponent.prototype.trackPanelYear = /**\n     * @param {?} index\n     * @param {?} yearData\n     * @return {?}\n     */\n        function (index, yearData) {\n            return yearData.content;\n        };\n    /**\n     * @return {?}\n     */\n    YearPanelComponent.prototype.render = /**\n     * @return {?}\n     */\n        function () {\n            if (this.value) {\n                this.panelYears = this.makePanelYears();\n            }\n        };\n    /**\n     * @param {?} amount\n     * @return {?}\n     */\n    YearPanelComponent.prototype.gotoYear = /**\n     * @param {?} amount\n     * @return {?}\n     */\n        function (amount) {\n            this.value = this.value.addYears(amount);\n            // this.valueChange.emit(this.value); // Do not trigger final value change\n            this.render();\n        };\n    /**\n     * @param {?} year\n     * @return {?}\n     */\n    YearPanelComponent.prototype.chooseYear = /**\n     * @param {?} year\n     * @return {?}\n     */\n        function (year) {\n            this.value = this.value.setYear(year);\n            this.valueChange.emit(this.value);\n            this.render();\n        };\n    /**\n     * @return {?}\n     */\n    YearPanelComponent.prototype.makePanelYears = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            /** @type {?} */\n            var years = [];\n            /** @type {?} */\n            var currentYear = this.currentYear;\n            /** @type {?} */\n            var startYear = this.startYear;\n            /** @type {?} */\n            var endYear = this.endYear;\n            /** @type {?} */\n            var previousYear = startYear - 1;\n            /** @type {?} */\n            var index = 0;\n            for (var rowIndex = 0; rowIndex < MAX_ROW$2; rowIndex++) {\n                years[rowIndex] = [];\n                var _loop_1 = function (colIndex) {\n                    var _a;\n                    /** @type {?} */\n                    var year = previousYear + index;\n                    /** @type {?} */\n                    var content = String(year);\n                    /** @type {?} */\n                    var cell = years[rowIndex][colIndex] = {\n                        content: content,\n                        year: year,\n                        title: content,\n                        isCurrent: year === currentYear,\n                        isLowerThanStart: year < startYear,\n                        isBiggerThanEnd: year > endYear,\n                        classMap: null,\n                        onClick: null\n                    };\n                    cell.classMap = (_a = {},\n                        _a[this_1.prefixCls + \"-cell\"] = true,\n                        _a[this_1.prefixCls + \"-selected-cell\"] = cell.isCurrent,\n                        _a[this_1.prefixCls + \"-last-decade-cell\"] = cell.isLowerThanStart,\n                        _a[this_1.prefixCls + \"-next-decade-cell\"] = cell.isBiggerThanEnd,\n                        _a);\n                    if (cell.isLowerThanStart) {\n                        cell.onClick = function () { return _this.previousDecade(); };\n                    }\n                    else if (cell.isBiggerThanEnd) {\n                        cell.onClick = function () { return _this.nextDecade(); };\n                    }\n                    else {\n                        cell.onClick = function () { return _this.chooseYear(cell.year); };\n                    }\n                    index++;\n                };\n                var this_1 = this;\n                for (var colIndex = 0; colIndex < MAX_COL$2; colIndex++) {\n                    _loop_1(colIndex);\n                }\n            }\n            return years;\n        };\n    return YearPanelComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar LibPackerModule = /** @class */ /*@__PURE__*/ (function () {\n    function LibPackerModule() {\n    }\n    return LibPackerModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzPickerComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzPickerComponent(i18n, changeDetector) {\n        this.i18n = i18n;\n        this.changeDetector = changeDetector;\n        this.isRange = false;\n        this.open = undefined;\n        this.valueChange = new EventEmitter();\n        this.openChange = new EventEmitter();\n        this.prefixCls = 'ant-calendar';\n        this.animationOpenState = false;\n        this.overlayOpen = false;\n        this.overlayOffsetY = 0;\n        this.overlayOffsetX = -2;\n        this.overlayPositions = /** @type {?} */ ([\n            {\n                // offsetX: -10, // TODO: What a pity, cdk/overlay current not support offset configs even though it already provide these properties\n                // offsetY: -10,\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top'\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom'\n            },\n            {\n                originX: 'end',\n                originY: 'top',\n                overlayX: 'end',\n                overlayY: 'top'\n            },\n            {\n                originX: 'end',\n                originY: 'bottom',\n                overlayX: 'end',\n                overlayY: 'bottom'\n            }\n        ]);\n        this.dropdownAnimation = 'bottom';\n        this.currentPositionX = 'start';\n        this.currentPositionY = 'top';\n    }\n    Object.defineProperty(NzPickerComponent.prototype, \"realOpenState\", {\n        // get valueReadable(): string {\n        //   return this.value && this.i18n.formatDateCompatible(this.value.nativeDate, this.format);\n        // }\n        get: /**\n         * @return {?}\n         */ function () {\n            // The value that really decide the open state of overlay\n            return this.isOpenHandledByUser() ? this.open : this.overlayOpen;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzPickerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    /**\n     * @return {?}\n     */\n    NzPickerComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            if (this.autoFocus) {\n                if (this.isRange) {\n                    /** @type {?} */\n                    var firstInput = /** @type {?} */ (( /** @type {?} */(this.pickerInput.nativeElement)).querySelector('input:first-child'));\n                    firstInput.focus(); // Focus on the first input\n                }\n                else {\n                    this.pickerInput.nativeElement.focus();\n                }\n            }\n        };\n    // Show overlay content\n    /**\n     * @return {?}\n     */\n    NzPickerComponent.prototype.showOverlay = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (!this.realOpenState) {\n                this.overlayOpen = true;\n                this.openChange.emit(this.overlayOpen);\n                setTimeout(function () {\n                    if (_this.cdkConnectedOverlay && _this.cdkConnectedOverlay.overlayRef) {\n                        _this.cdkConnectedOverlay.overlayRef.updatePosition();\n                    }\n                });\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzPickerComponent.prototype.hideOverlay = /**\n     * @return {?}\n     */\n        function () {\n            if (this.realOpenState) {\n                this.overlayOpen = false;\n                this.openChange.emit(this.overlayOpen);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzPickerComponent.prototype.onClickInputBox = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.disabled && !this.isOpenHandledByUser()) {\n                this.showOverlay();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzPickerComponent.prototype.onClickBackdrop = /**\n     * @return {?}\n     */\n        function () {\n            this.hideOverlay();\n        };\n    /**\n     * @return {?}\n     */\n    NzPickerComponent.prototype.onOverlayDetach = /**\n     * @return {?}\n     */\n        function () {\n            this.hideOverlay();\n        };\n    // NOTE: A issue here, the first time position change, the animation will not be triggered.\n    // Because the overlay's \"positionChange\" event is emitted after the content's full shown up.\n    // All other components like \"nz-dropdown\" which depends on overlay also has the same issue.\n    // See: https://github.com/NG-ZORRO/ng-zorro-antd/issues/1429\n    /**\n     * @param {?} position\n     * @return {?}\n     */\n    NzPickerComponent.prototype.onPositionChange = /**\n     * @param {?} position\n     * @return {?}\n     */\n        function (position) {\n            this.dropdownAnimation = position.connectionPair.originY === 'top' ? 'bottom' : 'top';\n            this.currentPositionX = /** @type {?} */ (position.connectionPair.originX);\n            this.currentPositionY = /** @type {?} */ (position.connectionPair.originY);\n            this.changeDetector.detectChanges(); // Take side-effects to position styles\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NzPickerComponent.prototype.onClickClear = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.value = this.isRange ? [] : null;\n            this.valueChange.emit(this.value);\n        };\n    /**\n     * @param {?=} partType\n     * @return {?}\n     */\n    NzPickerComponent.prototype.getReadableValue = /**\n     * @param {?=} partType\n     * @return {?}\n     */\n        function (partType) {\n            /** @type {?} */\n            var value;\n            if (this.isRange) {\n                value = this.value[this.getPartTypeIndex(partType)];\n            }\n            else {\n                value = /** @type {?} */ (this.value);\n            }\n            return value ? this.i18n.formatDateCompatible(value.nativeDate, this.format) : null;\n        };\n    /**\n     * @param {?} partType\n     * @return {?}\n     */\n    NzPickerComponent.prototype.getPartTypeIndex = /**\n     * @param {?} partType\n     * @return {?}\n     */\n        function (partType) {\n            return { 'left': 0, 'right': 1 }[partType];\n        };\n    /**\n     * @param {?=} partType\n     * @return {?}\n     */\n    NzPickerComponent.prototype.getPlaceholder = /**\n     * @param {?=} partType\n     * @return {?}\n     */\n        function (partType) {\n            return this.isRange ? this.placeholder[this.getPartTypeIndex(partType)] : /** @type {?} */ (this.placeholder);\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzPickerComponent.prototype.isEmptyValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            if (this.isRange) {\n                return !value || !Array.isArray(value) || value.every(function (val) { return !val; });\n            }\n            else {\n                return !value;\n            }\n        };\n    // Whether open state is permanently controlled by user himself\n    /**\n     * @return {?}\n     */\n    NzPickerComponent.prototype.isOpenHandledByUser = /**\n     * @return {?}\n     */\n        function () {\n            return this.open !== undefined;\n        };\n    /**\n     * @return {?}\n     */\n    NzPickerComponent.prototype.animationStart = /**\n     * @return {?}\n     */\n        function () {\n            if (this.realOpenState) {\n                this.animationOpenState = true;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzPickerComponent.prototype.animationDone = /**\n     * @return {?}\n     */\n        function () {\n            this.animationOpenState = this.realOpenState;\n        };\n    return NzPickerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar POPUP_STYLE_PATCH = { 'position': 'relative' };\n/**\n * The base picker for all common APIs\n * @abstract\n */\nvar AbstractPickerComponent = /** @class */ /*@__PURE__*/ (function () {\n    function AbstractPickerComponent(i18n) {\n        this.i18n = i18n;\n        // --- Common API\n        this.nzAllowClear = true;\n        this.nzAutoFocus = false;\n        this.nzDisabled = false;\n        this.nzPopupStyle = POPUP_STYLE_PATCH;\n        this.nzOnOpenChange = new EventEmitter();\n        this.isRange = false;\n        this.destroyed$ = new Subject();\n        this.isCustomPlaceHolder = false;\n        // ------------------------------------------------------------------------\n        // | Control value accessor implements\n        // ------------------------------------------------------------------------\n        // NOTE: onChangeFn/onTouchedFn will not be assigned if user not use as ngModel\n        this.onChangeFn = function () { return void 0; };\n        this.onTouchedFn = function () { return void 0; };\n    }\n    Object.defineProperty(AbstractPickerComponent.prototype, \"realOpenState\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.picker.animationOpenState;\n        } // Use picker's real open state to let re-render the picker's content when shown up\n        ,\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    AbstractPickerComponent.prototype.initValue = /**\n     * @return {?}\n     */\n        function () {\n            this.nzValue = this.isRange ? [] : null;\n        };\n    /**\n     * @return {?}\n     */\n    AbstractPickerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            // Subscribe the every locale change if the nzLocale is not handled by user\n            if (!this.nzLocale) {\n                this.i18n.localeChange\n                    .pipe(takeUntil(this.destroyed$))\n                    .subscribe(function () { return _this.setLocale(); });\n            }\n            // Default value\n            this.initValue();\n        };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    AbstractPickerComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            if (changes[\"nzPopupStyle\"]) { // Always assign the popup style patch\n                // Always assign the popup style patch\n                this.nzPopupStyle = this.nzPopupStyle ? __assign({}, this.nzPopupStyle, POPUP_STYLE_PATCH) : POPUP_STYLE_PATCH;\n            }\n            // Mark as customized placeholder by user once nzPlaceHolder assigned at the first time\n            if (changes[\"nzPlaceHolder\"] && changes[\"nzPlaceHolder\"].firstChange && typeof this.nzPlaceHolder !== 'undefined') {\n                this.isCustomPlaceHolder = true;\n            }\n            if (changes[\"nzLocale\"]) { // The nzLocale is currently handled by user\n                // The nzLocale is currently handled by user\n                this.setDefaultPlaceHolder();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    AbstractPickerComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.destroyed$.next();\n            this.destroyed$.complete();\n        };\n    /**\n     * @return {?}\n     */\n    AbstractPickerComponent.prototype.closeOverlay = /**\n     * @return {?}\n     */\n        function () {\n            this.picker.hideOverlay();\n        };\n    /**\n     * Common handle for value changes\n     * @param value changed value\n     */\n    /**\n     * Common handle for value changes\n     * @param {?} value changed value\n     * @return {?}\n     */\n    AbstractPickerComponent.prototype.onValueChange = /**\n     * Common handle for value changes\n     * @param {?} value changed value\n     * @return {?}\n     */\n        function (value) {\n            this.nzValue = value;\n            if (this.isRange) {\n                if (( /** @type {?} */(this.nzValue)).length) {\n                    this.onChangeFn([this.nzValue[0].nativeDate, this.nzValue[1].nativeDate]);\n                }\n                else {\n                    this.onChangeFn([]);\n                }\n            }\n            else {\n                if (this.nzValue) {\n                    this.onChangeFn(( /** @type {?} */(this.nzValue)).nativeDate);\n                }\n                else {\n                    this.onChangeFn(null);\n                }\n            }\n            this.onTouchedFn();\n        };\n    /**\n     * Triggered when overlayOpen changes (different with realOpenState)\n     * @param open The overlayOpen in picker component\n     */\n    /**\n     * Triggered when overlayOpen changes (different with realOpenState)\n     * @param {?} open The overlayOpen in picker component\n     * @return {?}\n     */\n    AbstractPickerComponent.prototype.onOpenChange = /**\n     * Triggered when overlayOpen changes (different with realOpenState)\n     * @param {?} open The overlayOpen in picker component\n     * @return {?}\n     */\n        function (open) {\n            this.nzOnOpenChange.emit(open);\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    AbstractPickerComponent.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.setValue(value);\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    AbstractPickerComponent.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            // tslint:disable-line:no-any\n            this.onChangeFn = fn;\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    AbstractPickerComponent.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            // tslint:disable-line:no-any\n            this.onTouchedFn = fn;\n        };\n    /**\n     * @param {?} disabled\n     * @return {?}\n     */\n    AbstractPickerComponent.prototype.setDisabledState = /**\n     * @param {?} disabled\n     * @return {?}\n     */\n        function (disabled) {\n            this.nzDisabled = disabled;\n        };\n    /**\n     * @return {?}\n     */\n    AbstractPickerComponent.prototype.setLocale = /**\n     * @return {?}\n     */\n        function () {\n            this.nzLocale = this.i18n.getLocaleData('DatePicker', {});\n            this.setDefaultPlaceHolder();\n        };\n    /**\n     * @return {?}\n     */\n    AbstractPickerComponent.prototype.setDefaultPlaceHolder = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.isCustomPlaceHolder && this.nzLocale) {\n                this.nzPlaceHolder = this.isRange ? this.nzLocale.lang.rangePlaceholder : this.nzLocale.lang.placeholder;\n            }\n        };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    AbstractPickerComponent.prototype.formatDate = /**\n     * @param {?} date\n     * @return {?}\n     */\n        function (date) {\n            return date ? this.i18n.formatDateCompatible(date.nativeDate, this.nzFormat) : '';\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    AbstractPickerComponent.prototype.setValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            if (this.isRange) {\n                this.nzValue = value ? ( /** @type {?} */(value)).map(function (val) { return new CandyDate(val); }) : [];\n            }\n            else {\n                this.nzValue = value ? new CandyDate(/** @type {?} */ (value)) : null;\n            }\n        };\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Boolean)\n    ], AbstractPickerComponent.prototype, \"nzAllowClear\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Boolean)\n    ], AbstractPickerComponent.prototype, \"nzAutoFocus\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Boolean)\n    ], AbstractPickerComponent.prototype, \"nzDisabled\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Boolean)\n    ], AbstractPickerComponent.prototype, \"nzOpen\", void 0);\n    return AbstractPickerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar DateRangePickerComponent = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(DateRangePickerComponent, _super);\n    function DateRangePickerComponent(i18n) {\n        var _this = _super.call(this, i18n) || this;\n        _this.showWeek = false;\n        _this.nzShowToday = true;\n        _this.nzOnPanelChange = new EventEmitter();\n        _this.nzOnOk = new EventEmitter();\n        return _this;\n    }\n    Object.defineProperty(DateRangePickerComponent.prototype, \"nzShowTime\", {\n        get: /**\n         * @return {?}\n         */ function () { return this._showTime; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._showTime = typeof value === 'object' ? value : toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateRangePickerComponent.prototype, \"realShowToday\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            // Range not support nzShowToday currently\n            return !this.isRange && this.nzShowToday;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    DateRangePickerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            _super.prototype.ngOnInit.call(this);\n            // Default format when it's empty\n            if (!this.nzFormat) {\n                if (this.showWeek) {\n                    this.nzFormat = 'yyyy-ww'; // Format for week\n                }\n                else {\n                    this.nzFormat = this.nzShowTime ? 'yyyy-MM-dd HH:mm:ss' : 'yyyy-MM-dd';\n                }\n            }\n        };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    DateRangePickerComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            _super.prototype.ngOnChanges.call(this, changes);\n            if (changes[\"nzRenderExtraFooter\"]) {\n                this.extraFooter = valueFunctionProp(this.nzRenderExtraFooter);\n            }\n            if (changes[\"nzShowTime\"] || changes[\"nzStyle\"]) {\n                this.setFixedPickerStyle();\n            }\n        };\n    // If has no timepicker and the user select a date by date panel, then close picker\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DateRangePickerComponent.prototype.onValueChange = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            _super.prototype.onValueChange.call(this, value);\n            if (!this.nzShowTime) {\n                this.closeOverlay();\n            }\n        };\n    // Emitted when done with date selecting\n    /**\n     * @return {?}\n     */\n    DateRangePickerComponent.prototype.onResultOk = /**\n     * @return {?}\n     */\n        function () {\n            if (this.isRange) {\n                if (( /** @type {?} */(this.nzValue)).length) {\n                    this.nzOnOk.emit([this.nzValue[0].nativeDate, this.nzValue[1].nativeDate]);\n                }\n                else {\n                    this.nzOnOk.emit([]);\n                }\n            }\n            else {\n                if (this.nzValue) {\n                    this.nzOnOk.emit(( /** @type {?} */(this.nzValue)).nativeDate);\n                }\n                else {\n                    this.nzOnOk.emit(null);\n                }\n            }\n            this.closeOverlay();\n        };\n    /**\n     * @param {?} open\n     * @return {?}\n     */\n    DateRangePickerComponent.prototype.onOpenChange = /**\n     * @param {?} open\n     * @return {?}\n     */\n        function (open) {\n            this.nzOnOpenChange.emit(open);\n        };\n    /**\n     * @return {?}\n     */\n    DateRangePickerComponent.prototype.setFixedPickerStyle = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var showTimeFixes = {};\n            if (this.nzShowTime) {\n                showTimeFixes.width = this.isRange ? '350px' : '195px';\n            }\n            this.pickerStyle = __assign({}, showTimeFixes, this.nzStyle);\n        };\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Boolean)\n    ], DateRangePickerComponent.prototype, \"nzShowToday\", void 0);\n    return DateRangePickerComponent;\n}(AbstractPickerComponent));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzDatePickerComponent = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(NzDatePickerComponent, _super);\n    function NzDatePickerComponent(i18n) {\n        var _this = _super.call(this, i18n) || this;\n        _this.isRange = false;\n        return _this;\n    }\n    return NzDatePickerComponent;\n}(DateRangePickerComponent));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * The base picker for header panels, current support: Year/Month\n */\nvar HeaderPickerComponent = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(HeaderPickerComponent, _super);\n    function HeaderPickerComponent(i18n) {\n        return _super.call(this, i18n) || this;\n    }\n    /**\n     * @return {?}\n     */\n    HeaderPickerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            _super.prototype.ngOnInit.call(this);\n            this.panelMode = this.endPanelMode;\n            /** @type {?} */\n            var allHeaderPanels = ['decade', 'year', 'month'];\n            this.supportPanels = allHeaderPanels.slice(0, allHeaderPanels.indexOf(this.endPanelMode) + 1);\n        };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    HeaderPickerComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            _super.prototype.ngOnChanges.call(this, changes);\n            if (changes[\"nzRenderExtraFooter\"]) {\n                this.extraFooter = valueFunctionProp(this.nzRenderExtraFooter);\n            }\n        };\n    /**\n     * @param {?} mode\n     * @return {?}\n     */\n    HeaderPickerComponent.prototype.onPanelModeChange = /**\n     * @param {?} mode\n     * @return {?}\n     */\n        function (mode) {\n            if (this.supportPanels.indexOf(mode) > -1) {\n                this.panelMode = mode;\n            }\n            else { // Since the default \"click year\" logic can be \"year panel\" -> \"date panel\", we need force to the end panel otherwise\n                // Since the default \"click year\" logic can be \"year panel\" -> \"date panel\", we need force to the end panel otherwise\n                this.panelMode = this.endPanelMode;\n            }\n        };\n    /**\n     * @param {?} mode\n     * @param {?} value\n     * @return {?}\n     */\n    HeaderPickerComponent.prototype.onChooseValue = /**\n     * @param {?} mode\n     * @param {?} value\n     * @return {?}\n     */\n        function (mode, value) {\n            if (this.endPanelMode === mode) {\n                _super.prototype.onValueChange.call(this, value);\n                this.closeOverlay();\n            }\n        };\n    /**\n     * @param {?} open\n     * @return {?}\n     */\n    HeaderPickerComponent.prototype.onOpenChange = /**\n     * @param {?} open\n     * @return {?}\n     */\n        function (open) {\n            if (!open) {\n                this.cleanUp();\n            }\n            this.nzOnOpenChange.emit(open);\n        };\n    /**\n     * @return {?}\n     */\n    HeaderPickerComponent.prototype.cleanUp = /**\n     * @return {?}\n     */\n        function () {\n            this.panelMode = this.endPanelMode;\n        };\n    return HeaderPickerComponent;\n}(AbstractPickerComponent));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzMonthPickerComponent = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(NzMonthPickerComponent, _super);\n    function NzMonthPickerComponent(i18n) {\n        var _this = _super.call(this, i18n) || this;\n        _this.nzFormat = 'yyyy-MM';\n        _this.endPanelMode = 'month';\n        return _this;\n    }\n    return NzMonthPickerComponent;\n}(HeaderPickerComponent));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzRangePickerComponent = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(NzRangePickerComponent, _super);\n    function NzRangePickerComponent(i18n) {\n        var _this = _super.call(this, i18n) || this;\n        _this.isRange = true;\n        return _this;\n    }\n    return NzRangePickerComponent;\n}(DateRangePickerComponent));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzWeekPickerComponent = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(NzWeekPickerComponent, _super);\n    function NzWeekPickerComponent(i18n) {\n        var _this = _super.call(this, i18n) || this;\n        _this.showWeek = true;\n        return _this;\n    }\n    return NzWeekPickerComponent;\n}(DateRangePickerComponent));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzYearPickerComponent = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(NzYearPickerComponent, _super);\n    function NzYearPickerComponent(i18n) {\n        var _this = _super.call(this, i18n) || this;\n        _this.nzFormat = 'yyyy';\n        _this.endPanelMode = 'year';\n        return _this;\n    }\n    return NzYearPickerComponent;\n}(HeaderPickerComponent));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzDatePickerModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzDatePickerModule() {\n    }\n    return NzDatePickerModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzDividerComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzDividerComponent(el, cd, updateHostClassService) {\n        this.el = el;\n        this.cd = cd;\n        this.updateHostClassService = updateHostClassService;\n        // region fields\n        this.isText = false;\n        this.textStr = '';\n        this.nzType = 'horizontal';\n        this.nzOrientation = '';\n        this._dashed = false;\n    }\n    Object.defineProperty(NzDividerComponent.prototype, \"nzText\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (value instanceof TemplateRef) {\n                this.textStr = null;\n                this.textTpl = value;\n            }\n            else {\n                this.textStr = value;\n            }\n            this.isText = !!value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzDividerComponent.prototype, \"nzDashed\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._dashed;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._dashed = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzDividerComponent.prototype.setClass = /**\n     * @return {?}\n     */\n        function () {\n            var _a;\n            /** @type {?} */\n            var orientationPrefix = (this.nzOrientation.length > 0) ? '-' + this.nzOrientation : this.nzOrientation;\n            /** @type {?} */\n            var classMap = (_a = {},\n                _a['ant-divider'] = true,\n                _a[\"ant-divider-\" + this.nzType] = true,\n                _a[\"ant-divider-with-text\" + orientationPrefix] = this.isText,\n                _a[\"ant-divider-dashed\"] = this.nzDashed,\n                _a);\n            this.updateHostClassService.updateHostClass(this.el.nativeElement, classMap);\n            this.cd.detectChanges();\n        };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NzDividerComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            this.setClass();\n        };\n    /**\n     * @return {?}\n     */\n    NzDividerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.setClass();\n        };\n    return NzDividerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzDividerModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzDividerModule() {\n    }\n    return NzDividerModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzMeasureScrollbarService = /** @class */ /*@__PURE__*/ (function () {\n    // tslint:disable-next-line:no-any\n    function NzMeasureScrollbarService(document) {\n        this.document = document;\n        this.scrollbarMeasure = {\n            position: 'absolute',\n            top: '-9999px',\n            width: '50px',\n            height: '50px',\n            overflow: 'scroll'\n        };\n        this.initScrollBarWidth();\n    }\n    Object.defineProperty(NzMeasureScrollbarService.prototype, \"scrollBarWidth\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            if (isNotNil(this._scrollbarWidth)) {\n                return this._scrollbarWidth;\n            }\n            this.initScrollBarWidth();\n            return this._scrollbarWidth;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzMeasureScrollbarService.prototype.initScrollBarWidth = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var scrollDiv = this.document.createElement('div');\n            for (var scrollProp in this.scrollbarMeasure) {\n                if (this.scrollbarMeasure.hasOwnProperty(scrollProp)) {\n                    scrollDiv.style[scrollProp] = this.scrollbarMeasure[scrollProp];\n                }\n            }\n            this.document.body.appendChild(scrollDiv);\n            /** @type {?} */\n            var width = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n            this.document.body.removeChild(scrollDiv);\n            this._scrollbarWidth = width;\n        };\n    /** @nocollapse */ NzMeasureScrollbarService.ngInjectableDef = defineInjectable({ factory: function NzMeasureScrollbarService_Factory() { return new NzMeasureScrollbarService(inject(DOCUMENT)); }, token: NzMeasureScrollbarService, providedIn: \"root\" });\n    return NzMeasureScrollbarService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzBlockScrollStrategy = /** @class */ /*@__PURE__*/ (function () {\n    function NzBlockScrollStrategy(document, renderer, nzMeasureScrollbarService) {\n        this.document = document;\n        this.renderer = renderer;\n        this.nzMeasureScrollbarService = nzMeasureScrollbarService;\n    }\n    /**\n     * @return {?}\n     */\n    NzBlockScrollStrategy.prototype.attach = /**\n     * @return {?}\n     */\n        function () { };\n    /**\n     * @return {?}\n     */\n    NzBlockScrollStrategy.prototype.enable = /**\n     * @return {?}\n     */\n        function () {\n            this.renderer.setStyle(document.body, 'overflow', 'hidden');\n            this.renderer.setStyle(this.document.body, 'padding-right', this.nzMeasureScrollbarService.scrollBarWidth + \"px\");\n        };\n    /**\n     * @return {?}\n     */\n    NzBlockScrollStrategy.prototype.disable = /**\n     * @return {?}\n     */\n        function () {\n            this.renderer.removeStyle(document.body, 'overflow');\n            this.renderer.removeStyle(document.body, 'padding-right');\n        };\n    return NzBlockScrollStrategy;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzScrollStrategyOptions = /** @class */ /*@__PURE__*/ (function () {\n    function NzScrollStrategyOptions(rendererFactory, nzMeasureScrollbarService, \n    // tslint:disable-next-line:no-any\n    document) {\n        var _this = this;\n        this.nzMeasureScrollbarService = nzMeasureScrollbarService;\n        this.block = function () { return new NzBlockScrollStrategy(_this.document, _this.renderer, _this.nzMeasureScrollbarService); };\n        this.document = document;\n        this.renderer = rendererFactory.createRenderer(null, null);\n    }\n    /** @nocollapse */ NzScrollStrategyOptions.ngInjectableDef = defineInjectable({ factory: function NzScrollStrategyOptions_Factory() { return new NzScrollStrategyOptions(inject(RendererFactory2), inject(NzMeasureScrollbarService), inject(DOCUMENT)); }, token: NzScrollStrategyOptions, providedIn: \"root\" });\n    return NzScrollStrategyOptions;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @abstract\n * @template R\n */\nvar /**\n * @abstract\n * @template R\n */ NzDrawerRef = /** @class */ /*@__PURE__*/ (function () {\n    function NzDrawerRef() {\n    }\n    return NzDrawerRef;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar DRAWER_ANIMATE_DURATION = 300;\n/**\n * @template T, R, D\n */\nvar NzDrawerComponent = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(NzDrawerComponent, _super);\n    function NzDrawerComponent(\n    // tslint:disable-next-line:no-any\n    document, renderer, overlay, elementRef, injector, changeDetectorRef, focusTrapFactory, nzScrollStrategyOptions, viewContainerRef) {\n        var _this = _super.call(this) || this;\n        _this.document = document;\n        _this.renderer = renderer;\n        _this.overlay = overlay;\n        _this.elementRef = elementRef;\n        _this.injector = injector;\n        _this.changeDetectorRef = changeDetectorRef;\n        _this.focusTrapFactory = focusTrapFactory;\n        _this.nzScrollStrategyOptions = nzScrollStrategyOptions;\n        _this.viewContainerRef = viewContainerRef;\n        _this.isOpen = false;\n        _this.templateContext = {\n            $implicit: undefined,\n            drawerRef: /** @type {?} */ (_this)\n        };\n        _this.nzClosable = true;\n        _this.nzMaskClosable = true;\n        _this.nzMask = true;\n        _this.nzPlacement = 'right';\n        _this.nzMaskStyle = {};\n        _this.nzBodyStyle = {};\n        _this.nzWidth = 256;\n        _this.nzHeight = 256;\n        _this.nzZIndex = 1000;\n        _this.nzOffsetX = 0;\n        _this.nzOffsetY = 0;\n        _this.nzOnViewInit = new EventEmitter();\n        _this.nzOnClose = new EventEmitter();\n        _this.nzAfterOpen = new Subject();\n        _this.nzAfterClose = new Subject();\n        return _this;\n    }\n    Object.defineProperty(NzDrawerComponent.prototype, \"offsetTransform\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            if (!this.isOpen || (this.nzOffsetX + this.nzOffsetY) === 0) {\n                return null;\n            }\n            switch (this.nzPlacement) {\n                case 'left':\n                    return \"translateX(\" + this.nzOffsetX + \"px)\";\n                case 'right':\n                    return \"translateX(-\" + this.nzOffsetX + \"px)\";\n                case 'top':\n                    return \"translateY(\" + this.nzOffsetY + \"px)\";\n                case 'bottom':\n                    return \"translateY(-\" + this.nzOffsetY + \"px)\";\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzDrawerComponent.prototype, \"transform\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            if (this.isOpen) {\n                return null;\n            }\n            switch (this.nzPlacement) {\n                case 'left':\n                    return \"translateX(-100%)\";\n                case 'right':\n                    return \"translateX(100%)\";\n                case 'top':\n                    return \"translateY(-100%)\";\n                case 'bottom':\n                    return \"translateY(100%)\";\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzDrawerComponent.prototype, \"width\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.isLeftOrRight ? toCssPixel(this.nzWidth) : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzDrawerComponent.prototype, \"height\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return !this.isLeftOrRight ? toCssPixel(this.nzHeight) : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzDrawerComponent.prototype, \"isLeftOrRight\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzPlacement === 'left' || this.nzPlacement === 'right';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzDrawerComponent.prototype, \"nzVisible\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.isOpen;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.isOpen = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzDrawerComponent.prototype, \"afterOpen\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzAfterOpen.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzDrawerComponent.prototype, \"afterClose\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzAfterClose.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzDrawerComponent.prototype.isNonEmptyString = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            return typeof value === 'string' && value !== '';\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzDrawerComponent.prototype.isTemplateRef = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            return value instanceof TemplateRef;\n        };\n    /**\n     * @return {?}\n     */\n    NzDrawerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.attachOverlay();\n            this.updateOverlayStyle();\n            this.updateBodyOverflow();\n            this.templateContext = { $implicit: this.nzContentParams, drawerRef: /** @type {?} */ (this) };\n            this.changeDetectorRef.detectChanges();\n        };\n    /**\n     * @return {?}\n     */\n    NzDrawerComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.attachBodyContent();\n            setTimeout(function () {\n                _this.nzOnViewInit.emit();\n            });\n        };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NzDrawerComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            var _this = this;\n            if (changes.hasOwnProperty('nzVisible')) {\n                /** @type {?} */\n                var value = changes[\"nzVisible\"].currentValue;\n                this.updateOverlayStyle();\n                if (value) {\n                    this.updateBodyOverflow();\n                    this.savePreviouslyFocusedElement();\n                    this.trapFocus();\n                }\n                else {\n                    setTimeout(function () {\n                        _this.updateBodyOverflow();\n                        _this.restoreFocus();\n                    }, DRAWER_ANIMATE_DURATION);\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzDrawerComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.disposeOverlay();\n        };\n    /**\n     * @param {?=} result\n     * @return {?}\n     */\n    NzDrawerComponent.prototype.close = /**\n     * @param {?=} result\n     * @return {?}\n     */\n        function (result) {\n            var _this = this;\n            this.isOpen = false;\n            this.updateOverlayStyle();\n            this.changeDetectorRef.detectChanges();\n            setTimeout(function () {\n                _this.updateBodyOverflow();\n                _this.restoreFocus();\n                _this.nzAfterClose.next(result);\n                _this.nzAfterClose.complete();\n            }, DRAWER_ANIMATE_DURATION);\n        };\n    /**\n     * @return {?}\n     */\n    NzDrawerComponent.prototype.open = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.isOpen = true;\n            this.updateOverlayStyle();\n            this.updateBodyOverflow();\n            this.savePreviouslyFocusedElement();\n            this.trapFocus();\n            this.changeDetectorRef.detectChanges();\n            setTimeout(function () {\n                _this.nzAfterOpen.next();\n            }, DRAWER_ANIMATE_DURATION);\n        };\n    /**\n     * @return {?}\n     */\n    NzDrawerComponent.prototype.closeClick = /**\n     * @return {?}\n     */\n        function () {\n            this.nzOnClose.emit();\n        };\n    /**\n     * @return {?}\n     */\n    NzDrawerComponent.prototype.maskClick = /**\n     * @return {?}\n     */\n        function () {\n            if (this.nzMaskClosable && this.nzMask) {\n                this.nzOnClose.emit();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzDrawerComponent.prototype.attachBodyContent = /**\n     * @return {?}\n     */\n        function () {\n            this.bodyPortalOutlet.dispose();\n            if (this.nzContent instanceof Type) {\n                /** @type {?} */\n                var childInjector = new PortalInjector(this.injector, new WeakMap([[NzDrawerRef, this]]));\n                /** @type {?} */\n                var componentPortal = new ComponentPortal(this.nzContent, null, childInjector);\n                /** @type {?} */\n                var componentRef = this.bodyPortalOutlet.attachComponentPortal(componentPortal);\n                Object.assign(componentRef.instance, this.nzContentParams);\n                componentRef.changeDetectorRef.detectChanges();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzDrawerComponent.prototype.attachOverlay = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.overlayRef) {\n                this.portal = new TemplatePortal(this.drawerTemplate, this.viewContainerRef);\n                this.overlayRef = this.overlay.create(this.getOverlayConfig());\n            }\n            if (this.overlayRef && !this.overlayRef.hasAttached()) {\n                this.overlayRef.attach(this.portal);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzDrawerComponent.prototype.disposeOverlay = /**\n     * @return {?}\n     */\n        function () {\n            this.overlayRef.dispose();\n            this.overlayRef = null;\n        };\n    /**\n     * @return {?}\n     */\n    NzDrawerComponent.prototype.getOverlayConfig = /**\n     * @return {?}\n     */\n        function () {\n            return new OverlayConfig({\n                scrollStrategy: this.nzScrollStrategyOptions.block()\n            });\n        };\n    /**\n     * @return {?}\n     */\n    NzDrawerComponent.prototype.updateOverlayStyle = /**\n     * @return {?}\n     */\n        function () {\n            if (this.overlayRef && this.overlayRef.overlayElement) {\n                this.renderer.setStyle(this.overlayRef.overlayElement, 'pointer-events', this.isOpen ? 'auto' : 'none');\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzDrawerComponent.prototype.updateBodyOverflow = /**\n     * @return {?}\n     */\n        function () {\n            if (this.overlayRef) {\n                if (this.isOpen) {\n                    this.overlayRef.getConfig().scrollStrategy.enable();\n                }\n                else {\n                    this.overlayRef.getConfig().scrollStrategy.disable();\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzDrawerComponent.prototype.savePreviouslyFocusedElement = /**\n     * @return {?}\n     */\n        function () {\n            if (this.document) {\n                this.previouslyFocusedElement = /** @type {?} */ (this.document.activeElement);\n                this.previouslyFocusedElement.blur();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzDrawerComponent.prototype.trapFocus = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.focusTrap) {\n                this.focusTrap = this.focusTrapFactory.create(this.overlayRef.overlayElement);\n            }\n            this.focusTrap.focusInitialElementWhenReady();\n        };\n    /**\n     * @return {?}\n     */\n    NzDrawerComponent.prototype.restoreFocus = /**\n     * @return {?}\n     */\n        function () {\n            if (this.previouslyFocusedElement) {\n                this.previouslyFocusedElement.focus();\n            }\n            if (this.focusTrap) {\n                this.focusTrap.destroy();\n            }\n        };\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Object)\n    ], NzDrawerComponent.prototype, \"nzClosable\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Object)\n    ], NzDrawerComponent.prototype, \"nzMaskClosable\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Object)\n    ], NzDrawerComponent.prototype, \"nzMask\", void 0);\n    return NzDrawerComponent;\n}(NzDrawerRef));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @template R\n */\nvar /**\n * @template R\n */ DrawerBuilderForService$$1 = /** @class */ /*@__PURE__*/ (function () {\n    function DrawerBuilderForService$$1(overlay, options) {\n        var _this = this;\n        this.overlay = overlay;\n        this.options = options;\n        this.unsubscribe$ = new Subject();\n        this.createDrawer();\n        this.updateOptions(options);\n        this.drawerRef.instance.nzOnViewInit\n            .pipe(takeUntil(this.unsubscribe$))\n            .subscribe(function () {\n            _this.drawerRef.instance.open();\n        });\n        this.drawerRef.instance.nzOnClose\n            .subscribe(function () {\n            _this.drawerRef.instance.close();\n        });\n        this.drawerRef.instance.afterClose\n            .pipe(takeUntil(this.unsubscribe$))\n            .subscribe(function () {\n            _this.overlayRef.dispose();\n            _this.drawerRef = null;\n            _this.unsubscribe$.next();\n            _this.unsubscribe$.complete();\n        });\n    }\n    /**\n     * @return {?}\n     */\n    DrawerBuilderForService$$1.prototype.getInstance = /**\n     * @return {?}\n     */\n        function () {\n            return this.drawerRef && this.drawerRef.instance;\n        };\n    /**\n     * @return {?}\n     */\n    DrawerBuilderForService$$1.prototype.createDrawer = /**\n     * @return {?}\n     */\n        function () {\n            this.overlayRef = this.overlay.create();\n            this.drawerRef = this.overlayRef.attach(new ComponentPortal(NzDrawerComponent));\n        };\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    DrawerBuilderForService$$1.prototype.updateOptions = /**\n     * @param {?} options\n     * @return {?}\n     */\n        function (options) {\n            Object.assign(this.drawerRef.instance, options);\n        };\n    return DrawerBuilderForService$$1;\n}());\nvar NzDrawerService$$1 = /** @class */ /*@__PURE__*/ (function () {\n    function NzDrawerService$$1(overlay) {\n        this.overlay = overlay;\n    }\n    // tslint:disable-next-line:no-any\n    /**\n     * @template T, D, R\n     * @param {?} options\n     * @return {?}\n     */\n    NzDrawerService$$1.prototype.create = /**\n     * @template T, D, R\n     * @param {?} options\n     * @return {?}\n     */\n        function (options) {\n            return new DrawerBuilderForService$$1(this.overlay, options).getInstance();\n        };\n    /** @nocollapse */ NzDrawerService$$1.ngInjectableDef = defineInjectable({ factory: function NzDrawerService_Factory() { return new NzDrawerService$$1(inject(Overlay)); }, token: NzDrawerService$$1, providedIn: \"root\" });\n    return NzDrawerService$$1;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzDrawerModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzDrawerModule() {\n    }\n    return NzDrawerModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzMenuDividerDirective = /** @class */ /*@__PURE__*/ (function () {\n    function NzMenuDividerDirective() {\n    }\n    return NzMenuDividerDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzMenuGroupComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzMenuGroupComponent() {\n    }\n    return NzMenuGroupComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzMenuDirective = /** @class */ /*@__PURE__*/ (function () {\n    function NzMenuDirective(el) {\n        this.el = el;\n        this._selectable = true;\n        this._inlineCollapsed = false;\n        this._inDropDown = false;\n        /**\n         * view init flat\n         */\n        this.isInit = false;\n        /**\n         * opened index of array\n         */\n        this.subMenusOpenIndex = [];\n        /**\n         * collection of menu item\n         */\n        this.menuItems = [];\n        /**\n         * collection of sub menu\n         */\n        this.subMenus = [];\n        this.nzTheme = 'light';\n        this.nzInlineIndent = 24;\n        this.nzMode = 'vertical';\n        this.nzClick = new EventEmitter();\n    }\n    Object.defineProperty(NzMenuDirective.prototype, \"nzInDropDown\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._inDropDown;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            var _this = this;\n            this._inDropDown = toBoolean(value);\n            this.nzSelectable = !this._inDropDown;\n            this.menuItems.forEach(function (menu) { return menu.isInDropDown = _this._inDropDown; });\n            this.subMenus.forEach(function (subMenu) { return subMenu.isInDropDown = _this._inDropDown; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzMenuDirective.prototype, \"nzSelectable\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._selectable;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._selectable = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzMenuDirective.prototype, \"nzInlineCollapsed\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._inlineCollapsed;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._inlineCollapsed = toBoolean(value);\n            if (this.isInit) {\n                this.updateInlineCollapse();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzMenuDirective.prototype.updateInlineCollapse = /**\n     * @return {?}\n     */\n        function () {\n            if (this._inlineCollapsed) {\n                this.hideSubMenus();\n                this.nzMode = 'vertical';\n            }\n            else {\n                this.reductionSubMenus();\n                this.nzMode = this.cacheMode;\n            }\n        };\n    Object.defineProperty(NzMenuDirective.prototype, \"isInDropDownClass\", {\n        /** define host class */\n        get: /**\n         * define host class\n         * @return {?}\n         */ function () {\n            return this.nzInDropDown;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzMenuDirective.prototype, \"isNotInDropDownClass\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return !this.nzInDropDown;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzMenuDirective.prototype, \"setDropDownThemeLightClass\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzInDropDown && (this.nzTheme === 'light');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzMenuDirective.prototype, \"setDropDownThemeDarkClass\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzInDropDown && (this.nzTheme === 'dark');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzMenuDirective.prototype, \"setMenuThemeLightClass\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return (!this.nzInDropDown) && (this.nzTheme === 'light');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzMenuDirective.prototype, \"setMenuThemeDarkClass\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return (!this.nzInDropDown) && (this.nzTheme === 'dark');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzMenuDirective.prototype, \"setMenuVerticalClass\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return (!this.nzInDropDown) && (this.nzMode === 'vertical');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzMenuDirective.prototype, \"setMenuHorizontalClass\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return (!this.nzInDropDown) && (this.nzMode === 'horizontal');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzMenuDirective.prototype, \"setMenuInlineClass\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return (!this.nzInDropDown) && (this.nzMode === 'inline');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzMenuDirective.prototype, \"setMenuInlineCollapsedClass\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return (!this.nzInDropDown) && (this.nzMode !== 'horizontal') && this.nzInlineCollapsed;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzMenuDirective.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n        function () {\n            this.isInit = true;\n            this.cacheMode = this.nzMode;\n            this.updateInlineCollapse();\n        };\n    /** trigger when menu item clicked */\n    /**\n     * trigger when menu item clicked\n     * @return {?}\n     */\n    NzMenuDirective.prototype.clearAllSelected = /**\n     * trigger when menu item clicked\n     * @return {?}\n     */\n        function () {\n            this.menuItems.forEach(function (menu) { return menu.nzSelected = false; });\n        };\n    /**\n     * @return {?}\n     */\n    NzMenuDirective.prototype.hideSubMenus = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.subMenusOpenIndex = [];\n            this.subMenus.forEach(function (submenu, index) {\n                if (submenu.nzOpen) {\n                    _this.subMenusOpenIndex.push(index);\n                }\n                submenu.nzOpen = false;\n            });\n        };\n    /**\n     * @return {?}\n     */\n    NzMenuDirective.prototype.reductionSubMenus = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.subMenusOpenIndex.forEach(function (i) { return _this.subMenus[i].nzOpen = true; });\n            this.subMenusOpenIndex = [];\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzMenuDirective.prototype.clickItem = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.nzClick.emit(value);\n        };\n    return NzMenuDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzDropDownDirective = /** @class */ /*@__PURE__*/ (function () {\n    function NzDropDownDirective(elementRef, renderer) {\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        this.$mouseenter = new Subject();\n        this.$mouseleave = new Subject();\n        this.$click = new Subject();\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzDropDownDirective.prototype.onMouseEnter = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            this.$mouseenter.next(e);\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzDropDownDirective.prototype.onMouseLeave = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            this.$mouseleave.next(e);\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzDropDownDirective.prototype.onClick = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            e.stopPropagation();\n            this.$click.next(e);\n        };\n    /**\n     * @return {?}\n     */\n    NzDropDownDirective.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            if (this.elementRef.nativeElement.nodeName === 'A') {\n                this.renderer.addClass(this.elementRef.nativeElement, 'ant-dropdown-link');\n            }\n        };\n    return NzDropDownDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzDropDownComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzDropDownComponent(renderer, changeDetector) {\n        var _this = this;\n        this.renderer = renderer;\n        this.changeDetector = changeDetector;\n        this._clickHide = true;\n        this._visible = false;\n        this._disabled = false;\n        this.unsubscribe$ = new Subject();\n        this.hasFilterButton = false;\n        this.triggerWidth = 0;\n        this.placement = 'bottomLeft';\n        this.dropDownPosition = 'bottom';\n        this.positions = __spread(DEFAULT_DROPDOWN_POSITIONS);\n        this.$subOpen = new BehaviorSubject(false);\n        this.$visibleChange = new Subject();\n        this.nzTrigger = 'hover';\n        this.nzVisibleChange = new EventEmitter();\n        this.onVisibleChange = function (visible) {\n            if (visible) {\n                _this.setTriggerWidth();\n            }\n            if (_this.nzVisible !== visible) {\n                _this.nzVisible = visible;\n                _this.nzVisibleChange.emit(_this.nzVisible);\n            }\n            _this.changeDetector.markForCheck();\n        };\n    }\n    Object.defineProperty(NzDropDownComponent.prototype, \"nzClickHide\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._clickHide;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._clickHide = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzDropDownComponent.prototype, \"nzDisabled\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._disabled;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._disabled = toBoolean(value);\n            if (this._disabled) {\n                this.renderer.setAttribute(this.nzOrigin.elementRef.nativeElement, 'disabled', '');\n            }\n            else {\n                this.renderer.removeAttribute(this.nzOrigin.elementRef.nativeElement, 'disabled');\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzDropDownComponent.prototype, \"nzVisible\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._visible;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._visible = toBoolean(value);\n            /** handle nzVisible change with mouse event **/\n            this.$visibleChange.next(this._visible);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzDropDownComponent.prototype, \"nzPlacement\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.placement;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.placement = value;\n            this.dropDownPosition = (this.nzPlacement.indexOf('top') !== -1) ? 'top' : 'bottom';\n            this.positions.unshift(/** @type {?} */ (POSITION_MAP[this.placement]));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzDropDownComponent.prototype.onClickEvent = /**\n     * @return {?}\n     */\n        function () {\n            if (this.nzTrigger === 'click') {\n                this.show();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzDropDownComponent.prototype.onMouseEnterEvent = /**\n     * @return {?}\n     */\n        function () {\n            if (this.nzTrigger === 'hover') {\n                this.show();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzDropDownComponent.prototype.onMouseLeaveEvent = /**\n     * @return {?}\n     */\n        function () {\n            if (this.nzTrigger === 'hover') {\n                this.hide();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzDropDownComponent.prototype.hide = /**\n     * @return {?}\n     */\n        function () {\n            this.$visibleChange.next(false);\n        };\n    /**\n     * @return {?}\n     */\n    NzDropDownComponent.prototype.show = /**\n     * @return {?}\n     */\n        function () {\n            this.$visibleChange.next(true);\n        };\n    /**\n     * @param {?} position\n     * @return {?}\n     */\n    NzDropDownComponent.prototype.onPositionChange = /**\n     * @param {?} position\n     * @return {?}\n     */\n        function (position) {\n            this.dropDownPosition = position.connectionPair.originY;\n        };\n    /**\n     * @return {?}\n     */\n    NzDropDownComponent.prototype.setTriggerWidth = /**\n     * @return {?}\n     */\n        function () {\n            this.triggerWidth = this.nzOrigin.elementRef.nativeElement.getBoundingClientRect().width;\n            /** should remove after https://github.com/angular/material2/pull/8765 merged **/\n            if (this.cdkOverlay && this.cdkOverlay.overlayRef) {\n                this.cdkOverlay.overlayRef.updateSize({\n                    minWidth: this.triggerWidth\n                });\n            }\n        };\n    /**\n     * @param {?} observable$\n     * @return {?}\n     */\n    NzDropDownComponent.prototype.startSubscribe = /**\n     * @param {?} observable$\n     * @return {?}\n     */\n        function (observable$) {\n            /** @type {?} */\n            var $pre = observable$;\n            if (this.nzClickHide && this.nzMenu) {\n                /** @type {?} */\n                var $menuItemClick = this.nzMenu.nzClick.asObservable().pipe(mapTo(false));\n                $pre = merge($pre, $menuItemClick);\n            }\n            /** @type {?} */\n            var final$ = combineLatest($pre, this.$subOpen).pipe(map(function (value) { return value[0] || value[1]; }), debounceTime(50), distinctUntilChanged());\n            final$.pipe(takeUntil(this.unsubscribe$)).subscribe(this.onVisibleChange);\n        };\n    /**\n     * @return {?}\n     */\n    NzDropDownComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            if (this.nzMenu) {\n                this.nzMenu.nzInDropDown = true;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzDropDownComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.unsubscribe$.next();\n            this.unsubscribe$.complete();\n        };\n    /**\n     * @return {?}\n     */\n    NzDropDownComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var mouse$;\n            if (this.nzTrigger === 'hover') {\n                /** @type {?} */\n                var mouseEnterOrigin$ = this.nzOrigin.$mouseenter.pipe(mapTo(true));\n                /** @type {?} */\n                var mouseLeaveOrigin$ = this.nzOrigin.$mouseleave.pipe(mapTo(false));\n                mouse$ = merge(mouseLeaveOrigin$, mouseEnterOrigin$);\n            }\n            if (this.nzTrigger === 'click') {\n                mouse$ = this.nzOrigin.$click.pipe(mapTo(true));\n            }\n            /** @type {?} */\n            var observable$ = merge(this.$visibleChange, mouse$);\n            this.startSubscribe(observable$);\n        };\n    Object.defineProperty(NzDropDownComponent.prototype, \"hasBackdrop\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzTrigger === 'click';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return NzDropDownComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzDropDownButtonComponent = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(NzDropDownButtonComponent, _super);\n    function NzDropDownButtonComponent(renderer, changeDetector) {\n        var _this = _super.call(this, renderer, changeDetector) || this;\n        _this.nzSize = 'default';\n        _this.nzType = 'default';\n        _this.nzClick = new EventEmitter();\n        _this.onVisibleChange = function (visible) {\n            if (_this.nzDisabled) {\n                return;\n            }\n            if (visible) {\n                _this.setTriggerWidth();\n            }\n            if (_this.nzVisible !== visible) {\n                _this.nzVisible = visible;\n                _this.nzVisibleChange.emit(_this.nzVisible);\n            }\n            _this.changeDetector.markForCheck();\n        };\n        return _this;\n    }\n    /** rewrite afterViewInit hook */\n    /**\n     * rewrite afterViewInit hook\n     * @return {?}\n     */\n    NzDropDownButtonComponent.prototype.ngAfterViewInit = /**\n     * rewrite afterViewInit hook\n     * @return {?}\n     */\n        function () {\n            this.startSubscribe(this.$visibleChange);\n        };\n    return NzDropDownButtonComponent;\n}(NzDropDownComponent));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzSubMenuComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzSubMenuComponent(nzMenuDirective, cd, nzSubMenuComponent, nzDropDownComponent, nzDropDownButtonComponent) {\n        var _this = this;\n        this.nzMenuDirective = nzMenuDirective;\n        this.cd = cd;\n        this.nzSubMenuComponent = nzSubMenuComponent;\n        this.nzDropDownComponent = nzDropDownComponent;\n        this.nzDropDownButtonComponent = nzDropDownButtonComponent;\n        this._open = false;\n        this._disabled = false;\n        this.$mouseSubject = new Subject();\n        this.unsubscribe$ = new Subject();\n        this.placement = 'rightTop';\n        this.$subOpen = new BehaviorSubject(false);\n        this.isInDropDown = false;\n        this.isInSubMenu = false;\n        this.level = 1;\n        this.triggerWidth = null;\n        this.nzOpenChange = new EventEmitter();\n        this.handleOpenEvent = function (data) {\n            if (_this.nzDisabled) {\n                return;\n            }\n            if (_this.nzOpen !== data) {\n                _this.nzOpen = data;\n                _this.nzOpenChange.emit(_this.nzOpen);\n            }\n            if (_this.nzSubMenuComponent) {\n                _this.nzSubMenuComponent.$subOpen.next(_this.nzOpen);\n            }\n            if (_this.nzDropDownComponent) {\n                _this.nzDropDownComponent.$subOpen.next(_this.nzOpen);\n            }\n            if (_this.nzDropDownButtonComponent) {\n                _this.nzDropDownButtonComponent.$subOpen.next(_this.nzOpen);\n            }\n        };\n    }\n    Object.defineProperty(NzSubMenuComponent.prototype, \"nzOpen\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._open;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._open = toBoolean(value);\n            this.setTriggerWidth();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSubMenuComponent.prototype, \"nzDisabled\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._disabled;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._disabled = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSubMenuComponent.prototype, \"subItemSelected\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            var _this = this;\n            return !!this.nzMenuDirective.menuItems.find(function (e) { return e.nzSelected && e.nzSubMenuComponent === _this; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSubMenuComponent.prototype, \"submenuSelected\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            var _this = this;\n            return !!this.subMenus.toArray().find(function (e) { return e !== _this && e.subItemSelected; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSubMenuComponent.prototype, \"expandState\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            if (this.nzOpen && this.subMenuMode === 'inline') {\n                return 'expand';\n            }\n            else if (this.nzOpen && this.subMenuMode === 'horizontal') {\n                return 'bottom';\n            }\n            else if (this.nzOpen && this.subMenuMode === 'vertical') {\n                return 'fade';\n            }\n            else {\n                return 'hidden';\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSubMenuComponent.prototype, \"overlayPositions\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            if (this.subMenuMode === 'horizontal') {\n                return [POSITION_MAP[\"bottomLeft\"]];\n            }\n            else {\n                return [POSITION_MAP[\"rightTop\"], POSITION_MAP[\"leftTop\"]];\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    NzSubMenuComponent.prototype.clickSubMenuTitle = /**\n     * @param {?} $event\n     * @return {?}\n     */\n        function ($event) {\n            if (this.nzDisabled) {\n                $event.preventDefault();\n                $event.stopPropagation();\n                return;\n            }\n            if ((this.subMenuMode === 'inline') && (!this.isInDropDown)) {\n                this.nzOpen = !this.nzOpen;\n                this.nzOpenChange.emit(this.nzOpen);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzSubMenuComponent.prototype.clickSubMenuDropDown = /**\n     * @return {?}\n     */\n        function () {\n            if (this.isInDropDown || (this.subMenuMode === 'vertical') || (this.subMenuMode === 'horizontal')) {\n                this.$mouseSubject.next(false);\n            }\n        };\n    Object.defineProperty(NzSubMenuComponent.prototype, \"subMenuMode\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            if (this.nzMenuDirective.nzMode === 'inline') {\n                return 'inline';\n            }\n            else if ((this.nzMenuDirective.nzMode === 'vertical') || (this.isInSubMenu)) {\n                return 'vertical';\n            }\n            else {\n                return 'horizontal';\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzSubMenuComponent.prototype.onMouseEnterEvent = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            if ((this.subMenuMode === 'horizontal') || (this.subMenuMode === 'vertical') || this.isInDropDown) {\n                this.$mouseSubject.next(true);\n            }\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzSubMenuComponent.prototype.onMouseLeaveEvent = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            if ((this.subMenuMode === 'horizontal') || (this.subMenuMode === 'vertical') || this.isInDropDown) {\n                this.$mouseSubject.next(false);\n            }\n        };\n    Object.defineProperty(NzSubMenuComponent.prototype, \"setDropDownSubmenuClass\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.isInDropDown;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSubMenuComponent.prototype, \"setMenuSubmenuOpenClass\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return (!this.isInDropDown) && (this.nzOpen);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSubMenuComponent.prototype, \"setDropDownVerticalClass\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.isInDropDown && (this.subMenuMode === 'vertical');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSubMenuComponent.prototype, \"setDropDownHorizontalClass\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.isInDropDown && (this.subMenuMode === 'horizontal');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSubMenuComponent.prototype, \"setDropDownDisabled\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.isInDropDown && this.nzDisabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSubMenuComponent.prototype, \"setMenuSubmenuClass\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return !this.isInDropDown;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSubMenuComponent.prototype, \"setMenuSubmenuSelectedClass\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.submenuSelected || this.subItemSelected;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSubMenuComponent.prototype, \"setMenuVerticalClass\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return (!this.isInDropDown) && (this.subMenuMode === 'vertical');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSubMenuComponent.prototype, \"setMenuHorizontalClass\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return (!this.isInDropDown) && (this.subMenuMode === 'horizontal');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSubMenuComponent.prototype, \"setMenuInlineClass\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return (!this.isInDropDown) && (this.subMenuMode === 'inline');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSubMenuComponent.prototype, \"setMenuDisabled\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return (!this.isInDropDown) && this.nzDisabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzSubMenuComponent.prototype.setTriggerWidth = /**\n     * @return {?}\n     */\n        function () {\n            if (this.subMenuMode === 'horizontal') {\n                this.triggerWidth = this.trigger.nativeElement.getBoundingClientRect().width;\n                /** should remove after after https://github.com/angular/material2/pull/8765 merged **/\n                if (this.cdkOverlay && this.cdkOverlay.overlayRef) {\n                    this.cdkOverlay.overlayRef.updateSize({\n                        width: this.triggerWidth\n                    });\n                }\n            }\n        };\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    NzSubMenuComponent.prototype.onPositionChange = /**\n     * @param {?} $event\n     * @return {?}\n     */\n        function ($event) {\n            if ($event.connectionPair) {\n                /** @type {?} */\n                var originMap_1 = {\n                    originX: $event.connectionPair.originX,\n                    originY: $event.connectionPair.originY,\n                    overlayX: $event.connectionPair.overlayX,\n                    overlayY: $event.connectionPair.overlayY\n                };\n                /** @type {?} */\n                var keyList = ['originX', 'originY', 'overlayX', 'overlayY'];\n                if (keyList.every(function (key) { return originMap_1[key] === POSITION_MAP[\"leftTop\"][key]; })) {\n                    this.placement = 'leftTop';\n                }\n                else if (keyList.every(function (key) { return originMap_1[key] === POSITION_MAP[\"rightTop\"][key]; })) {\n                    this.placement = 'rightTop';\n                }\n                this.cd.detectChanges();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzSubMenuComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            if (this.nzSubMenuComponent) {\n                this.level = this.nzSubMenuComponent.level + 1;\n                this.isInSubMenu = true;\n            }\n            this.nzMenuDirective.subMenus.push(this);\n            /** @type {?} */\n            var $combineAll = combineLatest(this.$subOpen, this.$mouseSubject.asObservable()).pipe(map(function (value) { return value[0] || value[1]; }), auditTime(150));\n            $combineAll.pipe(takeUntil(this.unsubscribe$)).subscribe(this.handleOpenEvent);\n            this.isInDropDown = this.nzMenuDirective.nzInDropDown;\n        };\n    /**\n     * @return {?}\n     */\n    NzSubMenuComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.unsubscribe$.next();\n            this.unsubscribe$.complete();\n        };\n    return NzSubMenuComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzMenuItemDirective = /** @class */ /*@__PURE__*/ (function () {\n    function NzMenuItemDirective(renderer, cd, nzMenuDirective, nzSubMenuComponent, hostElement) {\n        this.renderer = renderer;\n        this.cd = cd;\n        this.nzMenuDirective = nzMenuDirective;\n        this.nzSubMenuComponent = nzSubMenuComponent;\n        this.hostElement = hostElement;\n        this._disabled = false;\n        this._selected = false;\n        this._initialized = false;\n        this.level = 0;\n        this.padding = null;\n        this.isInDropDown = false;\n    }\n    Object.defineProperty(NzMenuItemDirective.prototype, \"nzDisabled\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._disabled;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._disabled = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzMenuItemDirective.prototype, \"nzSelected\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._selected;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._selected = toBoolean(value);\n            if (this._initialized) {\n                this.setClass();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** clear all item selected status except this */\n    /**\n     * clear all item selected status except this\n     * @param {?} e\n     * @return {?}\n     */\n    NzMenuItemDirective.prototype.onClickItem = /**\n     * clear all item selected status except this\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            if (this.nzDisabled) {\n                e.preventDefault();\n                e.stopPropagation();\n                return;\n            }\n            this.nzMenuDirective.clickItem(this);\n            if (this.nzMenuDirective.nzSelectable) {\n                this.nzMenuDirective.clearAllSelected();\n                this.nzSelected = true;\n            }\n            if (this.nzSubMenuComponent) {\n                this.nzSubMenuComponent.clickSubMenuDropDown();\n            }\n        };\n    Object.defineProperty(NzMenuItemDirective.prototype, \"isInDropDownClass\", {\n        /** define host class */\n        get: /**\n         * define host class\n         * @return {?}\n         */ function () {\n            return this.isInDropDown;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzMenuItemDirective.prototype, \"isNotInDropDownClass\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return !this.isInDropDown;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzMenuItemDirective.prototype, \"setDropDownDisableClass\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.isInDropDown && this.nzDisabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzMenuItemDirective.prototype, \"setMenuDisableClass\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return (!this.isInDropDown) && this.nzDisabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzMenuItemDirective.prototype, \"setPaddingLeft\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            if (this.nzMenuDirective.nzMode === 'inline') {\n                if (this.nzSubMenuComponent) {\n                    /** if in sub menu component and host menu's mode is inline add PADDING_BASE * level padding */\n                    return (this.nzSubMenuComponent.level + 1) * this.nzMenuDirective.nzInlineIndent;\n                }\n                else {\n                    /** not in sub menu component but root menu's mode is inline return default padding */\n                    return this.nzMenuDirective.nzInlineIndent;\n                }\n            }\n            else {\n                return this.padding;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzMenuItemDirective.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.nzMenuDirective.menuItems.push(this);\n            /** store origin padding in padding */\n            if (this.hostElement.nativeElement.style['padding-left']) {\n                this.padding = parseInt(this.hostElement.nativeElement.style['padding-left'], 10);\n            }\n            this.isInDropDown = this.nzMenuDirective.nzInDropDown;\n            this.setClass();\n            this._initialized = true;\n        };\n    /**\n     * @return {?}\n     */\n    NzMenuItemDirective.prototype.setClass = /**\n     * @return {?}\n     */\n        function () {\n            if (this._selected) {\n                this.renderer.addClass(this.hostElement.nativeElement, this.isInDropDown ? 'ant-dropdown-menu-item-selected' : 'ant-menu-item-selected');\n            }\n            else {\n                this.renderer.removeClass(this.hostElement.nativeElement, this.isInDropDown ? 'ant-dropdown-menu-item-selected' : 'ant-menu-item-selected');\n            }\n        };\n    return NzMenuItemDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzMenuModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzMenuModule() {\n    }\n    return NzMenuModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzDropdownContextComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzDropdownContextComponent() {\n        this.dropDownPosition = 'bottom';\n        this.open = true;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzDropdownContextComponent.prototype.setTemplateRef = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.template = value;\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzDropdownContextComponent.prototype.setControl = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.control = value;\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzDropdownContextComponent.prototype.setDropDownPosition = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.dropDownPosition = value;\n        };\n    /**\n     * @return {?}\n     */\n    NzDropdownContextComponent.prototype.close = /**\n     * @return {?}\n     */\n        function () {\n            this.open = false;\n        };\n    /**\n     * @return {?}\n     */\n    NzDropdownContextComponent.prototype.afterAnimation = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.open) {\n                this.control.close();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzDropdownContextComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            // TODO auto set dropdown class after the bug resolved\n            /** https://github.com/angular/angular/issues/14842 **/\n        };\n    return NzDropdownContextComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzDropDownModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzDropDownModule() {\n    }\n    return NzDropDownModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction matchMediaFunc() {\n    if (typeof window === 'undefined') {\n        return function () { return null; };\n    }\n    if (window.matchMedia) {\n        return window.matchMedia.bind(window);\n    }\n    else {\n        /** @type {?} */\n        var matchMediaPolyfill = function (mediaQuery) {\n            return {\n                media: mediaQuery,\n                matches: false,\n                addListener: /**\n                 * @return {?}\n                 */ function () {\n                },\n                removeListener: /**\n                 * @return {?}\n                 */ function () {\n                },\n            };\n        };\n        return matchMediaPolyfill;\n    }\n}\n/** @type {?} */\nvar matchMedia = /*@__PURE__*/ matchMediaFunc();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar responsiveMap = {\n    xs: '(max-width: 575px)',\n    sm: '(min-width: 576px)',\n    md: '(min-width: 768px)',\n    lg: '(min-width: 992px)',\n    xl: '(min-width: 1200px)',\n    xxl: '(min-width: 1600px)'\n};\nvar NzRowComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzRowComponent(elementRef, renderer, nzUpdateHostClassService) {\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        this.nzUpdateHostClassService = nzUpdateHostClassService;\n        this._align = 'top';\n        this._justify = 'start';\n        this.el = this.elementRef.nativeElement;\n        this.prefixCls = 'ant-row';\n    }\n    Object.defineProperty(NzRowComponent.prototype, \"nzType\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._type;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._type = value;\n            this.setClassMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzRowComponent.prototype, \"nzAlign\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._align;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._align = value;\n            this.setClassMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzRowComponent.prototype, \"nzJustify\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._justify;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._justify = value;\n            this.setClassMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzRowComponent.prototype, \"nzGutter\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._gutter;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._gutter = value;\n            this.updateGutter();\n            this.setStyle();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzRowComponent.prototype.setStyle = /**\n     * @return {?}\n     */\n        function () {\n            this.renderer.setStyle(this.el, 'margin-left', \"-\" + this.actualGutter / 2 + \"px\");\n            this.renderer.setStyle(this.el, 'margin-right', \"-\" + this.actualGutter / 2 + \"px\");\n        };\n    /**\n     * @return {?}\n     */\n    NzRowComponent.prototype.calculateGutter = /**\n     * @return {?}\n     */\n        function () {\n            if (typeof this.nzGutter !== 'object') {\n                return this.nzGutter;\n            }\n            else if (this.breakPoint && this.nzGutter[this.breakPoint]) {\n                return this.nzGutter[this.breakPoint];\n            }\n            else {\n                return;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzRowComponent.prototype.updateGutter = /**\n     * @return {?}\n     */\n        function () {\n            this.actualGutter = this.calculateGutter();\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzRowComponent.prototype.onWindowResize = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            this.watchMedia();\n        };\n    /**\n     * @return {?}\n     */\n    NzRowComponent.prototype.watchMedia = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            Object.keys(responsiveMap).map(function (screen) {\n                /** @type {?} */\n                var matchBelow = matchMedia(responsiveMap[screen]).matches;\n                if (matchBelow) {\n                    _this.breakPoint = screen;\n                }\n            });\n            this.updateGutter();\n            this.setStyle();\n        };\n    /** temp solution since no method add classMap to host https://github.com/angular/angular/issues/7289*/\n    /**\n     * temp solution since no method add classMap to host https://github.com/angular/angular/issues/7289\n     * @return {?}\n     */\n    NzRowComponent.prototype.setClassMap = /**\n     * temp solution since no method add classMap to host https://github.com/angular/angular/issues/7289\n     * @return {?}\n     */\n        function () {\n            var _a;\n            /** @type {?} */\n            var classMap = (_a = {},\n                _a[\"\" + this.prefixCls] = !this.nzType,\n                _a[this.prefixCls + \"-\" + this.nzType] = this.nzType,\n                _a[this.prefixCls + \"-\" + this.nzType + \"-\" + this.nzAlign] = this.nzType && this.nzAlign,\n                _a[this.prefixCls + \"-\" + this.nzType + \"-\" + this.nzJustify] = this.nzType && this.nzJustify,\n                _a);\n            this.nzUpdateHostClassService.updateHostClass(this.el, classMap);\n        };\n    /**\n     * @return {?}\n     */\n    NzRowComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.setClassMap();\n            this.watchMedia();\n        };\n    return NzRowComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzRowDirective = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(NzRowDirective, _super);\n    function NzRowDirective(elementRef, renderer, nzUpdateHostClassService) {\n        return _super.call(this, elementRef, renderer, nzUpdateHostClassService) || this;\n    }\n    return NzRowDirective;\n}(NzRowComponent));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzColComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzColComponent(nzUpdateHostClassService, elementRef, nzRowComponent, nzRowDirective, renderer) {\n        this.nzUpdateHostClassService = nzUpdateHostClassService;\n        this.elementRef = elementRef;\n        this.nzRowComponent = nzRowComponent;\n        this.nzRowDirective = nzRowDirective;\n        this.renderer = renderer;\n        this.el = this.elementRef.nativeElement;\n        this.prefixCls = 'ant-col';\n    }\n    Object.defineProperty(NzColComponent.prototype, \"paddingLeft\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzRow && this.nzRow.actualGutter / 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzColComponent.prototype, \"paddingRight\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzRow && this.nzRow.actualGutter / 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** temp solution since no method add classMap to host https://github.com/angular/angular/issues/7289*/\n    /**\n     * temp solution since no method add classMap to host https://github.com/angular/angular/issues/7289\n     * @return {?}\n     */\n    NzColComponent.prototype.setClassMap = /**\n     * temp solution since no method add classMap to host https://github.com/angular/angular/issues/7289\n     * @return {?}\n     */\n        function () {\n            var _a;\n            /** @type {?} */\n            var classMap = __assign((_a = {}, _a[this.prefixCls + \"-\" + this.nzSpan] = isNotNil(this.nzSpan), _a[this.prefixCls + \"-order-\" + this.nzOrder] = isNotNil(this.nzOrder), _a[this.prefixCls + \"-offset-\" + this.nzOffset] = isNotNil(this.nzOffset), _a[this.prefixCls + \"-pull-\" + this.nzPull] = isNotNil(this.nzPull), _a[this.prefixCls + \"-push-\" + this.nzPush] = isNotNil(this.nzPush), _a), this.generateClass());\n            this.nzUpdateHostClassService.updateHostClass(this.el, classMap);\n        };\n    /**\n     * @return {?}\n     */\n    NzColComponent.prototype.generateClass = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            /** @type {?} */\n            var listOfSizeInputName = ['nzXs', 'nzSm', 'nzMd', 'nzLg', 'nzXl', 'nzXXl'];\n            /** @type {?} */\n            var listClassMap = {};\n            listOfSizeInputName.forEach(function (name) {\n                /** @type {?} */\n                var sizeName = name.replace('nz', '').toLowerCase();\n                if (isNotNil(_this[name])) {\n                    if ((typeof (_this[name]) === 'number') || (typeof (_this[name]) === 'string')) {\n                        listClassMap[_this.prefixCls + \"-\" + sizeName + \"-\" + _this[name]] = true;\n                    }\n                    else {\n                        listClassMap[_this.prefixCls + \"-\" + sizeName + \"-\" + _this[name].span] = _this[name] && isNotNil(_this[name].span);\n                        listClassMap[_this.prefixCls + \"-\" + sizeName + \"-pull-\" + _this[name].pull] = _this[name] && isNotNil(_this[name].pull);\n                        listClassMap[_this.prefixCls + \"-\" + sizeName + \"-push-\" + _this[name].push] = _this[name] && isNotNil(_this[name].push);\n                        listClassMap[_this.prefixCls + \"-\" + sizeName + \"-offset-\" + _this[name].offset] = _this[name] && isNotNil(_this[name].offset);\n                        listClassMap[_this.prefixCls + \"-\" + sizeName + \"-order-\" + _this[name].order] = _this[name] && isNotNil(_this[name].order);\n                    }\n                }\n            });\n            return listClassMap;\n        };\n    Object.defineProperty(NzColComponent.prototype, \"nzRow\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzRowComponent || this.nzRowDirective;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NzColComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            this.setClassMap();\n        };\n    /**\n     * @return {?}\n     */\n    NzColComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.setClassMap();\n        };\n    return NzColComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzColDirective = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(NzColDirective, _super);\n    function NzColDirective(nzUpdateHostClassService, elementRef, nzRowComponent, nzRowDirective, renderer) {\n        return _super.call(this, nzUpdateHostClassService, elementRef, nzRowComponent, nzRowDirective, renderer) || this;\n    }\n    return NzColDirective;\n}(NzColComponent));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzGridModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzGridModule() {\n    }\n    return NzGridModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzFormControlComponent = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(NzFormControlComponent, _super);\n    function NzFormControlComponent(nzUpdateHostClassService, elementRef, nzRowComponent, nzRowDirective, renderer) {\n        var _this = _super.call(this, nzUpdateHostClassService, elementRef, nzRowComponent, nzRowDirective, renderer) || this;\n        _this._hasFeedback = false;\n        return _this;\n    }\n    Object.defineProperty(NzFormControlComponent.prototype, \"nzHasFeedback\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._hasFeedback;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._hasFeedback = toBoolean(value);\n            this.setControlClassMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzFormControlComponent.prototype, \"nzValidateStatus\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (value instanceof FormControl) {\n                this.validateControl = value;\n                this.validateString = null;\n                this.controlStatus = null;\n                this.setControlClassMap();\n                this.watchControl();\n            }\n            else {\n                this.validateString = value;\n                this.validateControl = null;\n                this.removeSubscribe();\n                this.setControlClassMap();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzFormControlComponent.prototype.removeSubscribe = /**\n     * @return {?}\n     */\n        function () {\n            if (this.validateChanges) {\n                this.validateChanges.unsubscribe();\n                this.validateChanges = null;\n            }\n        };\n    /**\n     * @param {?} status\n     * @return {?}\n     */\n    NzFormControlComponent.prototype.updateValidateStatus = /**\n     * @param {?} status\n     * @return {?}\n     */\n        function (status) {\n            if (this.validateControl.dirty || this.validateControl.touched) {\n                this.controlStatus = status;\n                this.setControlClassMap();\n            }\n            else {\n                this.controlStatus = null;\n                this.setControlClassMap();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzFormControlComponent.prototype.watchControl = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.removeSubscribe();\n            /** miss detect https://github.com/angular/angular/issues/10887 **/\n            if (this.validateControl && this.validateControl.statusChanges) {\n                this.validateChanges = this.validateControl.statusChanges.subscribe(function (data) { return _this.updateValidateStatus(data); });\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzFormControlComponent.prototype.setControlClassMap = /**\n     * @return {?}\n     */\n        function () {\n            var _a;\n            this.controlClassMap = (_a = {},\n                _a[\"has-warning\"] = this.validateString === 'warning',\n                _a[\"is-validating\"] = this.validateString === 'validating' || this.validateString === 'pending' || this.controlStatus === 'PENDING',\n                _a[\"has-error\"] = this.validateString === 'error' || this.controlStatus === 'INVALID',\n                _a[\"has-success\"] = this.validateString === 'success' || this.controlStatus === 'VALID',\n                _a[\"has-feedback\"] = this.nzHasFeedback,\n                _a);\n            if (this.controlClassMap['has-warning']) {\n                this.iconType = 'exclamation-circle-fill';\n            }\n            else if (this.controlClassMap['is-validating']) {\n                this.iconType = 'loading';\n            }\n            else if (this.controlClassMap['has-error']) {\n                this.iconType = 'close-circle-fill';\n            }\n            else if (this.controlClassMap['has-success']) {\n                this.iconType = 'check-circle-fill';\n            }\n            else {\n                this.iconType = '';\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzFormControlComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.setClassMap();\n            this.setControlClassMap();\n        };\n    /**\n     * @return {?}\n     */\n    NzFormControlComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.removeSubscribe();\n        };\n    /**\n     * @return {?}\n     */\n    NzFormControlComponent.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n        function () {\n            this.watchControl();\n            if (this.validateControl) {\n                this.updateValidateStatus(this.validateControl.status);\n            }\n        };\n    return NzFormControlComponent;\n}(NzColComponent));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * should add nz-row directive to host, track https://github.com/angular/angular/issues/8785 *\n */\nvar NzFormItemComponent = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(NzFormItemComponent, _super);\n    function NzFormItemComponent(elementRef, renderer, nzUpdateHostClassService) {\n        var _this = _super.call(this, elementRef, renderer, nzUpdateHostClassService) || this;\n        _this._flex = false;\n        _this.withHelp = 0;\n        return _this;\n    }\n    Object.defineProperty(NzFormItemComponent.prototype, \"nzFlex\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._flex = toBoolean(value);\n            if (this._flex) {\n                this.renderer.setStyle(this.elementRef.nativeElement, 'display', 'flex');\n            }\n            else {\n                this.renderer.removeStyle(this.elementRef.nativeElement, 'display');\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzFormItemComponent.prototype.enableHelp = /**\n     * @return {?}\n     */\n        function () {\n            this.withHelp++;\n        };\n    /**\n     * @return {?}\n     */\n    NzFormItemComponent.prototype.disableHelp = /**\n     * @return {?}\n     */\n        function () {\n            this.withHelp--;\n        };\n    return NzFormItemComponent;\n}(NzRowComponent));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzFormExplainComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzFormExplainComponent(nzFormItemComponent) {\n        this.nzFormItemComponent = nzFormItemComponent;\n    }\n    /**\n     * @return {?}\n     */\n    NzFormExplainComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.nzFormItemComponent.disableHelp();\n        };\n    /**\n     * @return {?}\n     */\n    NzFormExplainComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.nzFormItemComponent.enableHelp();\n        };\n    return NzFormExplainComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzFormExtraComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzFormExtraComponent() {\n    }\n    return NzFormExtraComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzFormLabelComponent = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(NzFormLabelComponent, _super);\n    function NzFormLabelComponent(nzUpdateHostClassService, elementRef, nzRowComponent, nzRowDirective, renderer) {\n        var _this = _super.call(this, nzUpdateHostClassService, elementRef, nzRowComponent, nzRowDirective, renderer) || this;\n        _this._required = false;\n        return _this;\n    }\n    Object.defineProperty(NzFormLabelComponent.prototype, \"nzRequired\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._required;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._required = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return NzFormLabelComponent;\n}(NzColComponent));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzFormSplitComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzFormSplitComponent() {\n    }\n    return NzFormSplitComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzFormTextComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzFormTextComponent() {\n    }\n    return NzFormTextComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzFormDirective = /** @class */ /*@__PURE__*/ (function () {\n    function NzFormDirective(elementRef, renderer, nzUpdateHostClassService) {\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        this.nzUpdateHostClassService = nzUpdateHostClassService;\n        this.el = this.elementRef.nativeElement;\n        this.prefixCls = 'ant-form';\n        this._layout = 'horizontal';\n    }\n    Object.defineProperty(NzFormDirective.prototype, \"nzLayout\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._layout;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._layout = value;\n            this.setClassMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzFormDirective.prototype.setClassMap = /**\n     * @return {?}\n     */\n        function () {\n            var _a;\n            /** @type {?} */\n            var classMap = (_a = {},\n                _a[\"\" + this.prefixCls] = true,\n                _a[this.prefixCls + \"-\" + this.nzLayout] = this.nzLayout,\n                _a);\n            this.nzUpdateHostClassService.updateHostClass(this.el, classMap);\n        };\n    /**\n     * @return {?}\n     */\n    NzFormDirective.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.setClassMap();\n        };\n    return NzFormDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzFormModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzFormModule() {\n    }\n    return NzFormModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzInputNumberComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzInputNumberComponent(elementRef, renderer) {\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        this.isInit = false;\n        this._disabled = false;\n        this._step = 1;\n        this._autoFocus = false;\n        this._formatter = function (value) { return value; };\n        this.isFocused = false;\n        this.el = this.elementRef.nativeElement;\n        this.prefixCls = 'ant-input-number';\n        this.disabledUp = false;\n        this.disabledDown = false;\n        this.onChange = function () { return null; };\n        this.onTouched = function () { return null; };\n        this.nzSize = 'default';\n        this.nzMin = -Infinity;\n        this.nzMax = Infinity;\n        this.nzParser = function (value) { return value; };\n        this.nzPlaceHolder = '';\n    }\n    Object.defineProperty(NzInputNumberComponent.prototype, \"isLarge\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzSize === 'large';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzInputNumberComponent.prototype, \"isSmall\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzSize === 'small';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzInputNumberComponent.prototype, \"nzAutoFocus\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._autoFocus;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._autoFocus = toBoolean(value);\n            this.updateAutoFocus();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzInputNumberComponent.prototype, \"nzDisabled\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._disabled;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._disabled = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzInputNumberComponent.prototype, \"nzStep\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._step;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._step = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzInputNumberComponent.prototype, \"nzFormatter\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._formatter;\n        },\n        set: /**\n         * @param {?} v\n         * @return {?}\n         */ function (v) {\n            this._formatter = v;\n            /** @type {?} */\n            var value = this.getCurrentValidValue(this.actualValue);\n            this.writeValue(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzInputNumberComponent.prototype.updateAutoFocus = /**\n     * @return {?}\n     */\n        function () {\n            if (this.nzAutoFocus) {\n                this.renderer.setAttribute(this.inputElement.nativeElement, 'autofocus', 'autofocus');\n            }\n            else {\n                this.renderer.removeAttribute(this.inputElement.nativeElement, 'autofocus');\n            }\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzInputNumberComponent.prototype.onModelChange = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.actualValue = this.nzParser(value.trim().replace(/。/g, '.').replace(/[^\\w\\.-]+/g, ''));\n            this.inputElement.nativeElement.value = this.actualValue;\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzInputNumberComponent.prototype.getCurrentValidValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            /** @type {?} */\n            var val = value;\n            if (val === '') {\n                val = '';\n            }\n            else if (!this.isNotCompleteNumber(val)) {\n                val = /** @type {?} */ (this.getValidValue(val));\n            }\n            else {\n                val = this.value;\n            }\n            return this.toNumber(val);\n        };\n    // '1.' '1x' 'xx' '' => are not complete numbers\n    /**\n     * @param {?} num\n     * @return {?}\n     */\n    NzInputNumberComponent.prototype.isNotCompleteNumber = /**\n     * @param {?} num\n     * @return {?}\n     */\n        function (num) {\n            return (isNaN(/** @type {?} */ (num)) ||\n                num === '' ||\n                num === null ||\n                (num && num.toString().indexOf('.') === num.toString().length - 1));\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzInputNumberComponent.prototype.getValidValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            /** @type {?} */\n            var val = parseFloat(/** @type {?} */ (value));\n            // https://github.com/ant-design/ant-design/issues/7358\n            if (isNaN(val)) {\n                return value;\n            }\n            if (val < this.nzMin) {\n                val = this.nzMin;\n            }\n            if (val > this.nzMax) {\n                val = this.nzMax;\n            }\n            return val;\n        };\n    /**\n     * @param {?} num\n     * @return {?}\n     */\n    NzInputNumberComponent.prototype.toNumber = /**\n     * @param {?} num\n     * @return {?}\n     */\n        function (num) {\n            if (this.isNotCompleteNumber(num)) {\n                return /** @type {?} */ (num);\n            }\n            if (isNotNil(this.nzPrecision)) {\n                return Number(Number(num).toFixed(this.nzPrecision));\n            }\n            return Number(num);\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzInputNumberComponent.prototype.onBlur = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            this.onTouched();\n            this.isFocused = false;\n            /** @type {?} */\n            var value = this.getCurrentValidValue(this.actualValue);\n            this.setValue(value, \"\" + this.value !== \"\" + value);\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzInputNumberComponent.prototype.onFocus = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            this.isFocused = true;\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzInputNumberComponent.prototype.getRatio = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            /** @type {?} */\n            var ratio = 1;\n            if (e.metaKey || e.ctrlKey) {\n                ratio = 0.1;\n            }\n            else if (e.shiftKey) {\n                ratio = 10;\n            }\n            return ratio;\n        };\n    /**\n     * @param {?} e\n     * @param {?=} ratio\n     * @return {?}\n     */\n    NzInputNumberComponent.prototype.down = /**\n     * @param {?} e\n     * @param {?=} ratio\n     * @return {?}\n     */\n        function (e, ratio) {\n            if (!this.isFocused) {\n                this.focus();\n            }\n            this.step('down', e, ratio);\n        };\n    /**\n     * @param {?} e\n     * @param {?=} ratio\n     * @return {?}\n     */\n    NzInputNumberComponent.prototype.up = /**\n     * @param {?} e\n     * @param {?=} ratio\n     * @return {?}\n     */\n        function (e, ratio) {\n            if (!this.isFocused) {\n                this.focus();\n            }\n            this.step('up', e, ratio);\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzInputNumberComponent.prototype.getPrecision = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            /** @type {?} */\n            var valueString = value.toString();\n            if (valueString.indexOf('e-') >= 0) {\n                return parseInt(valueString.slice(valueString.indexOf('e-') + 2), 10);\n            }\n            /** @type {?} */\n            var precision = 0;\n            if (valueString.indexOf('.') >= 0) {\n                precision = valueString.length - valueString.indexOf('.') - 1;\n            }\n            return precision;\n        };\n    // step={1.0} value={1.51}\n    // press +\n    // then value should be 2.51, rather than 2.5\n    // if this.props.precision is undefined\n    // https://github.com/react-component/input-number/issues/39\n    /**\n     * @param {?} currentValue\n     * @param {?} ratio\n     * @return {?}\n     */\n    NzInputNumberComponent.prototype.getMaxPrecision = /**\n     * @param {?} currentValue\n     * @param {?} ratio\n     * @return {?}\n     */\n        function (currentValue, ratio) {\n            if (isNotNil(this.nzPrecision)) {\n                return this.nzPrecision;\n            }\n            /** @type {?} */\n            var ratioPrecision = this.getPrecision(ratio);\n            /** @type {?} */\n            var stepPrecision = this.getPrecision(this.nzStep);\n            /** @type {?} */\n            var currentValuePrecision = this.getPrecision(/** @type {?} */ (currentValue));\n            if (!currentValue) {\n                return ratioPrecision + stepPrecision;\n            }\n            return Math.max(currentValuePrecision, ratioPrecision + stepPrecision);\n        };\n    /**\n     * @param {?} currentValue\n     * @param {?} ratio\n     * @return {?}\n     */\n    NzInputNumberComponent.prototype.getPrecisionFactor = /**\n     * @param {?} currentValue\n     * @param {?} ratio\n     * @return {?}\n     */\n        function (currentValue, ratio) {\n            /** @type {?} */\n            var precision = this.getMaxPrecision(currentValue, ratio);\n            return Math.pow(10, precision);\n        };\n    /**\n     * @param {?} val\n     * @param {?} rat\n     * @return {?}\n     */\n    NzInputNumberComponent.prototype.upStep = /**\n     * @param {?} val\n     * @param {?} rat\n     * @return {?}\n     */\n        function (val, rat) {\n            /** @type {?} */\n            var precisionFactor = this.getPrecisionFactor(val, rat);\n            /** @type {?} */\n            var precision = Math.abs(this.getMaxPrecision(val, rat));\n            /** @type {?} */\n            var result;\n            if (typeof val === 'number') {\n                result =\n                    ((precisionFactor * val + precisionFactor * this.nzStep * rat) /\n                        precisionFactor).toFixed(precision);\n            }\n            else {\n                result = this.nzMin === -Infinity ? this.nzStep : this.nzMin;\n            }\n            return this.toNumber(result);\n        };\n    /**\n     * @param {?} val\n     * @param {?} rat\n     * @return {?}\n     */\n    NzInputNumberComponent.prototype.downStep = /**\n     * @param {?} val\n     * @param {?} rat\n     * @return {?}\n     */\n        function (val, rat) {\n            /** @type {?} */\n            var precisionFactor = this.getPrecisionFactor(val, rat);\n            /** @type {?} */\n            var precision = Math.abs(this.getMaxPrecision(val, rat));\n            /** @type {?} */\n            var result;\n            if (typeof val === 'number') {\n                result =\n                    ((precisionFactor * val - precisionFactor * this.nzStep * rat) /\n                        precisionFactor).toFixed(precision);\n            }\n            else {\n                result = this.nzMin === -Infinity ? -this.nzStep : this.nzMin;\n            }\n            return this.toNumber(result);\n        };\n    /**\n     * @param {?} type\n     * @param {?} e\n     * @param {?=} ratio\n     * @return {?}\n     */\n    NzInputNumberComponent.prototype.step = /**\n     * @param {?} type\n     * @param {?} e\n     * @param {?=} ratio\n     * @return {?}\n     */\n        function (type, e, ratio) {\n            var _this = this;\n            if (ratio === void 0) {\n                ratio = 1;\n            }\n            this.stop();\n            e.preventDefault();\n            if (this.nzDisabled) {\n                return;\n            }\n            /** @type {?} */\n            var value = this.getCurrentValidValue(this.actualValue) || 0;\n            /** @type {?} */\n            var val;\n            if (type === 'up') {\n                val = this.upStep(value, ratio);\n            }\n            else if (type === 'down') {\n                val = this.downStep(value, ratio);\n            }\n            /** @type {?} */\n            var outOfRange = val > this.nzMax || val < this.nzMin;\n            if (val > this.nzMax) {\n                val = this.nzMax;\n            }\n            else if (val < this.nzMin) {\n                val = this.nzMin;\n            }\n            this.setValue(val, true);\n            this.isFocused = true;\n            if (outOfRange) {\n                return;\n            }\n            this.autoStepTimer = setTimeout(function () {\n                _this[type](e, ratio, true);\n            }, 600);\n        };\n    /**\n     * @return {?}\n     */\n    NzInputNumberComponent.prototype.stop = /**\n     * @return {?}\n     */\n        function () {\n            if (this.autoStepTimer) {\n                clearTimeout(this.autoStepTimer);\n            }\n        };\n    /**\n     * @param {?} value\n     * @param {?} emit\n     * @return {?}\n     */\n    NzInputNumberComponent.prototype.setValue = /**\n     * @param {?} value\n     * @param {?} emit\n     * @return {?}\n     */\n        function (value, emit) {\n            if (emit && (\"\" + this.value !== \"\" + value)) {\n                this.onChange(value);\n            }\n            this.value = value;\n            this.actualValue = value;\n            /** @type {?} */\n            var displayValue = isNotNil(this.nzFormatter(this.value)) ? this.nzFormatter(this.value) : '';\n            this.displayValue = displayValue;\n            this.inputElement.nativeElement.value = displayValue;\n            this.disabledUp = this.disabledDown = false;\n            if (value || value === 0) {\n                /** @type {?} */\n                var val = Number(value);\n                if (val >= this.nzMax) {\n                    this.disabledUp = true;\n                }\n                if (val <= this.nzMin) {\n                    this.disabledDown = true;\n                }\n            }\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzInputNumberComponent.prototype.onKeyDown = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            if (e.code === 'ArrowUp' || e.keyCode === UP_ARROW) {\n                /** @type {?} */\n                var ratio = this.getRatio(e);\n                this.up(e, ratio);\n                this.stop();\n            }\n            else if (e.code === 'ArrowDown' || e.keyCode === DOWN_ARROW) {\n                /** @type {?} */\n                var ratio = this.getRatio(e);\n                this.down(e, ratio);\n                this.stop();\n            }\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzInputNumberComponent.prototype.onKeyUp = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            this.stop();\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzInputNumberComponent.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.setValue(value, false);\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzInputNumberComponent.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this.onChange = fn;\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzInputNumberComponent.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this.onTouched = fn;\n        };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    NzInputNumberComponent.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n        function (isDisabled) {\n            this.nzDisabled = isDisabled;\n        };\n    /**\n     * @return {?}\n     */\n    NzInputNumberComponent.prototype.focus = /**\n     * @return {?}\n     */\n        function () {\n            this.inputElement.nativeElement.focus();\n        };\n    /**\n     * @return {?}\n     */\n    NzInputNumberComponent.prototype.blur = /**\n     * @return {?}\n     */\n        function () {\n            this.inputElement.nativeElement.blur();\n        };\n    /**\n     * @return {?}\n     */\n    NzInputNumberComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            this.isInit = true;\n            if (this._autoFocus) {\n                this.focus();\n            }\n        };\n    return NzInputNumberComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzInputNumberModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzInputNumberModule() {\n    }\n    return NzInputNumberModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzMatchMediaService = /** @class */ /*@__PURE__*/ (function () {\n    function NzMatchMediaService() {\n    }\n    /**\n     * @param {?} mediaQuery\n     * @return {?}\n     */\n    NzMatchMediaService.prototype.matchMedia = /**\n     * @param {?} mediaQuery\n     * @return {?}\n     */\n        function (mediaQuery) {\n            return matchMedia(mediaQuery);\n        };\n    return NzMatchMediaService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzContentComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzContentComponent() {\n    }\n    return NzContentComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzFooterComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzFooterComponent() {\n    }\n    return NzFooterComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzHeaderComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzHeaderComponent() {\n    }\n    return NzHeaderComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzLayoutComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzLayoutComponent() {\n        this.hasSider = false;\n    }\n    return NzLayoutComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzSiderComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzSiderComponent(nzLayoutComponent, nzMatchMediaService) {\n        this.nzLayoutComponent = nzLayoutComponent;\n        this.nzMatchMediaService = nzMatchMediaService;\n        this._collapsed = false;\n        this._collapsible = false;\n        this._reverseArrow = false;\n        this.below = false;\n        this.isInit = false;\n        this.dimensionMap = {\n            xs: '480px',\n            sm: '576px',\n            md: '768px',\n            lg: '992px',\n            xl: '1200px',\n            xxl: '1600px'\n        };\n        this.nzWidth = 200;\n        this.nzCollapsedWidth = 80;\n        this.nzCollapsedChange = new EventEmitter();\n    }\n    Object.defineProperty(NzSiderComponent.prototype, \"nzReverseArrow\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._reverseArrow;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._reverseArrow = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSiderComponent.prototype, \"nzTrigger\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._trigger;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._trigger = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSiderComponent.prototype, \"nzCollapsible\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._collapsible;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._collapsible = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSiderComponent.prototype, \"nzCollapsed\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._collapsed;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._collapsed = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSiderComponent.prototype, \"setZeroClass\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzCollapsed && (this.nzCollapsedWidth === 0);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSiderComponent.prototype, \"setFlex\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            if (this.nzCollapsed) {\n                return \"0 0 \" + this.nzCollapsedWidth + \"px\";\n            }\n            else {\n                return \"0 0 \" + this.nzWidth + \"px\";\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSiderComponent.prototype, \"setWidth\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            if (this.nzCollapsed) {\n                return this.nzCollapsedWidth;\n            }\n            else {\n                return this.nzWidth;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzSiderComponent.prototype.onWindowResize = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            this.watchMatchMedia();\n        };\n    /**\n     * @return {?}\n     */\n    NzSiderComponent.prototype.watchMatchMedia = /**\n     * @return {?}\n     */\n        function () {\n            if (this.nzBreakpoint) {\n                /** @type {?} */\n                var matchBelow = this.nzMatchMediaService.matchMedia(\"(max-width: \" + this.dimensionMap[this.nzBreakpoint] + \")\").matches;\n                this.below = matchBelow;\n                this.nzCollapsed = matchBelow;\n                if (this.isInit) {\n                    this.nzCollapsedChange.emit(matchBelow);\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzSiderComponent.prototype.toggleCollapse = /**\n     * @return {?}\n     */\n        function () {\n            this.nzCollapsed = !this.nzCollapsed;\n            this.nzCollapsedChange.emit(this.nzCollapsed);\n        };\n    Object.defineProperty(NzSiderComponent.prototype, \"isZeroTrigger\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzCollapsible && this.nzTrigger && (this.nzCollapsedWidth === 0) && ((this.nzBreakpoint && this.below) || (!this.nzBreakpoint));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSiderComponent.prototype, \"isSiderTrigger\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzCollapsible && this.nzTrigger && (this.nzCollapsedWidth !== 0);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzSiderComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            if (this.nzLayoutComponent) {\n                this.nzLayoutComponent.hasSider = true;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzSiderComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.isInit = true;\n            Promise.resolve().then(function () { return _this.watchMatchMedia(); });\n        };\n    return NzSiderComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzLayoutModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzLayoutModule() {\n    }\n    return NzLayoutModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzSpinComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzSpinComponent(elementRef, renderer, zone) {\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        this.zone = zone;\n        this._delay = 0;\n        this.el = this.elementRef.nativeElement;\n        this.baseSpinning$ = new BehaviorSubject(true);\n        this.resultSpinning$ = this.baseSpinning$.asObservable().pipe(debounceTime(this.nzDelay));\n        this.nzSize = 'default';\n    }\n    Object.defineProperty(NzSpinComponent.prototype, \"nzDelay\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._delay;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (isNotNil(value)) {\n                this._delay = value;\n                this.resultSpinning$ = this.baseSpinning$.asObservable().pipe(debounceTime(this.nzDelay));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSpinComponent.prototype, \"nzTip\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._tip;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._tip = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSpinComponent.prototype, \"nzSpinning\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.baseSpinning$.next(toBoolean(value));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzSpinComponent.prototype.checkNested = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var containerElement = this.containerElement.nativeElement;\n            /** @type {?} */\n            var nestedElement = this.nestedElement.nativeElement;\n            /** no way to detect empty https://github.com/angular/angular/issues/12530 **/\n            /** https://github.com/angular/material2/issues/11280 **/\n            if (!isEmpty(containerElement)) {\n                this.renderer.removeStyle(containerElement, 'display');\n                this.renderer.setStyle(this.el, 'display', 'block');\n                this.renderer.addClass(nestedElement, 'ant-spin-nested-loading');\n            }\n            else {\n                this.renderer.setStyle(containerElement, 'display', 'none');\n                this.renderer.removeStyle(this.el, 'display');\n                this.renderer.removeClass(nestedElement, 'ant-spin-nested-loading');\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzSpinComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            this.checkNested();\n        };\n    return NzSpinComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzSpinModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzSpinModule() {\n    }\n    return NzSpinModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzListItemMetaComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzListItemMetaComponent() {\n        this.isAvatar = false;\n        this.avatarStr = '';\n        this.isTitle = false;\n        this.titleStr = '';\n        this.isDesc = false;\n        this.descStr = '';\n    }\n    Object.defineProperty(NzListItemMetaComponent.prototype, \"nzAvatar\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (value instanceof TemplateRef) {\n                this.avatarStr = null;\n                this.avatarTpl = value;\n            }\n            else {\n                this.avatarStr = value;\n            }\n            this.isAvatar = !!value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzListItemMetaComponent.prototype, \"nzTitle\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (value instanceof TemplateRef) {\n                this.titleStr = null;\n                this.titleTpl = value;\n            }\n            else {\n                this.titleStr = value;\n            }\n            this.isTitle = !!value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzListItemMetaComponent.prototype, \"nzDescription\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (value instanceof TemplateRef) {\n                this.descStr = null;\n                this.descTpl = value;\n            }\n            else {\n                this.descStr = value;\n            }\n            this.isDesc = !!value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return NzListItemMetaComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzListItemComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzListItemComponent() {\n        this.nzActions = [];\n        this.isCon = false;\n        this.conStr = '';\n    }\n    Object.defineProperty(NzListItemComponent.prototype, \"nzContent\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (value instanceof TemplateRef) {\n                this.conStr = null;\n                this.conTpl = value;\n            }\n            else {\n                this.conStr = value;\n            }\n            this.isCon = !!value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return NzListItemComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzListComponent = /** @class */ /*@__PURE__*/ (function () {\n    // #endregion\n    function NzListComponent(el, cd, updateHostClassService, i18n) {\n        this.el = el;\n        this.cd = cd;\n        this.updateHostClassService = updateHostClassService;\n        this.i18n = i18n;\n        /* tslint:disable-next-line:no-any */\n        this.locale = {};\n        this.nzBordered = false;\n        this._isHeader = false;\n        this._header = '';\n        this._isFooter = false;\n        this._footer = '';\n        this.nzItemLayout = 'horizontal';\n        this.nzLoading = false;\n        this.nzSize = 'default';\n        this.nzSplit = true;\n        this.prefixCls = 'ant-list';\n    }\n    Object.defineProperty(NzListComponent.prototype, \"nzHeader\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (value instanceof TemplateRef) {\n                this._header = null;\n                this._headerTpl = value;\n            }\n            else {\n                this._header = value;\n            }\n            this._isHeader = !!value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzListComponent.prototype, \"nzFooter\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (value instanceof TemplateRef) {\n                this._footer = null;\n                this._footerTpl = value;\n            }\n            else {\n                this._footer = value;\n            }\n            this._isFooter = !!value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzListComponent.prototype._setClassMap = /**\n     * @return {?}\n     */\n        function () {\n            var _a;\n            /** @type {?} */\n            var classMap = (_a = {},\n                _a[this.prefixCls] = true,\n                _a[this.prefixCls + \"-vertical\"] = this.nzItemLayout === 'vertical',\n                _a[this.prefixCls + \"-lg\"] = this.nzSize === 'large',\n                _a[this.prefixCls + \"-sm\"] = this.nzSize === 'small',\n                _a[this.prefixCls + \"-split\"] = this.nzSplit,\n                _a[this.prefixCls + \"-bordered\"] = this.nzBordered,\n                _a[this.prefixCls + \"-loading\"] = this.nzLoading,\n                _a[this.prefixCls + \"-grid\"] = this.nzGrid,\n                _a[this.prefixCls + \"-something-after-last-item\"] = !!(this.nzLoadMore || this.nzPagination || this._isFooter),\n                _a);\n            this.updateHostClassService.updateHostClass(this.el.nativeElement, classMap);\n        };\n    /**\n     * @return {?}\n     */\n    NzListComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.i18n$ = this.i18n.localeChange.subscribe(function () {\n                _this.locale = _this.i18n.getLocaleData('Table');\n                _this.cd.detectChanges();\n            });\n        };\n    /**\n     * @return {?}\n     */\n    NzListComponent.prototype.ngOnChanges = /**\n     * @return {?}\n     */\n        function () {\n            this._setClassMap();\n        };\n    /**\n     * @return {?}\n     */\n    NzListComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.i18n$.unsubscribe();\n        };\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Object)\n    ], NzListComponent.prototype, \"nzBordered\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Object)\n    ], NzListComponent.prototype, \"nzLoading\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Object)\n    ], NzListComponent.prototype, \"nzSplit\", void 0);\n    return NzListComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzListModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzListModule() {\n    }\n    return NzListModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzMentionSuggestionDirective = /** @class */ /*@__PURE__*/ (function () {\n    function NzMentionSuggestionDirective() {\n    }\n    return NzMentionSuggestionDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar NZ_MENTION_TRIGGER_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: /*@__PURE__*/ forwardRef(function () { return NzMentionTriggerDirective; }),\n    multi: true\n};\nvar NzMentionTriggerDirective = /** @class */ /*@__PURE__*/ (function () {\n    function NzMentionTriggerDirective(el) {\n        this.el = el;\n        this.onFocusin = new EventEmitter();\n        this.onBlur = new EventEmitter();\n        this.onInput = new EventEmitter();\n        this.onKeydown = new EventEmitter();\n        this.onClick = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    NzMentionTriggerDirective.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.completeEvents();\n        };\n    /**\n     * @return {?}\n     */\n    NzMentionTriggerDirective.prototype.completeEvents = /**\n     * @return {?}\n     */\n        function () {\n            this.onFocusin.complete();\n            this.onBlur.complete();\n            this.onInput.complete();\n            this.onKeydown.complete();\n            this.onClick.complete();\n        };\n    /**\n     * @param {?=} caretPos\n     * @return {?}\n     */\n    NzMentionTriggerDirective.prototype.focus = /**\n     * @param {?=} caretPos\n     * @return {?}\n     */\n        function (caretPos) {\n            this.el.nativeElement.focus();\n            this.el.nativeElement.setSelectionRange(caretPos, caretPos);\n        };\n    /**\n     * @param {?} mention\n     * @return {?}\n     */\n    NzMentionTriggerDirective.prototype.insertMention = /**\n     * @param {?} mention\n     * @return {?}\n     */\n        function (mention) {\n            /** @type {?} */\n            var value = this.el.nativeElement.value;\n            /** @type {?} */\n            var insertValue = mention.mention.trim() + ' ';\n            /** @type {?} */\n            var newValue = [\n                value.slice(0, mention.startPos + 1),\n                insertValue,\n                value.slice(mention.endPos, value.length)\n            ].join('');\n            this.el.nativeElement.value = newValue;\n            this.focus(mention.startPos + insertValue.length + 1);\n            this.onChange(newValue);\n            this.value = newValue;\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzMentionTriggerDirective.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.value = value;\n            if (typeof value === 'string') {\n                this.el.nativeElement.value = value;\n            }\n            else {\n                this.el.nativeElement.value = '';\n            }\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzMentionTriggerDirective.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this.onChange = fn;\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzMentionTriggerDirective.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this.onTouched = fn;\n        };\n    return NzMentionTriggerDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} prefix\n * @return {?}\n */\nfunction getRegExp(prefix) {\n    /** @type {?} */\n    var prefixArray = Array.isArray(prefix) ? prefix : [prefix];\n    /** @type {?} */\n    var prefixToken = prefixArray.join('').replace(/(\\$|\\^)/g, '\\\\$1');\n    if (prefixArray.length > 1) {\n        prefixToken = \"[\" + prefixToken + \"]\";\n    }\n    return new RegExp(\"(\\\\s|^)(\" + prefixToken + \")[^\\\\s]*\", 'g');\n}\n/**\n * @param {?} value\n * @param {?=} prefix\n * @return {?}\n */\nfunction getMentions(value, prefix) {\n    if (prefix === void 0) {\n        prefix = '@';\n    }\n    if (typeof value !== 'string') {\n        return [];\n    }\n    /** @type {?} */\n    var regex = getRegExp(prefix);\n    /** @type {?} */\n    var mentions = value.match(regex);\n    return mentions !== null ? mentions.map(function (e) { return e.trim(); }) : [];\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// from https://github.com/component/textarea-caret-position\n/** @type {?} */\nvar properties = [\n    'direction',\n    'boxSizing',\n    'width',\n    'height',\n    'overflowX',\n    'overflowY',\n    'borderTopWidth',\n    'borderRightWidth',\n    'borderBottomWidth',\n    'borderLeftWidth',\n    'borderStyle',\n    'paddingTop',\n    'paddingRight',\n    'paddingBottom',\n    'paddingLeft',\n    'fontStyle',\n    'fontVariant',\n    'fontWeight',\n    'fontStretch',\n    'fontSize',\n    'fontSizeAdjust',\n    'lineHeight',\n    'fontFamily',\n    'textAlign',\n    'textTransform',\n    'textIndent',\n    'textDecoration',\n    'letterSpacing',\n    'wordSpacing',\n    'tabSize',\n    'MozTabSize'\n];\n/** @type {?} */\nvar isBrowser = (typeof window !== 'undefined');\n/** @type {?} */\nvar isFirefox = (isBrowser && ( /** @type {?} */(window)).mozInnerScreenX != null);\n/** @type {?} */\nvar _parseInt = function (str) { return parseInt(str, 10); };\n/**\n * @param {?} element\n * @param {?} position\n * @param {?=} options\n * @return {?}\n */\nfunction getCaretCoordinates(element, position, options) {\n    if (!isBrowser) {\n        throw new Error('textarea-caret-position#getCaretCoordinates should only be called in a browser');\n    }\n    /** @type {?} */\n    var debug = options && options.debug || false;\n    if (debug) {\n        /** @type {?} */\n        var el = document.querySelector('#input-textarea-caret-position-mirror-div');\n        if (el) {\n            el.parentNode.removeChild(el);\n        }\n    }\n    /** @type {?} */\n    var div = document.createElement('div');\n    div.id = 'input-textarea-caret-position-mirror-div';\n    document.body.appendChild(div);\n    /** @type {?} */\n    var style$$1 = div.style;\n    /** @type {?} */\n    var computed = window.getComputedStyle ? window.getComputedStyle(element) : ( /** @type {?} */(element)).currentStyle;\n    /** @type {?} */\n    var isInput = element.nodeName === 'INPUT';\n    // Default textarea styles\n    style$$1.whiteSpace = 'pre-wrap';\n    if (!isInput) {\n        style$$1.wordWrap = 'break-word'; // only for textarea-s\n    }\n    // Position off-screen\n    style$$1.position = 'absolute'; // required to return coordinates properly\n    if (!debug) {\n        style$$1.visibility = 'hidden';\n    } // not 'display: none' because we want rendering\n    // Transfer the element's properties to the div\n    properties.forEach(function (prop) {\n        if (isInput && prop === 'lineHeight') {\n            // Special case for <input>s because text is rendered centered and line height may be != height\n            style$$1.lineHeight = computed.height;\n        }\n        else {\n            style$$1[prop] = computed[prop];\n        }\n    });\n    if (isFirefox) {\n        // Firefox lies about the overflow property for textareas: https://bugzilla.mozilla.org/show_bug.cgi?id=984275\n        if (element.scrollHeight > _parseInt(computed.height)) {\n            style$$1.overflowY = 'scroll';\n        }\n    }\n    else {\n        style$$1.overflow = 'hidden'; // for Chrome to not render a scrollbar; IE keeps overflowY = 'scroll'\n    }\n    div.textContent = element.value.substring(0, position);\n    // The second special handling for input type=\"text\" vs textarea:\n    // spaces need to be replaced with non-breaking spaces - http://stackoverflow.com/a/13402035/1269037\n    if (isInput) {\n        div.textContent = div.textContent.replace(/\\s/g, '\\u00a0');\n    }\n    /** @type {?} */\n    var span = document.createElement('span');\n    // Wrapping must be replicated *exactly*, including when a long word gets\n    // onto the next line, with whitespace at the end of the line before (#7).\n    // The  *only* reliable way to do that is to copy the *entire* rest of the\n    // textarea's content into the <span> created at the caret position.\n    // For inputs, just '.' would be enough, but no need to bother.\n    span.textContent = element.value.substring(position) || '.'; // || because a completely empty faux span doesn't render at all\n    div.appendChild(span);\n    /** @type {?} */\n    var coordinates = {\n        top: span.offsetTop + _parseInt(computed.borderTopWidth),\n        left: span.offsetLeft + _parseInt(computed.borderLeftWidth),\n        height: _parseInt(computed.lineHeight)\n    };\n    if (debug) {\n        span.style.backgroundColor = '#eee';\n        createDebugEle(element, coordinates);\n    }\n    else {\n        document.body.removeChild(div);\n    }\n    return coordinates;\n}\n/**\n * @param {?} element\n * @param {?} coordinates\n * @return {?}\n */\nfunction createDebugEle(element, coordinates) {\n    /** @type {?} */\n    var fontSize = getComputedStyle(element).getPropertyValue('font-size');\n    /** @type {?} */\n    var rect = ( /** @type {?} */(document.querySelector('#DEBUG')))\n        || document.createElement('div');\n    document.body.appendChild(rect);\n    rect.id = 'DEBUG';\n    rect.style.position = 'absolute';\n    rect.style.backgroundColor = 'red';\n    rect.style.height = fontSize;\n    rect.style.width = '1px';\n    rect.style.top = element.getBoundingClientRect().top - element.scrollTop + window.pageYOffset + coordinates.top + \"px\";\n    rect.style.left = element.getBoundingClientRect().left - element.scrollLeft + window.pageXOffset + coordinates.left + \"px\";\n    console.log(rect.style.top);\n    console.log(rect.style.left);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzMentionComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzMentionComponent(document, ngZone, overlay, viewContainerRef) {\n        this.document = document;\n        this.ngZone = ngZone;\n        this.overlay = overlay;\n        this.viewContainerRef = viewContainerRef;\n        this.nzOnSelect = new EventEmitter();\n        this.nzOnSearchChange = new EventEmitter();\n        this.nzValueWith = function (value) { return value; };\n        this.nzPrefix = '@';\n        this.nzLoading = false;\n        this.nzNotFoundContent = '无匹配结果，轻敲空格完成输入';\n        this.isOpen = false;\n        this.suggestionTemplate = null;\n        this.activeIndex = -1;\n        this._placement = 'bottom';\n    }\n    Object.defineProperty(NzMentionComponent.prototype, \"nzSuggestions\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._suggestions;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._suggestions = value;\n            if (this.isOpen) {\n                this.previousValue = null;\n                this.activeIndex = -1;\n                this.resetDropdown(false);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzMentionComponent.prototype, \"nzPlacement\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._placement;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._placement = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzMentionComponent.prototype, \"suggestionChild\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (value) {\n                this.suggestionTemplate = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzMentionComponent.prototype, \"triggerNativeElement\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.trigger.el.nativeElement;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzMentionComponent.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n        function () {\n            this.bindTriggerEvents();\n        };\n    /**\n     * @return {?}\n     */\n    NzMentionComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.closeDropdown();\n        };\n    /**\n     * @return {?}\n     */\n    NzMentionComponent.prototype.closeDropdown = /**\n     * @return {?}\n     */\n        function () {\n            if (this.overlayRef && this.overlayRef.hasAttached()) {\n                this.overlayRef.detach();\n                this.overlayBackdropClickSubscription.unsubscribe();\n                this.isOpen = false;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzMentionComponent.prototype.openDropdown = /**\n     * @return {?}\n     */\n        function () {\n            this.attachOverlay();\n            this.isOpen = true;\n        };\n    /**\n     * @return {?}\n     */\n    NzMentionComponent.prototype.getMentions = /**\n     * @return {?}\n     */\n        function () {\n            return getMentions(this.trigger.value, this.nzPrefix);\n        };\n    /**\n     * @param {?} suggestion\n     * @return {?}\n     */\n    NzMentionComponent.prototype.selectSuggestion = /**\n     * @param {?} suggestion\n     * @return {?}\n     */\n        function (suggestion) {\n            /** @type {?} */\n            var value = this.nzValueWith(suggestion);\n            this.trigger.insertMention({\n                mention: value,\n                startPos: this.cursorMentionStart,\n                endPos: this.cursorMentionEnd\n            });\n            this.nzOnSelect.emit(suggestion);\n            this.closeDropdown();\n            this.activeIndex = -1;\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NzMentionComponent.prototype.handleInput = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            /** @type {?} */\n            var target = /** @type {?} */ (event.target);\n            this.trigger.onChange(target.value);\n            this.trigger.value = target.value;\n            this.resetDropdown();\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NzMentionComponent.prototype.handleKeydown = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            /** @type {?} */\n            var keyCode = event.keyCode;\n            if (this.isOpen && keyCode === ENTER && this.activeIndex !== -1 && this.filteredSuggestions.length) {\n                this.selectSuggestion(this.filteredSuggestions[this.activeIndex]);\n                event.preventDefault();\n            }\n            else if (keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW) {\n                this.resetDropdown();\n                event.stopPropagation();\n            }\n            else {\n                if (this.isOpen && (keyCode === TAB || keyCode === ESCAPE)) {\n                    this.closeDropdown();\n                    return;\n                }\n                if (this.isOpen && (keyCode === UP_ARROW)) {\n                    this.setPreviousItemActive();\n                    event.preventDefault();\n                    event.stopPropagation();\n                }\n                if (this.isOpen && (keyCode === DOWN_ARROW)) {\n                    this.setNextItemActive();\n                    event.preventDefault();\n                    event.stopPropagation();\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzMentionComponent.prototype.handleClick = /**\n     * @return {?}\n     */\n        function () {\n            this.resetDropdown();\n        };\n    /**\n     * @return {?}\n     */\n    NzMentionComponent.prototype.bindTriggerEvents = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.trigger.onInput.subscribe(function (e) { return _this.handleInput(e); });\n            this.trigger.onKeydown.subscribe(function (e) { return _this.handleKeydown(e); });\n            this.trigger.onClick.subscribe(function () { return _this.handleClick(); });\n        };\n    /**\n     * @param {?} value\n     * @param {?} emit\n     * @return {?}\n     */\n    NzMentionComponent.prototype.suggestionsFilter = /**\n     * @param {?} value\n     * @param {?} emit\n     * @return {?}\n     */\n        function (value, emit) {\n            var _this = this;\n            /** @type {?} */\n            var suggestions = value.substring(1);\n            if (this.previousValue === value) {\n                return;\n            }\n            this.previousValue = value;\n            if (emit) {\n                this.nzOnSearchChange.emit({\n                    value: this.cursorMention.substring(1),\n                    prefix: this.cursorMention[0]\n                });\n            }\n            /** @type {?} */\n            var searchValue = suggestions.toLowerCase();\n            this.filteredSuggestions = this.nzSuggestions\n                .filter(function (suggestion) { return _this.nzValueWith(suggestion).toLowerCase().includes(searchValue); });\n        };\n    /**\n     * @param {?=} emit\n     * @return {?}\n     */\n    NzMentionComponent.prototype.resetDropdown = /**\n     * @param {?=} emit\n     * @return {?}\n     */\n        function (emit) {\n            if (emit === void 0) {\n                emit = true;\n            }\n            this.resetCursorMention();\n            if (typeof this.cursorMention !== 'string' || !this.canOpen()) {\n                this.closeDropdown();\n                return;\n            }\n            this.suggestionsFilter(this.cursorMention, emit);\n            /** @type {?} */\n            var activeIndex = this.filteredSuggestions.indexOf(this.cursorMention.substring(1));\n            this.activeIndex = activeIndex >= 0 ? activeIndex : 0;\n            this.openDropdown();\n        };\n    /**\n     * @return {?}\n     */\n    NzMentionComponent.prototype.setNextItemActive = /**\n     * @return {?}\n     */\n        function () {\n            this.activeIndex = this.activeIndex + 1 <= this.filteredSuggestions.length - 1\n                ? this.activeIndex + 1\n                : 0;\n        };\n    /**\n     * @return {?}\n     */\n    NzMentionComponent.prototype.setPreviousItemActive = /**\n     * @return {?}\n     */\n        function () {\n            this.activeIndex = this.activeIndex - 1 < 0\n                ? this.filteredSuggestions.length - 1\n                : this.activeIndex - 1;\n        };\n    /**\n     * @return {?}\n     */\n    NzMentionComponent.prototype.canOpen = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var element = this.triggerNativeElement;\n            return !element.readOnly && !element.disabled;\n        };\n    /**\n     * @return {?}\n     */\n    NzMentionComponent.prototype.resetCursorMention = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var value = this.triggerNativeElement.value.replace(/[\\r\\n]/g, ' ') || '';\n            /** @type {?} */\n            var selectionStart = this.triggerNativeElement.selectionStart;\n            /** @type {?} */\n            var prefix = typeof this.nzPrefix === 'string' ? [this.nzPrefix] : this.nzPrefix;\n            /** @type {?} */\n            var i = prefix.length;\n            while (i >= 0) {\n                /** @type {?} */\n                var startPos = value.lastIndexOf(prefix[i], selectionStart);\n                /** @type {?} */\n                var endPos = value.indexOf(' ', selectionStart) > -1 ? value.indexOf(' ', selectionStart) : value.length;\n                /** @type {?} */\n                var mention = value.substring(startPos, endPos);\n                if ((startPos > 0 && value[startPos - 1] !== ' ')\n                    || startPos < 0\n                    || mention.includes(prefix[i], 1)\n                    || mention.includes(' ')) {\n                    this.cursorMention = null;\n                    this.cursorMentionStart = -1;\n                    this.cursorMentionEnd = -1;\n                }\n                else {\n                    this.cursorMention = mention;\n                    this.cursorMentionStart = startPos;\n                    this.cursorMentionEnd = endPos;\n                    return;\n                }\n                i--;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzMentionComponent.prototype.updatePositions = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var coordinates = getCaretCoordinates(this.triggerNativeElement, this.cursorMentionStart);\n            /** @type {?} */\n            var top = coordinates.top\n                - this.triggerNativeElement.getBoundingClientRect().height\n                - this.triggerNativeElement.scrollTop\n                + (this.nzPlacement === 'bottom' ? coordinates.height : 0);\n            /** @type {?} */\n            var left = coordinates.left - this.triggerNativeElement.scrollLeft;\n            this.positionStrategy.withDefaultOffsetX(left).withDefaultOffsetY(top);\n            if (this.nzPlacement === 'bottom') {\n                this.positionStrategy.withPositions([DEFAULT_MENTION_POSITIONS[0]]);\n            }\n            if (this.nzPlacement === 'top') {\n                this.positionStrategy.withPositions([DEFAULT_MENTION_POSITIONS[1]]);\n            }\n            this.positionStrategy.apply();\n        };\n    /**\n     * @return {?}\n     */\n    NzMentionComponent.prototype.subscribeOverlayBackdropClick = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            return merge(fromEvent(this.document, 'click'), fromEvent(this.document, 'touchend'))\n                .subscribe(function (event) {\n                /** @type {?} */\n                var clickTarget = /** @type {?} */ (event.target);\n                if (clickTarget !== _this.trigger.el.nativeElement && _this.isOpen) {\n                    _this.closeDropdown();\n                }\n            });\n        };\n    /**\n     * @return {?}\n     */\n    NzMentionComponent.prototype.attachOverlay = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.overlayRef) {\n                this.portal = new TemplatePortal(this.suggestionsTemp, this.viewContainerRef);\n                this.overlayRef = this.overlay.create(this.getOverlayConfig());\n            }\n            if (this.overlayRef && !this.overlayRef.hasAttached()) {\n                this.overlayRef.attach(this.portal);\n                this.overlayBackdropClickSubscription = this.subscribeOverlayBackdropClick();\n            }\n            this.updatePositions();\n        };\n    /**\n     * @return {?}\n     */\n    NzMentionComponent.prototype.getOverlayConfig = /**\n     * @return {?}\n     */\n        function () {\n            return new OverlayConfig({\n                positionStrategy: this.getOverlayPosition(),\n                scrollStrategy: this.overlay.scrollStrategies.reposition()\n            });\n        };\n    /**\n     * @return {?}\n     */\n    NzMentionComponent.prototype.getOverlayPosition = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var positions = [\n                new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\n                new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' })\n            ];\n            this.positionStrategy = this.overlay.position()\n                .flexibleConnectedTo(this.trigger.el)\n                .withPositions(positions)\n                .withFlexibleDimensions(false)\n                .withPush(false);\n            return this.positionStrategy;\n        };\n    return NzMentionComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar COMPONENTS = [NzMentionComponent, NzMentionTriggerDirective, NzMentionSuggestionDirective];\nvar NzMentionModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzMentionModule() {\n    }\n    return NzMentionModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar NZ_MESSAGE_DEFAULT_CONFIG = /*@__PURE__*/ new InjectionToken('NZ_MESSAGE_DEFAULT_CONFIG');\n/** @type {?} */\nvar NZ_MESSAGE_CONFIG = /*@__PURE__*/ new InjectionToken('NZ_MESSAGE_CONFIG');\n/** @type {?} */\nvar NZ_MESSAGE_DEFAULT_CONFIG_PROVIDER = {\n    provide: NZ_MESSAGE_DEFAULT_CONFIG,\n    useValue: {\n        nzDuration: 3000,\n        nzAnimate: true,\n        nzPauseOnHover: true,\n        nzMaxStack: 7\n    }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzMessageContainerComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzMessageContainerComponent(defaultConfig, config) {\n        this.messages = [];\n        this.config = {};\n        this.setConfig(__assign({}, defaultConfig, config));\n    }\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    NzMessageContainerComponent.prototype.setConfig = /**\n     * @param {?} config\n     * @return {?}\n     */\n        function (config) {\n            this.config = __assign({}, this.config, config);\n        };\n    // Create a new message\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    NzMessageContainerComponent.prototype.createMessage = /**\n     * @param {?} message\n     * @return {?}\n     */\n        function (message) {\n            if (this.messages.length >= this.config.nzMaxStack) {\n                this.messages.splice(0, 1);\n            }\n            message.options = this._mergeMessageOptions(message.options);\n            this.messages.push(message);\n        };\n    // Remove a message by messageId\n    /**\n     * @param {?} messageId\n     * @return {?}\n     */\n    NzMessageContainerComponent.prototype.removeMessage = /**\n     * @param {?} messageId\n     * @return {?}\n     */\n        function (messageId) {\n            var _this = this;\n            this.messages.some(function (message, index) {\n                if (message.messageId === messageId) {\n                    _this.messages.splice(index, 1);\n                    return true;\n                }\n            });\n        };\n    // Remove all messages\n    /**\n     * @return {?}\n     */\n    NzMessageContainerComponent.prototype.removeMessageAll = /**\n     * @return {?}\n     */\n        function () {\n            this.messages = [];\n        };\n    // Merge default options and cutom message options\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    NzMessageContainerComponent.prototype._mergeMessageOptions = /**\n     * @param {?} options\n     * @return {?}\n     */\n        function (options) {\n            /** @type {?} */\n            var defaultOptions = {\n                nzDuration: this.config.nzDuration,\n                nzAnimate: this.config.nzAnimate,\n                nzPauseOnHover: this.config.nzPauseOnHover\n            };\n            return __assign({}, defaultOptions, options);\n        };\n    return NzMessageContainerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzMessageComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzMessageComponent(_messageContainer) {\n        this._messageContainer = _messageContainer;\n        this._eraseTimer = null;\n    }\n    /**\n     * @return {?}\n     */\n    NzMessageComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this._options = this.nzMessage.options;\n            if (this._options.nzAnimate) {\n                this.nzMessage.state = 'enter';\n            }\n            this._autoErase = this._options.nzDuration > 0;\n            if (this._autoErase) {\n                this._initErase();\n                this._startEraseTimeout();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzMessageComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            if (this._autoErase) {\n                this._clearEraseTimeout();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzMessageComponent.prototype.onEnter = /**\n     * @return {?}\n     */\n        function () {\n            if (this._autoErase && this._options.nzPauseOnHover) {\n                this._clearEraseTimeout();\n                this._updateTTL();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzMessageComponent.prototype.onLeave = /**\n     * @return {?}\n     */\n        function () {\n            if (this._autoErase && this._options.nzPauseOnHover) {\n                this._startEraseTimeout();\n            }\n        };\n    // Remove self\n    /**\n     * @return {?}\n     */\n    NzMessageComponent.prototype._destroy = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this._options.nzAnimate) {\n                this.nzMessage.state = 'leave';\n                setTimeout(function () { return _this._messageContainer.removeMessage(_this.nzMessage.messageId); }, 200);\n            }\n            else {\n                this._messageContainer.removeMessage(this.nzMessage.messageId);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzMessageComponent.prototype._initErase = /**\n     * @return {?}\n     */\n        function () {\n            this._eraseTTL = this._options.nzDuration;\n            this._eraseTimingStart = Date.now();\n        };\n    /**\n     * @return {?}\n     */\n    NzMessageComponent.prototype._updateTTL = /**\n     * @return {?}\n     */\n        function () {\n            if (this._autoErase) {\n                this._eraseTTL -= Date.now() - this._eraseTimingStart;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzMessageComponent.prototype._startEraseTimeout = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this._eraseTTL > 0) {\n                this._clearEraseTimeout(); // To prevent calling _startEraseTimeout() more times to create more timer\n                this._eraseTimer = window.setTimeout(function () { return _this._destroy(); }, this._eraseTTL);\n                this._eraseTimingStart = Date.now();\n            }\n            else {\n                this._destroy();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzMessageComponent.prototype._clearEraseTimeout = /**\n     * @return {?}\n     */\n        function () {\n            if (this._eraseTimer !== null) {\n                window.clearTimeout(this._eraseTimer);\n                this._eraseTimer = null;\n            }\n        };\n    return NzMessageComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar globalCounter = 0;\n// unsupported: template constraints.\n// unsupported: template constraints.\n/**\n * @template ContainerClass, MessageData, MessageConfig\n */\nvar \n// unsupported: template constraints.\n// unsupported: template constraints.\n/**\n * @template ContainerClass, MessageData, MessageConfig\n */\nNzMessageBaseService$$1 = /** @class */ /*@__PURE__*/ (function () {\n    function NzMessageBaseService$$1(overlay, containerClass, injector, cfr, appRef, _idPrefix) {\n        if (_idPrefix === void 0) {\n            _idPrefix = '';\n        }\n        this.overlay = overlay;\n        this.containerClass = containerClass;\n        this.injector = injector;\n        this.cfr = cfr;\n        this.appRef = appRef;\n        this._idPrefix = _idPrefix;\n        // this._container = overlay.create().attach(new ComponentPortal(containerClass)).instance;\n        this._container = this.createContainer();\n    }\n    /**\n     * @param {?=} messageId\n     * @return {?}\n     */\n    NzMessageBaseService$$1.prototype.remove = /**\n     * @param {?=} messageId\n     * @return {?}\n     */\n        function (messageId) {\n            if (messageId) {\n                this._container.removeMessage(messageId);\n            }\n            else {\n                this._container.removeMessageAll();\n            }\n        };\n    /**\n     * @param {?} message\n     * @param {?=} options\n     * @return {?}\n     */\n    NzMessageBaseService$$1.prototype.createMessage = /**\n     * @param {?} message\n     * @param {?=} options\n     * @return {?}\n     */\n        function (message, options) {\n            /** @type {?} */\n            var resultMessage = __assign({}, ( /** @type {?} */(message)), {\n                messageId: this._generateMessageId(),\n                options: options,\n                createdAt: new Date()\n            });\n            this._container.createMessage(resultMessage);\n            return resultMessage;\n        };\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    NzMessageBaseService$$1.prototype.config = /**\n     * @param {?} config\n     * @return {?}\n     */\n        function (config) {\n            this._container.setConfig(config);\n        };\n    /**\n     * @return {?}\n     */\n    NzMessageBaseService$$1.prototype._generateMessageId = /**\n     * @return {?}\n     */\n        function () {\n            return this._idPrefix + globalCounter++;\n        };\n    /**\n     * @return {?}\n     */\n    NzMessageBaseService$$1.prototype.createContainer = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var factory = this.cfr.resolveComponentFactory(this.containerClass);\n            /** @type {?} */\n            var componentRef = factory.create(this.injector); // Use root injector\n            componentRef.changeDetectorRef.detectChanges(); // Immediately change detection to avoid multi-checking error\n            this.appRef.attachView(componentRef.hostView);\n            /** @type {?} */\n            var overlayPane = this.overlay.create().overlayElement;\n            overlayPane.style.zIndex = '1010'; // Patching: assign the same zIndex of ant-message to it's parent overlay panel, to the ant-message's zindex work.\n            overlayPane.appendChild(/** @type {?} */ (( /** @type {?} */(componentRef.hostView)).rootNodes[0]));\n            return componentRef.instance;\n        };\n    return NzMessageBaseService$$1;\n}());\nvar NzMessageService$$1 = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(NzMessageService$$1, _super);\n    function NzMessageService$$1(overlay, injector, cfr, appRef) {\n        return _super.call(this, overlay, NzMessageContainerComponent, injector, cfr, appRef, 'message-') || this;\n    }\n    // Shortcut methods\n    /**\n     * @param {?} content\n     * @param {?=} options\n     * @return {?}\n     */\n    NzMessageService$$1.prototype.success = /**\n     * @param {?} content\n     * @param {?=} options\n     * @return {?}\n     */\n        function (content, options) {\n            return this.createMessage({ type: 'success', content: content }, options);\n        };\n    /**\n     * @param {?} content\n     * @param {?=} options\n     * @return {?}\n     */\n    NzMessageService$$1.prototype.error = /**\n     * @param {?} content\n     * @param {?=} options\n     * @return {?}\n     */\n        function (content, options) {\n            return this.createMessage({ type: 'error', content: content }, options);\n        };\n    /**\n     * @param {?} content\n     * @param {?=} options\n     * @return {?}\n     */\n    NzMessageService$$1.prototype.info = /**\n     * @param {?} content\n     * @param {?=} options\n     * @return {?}\n     */\n        function (content, options) {\n            return this.createMessage({ type: 'info', content: content }, options);\n        };\n    /**\n     * @param {?} content\n     * @param {?=} options\n     * @return {?}\n     */\n    NzMessageService$$1.prototype.warning = /**\n     * @param {?} content\n     * @param {?=} options\n     * @return {?}\n     */\n        function (content, options) {\n            return this.createMessage({ type: 'warning', content: content }, options);\n        };\n    /**\n     * @param {?} content\n     * @param {?=} options\n     * @return {?}\n     */\n    NzMessageService$$1.prototype.loading = /**\n     * @param {?} content\n     * @param {?=} options\n     * @return {?}\n     */\n        function (content, options) {\n            return this.createMessage({ type: 'loading', content: content }, options);\n        };\n    /**\n     * @param {?} type\n     * @param {?} content\n     * @param {?=} options\n     * @return {?}\n     */\n    NzMessageService$$1.prototype.create = /**\n     * @param {?} type\n     * @param {?} content\n     * @param {?=} options\n     * @return {?}\n     */\n        function (type, content, options) {\n            return this.createMessage({ type: type, content: content }, options);\n        };\n    /** @nocollapse */ NzMessageService$$1.ngInjectableDef = defineInjectable({ factory: function NzMessageService_Factory() { return new NzMessageService$$1(inject(Overlay), inject(INJECTOR), inject(ComponentFactoryResolver), inject(ApplicationRef)); }, token: NzMessageService$$1, providedIn: \"root\" });\n    return NzMessageService$$1;\n}(NzMessageBaseService$$1));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzMessageModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzMessageModule() {\n    }\n    return NzMessageModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CssUnitPipe = /** @class */ /*@__PURE__*/ (function () {\n    function CssUnitPipe() {\n    }\n    /**\n     * @param {?} value\n     * @param {?=} defaultUnit\n     * @return {?}\n     */\n    CssUnitPipe.prototype.transform = /**\n     * @param {?} value\n     * @param {?=} defaultUnit\n     * @return {?}\n     */\n        function (value, defaultUnit) {\n            if (defaultUnit === void 0) {\n                defaultUnit = 'px';\n            }\n            /** @type {?} */\n            var formatted = +value; // force convert\n            return isNaN(formatted) ? \"\" + value : \"\" + formatted + defaultUnit;\n        };\n    return CssUnitPipe;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzModalControlService = /** @class */ /*@__PURE__*/ (function () {\n    function NzModalControlService(parentService) {\n        this.parentService = parentService;\n        this.rootOpenModals = this.parentService ? null : [];\n        this.rootAfterAllClose = this.parentService ? null : new Subject();\n        this.rootRegisteredMetaMap = this.parentService ? null : new Map();\n    }\n    Object.defineProperty(NzModalControlService.prototype, \"afterAllClose\", {\n        // Track singleton afterAllClose through over the injection tree\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.parentService ? this.parentService.afterAllClose : this.rootAfterAllClose;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzModalControlService.prototype, \"openModals\", {\n        // Track singleton openModals array through over the injection tree\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.parentService ? this.parentService.openModals : this.rootOpenModals;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzModalControlService.prototype, \"registeredMetaMap\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            // Registered modal for later usage\n            return this.parentService ? this.parentService.registeredMetaMap : this.rootRegisteredMetaMap;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Register a modal to listen its open/close\n    /**\n     * @param {?} modalRef\n     * @return {?}\n     */\n    NzModalControlService.prototype.registerModal = /**\n     * @param {?} modalRef\n     * @return {?}\n     */\n        function (modalRef) {\n            var _this = this;\n            if (!this.hasRegistered(modalRef)) {\n                /** @type {?} */\n                var afterOpenSubscription = modalRef.afterOpen.subscribe(function () { return _this.openModals.push(modalRef); });\n                /** @type {?} */\n                var afterCloseSubscription = modalRef.afterClose.subscribe(function () { return _this.removeOpenModal(modalRef); });\n                this.registeredMetaMap.set(modalRef, { modalRef: modalRef, afterOpenSubscription: afterOpenSubscription, afterCloseSubscription: afterCloseSubscription });\n            }\n        };\n    // deregister modals\n    /**\n     * @param {?} modalRef\n     * @return {?}\n     */\n    NzModalControlService.prototype.deregisterModal = /**\n     * @param {?} modalRef\n     * @return {?}\n     */\n        function (modalRef) {\n            /** @type {?} */\n            var registeredMeta = this.registeredMetaMap.get(modalRef);\n            if (registeredMeta) {\n                // Remove this modal if it is still in the opened modal list (NOTE: it may trigger \"afterAllClose\")\n                this.removeOpenModal(registeredMeta.modalRef);\n                registeredMeta.afterOpenSubscription.unsubscribe();\n                registeredMeta.afterCloseSubscription.unsubscribe();\n                this.registeredMetaMap.delete(modalRef);\n            }\n        };\n    /**\n     * @param {?} modalRef\n     * @return {?}\n     */\n    NzModalControlService.prototype.hasRegistered = /**\n     * @param {?} modalRef\n     * @return {?}\n     */\n        function (modalRef) {\n            return this.registeredMetaMap.has(modalRef);\n        };\n    // Close all registered opened modals\n    /**\n     * @return {?}\n     */\n    NzModalControlService.prototype.closeAll = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var i = this.openModals.length;\n            while (i--) {\n                this.openModals[i].close();\n            }\n        };\n    /**\n     * @param {?} modalRef\n     * @return {?}\n     */\n    NzModalControlService.prototype.removeOpenModal = /**\n     * @param {?} modalRef\n     * @return {?}\n     */\n        function (modalRef) {\n            /** @type {?} */\n            var index = this.openModals.indexOf(modalRef);\n            if (index > -1) {\n                this.openModals.splice(index, 1);\n                if (!this.openModals.length) {\n                    this.afterAllClose.next();\n                }\n            }\n        };\n    return NzModalControlService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ModalUtil = /** @class */ /*@__PURE__*/ (function () {\n    function ModalUtil(document) {\n        this.document = document;\n        this.lastPosition = null;\n        this.listenDocumentClick();\n    }\n    /**\n     * @return {?}\n     */\n    ModalUtil.prototype.getLastClickPosition = /**\n     * @return {?}\n     */\n        function () {\n            return this.lastPosition;\n        };\n    /**\n     * @return {?}\n     */\n    ModalUtil.prototype.listenDocumentClick = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.document.addEventListener('click', function (event) {\n                _this.lastPosition = { x: event.clientX, y: event.clientY };\n            });\n        };\n    return ModalUtil;\n}());\nvar ModalUtil$1 = /*@__PURE__*/ new ModalUtil(document);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar NZ_MODAL_DEFAULT_CONFIG = {\n    autoBodyPadding: true\n};\n/** @type {?} */\nvar NZ_MODAL_CONFIG = /*@__PURE__*/ new InjectionToken('NzModalConfig', {\n    providedIn: 'root',\n    factory: function () { return NZ_MODAL_DEFAULT_CONFIG; } // Default config\n    // Default config\n});\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * API class that public to users to handle the modal instance.\n * NzModalRef is aim to avoid accessing to the modal instance directly by users.\n * @abstract\n * @template T, R\n */\nvar /**\n * API class that public to users to handle the modal instance.\n * NzModalRef is aim to avoid accessing to the modal instance directly by users.\n * @abstract\n * @template T, R\n */ NzModalRef = /** @class */ /*@__PURE__*/ (function () {\n    function NzModalRef() {\n    }\n    return NzModalRef;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar MODAL_ANIMATE_DURATION = 200; // Duration when perform animations (ms)\n/**\n * @template T, R\n */\nvar NzModalComponent = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(NzModalComponent, _super);\n    function NzModalComponent(overlay, i18n, renderer, cfr, elementRef, viewContainer, nzMeasureScrollbarService, modalControl, focusTrapFactory, config, document) {\n        // tslint:disable-line:no-any\n        var _this = _super.call(this) || this;\n        _this.overlay = overlay;\n        _this.i18n = i18n;\n        _this.renderer = renderer;\n        _this.cfr = cfr;\n        _this.elementRef = elementRef;\n        _this.viewContainer = viewContainer;\n        _this.nzMeasureScrollbarService = nzMeasureScrollbarService;\n        _this.modalControl = modalControl;\n        _this.focusTrapFactory = focusTrapFactory;\n        _this.config = config;\n        _this.document = document;\n        _this.unsubscribe$ = new Subject();\n        // tslint:disable-next-line:no-any\n        _this.locale = {};\n        _this.nzModalType = 'default';\n        _this.nzGetContainer = function () { return _this.overlay.create(); };\n        _this.nzVisible = false;\n        _this.nzVisibleChange = new EventEmitter();\n        _this.nzZIndex = 1000;\n        _this.nzWidth = 520;\n        _this.nzIconType = 'question-circle';\n        _this.nzClosable = true;\n        _this.nzMask = true;\n        _this.nzMaskClosable = true;\n        _this.nzAfterOpen = new EventEmitter();\n        _this.nzAfterClose = new EventEmitter();\n        _this.nzOkType = 'primary';\n        _this.nzOkLoading = false;\n        _this.nzOnOk = new EventEmitter();\n        _this.nzCancelLoading = false;\n        _this.nzOnCancel = new EventEmitter();\n        _this.transformOrigin = '0px 0px 0px';\n        _this.config = _this.mergeDefaultConfig(_this.config);\n        return _this;\n    }\n    Object.defineProperty(NzModalComponent.prototype, \"afterOpen\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            // Observable alias for nzAfterOpen\n            return this.nzAfterOpen.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzModalComponent.prototype, \"afterClose\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            // Observable alias for nzAfterClose\n            return this.nzAfterClose.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzModalComponent.prototype, \"okText\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzOkText || this.locale.okText;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzModalComponent.prototype, \"cancelText\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzCancelText || this.locale.cancelText;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzModalComponent.prototype, \"hidden\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return !this.nzVisible && !this.animationState;\n        } // Indicate whether this dialog should hidden\n        // Indicate whether this dialog should hidden\n        ,\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzModalComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.i18n.localeChange.pipe(takeUntil(this.unsubscribe$)).subscribe(function () { return _this.locale = _this.i18n.getLocaleData('Modal'); });\n            if (this.isComponent(this.nzContent)) {\n                this.createDynamicComponent(/** @type {?} */ (this.nzContent)); // Create component along without View\n            }\n            if (this.isModalButtons(this.nzFooter)) { // Setup default button options\n                // Setup default button options\n                this.nzFooter = this.formatModalButtons(/** @type {?} */ (this.nzFooter));\n            }\n            // Place the modal dom to elsewhere\n            this.container = typeof this.nzGetContainer === 'function' ? this.nzGetContainer() : this.nzGetContainer;\n            if (this.container instanceof HTMLElement) {\n                this.container.appendChild(this.elementRef.nativeElement);\n            }\n            else if (this.container instanceof OverlayRef) { // NOTE: only attach the dom to overlay, the view container is not changed actually\n                // NOTE: only attach the dom to overlay, the view container is not changed actually\n                this.container.overlayElement.appendChild(this.elementRef.nativeElement);\n            }\n            // Register modal when afterOpen/afterClose is stable\n            this.modalControl.registerModal(this);\n        };\n    // [NOTE] NOT available when using by service!\n    // Because ngOnChanges never be called when using by service,\n    // here we can't support \"nzContent\"(Component) etc. as inputs that initialized dynamically.\n    // BUT: User also can change \"nzContent\" dynamically to trigger UI changes (provided you don't use \bComponent that needs initializations)\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NzModalComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            if (changes[\"nzVisible\"]) {\n                this.handleVisibleStateChange(this.nzVisible, !changes[\"nzVisible\"].firstChange); // Do not trigger animation while initializing\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzModalComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            // If using Component, it is the time to attach View while bodyContainer is ready\n            if (this.contentComponentRef) {\n                this.bodyContainer.insert(this.contentComponentRef.hostView);\n            }\n            if (this.autoFocusButtonOk) {\n                ( /** @type {?} */(this.autoFocusButtonOk.nativeElement)).focus();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzModalComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            // Close self before destructing\n            this.changeVisibleFromInside(false).then(function () {\n                _this.modalControl.deregisterModal(_this);\n                if (_this.container instanceof OverlayRef) {\n                    _this.container.dispose();\n                }\n                _this.unsubscribe$.next();\n                _this.unsubscribe$.complete();\n            });\n        };\n    /**\n     * @return {?}\n     */\n    NzModalComponent.prototype.open = /**\n     * @return {?}\n     */\n        function () {\n            this.changeVisibleFromInside(true);\n        };\n    /**\n     * @param {?=} result\n     * @return {?}\n     */\n    NzModalComponent.prototype.close = /**\n     * @param {?=} result\n     * @return {?}\n     */\n        function (result) {\n            this.changeVisibleFromInside(false, result);\n        };\n    /**\n     * @param {?=} result\n     * @return {?}\n     */\n    NzModalComponent.prototype.destroy = /**\n     * @param {?=} result\n     * @return {?}\n     */\n        function (result) {\n            // Destroy equals Close\n            this.close(result);\n        };\n    /**\n     * @return {?}\n     */\n    NzModalComponent.prototype.triggerOk = /**\n     * @return {?}\n     */\n        function () {\n            this.onClickOkCancel('ok');\n        };\n    /**\n     * @return {?}\n     */\n    NzModalComponent.prototype.triggerCancel = /**\n     * @return {?}\n     */\n        function () {\n            this.onClickOkCancel('cancel');\n        };\n    /**\n     * @return {?}\n     */\n    NzModalComponent.prototype.getInstance = /**\n     * @return {?}\n     */\n        function () {\n            return this;\n        };\n    /**\n     * @return {?}\n     */\n    NzModalComponent.prototype.getContentComponentRef = /**\n     * @return {?}\n     */\n        function () {\n            return this.contentComponentRef;\n        };\n    /**\n     * @return {?}\n     */\n    NzModalComponent.prototype.getContentComponent = /**\n     * @return {?}\n     */\n        function () {\n            return this.contentComponentRef && this.contentComponentRef.instance;\n        };\n    /**\n     * @return {?}\n     */\n    NzModalComponent.prototype.getElement = /**\n     * @return {?}\n     */\n        function () {\n            return this.elementRef && this.elementRef.nativeElement;\n        };\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    NzModalComponent.prototype.onClickMask = /**\n     * @param {?} $event\n     * @return {?}\n     */\n        function ($event) {\n            if (this.nzMask &&\n                this.nzMaskClosable &&\n                ( /** @type {?} */($event.target)).classList.contains('ant-modal-wrap') &&\n                this.nzVisible) {\n                this.onClickOkCancel('cancel');\n            }\n        };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    NzModalComponent.prototype.isModalType = /**\n     * @param {?} type\n     * @return {?}\n     */\n        function (type) {\n            return this.nzModalType === type;\n        };\n    /**\n     * @return {?}\n     */\n    NzModalComponent.prototype.onClickCloseBtn = /**\n     * @return {?}\n     */\n        function () {\n            if (this.nzVisible) {\n                this.onClickOkCancel('cancel');\n            }\n        };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    NzModalComponent.prototype.onClickOkCancel = /**\n     * @param {?} type\n     * @return {?}\n     */\n        function (type) {\n            var _this = this;\n            /** @type {?} */\n            var trigger$$1 = { 'ok': this.nzOnOk, 'cancel': this.nzOnCancel }[type];\n            /** @type {?} */\n            var loadingKey = { 'ok': 'nzOkLoading', 'cancel': 'nzCancelLoading' }[type];\n            if (trigger$$1 instanceof EventEmitter) {\n                trigger$$1.emit(this.getContentComponent());\n            }\n            else if (typeof trigger$$1 === 'function') {\n                /** @type {?} */\n                var result = trigger$$1(this.getContentComponent());\n                /** @type {?} */\n                var caseClose_1 = function (doClose) { return (doClose !== false) && _this.close(/** @type {?} */ (doClose)); }; // Users can return \"false\" to prevent closing by default\n                if (isPromise(result)) {\n                    this[loadingKey] = true;\n                    /** @type {?} */\n                    var handleThen = function (doClose) {\n                        _this[loadingKey] = false;\n                        caseClose_1(doClose);\n                    };\n                    ( /** @type {?} */(result)).then(handleThen).catch(handleThen);\n                }\n                else {\n                    caseClose_1(result);\n                }\n            }\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzModalComponent.prototype.isNonEmptyString = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            return typeof value === 'string' && value !== '';\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzModalComponent.prototype.isTemplateRef = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            return value instanceof TemplateRef;\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzModalComponent.prototype.isComponent = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            return value instanceof Type;\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzModalComponent.prototype.isModalButtons = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            return Array.isArray(value) && value.length > 0;\n        };\n    /**\n     * @param {?} visible\n     * @param {?=} animation\n     * @param {?=} closeResult\n     * @return {?}\n     */\n    NzModalComponent.prototype.handleVisibleStateChange = /**\n     * @param {?} visible\n     * @param {?=} animation\n     * @param {?=} closeResult\n     * @return {?}\n     */\n        function (visible, animation, closeResult) {\n            var _this = this;\n            if (animation === void 0) {\n                animation = true;\n            }\n            if (visible) { // Hide scrollbar at the first time when shown up\n                // Hide scrollbar at the first time when shown up\n                this.changeBodyOverflow(1);\n                this.savePreviouslyFocusedElement();\n                this.trapFocus();\n            }\n            return Promise\n                .resolve(animation && this.animateTo(visible))\n                .then(function () {\n                // Emit open/close event after animations over\n                if (visible) {\n                    _this.nzAfterOpen.emit();\n                }\n                else {\n                    _this.nzAfterClose.emit(closeResult);\n                    _this.restoreFocus();\n                    _this.changeBodyOverflow(); // Show/hide scrollbar when animation is over\n                }\n            });\n            // .then(() => this.changeBodyOverflow());\n        };\n    /**\n     * @param {?} options\n     * @param {?} prop\n     * @return {?}\n     */\n    NzModalComponent.prototype.getButtonCallableProp = /**\n     * @param {?} options\n     * @param {?} prop\n     * @return {?}\n     */\n        function (options, prop) {\n            /** @type {?} */\n            var value = options[prop];\n            /** @type {?} */\n            var args = [];\n            if (this.contentComponentRef) {\n                args.push(this.contentComponentRef.instance);\n            }\n            return typeof value === 'function' ? value.apply(options, args) : value;\n        };\n    /**\n     * @param {?} button\n     * @return {?}\n     */\n    NzModalComponent.prototype.onButtonClick = /**\n     * @param {?} button\n     * @return {?}\n     */\n        function (button) {\n            /** @type {?} */\n            var result = this.getButtonCallableProp(button, 'onClick'); // Call onClick directly\n            if (isPromise(result)) {\n                button.loading = true;\n                ( /** @type {?} */(result)).then(function () { return button.loading = false; }).catch(function () { return button.loading = false; });\n            }\n        };\n    /**\n     * @param {?} visible\n     * @param {?=} closeResult\n     * @return {?}\n     */\n    NzModalComponent.prototype.changeVisibleFromInside = /**\n     * @param {?} visible\n     * @param {?=} closeResult\n     * @return {?}\n     */\n        function (visible, closeResult) {\n            if (this.nzVisible !== visible) {\n                // Change nzVisible value immediately\n                this.nzVisible = visible;\n                this.nzVisibleChange.emit(visible);\n                return this.handleVisibleStateChange(visible, true, closeResult);\n            }\n            return Promise.resolve();\n        };\n    /**\n     * @param {?} state\n     * @return {?}\n     */\n    NzModalComponent.prototype.changeAnimationState = /**\n     * @param {?} state\n     * @return {?}\n     */\n        function (state$$1) {\n            var _a, _b;\n            this.animationState = state$$1;\n            if (state$$1) {\n                this.maskAnimationClassMap = (_a = {},\n                    _a[\"fade-\" + state$$1] = true,\n                    _a[\"fade-\" + state$$1 + \"-active\"] = true,\n                    _a);\n                this.modalAnimationClassMap = (_b = {},\n                    _b[\"zoom-\" + state$$1] = true,\n                    _b[\"zoom-\" + state$$1 + \"-active\"] = true,\n                    _b);\n            }\n            else {\n                this.maskAnimationClassMap = this.modalAnimationClassMap = null;\n            }\n        };\n    /**\n     * @param {?} isVisible\n     * @return {?}\n     */\n    NzModalComponent.prototype.animateTo = /**\n     * @param {?} isVisible\n     * @return {?}\n     */\n        function (isVisible) {\n            var _this = this;\n            if (isVisible) { // Figure out the lastest click position when shows up\n                // Figure out the lastest click position when shows up\n                window.setTimeout(function () { return _this.updateTransformOrigin(); }); // [NOTE] Using timeout due to the document.click event is fired later than visible change, so if not postponed to next event-loop, we can't get the lastest click position\n            }\n            this.changeAnimationState(isVisible ? 'enter' : 'leave');\n            return new Promise(function (resolve) {\n                return window.setTimeout(function () {\n                    // Return when animation is over\n                    _this.changeAnimationState(null);\n                    resolve();\n                }, MODAL_ANIMATE_DURATION);\n            });\n        };\n    /**\n     * @param {?} buttons\n     * @return {?}\n     */\n    NzModalComponent.prototype.formatModalButtons = /**\n     * @param {?} buttons\n     * @return {?}\n     */\n        function (buttons) {\n            return buttons.map(function (button) {\n                /** @type {?} */\n                var mixedButton = __assign({\n                    type: 'default',\n                    size: 'default',\n                    autoLoading: true,\n                    show: true,\n                    loading: false,\n                    disabled: false\n                }, button);\n                // if (mixedButton.autoLoading) { mixedButton.loading = false; } // Force loading to false when autoLoading=true\n                return mixedButton;\n            });\n        };\n    /**\n     * Create a component dynamically but not attach to any View (this action will be executed when bodyContainer is ready)\n     * @param {?} component Component class\n     * @return {?}\n     */\n    NzModalComponent.prototype.createDynamicComponent = /**\n     * Create a component dynamically but not attach to any View (this action will be executed when bodyContainer is ready)\n     * @param {?} component Component class\n     * @return {?}\n     */\n        function (component) {\n            /** @type {?} */\n            var factory = this.cfr.resolveComponentFactory(component);\n            /** @type {?} */\n            var childInjector = Injector.create({\n                providers: [{ provide: NzModalRef, useValue: this }],\n                parent: this.viewContainer.parentInjector\n            });\n            this.contentComponentRef = factory.create(childInjector);\n            if (this.nzComponentParams) {\n                Object.assign(this.contentComponentRef.instance, this.nzComponentParams);\n            }\n            // Do the first change detection immediately (or we do detection at ngAfterViewInit, multi-changes error will be thrown)\n            this.contentComponentRef.changeDetectorRef.detectChanges();\n        };\n    /**\n     * @return {?}\n     */\n    NzModalComponent.prototype.updateTransformOrigin = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var modalElement = /** @type {?} */ (this.modalContainer.nativeElement);\n            /** @type {?} */\n            var lastPosition = ModalUtil$1.getLastClickPosition();\n            if (lastPosition) {\n                this.transformOrigin = lastPosition.x - modalElement.offsetLeft + \"px \" + (lastPosition.y - modalElement.offsetTop) + \"px 0px\";\n            }\n            // else {\n            //   this.transformOrigin = '0px 0px 0px';\n            // }\n        };\n    /**\n     * Take care of the body's overflow to decide the existense of scrollbar\n     * @param {?=} plusNum The number that the openModals.length will increase soon\n     * @return {?}\n     */\n    NzModalComponent.prototype.changeBodyOverflow = /**\n     * Take care of the body's overflow to decide the existense of scrollbar\n     * @param {?=} plusNum The number that the openModals.length will increase soon\n     * @return {?}\n     */\n        function (plusNum) {\n            if (plusNum === void 0) {\n                plusNum = 0;\n            }\n            if (this.config.autoBodyPadding) {\n                /** @type {?} */\n                var openModals = this.modalControl.openModals;\n                if (openModals.length + plusNum > 0) {\n                    if (this.hasBodyScrollBar()) { // Adding padding-right only when body's scrollbar is able to shown up\n                        // Adding padding-right only when body's scrollbar is able to shown up\n                        this.renderer.setStyle(this.document.body, 'padding-right', this.nzMeasureScrollbarService.scrollBarWidth + \"px\");\n                        this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n                    }\n                }\n                else { // NOTE: we need to always remove the padding due to the scroll bar may be disappear by window resizing before modal closed\n                    // NOTE: we need to always remove the padding due to the scroll bar may be disappear by window resizing before modal closed\n                    this.renderer.removeStyle(this.document.body, 'padding-right');\n                    this.renderer.removeStyle(this.document.body, 'overflow');\n                }\n            }\n        };\n    /**\n     * Check whether the body element is able to has the scroll bar (if the body content height exceeds the window's height)\n     * Exceptional Cases: users can show the scroll bar by their own permanently (eg. overflow: scroll)\n     * @return {?}\n     */\n    NzModalComponent.prototype.hasBodyScrollBar = /**\n     * Check whether the body element is able to has the scroll bar (if the body content height exceeds the window's height)\n     * Exceptional Cases: users can show the scroll bar by their own permanently (eg. overflow: scroll)\n     * @return {?}\n     */\n        function () {\n            return this.document.body.scrollHeight > (window.innerHeight || this.document.documentElement.clientHeight);\n        };\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    NzModalComponent.prototype.mergeDefaultConfig = /**\n     * @param {?} config\n     * @return {?}\n     */\n        function (config) {\n            return __assign({}, NZ_MODAL_DEFAULT_CONFIG, config);\n        };\n    /**\n     * @return {?}\n     */\n    NzModalComponent.prototype.savePreviouslyFocusedElement = /**\n     * @return {?}\n     */\n        function () {\n            if (this.document) {\n                this.previouslyFocusedElement = /** @type {?} */ (this.document.activeElement);\n                this.previouslyFocusedElement.blur();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzModalComponent.prototype.trapFocus = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.focusTrap) {\n                this.focusTrap = this.focusTrapFactory.create(this.elementRef.nativeElement);\n            }\n            this.focusTrap.focusInitialElementWhenReady();\n        };\n    /**\n     * @return {?}\n     */\n    NzModalComponent.prototype.restoreFocus = /**\n     * @return {?}\n     */\n        function () {\n            if (this.previouslyFocusedElement) {\n                this.previouslyFocusedElement.focus();\n            }\n            if (this.focusTrap) {\n                this.focusTrap.destroy();\n            }\n        };\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Boolean)\n    ], NzModalComponent.prototype, \"nzVisible\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Boolean)\n    ], NzModalComponent.prototype, \"nzClosable\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Boolean)\n    ], NzModalComponent.prototype, \"nzMask\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Boolean)\n    ], NzModalComponent.prototype, \"nzMaskClosable\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Boolean)\n    ], NzModalComponent.prototype, \"nzOkLoading\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Boolean)\n    ], NzModalComponent.prototype, \"nzCancelLoading\", void 0);\n    return NzModalComponent;\n}(NzModalRef));\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction isPromise(obj) {\n    return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof ( /** @type {?} */(obj)).then === 'function' && typeof ( /** @type {?} */(obj)).catch === 'function';\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ModalBuilderForService = /** @class */ /*@__PURE__*/ (function () {\n    function ModalBuilderForService(overlay, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var _this = this;\n        this.overlay = overlay;\n        this.createModal();\n        if (!('nzGetContainer' in options)) { // As we use CDK to create modal in service by force, there is no need to use nzGetContainer\n            // As we use CDK to create modal in service by force, there is no need to use nzGetContainer\n            options.nzGetContainer = null; // Override nzGetContainer's default value to prevent creating another overlay\n        }\n        this.changeProps(options);\n        this.modalRef.instance.open();\n        this.modalRef.instance.nzAfterClose.subscribe(function () { return _this.destroyModal(); }); // [NOTE] By default, close equals destroy when using as Service\n    }\n    /**\n     * @return {?}\n     */\n    ModalBuilderForService.prototype.getInstance = /**\n     * @return {?}\n     */\n        function () {\n            return this.modalRef && this.modalRef.instance;\n        };\n    /**\n     * @return {?}\n     */\n    ModalBuilderForService.prototype.destroyModal = /**\n     * @return {?}\n     */\n        function () {\n            if (this.modalRef) {\n                this.overlayRef.dispose();\n                this.modalRef = null;\n            }\n        };\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    ModalBuilderForService.prototype.changeProps = /**\n     * @param {?} options\n     * @return {?}\n     */\n        function (options) {\n            if (this.modalRef) {\n                Object.assign(this.modalRef.instance, options); // DANGER: here not limit user's inputs at runtime\n            }\n        };\n    /**\n     * @return {?}\n     */\n    ModalBuilderForService.prototype.createModal = /**\n     * @return {?}\n     */\n        function () {\n            this.overlayRef = this.overlay.create();\n            this.modalRef = this.overlayRef.attach(new ComponentPortal(NzModalComponent));\n        };\n    return ModalBuilderForService;\n}());\nvar NzModalService = /** @class */ /*@__PURE__*/ (function () {\n    function NzModalService(overlay, logger, modalControl) {\n        this.overlay = overlay;\n        this.logger = logger;\n        this.modalControl = modalControl;\n    }\n    Object.defineProperty(NzModalService.prototype, \"openModals\", {\n        // Track of the current close modals (we assume invisible is close this time)\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.modalControl.openModals;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzModalService.prototype, \"afterAllClose\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.modalControl.afterAllClose.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Closes all of the currently-open dialogs\n    /**\n     * @return {?}\n     */\n    NzModalService.prototype.closeAll = /**\n     * @return {?}\n     */\n        function () {\n            this.modalControl.closeAll();\n        };\n    /**\n     * @template T\n     * @param {?=} options\n     * @return {?}\n     */\n    NzModalService.prototype.create = /**\n     * @template T\n     * @param {?=} options\n     * @return {?}\n     */\n        function (options) {\n            if (options === void 0) {\n                options = {};\n            }\n            if (typeof options.nzOnCancel !== 'function') {\n                options.nzOnCancel = function () {\n                }; // Leave a empty function to close this modal by default\n            }\n            /** @type {?} */\n            var modalRef = new ModalBuilderForService(this.overlay, options).getInstance(); // NOTE: use NzModalComponent as the NzModalRef by now, we may need archive the real NzModalRef object in the future\n            return modalRef;\n        };\n    /**\n     * @template T\n     * @param {?=} options\n     * @param {?=} confirmType\n     * @return {?}\n     */\n    NzModalService.prototype.confirm = /**\n     * @template T\n     * @param {?=} options\n     * @param {?=} confirmType\n     * @return {?}\n     */\n        function (options, confirmType) {\n            if (options === void 0) {\n                options = {};\n            }\n            if (confirmType === void 0) {\n                confirmType = 'confirm';\n            }\n            if ('nzFooter' in options) {\n                this.logger.warn(\"The Confirm-Modal doesn't support \\\"nzFooter\\\", this property will be ignored.\");\n            }\n            if (!('nzWidth' in options)) {\n                options.nzWidth = 416;\n            }\n            if (typeof options.nzOnOk !== 'function') { // NOTE: only support function currently by calling confirm()\n                // NOTE: only support function currently by calling confirm()\n                options.nzOnOk = function () {\n                }; // Leave a empty function to close this modal by default\n            }\n            options.nzModalType = 'confirm';\n            options.nzClassName = \"ant-modal-confirm ant-modal-confirm-\" + confirmType + \" \" + (options.nzClassName || '');\n            options.nzMaskClosable = false;\n            return this.create(options);\n        };\n    /**\n     * @template T\n     * @param {?=} options\n     * @return {?}\n     */\n    NzModalService.prototype.info = /**\n     * @template T\n     * @param {?=} options\n     * @return {?}\n     */\n        function (options) {\n            if (options === void 0) {\n                options = {};\n            }\n            return this.simpleConfirm(options, 'info');\n        };\n    /**\n     * @template T\n     * @param {?=} options\n     * @return {?}\n     */\n    NzModalService.prototype.success = /**\n     * @template T\n     * @param {?=} options\n     * @return {?}\n     */\n        function (options) {\n            if (options === void 0) {\n                options = {};\n            }\n            return this.simpleConfirm(options, 'success');\n        };\n    /**\n     * @template T\n     * @param {?=} options\n     * @return {?}\n     */\n    NzModalService.prototype.error = /**\n     * @template T\n     * @param {?=} options\n     * @return {?}\n     */\n        function (options) {\n            if (options === void 0) {\n                options = {};\n            }\n            return this.simpleConfirm(options, 'error');\n        };\n    /**\n     * @template T\n     * @param {?=} options\n     * @return {?}\n     */\n    NzModalService.prototype.warning = /**\n     * @template T\n     * @param {?=} options\n     * @return {?}\n     */\n        function (options) {\n            if (options === void 0) {\n                options = {};\n            }\n            return this.simpleConfirm(options, 'warning');\n        };\n    /**\n     * @template T\n     * @param {?=} options\n     * @param {?=} confirmType\n     * @return {?}\n     */\n    NzModalService.prototype.simpleConfirm = /**\n     * @template T\n     * @param {?=} options\n     * @param {?=} confirmType\n     * @return {?}\n     */\n        function (options, confirmType) {\n            if (options === void 0) {\n                options = {};\n            }\n            if (!('nzIconType' in options)) {\n                options.nzIconType = {\n                    'info': 'info-circle',\n                    'success': 'check-circle',\n                    'error': 'close-circle',\n                    'warning': 'exclamation-circle'\n                }[confirmType];\n            }\n            if (!('nzCancelText' in options)) { // Remove the Cancel button if the user not specify a Cancel button\n                // Remove the Cancel button if the user not specify a Cancel button\n                options.nzCancelText = null;\n            }\n            return this.confirm(options, confirmType);\n        };\n    return NzModalService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzModalModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzModalModule() {\n    }\n    return NzModalModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar NZ_NOTIFICATION_DEFAULT_CONFIG = /*@__PURE__*/ new InjectionToken('NZ_NOTIFICATION_DEFAULT_CONFIG');\n/** @type {?} */\nvar NZ_NOTIFICATION_CONFIG = /*@__PURE__*/ new InjectionToken('NZ_NOTIFICATION_CONFIG');\n/** @type {?} */\nvar NZ_NOTIFICATION_DEFAULT_CONFIG_PROVIDER = {\n    provide: NZ_NOTIFICATION_DEFAULT_CONFIG,\n    useValue: {\n        nzTop: '24px',\n        nzBottom: '24px',\n        nzPlacement: 'topRight',\n        nzDuration: 4500,\n        nzMaxStack: 7,\n        nzPauseOnHover: true,\n        nzAnimate: true\n    }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzNotificationContainerComponent = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(NzNotificationContainerComponent, _super);\n    function NzNotificationContainerComponent(defaultConfig, config) {\n        return _super.call(this, defaultConfig, config) || this;\n    }\n    return NzNotificationContainerComponent;\n}(NzMessageContainerComponent));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzNotificationComponent = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(NzNotificationComponent, _super);\n    function NzNotificationComponent(container) {\n        var _this = _super.call(this, container) || this;\n        _this.container = container;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    NzNotificationComponent.prototype.close = /**\n     * @return {?}\n     */\n        function () {\n            this._destroy();\n        };\n    Object.defineProperty(NzNotificationComponent.prototype, \"state\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            if (this.nzMessage.state === 'enter') {\n                if ((this.container.config[\"nzPlacement\"] === 'topLeft') || (this.container.config[\"nzPlacement\"] === 'bottomLeft')) {\n                    return 'enterLeft';\n                }\n                else {\n                    return 'enterRight';\n                }\n            }\n            else {\n                return this.nzMessage.state;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return NzNotificationComponent;\n}(NzMessageComponent));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzNotificationService$$1 = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(NzNotificationService$$1, _super);\n    function NzNotificationService$$1(overlay, injector, cfr, appRef) {\n        return _super.call(this, overlay, NzNotificationContainerComponent, injector, cfr, appRef, 'notification-') || this;\n    }\n    // Shortcut methods\n    /**\n     * @param {?} title\n     * @param {?} content\n     * @param {?=} options\n     * @return {?}\n     */\n    NzNotificationService$$1.prototype.success = /**\n     * @param {?} title\n     * @param {?} content\n     * @param {?=} options\n     * @return {?}\n     */\n        function (title, content, options) {\n            return /** @type {?} */ (this.createMessage({ type: 'success', title: title, content: content }, options));\n        };\n    /**\n     * @param {?} title\n     * @param {?} content\n     * @param {?=} options\n     * @return {?}\n     */\n    NzNotificationService$$1.prototype.error = /**\n     * @param {?} title\n     * @param {?} content\n     * @param {?=} options\n     * @return {?}\n     */\n        function (title, content, options) {\n            return /** @type {?} */ (this.createMessage({ type: 'error', title: title, content: content }, options));\n        };\n    /**\n     * @param {?} title\n     * @param {?} content\n     * @param {?=} options\n     * @return {?}\n     */\n    NzNotificationService$$1.prototype.info = /**\n     * @param {?} title\n     * @param {?} content\n     * @param {?=} options\n     * @return {?}\n     */\n        function (title, content, options) {\n            return /** @type {?} */ (this.createMessage({ type: 'info', title: title, content: content }, options));\n        };\n    /**\n     * @param {?} title\n     * @param {?} content\n     * @param {?=} options\n     * @return {?}\n     */\n    NzNotificationService$$1.prototype.warning = /**\n     * @param {?} title\n     * @param {?} content\n     * @param {?=} options\n     * @return {?}\n     */\n        function (title, content, options) {\n            return /** @type {?} */ (this.createMessage({ type: 'warning', title: title, content: content }, options));\n        };\n    /**\n     * @param {?} title\n     * @param {?} content\n     * @param {?=} options\n     * @return {?}\n     */\n    NzNotificationService$$1.prototype.blank = /**\n     * @param {?} title\n     * @param {?} content\n     * @param {?=} options\n     * @return {?}\n     */\n        function (title, content, options) {\n            return /** @type {?} */ (this.createMessage({ type: 'blank', title: title, content: content }, options));\n        };\n    /**\n     * @param {?} type\n     * @param {?} title\n     * @param {?} content\n     * @param {?=} options\n     * @return {?}\n     */\n    NzNotificationService$$1.prototype.create = /**\n     * @param {?} type\n     * @param {?} title\n     * @param {?} content\n     * @param {?=} options\n     * @return {?}\n     */\n        function (type, title, content, options) {\n            return /** @type {?} */ (this.createMessage({ type: type, title: title, content: content }, options));\n        };\n    // For content with template\n    /**\n     * @param {?} template\n     * @param {?=} options\n     * @return {?}\n     */\n    NzNotificationService$$1.prototype.template = /**\n     * @param {?} template\n     * @param {?=} options\n     * @return {?}\n     */\n        function (template, options) {\n            return /** @type {?} */ (this.createMessage({ template: template }, options));\n        };\n    /** @nocollapse */ NzNotificationService$$1.ngInjectableDef = defineInjectable({ factory: function NzNotificationService_Factory() { return new NzNotificationService$$1(inject(Overlay), inject(INJECTOR), inject(ComponentFactoryResolver), inject(ApplicationRef)); }, token: NzNotificationService$$1, providedIn: \"root\" });\n    return NzNotificationService$$1;\n}(NzMessageBaseService$$1));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzNotificationModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzNotificationModule() {\n    }\n    return NzNotificationModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzPaginationComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzPaginationComponent(i18n) {\n        this.i18n = i18n;\n        this.unsubscribe$ = new Subject();\n        // tslint:disable-next-line:no-any\n        this.locale = {};\n        this._showSizeChanger = false;\n        this._showQuickJumper = false;\n        this._simple = false;\n        this._hideOnSinglePage = false;\n        this._pageSize = 10;\n        this._pageSizeOptions = [10, 20, 30, 40];\n        this._pageIndex = 1;\n        this.firstIndex = 1;\n        this.pages = [];\n        this.nzInTable = false;\n        this.nzPageSizeChange = new EventEmitter();\n        this.nzPageIndexChange = new EventEmitter();\n    }\n    Object.defineProperty(NzPaginationComponent.prototype, \"nzItemRender\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._itemRender;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._itemRender = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzPaginationComponent.prototype, \"nzShowSizeChanger\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._showSizeChanger;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._showSizeChanger = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzPaginationComponent.prototype, \"nzHideOnSinglePage\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._hideOnSinglePage;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._hideOnSinglePage = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzPaginationComponent.prototype, \"nzShowQuickJumper\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._showQuickJumper;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._showQuickJumper = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzPaginationComponent.prototype, \"nzSimple\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._simple;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._simple = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzPaginationComponent.prototype, \"nzPageSizeOptions\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._pageSizeOptions;\n        },\n        /** page size changer select values */\n        set: /**\n         * page size changer select values\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (value && value.length) {\n                this._pageSizeOptions = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzPaginationComponent.prototype, \"nzPageIndex\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._pageIndex;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (this._pageIndex === value) {\n                return;\n            }\n            if (value > this.lastIndex) {\n                this._pageIndex = this.lastIndex;\n            }\n            else if (value < this.firstIndex) {\n                this._pageIndex = this.firstIndex;\n            }\n            else {\n                this._pageIndex = Number(value);\n            }\n            this.buildIndexes();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzPaginationComponent.prototype, \"nzPageSize\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._pageSize;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (value === this._pageSize) {\n                return;\n            }\n            this._pageSize = value;\n            /** @type {?} */\n            var pageIndexOverflow = this.checkLastIndexOverflow();\n            if (pageIndexOverflow) {\n                this.nzPageIndex = this.lastIndex;\n                this.nzPageIndexChange.emit(this.lastIndex);\n            }\n            this.buildIndexes();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzPaginationComponent.prototype, \"nzTotal\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._total;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._total = value;\n            this.buildIndexes();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    NzPaginationComponent.prototype.jumpPage = /**\n     * @param {?} index\n     * @return {?}\n     */\n        function (index) {\n            if (index === this.nzPageIndex) {\n                return;\n            }\n            if (index < this.firstIndex) {\n                this.nzPageIndex = this.firstIndex;\n            }\n            else if (index > this.lastIndex) {\n                this.nzPageIndex = this.lastIndex;\n            }\n            else {\n                this.nzPageIndex = index;\n            }\n            this.nzPageIndexChange.emit(this.nzPageIndex);\n        };\n    /**\n     * @return {?}\n     */\n    NzPaginationComponent.prototype.jumpPreFive = /**\n     * @return {?}\n     */\n        function () {\n            this.jumpPage(this.nzPageIndex - 5);\n        };\n    /**\n     * @return {?}\n     */\n    NzPaginationComponent.prototype.jumpNextFive = /**\n     * @return {?}\n     */\n        function () {\n            this.jumpPage(this.nzPageIndex + 5);\n        };\n    /**\n     * @return {?}\n     */\n    NzPaginationComponent.prototype.jumpPreOne = /**\n     * @return {?}\n     */\n        function () {\n            if (this.isFirstIndex) {\n                return;\n            }\n            this.jumpPage(this.nzPageIndex - 1);\n        };\n    /**\n     * @return {?}\n     */\n    NzPaginationComponent.prototype.jumpNextOne = /**\n     * @return {?}\n     */\n        function () {\n            if (this.isLastIndex) {\n                return;\n            }\n            this.jumpPage(this.nzPageIndex + 1);\n        };\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    NzPaginationComponent.prototype.onPageSizeChange = /**\n     * @param {?} $event\n     * @return {?}\n     */\n        function ($event) {\n            this.nzPageSize = $event;\n            this.nzPageSizeChange.emit($event);\n        };\n    /**\n     * @param {?} e\n     * @param {?} input\n     * @param {?} clearInputValue\n     * @return {?}\n     */\n    NzPaginationComponent.prototype.handleKeyDown = /**\n     * @param {?} e\n     * @param {?} input\n     * @param {?} clearInputValue\n     * @return {?}\n     */\n        function (e, input, clearInputValue) {\n            /** @type {?} */\n            var target = input;\n            /** @type {?} */\n            var inputValue = target.value;\n            /** @type {?} */\n            var currentInputValue = this.nzPageIndex;\n            /** @type {?} */\n            var value;\n            if (inputValue === '') {\n                value = inputValue;\n            }\n            else if (isNaN(Number(inputValue))) {\n                value = currentInputValue;\n            }\n            else {\n                value = Number(inputValue);\n            }\n            this.handleChange(value, target, clearInputValue);\n        };\n    /**\n     * @param {?} page\n     * @return {?}\n     */\n    NzPaginationComponent.prototype.isValid = /**\n     * @param {?} page\n     * @return {?}\n     */\n        function (page) {\n            return isInteger(page) && (page >= 1) && (page !== this.nzPageIndex) && (page <= this.lastIndex);\n        };\n    /**\n     * @param {?} value\n     * @param {?} target\n     * @param {?} clearInputValue\n     * @return {?}\n     */\n    NzPaginationComponent.prototype.handleChange = /**\n     * @param {?} value\n     * @param {?} target\n     * @param {?} clearInputValue\n     * @return {?}\n     */\n        function (value, target, clearInputValue) {\n            /** @type {?} */\n            var page = value;\n            if (this.isValid(page)) {\n                this.nzPageIndex = page;\n                this.nzPageIndexChange.emit(this.nzPageIndex);\n            }\n            if (clearInputValue) {\n                target.value = null;\n            }\n            else {\n                target.value = \"\" + this.nzPageIndex;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzPaginationComponent.prototype.checkLastIndexOverflow = /**\n     * @return {?}\n     */\n        function () {\n            return this.nzPageIndex > this.lastIndex;\n        };\n    Object.defineProperty(NzPaginationComponent.prototype, \"lastIndex\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return Math.ceil(this.nzTotal / this.nzPageSize);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** generate indexes list */\n    /**\n     * generate indexes list\n     * @return {?}\n     */\n    NzPaginationComponent.prototype.buildIndexes = /**\n     * generate indexes list\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var tmpPages = [];\n            if (this.lastIndex <= 9) {\n                for (var i = 2; i <= this.lastIndex - 1; i++) {\n                    tmpPages.push({ index: i });\n                }\n            }\n            else {\n                /** @type {?} */\n                var current = +this.nzPageIndex;\n                /** @type {?} */\n                var left = Math.max(2, current - 2);\n                /** @type {?} */\n                var right = Math.min(current + 2, this.lastIndex - 1);\n                if (current - 1 <= 2) {\n                    right = 5;\n                }\n                if (this.lastIndex - current <= 2) {\n                    left = this.lastIndex - 4;\n                }\n                for (var i = left; i <= right; i++) {\n                    tmpPages.push({ index: i });\n                }\n            }\n            this.pages = tmpPages;\n        };\n    Object.defineProperty(NzPaginationComponent.prototype, \"isLastIndex\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzPageIndex === this.lastIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzPaginationComponent.prototype, \"isFirstIndex\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzPageIndex === this.firstIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} val1\n     * @param {?} val2\n     * @return {?}\n     */\n    NzPaginationComponent.prototype.min = /**\n     * @param {?} val1\n     * @param {?} val2\n     * @return {?}\n     */\n        function (val1, val2) {\n            return Math.min(val1, val2);\n        };\n    /**\n     * @return {?}\n     */\n    NzPaginationComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.i18n.localeChange.pipe(takeUntil(this.unsubscribe$)).subscribe(function () { return _this.locale = _this.i18n.getLocaleData('Pagination'); });\n        };\n    /**\n     * @return {?}\n     */\n    NzPaginationComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.unsubscribe$.next();\n            this.unsubscribe$.complete();\n        };\n    return NzPaginationComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzPaginationModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzPaginationModule() {\n    }\n    return NzPaginationModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzToolTipComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzToolTipComponent(cdr) {\n        this.cdr = cdr;\n        this._hasBackdrop = false;\n        this._prefix = 'ant-tooltip-placement';\n        this._positions = __spread(DEFAULT_4_POSITIONS);\n        this._classMap = {};\n        this._placement = 'top';\n        this._trigger = 'hover';\n        this.visibleSource = new BehaviorSubject(false);\n        this.visible$ = this.visibleSource.asObservable();\n        this.nzVisibleChange = new EventEmitter();\n        this.nzOverlayClassName = '';\n        this.nzOverlayStyle = {};\n        this.nzMouseEnterDelay = 0.15;\n        this.nzMouseLeaveDelay = 0.1;\n    }\n    Object.defineProperty(NzToolTipComponent.prototype, \"nzContent\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._content;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.isContentString = !(value instanceof TemplateRef);\n            this._content = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzToolTipComponent.prototype, \"nzTitle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._title;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.isTitleString = !(value instanceof TemplateRef);\n            this._title = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzToolTipComponent.prototype, \"nzVisible\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.visibleSource.value;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            /** @type {?} */\n            var visible = toBoolean(value);\n            if (this.visibleSource.value !== visible) {\n                this.visibleSource.next(visible);\n                this.nzVisibleChange.emit(visible);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzToolTipComponent.prototype, \"nzTrigger\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._trigger;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._trigger = value;\n            this._hasBackdrop = this._trigger === 'click';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzToolTipComponent.prototype, \"nzPlacement\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._placement;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (value !== this._placement) {\n                this._placement = value;\n                this._positions.unshift(/** @type {?} */ (POSITION_MAP[this.nzPlacement]));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Manually force updating current overlay's position\n    /**\n     * @return {?}\n     */\n    NzToolTipComponent.prototype.updatePosition = /**\n     * @return {?}\n     */\n        function () {\n            if (this.overlay && this.overlay.overlayRef) {\n                this.overlay.overlayRef.updatePosition();\n            }\n        };\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    NzToolTipComponent.prototype.onPositionChange = /**\n     * @param {?} $event\n     * @return {?}\n     */\n        function ($event) {\n            for (var key in POSITION_MAP) {\n                if (JSON.stringify($event.connectionPair) === JSON.stringify(POSITION_MAP[key])) {\n                    this.nzPlacement = key;\n                    break;\n                }\n            }\n            this.setClassMap();\n            /** TODO may cause performance problem */\n            this.cdr.detectChanges();\n        };\n    /**\n     * @return {?}\n     */\n    NzToolTipComponent.prototype.show = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.isContentEmpty()) {\n                this.nzVisible = true;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzToolTipComponent.prototype.hide = /**\n     * @return {?}\n     */\n        function () {\n            this.nzVisible = false;\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzToolTipComponent.prototype._afterVisibilityAnimation = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            if (e.toState === 'false' && !this.nzVisible) {\n                this.nzVisibleChange.emit(false);\n            }\n            if (e.toState === 'true' && this.nzVisible) {\n                this.nzVisibleChange.emit(true);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzToolTipComponent.prototype.setClassMap = /**\n     * @return {?}\n     */\n        function () {\n            var _a;\n            this._classMap = (_a = {},\n                _a[this.nzOverlayClassName] = true,\n                _a[this._prefix + \"-\" + this._placement] = true,\n                _a);\n        };\n    /**\n     * @param {?} origin\n     * @return {?}\n     */\n    NzToolTipComponent.prototype.setOverlayOrigin = /**\n     * @param {?} origin\n     * @return {?}\n     */\n        function (origin) {\n            this.overlayOrigin = origin;\n        };\n    /**\n     * @return {?}\n     */\n    NzToolTipComponent.prototype.isContentEmpty = /**\n     * @return {?}\n     */\n        function () {\n            return this.isTitleString ? (this.nzTitle === '' || !isNotNil(this.nzTitle)) : false; // Pity, can't detect whether nzTemplate is empty due to can't get it's content before shown up\n        };\n    return NzToolTipComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzPopconfirmComponent = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(NzPopconfirmComponent, _super);\n    function NzPopconfirmComponent(cdr) {\n        var _this = _super.call(this, cdr) || this;\n        _this._condition = false;\n        _this._prefix = 'ant-popover-placement';\n        _this._trigger = 'click';\n        _this._hasBackdrop = true;\n        _this.nzOnCancel = new EventEmitter();\n        _this.nzOnConfirm = new EventEmitter();\n        _this.nzOkType = 'primary';\n        return _this;\n    }\n    Object.defineProperty(NzPopconfirmComponent.prototype, \"nzCondition\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._condition;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._condition = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzPopconfirmComponent.prototype.show = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.nzCondition) {\n                this.nzVisible = true;\n            }\n            else {\n                this.onConfirm();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzPopconfirmComponent.prototype.onCancel = /**\n     * @return {?}\n     */\n        function () {\n            this.nzOnCancel.emit();\n            this.nzVisible = false;\n        };\n    /**\n     * @return {?}\n     */\n    NzPopconfirmComponent.prototype.onConfirm = /**\n     * @return {?}\n     */\n        function () {\n            this.nzOnConfirm.emit();\n            this.nzVisible = false;\n        };\n    return NzPopconfirmComponent;\n}(NzToolTipComponent));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzTooltipDirective = /** @class */ /*@__PURE__*/ (function () {\n    function NzTooltipDirective(elementRef, hostView, resolver, renderer, tooltip) {\n        this.elementRef = elementRef;\n        this.hostView = hostView;\n        this.resolver = resolver;\n        this.renderer = renderer;\n        this.tooltip = tooltip;\n        this.unsubscribe$ = new Subject();\n        // [NOTE] Here hard coded, and nzTitle used only under NzTooltipDirective currently.\n        this.isTooltipOpen = false;\n        this.isDynamicTooltip = false;\n        this.factory = this.resolver.resolveComponentFactory(NzToolTipComponent);\n        this.nzVisibleChange = new EventEmitter();\n    }\n    Object.defineProperty(NzTooltipDirective.prototype, \"nzTitle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._title;\n        },\n        set: /**\n         * @param {?} title\n         * @return {?}\n         */ function (title) {\n            this._title = title;\n            this.updateCompValue('nzTitle', title);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTooltipDirective.prototype, \"setTitle\", {\n        set: /**\n         * @param {?} title\n         * @return {?}\n         */ function (title) {\n            this.nzTitle = title;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTooltipDirective.prototype, \"nzContent\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._content;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._content = value;\n            this.updateCompValue('nzContent', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTooltipDirective.prototype, \"nzOverlayClassName\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._overlayClassName;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._overlayClassName = value;\n            this.updateCompValue('nzOverlayClassName', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTooltipDirective.prototype, \"nzOverlayStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._overlayStyle;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._overlayStyle = value;\n            this.updateCompValue('nzOverlayStyle', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTooltipDirective.prototype, \"nzMouseEnterDelay\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._mouseEnterDelay;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._mouseEnterDelay = value;\n            this.updateCompValue('nzMouseEnterDelay', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTooltipDirective.prototype, \"nzMouseLeaveDelay\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._mouseEnterDelay;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._mouseLeaveDelay = value;\n            this.updateCompValue('nzMouseLeaveDelay', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTooltipDirective.prototype, \"nzVisible\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._visible;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._visible = value;\n            this.updateCompValue('nzVisible', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTooltipDirective.prototype, \"nzTrigger\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._trigger;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._trigger = value;\n            this.updateCompValue('nzTrigger', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTooltipDirective.prototype, \"nzPlacement\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._placement;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._placement = value;\n            this.updateCompValue('nzPlacement', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTooltipDirective.prototype, \"isOpen\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.isTooltipOpen;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzTooltipDirective.prototype.show = /**\n     * @return {?}\n     */\n        function () {\n            this.tooltip.show();\n            this.isTooltipOpen = true;\n        };\n    /**\n     * @return {?}\n     */\n    NzTooltipDirective.prototype.hide = /**\n     * @return {?}\n     */\n        function () {\n            this.tooltip.hide();\n            this.isTooltipOpen = false;\n        };\n    /**\n     * @param {?} isOrigin\n     * @param {?} isEnter\n     * @param {?=} delay\n     * @return {?}\n     */\n    NzTooltipDirective.prototype.delayEnterLeave = /**\n     * @param {?} isOrigin\n     * @param {?} isEnter\n     * @param {?=} delay\n     * @return {?}\n     */\n        function (isOrigin, isEnter, delay$$1) {\n            var _this = this;\n            if (delay$$1 === void 0) {\n                delay$$1 = -1;\n            }\n            if (this.delayTimer) { // Clear timer during the delay time\n                // Clear timer during the delay time\n                window.clearTimeout(this.delayTimer);\n                this.delayTimer = null;\n            }\n            else if (delay$$1 > 0) {\n                this.delayTimer = window.setTimeout(function () {\n                    _this.delayTimer = null;\n                    isEnter ? _this.show() : _this.hide();\n                }, delay$$1 * 1000);\n            }\n            else {\n                isEnter && isOrigin ? this.show() : this.hide(); // [Compatible] The \"isOrigin\" is used due to the tooltip will not hide immediately (may caused by the fade-out animation)\n            }\n        };\n    // tslint:disable-next-line:no-any\n    /**\n     * @param {?} key\n     * @param {?} value\n     * @return {?}\n     */\n    NzTooltipDirective.prototype.updateCompValue = /**\n     * @param {?} key\n     * @param {?} value\n     * @return {?}\n     */\n        function (key, value) {\n            if (this.isDynamicTooltip && isNotNil(value)) {\n                this.tooltip[key] = value;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzTooltipDirective.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            // Support faster tooltip mode: <a nz-tooltip=\"xxx\"></a>. [NOTE] Used only under NzTooltipDirective currently.\n            if (!this.tooltip) {\n                /** @type {?} */\n                var tooltipComponent = this.hostView.createComponent(this.factory);\n                this.tooltip = tooltipComponent.instance;\n                // Remove element when use directive https://github.com/NG-ZORRO/ng-zorro-antd/issues/1967\n                this.renderer.removeChild(this.renderer.parentNode(this.elementRef.nativeElement), tooltipComponent.location.nativeElement);\n                this.isDynamicTooltip = true;\n                /** @type {?} */\n                var properties = ['nzTitle', 'nzContent', 'nzOverlayClassName', 'nzOverlayStyle', 'nzMouseEnterDelay', 'nzMouseLeaveDelay', 'nzVisible', 'nzTrigger', 'nzPlacement'];\n                properties.forEach(function (property) { return _this.updateCompValue(property, _this[property]); });\n                this.tooltip.nzVisibleChange.pipe(takeUntil(this.unsubscribe$), distinctUntilChanged()).subscribe(function (data) {\n                    _this._visible = data;\n                    _this.nzVisibleChange.emit(data);\n                });\n            }\n            this.tooltip.setOverlayOrigin(this);\n        };\n    /**\n     * @return {?}\n     */\n    NzTooltipDirective.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this.tooltip.nzTrigger === 'hover') {\n                /** @type {?} */\n                var overlayElement_1 = void 0;\n                this.renderer.listen(this.elementRef.nativeElement, 'mouseenter', function () { return _this.delayEnterLeave(true, true, _this.tooltip.nzMouseEnterDelay); });\n                this.renderer.listen(this.elementRef.nativeElement, 'mouseleave', function () {\n                    _this.delayEnterLeave(true, false, _this.tooltip.nzMouseLeaveDelay);\n                    if (_this.tooltip.overlay.overlayRef && !overlayElement_1) { // NOTE: we bind events under \"mouseleave\" due to the overlayRef is only created after the overlay was completely shown up\n                        // NOTE: we bind events under \"mouseleave\" due to the overlayRef is only created after the overlay was completely shown up\n                        overlayElement_1 = _this.tooltip.overlay.overlayRef.overlayElement;\n                        _this.renderer.listen(overlayElement_1, 'mouseenter', function () { return _this.delayEnterLeave(false, true); });\n                        _this.renderer.listen(overlayElement_1, 'mouseleave', function () { return _this.delayEnterLeave(false, false); });\n                    }\n                });\n            }\n            else if (this.tooltip.nzTrigger === 'focus') {\n                this.renderer.listen(this.elementRef.nativeElement, 'focus', function () { return _this.show(); });\n                this.renderer.listen(this.elementRef.nativeElement, 'blur', function () { return _this.hide(); });\n            }\n            else if (this.tooltip.nzTrigger === 'click') {\n                this.renderer.listen(this.elementRef.nativeElement, 'click', function (e) {\n                    e.preventDefault();\n                    _this.show();\n                });\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzTooltipDirective.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.unsubscribe$.next();\n            this.unsubscribe$.complete();\n        };\n    return NzTooltipDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzPopconfirmDirective = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(NzPopconfirmDirective, _super);\n    function NzPopconfirmDirective(elementRef, hostView, resolver, renderer, tooltip) {\n        var _this = _super.call(this, elementRef, hostView, resolver, renderer, tooltip) || this;\n        _this.subclassUnsubscribe$ = new Subject();\n        _this.factory = _this.resolver.resolveComponentFactory(NzPopconfirmComponent);\n        _this._condition = false;\n        _this._okType = 'primary';\n        _this.nzOnCancel = new EventEmitter();\n        _this.nzOnConfirm = new EventEmitter();\n        return _this;\n    }\n    Object.defineProperty(NzPopconfirmDirective.prototype, \"nzOkText\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._okText;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._okText = value;\n            this.updateCompValue('nzOkText', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzPopconfirmDirective.prototype, \"nzOkType\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._okType;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._okType = value;\n            this.updateCompValue('nzOkType', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzPopconfirmDirective.prototype, \"nzCancelText\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._cancelText;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._cancelText = value;\n            this.updateCompValue('nzCancelText', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzPopconfirmDirective.prototype, \"nzCondition\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._condition;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._condition = toBoolean(value);\n            this.updateCompValue('nzCondition', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzPopconfirmDirective.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (!this.tooltip) {\n                /** @type {?} */\n                var tooltipComponent = this.hostView.createComponent(this.factory);\n                this.tooltip = tooltipComponent.instance;\n                // Remove element when use directive https://github.com/NG-ZORRO/ng-zorro-antd/issues/1967\n                this.renderer.removeChild(this.renderer.parentNode(this.elementRef.nativeElement), tooltipComponent.location.nativeElement);\n                this.isDynamicTooltip = true;\n                /** @type {?} */\n                var properties = [\n                    'nzTitle',\n                    'nzContent',\n                    'nzOverlayClassName',\n                    'nzOverlayStyle',\n                    'nzMouseEnterDelay',\n                    'nzMouseLeaveDelay',\n                    'nzVisible',\n                    'nzTrigger',\n                    'nzPlacement',\n                    'nzOkText',\n                    'nzOkType',\n                    'nzCancelText',\n                    'nzCondition'\n                ];\n                properties.forEach(function (property) { return _this.updateCompValue(property, _this[property]); });\n                this.tooltip.nzVisibleChange.pipe(takeUntil(this.subclassUnsubscribe$), distinctUntilChanged()).subscribe(function (data) {\n                    _this._visible = data;\n                    _this.nzVisibleChange.emit(data);\n                });\n                ( /** @type {?} */(this.tooltip)).nzOnCancel.pipe(takeUntil(this.subclassUnsubscribe$)).subscribe(function (data) {\n                    _this.nzOnCancel.emit();\n                });\n                ( /** @type {?} */(this.tooltip)).nzOnConfirm.pipe(takeUntil(this.subclassUnsubscribe$)).subscribe(function (data) {\n                    _this.nzOnConfirm.emit();\n                });\n            }\n            this.tooltip.setOverlayOrigin(this);\n        };\n    /**\n     * @return {?}\n     */\n    NzPopconfirmDirective.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.subclassUnsubscribe$.next();\n            this.subclassUnsubscribe$.complete();\n        };\n    return NzPopconfirmDirective;\n}(NzTooltipDirective));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzPopconfirmModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzPopconfirmModule() {\n    }\n    return NzPopconfirmModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzPopoverComponent = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(NzPopoverComponent, _super);\n    function NzPopoverComponent(cdr) {\n        var _this = _super.call(this, cdr) || this;\n        _this._prefix = 'ant-popover-placement';\n        return _this;\n    }\n    return NzPopoverComponent;\n}(NzToolTipComponent));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzPopoverDirective = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(NzPopoverDirective, _super);\n    function NzPopoverDirective(elementRef, hostView, resolver, renderer, tooltip) {\n        var _this = _super.call(this, elementRef, hostView, resolver, renderer, tooltip) || this;\n        _this.factory = _this.resolver.resolveComponentFactory(NzPopoverComponent);\n        return _this;\n    }\n    return NzPopoverDirective;\n}(NzTooltipDirective));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzPopoverModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzPopoverModule() {\n    }\n    return NzPopoverModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzProgressComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzProgressComponent() {\n        this._gapDegree = 0;\n        this._gapPosition = 'top';\n        this._percent = 0;\n        this._status = 'normal';\n        this._cacheStatus = 'normal';\n        this._strokeWidth = 8;\n        this._size = 'default';\n        this._type = 'line';\n        this._format = function (percent) { return percent + \"%\"; };\n        this.isStatusSet = false;\n        this.isStrokeWidthSet = false;\n        this.isFormatSet = false;\n        this.isGapDegreeSet = false;\n        this.isGapPositionSet = false;\n        this.statusColorMap = {\n            normal: '#108ee9',\n            exception: '#ff5500',\n            success: '#87d068'\n        };\n        this.nzShowInfo = true;\n        this.nzWidth = 132;\n        this.nzSuccessPercent = 0;\n    }\n    Object.defineProperty(NzProgressComponent.prototype, \"nzSize\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._size;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._size = value;\n            if (this.nzSize === 'small' && !this.isStrokeWidthSet) {\n                this._strokeWidth = 6;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzProgressComponent.prototype, \"nzFormat\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._format;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (isNotNil(value)) {\n                this._format = value;\n                this.isFormatSet = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzProgressComponent.prototype, \"nzPercent\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._percent;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._percent = value;\n            if (isNotNil(value)) {\n                /** @type {?} */\n                var fillAll = parseInt(value.toString(), 10) >= 100;\n                if (fillAll && !this.isStatusSet) {\n                    this._status = 'success';\n                }\n                else {\n                    this._status = this._cacheStatus;\n                }\n                this.updatePathStyles();\n                this.updateIcon();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzProgressComponent.prototype, \"nzStrokeWidth\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._strokeWidth;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (isNotNil(value)) {\n                this._strokeWidth = value;\n                this.isStrokeWidthSet = true;\n                this.updatePathStyles();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzProgressComponent.prototype, \"nzStatus\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._status;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (isNotNil(value)) {\n                this._status = value;\n                this._cacheStatus = value;\n                this.isStatusSet = true;\n                this.updateIcon();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzProgressComponent.prototype, \"nzType\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._type;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._type = value;\n            if (!this.isStrokeWidthSet) {\n                if (this.nzType !== 'line') {\n                    this._strokeWidth = 6;\n                }\n            }\n            if (this.nzType === 'dashboard') {\n                if (!this.isGapPositionSet) {\n                    this._gapPosition = 'bottom';\n                }\n                if (!this.isGapDegreeSet) {\n                    this._gapDegree = 75;\n                }\n            }\n            this.updateIcon();\n            this.updatePathStyles();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzProgressComponent.prototype, \"nzGapDegree\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._gapDegree;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (isNotNil(value)) {\n                this._gapDegree = value;\n                this.isGapDegreeSet = true;\n                this.updatePathStyles();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzProgressComponent.prototype, \"nzGapPosition\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._gapPosition;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (isNotNil(value)) {\n                this._gapPosition = value;\n                this.isGapPositionSet = true;\n                this.updatePathStyles();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzProgressComponent.prototype, \"isCirCleStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzType === 'circle' || this.nzType === 'dashboard';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzProgressComponent.prototype.updatePathStyles = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var radius = 50 - (this.nzStrokeWidth / 2);\n            /** @type {?} */\n            var beginPositionX = 0;\n            /** @type {?} */\n            var beginPositionY = -radius;\n            /** @type {?} */\n            var endPositionX = 0;\n            /** @type {?} */\n            var endPositionY = radius * -2;\n            switch (this.nzGapPosition) {\n                case 'left':\n                    beginPositionX = -radius;\n                    beginPositionY = 0;\n                    endPositionX = radius * 2;\n                    endPositionY = 0;\n                    break;\n                case 'right':\n                    beginPositionX = radius;\n                    beginPositionY = 0;\n                    endPositionX = radius * -2;\n                    endPositionY = 0;\n                    break;\n                case 'bottom':\n                    beginPositionY = radius;\n                    endPositionY = radius * 2;\n                    break;\n                default:\n            }\n            this.pathString = \"M 50,50 m \" + beginPositionX + \",\" + beginPositionY + \"\\n     a \" + radius + \",\" + radius + \" 0 1 1 \" + endPositionX + \",\" + -endPositionY + \"\\n     a \" + radius + \",\" + radius + \" 0 1 1 \" + -endPositionX + \",\" + endPositionY;\n            /** @type {?} */\n            var len = Math.PI * 2 * radius;\n            this.trailPathStyle = {\n                strokeDasharray: len - this.nzGapDegree + \"px \" + len + \"px\",\n                strokeDashoffset: \"-\" + this.nzGapDegree / 2 + \"px\",\n                transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s'\n            };\n            this.strokePathStyle = {\n                strokeDasharray: (this.nzPercent / 100) * (len - this.nzGapDegree) + \"px \" + len + \"px\",\n                strokeDashoffset: \"-\" + this.nzGapDegree / 2 + \"px\",\n                transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s, stroke-width .06s ease .3s' // eslint-disable-line\n            };\n        };\n    /**\n     * @return {?}\n     */\n    NzProgressComponent.prototype.updateIcon = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var isCircle = (this.nzType === 'circle' || this.nzType === 'dashboard');\n            /** @type {?} */\n            var ret = '';\n            if (this.nzStatus === 'success') {\n                ret = 'check';\n            }\n            if (this.nzStatus === 'exception') {\n                ret = 'close';\n            }\n            if (ret) {\n                if (!isCircle) {\n                    ret += '-circle';\n                    this.iconTheme = 'fill';\n                }\n                else {\n                    this.iconTheme = 'outline';\n                }\n            }\n            this.icon = ret;\n        };\n    /**\n     * @return {?}\n     */\n    NzProgressComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.updatePathStyles();\n            this.updateIcon();\n        };\n    return NzProgressComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzProgressModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzProgressModule() {\n    }\n    return NzProgressModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzRateComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzRateComponent(renderer) {\n        this.renderer = renderer;\n        this._allowClear = true;\n        this._allowHalf = false;\n        this._disabled = false;\n        this._count = 5;\n        this._value = 0;\n        this._autoFocus = false;\n        this.nzOnBlur = new EventEmitter();\n        this.nzOnFocus = new EventEmitter();\n        this.nzOnKeyDown = new EventEmitter();\n        this.nzOnHoverChange = new EventEmitter();\n        this.prefixCls = 'ant-rate';\n        this.isInit = false;\n        this.hasHalf = false;\n        this.innerPrefixCls = this.prefixCls + \"-star\";\n        this.starArray = [];\n        this.hoverValue = 0;\n        this.isFocused = false;\n        this.floatReg = /^\\d+(\\.\\d+)?$/;\n        this.onChange = function () { return null; };\n        this.onTouched = function () { return null; };\n    }\n    Object.defineProperty(NzRateComponent.prototype, \"nzAutoFocus\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._autoFocus;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._autoFocus = toBoolean(value);\n            this.updateAutoFocus();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzRateComponent.prototype, \"nzCount\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._count;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (this._count === value) {\n                return;\n            }\n            this._count = value;\n            this.updateStarArray();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzRateComponent.prototype, \"nzAllowHalf\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._allowHalf;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._allowHalf = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzRateComponent.prototype, \"nzAllowClear\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._allowClear;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._allowClear = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzRateComponent.prototype, \"nzValue\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._value;\n        },\n        set: /**\n         * @param {?} input\n         * @return {?}\n         */ function (input) {\n            /** @type {?} */\n            var value = input;\n            if (this._value === value) {\n                return;\n            }\n            this._value = value;\n            if (this.floatReg.test(value.toString())) {\n                value += 0.5;\n                this.hasHalf = true;\n            }\n            this.hoverValue = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzRateComponent.prototype, \"nzDisabled\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._disabled;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._disabled = toBoolean(value);\n            this.setClassMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzRateComponent.prototype.setClassMap = /**\n     * @return {?}\n     */\n        function () {\n            var _a;\n            this.classMap = (_a = {},\n                _a[this.prefixCls] = true,\n                _a[this.prefixCls + \"-disabled\"] = this.nzDisabled,\n                _a);\n        };\n    /**\n     * @return {?}\n     */\n    NzRateComponent.prototype.updateAutoFocus = /**\n     * @return {?}\n     */\n        function () {\n            if (this.isInit && !this.nzDisabled) {\n                if (this.nzAutoFocus) {\n                    this.renderer.setAttribute(this.ulElement.nativeElement, 'autofocus', 'autofocus');\n                }\n                else {\n                    this.renderer.removeAttribute(this.ulElement.nativeElement, 'autofocus');\n                }\n            }\n        };\n    /**\n     * @param {?} e\n     * @param {?} index\n     * @param {?} isFull\n     * @return {?}\n     */\n    NzRateComponent.prototype.clickRate = /**\n     * @param {?} e\n     * @param {?} index\n     * @param {?} isFull\n     * @return {?}\n     */\n        function (e, index, isFull) {\n            e.stopPropagation();\n            if (this.nzDisabled) {\n                return;\n            }\n            this.hasHalf = !isFull && this.nzAllowHalf;\n            /** @type {?} */\n            var actualValue = index + 1;\n            this.hoverValue = actualValue;\n            if (this.hasHalf) {\n                actualValue -= 0.5;\n            }\n            if (this.nzValue === actualValue) {\n                if (this.nzAllowClear) {\n                    this.nzValue = 0;\n                    this.onChange(this.nzValue);\n                }\n            }\n            else {\n                this.nzValue = actualValue;\n                this.onChange(this.nzValue);\n            }\n        };\n    /**\n     * @param {?} e\n     * @param {?} index\n     * @param {?} isFull\n     * @return {?}\n     */\n    NzRateComponent.prototype.hoverRate = /**\n     * @param {?} e\n     * @param {?} index\n     * @param {?} isFull\n     * @return {?}\n     */\n        function (e, index, isFull) {\n            e.stopPropagation();\n            if (this.nzDisabled) {\n                return;\n            }\n            /** @type {?} */\n            var isHalf = !isFull && this.nzAllowHalf;\n            if (this.hoverValue === index + 1 && isHalf === this.hasHalf) {\n                return;\n            }\n            this.hoverValue = index + 1;\n            this.nzOnHoverChange.emit(this.hoverValue);\n            this.hasHalf = isHalf;\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzRateComponent.prototype.leaveRate = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            e.stopPropagation();\n            /** @type {?} */\n            var oldVal = this.nzValue;\n            if (this.floatReg.test(oldVal.toString())) {\n                oldVal += 0.5;\n                this.hasHalf = true;\n            }\n            this.hoverValue = oldVal;\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzRateComponent.prototype.onFocus = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            this.isFocused = true;\n            this.nzOnFocus.emit(e);\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzRateComponent.prototype.onBlur = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            this.isFocused = false;\n            this.nzOnBlur.emit(e);\n        };\n    /**\n     * @return {?}\n     */\n    NzRateComponent.prototype.focus = /**\n     * @return {?}\n     */\n        function () {\n            this.ulElement.nativeElement.focus();\n        };\n    /**\n     * @return {?}\n     */\n    NzRateComponent.prototype.blur = /**\n     * @return {?}\n     */\n        function () {\n            this.ulElement.nativeElement.blur();\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzRateComponent.prototype.onKeyDown = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            /** @type {?} */\n            var code = e.code;\n            if ((code === 'ArrowRight' || e.keyCode === RIGHT_ARROW) && (this.nzValue < this.nzCount)) {\n                if (this.nzAllowHalf) {\n                    this.nzValue += 0.5;\n                }\n                else {\n                    this.nzValue += 1;\n                }\n                this.onChange(this.nzValue);\n            }\n            else if ((code === 'ArrowLeft' || e.keyCode === LEFT_ARROW) && (this.nzValue > 0)) {\n                if (this.nzAllowHalf) {\n                    this.nzValue -= 0.5;\n                }\n                else {\n                    this.nzValue -= 1;\n                }\n                this.onChange(this.nzValue);\n            }\n            this.nzOnKeyDown.emit(e);\n            e.preventDefault();\n        };\n    /**\n     * @param {?} i\n     * @return {?}\n     */\n    NzRateComponent.prototype.setClasses = /**\n     * @param {?} i\n     * @return {?}\n     */\n        function (i) {\n            var _a;\n            return _a = {},\n                _a[this.innerPrefixCls] = true,\n                _a[this.innerPrefixCls + \"-full\"] = (i + 1 < this.hoverValue) || (!this.hasHalf) && (i + 1 === this.hoverValue),\n                _a[this.innerPrefixCls + \"-half\"] = (this.hasHalf) && (i + 1 === this.hoverValue),\n                _a[this.innerPrefixCls + \"-active\"] = (this.hasHalf) && (i + 1 === this.hoverValue),\n                _a[this.innerPrefixCls + \"-zero\"] = (i + 1 > this.hoverValue),\n                _a[this.innerPrefixCls + \"-focused\"] = (this.hasHalf) && (i + 1 === this.hoverValue) && this.isFocused,\n                _a;\n        };\n    /**\n     * @return {?}\n     */\n    NzRateComponent.prototype.updateStarArray = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var index = 0;\n            this.starArray = [];\n            while (index < this.nzCount) {\n                this.starArray.push(index++);\n            }\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzRateComponent.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.nzValue = value || 0;\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzRateComponent.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this.onChange = fn;\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzRateComponent.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this.onTouched = fn;\n        };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    NzRateComponent.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n        function (isDisabled) {\n            this.nzDisabled = isDisabled;\n        };\n    /**\n     * @return {?}\n     */\n    NzRateComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.setClassMap();\n            this.updateStarArray();\n        };\n    /**\n     * @return {?}\n     */\n    NzRateComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            this.isInit = true;\n        };\n    return NzRateComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzRateModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzRateModule() {\n    }\n    return NzRateModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzSkeletonComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzSkeletonComponent() {\n        this.rowsList = [];\n        this.widthList = [];\n        this.nzActive = false;\n        this.nzLoading = true;\n        this.nzTitle = true;\n        this.nzAvatar = false;\n        this.nzParagraph = true;\n    }\n    /**\n     * @return {?}\n     */\n    NzSkeletonComponent.prototype.getTitleProps = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var hasAvatar = !!this.nzAvatar;\n            /** @type {?} */\n            var hasParagraph = !!this.nzParagraph;\n            /** @type {?} */\n            var width;\n            if (!hasAvatar && hasParagraph) {\n                width = '38%';\n            }\n            else if (hasAvatar && hasParagraph) {\n                width = '50%';\n            }\n            return __assign({ width: width }, this.getProps(this.nzTitle));\n        };\n    /**\n     * @return {?}\n     */\n    NzSkeletonComponent.prototype.getAvatarProps = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var shape = (!!this.nzTitle && !this.nzParagraph) ? 'square' : 'circle';\n            /** @type {?} */\n            var size = 'large';\n            return __assign({ shape: shape, size: size }, this.getProps(this.nzAvatar));\n        };\n    /**\n     * @return {?}\n     */\n    NzSkeletonComponent.prototype.getParagraphProps = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var hasAvatar = !!this.nzAvatar;\n            /** @type {?} */\n            var hasTitle = !!this.nzTitle;\n            /** @type {?} */\n            var basicProps = {};\n            // Width\n            if (!hasAvatar || !hasTitle) {\n                basicProps.width = '61%';\n            }\n            // Rows\n            if (!hasAvatar && hasTitle) {\n                basicProps.rows = 3;\n            }\n            else {\n                basicProps.rows = 2;\n            }\n            return __assign({}, basicProps, this.getProps(this.nzParagraph));\n        };\n    /**\n     * @template T\n     * @param {?} prop\n     * @return {?}\n     */\n    NzSkeletonComponent.prototype.getProps = /**\n     * @template T\n     * @param {?} prop\n     * @return {?}\n     */\n        function (prop) {\n            if (prop && typeof prop === 'object') {\n                return prop;\n            }\n            return {};\n        };\n    /**\n     * @param {?=} value\n     * @return {?}\n     */\n    NzSkeletonComponent.prototype.toCSSUnit = /**\n     * @param {?=} value\n     * @return {?}\n     */\n        function (value) {\n            if (value === void 0) {\n                value = '';\n            }\n            if (typeof value === 'number') {\n                return value + \"px\";\n            }\n            else if (typeof value === 'string') {\n                return value;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzSkeletonComponent.prototype.getWidthList = /**\n     * @return {?}\n     */\n        function () {\n            var _a = this.paragraph, width = _a.width, rows = _a.rows;\n            /** @type {?} */\n            var widthList = [];\n            if (width && Array.isArray(width)) {\n                widthList = width;\n            }\n            else if (width && !Array.isArray(width)) {\n                widthList = [];\n                widthList[rows - 1] = width;\n            }\n            return widthList;\n        };\n    /**\n     * @return {?}\n     */\n    NzSkeletonComponent.prototype.updateClassMap = /**\n     * @return {?}\n     */\n        function () {\n            var _a;\n            this.avatarClassMap = (_a = {},\n                _a[\"ant-skeleton-avatar-lg\"] = this.avatar.size === 'large',\n                _a[\"ant-skeleton-avatar-sm \"] = this.avatar.size === 'small',\n                _a[\"ant-skeleton-avatar-circle\"] = this.avatar.shape === 'circle',\n                _a[\"ant-skeleton-avatar-square \"] = this.avatar.shape === 'square',\n                _a);\n        };\n    /**\n     * @return {?}\n     */\n    NzSkeletonComponent.prototype.updateProps = /**\n     * @return {?}\n     */\n        function () {\n            this.title = this.getTitleProps();\n            this.avatar = this.getAvatarProps();\n            this.paragraph = this.getParagraphProps();\n            this.rowsList = __spread(Array(this.paragraph.rows));\n            this.widthList = this.getWidthList();\n        };\n    /**\n     * @return {?}\n     */\n    NzSkeletonComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.updateProps();\n            this.updateClassMap();\n        };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NzSkeletonComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            if (changes[\"nzTitle\"] || changes[\"nzAvatar\"] || changes[\"nzParagraph\"]) {\n                this.updateProps();\n                this.updateClassMap();\n            }\n        };\n    return NzSkeletonComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzSkeletonModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzSkeletonModule() {\n    }\n    return NzSkeletonModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzToolTipModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzToolTipModule() {\n    }\n    return NzToolTipModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzSliderMarksComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzSliderMarksComponent() {\n        this._vertical = false;\n        this._included = false;\n        // Dynamic properties\n        this.nzLowerBound = null;\n        this.nzUpperBound = null;\n    }\n    Object.defineProperty(NzSliderMarksComponent.prototype, \"nzVertical\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._vertical;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            // Required\n            this._vertical = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSliderMarksComponent.prototype, \"nzIncluded\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._included;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._included = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NzSliderMarksComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            if (changes[\"nzMarksArray\"]) {\n                this.buildAttrs();\n            }\n            if (changes[\"nzMarksArray\"] || changes[\"nzLowerBound\"] || changes[\"nzUpperBound\"]) {\n                this.togglePointActive();\n            }\n        };\n    /**\n     * @param {?} index\n     * @param {?} attr\n     * @return {?}\n     */\n    NzSliderMarksComponent.prototype.trackById = /**\n     * @param {?} index\n     * @param {?} attr\n     * @return {?}\n     */\n        function (index, attr) {\n            return attr.id;\n        };\n    /**\n     * @return {?}\n     */\n    NzSliderMarksComponent.prototype.buildAttrs = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            /** @type {?} */\n            var range = this.nzMax - this.nzMin;\n            this.attrs = this.nzMarksArray.map(function (mark) {\n                var _a;\n                var value = mark.value, offset = mark.offset, config = mark.config;\n                /** @type {?} */\n                var label = config;\n                /** @type {?} */\n                var style$$1;\n                if (_this.nzVertical) {\n                    style$$1 = {\n                        marginBottom: '-50%',\n                        bottom: (value - _this.nzMin) / range * 100 + \"%\"\n                    };\n                }\n                else {\n                    /** @type {?} */\n                    var marksCount = _this.nzMarksArray.length;\n                    /** @type {?} */\n                    var unit = 100 / (marksCount - 1);\n                    /** @type {?} */\n                    var markWidth = unit * 0.9;\n                    style$$1 = {\n                        width: markWidth + \"%\",\n                        marginLeft: -markWidth / 2 + \"%\",\n                        left: (value - _this.nzMin) / range * 100 + \"%\"\n                    };\n                }\n                // custom configuration\n                if (typeof config === 'object') {\n                    label = config.label;\n                    if (config.style) {\n                        style$$1 = __assign({}, style$$1, config.style);\n                    }\n                }\n                return {\n                    id: value,\n                    value: value,\n                    offset: offset,\n                    classes: (_a = {},\n                        _a[_this.nzClassName + \"-text\"] = true,\n                        _a),\n                    style: style$$1,\n                    label: label\n                };\n            }); // END - map\n        };\n    /**\n     * @return {?}\n     */\n    NzSliderMarksComponent.prototype.togglePointActive = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this.attrs && this.nzLowerBound !== null && this.nzUpperBound !== null) {\n                this.attrs.forEach(function (attr) {\n                    /** @type {?} */\n                    var value = attr.value;\n                    /** @type {?} */\n                    var isActive = (!_this.nzIncluded && value === _this.nzUpperBound) ||\n                        (_this.nzIncluded && value <= _this.nzUpperBound && value >= _this.nzLowerBound);\n                    attr.classes[_this.nzClassName + \"-text-active\"] = isActive;\n                });\n            }\n        };\n    return NzSliderMarksComponent;\n}());\nvar Marks = /** @class */ /*@__PURE__*/ (function () {\n    function Marks() {\n    }\n    return Marks;\n}());\nvar MarksArray = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(MarksArray, _super);\n    function MarksArray() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return MarksArray;\n}(Array));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzSliderService = /** @class */ /*@__PURE__*/ (function () {\n    function NzSliderService() {\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzSliderService.prototype.pauseEvent = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            e.stopPropagation();\n            e.preventDefault();\n        };\n    /**\n     * @param {?} num\n     * @return {?}\n     */\n    NzSliderService.prototype.getPrecision = /**\n     * @param {?} num\n     * @return {?}\n     */\n        function (num) {\n            /** @type {?} */\n            var numStr = num.toString();\n            /** @type {?} */\n            var dotIndex = numStr.indexOf('.');\n            return dotIndex >= 0 ? numStr.length - dotIndex - 1 : 0;\n        };\n    /**\n     * @template T\n     * @param {?} arr\n     * @return {?}\n     */\n    NzSliderService.prototype.cloneArray = /**\n     * @template T\n     * @param {?} arr\n     * @return {?}\n     */\n        function (arr) {\n            return arr.slice();\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzSliderService.prototype.isNotTouchEvent = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            return !e.touches || e.touches.length > 1 ||\n                (e.type.toLowerCase() === 'touchend' && e.touches.length > 0);\n        };\n    // convert value to offset in percent\n    /**\n     * @param {?} min\n     * @param {?} max\n     * @param {?} value\n     * @return {?}\n     */\n    NzSliderService.prototype.valueToOffset = /**\n     * @param {?} min\n     * @param {?} max\n     * @param {?} value\n     * @return {?}\n     */\n        function (min, max, value) {\n            return (value - min) / (max - min) * 100;\n        };\n    /**\n     * @param {?} num\n     * @param {?} min\n     * @param {?} max\n     * @return {?}\n     */\n    NzSliderService.prototype.correctNumLimit = /**\n     * @param {?} num\n     * @param {?} min\n     * @param {?} max\n     * @return {?}\n     */\n        function (num, min, max) {\n            /** @type {?} */\n            var res = +num;\n            if (isNaN(res)) {\n                return min;\n            }\n            if (num < min) {\n                res = min;\n            }\n            else if (num > max) {\n                res = max;\n            }\n            return res;\n        };\n    /**\n     * get the offset of an element relative to the document (Reference from jquery's offset())\n     * @param elem HTMLElement ref\n     */\n    /**\n     * get the offset of an element relative to the document (Reference from jquery's offset())\n     * @param {?} elem HTMLElement ref\n     * @return {?}\n     */\n    NzSliderService.prototype.getElementOffset = /**\n     * get the offset of an element relative to the document (Reference from jquery's offset())\n     * @param {?} elem HTMLElement ref\n     * @return {?}\n     */\n        function (elem) {\n            // Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n            // Support: IE <=11 only\n            // Running getBoundingClientRect on a\n            // disconnected node in IE throws an error\n            if (!elem.getClientRects().length) {\n                return { top: 0, left: 0 };\n            }\n            /** @type {?} */\n            var rect = elem.getBoundingClientRect();\n            /** @type {?} */\n            var win = elem.ownerDocument.defaultView;\n            return {\n                top: rect.top + win.pageYOffset,\n                left: rect.left + win.pageXOffset\n            };\n        };\n    return NzSliderService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar SliderHandle = /** @class */ /*@__PURE__*/ (function () {\n    function SliderHandle() {\n    }\n    return SliderHandle;\n}());\nvar NzSliderComponent = /** @class */ /*@__PURE__*/ (function () {\n    // |--------------------------------------------------------------------------------------------\n    // | Lifecycle hooks\n    // |--------------------------------------------------------------------------------------------\n    function NzSliderComponent(utils) {\n        this.utils = utils;\n        // Debugging\n        this.nzDebugId = null;\n        // Static configurations (properties that can only specify once)\n        this.nzStep = 1;\n        this.nzMarks = null;\n        this.nzMin = 0;\n        this.nzMax = 100;\n        this.nzDefaultValue = null;\n        this.nzOnAfterChange = new EventEmitter();\n        this._disabled = false;\n        this._dots = false;\n        this._included = true;\n        this._range = false;\n        this._vertical = false;\n        this.value = null;\n        this.cacheSliderStart = null;\n        this.cacheSliderLength = null;\n        this.prefixCls = 'ant-slider';\n        this.activeValueIndex = null;\n        this.track = { offset: null, length: null };\n        this.bounds = { lower: null, upper: null };\n        this.onTouched = function () {\n        } // onTouch function registered via registerOnTouch (ControlValueAccessor).\n        ;\n        this.isDragging = false;\n    }\n    Object.defineProperty(NzSliderComponent.prototype, \"nzDisabled\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._disabled;\n        },\n        // Dynamic property settings\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._disabled = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSliderComponent.prototype, \"nzVertical\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._vertical;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._vertical = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSliderComponent.prototype, \"nzRange\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._range;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._range = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSliderComponent.prototype, \"nzDots\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._dots;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._dots = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSliderComponent.prototype, \"nzIncluded\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._included;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._included = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // |--------------------------------------------------------------------------------------------\n    // | value accessors & ngModel accessors\n    // |--------------------------------------------------------------------------------------------\n    /**\n     * @param {?} val\n     * @param {?=} isWriteValue\n     * @return {?}\n     */\n    NzSliderComponent.prototype.setValue = /**\n     * @param {?} val\n     * @param {?=} isWriteValue\n     * @return {?}\n     */\n        function (val, isWriteValue) {\n            if (isWriteValue === void 0) {\n                isWriteValue = false;\n            }\n            if (isWriteValue) { // [ngModel-writeValue]: Formatting before setting value, always update current value, but trigger onValueChange ONLY when the \"formatted value\" not equals \"input value\"\n                // [ngModel-writeValue]: Formatting before setting value, always update current value, but trigger onValueChange ONLY when the \"formatted value\" not equals \"input value\"\n                this.value = this.formatValue(val);\n                this.log(\"[ngModel:setValue/writeValue]Update track & handles\");\n                this.updateTrackAndHandles();\n                // if (!this.isValueEqual(this.value, val)) {\n                //   this.log(`[ngModel:setValue/writeValue]onValueChange`, val);\n                //   if (this.onValueChange) { // NOTE: onValueChange will be unavailable when writeValue() called at the first time\n                //     this.onValueChange(this.value);\n                //   }\n                // }\n            }\n            else { // [Normal]: setting value, ONLY check changed, then update and trigger onValueChange\n                // [Normal]: setting value, ONLY check changed, then update and trigger onValueChange\n                if (!this.isValueEqual(this.value, val)) {\n                    this.value = val;\n                    this.log(\"[Normal:setValue]Update track & handles\");\n                    this.updateTrackAndHandles();\n                    this.log(\"[Normal:setValue]onValueChange\", val);\n                    if (this.onValueChange) { // NOTE: onValueChange will be unavailable when writeValue() called at the first time\n                        // NOTE: onValueChange will be unavailable when writeValue() called at the first time\n                        this.onValueChange(this.value);\n                    }\n                }\n            }\n        };\n    /**\n     * @param {?=} cloneAndSort\n     * @return {?}\n     */\n    NzSliderComponent.prototype.getValue = /**\n     * @param {?=} cloneAndSort\n     * @return {?}\n     */\n        function (cloneAndSort) {\n            if (cloneAndSort === void 0) {\n                cloneAndSort = false;\n            }\n            // TODO: using type guard, remove type cast\n            if (cloneAndSort && this.nzRange) { // clone & sort range values\n                // clone & sort range values\n                return this.utils.cloneArray(/** @type {?} */ (this.value)).sort(function (a, b) { return a - b; });\n            }\n            return this.value;\n        };\n    // clone & sort current value and convert them to offsets, then return the new one\n    /**\n     * @param {?=} value\n     * @return {?}\n     */\n    NzSliderComponent.prototype.getValueToOffset = /**\n     * @param {?=} value\n     * @return {?}\n     */\n        function (value) {\n            var _this = this;\n            /** @type {?} */\n            var normalizedValue = value;\n            if (typeof normalizedValue === 'undefined') {\n                normalizedValue = this.getValue(true);\n            }\n            // TODO: using type guard, remove type cast\n            return this.nzRange ?\n                ( /** @type {?} */(normalizedValue)).map(function (val) { return _this.valueToOffset(val); }) :\n                this.valueToOffset(/** @type {?} */ (normalizedValue));\n        };\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    NzSliderComponent.prototype.writeValue = /**\n     * @param {?} val\n     * @return {?}\n     */\n        function (val) {\n            this.log(\"[ngModel/writeValue]current writing value = \", val);\n            this.setValue(val, true);\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzSliderComponent.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this.onValueChange = fn;\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzSliderComponent.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this.onTouched = fn;\n        };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    NzSliderComponent.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n        function (isDisabled) {\n            this.nzDisabled = isDisabled;\n            this.toggleDragDisabled(isDisabled);\n            this.setClassMap();\n        };\n    // initialize event binding, class init, etc. (called only once)\n    /**\n     * @return {?}\n     */\n    NzSliderComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            // initial checking\n            this.checkValidValue(this.nzDefaultValue); // check nzDefaultValue\n            // default handles\n            this.handles = this._generateHandles(this.nzRange ? 2 : 1);\n            // initialize\n            this.sliderDOM = this.slider.nativeElement;\n            if (this.getValue() === null) {\n                this.setValue(this.formatValue(null));\n            } // init with default value\n            this.marksArray = this.nzMarks === null ? null : this.toMarksArray(this.nzMarks);\n            // event bindings\n            this.createDrag();\n            // initialize drag's disabled status\n            this.toggleDragDisabled(this.nzDisabled);\n            // the first time to init classes\n            this.setClassMap();\n        };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NzSliderComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            var nzDisabled = changes.nzDisabled, nzMarks = changes.nzMarks, nzRange = changes.nzRange;\n            if (nzDisabled && !nzDisabled.firstChange) {\n                this.toggleDragDisabled(nzDisabled.currentValue);\n                this.setClassMap();\n            }\n            else if (nzMarks && !nzMarks.firstChange) {\n                this.marksArray = this.nzMarks ? this.toMarksArray(this.nzMarks) : null;\n            }\n            else if (nzRange && !nzRange.firstChange) {\n                this.setValue(this.formatValue(null)); // Change to default value when nzRange changed\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzSliderComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.unsubscribeDrag();\n        };\n    // |--------------------------------------------------------------------------------------------\n    // | Basic flow functions\n    // |--------------------------------------------------------------------------------------------\n    /**\n     * @return {?}\n     */\n    NzSliderComponent.prototype.setClassMap = /**\n     * @return {?}\n     */\n        function () {\n            var _a;\n            this.classMap = (_a = {},\n                _a[this.prefixCls] = true,\n                _a[this.prefixCls + \"-disabled\"] = this.nzDisabled,\n                _a[this.prefixCls + \"-vertical\"] = this.nzVertical,\n                _a[this.prefixCls + \"-with-marks\"] = this.marksArray ? this.marksArray.length : 0,\n                _a);\n        };\n    // find the cloest value to be activated (only for range = true)\n    /**\n     * @param {?} pointerValue\n     * @return {?}\n     */\n    NzSliderComponent.prototype.setActiveValueIndex = /**\n     * @param {?} pointerValue\n     * @return {?}\n     */\n        function (pointerValue) {\n            if (this.nzRange) {\n                /** @type {?} */\n                var minimal_1 = null;\n                /** @type {?} */\n                var gap_1 = void 0;\n                /** @type {?} */\n                var activeIndex_1 = void 0;\n                // TODO: using type guard, remove type cast\n                ( /** @type {?} */(this.getValue())).forEach(function (val, index) {\n                    gap_1 = Math.abs(pointerValue - val);\n                    if (minimal_1 === null || gap_1 < minimal_1) {\n                        minimal_1 = gap_1;\n                        activeIndex_1 = index;\n                    }\n                });\n                this.activeValueIndex = activeIndex_1;\n            }\n        };\n    /**\n     * @param {?} pointerValue\n     * @return {?}\n     */\n    NzSliderComponent.prototype.setActiveValue = /**\n     * @param {?} pointerValue\n     * @return {?}\n     */\n        function (pointerValue) {\n            if (this.nzRange) {\n                /** @type {?} */\n                var newValue = this.utils.cloneArray(/** @type {?} */ (this.value));\n                newValue[this.activeValueIndex] = pointerValue;\n                this.setValue(newValue);\n            }\n            else {\n                this.setValue(pointerValue);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzSliderComponent.prototype.updateTrackAndHandles = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            var _a, _b;\n            /** @type {?} */\n            var value = this.getValue();\n            /** @type {?} */\n            var offset = this.getValueToOffset(value);\n            /** @type {?} */\n            var valueSorted = this.getValue(true);\n            /** @type {?} */\n            var offsetSorted = this.getValueToOffset(valueSorted);\n            /** @type {?} */\n            var boundParts = this.nzRange ? /** @type {?} */ (valueSorted) : [0, valueSorted];\n            /** @type {?} */\n            var trackParts = this.nzRange ? [offsetSorted[0], offsetSorted[1] - offsetSorted[0]] : [0, offsetSorted];\n            this.handles.forEach(function (handle, index) {\n                handle.offset = _this.nzRange ? offset[index] : offset;\n                handle.value = _this.nzRange ? value[index] : value;\n            });\n            _a = __read(boundParts, 2), this.bounds.lower = _a[0], this.bounds.upper = _a[1];\n            _b = __read(trackParts, 2), this.track.offset = _b[0], this.track.length = _b[1];\n        };\n    /**\n     * @param {?} marks\n     * @return {?}\n     */\n    NzSliderComponent.prototype.toMarksArray = /**\n     * @param {?} marks\n     * @return {?}\n     */\n        function (marks) {\n            /** @type {?} */\n            var marksArray = [];\n            for (var key in marks) {\n                /** @type {?} */\n                var mark = marks[key];\n                /** @type {?} */\n                var val = typeof key === 'number' ? key : parseFloat(key);\n                if (val < this.nzMin || val > this.nzMax) {\n                    continue;\n                }\n                marksArray.push({ value: val, offset: this.valueToOffset(val), config: mark });\n            }\n            return marksArray;\n        };\n    // |--------------------------------------------------------------------------------------------\n    // | Event listeners & bindings\n    // |--------------------------------------------------------------------------------------------\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzSliderComponent.prototype.onDragStart = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.log('[onDragStart]dragging value = ', value);\n            this.toggleDragMoving(true);\n            // cache DOM layout/reflow operations\n            this.cacheSliderProperty();\n            // trigger drag start\n            this.setActiveValueIndex(value);\n            this.setActiveValue(value);\n            // Tooltip visibility of handles\n            this._showHandleTooltip(this.nzRange ? this.activeValueIndex : 0);\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzSliderComponent.prototype.onDragMove = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.log('[onDragMove]dragging value = ', value);\n            // trigger drag moving\n            this.setActiveValue(value);\n        };\n    /**\n     * @return {?}\n     */\n    NzSliderComponent.prototype.onDragEnd = /**\n     * @return {?}\n     */\n        function () {\n            this.log('[onDragEnd]');\n            this.toggleDragMoving(false);\n            this.nzOnAfterChange.emit(this.getValue(true));\n            // remove cache DOM layout/reflow operations\n            this.cacheSliderProperty(true);\n            // Hide all tooltip\n            this._hideAllHandleTooltip();\n        };\n    /**\n     * @return {?}\n     */\n    NzSliderComponent.prototype.createDrag = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            /** @type {?} */\n            var sliderDOM = this.sliderDOM;\n            /** @type {?} */\n            var orientField = this.nzVertical ? 'pageY' : 'pageX';\n            /** @type {?} */\n            var mouse = {\n                start: 'mousedown', move: 'mousemove', end: 'mouseup',\n                pluckKey: [orientField]\n            };\n            /** @type {?} */\n            var touch = {\n                start: 'touchstart', move: 'touchmove', end: 'touchend',\n                pluckKey: ['touches', '0', orientField],\n                filter: function (e) { return !_this.utils.isNotTouchEvent(/** @type {?} */ (e)); }\n            };\n            // make observables\n            [mouse, touch].forEach(function (source) {\n                var start = source.start, move = source.move, end = source.end, pluckKey = source.pluckKey, _a = source.filter, filterFunc = _a === void 0 ? (function () { return true; }) : _a;\n                // start\n                source.startPlucked$ = fromEvent(sliderDOM, start).pipe(filter(filterFunc), tap(_this.utils.pauseEvent), pluck.apply(void 0, __spread(pluckKey)), map(function (position) { return _this.findClosestValue(position); }));\n                // end\n                source.end$ = fromEvent(document, end);\n                // resolve move\n                source.moveResolved$ = fromEvent(document, move).pipe(filter(filterFunc), tap(_this.utils.pauseEvent), pluck.apply(void 0, __spread(pluckKey)), distinctUntilChanged(), map(function (position) { return _this.findClosestValue(position); }), distinctUntilChanged(), takeUntil(source.end$));\n                // merge to become moving\n                // source.move$ = source.startPlucked$.mergeMapTo(source.moveResolved$);\n            });\n            // merge mouse and touch observables\n            this.dragstart$ = merge(mouse.startPlucked$, touch.startPlucked$);\n            // this.dragmove$ = Observable.merge(mouse.move$, touch.move$);\n            this.dragmove$ = merge(mouse.moveResolved$, touch.moveResolved$);\n            this.dragend$ = merge(mouse.end$, touch.end$);\n        };\n    /**\n     * @param {?=} periods\n     * @return {?}\n     */\n    NzSliderComponent.prototype.subscribeDrag = /**\n     * @param {?=} periods\n     * @return {?}\n     */\n        function (periods) {\n            if (periods === void 0) {\n                periods = ['start', 'move', 'end'];\n            }\n            this.log('[subscribeDrag]this.dragstart$ = ', this.dragstart$);\n            if (periods.indexOf('start') !== -1 && this.dragstart$ && !this.dragstart_) {\n                this.dragstart_ = this.dragstart$.subscribe(this.onDragStart.bind(this));\n            }\n            if (periods.indexOf('move') !== -1 && this.dragmove$ && !this.dragmove_) {\n                this.dragmove_ = this.dragmove$.subscribe(this.onDragMove.bind(this));\n            }\n            if (periods.indexOf('end') !== -1 && this.dragend$ && !this.dragend_) {\n                this.dragend_ = this.dragend$.subscribe(this.onDragEnd.bind(this));\n            }\n        };\n    /**\n     * @param {?=} periods\n     * @return {?}\n     */\n    NzSliderComponent.prototype.unsubscribeDrag = /**\n     * @param {?=} periods\n     * @return {?}\n     */\n        function (periods) {\n            if (periods === void 0) {\n                periods = ['start', 'move', 'end'];\n            }\n            this.log('[unsubscribeDrag]this.dragstart_ = ', this.dragstart_);\n            if (periods.indexOf('start') !== -1 && this.dragstart_) {\n                this.dragstart_.unsubscribe();\n                this.dragstart_ = null;\n            }\n            if (periods.indexOf('move') !== -1 && this.dragmove_) {\n                this.dragmove_.unsubscribe();\n                this.dragmove_ = null;\n            }\n            if (periods.indexOf('end') !== -1 && this.dragend_) {\n                this.dragend_.unsubscribe();\n                this.dragend_ = null;\n            }\n        };\n    /**\n     * @param {?} movable\n     * @return {?}\n     */\n    NzSliderComponent.prototype.toggleDragMoving = /**\n     * @param {?} movable\n     * @return {?}\n     */\n        function (movable) {\n            /** @type {?} */\n            var periods = ['move', 'end'];\n            if (movable) {\n                this.isDragging = true;\n                this.subscribeDrag(periods);\n            }\n            else {\n                this.isDragging = false;\n                this.unsubscribeDrag(periods);\n            }\n        };\n    /**\n     * @param {?} disabled\n     * @return {?}\n     */\n    NzSliderComponent.prototype.toggleDragDisabled = /**\n     * @param {?} disabled\n     * @return {?}\n     */\n        function (disabled) {\n            if (disabled) {\n                this.unsubscribeDrag();\n            }\n            else {\n                this.subscribeDrag(['start']);\n            }\n        };\n    // |--------------------------------------------------------------------------------------------\n    // | Util functions (tools)\n    // |--------------------------------------------------------------------------------------------\n    // find the closest value depend on pointer's position\n    /**\n     * @param {?} position\n     * @return {?}\n     */\n    NzSliderComponent.prototype.findClosestValue = /**\n     * @param {?} position\n     * @return {?}\n     */\n        function (position) {\n            /** @type {?} */\n            var sliderStart = this.getSliderStartPosition();\n            /** @type {?} */\n            var sliderLength = this.getSliderLength();\n            /** @type {?} */\n            var ratio = this.utils.correctNumLimit((position - sliderStart) / sliderLength, 0, 1);\n            /** @type {?} */\n            var val = (this.nzMax - this.nzMin) * (this.nzVertical ? 1 - ratio : ratio) + this.nzMin;\n            /** @type {?} */\n            var points = (this.nzMarks === null ? [] : Object.keys(this.nzMarks).map(parseFloat));\n            // push closest step\n            if (this.nzStep !== null && !this.nzDots) {\n                /** @type {?} */\n                var closestOne = Math.round(val / this.nzStep) * this.nzStep;\n                points.push(closestOne);\n            }\n            /** @type {?} */\n            var gaps = points.map(function (point) { return Math.abs(val - point); });\n            /** @type {?} */\n            var closest = points[gaps.indexOf(Math.min.apply(Math, __spread(gaps)))];\n            // return the fixed\n            return this.nzStep === null ? closest :\n                parseFloat(closest.toFixed(this.utils.getPrecision(this.nzStep)));\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzSliderComponent.prototype.valueToOffset = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            return this.utils.valueToOffset(this.nzMin, this.nzMax, value);\n        };\n    /**\n     * @return {?}\n     */\n    NzSliderComponent.prototype.getSliderStartPosition = /**\n     * @return {?}\n     */\n        function () {\n            if (this.cacheSliderStart !== null) {\n                return this.cacheSliderStart;\n            }\n            /** @type {?} */\n            var offset = this.utils.getElementOffset(this.sliderDOM);\n            return this.nzVertical ? offset.top : offset.left;\n        };\n    /**\n     * @return {?}\n     */\n    NzSliderComponent.prototype.getSliderLength = /**\n     * @return {?}\n     */\n        function () {\n            if (this.cacheSliderLength !== null) {\n                return this.cacheSliderLength;\n            }\n            /** @type {?} */\n            var sliderDOM = this.sliderDOM;\n            return this.nzVertical ?\n                sliderDOM.clientHeight : sliderDOM.clientWidth;\n        };\n    // cache DOM layout/reflow operations for performance (may not necessary?)\n    /**\n     * @param {?=} remove\n     * @return {?}\n     */\n    NzSliderComponent.prototype.cacheSliderProperty = /**\n     * @param {?=} remove\n     * @return {?}\n     */\n        function (remove) {\n            if (remove === void 0) {\n                remove = false;\n            }\n            this.cacheSliderStart = remove ? null : this.getSliderStartPosition();\n            this.cacheSliderLength = remove ? null : this.getSliderLength();\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzSliderComponent.prototype.formatValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            var _this = this;\n            /** @type {?} */\n            var res = value;\n            if (!this.checkValidValue(value)) { // if empty, use default value\n                // if empty, use default value\n                res = this.nzDefaultValue === null ?\n                    (this.nzRange ? [this.nzMin, this.nzMax] : this.nzMin) : this.nzDefaultValue;\n            }\n            else { // format\n                // format\n                // TODO: using type guard, remove type cast\n                res = this.nzRange ?\n                    ( /** @type {?} */(value)).map(function (val) { return _this.utils.correctNumLimit(val, _this.nzMin, _this.nzMax); }) :\n                    this.utils.correctNumLimit(/** @type {?} */ (value), this.nzMin, this.nzMax);\n            }\n            return res;\n        };\n    // check if value is valid and throw error if value-type/range not match\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzSliderComponent.prototype.checkValidValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            /** @type {?} */\n            var range = this.nzRange;\n            if (value === null || value === undefined) {\n                return false;\n            }\n            /** @type {?} */\n            var isArray = Array.isArray(value);\n            if (!Array.isArray(value)) {\n                /** @type {?} */\n                var parsedValue = value;\n                if (typeof value !== 'number') {\n                    parsedValue = parseFloat(value);\n                }\n                if (isNaN(parsedValue)) {\n                    return false;\n                } // it's an invalid value, just return\n            }\n            if (isArray !== !!range) { // value type not match\n                // value type not match\n                throw new Error(\"The \\\"nzRange\\\" can't match the \\\"nzValue\\\"'s type, please check these properties: \\\"nzRange\\\", \\\"nzValue\\\", \\\"nzDefaultValue\\\".\");\n            }\n            return true;\n        };\n    /**\n     * @param {?} value\n     * @param {?} val\n     * @return {?}\n     */\n    NzSliderComponent.prototype.isValueEqual = /**\n     * @param {?} value\n     * @param {?} val\n     * @return {?}\n     */\n        function (value, val) {\n            if (typeof value !== typeof val) {\n                return false;\n            }\n            if (Array.isArray(value)) {\n                /** @type {?} */\n                var len = value.length;\n                for (var i = 0; i < len; i++) {\n                    if (value[i] !== val[i]) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            else {\n                return value === val;\n            }\n        };\n    // print debug info\n    // TODO: should not kept in component\n    /* tslint:disable-next-line:no-any */\n    /**\n     * @param {...?} messages\n     * @return {?}\n     */\n    NzSliderComponent.prototype.log = /**\n     * @param {...?} messages\n     * @return {?}\n     */\n        function () {\n            var messages = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                messages[_i] = arguments[_i];\n            }\n            if (this.nzDebugId !== null) {\n                /** @type {?} */\n                var args = [\"[nz-slider][#\" + this.nzDebugId + \"] \"].concat(Array.prototype.slice.call(arguments));\n                console.log.apply(null, args);\n            }\n        };\n    /**\n     * @param {?=} handleIndex\n     * @return {?}\n     */\n    NzSliderComponent.prototype._showHandleTooltip = /**\n     * @param {?=} handleIndex\n     * @return {?}\n     */\n        function (handleIndex) {\n            var _this = this;\n            if (handleIndex === void 0) {\n                handleIndex = 0;\n            }\n            this.handles.forEach(function (handle, index) {\n                _this.handles[index].active = index === handleIndex;\n            });\n        };\n    /**\n     * @return {?}\n     */\n    NzSliderComponent.prototype._hideAllHandleTooltip = /**\n     * @return {?}\n     */\n        function () {\n            this.handles.forEach(function (handle) { return handle.active = false; });\n        };\n    /**\n     * @param {?} amount\n     * @return {?}\n     */\n    NzSliderComponent.prototype._generateHandles = /**\n     * @param {?} amount\n     * @return {?}\n     */\n        function (amount) {\n            /** @type {?} */\n            var handles = [];\n            for (var i = 0; i < amount; i++) {\n                handles.push({ offset: null, value: null, active: false });\n            }\n            return handles;\n        };\n    return NzSliderComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzSliderHandleComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzSliderHandleComponent(_slider) {\n        this._slider = _slider;\n        this.style = {};\n    }\n    Object.defineProperty(NzSliderHandleComponent.prototype, \"nzActive\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            /** @type {?} */\n            var show = toBoolean(value);\n            if (this.tooltip) {\n                if (show) {\n                    this.tooltip.show();\n                }\n                else {\n                    this.tooltip.hide();\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NzSliderHandleComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            if (changes[\"nzOffset\"]) {\n                this._updateStyle();\n            }\n            if (changes[\"nzValue\"]) {\n                this._updateTooltipTitle(); // [For tooltip]\n                this._updateTooltipPosition(); // [For tooltip]\n            }\n        };\n    // Hover to toggle tooltip when not dragging\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    NzSliderHandleComponent.prototype.onMouseEnter = /**\n     * @param {?} $event\n     * @return {?}\n     */\n        function ($event) {\n            if (!this._slider.isDragging) {\n                this.nzActive = true;\n            }\n        };\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    NzSliderHandleComponent.prototype.onMouseLeave = /**\n     * @param {?} $event\n     * @return {?}\n     */\n        function ($event) {\n            if (!this._slider.isDragging) {\n                this.nzActive = false;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzSliderHandleComponent.prototype._updateTooltipTitle = /**\n     * @return {?}\n     */\n        function () {\n            // [For tooltip]\n            this.tooltipTitle = this.nzTipFormatter ? this.nzTipFormatter(this.nzValue) : \"\" + this.nzValue;\n        };\n    /**\n     * @return {?}\n     */\n    NzSliderHandleComponent.prototype._updateTooltipPosition = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            // [For tooltip]\n            if (this.tooltip) {\n                window.setTimeout(function () { return _this.tooltip.updatePosition(); }, 0); // MAY use ngAfterViewChecked? but this will be called so many times.\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzSliderHandleComponent.prototype._updateStyle = /**\n     * @return {?}\n     */\n        function () {\n            this.style[this.nzVertical ? 'bottom' : 'left'] = this.nzOffset + \"%\";\n        };\n    return NzSliderHandleComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzSliderStepComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzSliderStepComponent() {\n        this._vertical = false;\n        this._included = false;\n        // Dynamic properties\n        this.nzLowerBound = null;\n        this.nzUpperBound = null;\n    }\n    Object.defineProperty(NzSliderStepComponent.prototype, \"nzVertical\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._vertical;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            // Required\n            this._vertical = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSliderStepComponent.prototype, \"nzIncluded\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._included;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._included = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NzSliderStepComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            if (changes[\"nzMarksArray\"]) {\n                this.buildAttrs();\n            }\n            if (changes[\"nzMarksArray\"] || changes[\"nzLowerBound\"] || changes[\"nzUpperBound\"]) {\n                this.togglePointActive();\n            }\n        };\n    /**\n     * @param {?} index\n     * @param {?} attr\n     * @return {?}\n     */\n    NzSliderStepComponent.prototype.trackById = /**\n     * @param {?} index\n     * @param {?} attr\n     * @return {?}\n     */\n        function (index, attr) {\n            return attr.id;\n        };\n    /**\n     * @return {?}\n     */\n    NzSliderStepComponent.prototype.buildAttrs = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var orient = this.nzVertical ? 'bottom' : 'left';\n            /** @type {?} */\n            var prefixCls = this.nzPrefixCls;\n            this.attrs = this.nzMarksArray.map(function (mark) {\n                var _a, _b;\n                var value = mark.value, offset = mark.offset;\n                return {\n                    id: value,\n                    value: value,\n                    offset: offset,\n                    style: (_a = {},\n                        _a[orient] = offset + \"%\",\n                        _a),\n                    classes: (_b = {},\n                        _b[prefixCls + \"-dot\"] = true,\n                        _b[prefixCls + \"-dot-active\"] = false,\n                        _b)\n                };\n            });\n        };\n    /**\n     * @return {?}\n     */\n    NzSliderStepComponent.prototype.togglePointActive = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this.attrs && this.nzLowerBound !== null && this.nzUpperBound !== null) {\n                this.attrs.forEach(function (attr) {\n                    /** @type {?} */\n                    var value = attr.value;\n                    /** @type {?} */\n                    var isActive = (!_this.nzIncluded && value === _this.nzUpperBound) ||\n                        (_this.nzIncluded && value <= _this.nzUpperBound && value >= _this.nzLowerBound);\n                    attr.classes[_this.nzPrefixCls + \"-dot-active\"] = isActive;\n                });\n            }\n        };\n    return NzSliderStepComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzSliderTrackComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzSliderTrackComponent() {\n        this._vertical = false;\n        this._included = false;\n        this.style = {};\n    }\n    Object.defineProperty(NzSliderTrackComponent.prototype, \"nzVertical\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._vertical;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            // Required\n            this._vertical = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSliderTrackComponent.prototype, \"nzIncluded\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._included;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._included = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NzSliderTrackComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            if (changes[\"nzIncluded\"]) {\n                this.style.visibility = this.nzIncluded ? 'visible' : 'hidden';\n            }\n            if (changes[\"nzVertical\"] || changes[\"nzOffset\"] || changes[\"nzLength\"]) {\n                if (this.nzVertical) {\n                    this.style.bottom = this.nzOffset + \"%\";\n                    this.style.height = this.nzLength + \"%\";\n                }\n                else {\n                    this.style.left = this.nzOffset + \"%\";\n                    this.style.width = this.nzLength + \"%\";\n                }\n            }\n        };\n    return NzSliderTrackComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzSliderModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzSliderModule() {\n    }\n    return NzSliderModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzStepComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzStepComponent(elementRef, nzUpdateHostClassService) {\n        this.elementRef = elementRef;\n        this.nzUpdateHostClassService = nzUpdateHostClassService;\n        this._status = 'wait';\n        this._currentIndex = 0;\n        this.el = this.elementRef.nativeElement;\n        this.oldAPIIcon = true;\n        this.isCustomStatus = false;\n        this.isDescriptionString = true;\n        this.isTitleString = true;\n        this.isIconString = true;\n        this.last = false;\n        this.showProcessDot = false;\n        this.direction = 'horizontal';\n        this.outStatus = 'process';\n        this.index = 0;\n    }\n    Object.defineProperty(NzStepComponent.prototype, \"nzTitle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._title;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.isTitleString = !(value instanceof TemplateRef);\n            this._title = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzStepComponent.prototype, \"nzIcon\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._icon;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (!(value instanceof TemplateRef)) {\n                this.isIconString = true;\n                if (typeof value === 'string') {\n                    /** @type {?} */\n                    var str = /** @type {?} */ (value);\n                    this.oldAPIIcon = str.indexOf('anticon') > -1;\n                }\n                else {\n                    this.oldAPIIcon = true;\n                }\n            }\n            else {\n                this.isIconString = false;\n            }\n            this._icon = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzStepComponent.prototype, \"nzStatus\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._status;\n        },\n        set: /**\n         * @param {?} status\n         * @return {?}\n         */ function (status) {\n            this._status = status;\n            this.isCustomStatus = true;\n            this.updateClassMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzStepComponent.prototype, \"nzDescription\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._description;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.isDescriptionString = !(value instanceof TemplateRef);\n            this._description = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzStepComponent.prototype, \"currentIndex\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._currentIndex;\n        },\n        set: /**\n         * @param {?} current\n         * @return {?}\n         */ function (current) {\n            this._currentIndex = current;\n            if (!this.isCustomStatus) {\n                if (current > this.index) {\n                    this._status = 'finish';\n                }\n                else if (current === this.index) {\n                    if (this.outStatus) {\n                        this._status = this.outStatus;\n                    }\n                }\n                else {\n                    this._status = 'wait';\n                }\n            }\n            this.updateClassMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzStepComponent.prototype.updateClassMap = /**\n     * @return {?}\n     */\n        function () {\n            var _a;\n            /** @type {?} */\n            var classMap = (_a = {},\n                _a['ant-steps-item'] = true,\n                _a[\"ant-steps-item-wait\"] = this.nzStatus === 'wait',\n                _a[\"ant-steps-item-process\"] = this.nzStatus === 'process',\n                _a[\"ant-steps-item-finish\"] = this.nzStatus === 'finish',\n                _a[\"ant-steps-item-error\"] = this.nzStatus === 'error',\n                _a['ant-steps-custom'] = !!this.nzIcon,\n                _a['ant-steps-next-error'] = (this.outStatus === 'error') && (this.currentIndex === this.index + 1),\n                _a);\n            this.nzUpdateHostClassService.updateHostClass(this.el, classMap);\n        };\n    return NzStepComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzStepsComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzStepsComponent() {\n        var _this = this;\n        this._status = 'process';\n        this._current = 0;\n        this._size = 'default';\n        this._direction = 'horizontal';\n        this._startIndex = 0;\n        this.unsubscribe$ = new Subject();\n        this.showProcessDot = false;\n        this.updateChildrenSteps = function () {\n            if (_this.steps) {\n                _this.steps.toArray().forEach(function (step, index, arr) {\n                    Promise.resolve().then(function () {\n                        step.outStatus = _this.nzStatus;\n                        step.showProcessDot = _this.showProcessDot;\n                        if (_this.customProcessDotTemplate) {\n                            step.customProcessTemplate = _this.customProcessDotTemplate;\n                        }\n                        step.direction = _this.nzDirection;\n                        step.index = index + _this.nzStartIndex;\n                        step.currentIndex = _this.nzCurrent;\n                        step.last = arr.length === index + 1;\n                        step.updateClassMap();\n                    });\n                });\n            }\n        };\n    }\n    Object.defineProperty(NzStepsComponent.prototype, \"nzSize\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._size;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._size = value;\n            this.updateClassMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzStepsComponent.prototype, \"nzStartIndex\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._startIndex;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._startIndex = value;\n            this.updateChildrenSteps();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzStepsComponent.prototype, \"nzDirection\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._direction;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._direction = value;\n            this.updateClassMap();\n            this.updateChildrenSteps();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzStepsComponent.prototype, \"nzProgressDot\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (value instanceof TemplateRef) {\n                this.showProcessDot = true;\n                this.customProcessDotTemplate = value;\n            }\n            else {\n                this.showProcessDot = toBoolean(value);\n            }\n            this.updateChildrenSteps();\n            this.updateClassMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzStepsComponent.prototype, \"nzStatus\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._status;\n        },\n        set: /**\n         * @param {?} status\n         * @return {?}\n         */ function (status) {\n            this._status = status;\n            this.updateChildrenSteps();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzStepsComponent.prototype, \"nzCurrent\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._current;\n        },\n        set: /**\n         * @param {?} current\n         * @return {?}\n         */ function (current) {\n            this._current = current;\n            this.updateChildrenSteps();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzStepsComponent.prototype.updateClassMap = /**\n     * @return {?}\n     */\n        function () {\n            var _a;\n            this.stepsClassMap = (_a = {},\n                _a[\"ant-steps-\" + this.nzDirection] = true,\n                _a[\"ant-steps-label-horizontal\"] = this.nzDirection === 'horizontal',\n                _a[\"ant-steps-label-vertical\"] = this.showProcessDot && (this.nzDirection === 'horizontal'),\n                _a[\"ant-steps-dot\"] = this.showProcessDot,\n                _a['ant-steps-small'] = this.nzSize === 'small',\n                _a);\n        };\n    /**\n     * @return {?}\n     */\n    NzStepsComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.updateClassMap();\n        };\n    /**\n     * @return {?}\n     */\n    NzStepsComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.unsubscribe$.next();\n            this.unsubscribe$.complete();\n        };\n    /**\n     * @return {?}\n     */\n    NzStepsComponent.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n        function () {\n            this.updateChildrenSteps();\n            if (this.steps) {\n                this.steps.changes.pipe(takeUntil(this.unsubscribe$)).subscribe(this.updateChildrenSteps);\n            }\n        };\n    return NzStepsComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzStepsModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzStepsModule() {\n    }\n    return NzStepsModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzSwitchComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzSwitchComponent() {\n        this._disabled = false;\n        this._loading = false;\n        this._control = false;\n        this.prefixCls = 'ant-switch';\n        this.checked = false;\n        this.onChange = function () { return null; };\n        this.onTouched = function () { return null; };\n    }\n    Object.defineProperty(NzSwitchComponent.prototype, \"nzControl\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._control;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._control = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSwitchComponent.prototype, \"nzCheckedChildren\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._checkedChildren;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.isCheckedChildrenString = !(value instanceof TemplateRef);\n            this._checkedChildren = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSwitchComponent.prototype, \"nzUnCheckedChildren\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._unCheckedChildren;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.isUnCheckedChildrenString = !(value instanceof TemplateRef);\n            this._unCheckedChildren = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSwitchComponent.prototype, \"nzSize\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._size;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._size = value;\n            this.setClassMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSwitchComponent.prototype, \"nzLoading\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._loading;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._loading = toBoolean(value);\n            this.setClassMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzSwitchComponent.prototype, \"nzDisabled\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._disabled;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._disabled = toBoolean(value);\n            this.setClassMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzSwitchComponent.prototype.onClick = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            e.preventDefault();\n            if ((!this.nzDisabled) && (!this.nzLoading) && (!this.nzControl)) {\n                this.updateValue(!this.checked, true);\n            }\n        };\n    /**\n     * @param {?} value\n     * @param {?} emit\n     * @return {?}\n     */\n    NzSwitchComponent.prototype.updateValue = /**\n     * @param {?} value\n     * @param {?} emit\n     * @return {?}\n     */\n        function (value, emit) {\n            if (this.checked === value) {\n                return;\n            }\n            this.checked = value;\n            this.setClassMap();\n            if (emit) {\n                this.onChange(this.checked);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzSwitchComponent.prototype.setClassMap = /**\n     * @return {?}\n     */\n        function () {\n            var _a;\n            this.classMap = (_a = {},\n                _a[this.prefixCls] = true,\n                _a[this.prefixCls + \"-checked\"] = this.checked,\n                _a[this.prefixCls + \"-loading\"] = this.nzLoading,\n                _a[this.prefixCls + \"-disabled\"] = this.nzDisabled,\n                _a[this.prefixCls + \"-small\"] = this.nzSize === 'small',\n                _a);\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzSwitchComponent.prototype.onKeyDown = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            if (!this.nzControl) {\n                if (e.keyCode === LEFT_ARROW) { // Left\n                    // Left\n                    this.updateValue(false, true);\n                    e.preventDefault();\n                }\n                else if (e.keyCode === RIGHT_ARROW) { // Right\n                    // Right\n                    this.updateValue(true, true);\n                    e.preventDefault();\n                }\n                else if (e.keyCode === SPACE || e.keyCode === ENTER) { // Space, Enter\n                    // Space, Enter\n                    this.updateValue(!this.checked, true);\n                    e.preventDefault();\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzSwitchComponent.prototype.focus = /**\n     * @return {?}\n     */\n        function () {\n            this.switchElement.nativeElement.focus();\n        };\n    /**\n     * @return {?}\n     */\n    NzSwitchComponent.prototype.blur = /**\n     * @return {?}\n     */\n        function () {\n            this.switchElement.nativeElement.blur();\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzSwitchComponent.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.updateValue(value, false);\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzSwitchComponent.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this.onChange = fn;\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzSwitchComponent.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this.onTouched = fn;\n        };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    NzSwitchComponent.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n        function (isDisabled) {\n            this.nzDisabled = isDisabled;\n        };\n    /**\n     * @return {?}\n     */\n    NzSwitchComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.setClassMap();\n        };\n    return NzSwitchComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzSwitchModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzSwitchModule() {\n    }\n    return NzSwitchModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzThComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzThComponent(elementRef, renderer) {\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        this._sort = null;\n        this._filters = [];\n        this._showSort = false;\n        this._showFilter = false;\n        this._showCheckbox = false;\n        this._showRowSelection = false;\n        this._hasDefaultFilter = false;\n        this._customFilter = false;\n        this.el = this.elementRef.nativeElement;\n        this.hasFilterValue = false;\n        this.filterVisible = false;\n        this.multipleFilterList = [];\n        this.singleFilterList = [];\n        /* tslint:disable-next-line:no-any */\n        this.nzSelections = [];\n        this.nzChecked = false;\n        this.nzDisabled = false;\n        this.nzIndeterminate = false;\n        this.nzFilterMultiple = true;\n        this.nzCheckedChange = new EventEmitter();\n        this.nzSortChange = new EventEmitter();\n        this.nzSortChangeWithKey = new EventEmitter();\n        /* tslint:disable-next-line:no-any */\n        this.nzFilterChange = new EventEmitter();\n    }\n    Object.defineProperty(NzThComponent.prototype, \"hasActionsClass\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzShowFilter || this.nzShowSort || this.nzCustomFilter;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzThComponent.prototype, \"hasFiltersClass\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzShowFilter || this.nzCustomFilter;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzThComponent.prototype, \"hasSortersClass\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzShowSort;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzThComponent.prototype.updateSortValue = /**\n     * @return {?}\n     */\n        function () {\n            if (this.nzShowSort) {\n                if (this.nzSort === 'descend') {\n                    this.setSortValue('ascend');\n                }\n                else if (this.nzSort === 'ascend') {\n                    this.setSortValue(null);\n                }\n                else {\n                    this.setSortValue('descend');\n                }\n            }\n        };\n    Object.defineProperty(NzThComponent.prototype, \"nzCustomFilter\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._customFilter;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._customFilter = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzThComponent.prototype, \"nzShowSort\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._showSort;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._showSort = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzThComponent.prototype, \"nzShowFilter\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._showFilter;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._showFilter = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzThComponent.prototype, \"nzShowRowSelection\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._showRowSelection;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._showRowSelection = toBoolean(value);\n            if (this._showRowSelection) {\n                this.renderer.addClass(this.el, 'ant-table-selection-column-custom');\n            }\n            else {\n                this.renderer.removeClass(this.el, 'ant-table-selection-column-custom');\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzThComponent.prototype, \"nzLeft\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (isNotNil(value)) {\n                this.renderer.addClass(this.el, 'ant-table-th-left-sticky');\n                this.renderer.setStyle(this.el, 'left', value);\n            }\n            else {\n                this.renderer.removeClass(this.el, 'ant-table-th-left-sticky');\n                this.renderer.removeStyle(this.el, 'left');\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzThComponent.prototype, \"nzRight\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (isNotNil(value)) {\n                this.renderer.addClass(this.el, 'ant-table-th-right-sticky');\n                this.renderer.setStyle(this.el, 'right', value);\n            }\n            else {\n                this.renderer.removeClass(this.el, 'ant-table-th-right-sticky');\n                this.renderer.removeStyle(this.el, 'right');\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzThComponent.prototype, \"nzExpand\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            /** @type {?} */\n            var isExpand = toBoolean(value);\n            if (isExpand) {\n                this.renderer.addClass(this.el, 'ant-table-expand-icon-th');\n            }\n            else {\n                this.renderer.removeClass(this.el, 'ant-table-expand-icon-th');\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzThComponent.prototype, \"nzShowCheckbox\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._showCheckbox;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._showCheckbox = toBoolean(value);\n            if (this._showCheckbox) {\n                this.renderer.addClass(this.el, 'ant-table-selection-column');\n            }\n            else {\n                this.renderer.removeClass(this.el, 'ant-table-selection-column');\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzThComponent.prototype, \"nzSort\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._sort;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._sort = value;\n            if ((value !== 'ascend') && (value !== 'descend')) {\n                this.renderer.removeClass(this.el, 'ant-table-column-sort');\n            }\n            else {\n                this.renderer.addClass(this.el, 'ant-table-column-sort');\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzThComponent.prototype.setSortValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.nzSort = value;\n            this.nzSortChangeWithKey.emit({ key: this.nzSortKey, value: this.nzSort });\n            this.nzSortChange.emit(this.nzSort);\n        };\n    Object.defineProperty(NzThComponent.prototype, \"filterList\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.multipleFilterList.filter(function (item) { return item.checked; }).map(function (item) { return item.value; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzThComponent.prototype, \"filterValue\", {\n        /* tslint:disable-next-line:no-any */\n        get: /**\n         * @return {?}\n         */ function () {\n            /** @type {?} */\n            var checkedFilter = this.singleFilterList.find(function (item) { return item.checked; });\n            return checkedFilter ? checkedFilter.value : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzThComponent.prototype.updateFilterStatus = /**\n     * @return {?}\n     */\n        function () {\n            if (this.nzFilterMultiple) {\n                this.hasFilterValue = this.filterList.length > 0;\n            }\n            else {\n                this.hasFilterValue = isNotNil(this.filterValue);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzThComponent.prototype.search = /**\n     * @return {?}\n     */\n        function () {\n            this.updateFilterStatus();\n            if (this.nzFilterMultiple) {\n                this.nzFilterChange.emit(this.filterList);\n            }\n            else {\n                this.nzFilterChange.emit(this.filterValue);\n            }\n            this.hideDropDown();\n        };\n    /**\n     * @return {?}\n     */\n    NzThComponent.prototype.reset = /**\n     * @return {?}\n     */\n        function () {\n            this.initMultipleFilterList(true);\n            this.initSingleFilterList(true);\n            this.search();\n            this.hideDropDown();\n            this.hasFilterValue = false;\n        };\n    /**\n     * @param {?} filter\n     * @return {?}\n     */\n    NzThComponent.prototype.checkMultiple = /**\n     * @param {?} filter\n     * @return {?}\n     */\n        function (filter$$1) {\n            filter$$1.checked = !filter$$1.checked;\n        };\n    /**\n     * @param {?} filter\n     * @return {?}\n     */\n    NzThComponent.prototype.checkSingle = /**\n     * @param {?} filter\n     * @return {?}\n     */\n        function (filter$$1) {\n            this.singleFilterList.forEach(function (item) { return item.checked = item === filter$$1; });\n        };\n    /**\n     * @return {?}\n     */\n    NzThComponent.prototype.hideDropDown = /**\n     * @return {?}\n     */\n        function () {\n            this.nzDropDownComponent.nzVisible = false;\n            this.nzDropDownComponent.hide();\n            this.filterVisible = false;\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzThComponent.prototype.dropDownVisibleChange = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.filterVisible = value;\n            if (!value) {\n                this.search();\n            }\n        };\n    Object.defineProperty(NzThComponent.prototype, \"nzFilters\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._filters;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (Array.isArray(value)) {\n                this._filters = value;\n                this.initMultipleFilterList();\n                this.initSingleFilterList();\n                this.updateFilterStatus();\n            }\n            else {\n                console.warn('nzFilters only accept type of Array<{ text: string; value: any }>');\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?=} force\n     * @return {?}\n     */\n    NzThComponent.prototype.initMultipleFilterList = /**\n     * @param {?=} force\n     * @return {?}\n     */\n        function (force) {\n            var _this = this;\n            this.multipleFilterList = this.nzFilters.map(function (item) {\n                /** @type {?} */\n                var checked = force ? false : !!item.byDefault;\n                if (checked) {\n                    _this._hasDefaultFilter = true;\n                }\n                return { text: item.text, value: item.value, checked: checked };\n            });\n            this.checkDefaultFilters();\n        };\n    /**\n     * @param {?=} force\n     * @return {?}\n     */\n    NzThComponent.prototype.initSingleFilterList = /**\n     * @param {?=} force\n     * @return {?}\n     */\n        function (force) {\n            var _this = this;\n            this.singleFilterList = this.nzFilters.map(function (item) {\n                /** @type {?} */\n                var checked = force ? false : !!item.byDefault;\n                if (checked) {\n                    _this._hasDefaultFilter = true;\n                }\n                return { text: item.text, value: item.value, checked: checked };\n            });\n            this.checkDefaultFilters();\n        };\n    /**\n     * @return {?}\n     */\n    NzThComponent.prototype.checkDefaultFilters = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.nzFilters || this.nzFilters.length === 0 || !this._hasDefaultFilter) {\n                return;\n            }\n            this.updateFilterStatus();\n        };\n    return NzThComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzTableComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzTableComponent(renderer, ngZone, elementRef, cdr, nzMeasureScrollbarService, i18n) {\n        this.renderer = renderer;\n        this.ngZone = ngZone;\n        this.elementRef = elementRef;\n        this.cdr = cdr;\n        this.nzMeasureScrollbarService = nzMeasureScrollbarService;\n        this.i18n = i18n;\n        this.unsubscribe$ = new Subject();\n        this._bordered = false;\n        this._showPagination = true;\n        this._loading = false;\n        this._showSizeChanger = false;\n        this._showQuickJumper = false;\n        this._hideOnSinglePage = false;\n        this._scroll = { x: null, y: null };\n        this._pageIndex = 1;\n        this._pageSize = 10;\n        this._widthConfig = [];\n        this._frontPagination = true;\n        this._simple = false;\n        /* tslint:disable-next-line:no-any */\n        this.locale = {};\n        this.el = this.elementRef.nativeElement;\n        this.lastScrollLeft = 0;\n        /* tslint:disable-next-line:no-any */\n        this.rawData = [];\n        /* tslint:disable-next-line:no-any */\n        this.syncData = [];\n        /**\n         * public data for ngFor tr\n         */\n        this.data = [];\n        this.isWidthConfigSet = false;\n        this.nzPageSizeChange = new EventEmitter();\n        this.nzPageIndexChange = new EventEmitter();\n        /* tslint:disable-next-line:no-any */\n        this.nzCurrentPageDataChange = new EventEmitter();\n        this.nzSize = 'default';\n        /**\n         * page size changer select values\n         */\n        this.nzPageSizeOptions = [10, 20, 30, 40, 50];\n        this.nzLoadingDelay = 0;\n    }\n    Object.defineProperty(NzTableComponent.prototype, \"nzSimple\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._simple;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._simple = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTableComponent.prototype, \"nzFrontPagination\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._frontPagination;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._frontPagination = toBoolean(value);\n            this.parseInputData();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTableComponent.prototype, \"nzWidthConfig\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._widthConfig;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.isWidthConfigSet = true;\n            this._widthConfig = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTableComponent.prototype, \"nzTitle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._title;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.isTitleString = !(value instanceof TemplateRef);\n            this._title = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTableComponent.prototype, \"nzFooter\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._footer;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.isFooterString = !(value instanceof TemplateRef);\n            this._footer = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTableComponent.prototype, \"nzNoResult\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._noResult;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.isNoResultString = !(value instanceof TemplateRef);\n            this._noResult = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTableComponent.prototype, \"nzBordered\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._bordered;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._bordered = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTableComponent.prototype, \"nzShowPagination\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._showPagination;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._showPagination = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTableComponent.prototype, \"nzLoading\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._loading;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._loading = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTableComponent.prototype, \"nzShowSizeChanger\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._showSizeChanger;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._showSizeChanger = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTableComponent.prototype, \"nzHideOnSinglePage\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._hideOnSinglePage;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._hideOnSinglePage = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTableComponent.prototype, \"nzShowQuickJumper\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._showQuickJumper;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._showQuickJumper = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTableComponent.prototype, \"nzScroll\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._scroll;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (isNotNil(value)) {\n                this._scroll = value;\n            }\n            else {\n                this._scroll = { x: null, y: null };\n            }\n            this.cdr.detectChanges();\n            this.setScrollPositionClassName();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTableComponent.prototype, \"nzData\", {\n        set: /**\n         * @param {?} data\n         * @return {?}\n         */ function (data) {\n            if (Array.isArray(data)) {\n                this.rawData = data;\n                this.parseInputData();\n            }\n            else {\n                console.warn('nzData only accept array');\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzTableComponent.prototype.parseInputData = /**\n     * @return {?}\n     */\n        function () {\n            if (this.nzFrontPagination) {\n                this.syncData = this.rawData;\n                this.nzTotal = this.syncData.length;\n                this.checkPageIndexBounding();\n                this.generateSyncDisplayData();\n            }\n            else {\n                this.data = this.rawData;\n                this.nzCurrentPageDataChange.emit(this.data);\n            }\n        };\n    Object.defineProperty(NzTableComponent.prototype, \"nzPageIndex\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._pageIndex;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (this._pageIndex === value) {\n                return;\n            }\n            this._pageIndex = value;\n            if (this.nzFrontPagination) {\n                this.generateSyncDisplayData();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    NzTableComponent.prototype.emitPageIndex = /**\n     * @param {?} index\n     * @return {?}\n     */\n        function (index) {\n            this.nzPageIndex = index;\n            this.nzPageIndexChange.emit(this.nzPageIndex);\n        };\n    /**\n     * @param {?} size\n     * @return {?}\n     */\n    NzTableComponent.prototype.emitPageSize = /**\n     * @param {?} size\n     * @return {?}\n     */\n        function (size) {\n            this.nzPageSize = size;\n            this.nzPageSizeChange.emit(this.nzPageSize);\n        };\n    Object.defineProperty(NzTableComponent.prototype, \"nzPageSize\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._pageSize;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (this._pageSize === value) {\n                return;\n            }\n            this._pageSize = value;\n            if (this.nzFrontPagination) {\n                this.checkPageIndexBounding();\n                this.generateSyncDisplayData();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzTableComponent.prototype.checkPageIndexBounding = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this.nzFrontPagination) {\n                /** @type {?} */\n                var maxPageIndex = Math.ceil(this.syncData.length / this.nzPageSize);\n                /** @type {?} */\n                var pageIndex_1 = !this.nzPageIndex ? 1 : (this.nzPageIndex > maxPageIndex ? maxPageIndex : this.nzPageIndex);\n                if (pageIndex_1 !== this.nzPageIndex) {\n                    this._pageIndex = pageIndex_1;\n                    Promise.resolve().then(function () { return _this.nzPageIndexChange.emit(pageIndex_1); });\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzTableComponent.prototype.generateSyncDisplayData = /**\n     * @return {?}\n     */\n        function () {\n            this.data = this.syncData.slice((this.nzPageIndex - 1) * this.nzPageSize, this.nzPageIndex * this.nzPageSize);\n            this.nzCurrentPageDataChange.emit(this.data);\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzTableComponent.prototype.syncScrollTable = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            if (e.currentTarget === e.target) {\n                /** @type {?} */\n                var target = /** @type {?} */ (e.target);\n                if (target.scrollLeft !== this.lastScrollLeft && this.nzScroll && this.nzScroll.x) {\n                    if (target === this.tableBodyElement.nativeElement && this.tableHeaderElement) {\n                        this.tableHeaderElement.nativeElement.scrollLeft = target.scrollLeft;\n                    }\n                    else if (target === this.tableHeaderElement.nativeElement && this.tableBodyElement) {\n                        this.tableBodyElement.nativeElement.scrollLeft = target.scrollLeft;\n                    }\n                    this.setScrollPositionClassName();\n                }\n                this.lastScrollLeft = target.scrollLeft;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzTableComponent.prototype.setScrollPositionClassName = /**\n     * @return {?}\n     */\n        function () {\n            if (this.tableBodyElement && this.nzScroll && this.nzScroll.x) {\n                if ((this.tableBodyElement.nativeElement.scrollWidth === this.tableBodyElement.nativeElement.clientWidth) && (this.tableBodyElement.nativeElement.scrollWidth !== 0)) {\n                    this.setScrollName();\n                }\n                else if (this.tableBodyElement.nativeElement.scrollLeft === 0) {\n                    this.setScrollName('left');\n                }\n                else if (this.tableBodyElement.nativeElement.scrollWidth === (this.tableBodyElement.nativeElement.scrollLeft + this.tableBodyElement.nativeElement.clientWidth)) {\n                    this.setScrollName('right');\n                }\n                else {\n                    this.setScrollName('middle');\n                }\n            }\n        };\n    /**\n     * @param {?=} position\n     * @return {?}\n     */\n    NzTableComponent.prototype.setScrollName = /**\n     * @param {?=} position\n     * @return {?}\n     */\n        function (position) {\n            var _this = this;\n            /** @type {?} */\n            var prefix = 'ant-table-scroll-position';\n            /** @type {?} */\n            var classList = ['left', 'right', 'middle'];\n            classList.forEach(function (name) {\n                _this.renderer.removeClass(_this.tableMainElement.nativeElement, prefix + \"-\" + name);\n            });\n            if (position) {\n                this.renderer.addClass(this.tableMainElement.nativeElement, prefix + \"-\" + position);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzTableComponent.prototype.fitScrollBar = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var scrollbarWidth = this.nzMeasureScrollbarService.scrollBarWidth;\n            if (scrollbarWidth) {\n                this.headerBottomStyle = {\n                    marginBottom: \"-\" + scrollbarWidth + \"px\",\n                    paddingBottom: \"0px\"\n                };\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzTableComponent.prototype.onWindowResize = /**\n     * @return {?}\n     */\n        function () {\n            this.fitScrollBar();\n            this.setScrollPositionClassName();\n        };\n    /**\n     * @return {?}\n     */\n    NzTableComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.i18n.localeChange.pipe(takeUntil(this.unsubscribe$)).subscribe(function () { return _this.locale = _this.i18n.getLocaleData('Table'); });\n            this.fitScrollBar();\n        };\n    /**\n     * @return {?}\n     */\n    NzTableComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            setTimeout(function () { return _this.setScrollPositionClassName(); });\n            this.ngZone.runOutsideAngular(function () {\n                if (_this.tableHeaderElement\n                    && _this.tableHeaderElement.nativeElement\n                    && _this.tableBodyElement\n                    && _this.tableBodyElement.nativeElement) {\n                    merge(fromEvent(_this.tableHeaderElement.nativeElement, 'scroll'), fromEvent(_this.tableBodyElement.nativeElement, 'scroll')).pipe(takeUntil(_this.unsubscribe$)).subscribe(function (data) {\n                        _this.syncScrollTable(data);\n                    });\n                }\n            });\n        };\n    /**\n     * @return {?}\n     */\n    NzTableComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.unsubscribe$.next();\n            this.unsubscribe$.complete();\n        };\n    return NzTableComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzTbodyDirective = /** @class */ /*@__PURE__*/ (function () {\n    function NzTbodyDirective(nzTableComponent) {\n        this.nzTableComponent = nzTableComponent;\n    }\n    return NzTbodyDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzTdComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzTdComponent(elementRef, renderer) {\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        this._showExpand = false;\n        this._expand = false;\n        this._showCheckbox = false;\n        this.isIndentSizeSet = false;\n        this.el = this.elementRef.nativeElement;\n        this.nzChecked = false;\n        this.nzDisabled = false;\n        this.nzIndeterminate = false;\n        this.nzCheckedChange = new EventEmitter();\n        this.nzExpandChange = new EventEmitter();\n    }\n    Object.defineProperty(NzTdComponent.prototype, \"nzIndentSize\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._indentSize;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._indentSize = value;\n            this.isIndentSizeSet = isNotNil(value);\n            this.updateExpandIconClass();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTdComponent.prototype, \"nzExpand\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._expand;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._expand = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTdComponent.prototype, \"nzShowExpand\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._showExpand;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._showExpand = toBoolean(value);\n            this.updateExpandIconClass();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTdComponent.prototype, \"nzShowCheckbox\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._showCheckbox;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._showCheckbox = toBoolean(value);\n            if (this._showCheckbox) {\n                this.renderer.addClass(this.el, 'ant-table-selection-column');\n            }\n            else {\n                this.renderer.removeClass(this.el, 'ant-table-selection-column');\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTdComponent.prototype, \"nzLeft\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (isNotNil(value)) {\n                this.renderer.addClass(this.el, 'ant-table-td-left-sticky');\n                this.renderer.setStyle(this.el, 'left', value);\n            }\n            else {\n                this.renderer.removeClass(this.el, 'ant-table-td-left-sticky');\n                this.renderer.removeStyle(this.el, 'left');\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTdComponent.prototype, \"nzRight\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (isNotNil(value)) {\n                this.renderer.addClass(this.el, 'ant-table-td-right-sticky');\n                this.renderer.setStyle(this.el, 'right', value);\n            }\n            else {\n                this.renderer.removeClass(this.el, 'ant-table-td-right-sticky');\n                this.renderer.removeStyle(this.el, 'right');\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzTdComponent.prototype.updateExpandIconClass = /**\n     * @return {?}\n     */\n        function () {\n            if (this.nzShowExpand && !this.isIndentSizeSet) {\n                this.renderer.addClass(this.el, 'ant-table-row-expand-icon-cell');\n            }\n            else {\n                this.renderer.removeClass(this.el, 'ant-table-row-expand-icon-cell');\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzTdComponent.prototype.expandChange = /**\n     * @return {?}\n     */\n        function () {\n            this.nzExpand = !this.nzExpand;\n            this.nzExpandChange.emit(this.nzExpand);\n        };\n    return NzTdComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzTheadComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzTheadComponent(nzTableComponent) {\n        this.nzTableComponent = nzTableComponent;\n        this._singleSort = false;\n        this.unsubscribe$ = new Subject();\n        this.nzSortChange = new EventEmitter();\n        if (this.nzTableComponent) {\n            this.nzTableComponent.nzTheadComponent = this;\n        }\n    }\n    Object.defineProperty(NzTheadComponent.prototype, \"nzSingleSort\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._singleSort;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._singleSort = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzTheadComponent.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            /** @type {?} */\n            var sortChange = new Subject().asObservable();\n            /** @type {?} */\n            var listOfTh = this.listOfNzThComponent.toArray();\n            /** @type {?} */\n            var sortChangeArray = listOfTh.map(function (th) { return th.nzSortChangeWithKey; });\n            if (sortChangeArray.length) {\n                sortChangeArray.forEach(function (sort) {\n                    sortChange = merge(sort.asObservable(), sortChange);\n                });\n            }\n            sortChange.pipe(takeUntil(this.unsubscribe$)).subscribe(function (data) {\n                _this.nzSortChange.emit(data);\n                if (_this.nzSingleSort) {\n                    listOfTh.forEach(function (th) { return th.nzSort = (th.nzSortKey === data.key ? th.nzSort : null); });\n                }\n            });\n        };\n    /**\n     * @return {?}\n     */\n    NzTheadComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.unsubscribe$.next();\n            this.unsubscribe$.complete();\n        };\n    return NzTheadComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzTrDirective = /** @class */ /*@__PURE__*/ (function () {\n    function NzTrDirective(elementRef, renderer, nzTableComponent) {\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        this.nzTableComponent = nzTableComponent;\n    }\n    Object.defineProperty(NzTrDirective.prototype, \"nzExpand\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (toBoolean(value)) {\n                this.renderer.removeStyle(this.elementRef.nativeElement, 'display');\n                this.renderer.addClass(this.elementRef.nativeElement, 'ant-table-expanded-row');\n            }\n            else {\n                this.renderer.setStyle(this.elementRef.nativeElement, 'display', 'none');\n                this.renderer.removeClass(this.elementRef.nativeElement, 'ant-table-expanded-row');\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return NzTrDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzTableModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzTableModule() {\n    }\n    return NzTableModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzTabBodyComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzTabBodyComponent() {\n    }\n    return NzTabBodyComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzTabLabelDirective = /** @class */ /*@__PURE__*/ (function () {\n    function NzTabLabelDirective(elementRef) {\n        this.elementRef = elementRef;\n        this._disabled = false;\n    }\n    Object.defineProperty(NzTabLabelDirective.prototype, \"disabled\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._disabled;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._disabled = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzTabLabelDirective.prototype.getOffsetLeft = /**\n     * @return {?}\n     */\n        function () {\n            return this.elementRef.nativeElement.offsetLeft;\n        };\n    /**\n     * @return {?}\n     */\n    NzTabLabelDirective.prototype.getOffsetWidth = /**\n     * @return {?}\n     */\n        function () {\n            return this.elementRef.nativeElement.offsetWidth;\n        };\n    /**\n     * @return {?}\n     */\n    NzTabLabelDirective.prototype.getOffsetTop = /**\n     * @return {?}\n     */\n        function () {\n            return this.elementRef.nativeElement.offsetTop;\n        };\n    /**\n     * @return {?}\n     */\n    NzTabLabelDirective.prototype.getOffsetHeight = /**\n     * @return {?}\n     */\n        function () {\n            return this.elementRef.nativeElement.offsetHeight;\n        };\n    return NzTabLabelDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzTabsInkBarDirective = /** @class */ /*@__PURE__*/ (function () {\n    function NzTabsInkBarDirective(renderer, elementRef, ngZone) {\n        this.renderer = renderer;\n        this.elementRef = elementRef;\n        this.ngZone = ngZone;\n        this._animated = false;\n        this.nzPositionMode = 'horizontal';\n    }\n    Object.defineProperty(NzTabsInkBarDirective.prototype, \"nzAnimated\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._animated;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._animated = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    NzTabsInkBarDirective.prototype.alignToElement = /**\n     * @param {?} element\n     * @return {?}\n     */\n        function (element) {\n            var _this = this;\n            this.show();\n            this.ngZone.runOutsideAngular(function () {\n                reqAnimFrame(function () {\n                    /** when horizontal remove height style and add transform left **/\n                    if (_this.nzPositionMode === 'horizontal') {\n                        _this.renderer.removeStyle(_this.elementRef.nativeElement, 'height');\n                        _this.renderer.setStyle(_this.elementRef.nativeElement, 'transform', \"translate3d(\" + _this.getLeftPosition(element) + \", 0px, 0px)\");\n                        _this.renderer.setStyle(_this.elementRef.nativeElement, 'width', _this.getElementWidth(element));\n                    }\n                    else {\n                        /** when vertical remove width style and add transform top **/\n                        /** when vertical remove width style and add transform top **/\n                        _this.renderer.removeStyle(_this.elementRef.nativeElement, 'width');\n                        _this.renderer.setStyle(_this.elementRef.nativeElement, 'transform', \"translate3d(0px, \" + _this.getTopPosition(element) + \", 0px)\");\n                        _this.renderer.setStyle(_this.elementRef.nativeElement, 'height', _this.getElementHeight(element));\n                    }\n                });\n            });\n        };\n    /**\n     * @return {?}\n     */\n    NzTabsInkBarDirective.prototype.show = /**\n     * @return {?}\n     */\n        function () {\n            this.renderer.setStyle(this.elementRef.nativeElement, 'visibility', 'visible');\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzTabsInkBarDirective.prototype.setDisplay = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.renderer.setStyle(this.elementRef.nativeElement, 'display', value);\n        };\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    NzTabsInkBarDirective.prototype.getLeftPosition = /**\n     * @param {?} element\n     * @return {?}\n     */\n        function (element) {\n            return element ? element.offsetLeft + 'px' : '0';\n        };\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    NzTabsInkBarDirective.prototype.getElementWidth = /**\n     * @param {?} element\n     * @return {?}\n     */\n        function (element) {\n            return element ? element.offsetWidth + 'px' : '0';\n        };\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    NzTabsInkBarDirective.prototype.getTopPosition = /**\n     * @param {?} element\n     * @return {?}\n     */\n        function (element) {\n            return element ? element.offsetTop + 'px' : '0';\n        };\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    NzTabsInkBarDirective.prototype.getElementHeight = /**\n     * @param {?} element\n     * @return {?}\n     */\n        function (element) {\n            return element ? element.offsetHeight + 'px' : '0';\n        };\n    return NzTabsInkBarDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar EXAGGERATED_OVERSCROLL = 64;\nvar NzTabsNavComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzTabsNavComponent(elementRef, ngZone, renderer, dir) {\n        this.elementRef = elementRef;\n        this.ngZone = ngZone;\n        this.renderer = renderer;\n        this.dir = dir;\n        this._animated = true;\n        this._hideBar = false;\n        this._showPagination = true;\n        this._type = 'line';\n        this._tabPositionMode = 'horizontal';\n        this._scrollDistance = 0;\n        this._selectedIndex = 0;\n        this.showPaginationControls = false;\n        this.disableScrollAfter = true;\n        this.disableScrollBefore = true;\n        this.selectedIndexChanged = false;\n        this.realignInkBar = null;\n        this.nzOnNextClick = new EventEmitter();\n        this.nzOnPrevClick = new EventEmitter();\n    }\n    Object.defineProperty(NzTabsNavComponent.prototype, \"nzAnimated\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._animated;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._animated = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTabsNavComponent.prototype, \"nzHideBar\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._hideBar;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._hideBar = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTabsNavComponent.prototype, \"nzType\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._type;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._type = value;\n            if (this._type !== 'line') {\n                this.nzTabsInkBarDirective.setDisplay('none');\n            }\n            else {\n                this.nzTabsInkBarDirective.setDisplay('block');\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTabsNavComponent.prototype, \"nzShowPagination\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._showPagination;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._showPagination = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTabsNavComponent.prototype, \"nzPositionMode\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._tabPositionMode;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._tabPositionMode = value;\n            this.alignInkBarToSelectedTab();\n            if (this.nzShowPagination) {\n                this.updatePagination();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTabsNavComponent.prototype, \"selectedIndex\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._selectedIndex;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.selectedIndexChanged = this._selectedIndex !== value;\n            this._selectedIndex = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzTabsNavComponent.prototype.onContentChanges = /**\n     * @return {?}\n     */\n        function () {\n            if (this.nzShowPagination) {\n                this.updatePagination();\n            }\n            this.alignInkBarToSelectedTab();\n        };\n    /**\n     * @param {?} scrollDir\n     * @return {?}\n     */\n    NzTabsNavComponent.prototype.scrollHeader = /**\n     * @param {?} scrollDir\n     * @return {?}\n     */\n        function (scrollDir) {\n            if (scrollDir === 'before' && !this.disableScrollBefore) {\n                this.nzOnPrevClick.emit();\n            }\n            else if (scrollDir === 'after' && !this.disableScrollAfter) {\n                this.nzOnNextClick.emit();\n            }\n            // Move the scroll distance one-third the length of the tab list's viewport.\n            this.scrollDistance += (scrollDir === 'before' ? -1 : 1) * this.viewWidthHeightPix / 3;\n        };\n    /**\n     * @return {?}\n     */\n    NzTabsNavComponent.prototype.ngAfterContentChecked = /**\n     * @return {?}\n     */\n        function () {\n            if (this.tabLabelCount !== this.listOfNzTabLabelDirective.length) {\n                if (this.nzShowPagination) {\n                    this.updatePagination();\n                }\n                this.tabLabelCount = this.listOfNzTabLabelDirective.length;\n            }\n            if (this.selectedIndexChanged) {\n                this.scrollToLabel(this._selectedIndex);\n                if (this.nzShowPagination) {\n                    this.checkScrollingControls();\n                }\n                this.alignInkBarToSelectedTab();\n                this.selectedIndexChanged = false;\n            }\n            if (this.scrollDistanceChanged) {\n                if (this.nzShowPagination) {\n                    this.updateTabScrollPosition();\n                }\n                this.scrollDistanceChanged = false;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzTabsNavComponent.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.realignInkBar = this.ngZone.runOutsideAngular(function () {\n                /** @type {?} */\n                var dirChange = _this.dir ? _this.dir.change : of(null);\n                /** @type {?} */\n                var resize = typeof window !== 'undefined' ?\n                    fromEvent(window, 'resize').pipe(auditTime(10)) :\n                    of(null);\n                return merge(dirChange, resize).pipe(startWith(null)).subscribe(function () {\n                    if (_this.nzShowPagination) {\n                        _this.updatePagination();\n                    }\n                    _this.alignInkBarToSelectedTab();\n                });\n            });\n        };\n    /**\n     * @return {?}\n     */\n    NzTabsNavComponent.prototype.updateTabScrollPosition = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var scrollDistance = this.scrollDistance;\n            if (this.nzPositionMode === 'horizontal') {\n                /** @type {?} */\n                var translateX = this.getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n                this.renderer.setStyle(this.navListElement.nativeElement, 'transform', \"translate3d(\" + translateX + \"px, 0, 0)\");\n            }\n            else {\n                this.renderer.setStyle(this.navListElement.nativeElement, 'transform', \"translate3d(0,\" + -scrollDistance + \"px, 0)\");\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzTabsNavComponent.prototype.updatePagination = /**\n     * @return {?}\n     */\n        function () {\n            this.checkPaginationEnabled();\n            this.checkScrollingControls();\n            this.updateTabScrollPosition();\n        };\n    /**\n     * @return {?}\n     */\n    NzTabsNavComponent.prototype.checkPaginationEnabled = /**\n     * @return {?}\n     */\n        function () {\n            this.showPaginationControls =\n                this.tabListScrollWidthHeightPix > this.elementRefOffSetWidthHeight;\n            if (!this.showPaginationControls) {\n                this.scrollDistance = 0;\n            }\n        };\n    /**\n     * @param {?} labelIndex\n     * @return {?}\n     */\n    NzTabsNavComponent.prototype.scrollToLabel = /**\n     * @param {?} labelIndex\n     * @return {?}\n     */\n        function (labelIndex) {\n            /** @type {?} */\n            var selectedLabel = this.listOfNzTabLabelDirective\n                ? this.listOfNzTabLabelDirective.toArray()[labelIndex]\n                : null;\n            if (selectedLabel) {\n                /** @type {?} */\n                var labelBeforePos = void 0;\n                /** @type {?} */\n                var labelAfterPos = void 0;\n                if (this.nzPositionMode === 'horizontal') {\n                    if (this.getLayoutDirection() === 'ltr') {\n                        labelBeforePos = selectedLabel.getOffsetLeft();\n                        labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n                    }\n                    else {\n                        labelAfterPos = this.navListElement.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n                        labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n                    }\n                }\n                else {\n                    labelBeforePos = selectedLabel.getOffsetTop();\n                    labelAfterPos = labelBeforePos + selectedLabel.getOffsetHeight();\n                }\n                /** @type {?} */\n                var beforeVisiblePos = this.scrollDistance;\n                /** @type {?} */\n                var afterVisiblePos = this.scrollDistance + this.viewWidthHeightPix;\n                if (labelBeforePos < beforeVisiblePos) {\n                    // Scroll header to move label to the before direction\n                    this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n                }\n                else if (labelAfterPos > afterVisiblePos) {\n                    // Scroll header to move label to the after direction\n                    this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzTabsNavComponent.prototype.checkScrollingControls = /**\n     * @return {?}\n     */\n        function () {\n            // Check if the pagination arrows should be activated.\n            this.disableScrollBefore = this.scrollDistance === 0;\n            this.disableScrollAfter = this.scrollDistance === this.getMaxScrollDistance();\n        };\n    /**\n     * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n     * is equal to the difference in width between the tab list container and tab header container.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    /**\n     * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n     * is equal to the difference in width between the tab list container and tab header container.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @return {?}\n     */\n    NzTabsNavComponent.prototype.getMaxScrollDistance = /**\n     * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n     * is equal to the difference in width between the tab list container and tab header container.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @return {?}\n     */\n        function () {\n            return (this.tabListScrollWidthHeightPix - this.viewWidthHeightPix) || 0;\n        };\n    Object.defineProperty(NzTabsNavComponent.prototype, \"scrollDistance\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._scrollDistance;\n        },\n        /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n        set: /**\n         * Sets the distance in pixels that the tab header should be transformed in the X-axis.\n         * @param {?} v\n         * @return {?}\n         */ function (v) {\n            this._scrollDistance = Math.max(0, Math.min(this.getMaxScrollDistance(), v));\n            // Mark that the scroll distance has changed so that after the view is checked, the CSS\n            // transformation can move the header.\n            this.scrollDistanceChanged = true;\n            this.checkScrollingControls();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTabsNavComponent.prototype, \"viewWidthHeightPix\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            /** @type {?} */\n            var PAGINATION_PIX = 0;\n            if (this.showPaginationControls) {\n                PAGINATION_PIX = 64;\n            }\n            if (this.nzPositionMode === 'horizontal') {\n                return this.navContainerElement.nativeElement.offsetWidth - PAGINATION_PIX;\n            }\n            else {\n                return this.navContainerElement.nativeElement.offsetHeight - PAGINATION_PIX;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTabsNavComponent.prototype, \"tabListScrollWidthHeightPix\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            if (this.nzPositionMode === 'horizontal') {\n                return this.navListElement.nativeElement.scrollWidth;\n            }\n            else {\n                return this.navListElement.nativeElement.scrollHeight;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTabsNavComponent.prototype, \"elementRefOffSetWidthHeight\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            if (this.nzPositionMode === 'horizontal') {\n                return this.elementRef.nativeElement.offsetWidth;\n            }\n            else {\n                return this.elementRef.nativeElement.offsetHeight;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzTabsNavComponent.prototype.getLayoutDirection = /**\n     * @return {?}\n     */\n        function () {\n            return this.dir && this.dir.value === 'rtl' ? 'rtl' : 'ltr';\n        };\n    /**\n     * @return {?}\n     */\n    NzTabsNavComponent.prototype.alignInkBarToSelectedTab = /**\n     * @return {?}\n     */\n        function () {\n            if (this.nzType === 'line') {\n                /** @type {?} */\n                var selectedLabelWrapper = this.listOfNzTabLabelDirective && this.listOfNzTabLabelDirective.length\n                    ? this.listOfNzTabLabelDirective.toArray()[this.selectedIndex].elementRef.nativeElement\n                    : null;\n                if (this.nzTabsInkBarDirective) {\n                    this.nzTabsInkBarDirective.alignToElement(selectedLabelWrapper);\n                }\n            }\n        };\n    return NzTabsNavComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzTabChangeEvent = /** @class */ /*@__PURE__*/ (function () {\n    function NzTabChangeEvent() {\n    }\n    return NzTabChangeEvent;\n}());\nvar NzTabSetComponent = /** @class */ /*@__PURE__*/ (function () {\n    // tslint:disable-next-line:no-any\n    function NzTabSetComponent(renderer, nzUpdateHostClassService, elementRef, document) {\n        this.renderer = renderer;\n        this.nzUpdateHostClassService = nzUpdateHostClassService;\n        this.elementRef = elementRef;\n        this.document = document;\n        this._tabPosition = 'top';\n        this._indexToSelect = 0;\n        this._selectedIndex = null;\n        this._type = 'line';\n        this._size = 'default';\n        this._animated = true;\n        this.el = this.elementRef.nativeElement;\n        this.prefixCls = 'ant-tabs';\n        this.tabPositionMode = 'horizontal';\n        this.inkBarAnimated = true;\n        this.tabPaneAnimated = true;\n        this.isViewInit = false;\n        this.listOfNzTabComponent = [];\n        this.nzShowPagination = true;\n        this.nzHideAll = false;\n        this.nzOnNextClick = new EventEmitter();\n        this.nzOnPrevClick = new EventEmitter();\n        this.nzSelectChange = new EventEmitter(true);\n    }\n    Object.defineProperty(NzTabSetComponent.prototype, \"nzAnimated\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._animated;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._animated = value;\n            this.setClassMap();\n            this.inkBarAnimated = (this.nzAnimated === true) || (( /** @type {?} */(this.nzAnimated)).inkBar === true);\n            this.tabPaneAnimated = (this.nzAnimated === true) || (( /** @type {?} */(this.nzAnimated)).tabPane === true);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTabSetComponent.prototype, \"nzSelectedIndex\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._selectedIndex;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._indexToSelect = toNumber(value, null);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTabSetComponent.prototype, \"nzSelectedIndexChange\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzSelectChange.pipe(map(function (event) { return event.index; }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTabSetComponent.prototype, \"nzSize\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._size;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._size = value;\n            this.setClassMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTabSetComponent.prototype, \"nzTabPosition\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._tabPosition;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (this._tabPosition === value) {\n                return;\n            }\n            this._tabPosition = value;\n            if ((this._tabPosition === 'top') || (this._tabPosition === 'bottom')) {\n                this.tabPositionMode = 'horizontal';\n            }\n            else {\n                this.tabPositionMode = 'vertical';\n            }\n            this.setPosition(value);\n            this.setClassMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTabSetComponent.prototype, \"nzType\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._type;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (this._type === value) {\n                return;\n            }\n            this._type = value;\n            if (this._type === 'card') {\n                this.nzAnimated = false;\n            }\n            this.setClassMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzTabSetComponent.prototype.setPosition = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            if (this.isViewInit) {\n                if (value === 'bottom') {\n                    this.renderer.insertBefore(this.el, this.tabContent.nativeElement, this.nzTabsNavComponent.elementRef.nativeElement);\n                }\n                else {\n                    this.renderer.insertBefore(this.el, this.nzTabsNavComponent.elementRef.nativeElement, this.tabContent.nativeElement);\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzTabSetComponent.prototype.setClassMap = /**\n     * @return {?}\n     */\n        function () {\n            var _a;\n            /** @type {?} */\n            var classMap = (_a = {},\n                _a[this.prefixCls] = true,\n                _a[this.prefixCls + \"-vertical\"] = (this.nzTabPosition === 'left') || (this.nzTabPosition === 'right'),\n                _a[this.prefixCls + \"-\" + this.nzTabPosition] = this.nzTabPosition,\n                _a[this.prefixCls + \"-no-animation\"] = (this.nzAnimated === false) || (( /** @type {?} */(this.nzAnimated)).tabPane === false),\n                _a[this.prefixCls + \"-\" + this.nzType] = this.nzType,\n                _a[this.prefixCls + \"-large\"] = this.nzSize === 'large',\n                _a[this.prefixCls + \"-small\"] = this.nzSize === 'small',\n                _a);\n            this.nzUpdateHostClassService.updateHostClass(this.el, classMap);\n        };\n    /**\n     * @param {?} index\n     * @param {?} disabled\n     * @return {?}\n     */\n    NzTabSetComponent.prototype.clickLabel = /**\n     * @param {?} index\n     * @param {?} disabled\n     * @return {?}\n     */\n        function (index, disabled) {\n            if (!disabled) {\n                this.nzSelectedIndex = index;\n                this.listOfNzTabComponent[index].nzClick.emit();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzTabSetComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.setClassMap();\n        };\n    /**\n     * @return {?}\n     */\n    NzTabSetComponent.prototype.ngAfterContentChecked = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            /** @type {?} */\n            var indexToSelect = this._indexToSelect =\n                Math.min(this.listOfNzTabComponent.length - 1, Math.max(this._indexToSelect || 0, 0));\n            // If there is a change in selected index, emit a change event. Should not trigger if\n            // the selected index has not yet been initialized.\n            if (this._selectedIndex !== indexToSelect && isNotNil(this._selectedIndex)) {\n                this.nzSelectChange.emit(this.createChangeEvent(indexToSelect));\n            }\n            // Setup the position for each tab and optionally setup an origin on the next selected tab.\n            this.listOfNzTabComponent.forEach(function (tab, index) {\n                tab.position = index - indexToSelect;\n                // If there is already a selected tab, then set up an origin for the next selected tab\n                // if it doesn't have one already.\n                if (isNotNil(_this._selectedIndex) && tab.position === 0 && !tab.origin) {\n                    tab.origin = indexToSelect - _this._selectedIndex;\n                }\n            });\n            this._selectedIndex = indexToSelect;\n        };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    NzTabSetComponent.prototype.createChangeEvent = /**\n     * @param {?} index\n     * @return {?}\n     */\n        function (index) {\n            /** @type {?} */\n            var event = new NzTabChangeEvent();\n            event.index = index;\n            if (this.listOfNzTabComponent && this.listOfNzTabComponent.length) {\n                event.tab = this.listOfNzTabComponent[index];\n                this.listOfNzTabComponent.forEach(function (item, i) {\n                    if (i !== index) {\n                        item.nzDeselect.emit();\n                    }\n                });\n                event.tab.nzSelect.emit();\n            }\n            return event;\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzTabSetComponent.prototype.addTab = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.listOfNzTabComponent.push(value);\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzTabSetComponent.prototype.removeTab = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.listOfNzTabComponent.splice(this.listOfNzTabComponent.indexOf(value), 1);\n        };\n    // From https://github.com/react-component/tabs/blob/master/src/Tabs.js\n    // Prevent focus to make the Tabs scroll offset\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    NzTabSetComponent.prototype.onScroll = /**\n     * @param {?} $event\n     * @return {?}\n     */\n        function ($event) {\n            /** @type {?} */\n            var target = /** @type {?} */ ($event.target);\n            if (target.scrollLeft > 0) {\n                target.scrollLeft = 0;\n                if (this.document && this.document.activeElement) {\n                    ( /** @type {?} */(this.document.activeElement)).blur();\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzTabSetComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            this.isViewInit = true;\n            this.setPosition(this.nzTabPosition);\n        };\n    return NzTabSetComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzTabComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzTabComponent(nzTabSetComponent) {\n        this.nzTabSetComponent = nzTabSetComponent;\n        this._disabled = false;\n        this.position = null;\n        this.origin = null;\n        this.nzClick = new EventEmitter();\n        this.nzSelect = new EventEmitter();\n        this.nzDeselect = new EventEmitter();\n    }\n    Object.defineProperty(NzTabComponent.prototype, \"nzDisabled\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._disabled;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._disabled = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTabComponent.prototype, \"nzTitle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._title;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.isTitleString = !(value instanceof TemplateRef);\n            this._title = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzTabComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.nzTabSetComponent.addTab(this);\n        };\n    /**\n     * @return {?}\n     */\n    NzTabComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.nzTabSetComponent.removeTab(this);\n        };\n    return NzTabComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzTabsModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzTabsModule() {\n    }\n    return NzTabsModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzTagComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzTagComponent(renderer) {\n        this.renderer = renderer;\n        this._checked = false;\n        this._mode = 'default';\n        this.closed = false;\n        this.nzAfterClose = new EventEmitter();\n        this.nzOnClose = new EventEmitter();\n        this.nzCheckedChange = new EventEmitter();\n    }\n    Object.defineProperty(NzTagComponent.prototype, \"nzMode\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._mode;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._mode = value;\n            this.updateClassMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTagComponent.prototype, \"nzColor\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._color;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._color = value;\n            this.isPreset = this.isPresetColor(value);\n            this.updateClassMap();\n            this.updateColorStatus();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTagComponent.prototype, \"nzChecked\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._checked;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._checked = toBoolean(value);\n            this.updateClassMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?=} color\n     * @return {?}\n     */\n    NzTagComponent.prototype.isPresetColor = /**\n     * @param {?=} color\n     * @return {?}\n     */\n        function (color) {\n            if (!color) {\n                return false;\n            }\n            return (/^(pink|red|yellow|orange|cyan|green|blue|purple|geekblue|magenta|volcano|gold|lime)(-inverse)?$/\n                .test(color));\n        };\n    /**\n     * @return {?}\n     */\n    NzTagComponent.prototype.updateCheckedStatus = /**\n     * @return {?}\n     */\n        function () {\n            if (this.nzMode === 'checkable') {\n                this.nzChecked = !this.nzChecked;\n                this.nzCheckedChange.emit(this.nzChecked);\n            }\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzTagComponent.prototype.closeTag = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            this.nzOnClose.emit(e);\n            if (!e.defaultPrevented) {\n                this.closed = true;\n            }\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzTagComponent.prototype.afterAnimation = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            if (this.closed && !e.fromState) {\n                this.nzAfterClose.emit();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzTagComponent.prototype.updateClassMap = /**\n     * @return {?}\n     */\n        function () {\n            var _a;\n            /** @type {?} */\n            var isPresetColor = this.isPresetColor(this.nzColor);\n            this.classMap = (_a = {},\n                _a[\"ant-tag\"] = true,\n                _a[\"ant-tag-has-color\"] = this.nzColor && !isPresetColor,\n                _a[\"ant-tag-\" + this.nzColor] = isPresetColor,\n                _a[\"ant-tag-checkable\"] = this.nzMode === 'checkable',\n                _a[\"ant-tag-checkable-checked\"] = this.nzChecked,\n                _a);\n        };\n    /**\n     * @return {?}\n     */\n    NzTagComponent.prototype.updateColorStatus = /**\n     * @return {?}\n     */\n        function () {\n            if (this.wrapperElement && this.nzColor) {\n                if (this.isPreset) {\n                    this.renderer.removeStyle(this.wrapperElement.nativeElement, 'background-color');\n                }\n                else {\n                    this.renderer.setStyle(this.wrapperElement.nativeElement, 'background-color', this.nzColor);\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzTagComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.updateClassMap();\n        };\n    /**\n     * @return {?}\n     */\n    NzTagComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            this.updateColorStatus();\n        };\n    return NzTagComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzTagModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzTagModule() {\n    }\n    return NzTagModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzTimelineItemComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzTimelineItemComponent(renderer) {\n        this.renderer = renderer;\n        this._color = 'blue';\n        this._isLast = false;\n    }\n    Object.defineProperty(NzTimelineItemComponent.prototype, \"isLast\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._isLast;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._isLast = value;\n            if (this.isLast) {\n                this.renderer.addClass(this.liTemplate.nativeElement, 'ant-timeline-item-last');\n            }\n            else {\n                this.renderer.removeClass(this.liTemplate.nativeElement, 'ant-timeline-item-last');\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTimelineItemComponent.prototype, \"nzDot\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._dot;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.isDotString = !(value instanceof TemplateRef);\n            this._dot = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTimelineItemComponent.prototype, \"nzColor\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._color;\n        },\n        set: /**\n         * @param {?} color\n         * @return {?}\n         */ function (color) {\n            this._color = color;\n            this.updateClassMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzTimelineItemComponent.prototype.updateClassMap = /**\n     * @return {?}\n     */\n        function () {\n            var _a;\n            /** @type {?} */\n            var defaultColors = ['blue', 'red', 'green'];\n            /** @type {?} */\n            var circle = this.liTemplate.nativeElement.querySelector('.ant-timeline-item-head');\n            if (defaultColors.indexOf(this._color) === -1) {\n                this.renderer.setStyle(circle, 'border-color', this._color);\n            }\n            else {\n                this.renderer.removeStyle(circle, 'border-color');\n            }\n            this.classMap = (_a = {},\n                _a['ant-timeline-item-head-green'] = this.nzColor === 'green',\n                _a['ant-timeline-item-head-red'] = this.nzColor === 'red',\n                _a['ant-timeline-item-head-blue'] = this.nzColor === 'blue',\n                _a);\n        };\n    /**\n     * @return {?}\n     */\n    NzTimelineItemComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.updateClassMap();\n        };\n    return NzTimelineItemComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzTimelineComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzTimelineComponent() {\n        this.unsubscribe$ = new Subject();\n        this.isPendingBoolean = false;\n    }\n    Object.defineProperty(NzTimelineComponent.prototype, \"nzPending\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._pending;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.isPendingString = !(value instanceof TemplateRef);\n            this.isPendingBoolean = value === true;\n            this._pending = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzTimelineComponent.prototype.updateChildrenTimeLine = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this.listOfTimeLine && this.listOfTimeLine.length) {\n                this.listOfTimeLine.toArray().forEach(function (item, index) { return item.isLast = index === _this.listOfTimeLine.length - 1; });\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzTimelineComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.unsubscribe$.next();\n            this.unsubscribe$.complete();\n        };\n    /**\n     * @return {?}\n     */\n    NzTimelineComponent.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.updateChildrenTimeLine();\n            if (this.listOfTimeLine) {\n                this.listOfTimeLine.changes.pipe(takeUntil(this.unsubscribe$)).subscribe(function () {\n                    _this.updateChildrenTimeLine();\n                });\n            }\n        };\n    return NzTimelineComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzTimelineModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzTimelineModule() {\n    }\n    return NzTimelineModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzTransferListComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzTransferListComponent(el, updateHostClassService, differs) {\n        this.el = el;\n        this.updateHostClassService = updateHostClassService;\n        this._showSearch = false;\n        // region: fields\n        this.direction = '';\n        this.titleText = '';\n        this.dataSource = [];\n        this.itemUnit = '';\n        this.itemsUnit = '';\n        this.filter = '';\n        // events\n        this.handleSelectAll = new EventEmitter();\n        this.handleSelect = new EventEmitter();\n        this.filterChange = new EventEmitter();\n        // endregion\n        // region: styles\n        this.prefixCls = 'ant-transfer-list';\n        // endregion\n        // region: select all\n        this.stat = {\n            checkAll: false,\n            checkHalf: false,\n            checkCount: 0,\n            shownCount: 0\n        };\n        this.listDiffer = differs.find([]).create(null);\n    }\n    Object.defineProperty(NzTransferListComponent.prototype, \"showSearch\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._showSearch;\n        },\n        // search\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._showSearch = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzTransferListComponent.prototype.setClassMap = /**\n     * @return {?}\n     */\n        function () {\n            var _a;\n            /** @type {?} */\n            var classMap = (_a = {},\n                _a[this.prefixCls] = true,\n                _a[this.prefixCls + \"-with-footer\"] = !!this.footer,\n                _a);\n            this.updateHostClassService.updateHostClass(this.el.nativeElement, classMap);\n        };\n    /**\n     * @param {?} status\n     * @return {?}\n     */\n    NzTransferListComponent.prototype.onHandleSelectAll = /**\n     * @param {?} status\n     * @return {?}\n     */\n        function (status) {\n            this.dataSource.forEach(function (item) {\n                if (!item.disabled && !item._hiden) {\n                    item.checked = status;\n                }\n            });\n            this.updateCheckStatus();\n            this.handleSelectAll.emit(status);\n        };\n    /**\n     * @return {?}\n     */\n    NzTransferListComponent.prototype.updateCheckStatus = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var validCount = this.dataSource.filter(function (w) { return !w.disabled; }).length;\n            this.stat.checkCount = this.dataSource.filter(function (w) { return w.checked && !w.disabled; }).length;\n            this.stat.shownCount = this.dataSource.filter(function (w) { return !w._hiden; }).length;\n            this.stat.checkAll = validCount > 0 && validCount === this.stat.checkCount;\n            this.stat.checkHalf = this.stat.checkCount > 0 && !this.stat.checkAll;\n        };\n    // endregion\n    // region: search\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzTransferListComponent.prototype.handleFilter = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            var _this = this;\n            this.filter = value;\n            this.dataSource.forEach(function (item) {\n                item._hiden = value.length > 0 && !_this.matchFilter(value, item);\n            });\n            this.stat.shownCount = this.dataSource.filter(function (w) { return !w._hiden; }).length;\n            this.filterChange.emit({ direction: this.direction, value: value });\n        };\n    /**\n     * @return {?}\n     */\n    NzTransferListComponent.prototype.handleClear = /**\n     * @return {?}\n     */\n        function () {\n            this.handleFilter('');\n        };\n    /**\n     * @param {?} text\n     * @param {?} item\n     * @return {?}\n     */\n    NzTransferListComponent.prototype.matchFilter = /**\n     * @param {?} text\n     * @param {?} item\n     * @return {?}\n     */\n        function (text, item) {\n            if (this.filterOption) {\n                return this.filterOption(text, item);\n            }\n            return item.title.includes(text);\n        };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NzTransferListComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            if ('footer' in changes) {\n                this.setClassMap();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzTransferListComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.setClassMap();\n        };\n    /**\n     * @return {?}\n     */\n    NzTransferListComponent.prototype.ngDoCheck = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var change = this.listDiffer.diff(this.dataSource);\n            if (change) {\n                this.updateCheckStatus();\n            }\n        };\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    NzTransferListComponent.prototype._handleSelect = /**\n     * @param {?} item\n     * @return {?}\n     */\n        function (item) {\n            if (item.disabled) {\n                return;\n            }\n            item.checked = !item.checked;\n            this.updateCheckStatus();\n            this.handleSelect.emit(item);\n        };\n    return NzTransferListComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzTransferSearchComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzTransferSearchComponent() {\n        this.valueChanged = new EventEmitter();\n        this.valueClear = new EventEmitter();\n    }\n    // endregion\n    /**\n     * @return {?}\n     */\n    NzTransferSearchComponent.prototype._handle = /**\n     * @return {?}\n     */\n        function () {\n            this.valueChanged.emit(this.value);\n        };\n    /**\n     * @return {?}\n     */\n    NzTransferSearchComponent.prototype._clear = /**\n     * @return {?}\n     */\n        function () {\n            this.value = '';\n            this.valueClear.emit();\n        };\n    return NzTransferSearchComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzTransferComponent = /** @class */ /*@__PURE__*/ (function () {\n    // endregion\n    function NzTransferComponent(i18n, el) {\n        var _this = this;\n        this.i18n = i18n;\n        this.el = el;\n        this.unsubscribe$ = new Subject();\n        // tslint:disable-next-line:no-any\n        this.locale = {};\n        this._showSearch = false;\n        this.leftFilter = '';\n        this.rightFilter = '';\n        // region: fields\n        this.nzDataSource = [];\n        this.nzTitles = ['', ''];\n        this.nzOperations = [];\n        this.nzCanMove = function (arg) { return of(arg.list); };\n        // events\n        this.nzChange = new EventEmitter();\n        this.nzSearchChange = new EventEmitter();\n        this.nzSelectChange = new EventEmitter();\n        // endregion\n        // region: process data\n        // left\n        this.leftDataSource = [];\n        // right\n        this.rightDataSource = [];\n        this.handleLeftSelectAll = function (checked) { return _this.handleSelect('left', checked); };\n        this.handleRightSelectAll = function (checked) { return _this.handleSelect('right', checked); };\n        this.handleLeftSelect = function (item) { return _this.handleSelect('left', item.checked, item); };\n        this.handleRightSelect = function (item) { return _this.handleSelect('right', item.checked, item); };\n        // endregion\n        // region: operation\n        this.leftActive = false;\n        this.rightActive = false;\n        this.moveToLeft = function () { return _this.moveTo('left'); };\n        this.moveToRight = function () { return _this.moveTo('right'); };\n    }\n    Object.defineProperty(NzTransferComponent.prototype, \"nzShowSearch\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._showSearch;\n        },\n        // search\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._showSearch = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzTransferComponent.prototype.splitDataSource = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.leftDataSource = [];\n            this.rightDataSource = [];\n            this.nzDataSource.forEach(function (record) {\n                if (record.direction === 'right') {\n                    _this.rightDataSource.push(record);\n                }\n                else {\n                    _this.leftDataSource.push(record);\n                }\n            });\n        };\n    /**\n     * @param {?} direction\n     * @return {?}\n     */\n    NzTransferComponent.prototype.getCheckedData = /**\n     * @param {?} direction\n     * @return {?}\n     */\n        function (direction) {\n            return this[direction === 'left' ? 'leftDataSource' : 'rightDataSource'].filter(function (w) { return w.checked; });\n        };\n    /**\n     * @param {?} direction\n     * @param {?} checked\n     * @param {?=} item\n     * @return {?}\n     */\n    NzTransferComponent.prototype.handleSelect = /**\n     * @param {?} direction\n     * @param {?} checked\n     * @param {?=} item\n     * @return {?}\n     */\n        function (direction, checked, item) {\n            /** @type {?} */\n            var list = this.getCheckedData(direction);\n            this.updateOperationStatus(direction, list.length);\n            this.nzSelectChange.emit({ direction: direction, checked: checked, list: list, item: item });\n        };\n    /**\n     * @param {?} ret\n     * @return {?}\n     */\n    NzTransferComponent.prototype.handleFilterChange = /**\n     * @param {?} ret\n     * @return {?}\n     */\n        function (ret) {\n            this.nzSearchChange.emit(ret);\n        };\n    /**\n     * @param {?} direction\n     * @param {?=} count\n     * @return {?}\n     */\n    NzTransferComponent.prototype.updateOperationStatus = /**\n     * @param {?} direction\n     * @param {?=} count\n     * @return {?}\n     */\n        function (direction, count) {\n            this[direction === 'right' ? 'leftActive' : 'rightActive'] = (typeof count === 'undefined' ? this.getCheckedData(direction).filter(function (w) { return !w.disabled; }).length : count) > 0;\n        };\n    /**\n     * @param {?} direction\n     * @return {?}\n     */\n    NzTransferComponent.prototype.moveTo = /**\n     * @param {?} direction\n     * @return {?}\n     */\n        function (direction) {\n            var _this = this;\n            /** @type {?} */\n            var oppositeDirection = direction === 'left' ? 'right' : 'left';\n            this.updateOperationStatus(oppositeDirection, 0);\n            /** @type {?} */\n            var datasource = direction === 'left' ? this.rightDataSource : this.leftDataSource;\n            /** @type {?} */\n            var moveList = datasource.filter(function (item) { return item.checked === true && !item.disabled; });\n            this.nzCanMove({ direction: direction, list: moveList })\n                .subscribe(function (newMoveList) { return _this.truthMoveTo(direction, newMoveList.filter(function (i) { return !!i; })); }, function () { return moveList.forEach(function (i) { return i.checked = false; }); });\n        };\n    /**\n     * @param {?} direction\n     * @param {?} list\n     * @return {?}\n     */\n    NzTransferComponent.prototype.truthMoveTo = /**\n     * @param {?} direction\n     * @param {?} list\n     * @return {?}\n     */\n        function (direction, list) {\n            var e_1, _a;\n            /** @type {?} */\n            var oppositeDirection = direction === 'left' ? 'right' : 'left';\n            /** @type {?} */\n            var datasource = direction === 'left' ? this.rightDataSource : this.leftDataSource;\n            /** @type {?} */\n            var targetDatasource = direction === 'left' ? this.leftDataSource : this.rightDataSource;\n            try {\n                for (var list_1 = __values(list), list_1_1 = list_1.next(); !list_1_1.done; list_1_1 = list_1.next()) {\n                    var item = list_1_1.value;\n                    item.checked = false;\n                    targetDatasource.push(item);\n                    datasource.splice(datasource.indexOf(item), 1);\n                }\n            }\n            catch (e_1_1) {\n                e_1 = { error: e_1_1 };\n            }\n            finally {\n                try {\n                    if (list_1_1 && !list_1_1.done && (_a = list_1.return))\n                        _a.call(list_1);\n                }\n                finally {\n                    if (e_1)\n                        throw e_1.error;\n                }\n            }\n            this.updateOperationStatus(oppositeDirection);\n            this.nzChange.emit({\n                from: oppositeDirection,\n                to: direction,\n                list: list\n            });\n        };\n    /**\n     * @return {?}\n     */\n    NzTransferComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.i18n.localeChange.pipe(takeUntil(this.unsubscribe$)).subscribe(function () { return _this.locale = _this.i18n.getLocaleData('Transfer'); });\n        };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NzTransferComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            if ('nzDataSource' in changes) {\n                this.splitDataSource();\n                this.updateOperationStatus('left');\n                this.updateOperationStatus('right');\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzTransferComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.unsubscribe$.next();\n            this.unsubscribe$.complete();\n        };\n    return NzTransferComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzTransferModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzTransferModule() {\n    }\n    return NzTransferModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzTreeNode = /** @class */ /*@__PURE__*/ (function () {\n    function NzTreeNode(option, parent) {\n        if (parent === void 0) {\n            parent = null;\n        }\n        var _this = this;\n        this.level = 0;\n        this.title = option.title || '---';\n        this.key = option.key || null;\n        this.isLeaf = option.isLeaf || false;\n        this.origin = option;\n        this.children = [];\n        this.parentNode = parent;\n        // option params\n        this.isChecked = option.checked || false;\n        this.isSelectable = option.disabled || (option.selectable === false ? false : true);\n        this.isDisabled = option.disabled || false;\n        this.isDisableCheckbox = option.disableCheckbox || false;\n        this.isExpanded = option.isLeaf ? false : (option.expanded || false);\n        this.isAllChecked = option.checked || false;\n        this.isHalfChecked = false;\n        this.isSelected = (!option.disabled && option.selected) || false;\n        this.isLoading = false;\n        this.isMatched = false;\n        /**\n             * parent's checked status will affect children while initializing\n             */\n        if (parent) {\n            this.level = parent.level + 1;\n        }\n        else {\n            this.level = 0;\n        }\n        if (typeof (option.children) !== 'undefined' && option.children !== null) {\n            option.children.forEach(function (nodeOptions) {\n                if (option.checked && !option.disabled && !nodeOptions.disabled && !nodeOptions.disableCheckbox) {\n                    nodeOptions.checked = option.checked;\n                }\n                _this.children.push(new NzTreeNode(nodeOptions, _this));\n            });\n        }\n    }\n    /**\n     * @param {?=} checked\n     * @param {?=} halfChecked\n     * @return {?}\n     */\n    NzTreeNode.prototype.setChecked = /**\n     * @param {?=} checked\n     * @param {?=} halfChecked\n     * @return {?}\n     */\n        function (checked, halfChecked) {\n            if (checked === void 0) {\n                checked = false;\n            }\n            if (halfChecked === void 0) {\n                halfChecked = false;\n            }\n            this.origin.checked = checked;\n            this.isChecked = checked;\n            this.isAllChecked = checked;\n            this.isHalfChecked = halfChecked;\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzTreeNode.prototype.setExpanded = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.origin.expanded = value;\n            this.isExpanded = value;\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzTreeNode.prototype.setSelected = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.origin.selected = value;\n            this.isSelected = value;\n        };\n    /**\n     * @return {?}\n     */\n    NzTreeNode.prototype.getParentNode = /**\n     * @return {?}\n     */\n        function () {\n            return this.parentNode;\n        };\n    /**\n     * @return {?}\n     */\n    NzTreeNode.prototype.getChildren = /**\n     * @return {?}\n     */\n        function () {\n            return this.children;\n        };\n    /**\n     * 支持按索引位置插入,叶子节点不可添加\n     * @param {?} children\n     * @param {?=} childPos\n     * @return {?}\n     */\n    NzTreeNode.prototype.addChildren = /**\n     * 支持按索引位置插入,叶子节点不可添加\n     * @param {?} children\n     * @param {?=} childPos\n     * @return {?}\n     */\n        function (children, childPos) {\n            var _this = this;\n            if (childPos === void 0) {\n                childPos = -1;\n            }\n            if (!this.isLeaf) {\n                children.forEach(function (node) {\n                    /** @type {?} */\n                    var refreshLevel = function (n) {\n                        n.getChildren().forEach(function (c) {\n                            c.level = c.getParentNode().level + 1;\n                            // flush origin\n                            c.origin.level = c.level;\n                            refreshLevel(c);\n                        });\n                    };\n                    /** @type {?} */\n                    var child = node;\n                    if (child instanceof NzTreeNode) {\n                        child.parentNode = _this;\n                    }\n                    else {\n                        child = new NzTreeNode(node, _this);\n                    }\n                    child.level = _this.level + 1;\n                    child.origin.level = child.level;\n                    refreshLevel(child);\n                    try {\n                        childPos === -1 ? _this.children.push(child) : _this.children.splice(childPos, 0, child);\n                        // flush origin\n                    }\n                    catch (e) {\n                    }\n                });\n                this.origin.children = this.getChildren().map(function (v) { return v.origin; });\n                // remove loading state\n                this.isLoading = false;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzTreeNode.prototype.clearChildren = /**\n     * @return {?}\n     */\n        function () {\n            this.children = [];\n        };\n    return NzTreeNode;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} node\n * @return {?}\n */\nfunction isCheckDisabled(node) {\n    var isDisabled = node.isDisabled, isDisableCheckbox = node.isDisableCheckbox;\n    return !!(isDisabled || isDisableCheckbox);\n}\n/**\n * @param {?} needle\n * @param {?} haystack\n * @return {?}\n */\nfunction isInArray(needle, haystack) {\n    return (haystack.length > 0 && haystack.indexOf(needle) > -1);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzTreeService = /** @class */ /*@__PURE__*/ (function () {\n    function NzTreeService() {\n        this.DRAG_SIDE_RANGE = 0.25;\n        this.DRAG_MIN_GAP = 2;\n        this.conductOption = {\n            isCheckStrictly: false\n        };\n        this.rootNodes = [];\n        this.selectedNodeList = [];\n        this.expandedNodeList = [];\n        this.checkedNodeList = [];\n        this.halfCheckedNodeList = [];\n        this.matchedNodeList = [];\n    }\n    /**\n     * reset tree nodes will clear default node list\n     */\n    /**\n     * reset tree nodes will clear default node list\n     * @param {?} nzNodes\n     * @return {?}\n     */\n    NzTreeService.prototype.initTree = /**\n     * reset tree nodes will clear default node list\n     * @param {?} nzNodes\n     * @return {?}\n     */\n        function (nzNodes) {\n            var _this = this;\n            this.rootNodes = nzNodes;\n            this.expandedNodeList = [];\n            this.selectedNodeList = [];\n            this.halfCheckedNodeList = [];\n            this.checkedNodeList = [];\n            this.expandedNodeList = [];\n            this.matchedNodeList = [];\n            setTimeout(function () {\n                _this.refreshCheckState(_this.conductOption.isCheckStrictly);\n            });\n        };\n    /**\n     * @return {?}\n     */\n    NzTreeService.prototype.getSelectedNode = /**\n     * @return {?}\n     */\n        function () {\n            return this.selectedNode;\n        };\n    /**\n     * get some list\n     */\n    /**\n     * get some list\n     * @return {?}\n     */\n    NzTreeService.prototype.getSelectedNodeList = /**\n     * get some list\n     * @return {?}\n     */\n        function () {\n            return this.conductNodeState('select');\n        };\n    /**\n     * return checked nodes\n     */\n    /**\n     * return checked nodes\n     * @return {?}\n     */\n    NzTreeService.prototype.getCheckedNodeList = /**\n     * return checked nodes\n     * @return {?}\n     */\n        function () {\n            return this.conductNodeState('check');\n        };\n    /**\n     * @return {?}\n     */\n    NzTreeService.prototype.getHalfCheckedNodeList = /**\n     * @return {?}\n     */\n        function () {\n            return this.conductNodeState('halfCheck');\n        };\n    /**\n     * return expanded nodes\n     */\n    /**\n     * return expanded nodes\n     * @return {?}\n     */\n    NzTreeService.prototype.getExpandedNodeList = /**\n     * return expanded nodes\n     * @return {?}\n     */\n        function () {\n            return this.conductNodeState('expand');\n        };\n    /**\n     * return search matched nodes\n     */\n    /**\n     * return search matched nodes\n     * @return {?}\n     */\n    NzTreeService.prototype.getMatchedNodeList = /**\n     * return search matched nodes\n     * @return {?}\n     */\n        function () {\n            return this.conductNodeState('match');\n        };\n    // tslint:disable-next-line:no-any\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzTreeService.prototype.isArrayOfNzTreeNode = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            return value.every(function (item) { return item instanceof NzTreeNode; });\n        };\n    /**\n     * reset selectedNodeList\n     */\n    /**\n     * reset selectedNodeList\n     * @param {?} selectedKeys\n     * @param {?} nzNodes\n     * @param {?=} isMulti\n     * @return {?}\n     */\n    NzTreeService.prototype.calcSelectedKeys = /**\n     * reset selectedNodeList\n     * @param {?} selectedKeys\n     * @param {?} nzNodes\n     * @param {?=} isMulti\n     * @return {?}\n     */\n        function (selectedKeys, nzNodes, isMulti) {\n            var _this = this;\n            if (isMulti === void 0) {\n                isMulti = false;\n            }\n            this.selectedNodeList = [];\n            /** @type {?} */\n            var calc = function (nodes) {\n                nodes.forEach(function (node) {\n                    if (isInArray(node.key, selectedKeys)) {\n                        node.setSelected(true);\n                    }\n                    else {\n                        node.setSelected(false);\n                    }\n                    _this.setSelectedNodeList(node, isMulti);\n                    if (node.getChildren().length > 0) {\n                        calc(node.getChildren());\n                    }\n                });\n            };\n            calc(nzNodes);\n        };\n    /**\n     * reset expandedNodeList\n     */\n    /**\n     * reset expandedNodeList\n     * @param {?} expandedKeys\n     * @param {?} nzNodes\n     * @return {?}\n     */\n    NzTreeService.prototype.calcExpandedKeys = /**\n     * reset expandedNodeList\n     * @param {?} expandedKeys\n     * @param {?} nzNodes\n     * @return {?}\n     */\n        function (expandedKeys, nzNodes) {\n            var _this = this;\n            this.expandedNodeList = [];\n            /** @type {?} */\n            var calc = function (nodes) {\n                nodes.forEach(function (node) {\n                    if (isInArray(node.key, expandedKeys)) {\n                        node.setExpanded(true);\n                        _this.setExpandedNodeList(node);\n                    }\n                    else {\n                        node.setExpanded(false);\n                    }\n                    if (node.getChildren().length > 0) {\n                        calc(node.getChildren());\n                    }\n                });\n            };\n            calc(nzNodes);\n        };\n    /**\n     * reset checkedNodeList\n     */\n    /**\n     * reset checkedNodeList\n     * @param {?} checkedKeys\n     * @param {?} nzNodes\n     * @param {?=} isCheckStrictly\n     * @return {?}\n     */\n    NzTreeService.prototype.calcCheckedKeys = /**\n     * reset checkedNodeList\n     * @param {?} checkedKeys\n     * @param {?} nzNodes\n     * @param {?=} isCheckStrictly\n     * @return {?}\n     */\n        function (checkedKeys, nzNodes, isCheckStrictly) {\n            var _this = this;\n            if (isCheckStrictly === void 0) {\n                isCheckStrictly = false;\n            }\n            this.checkedNodeList = [];\n            this.halfCheckedNodeList = [];\n            /** @type {?} */\n            var calc = function (nodes) {\n                nodes.forEach(function (node) {\n                    if (isInArray(node.key, checkedKeys)) {\n                        node.setChecked(true);\n                        _this.setCheckedNodeList(node);\n                    }\n                    else {\n                        node.setChecked(false);\n                    }\n                    if (node.getChildren().length > 0) {\n                        calc(node.getChildren());\n                    }\n                });\n            };\n            calc(nzNodes);\n            // controlled state\n            this.refreshCheckState(isCheckStrictly);\n        };\n    /**\n     * set drag node\n     */\n    /**\n     * set drag node\n     * @param {?=} node\n     * @return {?}\n     */\n    NzTreeService.prototype.setSelectedNode = /**\n     * set drag node\n     * @param {?=} node\n     * @return {?}\n     */\n        function (node) {\n            this.selectedNode = null;\n            if (node) {\n                this.selectedNode = node;\n            }\n        };\n    /**\n     * set node selected status\n     */\n    /**\n     * set node selected status\n     * @param {?} node\n     * @param {?=} isMultiple\n     * @return {?}\n     */\n    NzTreeService.prototype.setNodeActive = /**\n     * set node selected status\n     * @param {?} node\n     * @param {?=} isMultiple\n     * @return {?}\n     */\n        function (node, isMultiple) {\n            if (isMultiple === void 0) {\n                isMultiple = false;\n            }\n            /** @type {?} */\n            var isSelected = node.isSelected;\n            if (node.isDisabled) {\n                return;\n            }\n            if (!isMultiple) {\n                this.selectedNodeList.forEach(function (n) {\n                    n.setSelected(false);\n                });\n                this.selectedNodeList = [];\n            }\n            node.setSelected(!isSelected);\n            this.setSelectedNodeList(node, isMultiple);\n        };\n    /**\n     * add or remove node to selectedNodeList\n     */\n    /**\n     * add or remove node to selectedNodeList\n     * @param {?} node\n     * @param {?=} isMultiple\n     * @return {?}\n     */\n    NzTreeService.prototype.setSelectedNodeList = /**\n     * add or remove node to selectedNodeList\n     * @param {?} node\n     * @param {?=} isMultiple\n     * @return {?}\n     */\n        function (node, isMultiple) {\n            if (isMultiple === void 0) {\n                isMultiple = false;\n            }\n            /** @type {?} */\n            var index = this.selectedNodeList.findIndex(function (n) { return node.key === n.key; });\n            if (isMultiple) {\n                if (node.isSelected && index === -1) {\n                    this.selectedNodeList.push(node);\n                }\n            }\n            else {\n                if (node.isSelected && index === -1) {\n                    this.selectedNodeList = [node];\n                }\n            }\n            if (!node.isSelected && index > -1) {\n                this.selectedNodeList.splice(index, 1);\n            }\n        };\n    /**\n     * merge checked nodes\n     */\n    /**\n     * merge checked nodes\n     * @param {?} node\n     * @return {?}\n     */\n    NzTreeService.prototype.setHalfCheckedNodeList = /**\n     * merge checked nodes\n     * @param {?} node\n     * @return {?}\n     */\n        function (node) {\n            /** @type {?} */\n            var index = this.halfCheckedNodeList.findIndex(function (n) { return node.key === n.key; });\n            if (node.isHalfChecked && index === -1) {\n                this.halfCheckedNodeList.push(node);\n            }\n            else if (!node.isHalfChecked && index > -1) {\n                this.halfCheckedNodeList.splice(index, 1);\n            }\n        };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    NzTreeService.prototype.setCheckedNodeList = /**\n     * @param {?} node\n     * @return {?}\n     */\n        function (node) {\n            /** @type {?} */\n            var index = this.checkedNodeList.findIndex(function (n) { return node.key === n.key; });\n            if (node.isChecked && index === -1) {\n                this.checkedNodeList.push(node);\n            }\n            else if (!node.isChecked && index > -1) {\n                this.checkedNodeList.splice(index, 1);\n            }\n        };\n    /**\n     * conduct checked/selected/expanded keys\n     */\n    /**\n     * conduct checked/selected/expanded keys\n     * @param {?=} type\n     * @return {?}\n     */\n    NzTreeService.prototype.conductNodeState = /**\n     * conduct checked/selected/expanded keys\n     * @param {?=} type\n     * @return {?}\n     */\n        function (type) {\n            var _this = this;\n            if (type === void 0) {\n                type = 'check';\n            }\n            /** @type {?} */\n            var resultNodesList = [];\n            /** @type {?} */\n            var loop = function (node) {\n                switch (type) {\n                    case 'check':\n                        if (node.isChecked) {\n                            resultNodesList.push(node);\n                        }\n                        if (!_this.conductOption.isCheckStrictly) {\n                            if (!node.isChecked) {\n                                node.getChildren().forEach(function (child) {\n                                    loop(child);\n                                });\n                            }\n                        }\n                        else {\n                            node.getChildren().forEach(function (child) {\n                                loop(child);\n                            });\n                        }\n                        break;\n                    case 'halfCheck':\n                        if (!_this.conductOption.isCheckStrictly) {\n                            if (node.isHalfChecked) {\n                                resultNodesList.push(node);\n                                node.getChildren().forEach(function (child) {\n                                    loop(child);\n                                });\n                            }\n                        }\n                        break;\n                    case 'select':\n                        if (node.isSelected) {\n                            resultNodesList.push(node);\n                        }\n                        node.getChildren().forEach(function (child) {\n                            loop(child);\n                        });\n                        break;\n                    case 'expand':\n                        if (node.isExpanded) {\n                            resultNodesList.push(node);\n                        }\n                        node.getChildren().forEach(function (child) {\n                            loop(child);\n                        });\n                        break;\n                    case 'match':\n                        if (node.isMatched) {\n                            resultNodesList.push(node);\n                        }\n                        node.getChildren().forEach(function (child) {\n                            loop(child);\n                        });\n                        break;\n                }\n            };\n            this.rootNodes.forEach(function (node) {\n                loop(node);\n            });\n            return resultNodesList;\n        };\n    /**\n     * set expanded nodes\n     */\n    /**\n     * set expanded nodes\n     * @param {?} node\n     * @return {?}\n     */\n    NzTreeService.prototype.setExpandedNodeList = /**\n     * set expanded nodes\n     * @param {?} node\n     * @return {?}\n     */\n        function (node) {\n            if (node.isLeaf) {\n                return;\n            }\n            /** @type {?} */\n            var index = this.expandedNodeList.findIndex(function (n) { return node.key === n.key; });\n            if (node.isExpanded && index === -1) {\n                this.expandedNodeList.push(node);\n            }\n            else if (!node.isExpanded && index > -1) {\n                this.expandedNodeList.splice(index, 1);\n            }\n        };\n    /**\n     * check state\n     * @param node\n     */\n    /**\n     * check state\n     * @param {?=} isCheckStrictly\n     * @return {?}\n     */\n    NzTreeService.prototype.refreshCheckState = /**\n     * check state\n     * @param {?=} isCheckStrictly\n     * @return {?}\n     */\n        function (isCheckStrictly) {\n            var _this = this;\n            if (isCheckStrictly === void 0) {\n                isCheckStrictly = false;\n            }\n            if (isCheckStrictly) {\n                return;\n            }\n            this.checkedNodeList.forEach(function (node) {\n                _this.conduct(node);\n            });\n        };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    NzTreeService.prototype.conduct = /**\n     * @param {?} node\n     * @return {?}\n     */\n        function (node) {\n            /** @type {?} */\n            var isChecked = node.isChecked;\n            if (node) {\n                this.conductUp(node);\n                this.conductDown(node, isChecked);\n            }\n        };\n    /**\n     * 1、children half checked\n     * 2、children all checked, parent checked\n     * 3、no children checked\n     */\n    /**\n     * 1、children half checked\n     * 2、children all checked, parent checked\n     * 3、no children checked\n     * @param {?} node\n     * @return {?}\n     */\n    NzTreeService.prototype.conductUp = /**\n     * 1、children half checked\n     * 2、children all checked, parent checked\n     * 3、no children checked\n     * @param {?} node\n     * @return {?}\n     */\n        function (node) {\n            /** @type {?} */\n            var parentNode = node.getParentNode();\n            // 全禁用节点不选中\n            if (parentNode) {\n                if (!isCheckDisabled(parentNode)) {\n                    if (parentNode.getChildren().every(function (child) { return isCheckDisabled(child) || (!child.isHalfChecked && child.isChecked); })) {\n                        parentNode.setChecked(true);\n                    }\n                    else if (parentNode.getChildren().some(function (child) { return child.isHalfChecked || child.isChecked; })) {\n                        parentNode.setChecked(false, true);\n                    }\n                    else {\n                        parentNode.setChecked(false);\n                    }\n                }\n                this.setHalfCheckedNodeList(parentNode);\n                this.conductUp(parentNode);\n            }\n        };\n    /**\n     * reset child check state\n     */\n    /**\n     * reset child check state\n     * @param {?} node\n     * @param {?} value\n     * @return {?}\n     */\n    NzTreeService.prototype.conductDown = /**\n     * reset child check state\n     * @param {?} node\n     * @param {?} value\n     * @return {?}\n     */\n        function (node, value) {\n            var _this = this;\n            if (!isCheckDisabled(node)) {\n                node.setChecked(value);\n                node.children.forEach(function (n) {\n                    _this.conductDown(n, value);\n                });\n            }\n        };\n    /**\n     * search value & expand node\n     * should add expandlist\n     */\n    /**\n     * search value & expand node\n     * should add expandlist\n     * @param {?} value\n     * @return {?}\n     */\n    NzTreeService.prototype.searchExpand = /**\n     * search value & expand node\n     * should add expandlist\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            var _this = this;\n            this.matchedNodeList = [];\n            if (!isNotNil(value)) {\n                return;\n            }\n            // to reset expandedNodeList\n            this.expandedNodeList = [];\n            /** @type {?} */\n            var expandParent = function (p) {\n                // expand parent node\n                if (p.getParentNode()) {\n                    p.getParentNode().setExpanded(true);\n                    _this.setExpandedNodeList(p.getParentNode());\n                    expandParent(p.getParentNode());\n                }\n            };\n            /** @type {?} */\n            var searchChild = function (n) {\n                if (value && n.title.includes(value)) {\n                    // match the node\n                    n.isMatched = true;\n                    _this.matchedNodeList.push(n);\n                    // expand parentNode\n                    expandParent(n);\n                }\n                else {\n                    n.isMatched = false;\n                    n.setExpanded(false);\n                    _this.setExpandedNodeList(n);\n                }\n                n.children.forEach(function (g) {\n                    searchChild(g);\n                });\n            };\n            this.rootNodes.forEach(function (child) {\n                searchChild(child);\n            });\n        };\n    /**\n     * drag event\n     */\n    /**\n     * drag event\n     * @param {?} node\n     * @return {?}\n     */\n    NzTreeService.prototype.refreshDragNode = /**\n     * drag event\n     * @param {?} node\n     * @return {?}\n     */\n        function (node) {\n            var _this = this;\n            if (node.getChildren().length === 0) {\n                // until root\n                this.conductUp(node);\n            }\n            else {\n                node.children.forEach(function (child) {\n                    _this.refreshDragNode(child);\n                });\n            }\n        };\n    // reset node level\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    NzTreeService.prototype.resetNodeLevel = /**\n     * @param {?} node\n     * @return {?}\n     */\n        function (node) {\n            var e_1, _a;\n            if (node.getParentNode()) {\n                node.level = node.getParentNode().level + 1;\n            }\n            else {\n                node.level = 0;\n            }\n            try {\n                for (var _b = __values(node.getChildren()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var child = _c.value;\n                    this.resetNodeLevel(child);\n                }\n            }\n            catch (e_1_1) {\n                e_1 = { error: e_1_1 };\n            }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return))\n                        _a.call(_b);\n                }\n                finally {\n                    if (e_1)\n                        throw e_1.error;\n                }\n            }\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NzTreeService.prototype.calcDropPosition = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            var clientY = event.clientY;\n            var _a = event.srcElement ? event.srcElement.getBoundingClientRect() : ( /** @type {?} */(event.target)).getBoundingClientRect(), top = _a.top, bottom = _a.bottom, height = _a.height;\n            /** @type {?} */\n            var des = Math.max(height * this.DRAG_SIDE_RANGE, this.DRAG_MIN_GAP);\n            if (clientY <= top + des) {\n                return -1;\n            }\n            else if (clientY >= bottom - des) {\n                return 1;\n            }\n            return 0;\n        };\n    /**\n     * drop\n     * 0: inner -1: pre 1: next\n     */\n    /**\n     * drop\n     * 0: inner -1: pre 1: next\n     * @param {?} targetNode\n     * @param {?=} dragPos\n     * @return {?}\n     */\n    NzTreeService.prototype.dropAndApply = /**\n     * drop\n     * 0: inner -1: pre 1: next\n     * @param {?} targetNode\n     * @param {?=} dragPos\n     * @return {?}\n     */\n        function (targetNode, dragPos) {\n            var _this = this;\n            if (dragPos === void 0) {\n                dragPos = -1;\n            }\n            if (!targetNode || dragPos > 1) {\n                return;\n            }\n            /** @type {?} */\n            var targetParent = targetNode.getParentNode();\n            /** @type {?} */\n            var isSelectedRootNode = this.selectedNode.getParentNode();\n            // remove the dragNode\n            if (isSelectedRootNode) {\n                isSelectedRootNode.getChildren().splice(isSelectedRootNode.getChildren().indexOf(this.selectedNode), 1);\n            }\n            else {\n                this.rootNodes.splice(this.rootNodes.indexOf(this.selectedNode), 1);\n            }\n            switch (dragPos) {\n                case 0:\n                    targetNode.addChildren([this.selectedNode]);\n                    this.resetNodeLevel(targetNode);\n                    break;\n                case -1:\n                case 1:\n                    /** @type {?} */\n                    var tIndex = dragPos === 1 ? 1 : 0;\n                    if (targetParent) {\n                        targetParent.addChildren([this.selectedNode], targetParent.children.indexOf(targetNode) + tIndex);\n                        if (this.selectedNode.getParentNode()) {\n                            this.resetNodeLevel(this.selectedNode.getParentNode());\n                        }\n                    }\n                    else {\n                        /** @type {?} */\n                        var targetIndex = this.rootNodes.indexOf(targetNode) + tIndex;\n                        // 根节点插入\n                        this.rootNodes.splice(targetIndex, 0, this.selectedNode);\n                        this.rootNodes[targetIndex].parentNode = null;\n                        this.rootNodes[targetIndex].level = 0;\n                    }\n                    break;\n            }\n            // flush all nodes\n            this.rootNodes.forEach(function (child) {\n                _this.refreshDragNode(child);\n            });\n        };\n    /**\n     * emit Structure\n     * eventName\n     * node\n     * event: MouseEvent / DragEvent\n     * dragNode\n     */\n    /**\n     * emit Structure\n     * eventName\n     * node\n     * event: MouseEvent / DragEvent\n     * dragNode\n     * @param {?} eventName\n     * @param {?} node\n     * @param {?} event\n     * @return {?}\n     */\n    NzTreeService.prototype.formatEvent = /**\n     * emit Structure\n     * eventName\n     * node\n     * event: MouseEvent / DragEvent\n     * dragNode\n     * @param {?} eventName\n     * @param {?} node\n     * @param {?} event\n     * @return {?}\n     */\n        function (eventName, node, event) {\n            /** @type {?} */\n            var emitStructure = {\n                'eventName': eventName,\n                'node': node,\n                'event': event\n            };\n            switch (eventName) {\n                case 'dragstart':\n                case 'dragenter':\n                case 'dragover':\n                case 'dragleave':\n                case 'drop':\n                case 'dragend':\n                    Object.assign(emitStructure, { 'dragNode': this.getSelectedNode() });\n                    break;\n                case 'click':\n                case 'dblclick':\n                    Object.assign(emitStructure, { 'selectedKeys': this.getSelectedNodeList() });\n                    Object.assign(emitStructure, { 'nodes': this.getSelectedNodeList() });\n                    Object.assign(emitStructure, { 'keys': this.getSelectedNodeList().map(function (n) { return n.key; }) });\n                    break;\n                case 'check':\n                    Object.assign(emitStructure, { 'checkedKeys': this.getCheckedNodeList() });\n                    Object.assign(emitStructure, { 'nodes': this.getCheckedNodeList() });\n                    Object.assign(emitStructure, { 'keys': this.getCheckedNodeList().map(function (n) { return n.key; }) });\n                    break;\n                case 'search':\n                    Object.assign(emitStructure, { 'matchedKeys': this.getMatchedNodeList() });\n                    Object.assign(emitStructure, { 'nodes': this.getMatchedNodeList() });\n                    Object.assign(emitStructure, { 'keys': this.getMatchedNodeList().map(function (n) { return n.key; }) });\n                    break;\n                case 'expand':\n                    Object.assign(emitStructure, { 'nodes': this.getExpandedNodeList() });\n                    Object.assign(emitStructure, { 'keys': this.getExpandedNodeList().map(function (n) { return n.key; }) });\n                    break;\n            }\n            return emitStructure;\n        };\n    return NzTreeService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzTreeNodeComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzTreeNodeComponent(nzTreeService, ngZone, renderer, elRef) {\n        this.nzTreeService = nzTreeService;\n        this.ngZone = ngZone;\n        this.renderer = renderer;\n        this.elRef = elRef;\n        this.nzHideUnMatched = false;\n        // Output\n        this.clickNode = new EventEmitter();\n        this.dblClick = new EventEmitter();\n        this.contextMenu = new EventEmitter();\n        this.clickCheckBox = new EventEmitter();\n        this.clickExpand = new EventEmitter();\n        this.nzDragStart = new EventEmitter();\n        this.nzDragEnter = new EventEmitter();\n        this.nzDragOver = new EventEmitter();\n        this.nzDragLeave = new EventEmitter();\n        this.nzDrop = new EventEmitter();\n        this.nzDragEnd = new EventEmitter();\n        // default var\n        this.prefixCls = 'ant-tree';\n        this.highlightKeys = [];\n        this.nzNodeClass = {};\n        this.nzNodeSwitcherClass = {};\n        this.nzNodeContentClass = {};\n        this.nzNodeContentIconClass = {};\n        this.nzNodeContentLoadingClass = {};\n        this.nzNodeChildrenClass = {};\n        /**\n         * drag var\n         */\n        this.destory$ = new Subject();\n        this.dragPos = 2;\n        this.dragPosClass = {\n            '0': 'drag-over',\n            '1': 'drag-over-gap-bottom',\n            '-1': 'drag-over-gap-top'\n        };\n        this._searchValue = '';\n        this._nzExpandAll = false;\n        this._nzDraggable = false;\n        this.oldAPIIcon = true;\n    }\n    Object.defineProperty(NzTreeNodeComponent.prototype, \"nzTreeNode\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._nzTreeNode;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            // add to checked list & selected list\n            if (value.isChecked) {\n                this.nzTreeService.setCheckedNodeList(value);\n            }\n            // add select list\n            if (value.isSelected) {\n                this.nzTreeService.setSelectedNodeList(value, this.nzMultiple);\n            }\n            if (!value.isLeaf) {\n                this.nzTreeService.setExpandedNodeList(value);\n            }\n            this._nzTreeNode = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTreeNodeComponent.prototype, \"nzDraggable\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._nzDraggable;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._nzDraggable = value;\n            this.handDragEvent();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTreeNodeComponent.prototype, \"nzDefaultExpandAll\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._nzExpandAll;\n        },\n        /**\n         * @deprecated use\n         * nzExpandAll instead\n         */\n        set: /**\n         * @deprecated use\n         * nzExpandAll instead\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._nzExpandAll = value;\n            if (value && this.nzTreeNode && !this.nzTreeNode.isLeaf) {\n                this.nzTreeNode.setExpanded(true);\n                this.nzTreeService.setExpandedNodeList(this.nzTreeNode);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTreeNodeComponent.prototype, \"nzExpandAll\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._nzExpandAll;\n        },\n        // default set\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._nzExpandAll = value;\n            if (value && this.nzTreeNode && !this.nzTreeNode.isLeaf) {\n                this.nzTreeNode.setExpanded(true);\n                this.nzTreeService.setExpandedNodeList(this.nzTreeNode);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTreeNodeComponent.prototype, \"nzSearchValue\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._searchValue;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.highlightKeys = [];\n            if (value && this.nzTreeNode.title.includes(value)) {\n                /** @type {?} */\n                var index = this.nzTreeNode.title.indexOf(value);\n                this.highlightKeys.push(this.nzTreeNode.title.slice(0, index));\n                this.highlightKeys.push(this.nzTreeNode.title.slice(index + value.length, this.nzTreeNode.title.length));\n            }\n            this._searchValue = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTreeNodeComponent.prototype, \"nzIcon\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            if (this.nzTreeNode && this.nzTreeNode.origin.icon) {\n                this.oldAPIIcon = this.nzTreeNode.origin.icon.indexOf('anticon') > -1;\n            }\n            return this.nzTreeNode && this.nzTreeNode.origin.icon;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTreeNodeComponent.prototype, \"canDraggable\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return (this.nzDraggable && this.nzTreeNode && !this.nzTreeNode.isDisabled) ? true : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTreeNodeComponent.prototype, \"isShowLineIcon\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return !this.nzTreeNode.isLeaf && this.nzShowLine;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTreeNodeComponent.prototype, \"isShowSwitchIcon\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return !this.nzTreeNode.isLeaf && !this.nzShowLine;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTreeNodeComponent.prototype, \"isSwitcherOpen\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return (this.nzTreeNode.isExpanded && !this.nzTreeNode.isLeaf);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTreeNodeComponent.prototype, \"isSwitcherClose\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return (!this.nzTreeNode.isExpanded && !this.nzTreeNode.isLeaf);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTreeNodeComponent.prototype, \"displayStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            // TODO\n            return (this.nzSearchValue && this.nzHideUnMatched && !this.nzTreeNode.isMatched && !this.nzTreeNode.isExpanded) ? 'none' : '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * reset node class\n     */\n    /**\n     * reset node class\n     * @return {?}\n     */\n    NzTreeNodeComponent.prototype.setClassMap = /**\n     * reset node class\n     * @return {?}\n     */\n        function () {\n            var _a, _b, _c, _d, _e, _f;\n            this.nzNodeClass = (_a = {},\n                _a[this.prefixCls + \"-treenode-disabled\"] = this.nzTreeNode.isDisabled,\n                _a);\n            this.nzNodeSwitcherClass = (_b = {},\n                _b[this.prefixCls + \"-switcher\"] = true,\n                _b[this.prefixCls + \"-switcher-noop\"] = this.nzTreeNode.isLeaf,\n                _b);\n            this.nzNodeContentClass = (_c = {},\n                _c[this.prefixCls + \"-node-content-wrapper\"] = true,\n                _c);\n            this.nzNodeContentIconClass = (_d = {},\n                _d[this.prefixCls + \"-iconEle\"] = true,\n                _d[this.prefixCls + \"-icon__customize\"] = true,\n                _d);\n            this.nzNodeContentLoadingClass = (_e = {},\n                _e[this.prefixCls + \"-iconEle\"] = true,\n                _e);\n            this.nzNodeChildrenClass = (_f = {},\n                _f[this.prefixCls + \"-child-tree\"] = true,\n                _f[this.prefixCls + \"-child-tree-open\"] = true,\n                _f);\n        };\n    /**\n     * click node to select, 200ms to dbl click\n     */\n    /**\n     * click node to select, 200ms to dbl click\n     * @param {?} event\n     * @return {?}\n     */\n    NzTreeNodeComponent.prototype.nzClick = /**\n     * click node to select, 200ms to dbl click\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            event.preventDefault();\n            event.stopPropagation();\n            if (this.nzTreeNode.isSelectable) {\n                this.nzTreeService.setNodeActive(this.nzTreeNode, this.nzMultiple);\n            }\n            this.clickNode.emit(this.nzTreeService.formatEvent('click', this.nzTreeNode, event));\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NzTreeNodeComponent.prototype.nzDblClick = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.dblClick.emit(this.nzTreeService.formatEvent('dblclick', this.nzTreeNode, event));\n        };\n    /**\n     * @param event\n     */\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NzTreeNodeComponent.prototype.nzContextMenu = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.contextMenu.emit(this.nzTreeService.formatEvent('contextmenu', this.nzTreeNode, event));\n        };\n    /**\n     * collapse node\n     * @param event\n     */\n    /**\n     * collapse node\n     * @param {?} event\n     * @return {?}\n     */\n    NzTreeNodeComponent.prototype._clickExpand = /**\n     * collapse node\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            event.preventDefault();\n            event.stopPropagation();\n            if (!this.nzTreeNode.isLoading && !this.nzTreeNode.isLeaf) {\n                // set async state\n                if (this.nzAsyncData && this.nzTreeNode.getChildren().length === 0 && !this.nzTreeNode.isExpanded) {\n                    this.nzTreeNode.isLoading = true;\n                }\n                this.nzTreeNode.setExpanded(!this.nzTreeNode.isExpanded);\n                this.nzTreeService.setExpandedNodeList(this.nzTreeNode);\n                this.clickExpand.emit(this.nzTreeService.formatEvent('expand', this.nzTreeNode, event));\n            }\n        };\n    /**\n     * check node\n     * @param event\n     */\n    /**\n     * check node\n     * @param {?} event\n     * @return {?}\n     */\n    NzTreeNodeComponent.prototype._clickCheckBox = /**\n     * check node\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            event.preventDefault();\n            event.stopPropagation();\n            // return if node is disabled\n            if (isCheckDisabled(this.nzTreeNode)) {\n                return;\n            }\n            this.nzTreeNode.setChecked(!this.nzTreeNode.isChecked);\n            this.nzTreeService.setCheckedNodeList(this.nzTreeNode);\n            if (!this.nzCheckStrictly) {\n                this.nzTreeService.conduct(this.nzTreeNode);\n            }\n            this.clickCheckBox.emit(this.nzTreeService.formatEvent('check', this.nzTreeNode, event));\n        };\n    /**\n     * drag event\n     * @param e\n     */\n    /**\n     * drag event\n     * @return {?}\n     */\n    NzTreeNodeComponent.prototype.clearDragClass = /**\n     * drag event\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            /** @type {?} */\n            var dragClass = ['drag-over-gap-top', 'drag-over-gap-bottom', 'drag-over'];\n            dragClass.forEach(function (e) {\n                _this.renderer.removeClass(_this.dragElement.nativeElement, e);\n            });\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzTreeNodeComponent.prototype.handleDragStart = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            e.stopPropagation();\n            try {\n                // ie throw error\n                // firefox-need-it\n                e.dataTransfer.setData('text/plain', '');\n            }\n            catch (error) {\n                // empty\n            }\n            this.nzTreeService.setSelectedNode(this.nzTreeNode);\n            this.nzTreeNode.setExpanded(false);\n            this.nzDragStart.emit(this.nzTreeService.formatEvent('dragstart', null, e));\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzTreeNodeComponent.prototype.handleDragEnter = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            var _this = this;\n            e.preventDefault();\n            e.stopPropagation();\n            // reset position\n            this.dragPos = 2;\n            this.ngZone.run(function () {\n                if ((_this.nzTreeNode !== _this.nzTreeService.getSelectedNode()) && !_this.nzTreeNode.isLeaf) {\n                    _this.nzTreeNode.setExpanded(true);\n                }\n            });\n            this.nzDragEnter.emit(this.nzTreeService.formatEvent('dragenter', this.nzTreeNode, e));\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzTreeNodeComponent.prototype.handleDragOver = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            e.preventDefault();\n            e.stopPropagation();\n            /** @type {?} */\n            var dropPosition = this.nzTreeService.calcDropPosition(e);\n            if (this.dragPos !== dropPosition) {\n                this.clearDragClass();\n                this.dragPos = dropPosition;\n                // leaf node will pass\n                if (!(this.dragPos === 0 && this.nzTreeNode.isLeaf)) {\n                    this.renderer.addClass(this.dragElement.nativeElement, this.dragPosClass[this.dragPos]);\n                }\n            }\n            this.nzDragOver.emit(this.nzTreeService.formatEvent('dragover', this.nzTreeNode, e));\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzTreeNodeComponent.prototype.handleDragLeave = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            var _this = this;\n            e.stopPropagation();\n            this.ngZone.run(function () {\n                _this.clearDragClass();\n            });\n            this.nzDragLeave.emit(this.nzTreeService.formatEvent('dragleave', this.nzTreeNode, e));\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzTreeNodeComponent.prototype.handleDragDrop = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            var _this = this;\n            e.preventDefault();\n            e.stopPropagation();\n            this.ngZone.run(function () {\n                _this.clearDragClass();\n                if (_this.nzTreeService.getSelectedNode() === _this.nzTreeNode) {\n                    return;\n                }\n                else if (_this.dragPos === 0 && _this.nzTreeNode.isLeaf) {\n                    return;\n                }\n                // pass if node is leafNo\n                if (_this.nzBeforeDrop) {\n                    _this.nzBeforeDrop({\n                        dragNode: _this.nzTreeService.getSelectedNode(),\n                        node: _this.nzTreeNode,\n                        pos: _this.dragPos\n                    }).subscribe(function (canDrop) {\n                        if (canDrop) {\n                            _this.nzTreeService.dropAndApply(_this.nzTreeNode, _this.dragPos);\n                        }\n                        _this.nzDrop.emit(_this.nzTreeService.formatEvent('drop', _this.nzTreeNode, e));\n                        _this.nzDragEnd.emit(_this.nzTreeService.formatEvent('dragend', _this.nzTreeNode, e));\n                    });\n                }\n                else if (_this.nzTreeNode) {\n                    _this.nzTreeService.dropAndApply(_this.nzTreeNode, _this.dragPos);\n                    _this.nzDrop.emit(_this.nzTreeService.formatEvent('drop', _this.nzTreeNode, e));\n                }\n            });\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzTreeNodeComponent.prototype.handleDragEnd = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            var _this = this;\n            e.stopPropagation();\n            this.ngZone.run(function () {\n                // if user do not custom beforeDrop\n                if (!_this.nzBeforeDrop) {\n                    _this.nzTreeService.setSelectedNode(null);\n                    _this.nzDragEnd.emit(_this.nzTreeService.formatEvent('dragend', _this.nzTreeNode, e));\n                }\n            });\n        };\n    /**\n     * 监听拖拽事件\n     */\n    /**\n     * 监听拖拽事件\n     * @return {?}\n     */\n    NzTreeNodeComponent.prototype.handDragEvent = /**\n     * 监听拖拽事件\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.ngZone.runOutsideAngular(function () {\n                if (_this.nzDraggable) {\n                    _this.destory$ = new Subject();\n                    fromEvent(_this.elRef.nativeElement, 'dragstart').pipe(takeUntil(_this.destory$)).subscribe(function (e) { return _this.handleDragStart(e); });\n                    fromEvent(_this.elRef.nativeElement, 'dragenter').pipe(takeUntil(_this.destory$)).subscribe(function (e) { return _this.handleDragEnter(e); });\n                    fromEvent(_this.elRef.nativeElement, 'dragover').pipe(takeUntil(_this.destory$)).subscribe(function (e) { return _this.handleDragOver(e); });\n                    fromEvent(_this.elRef.nativeElement, 'dragleave').pipe(takeUntil(_this.destory$)).subscribe(function (e) { return _this.handleDragLeave(e); });\n                    fromEvent(_this.elRef.nativeElement, 'drop').pipe(takeUntil(_this.destory$)).subscribe(function (e) { return _this.handleDragDrop(e); });\n                    fromEvent(_this.elRef.nativeElement, 'dragend').pipe(takeUntil(_this.destory$)).subscribe(function (e) { return _this.handleDragEnd(e); });\n                }\n                else {\n                    _this.destory$.next();\n                    _this.destory$.complete();\n                }\n            });\n        };\n    /**\n     * @return {?}\n     */\n    NzTreeNodeComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.setClassMap();\n        };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NzTreeNodeComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            this.setClassMap();\n        };\n    /**\n     * @return {?}\n     */\n    NzTreeNodeComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.destory$.next();\n            this.destory$.complete();\n        };\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Boolean)\n    ], NzTreeNodeComponent.prototype, \"nzShowLine\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Boolean)\n    ], NzTreeNodeComponent.prototype, \"nzShowExpand\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Boolean)\n    ], NzTreeNodeComponent.prototype, \"nzMultiple\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Boolean)\n    ], NzTreeNodeComponent.prototype, \"nzCheckable\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Boolean)\n    ], NzTreeNodeComponent.prototype, \"nzAsyncData\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Boolean)\n    ], NzTreeNodeComponent.prototype, \"nzCheckStrictly\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Object)\n    ], NzTreeNodeComponent.prototype, \"nzHideUnMatched\", void 0);\n    return NzTreeNodeComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzTreeComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzTreeComponent(nzTreeService) {\n        this.nzTreeService = nzTreeService;\n        this.nzShowIcon = false;\n        this.nzShowLine = false;\n        this.nzCheckStrictly = false;\n        this.nzCheckable = false;\n        this.nzShowExpand = true;\n        this.nzAsyncData = false;\n        this.nzDraggable = false;\n        this.nzMultiple = false;\n        this.nzExpandAll = false;\n        this.nzHideUnMatched = false;\n        /**\n         * @deprecated use\n         * nzExpandAll instead\n         */\n        this.nzDefaultExpandAll = false;\n        // model bind\n        this.nzExpandedKeysChange = new EventEmitter();\n        this.nzSelectedKeysChange = new EventEmitter();\n        this.nzCheckedKeysChange = new EventEmitter();\n        this.nzSearchValueChange = new EventEmitter();\n        /**\n         * @deprecated use\n         * nzSearchValueChange instead\n         */\n        this.nzOnSearchNode = new EventEmitter();\n        this.nzClick = new EventEmitter();\n        this.nzDblClick = new EventEmitter();\n        this.nzContextMenu = new EventEmitter();\n        this.nzCheckBoxChange = new EventEmitter();\n        this.nzExpandChange = new EventEmitter();\n        this.nzOnDragStart = new EventEmitter();\n        this.nzOnDragEnter = new EventEmitter();\n        this.nzOnDragOver = new EventEmitter();\n        this.nzOnDragLeave = new EventEmitter();\n        this.nzOnDrop = new EventEmitter();\n        this.nzOnDragEnd = new EventEmitter();\n        this._searchValue = null;\n        // tslint:disable-next-line:no-any\n        this.nzDefaultSubject = new ReplaySubject(6);\n        this.nzNodes = [];\n        this.prefixCls = 'ant-tree';\n        this.nzTreeClass = {};\n        this.onChange = function () { return null; };\n        this.onTouched = function () { return null; };\n    }\n    Object.defineProperty(NzTreeComponent.prototype, \"nzData\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (Array.isArray(value)) {\n                if (!this.nzTreeService.isArrayOfNzTreeNode(value)) {\n                    // has not been new NzTreeNode\n                    this.nzNodes = value.map(function (item) { return (new NzTreeNode(item)); });\n                }\n                else {\n                    this.nzNodes = value;\n                }\n                this.nzTreeService.conductOption.isCheckStrictly = this.nzCheckStrictly;\n                this.nzTreeService.initTree(this.nzNodes);\n            }\n            else {\n                if (value !== null) {\n                    console.warn('ngModel only accepts an array and must be not empty');\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTreeComponent.prototype, \"nzDefaultExpandedKeys\", {\n        /**\n         * @deprecated use\n         * nzExpandedKeys instead\n         */\n        set: /**\n         * @deprecated use\n         * nzExpandedKeys instead\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.nzDefaultSubject.next({ type: 'nzExpandedKeys', keys: value });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTreeComponent.prototype, \"nzDefaultSelectedKeys\", {\n        /**\n         * @deprecated use\n         * nzSelectedKeys instead\n         */\n        set: /**\n         * @deprecated use\n         * nzSelectedKeys instead\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.nzDefaultSubject.next({ type: 'nzSelectedKeys', keys: value });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTreeComponent.prototype, \"nzDefaultCheckedKeys\", {\n        /**\n         * @deprecated use\n         * nzCheckedKeys instead\n         */\n        set: /**\n         * @deprecated use\n         * nzCheckedKeys instead\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.nzDefaultSubject.next({ type: 'nzCheckedKeys', keys: value });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTreeComponent.prototype, \"nzExpandedKeys\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.nzDefaultSubject.next({ type: 'nzExpandedKeys', keys: value });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTreeComponent.prototype, \"nzSelectedKeys\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.nzDefaultSubject.next({ type: 'nzSelectedKeys', keys: value });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTreeComponent.prototype, \"nzCheckedKeys\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.nzDefaultSubject.next({ type: 'nzCheckedKeys', keys: value });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTreeComponent.prototype, \"nzSearchValue\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._searchValue;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._searchValue = value;\n            this.nzTreeService.searchExpand(value);\n            if (isNotNil(value)) {\n                this.nzSearchValueChange.emit(this.nzTreeService.formatEvent('search', null, null));\n                this.nzOnSearchNode.emit(this.nzTreeService.formatEvent('search', null, null));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzTreeComponent.prototype.getTreeNodes = /**\n     * @return {?}\n     */\n        function () {\n            return this.nzNodes;\n        };\n    /**\n     * public function\n     */\n    /**\n     * public function\n     * @return {?}\n     */\n    NzTreeComponent.prototype.getCheckedNodeList = /**\n     * public function\n     * @return {?}\n     */\n        function () {\n            return this.nzTreeService.getCheckedNodeList();\n        };\n    /**\n     * @return {?}\n     */\n    NzTreeComponent.prototype.getSelectedNodeList = /**\n     * @return {?}\n     */\n        function () {\n            return this.nzTreeService.getSelectedNodeList();\n        };\n    /**\n     * @return {?}\n     */\n    NzTreeComponent.prototype.getHalfCheckedNodeList = /**\n     * @return {?}\n     */\n        function () {\n            return this.nzTreeService.getHalfCheckedNodeList();\n        };\n    /**\n     * @return {?}\n     */\n    NzTreeComponent.prototype.getExpandedNodeList = /**\n     * @return {?}\n     */\n        function () {\n            return this.nzTreeService.getExpandedNodeList();\n        };\n    /**\n     * @return {?}\n     */\n    NzTreeComponent.prototype.getMatchedNodeList = /**\n     * @return {?}\n     */\n        function () {\n            return this.nzTreeService.getMatchedNodeList();\n        };\n    /**\n     * @return {?}\n     */\n    NzTreeComponent.prototype.setClassMap = /**\n     * @return {?}\n     */\n        function () {\n            var _a;\n            this.nzTreeClass = (_a = {},\n                _a[this.prefixCls] = true,\n                _a[this.prefixCls + '-show-line'] = this.nzShowLine,\n                _a[this.prefixCls + \"-icon-hide\"] = !this.nzShowIcon,\n                _a['draggable-tree'] = this.nzDraggable,\n                _a);\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzTreeComponent.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            if (Array.isArray(value)) {\n                this.nzNodes = value;\n                this.nzTreeService.conductOption.isCheckStrictly = this.nzCheckStrictly;\n                this.nzTreeService.initTree(this.nzNodes);\n            }\n            else {\n                if (value !== null) {\n                    console.warn('ngModel only accepts an array and should be not empty');\n                }\n            }\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzTreeComponent.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this.onChange = fn;\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzTreeComponent.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this.onTouched = fn;\n        };\n    /**\n     * @return {?}\n     */\n    NzTreeComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.setClassMap();\n            this.nzDefaultSubscription = this.nzDefaultSubject.subscribe(function (data) {\n                if (!data || !data.keys) {\n                    return;\n                }\n                switch (data.type) {\n                    case 'nzExpandedKeys':\n                        _this.nzTreeService.calcExpandedKeys(data.keys, _this.nzNodes);\n                        _this.nzExpandedKeysChange.emit(data.keys);\n                        break;\n                    case 'nzSelectedKeys':\n                        _this.nzTreeService.calcSelectedKeys(data.keys, _this.nzNodes, _this.nzMultiple);\n                        _this.nzSelectedKeysChange.emit(data.keys);\n                        break;\n                    case 'nzCheckedKeys':\n                        _this.nzTreeService.calcCheckedKeys(data.keys, _this.nzNodes, _this.nzCheckStrictly);\n                        _this.nzCheckedKeysChange.emit(data.keys);\n                        break;\n                }\n            });\n        };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NzTreeComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            if (changes[\"nzCheckStrictly\"]) {\n                this.nzTreeService.conductOption.isCheckStrictly = changes[\"nzCheckStrictly\"].currentValue;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzTreeComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            if (this.nzDefaultSubscription) {\n                this.nzDefaultSubscription.unsubscribe();\n                this.nzDefaultSubscription = null;\n            }\n        };\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Object)\n    ], NzTreeComponent.prototype, \"nzShowIcon\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Object)\n    ], NzTreeComponent.prototype, \"nzShowLine\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Object)\n    ], NzTreeComponent.prototype, \"nzCheckStrictly\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Object)\n    ], NzTreeComponent.prototype, \"nzCheckable\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Object)\n    ], NzTreeComponent.prototype, \"nzShowExpand\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Object)\n    ], NzTreeComponent.prototype, \"nzAsyncData\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Object)\n    ], NzTreeComponent.prototype, \"nzDraggable\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Object)\n    ], NzTreeComponent.prototype, \"nzMultiple\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Boolean)\n    ], NzTreeComponent.prototype, \"nzExpandAll\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Object)\n    ], NzTreeComponent.prototype, \"nzHideUnMatched\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Boolean)\n    ], NzTreeComponent.prototype, \"nzDefaultExpandAll\", void 0);\n    return NzTreeComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzTreeModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzTreeModule() {\n    }\n    return NzTreeModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar selectDropDownAnimation = /*@__PURE__*/ trigger('selectDropDownAnimation', [\n    /*@__PURE__*/ state('hidden', /*@__PURE__*/ style({\n        opacity: 0,\n        display: 'none'\n    })),\n    /*@__PURE__*/ state('bottom', /*@__PURE__*/ style({\n        opacity: 1,\n        transform: 'scaleY(1)',\n        transformOrigin: '0% 0%'\n    })),\n    /*@__PURE__*/ state('top', /*@__PURE__*/ style({\n        opacity: 1,\n        transform: 'scaleY(1)',\n        transformOrigin: '0% 100%'\n    })),\n    /*@__PURE__*/ transition('hidden => bottom', [\n        /*@__PURE__*/ style({\n            opacity: 0,\n            transform: 'scaleY(0.8)',\n            transformOrigin: '0% 0%'\n        }),\n        /*@__PURE__*/ animate('100ms cubic-bezier(0.755, 0.05, 0.855, 0.06)')\n    ]),\n    /*@__PURE__*/ transition('bottom => hidden', [\n        /*@__PURE__*/ animate('100ms cubic-bezier(0.755, 0.05, 0.855, 0.06)', /*@__PURE__*/ style({\n            opacity: 0,\n            transform: 'scaleY(0.8)',\n            transformOrigin: '0% 0%'\n        }))\n    ]),\n    /*@__PURE__*/ transition('hidden => top', [\n        /*@__PURE__*/ style({\n            opacity: 0,\n            transform: 'scaleY(0.8)',\n            transformOrigin: '0% 100%'\n        }),\n        /*@__PURE__*/ animate('100ms cubic-bezier(0.755, 0.05, 0.855, 0.06)')\n    ]),\n    /*@__PURE__*/ transition('top => hidden', [\n        /*@__PURE__*/ animate('100ms cubic-bezier(0.755, 0.05, 0.855, 0.06)', /*@__PURE__*/ style({\n            opacity: 0,\n            transform: 'scaleY(0.8)',\n            transformOrigin: '0% 100%'\n        }))\n    ])\n]);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar selectTagAnimation = /*@__PURE__*/ trigger('selectTagAnimation', [\n    /*@__PURE__*/ state('*', /*@__PURE__*/ style({ opacity: 1, transform: 'scale(1)' })),\n    /*@__PURE__*/ transition('void => *', [\n        /*@__PURE__*/ style({ opacity: 0, transform: 'scale(0)' }),\n        /*@__PURE__*/ animate('150ms linear')\n    ]),\n    /*@__PURE__*/ state('void', /*@__PURE__*/ style({ opacity: 0, transform: 'scale(0)' })),\n    /*@__PURE__*/ transition('* => void', [\n        /*@__PURE__*/ style({ opacity: 1, transform: 'scale(1)' }),\n        /*@__PURE__*/ animate('150ms linear')\n    ])\n]);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzTreeSelectComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NzTreeSelectComponent(document, // tslint:disable-line:no-any\n    // tslint:disable-line:no-any\n    element, renderer, cdr, overlay, viewContainerRef) {\n        this.document = document;\n        this.element = element;\n        this.renderer = renderer;\n        this.cdr = cdr;\n        this.overlay = overlay;\n        this.viewContainerRef = viewContainerRef;\n        this.nodes = [];\n        this.isComposing = false;\n        this.isDestroy = true;\n        this.inputValue = '';\n        this.dropDownPosition = 'bottom';\n        this.selectedNodes = [];\n        this.value = [];\n        this.nzAllowClear = true;\n        this.nzShowExpand = true;\n        this.nzDropdownMatchSelectWidth = true;\n        this.nzCheckable = false;\n        this.nzShowSearch = false;\n        this.nzDisabled = false;\n        this.nzShowLine = false;\n        this.nzAsyncData = false;\n        this.nzMultiple = false;\n        this.nzDefaultExpandAll = false;\n        this.nzOpen = false;\n        this.nzSize = 'default';\n        this.nzPlaceHolder = '';\n        this.nzDefaultExpandedKeys = [];\n        this.nzDisplayWith = function (node) { return node.title; };\n        this.nzOpenChange = new EventEmitter();\n        this.nzCleared = new EventEmitter();\n        this.nzRemoved = new EventEmitter();\n        this.nzExpandChange = new EventEmitter();\n        this.nzTreeClick = new EventEmitter();\n        this.nzTreeCheckBoxChange = new EventEmitter();\n        this.onTouched = function () { return null; };\n    }\n    Object.defineProperty(NzTreeSelectComponent.prototype, \"nzNodes\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nodes;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            var _this = this;\n            this.nodes = value;\n            setTimeout(function () { return _this.updateSelectedNodes(); }, 0);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTreeSelectComponent.prototype, \"placeHolderDisplay\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.inputValue || this.isComposing || this.selectedNodes.length ? 'none' : 'block';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTreeSelectComponent.prototype, \"searchDisplay\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzOpen ? 'block' : 'none';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTreeSelectComponent.prototype, \"isMultiple\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.nzMultiple || this.nzCheckable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzTreeSelectComponent.prototype, \"selectedValueDisplay\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            /** @type {?} */\n            var showSelectedValue = false;\n            /** @type {?} */\n            var opacity = 1;\n            if (!this.nzShowSearch) {\n                showSelectedValue = true;\n            }\n            else {\n                if (this.nzOpen) {\n                    showSelectedValue = !(this.inputValue || this.isComposing);\n                    if (showSelectedValue) {\n                        opacity = 0.4;\n                    }\n                }\n                else {\n                    showSelectedValue = true;\n                }\n            }\n            return {\n                display: showSelectedValue ? 'block' : 'none',\n                opacity: \"\" + opacity\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzTreeSelectComponent.prototype.trigger = /**\n     * @return {?}\n     */\n        function () {\n            if (this.nzDisabled || (!this.nzDisabled && this.nzOpen)) {\n                this.closeDropDown();\n            }\n            else {\n                this.openDropdown();\n                if (this.nzShowSearch) {\n                    this.focusOnInput();\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzTreeSelectComponent.prototype.openDropdown = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.nzDisabled) {\n                this.nzOpen = true;\n                this.nzOpenChange.emit(this.nzOpen);\n                this.updateCdkConnectedOverlayStatus();\n                this.updatePosition();\n                this.updateDropDownClassMap();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzTreeSelectComponent.prototype.closeDropDown = /**\n     * @return {?}\n     */\n        function () {\n            this.onTouched();\n            this.nzOpen = false;\n            this.nzOpenChange.emit(this.nzOpen);\n            this.updateCdkConnectedOverlayStatus();\n            this.cdr.markForCheck();\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzTreeSelectComponent.prototype.onKeyDownInput = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            /** @type {?} */\n            var keyCode = e.keyCode;\n            /** @type {?} */\n            var eventTarget = /** @type {?} */ (e.target);\n            if (this.isMultiple &&\n                !eventTarget.value &&\n                keyCode === BACKSPACE) {\n                e.preventDefault();\n                if (this.selectedNodes.length) {\n                    this.removeSelected(this.selectedNodes[this.selectedNodes.length - 1]);\n                }\n            }\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzTreeSelectComponent.prototype.setInputValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.inputValue = value;\n            this.updateInputWidth();\n            this.updatePosition();\n        };\n    /**\n     * @return {?}\n     */\n    NzTreeSelectComponent.prototype.detachOverlay = /**\n     * @return {?}\n     */\n        function () {\n            if (this.overlayRef && this.overlayRef.hasAttached()) {\n                this.overlayRef.detach();\n                this.overlayBackdropClickSubscription.unsubscribe();\n                this.onTouched();\n                this.nzOpen = false;\n                this.nzOpenChange.emit(this.nzOpen);\n            }\n        };\n    /**\n     * @param {?} node\n     * @param {?=} emit\n     * @param {?=} event\n     * @return {?}\n     */\n    NzTreeSelectComponent.prototype.removeSelected = /**\n     * @param {?} node\n     * @param {?=} emit\n     * @param {?=} event\n     * @return {?}\n     */\n        function (node, emit, event) {\n            if (emit === void 0) {\n                emit = true;\n            }\n            node.isSelected = false;\n            node.isChecked = false;\n            if (this.nzCheckable) {\n                this.treeRef.nzTreeService.conduct(node);\n                this.treeRef.nzTreeService.setCheckedNodeList(node);\n            }\n            else {\n                this.treeRef.nzTreeService.setSelectedNodeList(node, this.nzMultiple);\n            }\n            if (emit) {\n                this.nzRemoved.emit(node);\n            }\n            // Do not trigger the popup\n            if (event && event.stopPropagation) {\n                event.stopPropagation();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzTreeSelectComponent.prototype.focusOnInput = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            setTimeout(function () {\n                if (_this.inputElement) {\n                    _this.inputElement.nativeElement.focus();\n                }\n            });\n        };\n    /**\n     * @return {?}\n     */\n    NzTreeSelectComponent.prototype.attachOverlay = /**\n     * @return {?}\n     */\n        function () {\n            this.portal = new TemplatePortal(this.dropdownTemplate, this.viewContainerRef);\n            this.overlayRef = this.overlay.create(this.getOverlayConfig());\n            this.overlayRef.attach(this.portal);\n            this.cdr.detectChanges();\n            this.overlayBackdropClickSubscription = this.subscribeOverlayBackdropClick();\n        };\n    /**\n     * @return {?}\n     */\n    NzTreeSelectComponent.prototype.getOverlayConfig = /**\n     * @return {?}\n     */\n        function () {\n            var _a;\n            /** @type {?} */\n            var overlayWidth = this.treeSelect.nativeElement.getBoundingClientRect().width;\n            return new OverlayConfig((_a = {\n                positionStrategy: this.getOverlayPosition(),\n                scrollStrategy: this.overlay.scrollStrategies.reposition()\n            },\n                _a[this.nzDropdownMatchSelectWidth ? 'width' : 'minWidth'] = overlayWidth,\n                _a.hasBackdrop = true,\n                _a));\n        };\n    /**\n     * @return {?}\n     */\n    NzTreeSelectComponent.prototype.getOverlayPosition = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var positions = [\n                new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\n                new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' })\n            ];\n            this.positionStrategy = this.overlay.position()\n                .flexibleConnectedTo(this.treeSelect)\n                .withPositions(positions)\n                .withFlexibleDimensions(false)\n                .withPush(false);\n            return this.positionStrategy;\n        };\n    /**\n     * @return {?}\n     */\n    NzTreeSelectComponent.prototype.subscribeOverlayBackdropClick = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            return this.overlayRef.backdropClick()\n                .subscribe(function () {\n                _this.closeDropDown();\n            });\n        };\n    /**\n     * @return {?}\n     */\n    NzTreeSelectComponent.prototype.subscribeSelectionChange = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            return merge(this.nzTreeClick.pipe(tap(function (event) {\n                /** @type {?} */\n                var node = event.node;\n                if (_this.nzCheckable && !node.isDisabled && !node.isDisableCheckbox) {\n                    node.isChecked = !node.isChecked;\n                    _this.treeRef.nzTreeService.conduct(node);\n                    _this.treeRef.nzTreeService.setCheckedNodeList(node);\n                }\n                if (_this.nzCheckable) {\n                    node.isSelected = false;\n                }\n            }), filter(function (event) {\n                return _this.nzCheckable ? (!event.node.isDisabled && !event.node.isDisableCheckbox) : !event.node.isDisabled;\n            })), this.nzCheckable ? this.nzTreeCheckBoxChange : of(), this.nzCleared, this.nzRemoved).subscribe(function () {\n                _this.updateSelectedNodes();\n                /** @type {?} */\n                var value = _this.selectedNodes.map(function (node) { return node.key; });\n                _this.value = __spread(value);\n                if (_this.nzShowSearch) {\n                    _this.inputValue = '';\n                }\n                if (_this.isMultiple) {\n                    _this.onChange(value);\n                    if (_this.nzShowSearch) {\n                        _this.focusOnInput();\n                    }\n                }\n                else {\n                    _this.closeDropDown();\n                    _this.onChange(value.length ? value[0] : null);\n                }\n            });\n        };\n    /**\n     * @return {?}\n     */\n    NzTreeSelectComponent.prototype.updateSelectedNodes = /**\n     * @return {?}\n     */\n        function () {\n            if (this.treeRef) {\n                this.selectedNodes = __spread((this.nzCheckable ? this.treeRef.getCheckedNodeList() : this.treeRef.getSelectedNodeList()));\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzTreeSelectComponent.prototype.updatePosition = /**\n     * @return {?}\n     */\n        function () {\n            this.overlayRef.updatePosition();\n        };\n    /**\n     * @return {?}\n     */\n    NzTreeSelectComponent.prototype.updateInputWidth = /**\n     * @return {?}\n     */\n        function () {\n            if (this.isMultiple && this.inputElement) {\n                if (this.inputValue || this.isComposing) {\n                    this.renderer.setStyle(this.inputElement.nativeElement, 'width', this.inputElement.nativeElement.scrollWidth + \"px\");\n                }\n                else {\n                    this.renderer.removeStyle(this.inputElement.nativeElement, 'width');\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzTreeSelectComponent.prototype.onClearSelection = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.selectedNodes.forEach(function (node) {\n                _this.removeSelected(node, false);\n            });\n            this.nzCleared.emit();\n            this.closeDropDown();\n        };\n    /**\n     * @return {?}\n     */\n    NzTreeSelectComponent.prototype.updateDropDownClassMap = /**\n     * @return {?}\n     */\n        function () {\n            var _a, _b;\n            if (this.treeRef && !this.treeRef.nzTreeClass['ant-select-tree']) {\n                this.treeRef.nzTreeClass = __assign({}, this.treeRef.nzTreeClass, (_a = {}, _a['ant-select-tree'] = true, _a));\n            }\n            this.dropDownClassMap = (_b = {},\n                _b['ant-select-dropdown'] = true,\n                _b['ant-select-tree-dropdown'] = true,\n                _b[\"ant-select-dropdown--single\"] = !this.nzMultiple,\n                _b[\"ant-select-dropdown--multiple\"] = this.nzMultiple,\n                _b[\"ant-select-dropdown-placement-bottomLeft\"] = this.dropDownPosition === 'bottom',\n                _b[\"ant-select-dropdown-placement-topLeft\"] = this.dropDownPosition === 'top',\n                _b);\n        };\n    /**\n     * @return {?}\n     */\n    NzTreeSelectComponent.prototype.updateCdkConnectedOverlayStatus = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var overlayWidth = this.treeSelect.nativeElement.getBoundingClientRect().width;\n            if (this.nzDropdownMatchSelectWidth) {\n                this.overlayRef.updateSize({ width: overlayWidth });\n            }\n            else {\n                this.overlayRef.updateSize({ minWidth: overlayWidth });\n            }\n            if (this.nzOpen) {\n                this.renderer.removeStyle(this.overlayRef.backdropElement, 'display');\n            }\n            else {\n                this.renderer.setStyle(this.overlayRef.backdropElement, 'display', 'none');\n            }\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NzTreeSelectComponent.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            var _this = this;\n            if (value) {\n                if (this.isMultiple && Array.isArray(value)) {\n                    this.value = value;\n                }\n                else {\n                    this.value = [( /** @type {?} */(value))];\n                }\n                this.updateSelectedNodes();\n            }\n            else {\n                this.value = [];\n                this.selectedNodes.forEach(function (node) {\n                    _this.removeSelected(node, false);\n                });\n                this.selectedNodes = [];\n            }\n            this.cdr.markForCheck();\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzTreeSelectComponent.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this.onChange = fn;\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NzTreeSelectComponent.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n        };\n    /**\n     * @return {?}\n     */\n    NzTreeSelectComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.isDestroy = false;\n            this.selectionChangeSubscription = this.subscribeSelectionChange();\n            Promise.resolve().then(function () {\n                _this.updateDropDownClassMap();\n                _this.updateCdkConnectedOverlayStatus();\n            });\n        };\n    /**\n     * @return {?}\n     */\n    NzTreeSelectComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.isDestroy = true;\n            this.detachOverlay();\n            this.selectionChangeSubscription.unsubscribe();\n            this.overlayBackdropClickSubscription.unsubscribe();\n        };\n    /**\n     * @return {?}\n     */\n    NzTreeSelectComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            this.attachOverlay();\n        };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    NzTreeSelectComponent.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n        function (isDisabled) {\n            this.nzDisabled = isDisabled;\n            this.closeDropDown();\n        };\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Object)\n    ], NzTreeSelectComponent.prototype, \"nzAllowClear\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Object)\n    ], NzTreeSelectComponent.prototype, \"nzShowExpand\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Object)\n    ], NzTreeSelectComponent.prototype, \"nzDropdownMatchSelectWidth\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Object)\n    ], NzTreeSelectComponent.prototype, \"nzCheckable\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Object)\n    ], NzTreeSelectComponent.prototype, \"nzShowSearch\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Object)\n    ], NzTreeSelectComponent.prototype, \"nzDisabled\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Object)\n    ], NzTreeSelectComponent.prototype, \"nzShowLine\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Object)\n    ], NzTreeSelectComponent.prototype, \"nzAsyncData\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Object)\n    ], NzTreeSelectComponent.prototype, \"nzMultiple\", void 0);\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Object)\n    ], NzTreeSelectComponent.prototype, \"nzDefaultExpandAll\", void 0);\n    return NzTreeSelectComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzTreeSelectModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzTreeSelectModule() {\n    }\n    return NzTreeSelectModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzUploadBtnComponent = /** @class */ /*@__PURE__*/ (function () {\n    // endregion\n    function NzUploadBtnComponent(http, el, updateHostClassService, cd) {\n        this.http = http;\n        this.el = el;\n        this.updateHostClassService = updateHostClassService;\n        this.cd = cd;\n        this.reqs = {};\n        this.inited = false;\n        this.destroy = false;\n        // region: fields\n        this.classes = {};\n        this.prefixCls = 'ant-upload';\n        if (!http) {\n            throw new Error(\"Not found 'HttpClient', You can import 'HttpClientModule' in your root module.\");\n        }\n    }\n    // endregion\n    /**\n     * @return {?}\n     */\n    NzUploadBtnComponent.prototype.onClick = /**\n     * @return {?}\n     */\n        function () {\n            if (this.options.disabled) {\n                return;\n            }\n            ( /** @type {?} */(this.file.nativeElement)).click();\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzUploadBtnComponent.prototype.onKeyDown = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            if (this.options.disabled) {\n                return;\n            }\n            if (e.key === 'Enter' || e.keyCode === ENTER) {\n                this.onClick();\n            }\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzUploadBtnComponent.prototype.onFileDrop = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            var _this = this;\n            if (this.options.disabled || e.type === 'dragover') {\n                e.preventDefault();\n                return;\n            }\n            if (this.options.directory) {\n                this.traverseFileTree(e.dataTransfer.items);\n            }\n            else {\n                /** @type {?} */\n                var files = Array.prototype.slice.call(e.dataTransfer.files).filter(function (file) { return _this.attrAccept(file, _this.options.accept); });\n                if (files.length) {\n                    this.uploadFiles(files);\n                }\n            }\n            e.preventDefault();\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzUploadBtnComponent.prototype.onChange = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            if (this.options.disabled) {\n                return;\n            }\n            /** @type {?} */\n            var hie = /** @type {?} */ (e.target);\n            this.uploadFiles(hie.files);\n            hie.value = '';\n        };\n    /**\n     * @param {?} files\n     * @return {?}\n     */\n    NzUploadBtnComponent.prototype.traverseFileTree = /**\n     * @param {?} files\n     * @return {?}\n     */\n        function (files) {\n            var _this = this;\n            var e_1, _a;\n            /** @type {?} */\n            var _traverseFileTree = function (item, path) {\n                if (item.isFile) {\n                    item.file(function (file) {\n                        if (_this.attrAccept(file, _this.options.accept)) {\n                            _this.uploadFiles([file]);\n                        }\n                    });\n                }\n                else if (item.isDirectory) {\n                    /** @type {?} */\n                    var dirReader = item.createReader();\n                    dirReader.readEntries(function (entries) {\n                        var e_2, _a;\n                        try {\n                            for (var entries_1 = __values(entries), entries_1_1 = entries_1.next(); !entries_1_1.done; entries_1_1 = entries_1.next()) {\n                                var entrieItem = entries_1_1.value;\n                                _traverseFileTree(entrieItem, \"\" + path + item.name + \"/\");\n                            }\n                        }\n                        catch (e_2_1) {\n                            e_2 = { error: e_2_1 };\n                        }\n                        finally {\n                            try {\n                                if (entries_1_1 && !entries_1_1.done && (_a = entries_1.return))\n                                    _a.call(entries_1);\n                            }\n                            finally {\n                                if (e_2)\n                                    throw e_2.error;\n                            }\n                        }\n                    });\n                }\n            };\n            try {\n                for (var files_1 = __values(files), files_1_1 = files_1.next(); !files_1_1.done; files_1_1 = files_1.next()) {\n                    var file = files_1_1.value;\n                    _traverseFileTree(file.webkitGetAsEntry(), '');\n                }\n            }\n            catch (e_1_1) {\n                e_1 = { error: e_1_1 };\n            }\n            finally {\n                try {\n                    if (files_1_1 && !files_1_1.done && (_a = files_1.return))\n                        _a.call(files_1);\n                }\n                finally {\n                    if (e_1)\n                        throw e_1.error;\n                }\n            }\n        };\n    /**\n     * @param {?} file\n     * @param {?} acceptedFiles\n     * @return {?}\n     */\n    NzUploadBtnComponent.prototype.attrAccept = /**\n     * @param {?} file\n     * @param {?} acceptedFiles\n     * @return {?}\n     */\n        function (file, acceptedFiles) {\n            if (file && acceptedFiles) {\n                /** @type {?} */\n                var acceptedFilesArray = Array.isArray(acceptedFiles) ? acceptedFiles : acceptedFiles.split(',');\n                /** @type {?} */\n                var fileName_1 = '' + file.name;\n                /** @type {?} */\n                var mimeType_1 = '' + file.type;\n                /** @type {?} */\n                var baseMimeType_1 = mimeType_1.replace(/\\/.*$/, '');\n                return acceptedFilesArray.some(function (type) {\n                    /** @type {?} */\n                    var validType = type.trim();\n                    if (validType.charAt(0) === '.') {\n                        return fileName_1.toLowerCase().indexOf(validType.toLowerCase(), fileName_1.toLowerCase().length - validType.toLowerCase().length) !== -1;\n                    }\n                    else if (/\\/\\*$/.test(validType)) {\n                        // This is something like a image/* mime type\n                        return baseMimeType_1 === validType.replace(/\\/.*$/, '');\n                    }\n                    return mimeType_1 === validType;\n                });\n            }\n            return true;\n        };\n    /**\n     * @param {?} file\n     * @return {?}\n     */\n    NzUploadBtnComponent.prototype.attachUid = /**\n     * @param {?} file\n     * @return {?}\n     */\n        function (file) {\n            if (!file.uid) {\n                file.uid = Math.random().toString(36).substring(2);\n            }\n            return file;\n        };\n    /**\n     * @param {?} fileList\n     * @return {?}\n     */\n    NzUploadBtnComponent.prototype.uploadFiles = /**\n     * @param {?} fileList\n     * @return {?}\n     */\n        function (fileList) {\n            var _this = this;\n            /** @type {?} */\n            var postFiles = Array.prototype.slice.call(fileList);\n            this.options.filters.forEach(function (f) { return postFiles = f.fn(postFiles); });\n            postFiles.forEach(function (file) {\n                _this.attachUid(file);\n                _this.upload(file, postFiles);\n            });\n        };\n    /**\n     * @param {?} file\n     * @param {?} fileList\n     * @return {?}\n     */\n    NzUploadBtnComponent.prototype.upload = /**\n     * @param {?} file\n     * @param {?} fileList\n     * @return {?}\n     */\n        function (file, fileList) {\n            var _this = this;\n            if (!this.options.beforeUpload) {\n                return this.post(file);\n            }\n            /** @type {?} */\n            var before = this.options.beforeUpload(file, fileList);\n            if (before instanceof Observable) {\n                before.subscribe(function (processedFile) {\n                    /** @type {?} */\n                    var processedFileType = Object.prototype.toString.call(processedFile);\n                    if (processedFileType === '[object File]' || processedFileType === '[object Blob]') {\n                        _this.attachUid(processedFile);\n                        _this.post(processedFile);\n                    }\n                    else if (typeof processedFile === 'boolean' && processedFile !== false) {\n                        _this.post(file);\n                    }\n                });\n            }\n            else if (before !== false) {\n                return this.post(file);\n            }\n        };\n    /**\n     * @param {?} file\n     * @return {?}\n     */\n    NzUploadBtnComponent.prototype.post = /**\n     * @param {?} file\n     * @return {?}\n     */\n        function (file) {\n            var _this = this;\n            if (this.destroy) {\n                return;\n            }\n            /** @type {?} */\n            var opt = this.options;\n            var uid = file.uid;\n            var data = opt.data, headers = opt.headers;\n            if (typeof data === 'function') {\n                data = ( /** @type {?} */(data))(file);\n            }\n            if (typeof headers === 'function') {\n                headers = ( /** @type {?} */(headers))(file);\n            }\n            /** @type {?} */\n            var args = {\n                action: opt.action,\n                name: opt.name,\n                headers: headers,\n                file: file,\n                data: data,\n                withCredentials: opt.withCredentials,\n                onProgress: opt.onProgress ? function (e) {\n                    opt.onProgress(e, file);\n                } : null,\n                onSuccess: function (ret, xhr) {\n                    _this.clean(uid);\n                    opt.onSuccess(ret, file, xhr);\n                },\n                onError: function (xhr) {\n                    _this.clean(uid);\n                    opt.onError(xhr, file);\n                }\n            };\n            /** @type {?} */\n            var req$ = (opt.customRequest || this.xhr).call(this, args);\n            if (!(req$ instanceof Subscription)) {\n                console.warn(\"Must return Subscription type in '[nzCustomRequest]' property\");\n            }\n            this.reqs[uid] = req$;\n            opt.onStart(file);\n        };\n    /**\n     * @param {?} args\n     * @return {?}\n     */\n    NzUploadBtnComponent.prototype.xhr = /**\n     * @param {?} args\n     * @return {?}\n     */\n        function (args) {\n            var _this = this;\n            /** @type {?} */\n            var formData = new FormData();\n            // tslint:disable-next-line:no-any\n            formData.append(args.name, /** @type {?} */ (args.file));\n            if (args.data) {\n                Object.keys(args.data).map(function (key) {\n                    formData.append(key, args.data[key]);\n                });\n            }\n            if (!args.headers) {\n                args.headers = {};\n            }\n            if (args.headers['X-Requested-With'] !== null) {\n                args.headers['X-Requested-With'] = \"XMLHttpRequest\";\n            }\n            else {\n                delete args.headers['X-Requested-With'];\n            }\n            /** @type {?} */\n            var req = new HttpRequest('POST', args.action, formData, {\n                reportProgress: true,\n                withCredentials: args.withCredentials,\n                headers: new HttpHeaders(args.headers)\n            });\n            return this.http.request(req).subscribe(function (event) {\n                if (event.type === HttpEventType.UploadProgress) {\n                    if (event.total > 0) {\n                        // tslint:disable-next-line:no-any\n                        ( /** @type {?} */(event)).percent = event.loaded / event.total * 100;\n                    }\n                    args.onProgress(event, args.file);\n                }\n                else if (event instanceof HttpResponse) {\n                    args.onSuccess(event.body, args.file, event);\n                }\n            }, function (err) {\n                _this.abort(args.file);\n                args.onError(err, args.file);\n            });\n        };\n    /**\n     * @param {?} uid\n     * @return {?}\n     */\n    NzUploadBtnComponent.prototype.clean = /**\n     * @param {?} uid\n     * @return {?}\n     */\n        function (uid) {\n            /** @type {?} */\n            var req$ = this.reqs[uid];\n            if (req$ instanceof Subscription) {\n                req$.unsubscribe();\n            }\n            delete this.reqs[uid];\n        };\n    /**\n     * @param {?=} file\n     * @return {?}\n     */\n    NzUploadBtnComponent.prototype.abort = /**\n     * @param {?=} file\n     * @return {?}\n     */\n        function (file) {\n            var _this = this;\n            if (file) {\n                this.clean(file && file.uid);\n            }\n            else {\n                Object.keys(this.reqs).forEach(function (uid) { return _this.clean(uid); });\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzUploadBtnComponent.prototype.setClassMap = /**\n     * @return {?}\n     */\n        function () {\n            var _a;\n            /** @type {?} */\n            var classMap = __assign((_a = {}, _a[this.prefixCls] = true, _a[this.prefixCls + \"-disabled\"] = this.options.disabled, _a), this.classes);\n            this.updateHostClassService.updateHostClass(this.el.nativeElement, classMap);\n            this.cd.detectChanges();\n        };\n    /**\n     * @return {?}\n     */\n    NzUploadBtnComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.inited = true;\n            this.setClassMap();\n        };\n    /**\n     * @return {?}\n     */\n    NzUploadBtnComponent.prototype.ngOnChanges = /**\n     * @return {?}\n     */\n        function () {\n            if (this.inited) {\n                this.setClassMap();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzUploadBtnComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.destroy = true;\n            this.abort();\n        };\n    return NzUploadBtnComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzUploadListComponent = /** @class */ /*@__PURE__*/ (function () {\n    // endregion\n    function NzUploadListComponent(el, updateHostClassService) {\n        this.el = el;\n        this.updateHostClassService = updateHostClassService;\n        // region: fields\n        // tslint:disable-next-line:no-any\n        this.locale = {};\n        this.prefixCls = 'ant-upload-list';\n    }\n    /**\n     * @return {?}\n     */\n    NzUploadListComponent.prototype.setClassMap = /**\n     * @return {?}\n     */\n        function () {\n            var _a;\n            /** @type {?} */\n            var classMap = (_a = {},\n                _a[this.prefixCls] = true,\n                _a[this.prefixCls + \"-\" + this.listType] = true,\n                _a);\n            this.updateHostClassService.updateHostClass(this.el.nativeElement, classMap);\n        };\n    // endregion\n    // region: render\n    /**\n     * @param {?} file\n     * @param {?} e\n     * @return {?}\n     */\n    NzUploadListComponent.prototype.handlePreview = /**\n     * @param {?} file\n     * @param {?} e\n     * @return {?}\n     */\n        function (file, e) {\n            if (!this.onPreview) {\n                return;\n            }\n            e.preventDefault();\n            return this.onPreview(file);\n        };\n    /**\n     * @param {?} file\n     * @param {?} e\n     * @return {?}\n     */\n    NzUploadListComponent.prototype.handleRemove = /**\n     * @param {?} file\n     * @param {?} e\n     * @return {?}\n     */\n        function (file, e) {\n            e.preventDefault();\n            if (this.onRemove) {\n                this.onRemove(file);\n            }\n            return;\n        };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NzUploadListComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            this.setClassMap();\n        };\n    return NzUploadListComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzUploadComponent = /** @class */ /*@__PURE__*/ (function () {\n    // endregion\n    function NzUploadComponent(cd, i18n) {\n        var _this = this;\n        this.cd = cd;\n        this.i18n = i18n;\n        this.locale = {};\n        // region: fields\n        this.nzType = 'select';\n        this._limit = 0;\n        this._size = 0;\n        this.nzDirectory = false;\n        this.nzFilter = [];\n        this.nzFileList = [];\n        this.nzFileListChange = new EventEmitter();\n        this._disabled = false;\n        this.nzListType = 'text';\n        this._multiple = false;\n        this.nzName = 'file';\n        this._showUploadList = true;\n        this._showBtn = true;\n        this._withCredentials = false;\n        this.nzChange = new EventEmitter();\n        this.onStart = function (file) {\n            if (!_this.nzFileList) {\n                _this.nzFileList = [];\n            }\n            /** @type {?} */\n            var targetItem = _this.fileToObject(file);\n            targetItem.status = 'uploading';\n            _this.nzFileList.push(targetItem);\n            _this.genThumb(targetItem);\n            _this.nzFileListChange.emit(_this.nzFileList);\n            _this.nzChange.emit({ file: targetItem, fileList: _this.nzFileList, type: 'start' });\n            _this.cd.detectChanges();\n        };\n        this.onProgress = function (e, file) {\n            /** @type {?} */\n            var fileList = _this.nzFileList;\n            /** @type {?} */\n            var targetItem = _this.getFileItem(file, fileList);\n            targetItem.percent = e.percent;\n            _this.nzChange.emit({\n                event: e,\n                file: __assign({}, targetItem),\n                fileList: _this.nzFileList,\n                type: 'progress'\n            });\n            _this.cd.detectChanges();\n        };\n        this.onSuccess = function (res, file, xhr) {\n            /** @type {?} */\n            var fileList = _this.nzFileList;\n            /** @type {?} */\n            var targetItem = _this.getFileItem(file, fileList);\n            targetItem.status = 'done';\n            targetItem.response = res;\n            _this.nzChange.emit({\n                file: __assign({}, targetItem),\n                fileList: fileList,\n                type: 'success'\n            });\n            _this.cd.detectChanges();\n        };\n        this.onError = function (err, file) {\n            /** @type {?} */\n            var fileList = _this.nzFileList;\n            /** @type {?} */\n            var targetItem = _this.getFileItem(file, fileList);\n            targetItem.error = err;\n            targetItem.status = 'error';\n            targetItem[\"message\"] = _this.genErr(targetItem);\n            _this.nzChange.emit({\n                file: __assign({}, targetItem),\n                fileList: fileList,\n                type: 'error'\n            });\n            _this.cd.detectChanges();\n        };\n        // endregion\n        // region: list\n        this.onRemove = function (file) {\n            _this.upload.abort(file);\n            file.status = 'removed';\n            /** @type {?} */\n            var fnRes = typeof _this.nzRemove === 'function' ?\n                _this.nzRemove(file) : _this.nzRemove == null ? true : _this.nzRemove;\n            (fnRes instanceof Observable ? fnRes : of(fnRes))\n                .pipe(filter(function (res) { return res; }))\n                .subscribe(function () {\n                _this.nzFileList = _this.removeFileItem(file, _this.nzFileList);\n                _this.nzChange.emit({\n                    file: file,\n                    fileList: _this.nzFileList,\n                    type: 'removed'\n                });\n                _this.nzFileListChange.emit(_this.nzFileList);\n                _this.cd.detectChanges();\n            });\n        };\n        // endregion\n        // region: styles\n        this.prefixCls = 'ant-upload';\n        this.classList = [];\n    }\n    Object.defineProperty(NzUploadComponent.prototype, \"nzLimit\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._limit;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._limit = toNumber(value, null);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzUploadComponent.prototype, \"nzSize\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._size;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._size = toNumber(value, null);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzUploadComponent.prototype, \"nzDisabled\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._disabled;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._disabled = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzUploadComponent.prototype, \"nzMultiple\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._multiple;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._multiple = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzUploadComponent.prototype, \"nzShowUploadList\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._showUploadList;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._showUploadList = typeof value === 'boolean' ? toBoolean(value) : value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzUploadComponent.prototype, \"nzShowButton\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._showBtn;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._showBtn = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NzUploadComponent.prototype, \"nzWithCredentials\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._withCredentials;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._withCredentials = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NzUploadComponent.prototype.zipOptions = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (typeof this.nzShowUploadList === 'boolean' && this.nzShowUploadList) {\n                this.nzShowUploadList = {\n                    showPreviewIcon: true,\n                    showRemoveIcon: true\n                };\n            }\n            /** @type {?} */\n            var filters = this.nzFilter.slice();\n            if (this.nzMultiple && this.nzLimit > 0 && filters.findIndex(function (w) { return w.name === 'limit'; }) === -1) {\n                filters.push({\n                    name: 'limit',\n                    fn: function (fileList) { return fileList.slice(-_this.nzLimit); }\n                });\n            }\n            if (this.nzSize > 0 && filters.findIndex(function (w) { return w.name === 'size'; }) === -1) {\n                filters.push({\n                    name: 'size',\n                    fn: function (fileList) { return fileList.filter(function (w) { return (w.size / 1024) <= _this.nzSize; }); }\n                });\n            }\n            if (this.nzFileType && this.nzFileType.length > 0 && filters.findIndex(function (w) { return w.name === 'type'; }) === -1) {\n                /** @type {?} */\n                var types_1 = this.nzFileType.split(',');\n                filters.push({\n                    name: 'type',\n                    fn: function (fileList) { return fileList.filter(function (w) { return ~types_1.indexOf(w.type); }); }\n                });\n            }\n            this._btnOptions = {\n                disabled: this.nzDisabled,\n                accept: this.nzAccept,\n                action: this.nzAction,\n                directory: this.nzDirectory,\n                beforeUpload: this.nzBeforeUpload,\n                customRequest: this.nzCustomRequest,\n                data: this.nzData,\n                headers: this.nzHeaders,\n                name: this.nzName,\n                multiple: this.nzMultiple,\n                withCredentials: this.nzWithCredentials,\n                filters: filters,\n                onStart: this.onStart,\n                onProgress: this.onProgress,\n                onSuccess: this.onSuccess,\n                onError: this.onError\n            };\n            return this;\n        };\n    /**\n     * @param {?} file\n     * @return {?}\n     */\n    NzUploadComponent.prototype.fileToObject = /**\n     * @param {?} file\n     * @return {?}\n     */\n        function (file) {\n            return {\n                lastModified: file.lastModified,\n                lastModifiedDate: file.lastModifiedDate,\n                name: file.filename || file.name,\n                size: file.size,\n                type: file.type,\n                uid: file.uid,\n                response: file.response,\n                error: file.error,\n                percent: 0,\n                // tslint:disable-next-line:no-angle-bracket-type-assertion\n                originFileObj: /** @type {?} */ (file)\n            };\n        };\n    /**\n     * @param {?} file\n     * @param {?} fileList\n     * @return {?}\n     */\n    NzUploadComponent.prototype.getFileItem = /**\n     * @param {?} file\n     * @param {?} fileList\n     * @return {?}\n     */\n        function (file, fileList) {\n            return fileList.filter(function (item) { return item.uid === file.uid; })[0];\n        };\n    /**\n     * @param {?} file\n     * @param {?} fileList\n     * @return {?}\n     */\n    NzUploadComponent.prototype.removeFileItem = /**\n     * @param {?} file\n     * @param {?} fileList\n     * @return {?}\n     */\n        function (file, fileList) {\n            return fileList.filter(function (item) { return item.uid !== file.uid; });\n        };\n    /**\n     * @param {?} file\n     * @return {?}\n     */\n    NzUploadComponent.prototype.genErr = /**\n     * @param {?} file\n     * @return {?}\n     */\n        function (file) {\n            return file.response && typeof file.response === 'string' ?\n                file.response :\n                (file.error && file.error.statusText) || this.locale.uploadError;\n        };\n    /**\n     * @param {?} file\n     * @return {?}\n     */\n    NzUploadComponent.prototype.genThumb = /**\n     * @param {?} file\n     * @return {?}\n     */\n        function (file) {\n            if ((this.nzListType !== 'picture' && this.nzListType !== 'picture-card') ||\n                typeof document === 'undefined' ||\n                typeof window === 'undefined' ||\n                !( /** @type {?} */(window)).FileReader ||\n                !( /** @type {?} */(window)).File ||\n                !(file.originFileObj instanceof File) ||\n                file.thumbUrl != null) {\n                return;\n            }\n            file.thumbUrl = '';\n            /** @type {?} */\n            var reader = new FileReader();\n            reader.onloadend = function () { return file.thumbUrl = /** @type {?} */ (reader.result); };\n            reader.readAsDataURL(file.originFileObj);\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzUploadComponent.prototype.fileDrop = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            if (e.type === this.dragState) {\n                return;\n            }\n            this.dragState = e.type;\n            this.setClassMap();\n        };\n    /**\n     * @return {?}\n     */\n    NzUploadComponent.prototype.setClassMap = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var isDrag = this.nzType === 'drag';\n            /** @type {?} */\n            var subCls = [];\n            if (this.nzType === 'drag') {\n                subCls = [\n                    this.nzFileList.some(function (file) { return file.status === 'uploading'; }) && this.prefixCls + \"-drag-uploading\",\n                    this.dragState === 'dragover' && this.prefixCls + \"-drag-hover\"\n                ];\n            }\n            else {\n                subCls = [\n                    this.prefixCls + \"-select-\" + this.nzListType\n                ];\n            }\n            this.classList = __spread([\n                this.prefixCls,\n                this.prefixCls + \"-\" + this.nzType\n            ], subCls, [\n                this.nzDisabled && this.prefixCls + \"-disabled\"\n            ]).filter(function (item) { return !!item; });\n            this.cd.detectChanges();\n        };\n    // endregion\n    /**\n     * @return {?}\n     */\n    NzUploadComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.i18n$ = this.i18n.localeChange.subscribe(function () {\n                _this.locale = _this.i18n.getLocaleData('Upload');\n                _this.cd.detectChanges();\n            });\n        };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NzUploadComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            var _this = this;\n            if (changes.nzFileList) {\n                (this.nzFileList || []).forEach(function (file) { return file[\"message\"] = _this.genErr(file); });\n            }\n            this.zipOptions().setClassMap();\n        };\n    /**\n     * @return {?}\n     */\n    NzUploadComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.i18n$.unsubscribe();\n        };\n    __decorate([\n        InputBoolean(),\n        __metadata(\"design:type\", Boolean)\n    ], NzUploadComponent.prototype, \"nzDirectory\", void 0);\n    return NzUploadComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzUploadModule = /** @class */ /*@__PURE__*/ (function () {\n    function NzUploadModule() {\n    }\n    return NzUploadModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzDropdownService$$1 = /** @class */ /*@__PURE__*/ (function () {\n    /* tslint:disable-next-line:no-any */\n    function NzDropdownService$$1(overlay, document, zone) {\n        this.overlay = overlay;\n        this.document = document;\n        this.zone = zone;\n        this.positions = [\n            new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'top' }),\n            new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }),\n            new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' }),\n            new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'end', overlayY: 'top' })\n        ];\n    }\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    NzDropdownService$$1.prototype.createOverlay = /**\n     * @param {?} $event\n     * @return {?}\n     */\n        function ($event) {\n            this.createPoint($event);\n            /** @type {?} */\n            var fakeElementRef = new ElementRef(this.locatePoint);\n            this.positionStrategy = this.overlay.position().flexibleConnectedTo(fakeElementRef);\n            this.handlePositionChanges(this.positionStrategy);\n            /** @type {?} */\n            var overlayConfig = new OverlayConfig({\n                hasBackdrop: true,\n                scrollStrategy: this.overlay.scrollStrategies.close(),\n                positionStrategy: this.positionStrategy\n            });\n            return this.overlay.create(overlayConfig);\n        };\n    /**\n     * @param {?} strategy\n     * @return {?}\n     */\n    NzDropdownService$$1.prototype.handlePositionChanges = /**\n     * @param {?} strategy\n     * @return {?}\n     */\n        function (strategy) {\n            var _this = this;\n            strategy.withPositions(this.positions);\n            this.onPositionChangeSubscription = this.positionStrategy.positionChanges.subscribe(function (data) {\n                /** @type {?} */\n                var position = data.connectionPair.overlayY === 'bottom' ? 'top' : 'bottom';\n                _this.instance.setDropDownPosition(position);\n            });\n        };\n    /**\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    NzDropdownService$$1.prototype.handleCloseEvent = /**\n     * @param {?} overlayRef\n     * @return {?}\n     */\n        function (overlayRef) {\n            var _this = this;\n            this.backdropClickSubscription = overlayRef.backdropClick().subscribe(function (_) { return _this.instance.close(); });\n            this.detachmentsSubscription = overlayRef.detachments().subscribe(function (_) { return _this.close(); });\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NzDropdownService$$1.prototype.createPoint = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            if (!this.locatePoint) {\n                /** @type {?} */\n                var container = this.document.createElement('span');\n                this.document.body.appendChild(container);\n                this.locatePoint = container;\n            }\n            this.locatePoint.style.position = \"fixed\";\n            this.locatePoint.style.top = e.clientY + \"px\";\n            this.locatePoint.style.left = e.clientX + \"px\";\n        };\n    /**\n     * @return {?}\n     */\n    NzDropdownService$$1.prototype.removePoint = /**\n     * @return {?}\n     */\n        function () {\n            if (this.locatePoint) {\n                this.document.body.removeChild(this.locatePoint);\n                this.locatePoint = null;\n            }\n        };\n    /**\n     * @param {?} instance\n     * @param {?} template\n     * @return {?}\n     */\n    NzDropdownService$$1.prototype.setInstanceValue = /**\n     * @param {?} instance\n     * @param {?} template\n     * @return {?}\n     */\n        function (instance, template) {\n            instance.open = true;\n            instance.setTemplateRef(template);\n            instance.setControl(this);\n        };\n    /**\n     * @param {?} $event\n     * @param {?} template\n     * @return {?}\n     */\n    NzDropdownService$$1.prototype.create = /**\n     * @param {?} $event\n     * @param {?} template\n     * @return {?}\n     */\n        function ($event, template) {\n            var _this = this;\n            $event.preventDefault();\n            if (this.overlayRef && this.overlayRef.hasAttached()) {\n                this.overlayRef.dispose();\n            }\n            else {\n                this.overlayRef = this.createOverlay($event);\n                setTimeout(function () {\n                    if (_this.overlayRef.backdropElement) {\n                        _this.zone.runOutsideAngular(function () {\n                            _this.overlayRef.backdropElement.addEventListener('contextmenu', function (e) { return e.preventDefault(); });\n                        });\n                    }\n                });\n                this.instance = this.overlayRef.attach(new ComponentPortal(NzDropdownContextComponent)).instance;\n                this.setInstanceValue(this.instance, template);\n                this.handleCloseEvent(this.overlayRef);\n                return this.instance;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NzDropdownService$$1.prototype.close = /**\n     * @return {?}\n     */\n        function () {\n            this.removePoint();\n            this.overlayRef.dispose();\n            if (this.backdropClickSubscription) {\n                this.backdropClickSubscription.unsubscribe();\n                this.backdropClickSubscription = null;\n            }\n            if (this.detachmentsSubscription) {\n                this.detachmentsSubscription.unsubscribe();\n                this.detachmentsSubscription = null;\n            }\n            if (this.onPositionChangeSubscription) {\n                this.onPositionChangeSubscription.unsubscribe();\n                this.onPositionChangeSubscription = null;\n            }\n        };\n    /** @nocollapse */ NzDropdownService$$1.ngInjectableDef = defineInjectable({ factory: function NzDropdownService_Factory() { return new NzDropdownService$$1(inject(Overlay), inject(DOCUMENT), inject(NgZone)); }, token: NzDropdownService$$1, providedIn: \"root\" });\n    return NzDropdownService$$1;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarLocale$1 = {\n    today: 'اليوم',\n    now: 'الأن',\n    backToToday: 'العودة إلى اليوم',\n    ok: 'تأكيد',\n    clear: 'مسح',\n    month: 'الشهر',\n    year: 'السنة',\n    timeSelect: 'اختيار الوقت',\n    dateSelect: 'اختيار التاريخ',\n    monthSelect: 'اختيار الشهر',\n    yearSelect: 'اختيار السنة',\n    decadeSelect: 'اختيار العقد',\n    yearFormat: 'YYYY',\n    dateFormat: 'M/D/YYYY',\n    dayFormat: 'D',\n    dateTimeFormat: 'M/D/YYYY HH:mm:ss',\n    monthBeforeYear: true,\n    previousMonth: 'الشهر السابق (PageUp)',\n    nextMonth: 'الشهر التالى(PageDown)',\n    previousYear: 'العام السابق (Control + left)',\n    nextYear: 'العام التالى (Control + right)',\n    previousDecade: 'العقد السابق',\n    nextDecade: 'العقد التالى',\n    previousCentury: 'القرن السابق',\n    nextCentury: 'القرن التالى',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$2 = {\n    placeholder: 'اختيار الوقت',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$3 = {\n    lang: /*@__PURE__*/ __assign({ placeholder: 'اختيار التاريخ', rangePlaceholder: ['البداية', 'النهاية'] }, CalendarLocale$1),\n    timePickerLocale: /*@__PURE__*/ __assign({}, locale$2),\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Pagination$1 = {\n    // Options.jsx\n    items_per_page: '/ الصفحة',\n    jump_to: 'الذهاب إلى',\n    jump_to_confirm: 'تأكيد',\n    page: '',\n    // Pagination.jsx\n    prev_page: 'الصفحة السابقة',\n    next_page: 'الصفحة التالية',\n    prev_5: 'خمس صفحات سابقة',\n    next_5: 'خمس صفحات تالية',\n    prev_3: 'ثلاث صفحات سابقة',\n    next_3: 'ثلاث صفحات تالية',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ar_EG = {\n    locale: 'ar',\n    Pagination: Pagination$1,\n    DatePicker: locale$3,\n    TimePicker: locale$2,\n    Calendar: CalendarLocale$1,\n    Table: {\n        filterTitle: 'الفلاتر',\n        filterConfirm: 'تأكيد',\n        filterReset: 'إعادة ضبط',\n        emptyText: 'لا توجد بيانات',\n        selectAll: 'اختيار الكل',\n        selectInvert: 'إلغاء الاختيار',\n    },\n    Modal: {\n        okText: 'تأكيد',\n        cancelText: 'إلغاء',\n        justOkText: 'تأكيد',\n    },\n    Popconfirm: {\n        okText: 'تأكيد',\n        cancelText: 'إلغاء',\n    },\n    Transfer: {\n        notFoundContent: 'لا يوجد محتوى',\n        searchPlaceholder: 'ابحث هنا',\n        itemUnit: 'عنصر',\n        itemsUnit: 'عناصر',\n    },\n    Select: {\n        notFoundContent: 'لايوجد محتوى',\n    },\n    Upload: {\n        uploading: 'جاري الرفع...',\n        removeFile: 'احذف الملف',\n        uploadError: 'مشكلة فى الرفع',\n        previewFile: 'استعرض الملف',\n    },\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarLocale$2 = {\n    today: 'Днес',\n    now: 'Сега',\n    backToToday: 'Към днес',\n    ok: 'Добре',\n    clear: 'Изчистване',\n    month: 'Месец',\n    year: 'Година',\n    timeSelect: 'Избор на час',\n    dateSelect: 'Избор на дата',\n    monthSelect: 'Избор на месец',\n    yearSelect: 'Избор на година',\n    decadeSelect: 'Десетилетие',\n    yearFormat: 'YYYY',\n    dateFormat: 'D M YYYY',\n    dayFormat: 'D',\n    dateTimeFormat: 'D M YYYY HH:mm:ss',\n    monthBeforeYear: true,\n    previousMonth: 'Предишен месец (PageUp)',\n    nextMonth: 'Следващ месец (PageDown)',\n    previousYear: 'Последна година (Control + left)',\n    nextYear: 'Следваща година (Control + right)',\n    previousDecade: 'Предишно десетилетие',\n    nextDecade: 'Следващо десетилетие',\n    previousCentury: 'Последен век',\n    nextCentury: 'Следващ век',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$4 = {\n    placeholder: 'Избор на час',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$5 = {\n    lang: /*@__PURE__*/ __assign({ placeholder: 'Избор на дата', rangePlaceholder: ['Начална', 'Крайна'] }, CalendarLocale$2),\n    timePickerLocale: /*@__PURE__*/ __assign({}, locale$4),\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Pagination$2 = {\n    // Options.jsx\n    items_per_page: '/ страница',\n    jump_to: 'Към',\n    jump_to_confirm: 'потвърждавам',\n    page: '',\n    // Pagination.jsx\n    prev_page: 'Предишна страница',\n    next_page: 'Следваща страница',\n    prev_5: 'Предишни 5 страници',\n    next_5: 'Следващи 5 страници',\n    prev_3: 'Предишни 3 страници',\n    next_3: 'Следващи 3 страници',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar bg_BG = {\n    locale: 'bg',\n    Pagination: Pagination$2,\n    DatePicker: locale$5,\n    TimePicker: locale$4,\n    Calendar: CalendarLocale$2,\n    Table: {\n        filterTitle: 'Филтриране',\n        filterConfirm: 'Добре',\n        filterReset: 'Нулриане',\n        emptyText: 'Няма данни',\n        selectAll: 'Избор на текуща страница',\n        selectInvert: 'Обръщане',\n    },\n    Modal: {\n        okText: 'Добре',\n        cancelText: 'Отказ',\n        justOkText: 'Добре',\n    },\n    Popconfirm: {\n        okText: 'Добре',\n        cancelText: 'Отказ',\n    },\n    Transfer: {\n        notFoundContent: 'Няма намерени',\n        searchPlaceholder: 'Търсене',\n        itemUnit: 'избор',\n        itemsUnit: 'избори',\n    },\n    Select: {\n        notFoundContent: 'Няма намерени',\n    },\n    Upload: {\n        uploading: 'Качване...',\n        removeFile: 'Премахване',\n        uploadError: 'Грешка при качването',\n        previewFile: 'Преглед',\n    },\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarLocale$3 = {\n    today: 'Avui',\n    now: 'Ara',\n    backToToday: 'Tornar a avui',\n    ok: 'Acceptar',\n    clear: 'Netejar',\n    month: 'Mes',\n    year: 'Any',\n    timeSelect: 'Seleccionar hora',\n    dateSelect: 'Seleccionar data',\n    monthSelect: 'Escollir un mes',\n    yearSelect: 'Escollir un any',\n    decadeSelect: 'Escollir una dècada',\n    yearFormat: 'YYYY',\n    dateFormat: 'D/M/YYYY',\n    dayFormat: 'D',\n    dateTimeFormat: 'D/M/YYYY HH:mm:ss',\n    monthBeforeYear: true,\n    previousMonth: 'Mes anterior (PageUp)',\n    nextMonth: 'Mes següent (PageDown)',\n    previousYear: 'Any anterior (Control + left)',\n    nextYear: 'Mes següent (Control + right)',\n    previousDecade: 'Dècada anterior',\n    nextDecade: 'Dècada següent',\n    previousCentury: 'Segle anterior',\n    nextCentury: 'Segle següent',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$6 = {\n    placeholder: 'Seleccionar hora',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$7 = {\n    lang: /*@__PURE__*/ __assign({ placeholder: 'Seleccionar data', rangePlaceholder: ['Data inicial', 'Data final'] }, CalendarLocale$3),\n    timePickerLocale: /*@__PURE__*/ __assign({}, locale$6),\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Pagination$3 = {\n    // Options.jsx\n    items_per_page: '/ pàgina',\n    jump_to: 'Anar a',\n    jump_to_confirm: 'Confirma',\n    page: '',\n    // Pagination.jsx\n    prev_page: 'Pàgina prèvia',\n    next_page: 'Pàgina següent',\n    prev_5: '5 pàgines prèvies',\n    next_5: '5 pàgines següents',\n    prev_3: '3 pàgines prèvies',\n    next_3: '3 pàgines següents',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ca_ES = {\n    locale: 'ca',\n    Pagination: Pagination$3,\n    DatePicker: locale$7,\n    TimePicker: locale$6,\n    Calendar: CalendarLocale$3,\n    Table: {\n        filterTitle: 'Filtrar Menu',\n        filterConfirm: 'OK',\n        filterReset: 'Restablir',\n        emptyText: 'Sense dades',\n    },\n    Modal: {\n        okText: 'OK',\n        cancelText: 'Cancel·lar',\n        justOkText: 'OK',\n    },\n    Popconfirm: {\n        okText: 'OK',\n        cancelText: 'Cancel·lar',\n    },\n    Transfer: {\n        notFoundContent: 'No trobat',\n        searchPlaceholder: 'Cercar aquí',\n        itemUnit: 'item',\n        itemsUnit: 'items',\n    },\n    Select: {\n        notFoundContent: 'No trobat',\n    },\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarLocale$4 = {\n    today: 'Dnes',\n    now: 'Nyní',\n    backToToday: 'Zpět na dnešek',\n    ok: 'Ok',\n    clear: 'Vymazat',\n    month: 'Měsíc',\n    year: 'Rok',\n    timeSelect: 'Vybrat čas',\n    dateSelect: 'Vybrat datum',\n    monthSelect: 'Vyberte měsíc',\n    yearSelect: 'Vyberte rok',\n    decadeSelect: 'Vyberte dekádu',\n    yearFormat: 'YYYY',\n    dateFormat: 'D.M.YYYY',\n    dayFormat: 'D',\n    dateTimeFormat: 'D.M.YYYY HH:mm:ss',\n    monthBeforeYear: true,\n    previousMonth: 'Předchozí měsíc (PageUp)',\n    nextMonth: 'Následující (PageDown)',\n    previousYear: 'Předchozí rok (Control + left)',\n    nextYear: 'Následující rok (Control + right)',\n    previousDecade: 'Předchozí dekáda',\n    nextDecade: 'Následující dekáda',\n    previousCentury: 'Předchozí století',\n    nextCentury: 'Následující století',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$8 = {\n    placeholder: 'Vybrat čas',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$9 = {\n    lang: /*@__PURE__*/ __assign({ placeholder: 'Vybrat datum', rangePlaceholder: ['Od', 'Do'] }, CalendarLocale$4),\n    timePickerLocale: /*@__PURE__*/ __assign({}, locale$8),\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Pagination$4 = {\n    // Options.jsx\n    items_per_page: '/ strana',\n    jump_to: 'Přejít',\n    jump_to_confirm: 'potvrdit',\n    page: '',\n    // Pagination.jsx\n    prev_page: 'Předchozí strana',\n    next_page: 'Následující strana',\n    prev_5: 'Předchozích 5 stran',\n    next_5: 'Následujících 5 stran',\n    prev_3: 'Předchozí 3 strany',\n    next_3: 'Následující 3 strany',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar cs_CZ = {\n    locale: 'cs',\n    Pagination: Pagination$4,\n    DatePicker: locale$9,\n    TimePicker: locale$8,\n    Calendar: CalendarLocale$4,\n    Table: {\n        filterTitle: 'Filtr',\n        filterConfirm: 'Potvrdit',\n        filterReset: 'Obnovit',\n        emptyText: 'Žádná data',\n    },\n    Modal: {\n        okText: 'Ok',\n        cancelText: 'Storno',\n        justOkText: 'Ok',\n    },\n    Popconfirm: {\n        okText: 'Ok',\n        cancelText: 'Storno',\n    },\n    Transfer: {\n        notFoundContent: 'Nenalezeno',\n        searchPlaceholder: 'Vyhledávání',\n        itemUnit: 'položka',\n        itemsUnit: 'položek',\n    },\n    Select: {\n        notFoundContent: 'Nenalezeno',\n    },\n    Upload: {\n        uploading: 'Nahrávání...',\n        removeFile: 'Odstranit soubor',\n        uploadError: 'Chyba při nahrávání',\n        previewFile: 'Zobrazit soubor',\n    },\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarLocale$5 = {\n    today: 'Heute',\n    now: 'Jetzt',\n    backToToday: 'Zurück zu Heute',\n    ok: 'OK',\n    clear: 'Zurücksetzen',\n    month: 'Monat',\n    year: 'Jahr',\n    timeSelect: 'Zeit wählen',\n    dateSelect: 'Datum wählen',\n    monthSelect: 'Wähle einen Monat',\n    yearSelect: 'Wähle ein Jahr',\n    decadeSelect: 'Wähle ein Jahrzehnt',\n    yearFormat: 'YYYY',\n    dateFormat: 'D.M.YYYY',\n    dayFormat: 'D',\n    dateTimeFormat: 'D.M.YYYY HH:mm:ss',\n    monthBeforeYear: true,\n    previousMonth: 'Vorheriger Monat (PageUp)',\n    nextMonth: 'Nächster Monat (PageDown)',\n    previousYear: 'Vorheriges Jahr (Ctrl + left)',\n    nextYear: 'Nächstes Jahr (Ctrl + right)',\n    previousDecade: 'Vorheriges Jahrzehnt',\n    nextDecade: 'Nächstes Jahrzehnt',\n    previousCentury: 'Vorheriges Jahrhundert',\n    nextCentury: 'Nächstes Jahrhundert',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$a = {\n    placeholder: 'Zeit auswählen',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$b = {\n    lang: /*@__PURE__*/ __assign({ placeholder: 'Datum auswählen', rangePlaceholder: ['Startdatum', 'Enddatum'] }, CalendarLocale$5),\n    timePickerLocale: /*@__PURE__*/ __assign({}, locale$a),\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Pagination$5 = {\n    // Options.jsx\n    items_per_page: '/ Seite',\n    jump_to: 'Gehe zu',\n    jump_to_confirm: 'bestätigen',\n    page: '',\n    // Pagination.jsx\n    prev_page: 'Vorherige Seite',\n    next_page: 'Nächste Seite',\n    prev_5: '5 Seiten zurück',\n    next_5: '5 Seiten vor',\n    prev_3: '3 Seiten zurück',\n    next_3: '3 Seiten vor',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar de_DE = {\n    locale: 'de',\n    Pagination: Pagination$5,\n    DatePicker: locale$b,\n    TimePicker: locale$a,\n    Calendar: CalendarLocale$5,\n    Table: {\n        filterTitle: 'Filter-Menü',\n        filterConfirm: 'OK',\n        filterReset: 'Zurücksetzen',\n        emptyText: 'Keine Daten',\n        selectAll: 'Selektiere Alle',\n        selectInvert: 'Selektion Invertieren',\n    },\n    Modal: {\n        okText: 'OK',\n        cancelText: 'Abbrechen',\n        justOkText: 'OK',\n    },\n    Popconfirm: {\n        okText: 'OK',\n        cancelText: 'Abbrechen',\n    },\n    Transfer: {\n        notFoundContent: 'Nicht gefunden',\n        searchPlaceholder: 'Suchen',\n        itemUnit: 'Eintrag',\n        itemsUnit: 'Einträge',\n    },\n    Select: {\n        notFoundContent: 'Nicht gefunden',\n    },\n    Upload: {\n        uploading: 'Hochladen...',\n        removeFile: 'Datei entfernen',\n        uploadError: 'Fehler beim Hochladen',\n        previewFile: 'Dateivorschau',\n    },\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarLocale$6 = {\n    today: 'Σήμερα',\n    now: 'Τώρα',\n    backToToday: 'Πίσω στη σημερινή μέρα',\n    ok: 'Ok',\n    clear: 'Καθαρισμός',\n    month: 'Μήνας',\n    year: 'Έτος',\n    timeSelect: 'Επιλογή ώρας',\n    dateSelect: 'Επιλογή ημερομηνίας',\n    monthSelect: 'Επιλογή μήνα',\n    yearSelect: 'Επιλογή έτους',\n    decadeSelect: 'Επιλογή δεκαετίας',\n    yearFormat: 'YYYY',\n    dateFormat: 'D/M/YYYY',\n    dayFormat: 'D',\n    dateTimeFormat: 'D/M/YYYY HH:mm:ss',\n    monthBeforeYear: true,\n    previousMonth: 'Προηγούμενος μήνας (PageUp)',\n    nextMonth: 'Επόμενος μήνας (PageDown)',\n    previousYear: 'Προηγούμενο έτος (Control + αριστερά)',\n    nextYear: 'Επόμενο έτος (Control + δεξιά)',\n    previousDecade: 'Προηγούμενη δεκαετία',\n    nextDecade: 'Επόμενη δεκαετία',\n    previousCentury: 'Προηγούμενος αιώνας',\n    nextCentury: 'Επόμενος αιώνας',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$c = {\n    placeholder: 'Επιλέξτε ώρα',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$d = {\n    lang: /*@__PURE__*/ __assign({ placeholder: 'Επιλέξτε ημερομηνία', rangePlaceholder: ['Αρχική ημερομηνία', 'Τελική ημερομηνία'] }, CalendarLocale$6),\n    timePickerLocale: /*@__PURE__*/ __assign({}, locale$c),\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Pagination$6 = {\n    // Options.jsx\n    items_per_page: '/ σελίδα',\n    jump_to: 'Μετάβαση',\n    jump_to_confirm: 'επιβεβαιώνω',\n    page: '',\n    // Pagination.jsx\n    prev_page: 'Προηγούμενη Σελίδα',\n    next_page: 'Επόμενη Σελίδα',\n    prev_5: 'Προηγούμενες 5 Σελίδες',\n    next_5: 'Επόμενες 5 σελίδες',\n    prev_3: 'Προηγούμενες 3 Σελίδες',\n    next_3: 'Επόμενες 3 Σελίδες',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar el_GR = {\n    locale: 'el',\n    Pagination: Pagination$6,\n    DatePicker: locale$d,\n    TimePicker: locale$c,\n    Calendar: CalendarLocale$6,\n    Table: {\n        filterTitle: 'Μενού φίλτρων',\n        filterConfirm: 'ΟΚ',\n        filterReset: 'Επαναφορά',\n        emptyText: 'Δεν υπάρχουν δεδομένα',\n        selectAll: 'Επιλογή τρέχουσας σελίδας',\n        selectInvert: 'Αντιστροφή τρέχουσας σελίδας',\n    },\n    Modal: {\n        okText: 'ΟΚ',\n        cancelText: 'Άκυρο',\n        justOkText: 'ΟΚ',\n    },\n    Popconfirm: {\n        okText: 'ΟΚ',\n        cancelText: 'Άκυρο',\n    },\n    Transfer: {\n        notFoundContent: 'Δεν βρέθηκε',\n        searchPlaceholder: 'Αναζήτηση',\n        itemUnit: 'αντικείμενο',\n        itemsUnit: 'αντικείμενα',\n    },\n    Select: {\n        notFoundContent: 'Δεν βρέθηκε',\n    },\n    Upload: {\n        uploading: 'Μεταφόρτωση...',\n        removeFile: 'Αφαίρεση αρχείου',\n        uploadError: 'Σφάλμα μεταφόρτωσης',\n        previewFile: 'Προεπισκόπηση αρχείου',\n    },\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarLocale$7 = {\n    today: 'Today',\n    now: 'Now',\n    backToToday: 'Back to today',\n    ok: 'Ok',\n    clear: 'Clear',\n    month: 'Month',\n    year: 'Year',\n    timeSelect: 'Select time',\n    dateSelect: 'Select date',\n    monthSelect: 'Choose a month',\n    yearSelect: 'Choose a year',\n    decadeSelect: 'Choose a decade',\n    yearFormat: 'YYYY',\n    dateFormat: 'D/M/YYYY',\n    dayFormat: 'D',\n    dateTimeFormat: 'D/M/YYYY HH:mm:ss',\n    monthBeforeYear: true,\n    previousMonth: 'Previous month (PageUp)',\n    nextMonth: 'Next month (PageDown)',\n    previousYear: 'Last year (Control + left)',\n    nextYear: 'Next year (Control + right)',\n    previousDecade: 'Last decade',\n    nextDecade: 'Next decade',\n    previousCentury: 'Last century',\n    nextCentury: 'Next century',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$e = {\n    placeholder: 'Select time',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$f = {\n    lang: /*@__PURE__*/ __assign({ placeholder: 'Select date', rangePlaceholder: ['Start date', 'End date'] }, CalendarLocale$7),\n    timePickerLocale: /*@__PURE__*/ __assign({}, locale$e),\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Pagination$7 = {\n    // Options.jsx\n    items_per_page: '/ page',\n    jump_to: 'Goto',\n    jump_to_confirm: 'confirm',\n    page: '',\n    // Pagination.jsx\n    prev_page: 'Previous Page',\n    next_page: 'Next Page',\n    prev_5: 'Previous 5 Pages',\n    next_5: 'Next 5 Pages',\n    prev_3: 'Previous 3 Pages',\n    next_3: 'Next 3 Pages',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar en_GB = {\n    locale: 'en-gb',\n    Pagination: Pagination$7,\n    DatePicker: locale$f,\n    TimePicker: locale$e,\n    Calendar: CalendarLocale$7,\n    Table: {\n        filterTitle: 'Filter menu',\n        filterConfirm: 'OK',\n        filterReset: 'Reset',\n        emptyText: 'No data',\n        selectAll: 'Select current page',\n        selectInvert: 'Invert current page',\n    },\n    Modal: {\n        okText: 'OK',\n        cancelText: 'Cancel',\n        justOkText: 'OK',\n    },\n    Popconfirm: {\n        okText: 'OK',\n        cancelText: 'Cancel',\n    },\n    Transfer: {\n        notFoundContent: 'Not Found',\n        searchPlaceholder: 'Search here',\n        itemUnit: 'item',\n        itemsUnit: 'items',\n    },\n    Select: {\n        notFoundContent: 'Not Found',\n    },\n    Upload: {\n        uploading: 'Uploading...',\n        removeFile: 'Remove file',\n        uploadError: 'Upload error',\n        previewFile: 'Preview file',\n    },\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarLocale$8 = {\n    today: 'Today',\n    now: 'Now',\n    backToToday: 'Back to today',\n    ok: 'Ok',\n    clear: 'Clear',\n    month: 'Month',\n    year: 'Year',\n    timeSelect: 'Select time',\n    dateSelect: 'Select date',\n    monthSelect: 'Choose a month',\n    yearSelect: 'Choose a year',\n    decadeSelect: 'Choose a decade',\n    yearFormat: 'YYYY',\n    dateFormat: 'M/D/YYYY',\n    dayFormat: 'D',\n    dateTimeFormat: 'M/D/YYYY HH:mm:ss',\n    monthBeforeYear: true,\n    previousMonth: 'Previous month (PageUp)',\n    nextMonth: 'Next month (PageDown)',\n    previousYear: 'Last year (Control + left)',\n    nextYear: 'Next year (Control + right)',\n    previousDecade: 'Last decade',\n    nextDecade: 'Next decade',\n    previousCentury: 'Last century',\n    nextCentury: 'Next century',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$g = {\n    placeholder: 'Select time',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$h = {\n    lang: /*@__PURE__*/ __assign({ placeholder: 'Select date', rangePlaceholder: ['Start date', 'End date'] }, CalendarLocale$8),\n    timePickerLocale: /*@__PURE__*/ __assign({}, locale$g),\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Pagination$8 = {\n    // Options.jsx\n    items_per_page: '/ page',\n    jump_to: 'Goto',\n    jump_to_confirm: 'confirm',\n    page: '',\n    // Pagination.jsx\n    prev_page: 'Previous Page',\n    next_page: 'Next Page',\n    prev_5: 'Previous 5 Pages',\n    next_5: 'Next 5 Pages',\n    prev_3: 'Previous 3 Pages',\n    next_3: 'Next 3 Pages',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar en_US = {\n    locale: 'en',\n    Pagination: Pagination$8,\n    DatePicker: locale$h,\n    TimePicker: locale$g,\n    Calendar: CalendarLocale$8,\n    Table: {\n        filterTitle: 'Filter menu',\n        filterConfirm: 'OK',\n        filterReset: 'Reset',\n        emptyText: 'No data',\n        selectAll: 'Select current page',\n        selectInvert: 'Invert current page',\n    },\n    Modal: {\n        okText: 'OK',\n        cancelText: 'Cancel',\n        justOkText: 'OK',\n    },\n    Popconfirm: {\n        okText: 'OK',\n        cancelText: 'Cancel',\n    },\n    Transfer: {\n        titles: ['', ''],\n        notFoundContent: 'Not Found',\n        searchPlaceholder: 'Search here',\n        itemUnit: 'item',\n        itemsUnit: 'items',\n    },\n    Select: {\n        notFoundContent: 'Not Found',\n    },\n    Upload: {\n        uploading: 'Uploading...',\n        removeFile: 'Remove file',\n        uploadError: 'Upload error',\n        previewFile: 'Preview file',\n    },\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarLocale$9 = {\n    today: 'Hoy',\n    now: 'Ahora',\n    backToToday: 'Volver a hoy',\n    ok: 'Aceptar',\n    clear: 'Limpiar',\n    month: 'Mes',\n    year: 'Año',\n    timeSelect: 'Seleccionar hora',\n    dateSelect: 'Seleccionar fecha',\n    monthSelect: 'Elegir un mes',\n    yearSelect: 'Elegir un año',\n    decadeSelect: 'Elegir una década',\n    yearFormat: 'YYYY',\n    dateFormat: 'D/M/YYYY',\n    dayFormat: 'D',\n    dateTimeFormat: 'D/M/YYYY HH:mm:ss',\n    monthBeforeYear: true,\n    previousMonth: 'Mes anterior (PageUp)',\n    nextMonth: 'Mes siguiente (PageDown)',\n    previousYear: 'Año anterior (Control + left)',\n    nextYear: 'Año siguiente (Control + right)',\n    previousDecade: 'Década anterior',\n    nextDecade: 'Década siguiente',\n    previousCentury: 'Siglo anterior',\n    nextCentury: 'Siglo siguiente',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$i = {\n    placeholder: 'Seleccionar hora',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$j = {\n    lang: /*@__PURE__*/ __assign({ placeholder: 'Seleccionar fecha', rangePlaceholder: ['Fecha inicial', 'Fecha final'] }, CalendarLocale$9),\n    timePickerLocale: /*@__PURE__*/ __assign({}, locale$i),\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Pagination$9 = {\n    // Options.jsx\n    items_per_page: '/ página',\n    jump_to: 'Ir a',\n    jump_to_confirm: 'confirmar',\n    page: '',\n    // Pagination.jsx\n    prev_page: 'Página anterior',\n    next_page: 'Página siguiente',\n    prev_5: '5 páginas previas',\n    next_5: '5 páginas siguientes',\n    prev_3: '3 páginas previas',\n    next_3: '3 páginas siguientes',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar es_ES = {\n    locale: 'es',\n    Pagination: Pagination$9,\n    DatePicker: locale$j,\n    TimePicker: locale$i,\n    Calendar: CalendarLocale$9,\n    Table: {\n        filterTitle: 'Filtrar menú',\n        filterConfirm: 'Aceptar',\n        filterReset: 'Reiniciar',\n        emptyText: 'No hay datos',\n        selectAll: 'Seleccionar todo',\n        selectInvert: 'Invertir selección',\n    },\n    Modal: {\n        okText: 'Aceptar',\n        cancelText: 'Cancelar',\n        justOkText: 'Aceptar',\n    },\n    Popconfirm: {\n        okText: 'Aceptar',\n        cancelText: 'Cancelar',\n    },\n    Transfer: {\n        notFoundContent: 'No encontrado',\n        searchPlaceholder: 'Buscar aquí',\n        itemUnit: 'elemento',\n        itemsUnit: 'elementos',\n    },\n    Select: {\n        notFoundContent: 'No encontrado',\n    },\n    Upload: {\n        uploading: 'Subiendo...',\n        removeFile: 'Eliminar archivo',\n        uploadError: 'Error al subir el archivo',\n        previewFile: 'Vista previa',\n    },\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarLocale$a = {\n    today: 'Täna',\n    now: 'Praegu',\n    backToToday: 'Tagasi tänase juurde',\n    ok: 'Ok',\n    clear: 'Tühista',\n    month: 'Kuu',\n    year: 'Aasta',\n    timeSelect: 'Vali aeg',\n    dateSelect: 'Vali kuupäev',\n    monthSelect: 'Vali kuu',\n    yearSelect: 'Vali aasta',\n    decadeSelect: 'Vali dekaad',\n    yearFormat: 'YYYY',\n    dateFormat: 'D.M.YYYY',\n    dayFormat: 'D',\n    dateTimeFormat: 'D.M.YYYY HH:mm:ss',\n    monthBeforeYear: true,\n    previousMonth: 'Eelmine kuu (PageUp)',\n    nextMonth: 'Järgmine kuu (PageDown)',\n    previousYear: 'Eelmine aasta (Control + left)',\n    nextYear: 'Järgmine aasta (Control + right)',\n    previousDecade: 'Eelmine dekaad',\n    nextDecade: 'Järgmine dekaad',\n    previousCentury: 'Eelmine sajand',\n    nextCentury: 'Järgmine sajand',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$k = {\n    placeholder: 'Vali aeg',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$l = {\n    lang: /*@__PURE__*/ __assign({ placeholder: 'Vali kuupäev', rangePlaceholder: ['Algus kuupäev', 'Lõpu kuupäev'] }, CalendarLocale$a),\n    timePickerLocale: /*@__PURE__*/ __assign({}, locale$k),\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Pagination$a = {\n    // Options.jsx\n    items_per_page: '/ leheküljel',\n    jump_to: 'Hüppa',\n    jump_to_confirm: 'Kinnitage',\n    page: '',\n    // Pagination.jsx\n    prev_page: 'Eelmine leht',\n    next_page: 'Järgmine leht',\n    prev_5: 'Eelmised 5 lehekülge',\n    next_5: 'Järgmised 5 lehekülge',\n    prev_3: 'Eelmised 3 lehekülge',\n    next_3: 'Järgmised 3 lehekülge',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar et_EE = {\n    locale: 'et',\n    Pagination: Pagination$a,\n    DatePicker: locale$l,\n    TimePicker: locale$k,\n    Calendar: CalendarLocale$a,\n    Table: {\n        filterTitle: 'Filtri menüü',\n        filterConfirm: 'OK',\n        filterReset: 'Nulli',\n        emptyText: 'Andmed puuduvad',\n        selectAll: 'Vali kõik',\n        selectInvert: 'Inverteeri valik',\n    },\n    Modal: {\n        okText: 'OK',\n        cancelText: 'Tühista',\n        justOkText: 'OK',\n    },\n    Popconfirm: {\n        okText: 'OK',\n        cancelText: 'Tühista',\n    },\n    Transfer: {\n        notFoundContent: 'Ei leitud',\n        searchPlaceholder: 'Otsi siit',\n        itemUnit: 'kogus',\n        itemsUnit: 'kogus',\n    },\n    Select: {\n        notFoundContent: 'Ei leitud',\n    },\n    Upload: {\n        uploading: 'Üleslaadimine...',\n        removeFile: 'Eemalda fail',\n        uploadError: 'Üleslaadimise tõrge',\n        previewFile: 'Faili eelvaade',\n    },\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarLocale$b = {\n    today: 'امروز',\n    now: 'اکنون',\n    backToToday: 'بازگشت به روز',\n    ok: 'باشه',\n    clear: 'پاک کردن',\n    month: 'ماه',\n    year: 'سال',\n    timeSelect: 'انتخاب زمان',\n    dateSelect: 'انتخاب تاریخ',\n    monthSelect: 'یک ماه را انتخاب کنید',\n    yearSelect: 'یک سال را انتخاب کنید',\n    decadeSelect: 'یک دهه را انتخاب کنید',\n    yearFormat: 'YYYY',\n    dateFormat: 'M/D/YYYY',\n    dayFormat: 'D',\n    dateTimeFormat: 'M/D/YYYY HH:mm:ss',\n    monthBeforeYear: true,\n    previousMonth: 'ماه قبل (PageUp)',\n    nextMonth: 'ماه بعد (PageDown)',\n    previousYear: 'سال قبل (Control + left)',\n    nextYear: 'سال بعد (Control + right)',\n    previousDecade: 'دهه قبل',\n    nextDecade: 'دهه بعد',\n    previousCentury: 'قرن قبل',\n    nextCentury: 'قرن بعد',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$m = {\n    placeholder: 'انتخاب زمان',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$n = {\n    lang: /*@__PURE__*/ __assign({ placeholder: 'انتخاب تاریخ', rangePlaceholder: ['تاریخ شروع', 'تاریخ پایان'] }, CalendarLocale$b),\n    timePickerLocale: /*@__PURE__*/ __assign({}, locale$m),\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Pagination$b = {\n    // Options.jsx\n    items_per_page: '/ صفحه',\n    jump_to: 'برو به',\n    jump_to_confirm: 'تایید',\n    page: '',\n    // Pagination.jsx\n    prev_page: 'صفحه قبلی',\n    next_page: 'صفحه بعدی',\n    prev_5: '۵ صفحه قبلی',\n    next_5: '۵ صفحه بعدی',\n    prev_3: '۳ صفحه قبلی',\n    next_3: '۳ صفحه بعدی',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar fa_IR = {\n    locale: 'fa',\n    Pagination: Pagination$b,\n    DatePicker: locale$n,\n    TimePicker: locale$m,\n    Calendar: CalendarLocale$b,\n    Table: {\n        filterTitle: 'منوی فیلتر',\n        filterConfirm: 'تایید',\n        filterReset: 'پاک کردن',\n        emptyText: 'داده‌ای موجود نیست',\n        selectAll: 'انتخاب صفحه‌ی کنونی',\n        selectInvert: 'معکوس کردن انتخاب‌ها در صفحه ی کنونی',\n    },\n    Modal: {\n        okText: 'تایید',\n        cancelText: 'لغو',\n        justOkText: 'تایید',\n    },\n    Popconfirm: {\n        okText: 'تایید',\n        cancelText: 'لغو',\n    },\n    Transfer: {\n        notFoundContent: 'داده‌ای موجود نیست',\n        searchPlaceholder: 'جستجو',\n        itemUnit: '',\n        itemsUnit: '',\n    },\n    Select: {\n        notFoundContent: 'داده‌ای موجود نیست',\n    },\n    Upload: {\n        uploading: 'در حال آپلود...',\n        removeFile: 'حذف فایل',\n        uploadError: 'خطا در آپلود',\n        previewFile: 'مشاهده‌ی فایل',\n    },\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarLocale$c = {\n    today: 'Tänään',\n    now: 'Nyt',\n    backToToday: 'Tämä päivä',\n    ok: 'Ok',\n    clear: 'Tyhjennä',\n    month: 'Kuukausi',\n    year: 'Vuosi',\n    timeSelect: 'Valise aika',\n    dateSelect: 'Valitse päivä',\n    monthSelect: 'Valitse kuukausi',\n    yearSelect: 'Valitse vuosi',\n    decadeSelect: 'Valitse vuosikymmen',\n    yearFormat: 'YYYY',\n    dateFormat: 'D.M.YYYY',\n    dayFormat: 'D',\n    dateTimeFormat: 'D.M.YYYY HH:mm:ss',\n    monthBeforeYear: true,\n    previousMonth: 'Edellinen kuukausi (PageUp)',\n    nextMonth: 'Seuraava kuukausi (PageDown)',\n    previousYear: 'Edellinen vuosi (Control + left)',\n    nextYear: 'Seuraava vuosi (Control + right)',\n    previousDecade: 'Edellinen vuosikymmen',\n    nextDecade: 'Seuraava vuosikymmen',\n    previousCentury: 'Edellinen vuosisata',\n    nextCentury: 'Seuraava vuosisata',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$o = {\n    placeholder: 'Valitse aika',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$p = {\n    lang: /*@__PURE__*/ __assign({ placeholder: 'Valitse päivä', rangePlaceholder: ['Alku päivä', 'Loppu päivä'] }, CalendarLocale$c),\n    timePickerLocale: /*@__PURE__*/ __assign({}, locale$o),\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Pagination$c = {\n    // Options.jsx\n    items_per_page: '/ sivu',\n    jump_to: 'Mene',\n    jump_to_confirm: 'Potvrdite',\n    page: '',\n    // Pagination.jsx\n    prev_page: 'Edellinen sivu',\n    next_page: 'Seuraava sivu',\n    prev_5: 'Edelliset 5 sivua',\n    next_5: 'Seuraavat 5 sivua',\n    prev_3: 'Edelliset 3 sivua',\n    next_3: 'Seuraavat 3 sivua',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar fi_FI = {\n    locale: 'fi',\n    Pagination: Pagination$c,\n    DatePicker: locale$p,\n    TimePicker: locale$o,\n    Calendar: CalendarLocale$c,\n    Table: {\n        filterTitle: 'Suodatus valikko',\n        filterConfirm: 'OK',\n        filterReset: 'Tyhjennä',\n        emptyText: 'Ei kohteita',\n        selectAll: 'Valitse kaikki',\n        selectInvert: 'Valitse päinvastoin',\n    },\n    Modal: {\n        okText: 'OK',\n        cancelText: 'Peruuta',\n        justOkText: 'OK',\n    },\n    Popconfirm: {\n        okText: 'OK',\n        cancelText: 'Peruuta',\n    },\n    Transfer: {\n        notFoundContent: 'Ei löytynyt',\n        searchPlaceholder: 'Etsi täältä',\n        itemUnit: 'kohde',\n        itemsUnit: 'kohdetta',\n    },\n    Select: {\n        notFoundContent: 'Ei löytynyt',\n    },\n    Upload: {\n        uploading: 'Lähetetään...',\n        removeFile: 'Poista tiedosto',\n        uploadError: 'Virhe lähetyksessä',\n        previewFile: 'Esikatsele tiedostoa',\n    },\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarLocale$d = {\n    today: 'Aujourd\\'hui',\n    now: 'Maintenant',\n    backToToday: 'Aujourd\\'hui',\n    ok: 'Ok',\n    clear: 'Rétablir',\n    month: 'Mois',\n    year: 'Année',\n    timeSelect: 'Sélectionner l\\'heure',\n    dateSelect: 'Sélectionner l\\'heure',\n    monthSelect: 'Choisissez un mois',\n    yearSelect: 'Choisissez une année',\n    decadeSelect: 'Choisissez une décennie',\n    yearFormat: 'YYYY',\n    dateFormat: 'D/M/YYYY',\n    dayFormat: 'D',\n    dateTimeFormat: 'D/M/YYYY HH:mm:ss',\n    monthBeforeYear: true,\n    previousMonth: 'Mois précédent (PageUp)',\n    nextMonth: 'Mois suivant (PageDown)',\n    previousYear: 'Année précédente (Ctrl + gauche)',\n    nextYear: 'Année prochaine (Ctrl + droite)',\n    previousDecade: 'Décennie précédente',\n    nextDecade: 'Décennie suivante',\n    previousCentury: 'Siècle précédent',\n    nextCentury: 'Siècle suivant',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$q = {\n    placeholder: 'Sélectionner l\\'heure',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$r = {\n    lang: /*@__PURE__*/ __assign({ placeholder: 'Sélectionner une date', rangePlaceholder: ['Date de début', 'Date de fin'] }, CalendarLocale$d),\n    timePickerLocale: /*@__PURE__*/ __assign({}, locale$q),\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Pagination$d = {\n    // Options.jsx\n    items_per_page: '/ page',\n    jump_to: 'Aller à',\n    jump_to_confirm: 'confirmer',\n    page: '',\n    // Pagination.jsx\n    prev_page: 'Page précédente',\n    next_page: 'Page suivante',\n    prev_5: '5 Pages précédentes',\n    next_5: '5 Pages suivantes',\n    prev_3: '3 Pages précédentes',\n    next_3: '3 Pages suivantes',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar fr_BE = {\n    locale: 'fr',\n    Pagination: Pagination$d,\n    DatePicker: locale$r,\n    TimePicker: locale$q,\n    Calendar: CalendarLocale$d,\n    Table: {\n        filterTitle: 'Filtrer',\n        filterConfirm: 'OK',\n        filterReset: 'Réinitialiser',\n        emptyText: 'Aucune donnée',\n    },\n    Modal: {\n        okText: 'OK',\n        cancelText: 'Annuler',\n        justOkText: 'OK',\n    },\n    Popconfirm: {\n        okText: 'OK',\n        cancelText: 'Annuler',\n    },\n    Transfer: {\n        notFoundContent: 'Pas de résultat',\n        searchPlaceholder: 'Recherche',\n        itemUnit: 'élément',\n        itemsUnit: 'éléments',\n    },\n    Select: {\n        notFoundContent: 'Pas de résultat',\n    },\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarLocale$e = {\n    today: 'Aujourd\\'hui',\n    now: 'Maintenant',\n    backToToday: 'Aujourd\\'hui',\n    ok: 'Ok',\n    clear: 'Rétablir',\n    month: 'Mois',\n    year: 'Année',\n    timeSelect: 'Sélectionner l\\'heure',\n    dateSelect: 'Sélectionner l\\'heure',\n    monthSelect: 'Choisissez un mois',\n    yearSelect: 'Choisissez une année',\n    decadeSelect: 'Choisissez une décennie',\n    yearFormat: 'YYYY',\n    dateFormat: 'DD/MM/YYYY',\n    dayFormat: 'DD',\n    dateTimeFormat: 'DD/MM/YYYY HH:mm:ss',\n    monthBeforeYear: true,\n    previousMonth: 'Mois précédent (PageUp)',\n    nextMonth: 'Mois suivant (PageDown)',\n    previousYear: 'Année précédente (Ctrl + gauche)',\n    nextYear: 'Année prochaine (Ctrl + droite)',\n    previousDecade: 'Décennie précédente',\n    nextDecade: 'Décennie suivante',\n    previousCentury: 'Siècle précédent',\n    nextCentury: 'Siècle suivant',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$s = {\n    placeholder: 'Sélectionner l\\'heure',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$t = {\n    lang: /*@__PURE__*/ __assign({ placeholder: 'Sélectionner une date', rangePlaceholder: ['Date de début', 'Date de fin'] }, CalendarLocale$e),\n    timePickerLocale: /*@__PURE__*/ __assign({}, locale$s),\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Pagination$e = {\n    // Options.jsx\n    items_per_page: '/ page',\n    jump_to: 'Aller à',\n    jump_to_confirm: 'confirmer',\n    page: '',\n    // Pagination.jsx\n    prev_page: 'Page précédente',\n    next_page: 'Page suivante',\n    prev_5: '5 Pages précédentes',\n    next_5: '5 Pages suivantes',\n    prev_3: '3 Pages précédentes',\n    next_3: '3 Pages suivantes',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar fr_FR = {\n    locale: 'fr',\n    Pagination: Pagination$e,\n    DatePicker: locale$t,\n    TimePicker: locale$s,\n    Calendar: CalendarLocale$e,\n    Table: {\n        filterTitle: 'Filtrer',\n        filterConfirm: 'OK',\n        filterReset: 'Réinitialiser',\n        emptyText: 'Aucune donnée',\n    },\n    Modal: {\n        okText: 'OK',\n        cancelText: 'Annuler',\n        justOkText: 'OK',\n    },\n    Popconfirm: {\n        okText: 'OK',\n        cancelText: 'Annuler',\n    },\n    Transfer: {\n        notFoundContent: 'Pas de résultat',\n        searchPlaceholder: 'Recherche',\n        itemUnit: 'élément',\n        itemsUnit: 'éléments',\n    },\n    Select: {\n        notFoundContent: 'Pas de résultat',\n    },\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarLocale$f = {\n    today: 'Í dag',\n    now: 'Núna',\n    backToToday: 'Til baka til dagsins í dag',\n    ok: 'Í lagi',\n    clear: 'Hreinsa',\n    month: 'Mánuður',\n    year: 'Ár',\n    timeSelect: 'Velja tíma',\n    dateSelect: 'Velja dag',\n    monthSelect: 'Velja mánuð',\n    yearSelect: 'Velja ár',\n    decadeSelect: 'Velja áratug',\n    yearFormat: 'YYYY',\n    dateFormat: 'D/M/YYYY',\n    dayFormat: 'D',\n    dateTimeFormat: 'D/M/YYYY HH:mm:ss',\n    monthBeforeYear: true,\n    previousMonth: 'Fyrri mánuður (PageUp)',\n    nextMonth: 'Næsti mánuður (PageDown)',\n    previousYear: 'Fyrra ár (Control + left)',\n    nextYear: 'Næsta ár (Control + right)',\n    previousDecade: 'Fyrri áratugur',\n    nextDecade: 'Næsti áratugur',\n    previousCentury: 'Fyrri öld',\n    nextCentury: 'Næsta öld',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$u = {\n    placeholder: 'Velja tíma',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$v = {\n    lang: /*@__PURE__*/ __assign({ placeholder: 'Veldu dag', rangePlaceholder: ['Upphafsdagur', 'Lokadagur'] }, CalendarLocale$f),\n    timePickerLocale: /*@__PURE__*/ __assign({}, locale$u),\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Pagination$f = {\n    // Options.jsx\n    items_per_page: '/ síðu',\n    jump_to: 'Síða',\n    jump_to_confirm: 'staðfest',\n    page: '',\n    // Pagination.jsx\n    prev_page: 'Fyrri síða',\n    next_page: 'Næsta síða',\n    prev_5: 'Til baka 5 síður',\n    next_5: 'Áfram 5 síður',\n    prev_3: 'Til baka 3 síður',\n    next_3: 'Áfram 3 síður',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar is_IS = {\n    locale: 'is',\n    Pagination: Pagination$f,\n    DatePicker: locale$v,\n    TimePicker: locale$u,\n    Calendar: CalendarLocale$f,\n    Table: {\n        filterTitle: 'Afmarkanir',\n        filterConfirm: 'Staðfesta',\n        filterReset: 'Núllstilla',\n        emptyText: 'Engin gögn',\n        selectAll: 'Velja allt',\n        selectInvert: 'Viðsnúa vali',\n    },\n    Modal: {\n        okText: 'Áfram',\n        cancelText: 'Hætta við',\n        justOkText: 'Í lagi',\n    },\n    Popconfirm: {\n        okText: 'Áfram',\n        cancelText: 'Hætta við',\n    },\n    Transfer: {\n        notFoundContent: 'Engar færslur',\n        searchPlaceholder: 'Leita hér',\n        itemUnit: 'færsla',\n        itemsUnit: 'færslur',\n    },\n    Select: {\n        notFoundContent: 'Ekkert finnst',\n    },\n    Upload: {\n        uploading: 'Hleð upp...',\n        removeFile: 'Fjarlægja skrá',\n        uploadError: 'Villa við að hlaða upp',\n        previewFile: 'Forskoða skrá',\n    },\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarLocale$g = {\n    today: 'Oggi',\n    now: 'adesso',\n    backToToday: 'Torna ad oggi',\n    ok: 'Ok',\n    clear: 'Chiaro',\n    month: 'Mese',\n    year: 'Anno',\n    timeSelect: 'Seleziona il tempo',\n    dateSelect: 'Select date',\n    monthSelect: 'Seleziona la data',\n    yearSelect: 'Scegli un anno',\n    decadeSelect: 'Scegli un decennio',\n    yearFormat: 'YYYY',\n    dateFormat: 'D/M/YYYY',\n    dayFormat: 'D',\n    dateTimeFormat: 'D/M/YYYY HH:mm:ss',\n    monthBeforeYear: true,\n    previousMonth: 'Il mese scorso (PageUp)',\n    nextMonth: 'Il prossimo mese (PageDown)',\n    previousYear: 'L\\'anno scorso (Control + sinistra)',\n    nextYear: 'L\\'anno prossimo (Control + destra)',\n    previousDecade: 'Ultimo decennio',\n    nextDecade: 'Prossimo decennio',\n    previousCentury: 'Secolo precedente',\n    nextCentury: 'Prossimo secolo',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$w = {\n    placeholder: 'Selezionare il tempo',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$x = {\n    lang: /*@__PURE__*/ __assign({ placeholder: 'Selezionare la data', rangePlaceholder: ['Data d\\'inizio', 'Data di fine'] }, CalendarLocale$g),\n    timePickerLocale: /*@__PURE__*/ __assign({}, locale$w),\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Pagination$g = {\n    // Options.jsx\n    items_per_page: '/ pagina',\n    jump_to: 'vai a',\n    jump_to_confirm: 'Conferma',\n    page: '',\n    // Pagination.jsx\n    prev_page: 'Pagina precedente',\n    next_page: 'Pagina successiva',\n    prev_5: 'Precedente 5 pagine',\n    next_5: 'Prossime 5 pagine',\n    prev_3: 'Precedente 3 pagine',\n    next_3: 'Prossime 3 pagine',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar it_IT = {\n    locale: 'it',\n    Pagination: Pagination$g,\n    DatePicker: locale$x,\n    TimePicker: locale$w,\n    Calendar: CalendarLocale$g,\n    Table: {\n        filterTitle: 'Menu Filtro',\n        filterConfirm: 'OK',\n        filterReset: 'Reset',\n        emptyText: 'Nessun dato',\n        selectAll: 'Seleziona pagina corrente',\n        selectInvert: 'Selezionare Inverti',\n    },\n    Modal: {\n        okText: 'OK',\n        cancelText: 'Annulla',\n        justOkText: 'OK',\n    },\n    Popconfirm: {\n        okText: 'OK',\n        cancelText: 'Annulla',\n    },\n    Transfer: {\n        notFoundContent: 'Non trovato',\n        searchPlaceholder: 'Cerca qui',\n        itemUnit: 'articolo',\n        itemsUnit: 'elementi',\n    },\n    Select: {\n        notFoundContent: 'Non trovato',\n    },\n    Upload: {\n        uploading: 'Caricamento...',\n        removeFile: 'Rimuovi il file',\n        uploadError: 'Errore di caricamento',\n        previewFile: 'Anteprima file',\n    },\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarLocale$h = {\n    today: '今日',\n    now: '現在時刻',\n    backToToday: '今日に戻る',\n    ok: '決定',\n    timeSelect: '時間を選択',\n    dateSelect: '日時を選択',\n    clear: 'クリア',\n    month: '月',\n    year: '年',\n    previousMonth: '前月 (ページアップキー)',\n    nextMonth: '翌月 (ページダウンキー)',\n    monthSelect: '月を選択',\n    yearSelect: '年を選択',\n    decadeSelect: '年代を選択',\n    yearFormat: 'YYYY年',\n    dayFormat: 'D日',\n    dateFormat: 'YYYY年M月D日',\n    dateTimeFormat: 'YYYY年M月D日 HH時mm分ss秒',\n    previousYear: '前年 (Controlを押しながら左キー)',\n    nextYear: '翌年 (Controlを押しながら右キー)',\n    previousDecade: '前の年代',\n    nextDecade: '次の年代',\n    previousCentury: '前の世紀',\n    nextCentury: '次の世紀',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$y = {\n    placeholder: '時刻を選択',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$z = {\n    lang: /*@__PURE__*/ __assign({ placeholder: '日付を選択', rangePlaceholder: ['開始日付', '終了日付'] }, CalendarLocale$h),\n    timePickerLocale: /*@__PURE__*/ __assign({}, locale$y),\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Pagination$h = {\n    // Options.jsx\n    items_per_page: '/ ページ',\n    jump_to: '移動',\n    jump_to_confirm: '確認する',\n    page: 'ページ',\n    // Pagination.jsx\n    prev_page: '前のページ',\n    next_page: '次のページ',\n    prev_5: '前 5ページ',\n    next_5: '次 5ページ',\n    prev_3: '前 3ページ',\n    next_3: '次 3ページ',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ja_JP = {\n    locale: 'ja',\n    Pagination: Pagination$h,\n    DatePicker: locale$z,\n    TimePicker: locale$y,\n    Calendar: CalendarLocale$h,\n    Table: {\n        filterTitle: 'メニューをフィルター',\n        filterConfirm: 'OK',\n        filterReset: 'リセット',\n        emptyText: 'データがありません',\n        selectAll: 'すべてを選択',\n        selectInvert: '選択を反転',\n    },\n    Modal: {\n        okText: 'OK',\n        cancelText: 'キャンセル',\n        justOkText: 'OK',\n    },\n    Popconfirm: {\n        okText: 'OK',\n        cancelText: 'キャンセル',\n    },\n    Transfer: {\n        notFoundContent: '結果はありません',\n        searchPlaceholder: 'ここを検索',\n        itemUnit: 'アイテム',\n        itemsUnit: 'アイテム',\n    },\n    Select: {\n        notFoundContent: '結果はありません',\n    },\n    Upload: {\n        uploading: 'アップロード中...',\n        removeFile: 'ファイルを削除',\n        uploadError: 'アップロードエラー',\n        previewFile: 'ファイルをプレビュー',\n    },\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarLocale$i = {\n    today: '오늘',\n    now: '현재 시각',\n    backToToday: '오늘로 돌아가기',\n    ok: '확인',\n    clear: '지우기',\n    month: '월',\n    year: '년',\n    timeSelect: '시간 선택',\n    dateSelect: '날짜 선택',\n    monthSelect: '달 선택',\n    yearSelect: '연 선택',\n    decadeSelect: '연대 선택',\n    yearFormat: 'YYYY년',\n    dateFormat: 'YYYY-MM-DD',\n    dayFormat: 'Do',\n    dateTimeFormat: 'YYYY-MM-DD HH:mm:ss',\n    monthBeforeYear: false,\n    previousMonth: '이전 달 (PageUp)',\n    nextMonth: '다음 달 (PageDown)',\n    previousYear: '이전 해 (Control + left)',\n    nextYear: '다음 해 (Control + right)',\n    previousDecade: '이전 연대',\n    nextDecade: '다음 연대',\n    previousCentury: '이전 세기',\n    nextCentury: '다음 세기',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$A = {\n    placeholder: '날짜 선택',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$B = {\n    lang: /*@__PURE__*/ __assign({ placeholder: '날짜 선택', rangePlaceholder: ['시작일', '종료일'] }, CalendarLocale$i),\n    timePickerLocale: /*@__PURE__*/ __assign({}, locale$A),\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Pagination$i = {\n    // Options.jsx\n    items_per_page: '/ 쪽',\n    jump_to: '이동하기',\n    jump_to_confirm: '확인하다',\n    page: '',\n    // Pagination.jsx\n    prev_page: '이전 페이지',\n    next_page: '다음 페이지',\n    prev_5: '이전 5 페이지',\n    next_5: '다음 5 페이지',\n    prev_3: '이전 3 페이지',\n    next_3: '다음 3 페이지',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ko_KR = {\n    locale: 'ko',\n    Pagination: Pagination$i,\n    DatePicker: locale$B,\n    TimePicker: locale$A,\n    Calendar: CalendarLocale$i,\n    Table: {\n        filterTitle: '필터 메뉴',\n        filterConfirm: '확인',\n        filterReset: '초기화',\n        emptyText: '데이터 없음',\n        selectAll: '전체 선택',\n        selectInvert: '선택 토글',\n    },\n    Modal: {\n        okText: '확인',\n        cancelText: '취소',\n        justOkText: '확인',\n    },\n    Popconfirm: {\n        okText: '확인',\n        cancelText: '취소',\n    },\n    Transfer: {\n        notFoundContent: '데이터 없음',\n        searchPlaceholder: '여기에 검색하세요',\n        itemUnit: '개',\n        itemsUnit: '개',\n    },\n    Select: {\n        notFoundContent: '데이터 없음',\n    },\n    Upload: {\n        uploading: '업로드 중...',\n        removeFile: '파일 삭제',\n        uploadError: '업로드 실패',\n        previewFile: '파일 미리보기',\n    },\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarLocale$j = {\n    today: 'I dag',\n    now: 'Nå',\n    backToToday: 'Gå til i dag',\n    ok: 'Ok',\n    clear: 'Annuller',\n    month: 'Måned',\n    year: 'År',\n    timeSelect: 'Velg tidspunkt',\n    dateSelect: 'Velg dato',\n    monthSelect: 'Velg måned',\n    yearSelect: 'Velg år',\n    decadeSelect: 'Velg årti',\n    yearFormat: 'YYYY',\n    dateFormat: 'DD.MM.YYYY',\n    dayFormat: 'DD',\n    dateTimeFormat: 'DD.MM.YYYY HH:mm:ss',\n    monthBeforeYear: true,\n    previousMonth: 'Forrige måned(PageUp)',\n    nextMonth: 'Neste måned (PageDown)',\n    previousYear: 'Forrige år (Control + left)',\n    nextYear: 'Neste år (Control + right)',\n    previousDecade: 'Forrige tiår',\n    nextDecade: 'Neste tiår',\n    previousCentury: 'Forrige århundre',\n    nextCentury: 'Neste århundre',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$C = {\n    placeholder: 'Velg tid',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$D = {\n    lang: /*@__PURE__*/ __assign({ placeholder: 'Velg dato', rangePlaceholder: ['Startdato', 'Sluttdato'] }, CalendarLocale$j),\n    timePickerLocale: /*@__PURE__*/ __assign({}, locale$C),\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Pagination$j = {\n    // Options.jsx\n    items_per_page: '/ side',\n    jump_to: 'Gå til side',\n    page: '',\n    // Pagination.jsx\n    prev_page: 'Forrige side',\n    next_page: 'Neste side',\n    prev_5: '5 forrige',\n    next_5: '5 neste',\n    prev_3: '3 forrige',\n    next_3: '3 neste',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar nb_NO = {\n    locale: 'nb',\n    DatePicker: locale$D,\n    TimePicker: locale$C,\n    Calendar: CalendarLocale$j,\n    Pagination: Pagination$j,\n    Table: {\n        filterTitle: 'Filtermeny',\n        filterConfirm: 'OK',\n        filterReset: 'Nullstill',\n        emptyText: 'Ingen data',\n        selectAll: 'Velg alle',\n        selectInvert: 'Inverter valg',\n    },\n    Modal: {\n        okText: 'OK',\n        cancelText: 'Avbryt',\n        justOkText: 'OK',\n    },\n    Popconfirm: {\n        okText: 'OK',\n        cancelText: 'Avbryt',\n    },\n    Transfer: {\n        notFoundContent: 'Ingen treff',\n        searchPlaceholder: 'Søk her',\n        itemUnit: 'element',\n        itemsUnit: 'elementer',\n    },\n    Select: {\n        notFoundContent: 'Ingen treff',\n    },\n    Upload: {\n        uploading: 'Laster opp...',\n        removeFile: 'Fjern fil',\n        uploadError: 'Feil ved opplastning',\n        previewFile: 'Forhåndsvisning',\n    },\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarLocale$k = {\n    today: 'Vandaag',\n    now: 'Nu',\n    backToToday: 'Terug naar vandaag',\n    ok: 'Ok',\n    clear: 'Reset',\n    month: 'Maand',\n    year: 'Jaar',\n    timeSelect: 'Selecteer tijd',\n    dateSelect: 'Selecteer datum',\n    monthSelect: 'Kies een maand',\n    yearSelect: 'Kies een jaar',\n    decadeSelect: 'Kies een decennium',\n    yearFormat: 'YYYY',\n    dateFormat: 'D-M-YYYY',\n    dayFormat: 'D',\n    dateTimeFormat: 'D-M-YYYY HH:mm:ss',\n    monthBeforeYear: true,\n    previousMonth: 'Vorige maand (PageUp)',\n    nextMonth: 'Volgende maand (PageDown)',\n    previousYear: 'Vorig jaar (Control + left)',\n    nextYear: 'Volgend jaar (Control + right)',\n    previousDecade: 'Vorig decennium',\n    nextDecade: 'Volgend decennium',\n    previousCentury: 'Vorige eeuw',\n    nextCentury: 'Volgende eeuw',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$E = {\n    placeholder: 'Selecteer tijd',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$F = {\n    lang: /*@__PURE__*/ __assign({ placeholder: 'Selecteer datum', rangePlaceholder: ['Begin datum', 'Eind datum'] }, CalendarLocale$k),\n    timePickerLocale: /*@__PURE__*/ __assign({}, locale$E),\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Pagination$k = {\n    // Options.jsx\n    items_per_page: '/ pagina',\n    jump_to: 'Ga naar',\n    jump_to_confirm: 'bevestigen',\n    page: '',\n    // Pagination.jsx\n    prev_page: 'Vorige pagina',\n    next_page: 'Volgende pagina',\n    prev_5: 'Vorige 5 pagina\\'s',\n    next_5: 'Volgende 5 pagina\\'s',\n    prev_3: 'Vorige 3 pagina\\'s',\n    next_3: 'Volgende 3 pagina\\'s',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar nl_BE = {\n    locale: 'nl-be',\n    Pagination: Pagination$k,\n    DatePicker: locale$F,\n    TimePicker: locale$E,\n    Calendar: CalendarLocale$k,\n    Table: {\n        filterTitle: 'FilterMenu',\n        filterConfirm: 'OK',\n        filterReset: 'Reset',\n        emptyText: 'Geen gegevens',\n        selectAll: 'Selecteer huidige pagina',\n        selectInvert: 'Selecteer huidige pagina',\n    },\n    Modal: {\n        okText: 'OK',\n        cancelText: 'Annuleer',\n        justOkText: 'OK',\n    },\n    Popconfirm: {\n        okText: 'OK',\n        cancelText: 'Annuleer',\n    },\n    Transfer: {\n        notFoundContent: 'Niet gevonden',\n        searchPlaceholder: 'Zoek hier',\n        itemUnit: 'item',\n        itemsUnit: 'items',\n    },\n    Select: {\n        notFoundContent: 'Niet gevonden',\n    },\n    Upload: {\n        uploading: 'Uploaden...',\n        removeFile: 'Bestand verwijderen',\n        uploadError: 'Upload fout',\n        previewFile: 'Preview bestand',\n    },\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarLocale$l = {\n    today: 'Vandaag',\n    now: 'Nu',\n    backToToday: 'Terug naar vandaag',\n    ok: 'Ok',\n    clear: 'Reset',\n    month: 'Maand',\n    year: 'Jaar',\n    timeSelect: 'Selecteer tijd',\n    dateSelect: 'Selecteer datum',\n    monthSelect: 'Kies een maand',\n    yearSelect: 'Kies een jaar',\n    decadeSelect: 'Kies een decennium',\n    yearFormat: 'YYYY',\n    dateFormat: 'D-M-YYYY',\n    dayFormat: 'D',\n    dateTimeFormat: 'D-M-YYYY HH:mm:ss',\n    monthBeforeYear: true,\n    previousMonth: 'Vorige maand (PageUp)',\n    nextMonth: 'Volgende maand (PageDown)',\n    previousYear: 'Vorig jaar (Control + left)',\n    nextYear: 'Volgend jaar (Control + right)',\n    previousDecade: 'Vorig decennium',\n    nextDecade: 'Volgend decennium',\n    previousCentury: 'Vorige eeuw',\n    nextCentury: 'Volgende eeuw',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$G = {\n    placeholder: 'Selecteer tijd',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$H = {\n    lang: /*@__PURE__*/ __assign({ placeholder: 'Selecteer datum', rangePlaceholder: ['Begin datum', 'Eind datum'] }, CalendarLocale$l),\n    timePickerLocale: /*@__PURE__*/ __assign({}, locale$G),\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Pagination$l = {\n    // Options.jsx\n    items_per_page: '/ pagina',\n    jump_to: 'Ga naar',\n    jump_to_confirm: 'bevestigen',\n    page: '',\n    // Pagination.jsx\n    prev_page: 'Vorige pagina',\n    next_page: 'Volgende pagina',\n    prev_5: 'Vorige 5 pagina\\'s',\n    next_5: 'Volgende 5 pagina\\'s',\n    prev_3: 'Vorige 3 pagina\\'s',\n    next_3: 'Volgende 3 pagina\\'s',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar nl_NL = {\n    locale: 'nl',\n    Pagination: Pagination$l,\n    DatePicker: locale$H,\n    TimePicker: locale$G,\n    Calendar: CalendarLocale$l,\n    Table: {\n        filterTitle: 'Filteren',\n        filterConfirm: 'OK',\n        filterReset: 'Reset',\n        emptyText: 'Geen gegevens',\n        selectAll: 'Selecteer huidige pagina',\n        selectInvert: 'Deselecteer huidige pagina',\n    },\n    Modal: {\n        okText: 'OK',\n        cancelText: 'Annuleren',\n        justOkText: 'OK',\n    },\n    Popconfirm: {\n        okText: 'OK',\n        cancelText: 'Annuleren',\n    },\n    Transfer: {\n        notFoundContent: 'Niet gevonden',\n        searchPlaceholder: 'Zoeken',\n        itemUnit: 'item',\n        itemsUnit: 'items',\n    },\n    Select: {\n        notFoundContent: 'Niet gevonden',\n    },\n    Upload: {\n        uploading: 'Uploaden...',\n        removeFile: 'Verwijder bestand',\n        uploadError: 'Fout tijdens uploaden',\n        previewFile: 'Bekijk bestand',\n    },\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarLocale$m = {\n    today: 'Dzisiaj',\n    now: 'Teraz',\n    backToToday: 'Ustaw dzisiaj',\n    ok: 'Ok',\n    clear: 'Wyczyść',\n    month: 'Miesiąc',\n    year: 'Rok',\n    timeSelect: 'Ustaw czas',\n    dateSelect: 'Ustaw datę',\n    monthSelect: 'Wybierz miesiąc',\n    yearSelect: 'Wybierz rok',\n    decadeSelect: 'Wybierz dekadę',\n    yearFormat: 'YYYY',\n    dateFormat: 'D/M/YYYY',\n    dayFormat: 'D',\n    dateTimeFormat: 'D/M/YYYY HH:mm:ss',\n    monthBeforeYear: true,\n    previousMonth: 'Poprzedni miesiąc (PageUp)',\n    nextMonth: 'Następny miesiąc (PageDown)',\n    previousYear: 'Ostatni rok (Ctrl + left)',\n    nextYear: 'Następny rok (Ctrl + right)',\n    previousDecade: 'Ostatnia dekada',\n    nextDecade: 'Następna dekada',\n    previousCentury: 'Ostatni wiek',\n    nextCentury: 'Następny wiek',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$I = {\n    placeholder: 'Wybierz godzinę',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$J = {\n    lang: /*@__PURE__*/ __assign({ placeholder: 'Wybierz datę', rangePlaceholder: ['Data początkowa', 'Data końcowa'] }, CalendarLocale$m),\n    timePickerLocale: /*@__PURE__*/ __assign({}, locale$I),\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Pagination$m = {\n    // Options.jsx\n    items_per_page: '/ stronę',\n    jump_to: 'Idź do',\n    jump_to_confirm: 'potwierdzać',\n    page: '',\n    // Pagination.jsx\n    prev_page: 'Poprzednia strona',\n    next_page: 'Następna strona',\n    prev_5: 'Poprzednie 5 stron',\n    next_5: 'Następne 5 stron',\n    prev_3: 'Poprzednie 3 strony',\n    next_3: 'Następne 3 strony',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar pl_PL = {\n    locale: 'pl',\n    Pagination: Pagination$m,\n    DatePicker: locale$J,\n    TimePicker: locale$I,\n    Calendar: CalendarLocale$m,\n    Table: {\n        filterTitle: 'Menu filtra',\n        filterConfirm: 'OK',\n        filterReset: 'Wyczyść',\n        emptyText: 'Brak danych',\n        selectAll: 'Zaznacz bieżącą stronę',\n        selectInvert: 'Odwróć zaznaczenie',\n    },\n    Modal: {\n        okText: 'OK',\n        cancelText: 'Anuluj',\n        justOkText: 'OK',\n    },\n    Popconfirm: {\n        okText: 'OK',\n        cancelText: 'Anuluj',\n    },\n    Transfer: {\n        notFoundContent: 'Nie znaleziono',\n        searchPlaceholder: 'Szukaj',\n        itemUnit: 'obiekt',\n        itemsUnit: 'obiekty',\n    },\n    Select: {\n        notFoundContent: 'Nie znaleziono',\n    },\n    Upload: {\n        uploading: 'Wysyłanie...',\n        removeFile: 'Usuń plik',\n        uploadError: 'Błąd wysyłania',\n        previewFile: 'Podejrzyj plik',\n    },\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarLocale$n = {\n    today: 'Hoje',\n    now: 'Agora',\n    backToToday: 'Voltar para hoje',\n    ok: 'Ok',\n    clear: 'Limpar',\n    month: 'Mês',\n    year: 'Ano',\n    timeSelect: 'Selecionar tempo',\n    dateSelect: 'Selecionar data',\n    monthSelect: 'Escolher mês',\n    yearSelect: 'Escolher ano',\n    decadeSelect: 'Escolher década',\n    yearFormat: 'YYYY',\n    dateFormat: 'D/M/YYYY',\n    dayFormat: 'D',\n    dateTimeFormat: 'D/M/YYYY HH:mm:ss',\n    monthBeforeYear: false,\n    previousMonth: 'Mês anterior (PageUp)',\n    nextMonth: 'Próximo mês (PageDown)',\n    previousYear: 'Ano anterior (Control + esquerda)',\n    nextYear: 'Próximo ano (Control + direita)',\n    previousDecade: 'Década anterior',\n    nextDecade: 'Próxima década',\n    previousCentury: 'Século anterior',\n    nextCentury: 'Próximo século',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$K = {\n    placeholder: 'Hora',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$L = {\n    lang: /*@__PURE__*/ __assign({ placeholder: 'Selecionar data', rangePlaceholder: ['Data de início', 'Data de fim'] }, CalendarLocale$n),\n    timePickerLocale: /*@__PURE__*/ __assign({}, locale$K),\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Pagination$n = {\n    // Options.jsx\n    items_per_page: '/ páginas',\n    jump_to: 'Vá até',\n    jump_to_confirm: 'confirme',\n    page: '',\n    // Pagination.jsx\n    prev_page: 'Página anterior',\n    next_page: 'Próxima página',\n    prev_5: '5 páginas anteriores',\n    next_5: '5 próximas páginas',\n    prev_3: '3 páginas anteriores',\n    next_3: '3 próximas páginas',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar pt_BR = {\n    locale: 'pt-br',\n    Pagination: Pagination$n,\n    DatePicker: locale$L,\n    TimePicker: locale$K,\n    Calendar: CalendarLocale$n,\n    Table: {\n        filterTitle: 'Filtro',\n        filterConfirm: 'OK',\n        filterReset: 'Resetar',\n        emptyText: 'Não há dados',\n        selectAll: 'Selecionar página atual',\n        selectInvert: 'Inverter seleção',\n    },\n    Modal: {\n        okText: 'OK',\n        cancelText: 'Cancelar',\n        justOkText: 'OK',\n    },\n    Popconfirm: {\n        okText: 'OK',\n        cancelText: 'Cancelar',\n    },\n    Transfer: {\n        notFoundContent: 'Não encontrado',\n        searchPlaceholder: 'Procurar',\n        itemUnit: 'item',\n        itemsUnit: 'items',\n    },\n    Select: {\n        notFoundContent: 'Não encontrado',\n    },\n    Upload: {\n        uploading: 'Enviando...',\n        removeFile: 'Remover arquivo',\n        uploadError: 'Erro no envio',\n        previewFile: 'Visualizar arquivo',\n    },\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarLocale$o = {\n    today: 'Hoje',\n    now: 'Agora',\n    backToToday: 'Hoje',\n    ok: 'Ok',\n    clear: 'Limpar',\n    month: 'Mês',\n    year: 'Ano',\n    timeSelect: 'Selecionar hora',\n    dateSelect: 'Selecionar data',\n    monthSelect: 'Selecionar mês',\n    yearSelect: 'Selecionar ano',\n    decadeSelect: 'Selecionar década',\n    yearFormat: 'YYYY',\n    dateFormat: 'D/M/YYYY',\n    dayFormat: 'D',\n    dateTimeFormat: 'D/M/YYYY HH:mm:ss',\n    monthBeforeYear: true,\n    previousMonth: 'Mês anterior (PageUp)',\n    nextMonth: 'Mês seguinte (PageDown)',\n    previousYear: 'Ano anterior (Control + left)',\n    nextYear: 'Ano seguinte (Control + right)',\n    previousDecade: 'Década anterior',\n    nextDecade: 'Década seguinte',\n    previousCentury: 'Século anterior',\n    nextCentury: 'Século seguinte',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$M = {\n    placeholder: 'Hora',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$N = {\n    lang: /*@__PURE__*/ __assign({}, CalendarLocale$o, { placeholder: 'Data', rangePlaceholder: ['Data inicial', 'Data final'], today: 'Hoje', now: 'Agora', backToToday: 'Hoje', ok: 'Ok', clear: 'Limpar', month: 'Mês', year: 'Ano', timeSelect: 'Hora', dateSelect: 'Selecionar data', monthSelect: 'Selecionar mês', yearSelect: 'Selecionar ano', decadeSelect: 'Selecionar década', yearFormat: 'YYYY', dateFormat: 'D/M/YYYY', dayFormat: 'D', dateTimeFormat: 'D/M/YYYY HH:mm:ss', monthFormat: 'MMMM', monthBeforeYear: false, previousMonth: 'Mês anterior (PageUp)', nextMonth: 'Mês seguinte (PageDown)', previousYear: 'Ano anterior (Control + left)', nextYear: 'Ano seguinte (Control + right)', previousDecade: 'Última década', nextDecade: 'Próxima década', previousCentury: 'Último século', nextCentury: 'Próximo século' }),\n    timePickerLocale: /*@__PURE__*/ __assign({}, locale$M, { placeholder: 'Hora' }),\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Pagination$o = {\n    // Options.jsx\n    items_per_page: '/ página',\n    jump_to: 'Saltar',\n    jump_to_confirm: 'confirmar',\n    page: '',\n    // Pagination.jsx\n    prev_page: 'Página Anterior',\n    next_page: 'Página Seguinte',\n    prev_5: 'Recuar 5 Páginas',\n    next_5: 'Avançar 5 Páginas',\n    prev_3: 'Recuar 3 Páginas',\n    next_3: 'Avançar 3 Páginas',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar pt_PT = {\n    locale: 'pt',\n    Pagination: Pagination$o,\n    DatePicker: locale$N,\n    TimePicker: locale$M,\n    Calendar: CalendarLocale$o,\n    Table: {\n        filterTitle: 'Filtro',\n        filterConfirm: 'Aplicar',\n        filterReset: 'Reiniciar',\n        emptyText: 'Sem resultados',\n        selectAll: 'Selecionar página atual',\n        selectInvert: 'Inverter seleção',\n    },\n    Modal: {\n        okText: 'OK',\n        cancelText: 'Cancelar',\n        justOkText: 'OK',\n    },\n    Popconfirm: {\n        okText: 'OK',\n        cancelText: 'Cancelar',\n    },\n    Transfer: {\n        notFoundContent: 'Sem resultados',\n        searchPlaceholder: 'Procurar...',\n        itemUnit: 'item',\n        itemsUnit: 'itens',\n    },\n    Select: {\n        notFoundContent: 'Sem resultados',\n    },\n    Upload: {\n        uploading: 'A carregar...',\n        removeFile: 'Remover',\n        uploadError: 'Erro ao carregar',\n        previewFile: 'Pré-visualizar',\n    },\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarLocale$p = {\n    today: 'Сегодня',\n    now: 'Сейчас',\n    backToToday: 'Текущая дата',\n    ok: 'Ok',\n    clear: 'Очистить',\n    month: 'Месяц',\n    year: 'Год',\n    timeSelect: 'Выбрать время',\n    dateSelect: 'Выбрать дату',\n    monthSelect: 'Выбрать месяц',\n    yearSelect: 'Выбрать год',\n    decadeSelect: 'Выбрать десятилетие',\n    yearFormat: 'YYYY',\n    dateFormat: 'D-M-YYYY',\n    dayFormat: 'D',\n    dateTimeFormat: 'D-M-YYYY HH:mm:ss',\n    monthBeforeYear: true,\n    previousMonth: 'Предыдущий месяц (PageUp)',\n    nextMonth: 'Следующий месяц (PageDown)',\n    previousYear: 'Предыдущий год (Control + left)',\n    nextYear: 'Следующий год (Control + right)',\n    previousDecade: 'Предыдущее десятилетие',\n    nextDecade: 'Следущее десятилетие',\n    previousCentury: 'Предыдущий век',\n    nextCentury: 'Следующий век',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** *\n * Created by Andrey Gayvoronsky on 13/04/16.\n  @type {?} */\nvar locale$O = {\n    placeholder: 'Выберите время',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$P = {\n    lang: /*@__PURE__*/ __assign({ placeholder: 'Выберите дату', rangePlaceholder: ['Начальная дата', 'Конечная дата'] }, CalendarLocale$p),\n    timePickerLocale: /*@__PURE__*/ __assign({}, locale$O),\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Pagination$p = {\n    // Options.jsx\n    items_per_page: '/странице',\n    jump_to: 'Перейти',\n    jump_to_confirm: 'подтвердить',\n    page: '',\n    // Pagination.jsx\n    prev_page: 'Назад',\n    next_page: 'Вперед',\n    prev_5: 'Предыдущие 5',\n    next_5: 'Следующие 5',\n    prev_3: 'Предыдущие 3',\n    next_3: 'Следующие 3',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ru_RU = {\n    locale: 'ru',\n    Pagination: Pagination$p,\n    DatePicker: locale$P,\n    TimePicker: locale$O,\n    Calendar: CalendarLocale$p,\n    Table: {\n        filterTitle: 'Фильтр',\n        filterConfirm: 'OK',\n        filterReset: 'Сбросить',\n        emptyText: 'Нет данных',\n        selectAll: 'Выбрать всё',\n        selectInvert: 'Инвертировать выбор',\n    },\n    Modal: {\n        okText: 'OK',\n        cancelText: 'Отмена',\n        justOkText: 'OK',\n    },\n    Popconfirm: {\n        okText: 'OK',\n        cancelText: 'Отмена',\n    },\n    Transfer: {\n        notFoundContent: 'Ничего не найдено',\n        searchPlaceholder: 'Введите название для поиска',\n        itemUnit: 'item',\n        itemsUnit: 'items',\n    },\n    Select: {\n        notFoundContent: 'Ничего не найдено',\n    },\n    Upload: {\n        uploading: 'Закачиваю...',\n        removeFile: 'Удалить файл',\n        uploadError: 'Ошибка при закачке',\n        previewFile: 'Предпросмотр файла',\n    },\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarLocale$q = {\n    today: 'Dnes',\n    now: 'Teraz',\n    backToToday: 'Späť na dnes',\n    ok: 'Ok',\n    clear: 'Vymazať',\n    month: 'Mesiac',\n    year: 'Rok',\n    timeSelect: 'Vybrať čas',\n    dateSelect: 'Vybrať dátum',\n    monthSelect: 'Vybrať mesiac',\n    yearSelect: 'Vybrať rok',\n    decadeSelect: 'Vybrať dekádu',\n    yearFormat: 'YYYY',\n    dateFormat: 'D.M.YYYY',\n    dayFormat: 'D',\n    dateTimeFormat: 'D.M.YYYY HH:mm:ss',\n    monthBeforeYear: true,\n    previousMonth: 'Predchádzajúci mesiac (PageUp)',\n    nextMonth: 'Nasledujúci mesiac (PageDown)',\n    previousYear: 'Predchádzajúci rok (Control + left)',\n    nextYear: 'Nasledujúci rok (Control + right)',\n    previousDecade: 'Predchádzajúca dekáda',\n    nextDecade: 'Nasledujúca dekáda',\n    previousCentury: 'Predchádzajúce storočie',\n    nextCentury: 'Nasledujúce storočie',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$Q = {\n    placeholder: 'Vybrať čas',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$R = {\n    lang: /*@__PURE__*/ __assign({ placeholder: 'Vybrať dátum', rangePlaceholder: ['Od', 'Do'] }, CalendarLocale$q),\n    timePickerLocale: /*@__PURE__*/ __assign({}, locale$Q),\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Pagination$q = {\n    // Options.jsx\n    items_per_page: '/ strana',\n    jump_to: 'Choď na',\n    jump_to_confirm: 'potvrdit',\n    page: '',\n    // Pagination.jsx\n    prev_page: 'Predchádzajúca strana',\n    next_page: 'Nasledujúca strana',\n    prev_5: 'Predchádzajúcich 5 strán',\n    next_5: 'Nasledujúcich 5 strán',\n    prev_3: 'Predchádzajúce 3 strany',\n    next_3: 'Nasledujúce 3 strany',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar sk_SK = {\n    locale: 'sk',\n    Pagination: Pagination$q,\n    DatePicker: locale$R,\n    TimePicker: locale$Q,\n    Calendar: CalendarLocale$q,\n    Table: {\n        filterTitle: 'Filter',\n        filterConfirm: 'OK',\n        filterReset: 'Obnoviť',\n        emptyText: 'Žiadne dáta',\n        selectAll: 'Vybrať všetko',\n        selectInvert: 'Vybrať opačné',\n    },\n    Modal: {\n        okText: 'OK',\n        cancelText: 'Zrušiť',\n        justOkText: 'OK',\n    },\n    Popconfirm: {\n        okText: 'OK',\n        cancelText: 'Zrušiť',\n    },\n    Transfer: {\n        notFoundContent: 'Nenájdené',\n        searchPlaceholder: 'Vyhľadávanie',\n        itemUnit: 'položka',\n        itemsUnit: 'položiek',\n    },\n    Select: {\n        notFoundContent: 'Nenájdené',\n    },\n    Upload: {\n        uploading: 'Nahrávanie...',\n        removeFile: 'Odstrániť súbor',\n        uploadError: 'Chyba pri nahrávaní',\n        previewFile: 'Zobraziť súbor',\n    },\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarLocale$r = {\n    today: 'Danas',\n    now: 'Sada',\n    backToToday: 'Vrati se na danas',\n    ok: 'U redu',\n    clear: 'Obriši',\n    month: 'Mesec',\n    year: 'Godina',\n    timeSelect: 'Izaberi vreme',\n    dateSelect: 'Izaberi datum',\n    monthSelect: 'Izaberi mesec',\n    yearSelect: 'Izaberi godinu',\n    decadeSelect: 'Izaberi deceniju',\n    yearFormat: 'YYYY',\n    dateFormat: 'DD.MM.YYYY',\n    dayFormat: 'D',\n    dateTimeFormat: 'DD.MM.YYYY HH:mm:ss',\n    monthBeforeYear: true,\n    previousMonth: 'Prethodni mesec (PageUp)',\n    nextMonth: 'Sledeći mesec (PageDown)',\n    previousYear: 'Prethodna godina (Control + left)',\n    nextYear: 'Sledeća godina (Control + right)',\n    previousDecade: 'Prethodna decenija',\n    nextDecade: 'Sledeća decenija',\n    previousCentury: 'Prethodni vek',\n    nextCentury: 'Sledeći vek',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$S = {\n    placeholder: 'Izaberite vreme',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$T = {\n    lang: /*@__PURE__*/ __assign({ placeholder: 'Izaberite datum', rangePlaceholder: ['Početni datum', 'Krajnji datum'] }, CalendarLocale$r),\n    timePickerLocale: /*@__PURE__*/ __assign({}, locale$S),\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Pagination$r = {\n    // Options.jsx\n    items_per_page: '/ strani',\n    jump_to: 'Idi na',\n    page: '',\n    // Pagination.jsx\n    prev_page: 'Prethodna strana',\n    next_page: 'Sledeća strana',\n    prev_5: 'Prethodnih 5 Strana',\n    next_5: 'Sledećih 5 Strana',\n    prev_3: 'Prethodnih 3 Strane',\n    next_3: 'Sledećih 3 Strane',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar sr_RS = {\n    locale: 'sr',\n    Pagination: Pagination$r,\n    DatePicker: locale$T,\n    TimePicker: locale$S,\n    Calendar: CalendarLocale$r,\n    Table: {\n        filterTitle: 'Filter',\n        filterConfirm: 'Primeni filter',\n        filterReset: 'Resetuj filter',\n        emptyText: 'Nema podataka',\n        selectAll: 'Obeleži sve na trenutnoj strani',\n        selectInvert: 'Obrni selekciju na trenutnoj stranici',\n    },\n    Modal: {\n        okText: 'U redu',\n        cancelText: 'Otkaži',\n        justOkText: 'U redu',\n    },\n    Popconfirm: {\n        okText: 'U redu',\n        cancelText: 'Otkaži',\n    },\n    Transfer: {\n        notFoundContent: 'Nisu pronađeni rezultati pretrage',\n        searchPlaceholder: 'Pretražite ovde',\n        itemUnit: 'stavka',\n        itemsUnit: 'stavki',\n    },\n    Select: {\n        notFoundContent: 'Nije pronađeno',\n    },\n    Upload: {\n        uploading: 'Slanje...',\n        removeFile: 'Ukloni fajl',\n        uploadError: 'Greška prilikom slanja',\n        previewFile: 'Pogledaj fajl',\n    },\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarLocale$s = {\n    today: 'I dag',\n    now: 'Nu',\n    backToToday: 'Till idag',\n    ok: 'Ok',\n    clear: 'Avbryt',\n    month: 'Månad',\n    year: 'År',\n    timeSelect: 'Välj tidpunkt',\n    dateSelect: 'Välj datum',\n    monthSelect: 'Välj månad',\n    yearSelect: 'Välj år',\n    decadeSelect: 'Välj årtionde',\n    yearFormat: 'YYYY',\n    dateFormat: 'YYYY-MM-DD',\n    dayFormat: 'D',\n    dateTimeFormat: 'YYYY-MM-DD H:mm:ss',\n    monthBeforeYear: true,\n    previousMonth: 'Förra månaden (PageUp)',\n    nextMonth: 'Nästa månad (PageDown)',\n    previousYear: 'Föreg år (Control + left)',\n    nextYear: 'Nästa år (Control + right)',\n    previousDecade: 'Föreg årtionde',\n    nextDecade: 'Nästa årtionde',\n    previousCentury: 'Föreg århundrade',\n    nextCentury: 'Nästa århundrade',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$U = {\n    placeholder: 'Välj tid',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$V = {\n    lang: /*@__PURE__*/ __assign({ placeholder: 'Välj datum', rangePlaceholder: ['Startdatum', 'Slutdatum'] }, CalendarLocale$s),\n    timePickerLocale: /*@__PURE__*/ __assign({}, locale$U),\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Pagination$s = {\n    // Options.jsx\n    items_per_page: '/ sida',\n    jump_to: 'Gå till',\n    jump_to_confirm: 'bekräfta',\n    page: '',\n    // Pagination.jsx\n    prev_page: 'Föreg sida',\n    next_page: 'Nästa sida',\n    prev_5: 'Föreg 5 sidor',\n    next_5: 'Nästa 5 sidor',\n    prev_3: 'Föreg 3 sidor',\n    next_3: 'Nästa 3 sidor',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar sv_SE = {\n    locale: 'sv',\n    Pagination: Pagination$s,\n    DatePicker: locale$V,\n    TimePicker: locale$U,\n    Calendar: CalendarLocale$s,\n    Table: {\n        filterTitle: 'Filtermeny',\n        filterConfirm: 'OK',\n        filterReset: 'Rensa',\n        emptyText: 'Ingen information',\n    },\n    Modal: {\n        okText: 'OK',\n        cancelText: 'Avbryt',\n        justOkText: 'OK',\n    },\n    Popconfirm: {\n        okText: 'OK',\n        cancelText: 'Avbryt',\n    },\n    Transfer: {\n        notFoundContent: 'Info saknas',\n        searchPlaceholder: 'Sök',\n        itemUnit: 'element',\n        itemsUnit: 'element',\n    },\n    Select: {\n        notFoundContent: 'Info saknas',\n    },\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarLocale$t = {\n    today: 'วันนี้',\n    now: 'ตอนนี้',\n    backToToday: 'กลับไปยังวันนี้',\n    ok: 'ตกลง',\n    clear: 'ลบล้าง',\n    month: 'เดือน',\n    year: 'ปี',\n    timeSelect: 'เลือกเวลา',\n    dateSelect: 'เลือกวัน',\n    monthSelect: 'เลือกเดือน',\n    yearSelect: 'เลือกปี',\n    decadeSelect: 'เลือกทศวรรษ',\n    yearFormat: 'YYYY',\n    dateFormat: 'D/M/YYYY',\n    dayFormat: 'D',\n    dateTimeFormat: 'D/M/YYYY HH:mm:ss',\n    monthBeforeYear: true,\n    previousMonth: 'เดือนก่อนหน้า (PageUp)',\n    nextMonth: 'เดือนถัดไป (PageDown)',\n    previousYear: 'ปีก่อนหน้า (Control + left)',\n    nextYear: 'ปีถัดไป (Control + right)',\n    previousDecade: 'ทศวรรษก่อนหน้า',\n    nextDecade: 'ทศวรรษถัดไป',\n    previousCentury: 'ศตวรรษก่อนหน้า',\n    nextCentury: 'ศตวรรษถัดไป',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$W = {\n    placeholder: 'เลือกเวลา',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$X = {\n    lang: /*@__PURE__*/ __assign({ placeholder: 'เลือกวันที่', rangePlaceholder: ['วันเริ่มต้น', 'วันสิ้นสุด'] }, CalendarLocale$t),\n    timePickerLocale: /*@__PURE__*/ __assign({}, locale$W)\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Pagination$t = {\n    // Options.jsx\n    items_per_page: '/ หน้า',\n    jump_to: 'ไปยัง',\n    jump_to_confirm: 'ยืนยัน',\n    page: '',\n    // Pagination.jsx\n    prev_page: 'หน้าก่อนหน้า',\n    next_page: 'หน้าถัดไป',\n    prev_5: 'ย้อนกลับ 5 หน้า',\n    next_5: 'ถัดไป 5 หน้า',\n    prev_3: 'ย้อนกลับ 3 หน้า',\n    next_3: 'ถัดไป 3 หน้า',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar th_TH = {\n    locale: 'th',\n    Pagination: Pagination$t,\n    DatePicker: locale$X,\n    TimePicker: locale$W,\n    Calendar: CalendarLocale$t,\n    Table: {\n        filterTitle: 'ตัวกรอง',\n        filterConfirm: 'ยืนยัน',\n        filterReset: 'รีเซ็ต',\n        emptyText: 'ไม่มีข้อมูล',\n        selectAll: 'เลือกทั้งหมดในหน้านี้',\n        selectInvert: 'เลือกสถานะตรงกันข้าม',\n    },\n    Modal: {\n        okText: 'ตกลง',\n        cancelText: 'ยกเลิก',\n        justOkText: 'ตกลง',\n    },\n    Popconfirm: {\n        okText: 'ตกลง',\n        cancelText: 'ยกเลิก',\n    },\n    Transfer: {\n        notFoundContent: 'ไม่พบข้อมูล',\n        searchPlaceholder: 'ค้นหา',\n        itemUnit: 'ชิ้น',\n        itemsUnit: 'ชิ้น',\n    },\n    Select: {\n        notFoundContent: 'ไม่พบข้อมูล',\n    },\n    Upload: {\n        uploading: 'กำลังอัปโหลด...',\n        removeFile: 'ลบไฟล์',\n        uploadError: 'เกิดข้อผิดพลาดในการอัปโหลด',\n        previewFile: 'ดูตัวอย่างไฟล์',\n    },\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$Y = {\n    placeholder: 'Zaman Seç',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$Z = {\n    lang: /*@__PURE__*/ __assign({ placeholder: 'Tarih Seç', rangePlaceholder: ['Başlangıç Tarihi', 'Bitiş Tarihi'] }, CalendarLocale$8),\n    timePickerLocale: /*@__PURE__*/ __assign({}, locale$Y),\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar tr_TR = {\n    locale: 'tr',\n    Pagination: Pagination$8,\n    DatePicker: locale$Z,\n    TimePicker: locale$Y,\n    Calendar: CalendarLocale$8,\n    Table: {\n        filterTitle: 'Menü Filtrele',\n        filterConfirm: 'Tamam',\n        filterReset: 'Sıfırla',\n        emptyText: 'Veri Yok',\n        selectAll: 'Hepsini Seç',\n        selectInvert: 'Tersini Seç',\n    },\n    Modal: {\n        okText: 'Tamam',\n        cancelText: 'İptal',\n        justOkText: 'Tamam',\n    },\n    Popconfirm: {\n        okText: 'Tamam',\n        cancelText: 'İptal',\n    },\n    Transfer: {\n        notFoundContent: 'Bulunamadı',\n        searchPlaceholder: 'Arama',\n        itemUnit: 'Öğe',\n        itemsUnit: 'Öğeler',\n    },\n    Select: {\n        notFoundContent: 'Bulunamadı',\n    },\n    Upload: {\n        uploading: 'Yükleniyor...',\n        removeFile: \"Dosyay\\u0131 kald\\u0131r\",\n        uploadError: 'Yükleme Hatası',\n        previewFile: \"Dosyay\\u0131 \\u00D6nizle\",\n    },\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarLocale$u = {\n    today: 'Сьогодні',\n    now: 'Зараз',\n    backToToday: 'Поточна дата',\n    ok: 'Ok',\n    clear: 'Очистити',\n    month: 'Місяць',\n    year: 'Рік',\n    timeSelect: 'Обрати час',\n    dateSelect: 'Обрати дату',\n    monthSelect: 'Обрати місяць',\n    yearSelect: 'Обрати рік',\n    decadeSelect: 'Обрати десятиріччя',\n    yearFormat: 'YYYY',\n    dateFormat: 'D-M-YYYY',\n    dayFormat: 'D',\n    dateTimeFormat: 'D-M-YYYY HH:mm:ss',\n    monthBeforeYear: true,\n    previousMonth: 'Попередній місяць (PageUp)',\n    nextMonth: 'Наступний місяць (PageDown)',\n    previousYear: 'Попередній рік (Control + left)',\n    nextYear: 'Наступний рік (Control + right)',\n    previousDecade: 'Попереднє десятиріччя',\n    nextDecade: 'Наступне десятиріччя',\n    previousCentury: 'Попереднє століття',\n    nextCentury: 'Наступне століття',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$_ = {\n    placeholder: 'Оберіть час',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$10 = {\n    lang: /*@__PURE__*/ __assign({ placeholder: 'Оберіть дату', rangePlaceholder: ['Початкова дата', 'Кінцева дата'] }, CalendarLocale$u),\n    timePickerLocale: /*@__PURE__*/ __assign({}, locale$_),\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Pagination$u = {\n    // Options.jsx\n    items_per_page: '/ сторінці',\n    jump_to: 'Перейти',\n    jump_to_confirm: 'підтвердити',\n    page: '',\n    // Pagination.jsx\n    prev_page: 'Попередня сторінка',\n    next_page: 'Наступна сторінка',\n    prev_5: 'Попередні 5 сторінок',\n    next_5: 'Наступні 5 сторінок',\n    prev_3: 'Попередні 3 сторінки',\n    next_3: 'Наступні 3 сторінки',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar uk_UA = {\n    locale: 'uk',\n    Pagination: Pagination$u,\n    DatePicker: locale$10,\n    TimePicker: locale$_,\n    Calendar: CalendarLocale$u,\n    Table: {\n        filterTitle: 'Фільтрувати',\n        filterConfirm: 'OK',\n        filterReset: 'Скинути',\n        emptyText: 'Даних немає',\n        selectAll: 'Обрати всі',\n        selectInvert: 'Інвертувати вибір',\n    },\n    Modal: {\n        okText: 'Гаразд',\n        cancelText: 'Скасувати',\n        justOkText: 'Гаразд',\n    },\n    Popconfirm: {\n        okText: 'Гаразд',\n        cancelText: 'Скасувати',\n    },\n    Transfer: {\n        notFoundContent: 'Нічого не знайдено',\n        searchPlaceholder: 'Введіть текст для пошуку',\n        itemUnit: 'item',\n        itemsUnit: 'items',\n    },\n    Select: {\n        notFoundContent: 'Нічого не знайдено',\n    },\n    Upload: {\n        uploading: 'Завантаження ...',\n        removeFile: 'Видалити файл',\n        uploadError: 'Помилка завантаження',\n        previewFile: 'Попередній перегляд файлу',\n    },\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$11 = {\n    lang: /*@__PURE__*/ __assign({ placeholder: 'Chọn thời điểm', rangePlaceholder: ['Ngày bắt đầu', 'Ngày kết thúc'] }, CalendarLocale$8),\n    timePickerLocale: /*@__PURE__*/ __assign({}, locale$g),\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Pagination$v = {\n    // Options.jsx\n    items_per_page: '/ trang',\n    jump_to: 'Đến',\n    jump_to_confirm: 'xác nhận',\n    page: '',\n    // Pagination.jsx\n    prev_page: 'Trang Trước',\n    next_page: 'Trang Kế',\n    prev_5: 'Về 5 Trang Trước',\n    next_5: 'Đến 5 Trang Kế',\n    prev_3: 'Về 3 Trang Trước',\n    next_3: 'Đến 3 Trang Kế',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$12 = {\n    placeholder: 'Chọn thời gian',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar vi_VN = {\n    locale: 'vi',\n    Pagination: Pagination$v,\n    DatePicker: locale$11,\n    TimePicker: locale$12,\n    Calendar: locale$11,\n    Table: {\n        filterTitle: 'Bộ ',\n        filterConfirm: 'OK',\n        filterReset: 'Tạo Lại',\n        emptyText: 'Trống',\n        selectAll: 'Chọn Tất Cả',\n        selectInvert: 'Chọn Ngược Lại',\n    },\n    Modal: {\n        okText: 'OK',\n        cancelText: 'Huỷ',\n        justOkText: 'OK',\n    },\n    Popconfirm: {\n        okText: 'OK',\n        cancelText: 'Huỷ',\n    },\n    Transfer: {\n        notFoundContent: 'Không Tìm Thấy',\n        searchPlaceholder: 'Tìm ở đây',\n        itemUnit: 'mục',\n        itemsUnit: 'mục',\n    },\n    Select: {\n        notFoundContent: 'Không Tìm Thấy',\n    },\n    Upload: {\n        uploading: 'Đang tải lên...',\n        removeFile: 'Gỡ bỏ tập tin',\n        uploadError: 'Lỗi tải lên',\n        previewFile: 'Xem thử tập tin',\n    },\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarLocale$v = {\n    today: '今天',\n    now: '此刻',\n    backToToday: '返回今天',\n    ok: '確定',\n    timeSelect: '選擇時間',\n    dateSelect: '選擇日期',\n    clear: '清除',\n    month: '月',\n    year: '年',\n    previousMonth: '上個月 (翻頁上鍵)',\n    nextMonth: '下個月 (翻頁下鍵)',\n    monthSelect: '選擇月份',\n    yearSelect: '選擇年份',\n    decadeSelect: '選擇年代',\n    yearFormat: 'YYYY年',\n    dayFormat: 'D日',\n    dateFormat: 'YYYY年M月D日',\n    dateTimeFormat: 'YYYY年M月D日 HH時mm分ss秒',\n    previousYear: '上一年 (Control鍵加左方向鍵)',\n    nextYear: '下一年 (Control鍵加右方向鍵)',\n    previousDecade: '上一年代',\n    nextDecade: '下一年代',\n    previousCentury: '上一世紀',\n    nextCentury: '下一世紀',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$13 = {\n    placeholder: '請選擇時間',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar locale$14 = {\n    lang: /*@__PURE__*/ __assign({ placeholder: '請選擇日期', rangePlaceholder: ['開始日期', '結束日期'] }, CalendarLocale$v),\n    timePickerLocale: /*@__PURE__*/ __assign({}, locale$13),\n};\nlocale$14.lang.ok = '確 定';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Pagination$w = {\n    // Options.jsx\n    items_per_page: '條/頁',\n    jump_to: '跳至',\n    jump_to_confirm: '確定',\n    page: '頁',\n    // Pagination.jsx\n    prev_page: '上一頁',\n    next_page: '下一頁',\n    prev_5: '向前 5 頁',\n    next_5: '向後 5 頁',\n    prev_3: '向前 3 頁',\n    next_3: '向後 3 頁',\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar zh_TW = {\n    locale: 'zh-tw',\n    Pagination: Pagination$w,\n    DatePicker: locale$14,\n    TimePicker: locale$13,\n    Calendar: CalendarLocale$v,\n    Table: {\n        filterTitle: '篩選器',\n        filterConfirm: '確 定',\n        filterReset: '重 置',\n        emptyText: '目前尚無資料',\n        selectAll: '全部選取',\n        selectInvert: '反向選取',\n    },\n    Modal: {\n        okText: '確 定',\n        cancelText: '取 消',\n        justOkText: 'OK',\n    },\n    Popconfirm: {\n        okText: '確 定',\n        cancelText: '取 消',\n    },\n    Transfer: {\n        notFoundContent: '查無此資料',\n        searchPlaceholder: '搜尋資料',\n        itemUnit: '項目',\n        itemsUnit: '項目',\n    },\n    Select: {\n        notFoundContent: '查無此資料',\n    },\n    Upload: {\n        uploading: '正在上傳...',\n        removeFile: '刪除檔案',\n        uploadError: '上傳失敗',\n        previewFile: '檔案預覽',\n    },\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @type {?} */\nvar VERSION = /*@__PURE__*/ new Version('0.0.0-PLACEHOLDER');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NzGlobalMonitorService = /** @class */ /*@__PURE__*/ (function () {\n    function NzGlobalMonitorService() {\n        this.counter = 0;\n        this.lastClickPos = {\n            x: 0,\n            y: 0\n        };\n        this._navItemSource = new EventEmitter();\n        this._observeGlobalEvents();\n    }\n    /**\n     * @return {?}\n     */\n    NzGlobalMonitorService.prototype.getGlobalCount = /**\n     * @return {?}\n     */\n        function () {\n            return ++this.counter;\n        };\n    /**\n     * @param {?} status\n     * @return {?}\n     */\n    NzGlobalMonitorService.prototype.setDocumentOverflowHidden = /**\n     * @param {?} status\n     * @return {?}\n     */\n        function (status) {\n            document.body.style.overflow = status ? 'hidden' : '';\n        };\n    /**\n     * @return {?}\n     */\n    NzGlobalMonitorService.prototype._observeGlobalEvents = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            // 监听document的点击事件，记录点击坐标，并抛出 documentClick 事件\n            document.addEventListener('click', function (e) {\n                _this.lastClickPos = {\n                    x: e.clientX,\n                    y: e.clientY\n                };\n                _this._navItemSource.emit('documentClick');\n            });\n        };\n    return NzGlobalMonitorService;\n}());\n/*@__PURE__*/ new NzGlobalMonitorService();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NgZorroAntdModule = /** @class */ /*@__PURE__*/ (function () {\n    function NgZorroAntdModule() {\n    }\n    /**\n     * @deprecated Use `NgZorroAntdModule` instead.\n     */\n    /**\n     * @deprecated Use `NgZorroAntdModule` instead.\n     * @return {?}\n     */\n    NgZorroAntdModule.forRoot = /**\n     * @deprecated Use `NgZorroAntdModule` instead.\n     * @return {?}\n     */\n        function () {\n            return {\n                ngModule: NgZorroAntdModule\n            };\n        };\n    return NgZorroAntdModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nexport { NgZorroAntdModule, NzAffixComponent, NzAffixModule, NzAlertComponent, NzAlertModule, NzAnchorLinkComponent, NzAnchorComponent, NzAnchorModule, NzAvatarComponent, NzAvatarModule, NzBackTopComponent, NzBackTopModule, NzBadgeComponent, NzBadgeModule, NzBreadCrumbItemComponent, NzBreadCrumbComponent, NzBreadCrumbModule, NzButtonComponent, NzButtonGroupComponent, NzButtonModule, NzCalendarComponent, NzCalendarModule, NzCardGridDirective, NzCardComponent, NzCardModule, NzCardLoadingComponent, NzCardMetaComponent, NzCardTabComponent, NzCarouselModule, NzCarouselComponent, NzCarouselContentDirective, NzCheckboxComponent, NzCheckboxModule, NzCheckboxGroupComponent, NzCheckboxWrapperComponent, NzCollapsePanelComponent, NzCollapseComponent, NzCollapseModule, CandyDate, NzDatePickerModule, NzDatePickerComponent, NzRangePickerComponent, NzMonthPickerComponent, NzWeekPickerComponent, NzDividerComponent, NzDividerModule, DRAWER_ANIMATE_DURATION, NzDrawerComponent, NzDrawerModule, DrawerBuilderForService$$1 as DrawerBuilderForService, NzDrawerService$$1 as NzDrawerService, NzDrawerRef, NzDropdownContextComponent, NzDropDownComponent, NzDropDownDirective, NzDropdownService$$1 as NzDropdownService, NzDropDownButtonComponent, NzDropDownModule, NzFormModule, NzFormDirective, NzFormControlComponent, NzFormExplainComponent, NzFormItemComponent, NzFormExtraComponent, NzFormLabelComponent, NzFormSplitComponent, NzFormTextComponent, NzRowDirective, NzRowComponent, NzColComponent, NzColDirective, NzGridModule, NzI18nModule, NZ_I18N, NzI18nService, ar_EG, bg_BG, ca_ES, cs_CZ, de_DE, el_GR, en_GB, en_US, es_ES, et_EE, fa_IR, fi_FI, fr_BE, fr_FR, is_IS, it_IT, ja_JP, ko_KR, nb_NO, nl_BE, nl_NL, pl_PL, pt_BR, pt_PT, ru_RU, sk_SK, sr_RS, sv_SE, th_TH, tr_TR, uk_UA, vi_VN, zh_CN, zh_TW, NzIconModule, NzIconDirective, NZ_ICONS$$1 as NZ_ICONS, NZ_ICON_DEFAULT_TWOTONE_COLOR$$1 as NZ_ICON_DEFAULT_TWOTONE_COLOR, DEFAULT_TWOTONE_COLOR$$1 as DEFAULT_TWOTONE_COLOR, NzIconService$$1 as NzIconService, NzInputGroupComponent, NzInputModule, NzInputNumberComponent, NzInputNumberModule, NzContentComponent, NzFooterComponent, NzHeaderComponent, NzLayoutComponent, NzSiderComponent, NzLayoutModule, NzListItemMetaComponent, NzListItemComponent, NzListComponent, NzListModule, NzMentionModule, NzMentionComponent, NZ_MENTION_TRIGGER_ACCESSOR, NzMentionTriggerDirective, NzMenuDirective, NzMenuGroupComponent, NzMenuDividerDirective, NzMenuItemDirective, NzSubMenuComponent, NzMenuModule, NzPaginationComponent, NzPaginationModule, NzProgressModule, NzProgressComponent, NzRadioButtonComponent, NzRadioGroupComponent, NzRadioComponent, NzRadioModule, NzRateComponent, NzRateModule, NzOptionGroupComponent, NzOptionContainerComponent, NzOptionComponent, NzSelectComponent, NzSelectModule, NzSpinComponent, NzSpinModule, NzStepsComponent, NzStepComponent, NzStepsModule, NzSwitchComponent, NzSwitchModule, NzTableComponent, NzTableModule, NzTbodyDirective, NzTdComponent, NzThComponent, NzTheadComponent, NzTrDirective, NzTabBodyComponent, NzTabLabelDirective, NzTabComponent, NzTabsInkBarDirective, NzTabsModule, NzTabsNavComponent, NzTabChangeEvent, NzTabSetComponent, NzTimelineItemComponent, NzTimelineComponent, NzTimelineModule, NzTransferListComponent, NzTransferSearchComponent, NzTransferComponent, NzTransferModule, NzUploadBtnComponent, NzUploadListComponent, NzUploadComponent, NzUploadModule, NzTagComponent, NzTagModule, NzAutocompleteModule, NzAutocompleteComponent, getNzAutocompleteMissingPanelError, NZ_AUTOCOMPLETE_VALUE_ACCESSOR, NzAutocompleteTriggerDirective, NzOptionSelectionChange, NzAutocompleteOptionComponent, NzAutocompleteOptgroupComponent, NzMessageBaseService$$1 as NzMessageBaseService, NzMessageService$$1 as NzMessageService, NzMessageModule, NzMessageComponent, NzMessageContainerComponent, NZ_MESSAGE_DEFAULT_CONFIG, NZ_MESSAGE_CONFIG, NZ_MESSAGE_DEFAULT_CONFIG_PROVIDER, NzTimePickerComponent, NzTimePickerModule, NzToolTipComponent, NzTooltipDirective, NzToolTipModule, NzSkeletonComponent, NzSkeletonModule, SliderHandle, NzSliderComponent, NzSliderModule, NzSliderService, NzSliderHandleComponent, NzSliderMarksComponent, Marks, MarksArray, NzSliderStepComponent, NzSliderTrackComponent, NzPopoverComponent, NzPopoverDirective, NzPopoverModule, NZ_NOTIFICATION_DEFAULT_CONFIG, NZ_NOTIFICATION_CONFIG, NZ_NOTIFICATION_DEFAULT_CONFIG_PROVIDER, NzNotificationComponent, NzNotificationModule, NzNotificationService$$1 as NzNotificationService, NzNotificationContainerComponent, NzPopconfirmComponent, NzPopconfirmDirective, NzPopconfirmModule, NzModalComponent, NzModalRef, NzModalModule, NzModalService, NZ_MODAL_CONFIG, NzCascaderModule, NzCascaderComponent, NzTreeModule, NzTreeComponent, NzTreeNodeComponent, NzTreeNode, NzTreeService, isCheckDisabled, isInArray, NzTreeSelectComponent, NzTreeSelectModule, VERSION, NzWaveRenderer, NzWaveDirective, NzWaveModule, isNotNil, shallowEqual, isInteger, isEmpty, filterNotEmptyNode, isNonEmptyString, isTemplateRef, isComponent, toBoolean, toNumber, toCssPixel, valueFunctionProp, InputBoolean, getRegExp, getMentions, NzGlobalMonitorService, getCaretCoordinates, createDebugEle, properties, throttleByAnimationFrameDecorator, NzAffixComponent as ɵcv, NzAffixModule as ɵcu, NzAlertComponent as ɵen, NzAlertModule as ɵem, NzAnchorLinkComponent as ɵct, NzAnchorComponent as ɵcp, NzAnchorModule as ɵco, NzAutocompleteOptgroupComponent as ɵii, NzAutocompleteOptionComponent as ɵif, NZ_AUTOCOMPLETE_VALUE_ACCESSOR as ɵig, NzAutocompleteTriggerDirective as ɵih, NzAutocompleteComponent as ɵie, NzAutocompleteModule as ɵid, NzAvatarComponent as ɵfg, NzAvatarModule as ɵff, NzBackTopComponent as ɵjr, NzBackTopModule as ɵjq, NzBadgeComponent as ɵel, NzBadgeModule as ɵek, NzBreadCrumbItemComponent as ɵdi, NzBreadCrumbComponent as ɵdh, NzBreadCrumbModule as ɵdg, NzButtonGroupComponent as ɵh, NzButtonComponent as ɵb, NzButtonModule as ɵa, NzDateCellDirective as ɵx, NzDateFullCellDirective as ɵz, NzMonthCellDirective as ɵy, NzMonthFullCellDirective as ɵba, NzCalendarHeaderComponent as ɵm, NzCalendarComponent as ɵw, NzCalendarModule as ɵl, NzCardGridDirective as ɵfc, NzCardLoadingComponent as ɵfe, NzCardMetaComponent as ɵfd, NzCardTabComponent as ɵfb, NzCardComponent as ɵfa, NzCardModule as ɵez, NzCarouselContentDirective as ɵfq, NzCarouselComponent as ɵfp, NzCarouselModule as ɵfo, NzCascaderComponent as ɵjt, NzCascaderModule as ɵjs, NzCheckboxGroupComponent as ɵdu, NzCheckboxWrapperComponent as ɵdt, NzCheckboxComponent as ɵds, NzCheckboxModule as ɵdr, NzCollapsePanelComponent as ɵfs, NzCollapseComponent as ɵft, NzCollapseModule as ɵfr, dropDownAnimation as ɵce, fadeAnimation as ɵeg, selectDropDownAnimation as ɵka, selectTagAnimation as ɵkb, NzScrollStrategyOptions as ɵhk, NzScrollService as ɵcq, SCROLL_SERVICE_PROVIDER as ɵcs, SCROLL_SERVICE_PROVIDER_FACTORY as ɵcr, NzMatchMediaService as ɵdf, NzMeasureScrollbarService as ɵfx, NzUpdateHostClassService as ɵc, InputBoolean as ɵgy, LoggerModule as ɵbc, LOGGER_SERVICE_PROVIDER as ɵv, LOGGER_SERVICE_PROVIDER_FACTORY as ɵu, LoggerService as ɵs, NZ_LOGGER_STATE as ɵt, throttleByAnimationFrameDecorator as ɵcw, NzWaveDirective as ɵj, NzWaveModule as ɵi, AbstractPickerComponent as ɵgx, NzDatePickerComponent as ɵgv, NzDatePickerModule as ɵgc, DateRangePickerComponent as ɵgw, HeaderPickerComponent as ɵhc, CalendarFooterComponent as ɵgk, CalendarHeaderComponent as ɵgi, CalendarInputComponent as ɵgj, OkButtonComponent as ɵgl, TimePickerButtonComponent as ɵgm, TodayButtonComponent as ɵgn, DateTableComponent as ɵgo, DecadePanelComponent as ɵgs, LibPackerModule as ɵgd, MonthPanelComponent as ɵgq, MonthTableComponent as ɵgr, DateRangePopupComponent as ɵgu, InnerPopupComponent as ɵgt, YearPanelComponent as ɵgp, NzMonthPickerComponent as ɵhb, NzPickerComponent as ɵgz, NzRangePickerComponent as ɵha, NzWeekPickerComponent as ɵhe, NzYearPickerComponent as ɵhd, NzDividerComponent as ɵhg, NzDividerModule as ɵhf, NzDrawerRef as ɵhj, NzDrawerComponent as ɵhi, NzDrawerModule as ɵhh, NzDrawerService$$1 as ɵhl, NzDropDownButtonComponent as ɵcg, NzDropdownContextComponent as ɵcy, NzDropDownComponent as ɵcd, NzDropDownDirective as ɵcf, NzDropDownModule as ɵcx, NzFormControlComponent as ɵhr, NzFormExplainComponent as ɵhs, NzFormExtraComponent as ɵhn, NzFormItemComponent as ɵhq, NzFormLabelComponent as ɵho, NzFormSplitComponent as ɵhu, NzFormTextComponent as ɵht, NzFormDirective as ɵhp, NzFormModule as ɵhm, NzColComponent as ɵbv, NzColDirective as ɵbu, NzGridModule as ɵbs, NzRowComponent as ɵbt, NzRowDirective as ɵbw, NzI18nModule as ɵbb, NzI18nPipe as ɵbd, NZ_I18N_SERVICE_PROVIDER as ɵp, NZ_LOCALE_SERVICE_PROVIDER_FACTORY as ɵo, NzI18nService as ɵn, NZ_I18N as ɵq, NzIconDirective as ɵd, NzIconModule as ɵk, NZ_ICONS$$1 as ɵe, NZ_ICON_DEFAULT_TWOTONE_COLOR$$1 as ɵf, NzIconService$$1 as ɵg, NzInputNumberComponent as ɵdw, NzInputNumberModule as ɵdv, NzInputGroupComponent as ɵdq, NzInputDirective as ɵdp, NzInputModule as ɵdo, NzContentComponent as ɵdc, NzFooterComponent as ɵdd, NzHeaderComponent as ɵdb, NzLayoutComponent as ɵda, NzLayoutModule as ɵcz, NzSiderComponent as ɵde, NzListItemMetaComponent as ɵhy, NzListItemComponent as ɵhx, NzListComponent as ɵhw, NzListModule as ɵhv, NzMentionSuggestionDirective as ɵcn, NZ_MENTION_TRIGGER_ACCESSOR as ɵcl, NzMentionTriggerDirective as ɵcm, NzMentionComponent as ɵck, NzMentionModule as ɵcj, NzMenuDividerDirective as ɵch, NzMenuGroupComponent as ɵci, NzMenuItemDirective as ɵcb, NzMenuDirective as ɵca, NzMenuModule as ɵbz, NzSubMenuComponent as ɵcc, NZ_MESSAGE_CONFIG as ɵip, NZ_MESSAGE_DEFAULT_CONFIG as ɵio, NZ_MESSAGE_DEFAULT_CONFIG_PROVIDER as ɵiq, NzMessageContainerComponent as ɵim, NzMessageComponent as ɵir, NzMessageModule as ɵil, NzMessageBaseService$$1 as ɵis, NzMessageService$$1 as ɵit, CssUnitPipe as ɵjo, NZ_MODAL_CONFIG as ɵjl, NzModalControlService as ɵjn, NzModalRef as ɵjk, NzModalComponent as ɵjj, NzModalModule as ɵji, NzModalService as ɵjp, NZ_NOTIFICATION_CONFIG as ɵiz, NZ_NOTIFICATION_DEFAULT_CONFIG as ɵiy, NZ_NOTIFICATION_DEFAULT_CONFIG_PROVIDER as ɵja, NzNotificationContainerComponent as ɵiw, NzNotificationComponent as ɵiv, NzNotificationModule as ɵiu, NzNotificationService$$1 as ɵjb, NzPaginationComponent as ɵdk, NzPaginationModule as ɵdj, NzPopconfirmComponent as ɵjg, NzPopconfirmDirective as ɵjh, NzPopconfirmModule as ɵjf, NzPopoverComponent as ɵjd, NzPopoverDirective as ɵje, NzPopoverModule as ɵjc, NzProgressComponent as ɵer, NzProgressModule as ɵeq, NzRadioButtonComponent as ɵbh, NzRadioGroupComponent as ɵbg, NzRadioComponent as ɵbf, NzRadioModule as ɵbe, NzRateComponent as ɵej, NzRateModule as ɵei, NzOptionContainerComponent as ɵbo, NzOptionGroupComponent as ɵbq, NzOptionLiComponent as ɵbp, NzOptionComponent as ɵbl, NzOptionPipe as ɵbj, NzSubOptionPipe as ɵbk, NzSelectTopControlComponent as ɵbn, NzSelectUnselectableDirective as ɵbr, NzSelectComponent as ɵbm, NzSelectModule as ɵbi, NzSkeletonComponent as ɵkd, NzSkeletonModule as ɵkc, NzSliderHandleComponent as ɵeb, NzSliderMarksComponent as ɵed, NzSliderStepComponent as ɵec, NzSliderTrackComponent as ɵea, NzSliderComponent as ɵdy, NzSliderModule as ɵdx, NzSliderService as ɵdz, NzSpinComponent as ɵep, NzSpinModule as ɵeo, NzStepComponent as ɵdn, NzStepsComponent as ɵdm, NzStepsModule as ɵdl, NzSwitchComponent as ɵby, NzSwitchModule as ɵbx, NzTableComponent as ɵfv, NzTableModule as ɵfu, NzTbodyDirective as ɵga, NzTdComponent as ɵfy, NzThComponent as ɵfw, NzTheadComponent as ɵfz, NzTrDirective as ɵgb, NzTabBodyComponent as ɵey, NzTabLabelDirective as ɵew, NzTabComponent as ɵet, NzTabsInkBarDirective as ɵex, NzTabsNavComponent as ɵev, NzTabsModule as ɵes, NzTabSetComponent as ɵeu, NzTagComponent as ɵik, NzTagModule as ɵij, NzTimePickerPanelComponent as ɵgg, NzTimePickerComponent as ɵgf, NzTimePickerModule as ɵge, NzTimeValueAccessorDirective as ɵgh, NzTimelineItemComponent as ɵfi, NzTimelineComponent as ɵfj, NzTimelineModule as ɵfh, NzToolTipComponent as ɵef, NzTooltipDirective as ɵeh, NzToolTipModule as ɵee, NzTransferListComponent as ɵfm, NzTransferSearchComponent as ɵfn, NzTransferComponent as ɵfl, NzTransferModule as ɵfk, NzTreeSelectComponent as ɵjz, NzTreeSelectModule as ɵjy, NzTreeNodeComponent as ɵjx, NzTreeComponent as ɵjv, NzTreeModule as ɵju, NzTreeService as ɵjw, NzUploadBtnComponent as ɵib, NzUploadListComponent as ɵic, NzUploadComponent as ɵia, NzUploadModule as ɵhz };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctem9ycm8tYW50ZC5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vbmctem9ycm8tYW50ZC9jb3JlL3BvbHlmaWxsL3JlcXVlc3QtYW5pbWF0aW9uLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2NvcmUvc2Nyb2xsL256LXNjcm9sbC5zZXJ2aWNlLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2NvcmUvdXRpbC9jaGVjay50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9jb3JlL3V0aWwvY29udmVydC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9jb3JlL3V0aWwvdGhyb3R0bGVCeUFuaW1hdGlvbkZyYW1lLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2FmZml4L256LWFmZml4LmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9hZmZpeC9uei1hZmZpeC5tb2R1bGUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaWNvbi9uei1pY29uLnNlcnZpY2UudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaWNvbi9uei1pY29uLmRpcmVjdGl2ZS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pY29uL256LWljb24ubW9kdWxlLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2NvcmUvYW5pbWF0aW9uL2ZhZGUtYW5pbWF0aW9ucy50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9hbGVydC9uei1hbGVydC5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvYWxlcnQvbnotYWxlcnQubW9kdWxlLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2FuY2hvci9uei1hbmNob3IuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2FuY2hvci9uei1hbmNob3ItbGluay5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvYW5jaG9yL256LWFuY2hvci5tb2R1bGUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvYXV0by1jb21wbGV0ZS9uei1hdXRvY29tcGxldGUtb3B0Z3JvdXAuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2F1dG8tY29tcGxldGUvbnotYXV0b2NvbXBsZXRlLW9wdGlvbi5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvY29yZS9hbmltYXRpb24vZHJvcGRvd24tYW5pbWF0aW9ucy50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9hdXRvLWNvbXBsZXRlL256LWF1dG9jb21wbGV0ZS5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvYXV0by1jb21wbGV0ZS9uei1hdXRvY29tcGxldGUtdHJpZ2dlci5kaXJlY3RpdmUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvYXV0by1jb21wbGV0ZS9uei1hdXRvY29tcGxldGUubW9kdWxlLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2NvcmUvc2VydmljZXMvdXBkYXRlLWhvc3QtY2xhc3Muc2VydmljZS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9hdmF0YXIvbnotYXZhdGFyLmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9hdmF0YXIvbnotYXZhdGFyLm1vZHVsZS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9iYWNrLXRvcC9uei1iYWNrLXRvcC5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvYmFjay10b3AvbnotYmFjay10b3AubW9kdWxlLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2JhZGdlL256LWJhZGdlLmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9iYWRnZS9uei1iYWRnZS5tb2R1bGUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvYnJlYWRjcnVtYi9uei1icmVhZGNydW1iLmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9icmVhZGNydW1iL256LWJyZWFkY3J1bWItaXRlbS5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvYnJlYWRjcnVtYi9uei1icmVhZGNydW1iLm1vZHVsZS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9jb3JlL3dhdmUvbnotd2F2ZS1yZW5kZXJlci50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9jb3JlL3dhdmUvbnotd2F2ZS5kaXJlY3RpdmUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvY29yZS93YXZlL256LXdhdmUubW9kdWxlLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2J1dHRvbi9uei1idXR0b24tZ3JvdXAuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2J1dHRvbi9uei1idXR0b24uY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2J1dHRvbi9uei1idXR0b24ubW9kdWxlLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2NvcmUvdXRpbC9sb2dnZXIvbG9nZ2VyLnNlcnZpY2UudHMiLCJuZzovL25nLXpvcnJvLWFudGQvY29yZS91dGlsL2xvZ2dlci9sb2dnZXIubW9kdWxlLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL2NhbGVuZGFyL3poX0NOLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL3RpbWUtcGlja2VyL3poX0NOLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL2RhdGUtcGlja2VyL3poX0NOLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL3BhZ2luYXRpb24vemhfQ04udHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvemhfQ04udHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9uei1pMThuLnRva2VuLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbnotaTE4bi5zZXJ2aWNlLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbnotaTE4bi5waXBlLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbnotaTE4bi5tb2R1bGUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvcmFkaW8vbnotcmFkaW8tZ3JvdXAuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL3JhZGlvL256LXJhZGlvLmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9yYWRpby9uei1yYWRpby1idXR0b24uY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL3JhZGlvL256LXJhZGlvLm1vZHVsZS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9zZWxlY3Qvbnotb3B0aW9uLmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9zZWxlY3Qvbnotb3B0aW9uLWxpLmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9zZWxlY3Qvbnotb3B0aW9uLnBpcGUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvc2VsZWN0L256LW9wdGlvbi1jb250YWluZXIuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL3NlbGVjdC9uei1vcHRpb24tZ3JvdXAuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL3NlbGVjdC9uei1zZWxlY3QtdG9wLWNvbnRyb2wuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL3NlbGVjdC9uei1zZWxlY3QtdW5zZWxlY3RhYmxlLmRpcmVjdGl2ZS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9zZWxlY3Qvbnotc2VsZWN0LmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9zZWxlY3Qvbnotc2VsZWN0Lm1vZHVsZS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9jYWxlbmRhci9uei1jYWxlbmRhci1jZWxscy50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9jYWxlbmRhci9uei1jYWxlbmRhci1oZWFkZXIuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2NhbGVuZGFyL256LWNhbGVuZGFyLmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9jYWxlbmRhci9uei1jYWxlbmRhci5tb2R1bGUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvY2FyZC9uei1jYXJkLWdyaWQuZGlyZWN0aXZlLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2NhcmQvbnotY2FyZC1sb2FkaW5nLmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9jYXJkL256LWNhcmQtbWV0YS5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvY2FyZC9uei1jYXJkLXRhYi5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvY2FyZC9uei1jYXJkLmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9jYXJkL256LWNhcmQubW9kdWxlLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2Nhcm91c2VsL256LWNhcm91c2VsLWNvbnRlbnQuZGlyZWN0aXZlLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2Nhcm91c2VsL256LWNhcm91c2VsLmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9jYXJvdXNlbC9uei1jYXJvdXNlbC5tb2R1bGUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvY29yZS91dGlsL2NhbGN1bGF0ZS1ub2RlLWhlaWdodC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pbnB1dC9uei1pbnB1dC5kaXJlY3RpdmUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaW5wdXQvbnotaW5wdXQtZ3JvdXAuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2lucHV0L256LWlucHV0Lm1vZHVsZS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9jb3JlL292ZXJsYXkvb3ZlcmxheS1wb3NpdGlvbi1tYXAudHMiLCJuZzovL25nLXpvcnJvLWFudGQvY2FzY2FkZXIvbnotY2FzY2FkZXIuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2Nhc2NhZGVyL256LWNhc2NhZGVyLm1vZHVsZS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9jaGVja2JveC9uei1jaGVja2JveC1ncm91cC5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvY2hlY2tib3gvbnotY2hlY2tib3gtd3JhcHBlci5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvY2hlY2tib3gvbnotY2hlY2tib3guY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2NoZWNrYm94L256LWNoZWNrYm94Lm1vZHVsZS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9jb2xsYXBzZS9uei1jb2xsYXBzZS5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvY29sbGFwc2UvbnotY29sbGFwc2UtcGFuZWwuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2NvbGxhcHNlL256LWNvbGxhcHNlLm1vZHVsZS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC90aW1lLXBpY2tlci9uei10aW1lLXZhbHVlLWFjY2Vzc29yLmRpcmVjdGl2ZS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC90aW1lLXBpY2tlci90aW1lLWhvbGRlci50cyIsIm5nOi8vbmctem9ycm8tYW50ZC90aW1lLXBpY2tlci9uei10aW1lLXBpY2tlci1wYW5lbC5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvdGltZS1waWNrZXIvbnotdGltZS1waWNrZXIuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL3RpbWUtcGlja2VyL256LXRpbWUtcGlja2VyLm1vZHVsZS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9kYXRlLXBpY2tlci9saWIvY2FsZW5kYXIvY2FsZW5kYXItZm9vdGVyLmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9kYXRlLXBpY2tlci9saWIvY2FuZHktZGF0ZS91dGlsLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2RhdGUtcGlja2VyL2xpYi9jYW5keS1kYXRlL2NhbmR5LWRhdGUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvZGF0ZS1waWNrZXIvbGliL2NhbGVuZGFyL2NhbGVuZGFyLWhlYWRlci5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvZGF0ZS1waWNrZXIvbGliL2NhbGVuZGFyL2NhbGVuZGFyLWlucHV0LmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9kYXRlLXBpY2tlci9saWIvY2FsZW5kYXIvb2stYnV0dG9uLmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9kYXRlLXBpY2tlci9saWIvY2FsZW5kYXIvdGltZS1waWNrZXItYnV0dG9uLmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9kYXRlLXBpY2tlci9saWIvY2FsZW5kYXIvdG9kYXktYnV0dG9uLmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9kYXRlLXBpY2tlci9saWIvZGF0ZS9kYXRlLXRhYmxlLmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9kYXRlLXBpY2tlci9saWIvZGVjYWRlL2RlY2FkZS1wYW5lbC5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvZGF0ZS1waWNrZXIvbGliL21vbnRoL21vbnRoLXBhbmVsLmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9kYXRlLXBpY2tlci9saWIvbW9udGgvbW9udGgtdGFibGUuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2RhdGUtcGlja2VyL2xpYi91dGlsLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2RhdGUtcGlja2VyL2xpYi9wb3B1cHMvZGF0ZS1yYW5nZS1wb3B1cC5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvZGF0ZS1waWNrZXIvbGliL3BvcHVwcy9pbm5lci1wb3B1cC5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvZGF0ZS1waWNrZXIvbGliL3llYXIveWVhci1wYW5lbC5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvZGF0ZS1waWNrZXIvbGliL2xpYi1wYWNrZXIubW9kdWxlLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2RhdGUtcGlja2VyL3BpY2tlci5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvZGF0ZS1waWNrZXIvYWJzdHJhY3QtcGlja2VyLmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9kYXRlLXBpY2tlci9kYXRlLXJhbmdlLXBpY2tlci5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvZGF0ZS1waWNrZXIvZGF0ZS1waWNrZXIuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2RhdGUtcGlja2VyL2hlYWRlci1waWNrZXIuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2RhdGUtcGlja2VyL21vbnRoLXBpY2tlci5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvZGF0ZS1waWNrZXIvcmFuZ2UtcGlja2VyLmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9kYXRlLXBpY2tlci93ZWVrLXBpY2tlci5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvZGF0ZS1waWNrZXIveWVhci1waWNrZXIuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2RhdGUtcGlja2VyL2RhdGUtcGlja2VyLm1vZHVsZS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9kaXZpZGVyL256LWRpdmlkZXIuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2RpdmlkZXIvbnotZGl2aWRlci5tb2R1bGUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvY29yZS9zZXJ2aWNlcy9uei1tZWFzdXJlLXNjcm9sbGJhci5zZXJ2aWNlLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2NvcmUvb3ZlcmxheS9zY3JvbGwvbnotYmxvY2stc2Nyb2xsLXN0cmF0ZWd5LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2NvcmUvb3ZlcmxheS9zY3JvbGwvbnotc2Nyb2xsLXN0cmF0ZWd5LW9wdGlvbnMudHMiLCJuZzovL25nLXpvcnJvLWFudGQvZHJhd2VyL256LWRyYXdlci1yZWYudHMiLCJuZzovL25nLXpvcnJvLWFudGQvZHJhd2VyL256LWRyYXdlci5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvZHJhd2VyL256LWRyYXdlci5zZXJ2aWNlLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2RyYXdlci9uei1kcmF3ZXIubW9kdWxlLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL21lbnUvbnotbWVudS1kaXZpZGVyLmRpcmVjdGl2ZS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9tZW51L256LW1lbnUtZ3JvdXAuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL21lbnUvbnotbWVudS5kaXJlY3RpdmUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvZHJvcGRvd24vbnotZHJvcGRvd24uZGlyZWN0aXZlLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2Ryb3Bkb3duL256LWRyb3Bkb3duLmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9kcm9wZG93bi9uei1kcm9wZG93bi1idXR0b24uY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL21lbnUvbnotc3VibWVudS5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvbWVudS9uei1tZW51LWl0ZW0uZGlyZWN0aXZlLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL21lbnUvbnotbWVudS5tb2R1bGUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvZHJvcGRvd24vbnotZHJvcGRvd24tY29udGV4dC5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvZHJvcGRvd24vbnotZHJvcGRvd24ubW9kdWxlLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2NvcmUvcG9seWZpbGwvbWF0Y2gtbWVkaWEudHMiLCJuZzovL25nLXpvcnJvLWFudGQvZ3JpZC9uei1yb3cuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2dyaWQvbnotcm93LmRpcmVjdGl2ZS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9ncmlkL256LWNvbC5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvZ3JpZC9uei1jb2wuZGlyZWN0aXZlLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2dyaWQvbnotZ3JpZC5tb2R1bGUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvZm9ybS9uei1mb3JtLWNvbnRyb2wuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2Zvcm0vbnotZm9ybS1pdGVtLmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9mb3JtL256LWZvcm0tZXhwbGFpbi5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvZm9ybS9uei1mb3JtLWV4dHJhLmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9mb3JtL256LWZvcm0tbGFiZWwuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2Zvcm0vbnotZm9ybS1zcGxpdC5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvZm9ybS9uei1mb3JtLXRleHQuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2Zvcm0vbnotZm9ybS5kaXJlY3RpdmUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvZm9ybS9uei1mb3JtLm1vZHVsZS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pbnB1dC1udW1iZXIvbnotaW5wdXQtbnVtYmVyLmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pbnB1dC1udW1iZXIvbnotaW5wdXQtbnVtYmVyLm1vZHVsZS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9jb3JlL3NlcnZpY2VzL256LW1hdGNoLW1lZGlhLnNlcnZpY2UudHMiLCJuZzovL25nLXpvcnJvLWFudGQvbGF5b3V0L256LWNvbnRlbnQuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2xheW91dC9uei1mb290ZXIuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2xheW91dC9uei1oZWFkZXIuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2xheW91dC9uei1sYXlvdXQuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2xheW91dC9uei1zaWRlci5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvbGF5b3V0L256LWxheW91dC5tb2R1bGUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvc3Bpbi9uei1zcGluLmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9zcGluL256LXNwaW4ubW9kdWxlLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2xpc3QvbnotbGlzdC1pdGVtLW1ldGEuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2xpc3QvbnotbGlzdC1pdGVtLmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9saXN0L256LWxpc3QuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2xpc3QvbnotbGlzdC5tb2R1bGUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvbWVudGlvbi9tZW50aW9uLXN1Z2dlc3Rpb25zLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL21lbnRpb24vbWVudGlvbi10cmlnZ2VyLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2NvcmUvdXRpbC9nZXRNZW50aW9ucy50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9jb3JlL3V0aWwvdGV4dGFyZWEtY2FyZXQtcG9zaXRpb24udHMiLCJuZzovL25nLXpvcnJvLWFudGQvbWVudGlvbi9tZW50aW9uLmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9tZW50aW9uL21lbnRpb24ubW9kdWxlLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL21lc3NhZ2UvbnotbWVzc2FnZS1jb25maWcudHMiLCJuZzovL25nLXpvcnJvLWFudGQvbWVzc2FnZS9uei1tZXNzYWdlLWNvbnRhaW5lci5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvbWVzc2FnZS9uei1tZXNzYWdlLmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9tZXNzYWdlL256LW1lc3NhZ2Uuc2VydmljZS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9tZXNzYWdlL256LW1lc3NhZ2UubW9kdWxlLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL21vZGFsL2Nzcy11bml0LnBpcGUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvbW9kYWwvbnotbW9kYWwtY29udHJvbC5zZXJ2aWNlLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL21vZGFsL21vZGFsLXV0aWwudHMiLCJuZzovL25nLXpvcnJvLWFudGQvbW9kYWwvbnotbW9kYWwtY29uZmlnLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL21vZGFsL256LW1vZGFsLXJlZi5jbGFzcy50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9tb2RhbC9uei1tb2RhbC5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvbW9kYWwvbnotbW9kYWwuc2VydmljZS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9tb2RhbC9uei1tb2RhbC5tb2R1bGUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvbm90aWZpY2F0aW9uL256LW5vdGlmaWNhdGlvbi1jb25maWcudHMiLCJuZzovL25nLXpvcnJvLWFudGQvbm90aWZpY2F0aW9uL256LW5vdGlmaWNhdGlvbi1jb250YWluZXIuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL25vdGlmaWNhdGlvbi9uei1ub3RpZmljYXRpb24uY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL25vdGlmaWNhdGlvbi9uei1ub3RpZmljYXRpb24uc2VydmljZS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9ub3RpZmljYXRpb24vbnotbm90aWZpY2F0aW9uLm1vZHVsZS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9wYWdpbmF0aW9uL256LXBhZ2luYXRpb24uY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL3BhZ2luYXRpb24vbnotcGFnaW5hdGlvbi5tb2R1bGUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvdG9vbHRpcC9uei10b29sdGlwLmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9wb3Bjb25maXJtL256LXBvcGNvbmZpcm0uY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL3Rvb2x0aXAvbnotdG9vbHRpcC5kaXJlY3RpdmUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvcG9wY29uZmlybS9uei1wb3Bjb25maXJtLmRpcmVjdGl2ZS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9wb3Bjb25maXJtL256LXBvcGNvbmZpcm0ubW9kdWxlLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL3BvcG92ZXIvbnotcG9wb3Zlci5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvcG9wb3Zlci9uei1wb3BvdmVyLmRpcmVjdGl2ZS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9wb3BvdmVyL256LXBvcG92ZXIubW9kdWxlLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL3Byb2dyZXNzL256LXByb2dyZXNzLmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9wcm9ncmVzcy9uei1wcm9ncmVzcy5tb2R1bGUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvcmF0ZS9uei1yYXRlLmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9yYXRlL256LXJhdGUubW9kdWxlLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL3NrZWxldG9uL256LXNrZWxldG9uLmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9za2VsZXRvbi9uei1za2VsZXRvbi5tb2R1bGUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvdG9vbHRpcC9uei10b29sdGlwLm1vZHVsZS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9zbGlkZXIvbnotc2xpZGVyLW1hcmtzLmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9zbGlkZXIvbnotc2xpZGVyLnNlcnZpY2UudHMiLCJuZzovL25nLXpvcnJvLWFudGQvc2xpZGVyL256LXNsaWRlci5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvc2xpZGVyL256LXNsaWRlci1oYW5kbGUuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL3NsaWRlci9uei1zbGlkZXItc3RlcC5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvc2xpZGVyL256LXNsaWRlci10cmFjay5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvc2xpZGVyL256LXNsaWRlci5tb2R1bGUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvc3RlcHMvbnotc3RlcC5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvc3RlcHMvbnotc3RlcHMuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL3N0ZXBzL256LXN0ZXBzLm1vZHVsZS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9zd2l0Y2gvbnotc3dpdGNoLmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9zd2l0Y2gvbnotc3dpdGNoLm1vZHVsZS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC90YWJsZS9uei10aC5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvdGFibGUvbnotdGFibGUuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL3RhYmxlL256LXRib2R5LmRpcmVjdGl2ZS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC90YWJsZS9uei10ZC5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvdGFibGUvbnotdGhlYWQuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL3RhYmxlL256LXRyLmRpcmVjdGl2ZS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC90YWJsZS9uei10YWJsZS5tb2R1bGUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvdGFicy9uei10YWItYm9keS5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvdGFicy9uei10YWItbGFiZWwuZGlyZWN0aXZlLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL3RhYnMvbnotdGFicy1pbmstYmFyLmRpcmVjdGl2ZS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC90YWJzL256LXRhYnMtbmF2LmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC90YWJzL256LXRhYnNldC5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvdGFicy9uei10YWIuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL3RhYnMvbnotdGFicy5tb2R1bGUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvdGFnL256LXRhZy5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvdGFnL256LXRhZy5tb2R1bGUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvdGltZWxpbmUvbnotdGltZWxpbmUtaXRlbS5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvdGltZWxpbmUvbnotdGltZWxpbmUuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL3RpbWVsaW5lL256LXRpbWVsaW5lLm1vZHVsZS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC90cmFuc2Zlci9uei10cmFuc2Zlci1saXN0LmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC90cmFuc2Zlci9uei10cmFuc2Zlci1zZWFyY2guY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL3RyYW5zZmVyL256LXRyYW5zZmVyLmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC90cmFuc2Zlci9uei10cmFuc2Zlci5tb2R1bGUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvdHJlZS9uei10cmVlLW5vZGUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvdHJlZS9uei10cmVlLXV0aWwudHMiLCJuZzovL25nLXpvcnJvLWFudGQvdHJlZS9uei10cmVlLnNlcnZpY2UudHMiLCJuZzovL25nLXpvcnJvLWFudGQvdHJlZS9uei10cmVlLW5vZGUuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL3RyZWUvbnotdHJlZS5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvdHJlZS9uei10cmVlLm1vZHVsZS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9jb3JlL2FuaW1hdGlvbi9zZWxlY3QtZHJvcGRvd24tYW5pbWF0aW9ucy50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9jb3JlL2FuaW1hdGlvbi9zZWxlY3QtdGFnLWFuaW1hdGlvbnMudHMiLCJuZzovL25nLXpvcnJvLWFudGQvdHJlZS1zZWxlY3QvbnotdHJlZS1zZWxlY3QuY29tcG9uZW50LnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL3RyZWUtc2VsZWN0L256LXRyZWUtc2VsZWN0Lm1vZHVsZS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC91cGxvYWQvbnotdXBsb2FkLWJ0bi5jb21wb25lbnQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvdXBsb2FkL256LXVwbG9hZC1saXN0LmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC91cGxvYWQvbnotdXBsb2FkLmNvbXBvbmVudC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC91cGxvYWQvbnotdXBsb2FkLm1vZHVsZS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9kcm9wZG93bi9uei1kcm9wZG93bi5zZXJ2aWNlLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL2NhbGVuZGFyL2FyX0VHLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL3RpbWUtcGlja2VyL2FyX0VHLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL2RhdGUtcGlja2VyL2FyX0VHLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL3BhZ2luYXRpb24vYXJfRUcudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvYXJfRUcudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvY2FsZW5kYXIvYmdfQkcudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvdGltZS1waWNrZXIvYmdfQkcudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvZGF0ZS1waWNrZXIvYmdfQkcudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvcGFnaW5hdGlvbi9iZ19CRy50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9iZ19CRy50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9jYWxlbmRhci9jYV9FUy50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy90aW1lLXBpY2tlci9jYV9FUy50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9kYXRlLXBpY2tlci9jYV9FUy50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9wYWdpbmF0aW9uL2NhX0VTLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL2NhX0VTLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL2NhbGVuZGFyL2NzX0NaLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL3RpbWUtcGlja2VyL2NzX0NaLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL2RhdGUtcGlja2VyL2NzX0NaLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL3BhZ2luYXRpb24vY3NfQ1oudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvY3NfQ1oudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvY2FsZW5kYXIvZGVfREUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvdGltZS1waWNrZXIvZGVfREUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvZGF0ZS1waWNrZXIvZGVfREUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvcGFnaW5hdGlvbi9kZV9ERS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9kZV9ERS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9jYWxlbmRhci9lbF9HUi50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy90aW1lLXBpY2tlci9lbF9HUi50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9kYXRlLXBpY2tlci9lbF9HUi50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9wYWdpbmF0aW9uL2VsX0dSLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL2VsX0dSLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL2NhbGVuZGFyL2VuX0dCLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL3RpbWUtcGlja2VyL2VuX0dCLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL2RhdGUtcGlja2VyL2VuX0dCLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL3BhZ2luYXRpb24vZW5fR0IudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvZW5fR0IudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvY2FsZW5kYXIvZW5fVVMudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvdGltZS1waWNrZXIvZW5fVVMudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvZGF0ZS1waWNrZXIvZW5fVVMudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvcGFnaW5hdGlvbi9lbl9VUy50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9lbl9VUy50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9jYWxlbmRhci9lc19FUy50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy90aW1lLXBpY2tlci9lc19FUy50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9kYXRlLXBpY2tlci9lc19FUy50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9wYWdpbmF0aW9uL2VzX0VTLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL2VzX0VTLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL2NhbGVuZGFyL2V0X0VFLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL3RpbWUtcGlja2VyL2V0X0VFLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL2RhdGUtcGlja2VyL2V0X0VFLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL3BhZ2luYXRpb24vZXRfRUUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvZXRfRUUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvY2FsZW5kYXIvZmFfSVIudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvdGltZS1waWNrZXIvZmFfSVIudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvZGF0ZS1waWNrZXIvZmFfSVIudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvcGFnaW5hdGlvbi9mYV9JUi50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9mYV9JUi50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9jYWxlbmRhci9maV9GSS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy90aW1lLXBpY2tlci9maV9GSS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9kYXRlLXBpY2tlci9maV9GSS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9wYWdpbmF0aW9uL2ZpX0ZJLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL2ZpX0ZJLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL2NhbGVuZGFyL2ZyX0JFLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL3RpbWUtcGlja2VyL2ZyX0JFLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL2RhdGUtcGlja2VyL2ZyX0JFLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL3BhZ2luYXRpb24vZnJfQkUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvZnJfQkUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvY2FsZW5kYXIvZnJfRlIudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvdGltZS1waWNrZXIvZnJfRlIudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvZGF0ZS1waWNrZXIvZnJfRlIudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvcGFnaW5hdGlvbi9mcl9GUi50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9mcl9GUi50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9jYWxlbmRhci9pc19JUy50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy90aW1lLXBpY2tlci9pc19JUy50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9kYXRlLXBpY2tlci9pc19JUy50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9wYWdpbmF0aW9uL2lzX0lTLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL2lzX0lTLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL2NhbGVuZGFyL2l0X0lULnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL3RpbWUtcGlja2VyL2l0X0lULnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL2RhdGUtcGlja2VyL2l0X0lULnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL3BhZ2luYXRpb24vaXRfSVQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvaXRfSVQudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvY2FsZW5kYXIvamFfSlAudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvdGltZS1waWNrZXIvamFfSlAudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvZGF0ZS1waWNrZXIvamFfSlAudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvcGFnaW5hdGlvbi9qYV9KUC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9qYV9KUC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9jYWxlbmRhci9rb19LUi50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy90aW1lLXBpY2tlci9rb19LUi50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9kYXRlLXBpY2tlci9rb19LUi50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9wYWdpbmF0aW9uL2tvX0tSLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL2tvX0tSLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL2NhbGVuZGFyL25iX05PLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL3RpbWUtcGlja2VyL25iX05PLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL2RhdGUtcGlja2VyL25iX05PLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL3BhZ2luYXRpb24vbmJfTk8udHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvbmJfTk8udHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvY2FsZW5kYXIvbmxfQkUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvdGltZS1waWNrZXIvbmxfQkUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvZGF0ZS1waWNrZXIvbmxfQkUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvcGFnaW5hdGlvbi9ubF9CRS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9ubF9CRS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9jYWxlbmRhci9ubF9OTC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy90aW1lLXBpY2tlci9ubF9OTC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9kYXRlLXBpY2tlci9ubF9OTC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9wYWdpbmF0aW9uL25sX05MLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL25sX05MLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL2NhbGVuZGFyL3BsX1BMLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL3RpbWUtcGlja2VyL3BsX1BMLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL2RhdGUtcGlja2VyL3BsX1BMLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL3BhZ2luYXRpb24vcGxfUEwudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvcGxfUEwudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvY2FsZW5kYXIvcHRfQlIudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvdGltZS1waWNrZXIvcHRfQlIudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvZGF0ZS1waWNrZXIvcHRfQlIudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvcGFnaW5hdGlvbi9wdF9CUi50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9wdF9CUi50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9jYWxlbmRhci9wdF9QVC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy90aW1lLXBpY2tlci9wdF9QVC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9kYXRlLXBpY2tlci9wdF9QVC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9wYWdpbmF0aW9uL3B0X1BULnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL3B0X1BULnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL2NhbGVuZGFyL3J1X1JVLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL3RpbWUtcGlja2VyL3J1X1JVLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL2RhdGUtcGlja2VyL3J1X1JVLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL3BhZ2luYXRpb24vcnVfUlUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvcnVfUlUudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvY2FsZW5kYXIvc2tfU0sudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvdGltZS1waWNrZXIvc2tfU0sudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvZGF0ZS1waWNrZXIvc2tfU0sudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvcGFnaW5hdGlvbi9za19TSy50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9za19TSy50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9jYWxlbmRhci9zcl9SUy50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy90aW1lLXBpY2tlci9zcl9SUy50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9kYXRlLXBpY2tlci9zcl9SUy50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9wYWdpbmF0aW9uL3NyX1JTLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL3NyX1JTLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL2NhbGVuZGFyL3N2X1NFLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL3RpbWUtcGlja2VyL3N2X1NFLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL2RhdGUtcGlja2VyL3N2X1NFLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL3BhZ2luYXRpb24vc3ZfU0UudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvc3ZfU0UudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvY2FsZW5kYXIvdGhfVEgudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvdGltZS1waWNrZXIvdGhfVEgudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvZGF0ZS1waWNrZXIvdGhfVEgudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvcGFnaW5hdGlvbi90aF9USC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy90aF9USC50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy90aW1lLXBpY2tlci90cl9UUi50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9kYXRlLXBpY2tlci90cl9UUi50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy90cl9UUi50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9jYWxlbmRhci91a19VQS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy90aW1lLXBpY2tlci91a19VQS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9kYXRlLXBpY2tlci91a19VQS50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy9wYWdpbmF0aW9uL3VrX1VBLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL3VrX1VBLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL2RhdGUtcGlja2VyL3ZpX1ZOLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2kxOG4vbGFuZ3VhZ2VzL3BhZ2luYXRpb24vdmlfVk4udHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvdGltZS1waWNrZXIvdmlfVk4udHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvdmlfVk4udHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvY2FsZW5kYXIvemhfVFcudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvdGltZS1waWNrZXIvemhfVFcudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvZGF0ZS1waWNrZXIvemhfVFcudHMiLCJuZzovL25nLXpvcnJvLWFudGQvaTE4bi9sYW5ndWFnZXMvcGFnaW5hdGlvbi96aF9UVy50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9pMThuL2xhbmd1YWdlcy96aF9UVy50cyIsIm5nOi8vbmctem9ycm8tYW50ZC92ZXJzaW9uLnRzIiwibmc6Ly9uZy16b3Jyby1hbnRkL2NvcmUvdXRpbC9uei1nbG9iYWwtbW9uaXRvci50cyIsIm5nOi8vbmctem9ycm8tYW50ZC9uZy16b3Jyby1hbnRkLm1vZHVsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0c2xpbnQ6ZGlzYWJsZTpuby1hbnkgdHlwZWRlZiBuby1pbnZhbGlkLXRoaXNcbmNvbnN0IGF2YWlsYWJsZVByZWZpeHMgPSBbJ21veicsICdtcycsICd3ZWJraXQnXTtcblxuZnVuY3Rpb24gcmVxdWVzdEFuaW1hdGlvbkZyYW1lUG9seWZpbGwoKTogdHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZSB7XG4gIGxldCBsYXN0VGltZSA9IDA7XG4gIHJldHVybiBmdW5jdGlvbiAoY2FsbGJhY2s6IEZyYW1lUmVxdWVzdENhbGxiYWNrKTogbnVtYmVyIHtcbiAgICBjb25zdCBjdXJyVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIGNvbnN0IHRpbWVUb0NhbGwgPSBNYXRoLm1heCgwLCAxNiAtIChjdXJyVGltZSAtIGxhc3RUaW1lKSk7XG4gICAgY29uc3QgaWQgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7IGNhbGxiYWNrKGN1cnJUaW1lICsgdGltZVRvQ2FsbCk7IH0sIHRpbWVUb0NhbGwpO1xuICAgIGxhc3RUaW1lID0gY3VyclRpbWUgKyB0aW1lVG9DYWxsO1xuICAgIHJldHVybiBpZDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0UmVxdWVzdEFuaW1hdGlvbkZyYW1lKCk6IHR5cGVvZiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUge1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gKCkgPT4gbnVsbDtcbiAgfVxuICBpZiAod2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSkge1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUvaXNzdWVzLzQ0NjVcbiAgICByZXR1cm4gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZS5iaW5kKHdpbmRvdyk7XG4gIH1cblxuICBjb25zdCBwcmVmaXggPSBhdmFpbGFibGVQcmVmaXhzLmZpbHRlcihrZXkgPT4gYCR7a2V5fVJlcXVlc3RBbmltYXRpb25GcmFtZWAgaW4gd2luZG93KVswXTtcblxuICByZXR1cm4gcHJlZml4XG4gICAgPyB3aW5kb3dbYCR7cHJlZml4fVJlcXVlc3RBbmltYXRpb25GcmFtZWBdXG4gICAgOiByZXF1ZXN0QW5pbWF0aW9uRnJhbWVQb2x5ZmlsbCgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lKGlkOiBudW1iZXIpOiBhbnkge1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAod2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShpZCk7XG4gIH1cbiAgY29uc3QgcHJlZml4ID0gYXZhaWxhYmxlUHJlZml4cy5maWx0ZXIoa2V5ID0+XG4gICAgYCR7a2V5fUNhbmNlbEFuaW1hdGlvbkZyYW1lYCBpbiB3aW5kb3cgfHwgYCR7a2V5fUNhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZWAgaW4gd2luZG93LFxuICApWzBdO1xuXG4gIHJldHVybiBwcmVmaXggP1xuICAgIChcbiAgICAgICh3aW5kb3cgYXMgYW55KVtgJHtwcmVmaXh9Q2FuY2VsQW5pbWF0aW9uRnJhbWVgXSB8fFxuICAgICAgKHdpbmRvdyBhcyBhbnkpW2Ake3ByZWZpeH1DYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWVgXVxuICAgICkuY2FsbCh0aGlzLCBpZCkgOiBjbGVhclRpbWVvdXQoaWQpO1xufVxuXG5leHBvcnQgY29uc3QgcmVxQW5pbUZyYW1lID0gZ2V0UmVxdWVzdEFuaW1hdGlvbkZyYW1lKCk7XG4iLCJpbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIE9wdGlvbmFsLCBQcm92aWRlciwgU2tpcFNlbGYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgcmVxQW5pbUZyYW1lIH0gZnJvbSAnLi4vcG9seWZpbGwvcmVxdWVzdC1hbmltYXRpb24nO1xuXG5leHBvcnQgdHlwZSBFYXN5aW5nRm4gPSAodDogbnVtYmVyLCBiOiBudW1iZXIsIGM6IG51bWJlciwgZDogbnVtYmVyKSA9PiBudW1iZXI7XG5cbmZ1bmN0aW9uIGVhc2VJbk91dEN1YmljKHQ6IG51bWJlciwgYjogbnVtYmVyLCBjOiBudW1iZXIsIGQ6IG51bWJlcik6IG51bWJlciB7XG4gIGNvbnN0IGNjID0gYyAtIGI7XG4gIGxldCB0dCA9IHQgLyAoZCAvIDIpO1xuICBpZiAodHQgPCAxKSB7XG4gICAgcmV0dXJuIGNjIC8gMiAqIHR0ICogdHQgKiB0dCArIGI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNjIC8gMiAqICgodHQgLT0gMikgKiB0dCAqIHR0ICsgMikgKyBiO1xuICB9XG59XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOelNjcm9sbFNlcnZpY2Uge1xuICBwcml2YXRlIGRvYzogRG9jdW1lbnQ7XG5cbiAgLyogdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueSAqL1xuICBjb25zdHJ1Y3RvcihASW5qZWN0KERPQ1VNRU5UKSBkb2M6IGFueSkge1xuICAgIHRoaXMuZG9jID0gZG9jO1xuICB9XG5cbiAgLyoqIMOowq7CvsOnwr3CriBgZWxgIMOmwrvCmsOlworCqMOmwp3CocOkwr3CjcOnwr3CriAqL1xuICBzZXRTY3JvbGxUb3AoZWw6IEVsZW1lbnQgfCBXaW5kb3csIHRvcFZhbHVlOiBudW1iZXIgPSAwKTogdm9pZCB7XG4gICAgaWYgKGVsID09PSB3aW5kb3cpIHtcbiAgICAgIHRoaXMuZG9jLmJvZHkuc2Nyb2xsVG9wID0gdG9wVmFsdWU7XG4gICAgICB0aGlzLmRvYy5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wID0gdG9wVmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIChlbCBhcyBFbGVtZW50KS5zY3JvbGxUb3AgPSB0b3BWYWx1ZTtcbiAgICB9XG4gIH1cblxuICAvKiogw6jCjsK3w6XCj8KWIGBlbGAgw6fCm8K4w6XCr8K5w6TCusKOw6jCp8KGw6fCqsKXw6jCt8Kdw6fCpsK7ICovXG4gIGdldE9mZnNldChlbDogRWxlbWVudCk6IHsgdG9wOiBudW1iZXIsIGxlZnQ6IG51bWJlciB9IHtcbiAgICBjb25zdCByZXQgPSB7XG4gICAgICB0b3AgOiAwLFxuICAgICAgbGVmdDogMFxuICAgIH07XG4gICAgaWYgKCFlbCB8fCAhZWwuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGgpIHJldHVybiByZXQ7XG5cbiAgICBjb25zdCByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgaWYgKHJlY3Qud2lkdGggfHwgcmVjdC5oZWlnaHQpIHtcbiAgICAgIGNvbnN0IGRvYyA9IGVsLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgcmV0LnRvcCA9IHJlY3QudG9wIC0gZG9jLmNsaWVudFRvcDtcbiAgICAgIHJldC5sZWZ0ID0gcmVjdC5sZWZ0IC0gZG9jLmNsaWVudExlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldC50b3AgPSByZWN0LnRvcDtcbiAgICAgIHJldC5sZWZ0ID0gcmVjdC5sZWZ0O1xuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKiogw6jCjsK3w6XCj8KWIGBlbGAgw6bCu8Kaw6XCisKow6bCncKhw6TCvcKNw6fCvcKuICovXG4gIC8vIFRPRE86IHJlbW92ZSAnfCBXaW5kb3cnIGFzIHRoZSBmYWxsYmFjayBhbHJlYWR5IGhhcHBlbnMgaGVyZVxuICBnZXRTY3JvbGwoZWw/OiBFbGVtZW50IHwgV2luZG93LCB0b3A6IGJvb2xlYW4gPSB0cnVlKTogbnVtYmVyIHtcbiAgICBjb25zdCB0YXJnZXQgPSBlbCA/IGVsIDogd2luZG93O1xuICAgIGNvbnN0IHByb3AgPSB0b3AgPyAncGFnZVlPZmZzZXQnIDogJ3BhZ2VYT2Zmc2V0JztcbiAgICBjb25zdCBtZXRob2QgPSB0b3AgPyAnc2Nyb2xsVG9wJyA6ICdzY3JvbGxMZWZ0JztcbiAgICBjb25zdCBpc1dpbmRvdyA9IHRhcmdldCA9PT0gd2luZG93O1xuICAgIGxldCByZXQgPSBpc1dpbmRvdyA/IHRhcmdldFsgcHJvcCBdIDogdGFyZ2V0WyBtZXRob2QgXTtcbiAgICBpZiAoaXNXaW5kb3cgJiYgdHlwZW9mIHJldCAhPT0gJ251bWJlcicpIHtcbiAgICAgIHJldCA9IHRoaXMuZG9jLmRvY3VtZW50RWxlbWVudFsgbWV0aG9kIF07XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICogw6TCvcK/w6fClMKow6XCisKow6fClMK7w6XCvcKiw6XCvMKPw6XCsMKGIGBlbGAgw6bCu8Kaw6XCisKow6jCh8Kzw6bCn8KQw6TCvcKNw6fCvcKuXG4gICAqXG4gICAqIEBwYXJhbSBjb250YWluZXJFbCDDpcKuwrnDpcKZwqjDr8K8wozDqcK7wpjDqMKuwqQgYHdpbmRvd2BcbiAgICogQHBhcmFtIHRhcmdldFRvcFZhbHVlIMOmwrvCmsOlworCqMOowofCs8OnwpvCrsOmwqDChyBgdG9wYCDDpcKAwrzDr8K8wozDqcK7wpjDqMKuwqTDr8K8wpoww6/CvMKMw6fCm8K4w6XCvcKTw6TCusKOw6nCocK2w6nCg8KoXG4gICAqIEBwYXJhbSBlYXNpbmcgw6XCisKow6TCvcKcw6fCrsKXw6bCs8KVw6/CvMKMw6nCu8KYw6jCrsKkw6/CvMKaYGVhc2VJbk91dEN1YmljYFxuICAgKiBAcGFyYW0gY2FsbGJhY2sgw6XCisKow6fClMK7w6fCu8KTw6bCncKfw6XCkMKOw6XCm8Kew6jCsMKDXG4gICAqL1xuICBzY3JvbGxUbyhcbiAgICBjb250YWluZXJFbDogRWxlbWVudCB8IFdpbmRvdyxcbiAgICB0YXJnZXRUb3BWYWx1ZTogbnVtYmVyID0gMCxcbiAgICBlYXNpbmc/OiBFYXN5aW5nRm4sXG4gICAgY2FsbGJhY2s/OiAoKSA9PiB2b2lkXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IHRhcmdldCA9IGNvbnRhaW5lckVsID8gY29udGFpbmVyRWwgOiB3aW5kb3c7XG4gICAgY29uc3Qgc2Nyb2xsVG9wID0gdGhpcy5nZXRTY3JvbGwodGFyZ2V0KTtcbiAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgIGNvbnN0IGZyYW1lRnVuYyA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IERhdGUubm93KCk7XG4gICAgICBjb25zdCB0aW1lID0gdGltZXN0YW1wIC0gc3RhcnRUaW1lO1xuICAgICAgdGhpcy5zZXRTY3JvbGxUb3AodGFyZ2V0LCAoZWFzaW5nIHx8IGVhc2VJbk91dEN1YmljKSh0aW1lLCBzY3JvbGxUb3AsIHRhcmdldFRvcFZhbHVlLCA0NTApKTtcbiAgICAgIGlmICh0aW1lIDwgNDUwKSB7XG4gICAgICAgIHJlcUFuaW1GcmFtZShmcmFtZUZ1bmMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH07XG4gICAgcmVxQW5pbUZyYW1lKGZyYW1lRnVuYyk7XG4gIH1cblxufVxuXG5leHBvcnQgZnVuY3Rpb24gU0NST0xMX1NFUlZJQ0VfUFJPVklERVJfRkFDVE9SWShkb2M6IERvY3VtZW50LCBzY3JvbGxTZXJ2aWNlOiBOelNjcm9sbFNlcnZpY2UpOiBOelNjcm9sbFNlcnZpY2Uge1xuICByZXR1cm4gc2Nyb2xsU2VydmljZSB8fCBuZXcgTnpTY3JvbGxTZXJ2aWNlKGRvYyk7XG59XG5cbmV4cG9ydCBjb25zdCBTQ1JPTExfU0VSVklDRV9QUk9WSURFUjogUHJvdmlkZXIgPSB7XG4gIHByb3ZpZGUgICA6IE56U2Nyb2xsU2VydmljZSxcbiAgdXNlRmFjdG9yeTogU0NST0xMX1NFUlZJQ0VfUFJPVklERVJfRkFDVE9SWSxcbiAgZGVwcyAgICAgIDogWyBET0NVTUVOVCwgWyBuZXcgT3B0aW9uYWwoKSwgbmV3IFNraXBTZWxmKCksIE56U2Nyb2xsU2VydmljZSBdIF1cbn07XG4iLCJpbXBvcnQgeyBUZW1wbGF0ZVJlZiwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG5leHBvcnQgZnVuY3Rpb24gaXNOb3ROaWwodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICByZXR1cm4gKHR5cGVvZih2YWx1ZSkgIT09ICd1bmRlZmluZWQnKSAmJiB2YWx1ZSAhPT0gbnVsbDtcbn1cblxuLyoqIMOmwqDCocOpwqrCjMOlwq/CucOowrHCocOmwpjCr8OlwpDCpsOnwpvCuMOnwq3CiSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBOiB7fSwgb2JqQjoge30pOiBib29sZWFuIHtcbiAgaWYgKG9iakEgPT09IG9iakIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gJ29iamVjdCcgfHwgIW9iakEgfHwgdHlwZW9mIG9iakIgIT09ICdvYmplY3QnIHx8ICFvYmpCKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3Qga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgY29uc3Qga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcblxuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBiSGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmJpbmQob2JqQik7XG5cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnByZWZlci1mb3Itb2ZcbiAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwga2V5c0EubGVuZ3RoOyBpZHgrKykge1xuICAgIGNvbnN0IGtleSA9IGtleXNBWyBpZHggXTtcbiAgICBpZiAoIWJIYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChvYmpBWyBrZXkgXSAhPT0gb2JqQlsga2V5IF0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzSW50ZWdlcih2YWx1ZTogc3RyaW5nIHwgbnVtYmVyKTogYm9vbGVhbiB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmXG4gICAgaXNGaW5pdGUodmFsdWUpICYmXG4gICAgTWF0aC5mbG9vcih2YWx1ZSkgPT09IHZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFbXB0eShlbGVtZW50OiBIVE1MRWxlbWVudCk6IGJvb2xlYW4ge1xuICBjb25zdCBub2RlcyA9IGVsZW1lbnQuY2hpbGROb2RlcztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChmaWx0ZXJOb3RFbXB0eU5vZGUobm9kZXMuaXRlbShpKSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJOb3RFbXB0eU5vZGUobm9kZTogTm9kZSk6IE5vZGUge1xuICBpZiAobm9kZSkge1xuICAgIGlmICgobm9kZS5ub2RlVHlwZSA9PT0gMSkgJiYgKChub2RlIGFzIEhUTUxFbGVtZW50KS5vdXRlckhUTUwudG9TdHJpbmcoKS50cmltKCkubGVuZ3RoICE9PSAwKSkge1xuICAgICAgLy8gRUxFTUVOVF9OT0RFXG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9IGVsc2UgaWYgKChub2RlLm5vZGVUeXBlID09PSAzKSAmJiAobm9kZS50ZXh0Q29udGVudC50b1N0cmluZygpLnRyaW0oKS5sZW5ndGggIT09IDApKSB7XG4gICAgICAvLyBURVhUX05PREVcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9uRW1wdHlTdHJpbmcodmFsdWU6IGFueSk6IGJvb2xlYW4geyAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOm5vLWFueVxuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZSAhPT0gJyc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1RlbXBsYXRlUmVmKHZhbHVlOiBhbnkpOiBib29sZWFuIHsgLy8gdHNsaW50OmRpc2FibGUtbGluZTpuby1hbnlcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgVGVtcGxhdGVSZWY7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0NvbXBvbmVudCh2YWx1ZTogYW55KTogYm9vbGVhbiB7IC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8tYW55XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFR5cGU7XG59XG4iLCJpbXBvcnQgeyBjb2VyY2VCb29sZWFuUHJvcGVydHksIGNvZXJjZUNzc1BpeGVsVmFsdWUsIGNvZXJjZU51bWJlclByb3BlcnR5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcbmltcG9ydCB7IEZ1bmN0aW9uUHJvcCB9IGZyb20gJy4uL3R5cGVzL2NvbW1vbi13cmFwJztcblxuZXhwb3J0IGZ1bmN0aW9uIHRvQm9vbGVhbih2YWx1ZTogYm9vbGVhbiB8IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvTnVtYmVyPEQ+KHZhbHVlOiBudW1iZXIgfCBzdHJpbmcsIGZhbGxiYWNrOiBEKTogbnVtYmVyIHwgRCB7XG4gIHJldHVybiBjb2VyY2VOdW1iZXJQcm9wZXJ0eSh2YWx1ZSwgZmFsbGJhY2spO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9Dc3NQaXhlbCh2YWx1ZTogbnVtYmVyIHwgc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIGNvZXJjZUNzc1BpeGVsVmFsdWUodmFsdWUpO1xufVxuXG4vLyBHZXQgdGhlIGZ1bmNpdG9uLXByb3BlcnR5IHR5cGUncyB2YWx1ZVxuZXhwb3J0IGZ1bmN0aW9uIHZhbHVlRnVuY3Rpb25Qcm9wPFQ+KHByb3A6IEZ1bmN0aW9uUHJvcDxUPiwgLi4uYXJnczogYW55W10pOiBUIHsgLy8gdHNsaW50OmRpc2FibGUtbGluZTogbm8tYW55XG4gIHJldHVybiB0eXBlb2YgcHJvcCA9PT0gJ2Z1bmN0aW9uJyA/IHByb3AoLi4uYXJncykgOiBwcm9wO1xufVxuXG4vKipcbiAqIElucHV0IGRlY29yYXRvciB0aGF0IGhhbmRsZSBhIHByb3AgdG8gZG8gZ2V0L3NldCBhdXRvbWF0aWNhbGx5IHdpdGggdG9Cb29sZWFuXG4gKlxuICogV2h5IG5vdCB1c2luZyBASW5wdXRCb29sZWFuIGFsb25lIHdpdGhvdXQgQElucHV0PyBBT1QgbmVlZHMgQElucHV0IHRvIGJlIHZpc2libGVcbiAqXG4gKiBAaG93VG9Vc2VcbiAqIGBgYFxuICogQElucHV0KCkgQElucHV0Qm9vbGVhbigpIHZpc2libGU6IGJvb2xlYW4gPSBmYWxzZTtcbiAqXG4gKiAvLyBBY3QgYXMgYmVsb3c6XG4gKiAvLyBASW5wdXQoKVxuICogLy8gZ2V0IHZpc2libGUoKSB7IHJldHVybiB0aGlzLl9fdmlzaWJpbGU7IH1cbiAqIC8vIHNldCB2aXNpYmxlKHZhbHVlKSB7IHRoaXMuX192aXNpYmxlID0gdmFsdWU7IH1cbiAqIC8vIF9fdmlzaWJsZSA9IGZhbHNlO1xuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBJbnB1dEJvb2xlYW4oKTogYW55IHsgLy8gdHNsaW50OmRpc2FibGUtbGluZTpuby1hbnlcbiAgcmV0dXJuIGZ1bmN0aW9uIElucHV0Qm9vbGVhblByb3BEZWNvcmF0b3IgKHRhcmdldDogb2JqZWN0LCBuYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAvLyBBZGQgb3VyIG93biBwcml2YXRlIHByb3BcbiAgICBjb25zdCBwcml2YXRlUHJvcE5hbWUgPSBgJCRfXyR7bmFtZX1gO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIHByaXZhdGVQcm9wTmFtZSkpIHtcbiAgICAgIGNvbnNvbGUud2FybihgVGhlIHByb3AgXCIke3ByaXZhdGVQcm9wTmFtZX1cIiBpcyBhbHJlYWR5IGV4aXN0LCBpdCB3aWxsIGJlIG92ZXJyaWRlZCBieSBJbnB1dEJvb2xlYW4gZGVjb3JhdG9yLmApO1xuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByaXZhdGVQcm9wTmFtZSwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG5hbWUsIHtcbiAgICAgIGdldCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbIHByaXZhdGVQcm9wTmFtZSBdOyAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOm5vLWludmFsaWQtdGhpc1xuICAgICAgfSxcbiAgICAgIHNldCh2YWx1ZTogYm9vbGVhbiB8IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzWyBwcml2YXRlUHJvcE5hbWUgXSA9IHRvQm9vbGVhbih2YWx1ZSk7IC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8taW52YWxpZC10aGlzXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyAvLyBEbyByZXN0IHRoaW5ncyBmb3IgaW5wdXQgZGVjb3JhdG9yXG4gICAgLy8gY29uc3QgaW5wdXREZWNvcmF0b3IgPSBJbnB1dCgpO1xuICAgIC8vIGlucHV0RGVjb3JhdG9yKHRhcmdldCwgbmFtZSk7XG4gIH07XG59XG4iLCIvLyB0c2xpbnQ6ZGlzYWJsZTpuby1hbnkgdHlwZWRlZiBuby1pbnZhbGlkLXRoaXNcbmltcG9ydCB7IGNhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSwgcmVxQW5pbUZyYW1lIH0gZnJvbSAnLi4vcG9seWZpbGwvcmVxdWVzdC1hbmltYXRpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0aHJvdHRsZUJ5QW5pbWF0aW9uRnJhbWUoZm46IGFueSkge1xuICBsZXQgcmVxdWVzdElkOiBudW1iZXIgfCBudWxsO1xuXG4gIGNvbnN0IGxhdGVyID0gKGFyZ3M6IGFueVtdKSA9PiAoKSA9PiB7XG4gICAgcmVxdWVzdElkID0gbnVsbDtcbiAgICBmbiguLi5hcmdzKTtcbiAgfTtcblxuICBjb25zdCB0aHJvdHRsZWQgPSAoLi4uYXJnczogYW55W10pID0+IHtcbiAgICBpZiAocmVxdWVzdElkID09IG51bGwpIHtcbiAgICAgIHJlcXVlc3RJZCA9IHJlcUFuaW1GcmFtZShsYXRlcihhcmdzKSk7XG4gICAgfVxuICB9O1xuXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1ub24tbnVsbC1hc3NlcnRpb25cbiAgKHRocm90dGxlZCBhcyBhbnkpLmNhbmNlbCA9ICgpID0+IGNhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZShyZXF1ZXN0SWQhKTtcblxuICByZXR1cm4gdGhyb3R0bGVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGhyb3R0bGVCeUFuaW1hdGlvbkZyYW1lRGVjb3JhdG9yKCkge1xuICByZXR1cm4gZnVuY3Rpb24odGFyZ2V0OiBhbnksIGtleTogc3RyaW5nLCBkZXNjcmlwdG9yOiBhbnkpIHtcbiAgICBjb25zdCBmbiA9IGRlc2NyaXB0b3IudmFsdWU7XG4gICAgbGV0IGRlZmluaW5nUHJvcGVydHkgPSBmYWxzZTtcbiAgICByZXR1cm4ge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0KCkge1xuICAgICAgICBpZiAoZGVmaW5pbmdQcm9wZXJ0eSB8fCB0aGlzID09PSB0YXJnZXQucHJvdG90eXBlIHx8IHRoaXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgIHJldHVybiBmbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGJvdW5kRm4gPSB0aHJvdHRsZUJ5QW5pbWF0aW9uRnJhbWUoZm4uYmluZCh0aGlzKSk7XG4gICAgICAgIGRlZmluaW5nUHJvcGVydHkgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywga2V5LCB7XG4gICAgICAgICAgdmFsdWU6IGJvdW5kRm4sXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgICAgZGVmaW5pbmdQcm9wZXJ0eSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gYm91bmRGbjtcbiAgICAgIH0sXG4gICAgfTtcbiAgfTtcbn1cbiIsIi8vIHRzbGludDpkaXNhYmxlOm5vLWFueVxuaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5wdXQsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBPdXRwdXQsXG4gIFZpZXdDaGlsZFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgTnpTY3JvbGxTZXJ2aWNlIH0gZnJvbSAnLi4vY29yZS9zY3JvbGwvbnotc2Nyb2xsLnNlcnZpY2UnO1xuaW1wb3J0IHsgc2hhbGxvd0VxdWFsIH0gZnJvbSAnLi4vY29yZS91dGlsL2NoZWNrJztcbmltcG9ydCB7IHRvTnVtYmVyIH0gZnJvbSAnLi4vY29yZS91dGlsL2NvbnZlcnQnO1xuaW1wb3J0IHsgdGhyb3R0bGVCeUFuaW1hdGlvbkZyYW1lRGVjb3JhdG9yIH0gZnJvbSAnLi4vY29yZS91dGlsL3Rocm90dGxlQnlBbmltYXRpb25GcmFtZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICA6ICduei1hZmZpeCcsXG4gIHRlbXBsYXRlVXJsICAgIDogJy4vbnotYWZmaXguY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgc3R5bGVzICAgICAgICAgOiBbXG4gICAgYDpob3N0IHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIH1gXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgTnpBZmZpeENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcblxuICBwcml2YXRlIHRpbWVvdXQ6IGFueTtcbiAgcHJpdmF0ZSBldmVudHMgPSBbXG4gICAgJ3Jlc2l6ZScsXG4gICAgJ3Njcm9sbCcsXG4gICAgJ3RvdWNoc3RhcnQnLFxuICAgICd0b3VjaG1vdmUnLFxuICAgICd0b3VjaGVuZCcsXG4gICAgJ3BhZ2VzaG93JyxcbiAgICAnbG9hZCdcbiAgXTtcbiAgcHJpdmF0ZSBhZmZpeFN0eWxlOiBhbnk7XG4gIHByaXZhdGUgcGxhY2Vob2xkZXJTdHlsZTogYW55O1xuXG4gIEBWaWV3Q2hpbGQoJ3dyYXAnKSBwcml2YXRlIHdyYXA6IEVsZW1lbnRSZWY7XG5cbiAgcHJpdmF0ZSBfdGFyZ2V0OiBFbGVtZW50IHwgV2luZG93ID0gd2luZG93O1xuXG4gIEBJbnB1dCgpXG4gIHNldCBuelRhcmdldCh2YWx1ZTogRWxlbWVudCB8IFdpbmRvdykge1xuICAgIHRoaXMuY2xlYXJFdmVudExpc3RlbmVycygpO1xuICAgIHRoaXMuX3RhcmdldCA9IHZhbHVlIHx8IHdpbmRvdztcbiAgICB0aGlzLnNldFRhcmdldEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgdGhpcy51cGRhdGVQb3NpdGlvbih7fSk7XG4gIH1cblxuICBwcml2YXRlIF9vZmZzZXRUb3A6IG51bWJlcjtcblxuICBASW5wdXQoKVxuICBzZXQgbnpPZmZzZXRUb3AodmFsdWU6IG51bWJlcikge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX29mZnNldFRvcCA9IHRvTnVtYmVyKHZhbHVlLCBudWxsKTtcbiAgfVxuXG4gIGdldCBuek9mZnNldFRvcCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9vZmZzZXRUb3A7XG4gIH1cblxuICBwcml2YXRlIF9vZmZzZXRCb3R0b206IG51bWJlcjtcblxuICBASW5wdXQoKVxuICBzZXQgbnpPZmZzZXRCb3R0b20odmFsdWU6IG51bWJlcikge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX29mZnNldEJvdHRvbSA9IHRvTnVtYmVyKHZhbHVlLCBudWxsKTtcbiAgfVxuXG4gIEBPdXRwdXQoKSBuekNoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc2Nyb2xsU3J2OiBOelNjcm9sbFNlcnZpY2UsIHByaXZhdGUgX2VsOiBFbGVtZW50UmVmLCBwcml2YXRlIGNkOiBDaGFuZ2VEZXRlY3RvclJlZikge1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnNldFRhcmdldEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICB0aGlzLnVwZGF0ZVBvc2l0aW9uKHt9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0VGFyZ2V0RXZlbnRMaXN0ZW5lcnMoKTogdm9pZCB7XG4gICAgdGhpcy5jbGVhckV2ZW50TGlzdGVuZXJzKCk7XG4gICAgdGhpcy5ldmVudHMuZm9yRWFjaCgoZXZlbnROYW1lOiBzdHJpbmcpID0+IHtcbiAgICAgIHRoaXMuX3RhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgdGhpcy51cGRhdGVQb3NpdGlvbiwgZmFsc2UpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBjbGVhckV2ZW50TGlzdGVuZXJzKCk6IHZvaWQge1xuICAgIHRoaXMuZXZlbnRzLmZvckVhY2goZXZlbnROYW1lID0+IHtcbiAgICAgIHRoaXMuX3RhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgdGhpcy51cGRhdGVQb3NpdGlvbiwgZmFsc2UpO1xuICAgIH0pO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5jbGVhckV2ZW50TGlzdGVuZXJzKCk7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XG4gICAgKHRoaXMudXBkYXRlUG9zaXRpb24gYXMgYW55KS5jYW5jZWwoKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0VGFyZ2V0UmVjdCh0YXJnZXQ6IEVsZW1lbnQgfCBXaW5kb3cgfCBudWxsKTogQ2xpZW50UmVjdCB7XG4gICAgcmV0dXJuIHRhcmdldCAhPT0gd2luZG93ID9cbiAgICAgICh0YXJnZXQgYXMgSFRNTEVsZW1lbnQpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIDpcbiAgICAgIHsgdG9wOiAwLCBsZWZ0OiAwLCBib3R0b206IDAgfSBhcyBDbGllbnRSZWN0O1xuICB9XG5cbiAgZ2V0T2Zmc2V0KGVsZW1lbnQ6IEVsZW1lbnQsIHRhcmdldDogRWxlbWVudCB8IFdpbmRvdyB8IG51bGwpOiB7XG4gICAgdG9wOiBudW1iZXI7XG4gICAgbGVmdDogbnVtYmVyO1xuICAgIHdpZHRoOiBudW1iZXI7XG4gICAgaGVpZ2h0OiBudW1iZXI7XG4gIH0ge1xuICAgIGNvbnN0IGVsZW1SZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjb25zdCB0YXJnZXRSZWN0ID0gdGhpcy5nZXRUYXJnZXRSZWN0KHRhcmdldCk7XG5cbiAgICBjb25zdCBzY3JvbGxUb3AgPSB0aGlzLnNjcm9sbFNydi5nZXRTY3JvbGwodGFyZ2V0LCB0cnVlKTtcbiAgICBjb25zdCBzY3JvbGxMZWZ0ID0gdGhpcy5zY3JvbGxTcnYuZ2V0U2Nyb2xsKHRhcmdldCwgZmFsc2UpO1xuXG4gICAgY29uc3QgZG9jRWxlbSA9IHdpbmRvdy5kb2N1bWVudC5ib2R5O1xuICAgIGNvbnN0IGNsaWVudFRvcCA9IGRvY0VsZW0uY2xpZW50VG9wIHx8IDA7XG4gICAgY29uc3QgY2xpZW50TGVmdCA9IGRvY0VsZW0uY2xpZW50TGVmdCB8fCAwO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcCAgIDogZWxlbVJlY3QudG9wIC0gdGFyZ2V0UmVjdC50b3AgKyBzY3JvbGxUb3AgLSBjbGllbnRUb3AsXG4gICAgICBsZWZ0ICA6IGVsZW1SZWN0LmxlZnQgLSB0YXJnZXRSZWN0LmxlZnQgKyBzY3JvbGxMZWZ0IC0gY2xpZW50TGVmdCxcbiAgICAgIHdpZHRoIDogZWxlbVJlY3Qud2lkdGgsXG4gICAgICBoZWlnaHQ6IGVsZW1SZWN0LmhlaWdodFxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGdlblN0eWxlKGFmZml4U3R5bGU6IHt9KTogc3RyaW5nIHtcbiAgICBpZiAoYWZmaXhTdHlsZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHJldHVybiBPYmplY3Qua2V5cyhhZmZpeFN0eWxlKS5tYXAoa2V5ID0+IHtcbiAgICAgIGNvbnN0IHZhbCA9IGFmZml4U3R5bGVbIGtleSBdO1xuICAgICAgcmV0dXJuIGAke2tleX06JHt0eXBlb2YgdmFsID09PSAnc3RyaW5nJyA/IHZhbCA6IHZhbCArICdweCd9YDtcbiAgICB9KS5qb2luKCc7Jyk7XG4gIH1cblxuICBwcml2YXRlIHNldEFmZml4U3R5bGUoZTogYW55LCBhZmZpeFN0eWxlOiB7fSk6IHZvaWQge1xuICAgIGNvbnN0IG9yaWdpbmFsQWZmaXhTdHlsZSA9IHRoaXMuYWZmaXhTdHlsZTtcbiAgICBjb25zdCBpc1dpbmRvdyA9IHRoaXMuX3RhcmdldCA9PT0gd2luZG93O1xuICAgIGlmIChlLnR5cGUgPT09ICdzY3JvbGwnICYmIG9yaWdpbmFsQWZmaXhTdHlsZSAmJiBhZmZpeFN0eWxlICYmIGlzV2luZG93KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChzaGFsbG93RXF1YWwob3JpZ2luYWxBZmZpeFN0eWxlLCBhZmZpeFN0eWxlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGZpeGVkID0gISFhZmZpeFN0eWxlO1xuICAgIGNvbnN0IHdyYXBFbCA9IHRoaXMud3JhcC5uYXRpdmVFbGVtZW50IGFzIEhUTUxFbGVtZW50O1xuICAgIHdyYXBFbC5zdHlsZS5jc3NUZXh0ID0gdGhpcy5nZW5TdHlsZShhZmZpeFN0eWxlKTtcbiAgICB0aGlzLmFmZml4U3R5bGUgPSBhZmZpeFN0eWxlO1xuICAgIGNvbnN0IGNscyA9ICdhbnQtYWZmaXgnO1xuICAgIGlmIChmaXhlZCkge1xuICAgICAgd3JhcEVsLmNsYXNzTGlzdC5hZGQoY2xzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd3JhcEVsLmNsYXNzTGlzdC5yZW1vdmUoY2xzKTtcbiAgICB9XG5cbiAgICBpZiAoKGFmZml4U3R5bGUgJiYgIW9yaWdpbmFsQWZmaXhTdHlsZSkgfHwgKCFhZmZpeFN0eWxlICYmIG9yaWdpbmFsQWZmaXhTdHlsZSkpIHtcbiAgICAgIHRoaXMubnpDaGFuZ2UuZW1pdChmaXhlZCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzZXRQbGFjZWhvbGRlclN0eWxlKHBsYWNlaG9sZGVyU3R5bGU6IHt9KTogdm9pZCB7XG4gICAgY29uc3Qgb3JpZ2luYWxQbGFjZWhvbGRlclN0eWxlID0gdGhpcy5wbGFjZWhvbGRlclN0eWxlO1xuICAgIGlmIChzaGFsbG93RXF1YWwocGxhY2Vob2xkZXJTdHlsZSwgb3JpZ2luYWxQbGFjZWhvbGRlclN0eWxlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAodGhpcy5fZWwubmF0aXZlRWxlbWVudCBhcyBIVE1MRWxlbWVudCkuc3R5bGUuY3NzVGV4dCA9IHRoaXMuZ2VuU3R5bGUocGxhY2Vob2xkZXJTdHlsZSk7XG4gICAgdGhpcy5wbGFjZWhvbGRlclN0eWxlID0gcGxhY2Vob2xkZXJTdHlsZTtcbiAgfVxuXG4gIEB0aHJvdHRsZUJ5QW5pbWF0aW9uRnJhbWVEZWNvcmF0b3IoKVxuICB1cGRhdGVQb3NpdGlvbihlOiBhbnkpOiB2b2lkIHtcbiAgICBjb25zdCB0YXJnZXROb2RlID0gdGhpcy5fdGFyZ2V0O1xuICAgIC8vIEJhY2t3YXJkcyBzdXBwb3J0XG4gICAgbGV0IG9mZnNldFRvcCA9IHRoaXMubnpPZmZzZXRUb3A7XG4gICAgY29uc3Qgc2Nyb2xsVG9wID0gdGhpcy5zY3JvbGxTcnYuZ2V0U2Nyb2xsKHRhcmdldE5vZGUsIHRydWUpO1xuICAgIGNvbnN0IGFmZml4Tm9kZSA9IHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgY29uc3QgZWxlbU9mZnNldCA9IHRoaXMuZ2V0T2Zmc2V0KGFmZml4Tm9kZSwgdGFyZ2V0Tm9kZSk7XG4gICAgY29uc3QgZWxlbVNpemUgPSB7XG4gICAgICB3aWR0aCA6IGFmZml4Tm9kZS5vZmZzZXRXaWR0aCxcbiAgICAgIGhlaWdodDogYWZmaXhOb2RlLm9mZnNldEhlaWdodFxuICAgIH07XG4gICAgY29uc3Qgb2Zmc2V0TW9kZSA9IHtcbiAgICAgIHRvcCAgIDogZmFsc2UsXG4gICAgICBib3R0b206IGZhbHNlXG4gICAgfTtcbiAgICAvLyBEZWZhdWx0IHRvIGBvZmZzZXRUb3A9MGAuXG4gICAgaWYgKHR5cGVvZiBvZmZzZXRUb3AgIT09ICdudW1iZXInICYmIHR5cGVvZiB0aGlzLl9vZmZzZXRCb3R0b20gIT09ICdudW1iZXInKSB7XG4gICAgICBvZmZzZXRNb2RlLnRvcCA9IHRydWU7XG4gICAgICBvZmZzZXRUb3AgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBvZmZzZXRNb2RlLnRvcCA9IHR5cGVvZiBvZmZzZXRUb3AgPT09ICdudW1iZXInO1xuICAgICAgb2Zmc2V0TW9kZS5ib3R0b20gPSB0eXBlb2YgdGhpcy5fb2Zmc2V0Qm90dG9tID09PSAnbnVtYmVyJztcbiAgICB9XG4gICAgY29uc3QgdGFyZ2V0UmVjdCA9IHRoaXMuZ2V0VGFyZ2V0UmVjdCh0YXJnZXROb2RlKTtcbiAgICBjb25zdCB0YXJnZXRJbm5lckhlaWdodCA9XG4gICAgICAgICAgICAodGFyZ2V0Tm9kZSBhcyBXaW5kb3cpLmlubmVySGVpZ2h0IHx8ICh0YXJnZXROb2RlIGFzIEhUTUxFbGVtZW50KS5jbGllbnRIZWlnaHQ7XG4gICAgaWYgKHNjcm9sbFRvcCA+IGVsZW1PZmZzZXQudG9wIC0gKG9mZnNldFRvcCBhcyBudW1iZXIpICYmIG9mZnNldE1vZGUudG9wKSB7XG4gICAgICBjb25zdCB3aWR0aCA9IGVsZW1PZmZzZXQud2lkdGg7XG4gICAgICBjb25zdCB0b3AgPSB0YXJnZXRSZWN0LnRvcCArIChvZmZzZXRUb3AgYXMgbnVtYmVyKTtcbiAgICAgIHRoaXMuc2V0QWZmaXhTdHlsZShlLCB7XG4gICAgICAgIHBvc2l0aW9uIDogJ2ZpeGVkJyxcbiAgICAgICAgdG9wLFxuICAgICAgICBsZWZ0ICAgICA6IHRhcmdldFJlY3QubGVmdCArIGVsZW1PZmZzZXQubGVmdCxcbiAgICAgICAgbWF4SGVpZ2h0OiBgY2FsYygxMDB2aCAtICR7dG9wfXB4KWAsXG4gICAgICAgIHdpZHRoXG4gICAgICB9KTtcbiAgICAgIHRoaXMuc2V0UGxhY2Vob2xkZXJTdHlsZSh7XG4gICAgICAgIHdpZHRoLFxuICAgICAgICBoZWlnaHQ6IGVsZW1TaXplLmhlaWdodFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIHNjcm9sbFRvcCA8IGVsZW1PZmZzZXQudG9wICsgZWxlbVNpemUuaGVpZ2h0ICsgKHRoaXMuX29mZnNldEJvdHRvbSBhcyBudW1iZXIpIC0gdGFyZ2V0SW5uZXJIZWlnaHQgJiZcbiAgICAgIG9mZnNldE1vZGUuYm90dG9tXG4gICAgKSB7XG4gICAgICBjb25zdCB0YXJnZXRCb3R0b21PZmZldCA9IHRhcmdldE5vZGUgPT09IHdpbmRvdyA/IDAgOiAod2luZG93LmlubmVySGVpZ2h0IC0gdGFyZ2V0UmVjdC5ib3R0b20pO1xuICAgICAgY29uc3Qgd2lkdGggPSBlbGVtT2Zmc2V0LndpZHRoO1xuICAgICAgdGhpcy5zZXRBZmZpeFN0eWxlKGUsIHtcbiAgICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICAgIGJvdHRvbSAgOiB0YXJnZXRCb3R0b21PZmZldCArICh0aGlzLl9vZmZzZXRCb3R0b20gYXMgbnVtYmVyKSxcbiAgICAgICAgbGVmdCAgICA6IHRhcmdldFJlY3QubGVmdCArIGVsZW1PZmZzZXQubGVmdCxcbiAgICAgICAgd2lkdGhcbiAgICAgIH0pO1xuICAgICAgdGhpcy5zZXRQbGFjZWhvbGRlclN0eWxlKHtcbiAgICAgICAgd2lkdGgsXG4gICAgICAgIGhlaWdodDogZWxlbU9mZnNldC5oZWlnaHRcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZS50eXBlID09PSAncmVzaXplJyAmJiB0aGlzLmFmZml4U3R5bGUgJiYgdGhpcy5hZmZpeFN0eWxlLnBvc2l0aW9uID09PSAnZml4ZWQnICYmIGFmZml4Tm9kZS5vZmZzZXRXaWR0aCkge1xuICAgICAgICB0aGlzLnNldEFmZml4U3R5bGUoZSwgeyAuLi50aGlzLmFmZml4U3R5bGUsIHdpZHRoOiBhZmZpeE5vZGUub2Zmc2V0V2lkdGggfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNldEFmZml4U3R5bGUoZSwgbnVsbCk7XG4gICAgICB9XG4gICAgICB0aGlzLnNldFBsYWNlaG9sZGVyU3R5bGUobnVsbCk7XG4gICAgfVxuICB9XG5cbn1cbiIsImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBTQ1JPTExfU0VSVklDRV9QUk9WSURFUiB9IGZyb20gJy4uL2NvcmUvc2Nyb2xsL256LXNjcm9sbC5zZXJ2aWNlJztcblxuaW1wb3J0IHsgTnpBZmZpeENvbXBvbmVudCB9IGZyb20gJy4vbnotYWZmaXguY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbIE56QWZmaXhDb21wb25lbnQgXSxcbiAgZXhwb3J0cyAgICAgOiBbIE56QWZmaXhDb21wb25lbnQgXSxcbiAgaW1wb3J0cyAgICAgOiBbIENvbW1vbk1vZHVsZSBdLFxuICBwcm92aWRlcnMgICA6IFsgU0NST0xMX1NFUlZJQ0VfUFJPVklERVIgXVxufSlcbmV4cG9ydCBjbGFzcyBOekFmZml4TW9kdWxlIHtcbn1cbiIsImltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEh0dHBCYWNrZW5kIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgaXNEZXZNb2RlLCBJbmplY3QsIEluamVjdGFibGUsIEluamVjdGlvblRva2VuLCBPcHRpb25hbCwgUmVuZGVyZXJGYWN0b3J5MiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWNvbkRlZmluaXRpb24sIEljb25TZXJ2aWNlIH0gZnJvbSAnQGFudC1kZXNpZ24vaWNvbnMtYW5ndWxhcic7XG5pbXBvcnQge1xuICBDYWxlbmRhck91dGxpbmUsXG4gIENoZWNrQ2lyY2xlRmlsbCxcbiAgQ2hlY2tDaXJjbGVPdXRsaW5lLFxuICBDaGVja091dGxpbmUsXG4gIENsb2NrQ2lyY2xlT3V0bGluZSxcbiAgQ2xvc2VDaXJjbGVGaWxsLFxuICBDbG9zZUNpcmNsZU91dGxpbmUsXG4gIENsb3NlT3V0bGluZSxcbiAgRG91YmxlTGVmdE91dGxpbmUsXG4gIERvdWJsZVJpZ2h0T3V0bGluZSxcbiAgRG93bk91dGxpbmUsXG4gIEV4Y2xhbWF0aW9uQ2lyY2xlRmlsbCxcbiAgRXhjbGFtYXRpb25DaXJjbGVPdXRsaW5lLCBGaWx0ZXJGaWxsLFxuICBJbmZvQ2lyY2xlRmlsbCxcbiAgSW5mb0NpcmNsZU91dGxpbmUsXG4gIExlZnRPdXRsaW5lLFxuICBMb2FkaW5nT3V0bGluZSxcbiAgUGFwZXJDbGlwT3V0bGluZSxcbiAgUXVlc3Rpb25DaXJjbGVPdXRsaW5lLFxuICBSaWdodE91dGxpbmUsXG4gIFVwbG9hZE91dGxpbmUsXG4gIFVwT3V0bGluZVxufSBmcm9tICdAYW50LWRlc2lnbi9pY29ucy1hbmd1bGFyL2ljb25zJztcblxuZXhwb3J0IGludGVyZmFjZSBOekljb25mb250T3B0aW9uIHtcbiAgc2NyaXB0VXJsOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjb25zdCBOWl9JQ09OUyA9IG5ldyBJbmplY3Rpb25Ub2tlbignbnpfaWNvbnMnKTtcbmV4cG9ydCBjb25zdCBOWl9JQ09OX0RFRkFVTFRfVFdPVE9ORV9DT0xPUiA9IG5ldyBJbmplY3Rpb25Ub2tlbignbnpfaWNvbl9kZWZhdWx0X3R3b3RvbmVfY29sb3InKTtcbmV4cG9ydCBjb25zdCBERUZBVUxUX1RXT1RPTkVfQ09MT1IgPSAnIzE4OTBmZic7XG5cbi8qKlxuICogSXQgc2hvdWxkIGJlIGEgZ2xvYmFsIHNpbmdsZXRvbiwgb3RoZXJ3aXNlIHJlZ2lzdGVyZWQgaWNvbnMgY291bGQgbm90IGJlIGZvdW5kLlxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBOekljb25TZXJ2aWNlIGV4dGVuZHMgSWNvblNlcnZpY2Uge1xuICBwcml2YXRlIF9pY29uZm9udENhY2hlID0gbmV3IFNldDxzdHJpbmc+KCk7XG5cbiAgd2FybmVkQWJvdXRBUEkgPSBmYWxzZTtcbiAgd2FybmVkQWJvdXRDcm9zcyA9IGZhbHNlOyAvLyBUT0RPOiByZW1vdmUgaW4gMi4wXG4gIHdhcm5lZEFib3V0VmVydGljYWwgPSBmYWxzZTtcblxuICBub3JtYWxpemVTdmdFbGVtZW50KHN2ZzogU1ZHRWxlbWVudCk6IHZvaWQge1xuICAgIGlmICghc3ZnLmdldEF0dHJpYnV0ZSgndmlld0JveCcpKSB7XG4gICAgICB0aGlzLl9yZW5kZXJlci5zZXRBdHRyaWJ1dGUoc3ZnLCAndmlld0JveCcsICcwIDAgMTAyNCAxMDI0Jyk7XG4gICAgfVxuICAgIGlmICghc3ZnLmdldEF0dHJpYnV0ZSgnd2lkdGgnKSB8fCAhc3ZnLmdldEF0dHJpYnV0ZSgnaGVpZ2h0JykpIHtcbiAgICAgIHRoaXMuX3JlbmRlcmVyLnNldEF0dHJpYnV0ZShzdmcsICd3aWR0aCcsICcxZW0nKTtcbiAgICAgIHRoaXMuX3JlbmRlcmVyLnNldEF0dHJpYnV0ZShzdmcsICdoZWlnaHQnLCAnMWVtJyk7XG4gICAgfVxuICAgIGlmICghc3ZnLmdldEF0dHJpYnV0ZSgnZmlsbCcpKSB7XG4gICAgICB0aGlzLl9yZW5kZXJlci5zZXRBdHRyaWJ1dGUoc3ZnLCAnZmlsbCcsICdjdXJyZW50Q29sb3InKTtcbiAgICB9XG4gIH1cblxuICBmZXRjaEZyb21JY29uZm9udChvcHQ6IE56SWNvbmZvbnRPcHRpb24pOiB2b2lkIHtcbiAgICBjb25zdCB7IHNjcmlwdFVybCB9ID0gb3B0O1xuICAgIGlmICh0aGlzLl9kb2N1bWVudCAmJiAhdGhpcy5faWNvbmZvbnRDYWNoZS5oYXMoc2NyaXB0VXJsKSkge1xuICAgICAgY29uc3Qgc2NyaXB0ID0gdGhpcy5fcmVuZGVyZXIuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICB0aGlzLl9yZW5kZXJlci5zZXRBdHRyaWJ1dGUoc2NyaXB0LCAnc3JjJywgc2NyaXB0VXJsKTtcbiAgICAgIHRoaXMuX3JlbmRlcmVyLnNldEF0dHJpYnV0ZShzY3JpcHQsICdkYXRhLW5hbWVzcGFjZScsIHNjcmlwdFVybC5yZXBsYWNlKC9eKGh0dHBzP3xodHRwKTovZywgJycpKTtcbiAgICAgIHRoaXMuX2ljb25mb250Q2FjaGUuYWRkKHNjcmlwdFVybCk7XG4gICAgICB0aGlzLl9yZW5kZXJlci5hcHBlbmRDaGlsZCh0aGlzLl9kb2N1bWVudC5ib2R5LCBzY3JpcHQpO1xuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZUljb25mb250SWNvbih0eXBlOiBzdHJpbmcpOiBTVkdFbGVtZW50IHtcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlU1ZHRWxlbWVudEZyb21TdHJpbmcoYDxzdmc+PHVzZSB4bGluazpocmVmPVwiJHt0eXBlfVwiPjwvc3ZnPmApO1xuICB9XG5cbiAgLy8gdHNsaW50OmRpc2FibGU6bm8tYW55XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBfcmVuZGVyZXJGYWN0b3J5OiBSZW5kZXJlckZhY3RvcnkyLFxuICAgIEBPcHRpb25hbCgpIHByb3RlY3RlZCBfaGFuZGxlcjogSHR0cEJhY2tlbmQsXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChET0NVTUVOVCkgcHJvdGVjdGVkIF9kb2N1bWVudDogYW55LFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoTlpfSUNPTlMpIHByaXZhdGUgX2ljb25zOiBJY29uRGVmaW5pdGlvbltdLFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoTlpfSUNPTl9ERUZBVUxUX1RXT1RPTkVfQ09MT1IpIHByaXZhdGUgX2RlZmF1bHRDb2xvcjogc3RyaW5nXG4gICkge1xuICAgIHN1cGVyKF9yZW5kZXJlckZhY3RvcnksIF9oYW5kbGVyLCBfZG9jdW1lbnQpO1xuXG4gICAgY29uc3QgaWNvbnNVc2VkQnlab3JybzogSWNvbkRlZmluaXRpb25bXSA9IFtcbiAgICAgIENhbGVuZGFyT3V0bGluZSxcbiAgICAgIENoZWNrQ2lyY2xlRmlsbCxcbiAgICAgIENoZWNrQ2lyY2xlT3V0bGluZSxcbiAgICAgIENoZWNrT3V0bGluZSxcbiAgICAgIENsb2NrQ2lyY2xlT3V0bGluZSxcbiAgICAgIENsb3NlQ2lyY2xlT3V0bGluZSxcbiAgICAgIENsb3NlQ2lyY2xlRmlsbCxcbiAgICAgIENsb3NlT3V0bGluZSxcbiAgICAgIERvdWJsZUxlZnRPdXRsaW5lLFxuICAgICAgRG91YmxlUmlnaHRPdXRsaW5lLFxuICAgICAgRG93bk91dGxpbmUsXG4gICAgICBFeGNsYW1hdGlvbkNpcmNsZUZpbGwsXG4gICAgICBFeGNsYW1hdGlvbkNpcmNsZU91dGxpbmUsXG4gICAgICBGaWx0ZXJGaWxsLFxuICAgICAgSW5mb0NpcmNsZUZpbGwsXG4gICAgICBJbmZvQ2lyY2xlT3V0bGluZSxcbiAgICAgIExlZnRPdXRsaW5lLFxuICAgICAgTG9hZGluZ091dGxpbmUsXG4gICAgICBQYXBlckNsaXBPdXRsaW5lLFxuICAgICAgUXVlc3Rpb25DaXJjbGVPdXRsaW5lLFxuICAgICAgUmlnaHRPdXRsaW5lLFxuICAgICAgVXBsb2FkT3V0bGluZSxcbiAgICAgIFVwT3V0bGluZVxuICAgIF07XG4gICAgdGhpcy5hZGRJY29uKC4uLmljb25zVXNlZEJ5Wm9ycm8pO1xuXG4gICAgaWYgKHRoaXMuX2ljb25zKSB7IHRoaXMuYWRkSWNvbiguLi50aGlzLl9pY29ucyk7IH1cblxuICAgIGxldCBwcmltYXJ5Q29sb3IgPSBERUZBVUxUX1RXT1RPTkVfQ09MT1I7XG4gICAgaWYgKHRoaXMuX2RlZmF1bHRDb2xvcikge1xuICAgICAgaWYgKHRoaXMuX2RlZmF1bHRDb2xvci5zdGFydHNXaXRoKCcjJykpIHtcbiAgICAgICAgcHJpbWFyeUNvbG9yID0gdGhpcy5fZGVmYXVsdENvbG9yO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzRGV2TW9kZSgpKSB7IGNvbnNvbGUuZXJyb3IoJ1tORy1aT1JST10gdHdvdG9uZSBjb2xvciBtdXN0IGJlIGEgaGV4IGNvbG9yIScpOyB9XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMudHdvVG9uZUNvbG9yID0geyBwcmltYXJ5Q29sb3IgfTtcbiAgfVxufVxuIiwiaW1wb3J0IHtcbiAgaXNEZXZNb2RlLFxuICBBZnRlckNvbnRlbnRDaGVja2VkLFxuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBSZW5kZXJlcjJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJY29uRGlyZWN0aXZlIH0gZnJvbSAnQGFudC1kZXNpZ24vaWNvbnMtYW5ndWxhcic7XG5pbXBvcnQgeyBOekljb25TZXJ2aWNlIH0gZnJvbSAnLi9uei1pY29uLnNlcnZpY2UnO1xuXG5jb25zdCBpY29uVHlwZVJFID0gL15hbnRpY29uXFwtXFx3LztcblxuLyoqXG4gKiBUaGlzIGRpcmVjdGl2ZSBleHRlbmRzIEljb25EaXJlY3RpdmUgdG8gcHJvdmlkZTpcbiAqXG4gKiAtIEljb25Gb250IHN1cHBvcnRcbiAqIC0gc3Bpbm5pbmdcbiAqIC0gb2xkIEFQSSBjb21wYXRpYmlsaXR5XG4gKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ2kuYW50aWNvbiwgW256LWljb25dJ1xufSlcbmV4cG9ydCBjbGFzcyBOekljb25EaXJlY3RpdmUgZXh0ZW5kcyBJY29uRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgQWZ0ZXJDb250ZW50Q2hlY2tlZCB7XG4gIEBJbnB1dCgpIHNwaW4gPSBmYWxzZTtcbiAgQElucHV0KCkgaWNvbmZvbnQ6IHN0cmluZztcblxuICAvLyBwcml2YXRlIF9yZW5kZXJlcjogUmVuZGVyZXIyO1xuICBwcml2YXRlIF9jbGFzc05hbWVPYnNlcnZlcjogTXV0YXRpb25PYnNlcnZlcjtcbiAgcHJpdmF0ZSBfZWw6IEhUTUxFbGVtZW50O1xuXG4gIC8qKlxuICAgKiBJbiBvcmRlciB0byBtYWtlIHRoaXMgZGlyZWN0aXZlIGNvbXBhdGlibGUgdG8gb2xkIEFQSSwgd2UgaGFkIGRvIHNvbWUgdWdseSBzdHVmZiBoZXJlLlxuICAgKiBUT0RPOiBTaG91bGQgYmUgcmVtb3ZlZCBpbiBuZXh0IG1ham9yIHZlcnNpb24uXG4gICAqL1xuICBwcml2YXRlIF9jbGFzc0NoYW5nZUhhbmRsZXIoY2xhc3NOYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBpZiAoY2xhc3NOYW1lKSB7XG4gICAgICBjb25zdCBpY29uVHlwZSA9IGNsYXNzTmFtZVxuICAgICAgICAuc3BsaXQoL1xccy8pXG4gICAgICAgIC5maWx0ZXIoY2xzID0+IGNscyAhPT0gJ2FudGljb24nICYmIGNscyAhPT0gJ2FudGljb24tc3BpbicgJiYgISFjbHMubWF0Y2goaWNvblR5cGVSRSkpWyAwIF07XG5cbiAgICAgIGlmICghaWNvblR5cGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBsZXQgcGFyc2VkSWNvblR5cGUgPSBpY29uVHlwZS5yZXBsYWNlKCdhbnRpY29uLScsICcnKTtcbiAgICAgIGlmIChwYXJzZWRJY29uVHlwZS5pbmNsdWRlcygndmVydGljbGUnKSkge1xuICAgICAgICBwYXJzZWRJY29uVHlwZSA9IHBhcnNlZEljb25UeXBlLnJlcGxhY2UoJ3ZlcnRpY2xlJywgJ3ZlcnRpY2FsJyk7XG4gICAgICAgIHRoaXMuX3dhcm5BUEkoJ2Nyb3NzJyk7XG4gICAgICB9XG4gICAgICBpZiAocGFyc2VkSWNvblR5cGUuc3RhcnRzV2l0aCgnY3Jvc3MnKSkge1xuICAgICAgICBwYXJzZWRJY29uVHlwZSA9IHBhcnNlZEljb25UeXBlLnJlcGxhY2UoJ2Nyb3NzJywgJ2Nsb3NlJyk7XG4gICAgICAgIHRoaXMuX3dhcm5BUEkoJ3ZlcnRpY2FsJyk7XG4gICAgICB9XG5cbiAgICAgIC8vIE9ubHkgY2hhbmdlIGljb24gd2hlbiBpY29uIHR5cGUgZG9lcyBjaGFuZ2UuXG4gICAgICBpZiAodGhpcy50eXBlICE9PSBwYXJzZWRJY29uVHlwZSkge1xuICAgICAgICB0aGlzLnR5cGUgPSBwYXJzZWRJY29uVHlwZTtcbiAgICAgICAgdGhpcy5fY2hhbmdlSWNvbigpLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdbTkctWk9SUk9dJywgYFlvdSBjYW4gZmluZCBtb3JlIGFib3V0IHRoaXMgZXJyb3Igb24gaHR0cDovL25nLmFudC5kZXNpZ24vY29tcG9uZW50cy9pY29uL2VuXFxuYCwgZXJyKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEluIG9yZGVyIHRvIG1ha2UgdGhpcyBkaXJlY3RpdmUgY29tcGF0aWJsZSB0byBvbGQgQVBJLCB3ZSBoYWQgZG8gc29tZSB1Z2x5IHN0dWZmIGhlcmUuXG4gICAqIFRPRE86IFNob3VsZCBiZSByZW1vdmVkIGluIG5leHQgbWFqb3IgdmVyc2lvbi5cbiAgICovXG4gIHByaXZhdGUgX3dhcm5BUEkodHlwZTogJ29sZCcgfCAnY3Jvc3MnIHwgJ3ZlcnRpY2FsJyk6IHZvaWQge1xuICAgIGlmIChpc0Rldk1vZGUoKSkge1xuICAgICAgaWYgKHR5cGUgPT09ICdvbGQnICYmICF0aGlzLl9pY29uU2VydmljZS53YXJuZWRBYm91dEFQSSkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1tORy1aT1JST10nLCBgPGkgY2xhc3M9XCJhbnRpY29uXCI+PC9pPiB3b3VsZCBiZSBkZXByZWNhdGVkIHNvb24uIFBsZWFzZSB1c2UgPGkgbnotaWNvbiB0eXBlPVwiXCI+PC9pPiBBUEkuYCk7XG4gICAgICAgIHRoaXMuX2ljb25TZXJ2aWNlLndhcm5lZEFib3V0QVBJID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlID09PSAnY3Jvc3MnICYmICF0aGlzLl9pY29uU2VydmljZS53YXJuZWRBYm91dENyb3NzKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignW05HLVpPUlJPXScsIGAnY3Jvc3MnIGljb24gaXMgcmVwbGFjZWQgYnkgJ2Nsb3NlJyBpY29uLmApO1xuICAgICAgICB0aGlzLl9pY29uU2VydmljZS53YXJuZWRBYm91dENyb3NzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlID09PSAndmVydGljYWwnICYmICF0aGlzLl9pY29uU2VydmljZS53YXJuZWRBYm91dFZlcnRpY2FsKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignW05HLVpPUlJPXScsIGAndmVydGljbGUnIGlzIG1pc3NwZWxsZWQsIHdvdWxkIGJlIGNvcnJlY3RlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uLmApO1xuICAgICAgICB0aGlzLl9pY29uU2VydmljZS53YXJuZWRBYm91dFZlcnRpY2FsID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF90b2dnbGVTcGluKHN2ZzogU1ZHRWxlbWVudCk6IHZvaWQge1xuICAgIGlmICgodGhpcy5zcGluIHx8IHRoaXMudHlwZSA9PT0gJ2xvYWRpbmcnKSAmJiAhdGhpcy5fZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdhbnRpY29uLXNwaW4nKSkge1xuICAgICAgdGhpcy5fcmVuZGVyZXIuYWRkQ2xhc3Moc3ZnLCAnYW50aWNvbi1zcGluJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3JlbmRlcmVyLnJlbW92ZUNsYXNzKHN2ZywgJ2FudGljb24tc3BpbicpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX3NldENsYXNzTmFtZSgpOiB2b2lkIHtcbiAgICAvLyBJZiB0aGVyZSdzIG5vdCBhbiBhbnRpY29uIGNsYXNzLCB1c3VhbGx5IGEgbmV3IEFQSSBpY29uLCBnZXQgdGhlIGljb24gY2xhc3MgbmFtZSBiYWNrLlxuICAgIC8vIGFudGljb24gc2hvdWxkIGJlIGFkZGVkIGJlZm9yZSBvdGhlciBjbGFzcyBuYW1lcy5cbiAgICBpZiAodGhpcy5fZWwgJiYgdHlwZW9mIHRoaXMudHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnN0IGljb25DbGFzc05hbWVBcnIgPSB0aGlzLl9lbC5jbGFzc05hbWUuc3BsaXQoL1xccy8pO1xuICAgICAgY29uc3Qgb2xkVHlwZU5hbWVJbmRleCA9IGljb25DbGFzc05hbWVBcnIuZmluZEluZGV4KGNscyA9PiBjbHMgIT09ICdhbnRpY29uJyAmJiBjbHMgIT09ICdhbnRpY29uLXNwaW4nICYmICEhY2xzLm1hdGNoKGljb25UeXBlUkUpKTtcblxuICAgICAgaWYgKG9sZFR5cGVOYW1lSW5kZXggIT09IC0xKSB7XG4gICAgICAgIGljb25DbGFzc05hbWVBcnIuc3BsaWNlKG9sZFR5cGVOYW1lSW5kZXgsIDEsIGBhbnRpY29uLSR7dGhpcy50eXBlfWApO1xuICAgICAgICB0aGlzLl9yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5fZWwsICdjbGFzcycsIGljb25DbGFzc05hbWVBcnIuam9pbignICcpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLmFkZENsYXNzKHRoaXMuX2VsLCBgYW50aWNvbi0ke3RoaXMudHlwZX1gKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9zZXRTVkdEYXRhKHN2ZzogU1ZHRWxlbWVudCk6IHZvaWQge1xuICAgIGlmICh0eXBlb2YgdGhpcy50eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0QXR0cmlidXRlKHN2ZywgJ2RhdGEtaWNvbicsIHRoaXMudHlwZSk7XG4gICAgICB0aGlzLl9yZW5kZXJlci5zZXRBdHRyaWJ1dGUoc3ZnLCAnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX2FkZEV4dHJhTW9kaWZpY2F0aW9ucyhzdmc6IFNWR0VsZW1lbnQpOiB2b2lkIHtcbiAgICB0aGlzLl90b2dnbGVTcGluKHN2Zyk7XG4gICAgdGhpcy5fc2V0U1ZHRGF0YShzdmcpO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHVibGljIF9pY29uU2VydmljZTogTnpJY29uU2VydmljZSwgcHVibGljIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwdWJsaWMgX3JlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgICBzdXBlcihfaWNvblNlcnZpY2UsIF9lbGVtZW50UmVmLCBfcmVuZGVyZXIpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmljb25mb250KSB7XG4gICAgICAvLyBGb3IgYW50IGRlc2lnbiBpY29ucy5cbiAgICAgIHRoaXMuX3NldENsYXNzTmFtZSgpO1xuICAgICAgdGhpcy5fY2hhbmdlSWNvbigpLnRoZW4oc3ZnID0+IHtcbiAgICAgICAgdGhpcy5fYWRkRXh0cmFNb2RpZmljYXRpb25zKHN2Zyk7XG4gICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdbTkctWk9SUk9dJywgYFlvdSBjYW4gZmluZCBtb3JlIGFib3V0IHRoaXMgZXJyb3Igb24gaHR0cDovL25nLmFudC5kZXNpZ24vY29tcG9uZW50cy9pY29uL2VuYCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBGb3IgaWNvbmZvbnQgaWNvbnMuXG4gICAgICB0aGlzLl9zZXRTVkdFbGVtZW50KHRoaXMuX2ljb25TZXJ2aWNlLmNyZWF0ZUljb25mb250SWNvbihgIyR7dGhpcy5pY29uZm9udH1gKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZSB0byBET00gZWxlbWVudCBhdHRyaWJ1dGUgY2hhbmdlIGV2ZW50cywgc28gd2hlbiB1c2VyIHVzZSBuZ0NsYXNzIG9yIHNvbWV0aGluZyB0aGUgaWNvbiBjaGFuZ2VzIHdpdGggaXQuXG4gICAqL1xuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLl9lbCA9IHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcblxuICAgIC8vIE1ha2UgdGhlIGNvbXBvbmVudCBjb21wYXRpYmxlIHRvIG9sZCBjbGFzcz1cImFudGljb25cIiBBUEkuXG4gICAgaWYgKHRoaXMuX2VsICYmICF0aGlzLnR5cGUpIHtcbiAgICAgIHRoaXMuX3dhcm5BUEkoJ29sZCcpO1xuICAgICAgdGhpcy5fY2xhc3NDaGFuZ2VIYW5kbGVyKHRoaXMuX2VsLmNsYXNzTmFtZSk7XG4gICAgICB0aGlzLl9jbGFzc05hbWVPYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKChtdXRhdGlvbnM6IE11dGF0aW9uUmVjb3JkW10pID0+IHtcbiAgICAgICAgbXV0YXRpb25zXG4gICAgICAgICAgLmZpbHRlcigobXV0YXRpb246IE11dGF0aW9uUmVjb3JkKSA9PiBtdXRhdGlvbi5hdHRyaWJ1dGVOYW1lID09PSAnY2xhc3MnKVxuICAgICAgICAgIC5mb3JFYWNoKChtdXRhdGlvbjogTXV0YXRpb25SZWNvcmQpID0+IHRoaXMuX2NsYXNzQ2hhbmdlSGFuZGxlcigobXV0YXRpb24udGFyZ2V0IGFzIEhUTUxFbGVtZW50KS5jbGFzc05hbWUpKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5fY2xhc3NOYW1lT2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIHsgYXR0cmlidXRlczogdHJ1ZSB9KTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuX2VsLmNsYXNzTGlzdC5jb250YWlucygnYW50aWNvbicpKSB7XG4gICAgICB0aGlzLl9yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5fZWwsICdjbGFzcycsIGBhbnRpY29uICR7dGhpcy5fZWwuY2xhc3NOYW1lfWApO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnR5cGUpIHtcbiAgICAgIHRoaXMuX3NldENsYXNzTmFtZSgpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9jbGFzc05hbWVPYnNlcnZlcikge1xuICAgICAgdGhpcy5fY2xhc3NOYW1lT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJZiBjdXN0b20gY29udGVudCBpcyBwcm92aWRlZCwgc2hvdWxkIHRyeSB0byBub3JtYWxpemUgdGhlIHN2ZyBlbGVtZW50LlxuICAgKi9cbiAgbmdBZnRlckNvbnRlbnRDaGVja2VkKCk6IHZvaWQge1xuICAgIGNvbnN0IGNoaWxkcmVuID0gKHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudCBhcyBIVE1MRWxlbWVudCkuY2hpbGRyZW47XG4gICAgaWYgKGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aCAmJiAhdGhpcy50eXBlKSB7XG4gICAgICB0aGlzLl9pY29uU2VydmljZS5ub3JtYWxpemVTdmdFbGVtZW50KGNoaWxkcmVuWyAwIF0gYXMgU1ZHRWxlbWVudCk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTnpJY29uRGlyZWN0aXZlIH0gZnJvbSAnLi9uei1pY29uLmRpcmVjdGl2ZSc7XG5cbkBOZ01vZHVsZSh7XG4gIGV4cG9ydHMgICAgIDogWyBOekljb25EaXJlY3RpdmUgXSxcbiAgZGVjbGFyYXRpb25zOiBbIE56SWNvbkRpcmVjdGl2ZSBdXG59KVxuZXhwb3J0IGNsYXNzIE56SWNvbk1vZHVsZSB7XG59XG4iLCJpbXBvcnQge1xuICBhbmltYXRlLFxuICBzdGF0ZSxcbiAgc3R5bGUsXG4gIHRyYW5zaXRpb24sXG4gIHRyaWdnZXIsXG4gIEFuaW1hdGlvblRyaWdnZXJNZXRhZGF0YSxcbn0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5cbmV4cG9ydCBjb25zdCBmYWRlQW5pbWF0aW9uOiBBbmltYXRpb25UcmlnZ2VyTWV0YWRhdGEgPSAgdHJpZ2dlcignZmFkZUFuaW1hdGlvbicsIFtcbiAgc3RhdGUoJ3ZvaWQnLCBzdHlsZSh7IG9wYWNpdHk6IDAgfSkpLFxuICBzdGF0ZSgndHJ1ZScsIHN0eWxlKHsgb3BhY2l0eTogMSB9KSksXG4gIHN0YXRlKCdmYWxzZScsIHN0eWxlKHsgb3BhY2l0eTogMCB9KSksXG4gIHRyYW5zaXRpb24oJyogPT4gdHJ1ZScsIGFuaW1hdGUoJzE1MG1zIGN1YmljLWJlemllcigwLjAsIDAuMCwgMC4yLCAxKScpKSxcbiAgdHJhbnNpdGlvbignKiA9PiB2b2lkJywgYW5pbWF0ZSgnMTUwbXMgY3ViaWMtYmV6aWVyKDAuNCwgMC4wLCAxLCAxKScpKSxcbl0pO1xuIiwiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LFxuICBPbkluaXQsXG4gIE91dHB1dCxcbiAgVGVtcGxhdGVSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbmV4cG9ydCB0eXBlIE5nQ2xhc3NUeXBlID0gc3RyaW5nIHwgc3RyaW5nW10gfCBTZXQ8c3RyaW5nPiB8IHsgWyBrbGFzczogc3RyaW5nIF06IGFueTsgfTtcblxuaW1wb3J0IHsgZmFkZUFuaW1hdGlvbiB9IGZyb20gJy4uL2NvcmUvYW5pbWF0aW9uL2ZhZGUtYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyB0b0Jvb2xlYW4gfSBmcm9tICcuLi9jb3JlL3V0aWwvY29udmVydCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICAgICAgOiAnbnotYWxlcnQnLFxuICBhbmltYXRpb25zICAgICAgICAgOiBbIGZhZGVBbmltYXRpb24gXSxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG4gIHRlbXBsYXRlVXJsICAgICAgICA6ICcuL256LWFsZXJ0LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVzICAgICAgICAgICAgIDogW1xuICAgICAgYDpob3N0IHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIH1gXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgTnpBbGVydENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIHByaXZhdGUgX2Jhbm5lciA9IGZhbHNlO1xuICBwcml2YXRlIF9jbG9zZWFibGUgPSBmYWxzZTtcbiAgcHJpdmF0ZSBfc2hvd0ljb24gPSBmYWxzZTtcbiAgcHJpdmF0ZSBfdHlwZSA9ICdpbmZvJztcbiAgcHJpdmF0ZSBfZGVzY3JpcHRpb246IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+O1xuICBwcml2YXRlIF9tZXNzYWdlOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPjtcbiAgcHJpdmF0ZSBfY2xvc2VUZXh0OiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPjtcbiAgZGlzcGxheSA9IHRydWU7XG4gIGlzVHlwZVNldCA9IGZhbHNlO1xuICBpc1Nob3dJY29uU2V0ID0gZmFsc2U7XG4gIHByZWZpeENsYXNzID0gJ2FudC1hbGVydCc7XG4gIGlzRGVzY3JpcHRpb25TdHJpbmc6IGJvb2xlYW47XG4gIGlzTWVzc2FnZVN0cmluZzogYm9vbGVhbjtcbiAgaXNDbG9zZVRleHRTdHJpbmc6IGJvb2xlYW47XG4gIG91dGVyQ2xhc3NNYXA7XG4gIGljb25UeXBlO1xuICBAT3V0cHV0KCkgbnpPbkNsb3NlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBJbnB1dCgpIG56SWNvblR5cGU6IE5nQ2xhc3NUeXBlO1xuXG4gIEBJbnB1dCgpXG4gIHNldCBuekRlc2NyaXB0aW9uKHZhbHVlOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPikge1xuICAgIHRoaXMuaXNEZXNjcmlwdGlvblN0cmluZyA9ICEodmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZik7XG4gICAgdGhpcy5fZGVzY3JpcHRpb24gPSB2YWx1ZTtcbiAgICB0aGlzLnVwZGF0ZU91dGVyQ2xhc3NNYXAoKTtcbiAgICB0aGlzLnVwZGF0ZUljb25DbGFzc01hcCgpO1xuICB9XG5cbiAgZ2V0IG56RGVzY3JpcHRpb24oKTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLl9kZXNjcmlwdGlvbjtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekNsb3NlVGV4dCh2YWx1ZTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD4pIHtcbiAgICB0aGlzLmlzQ2xvc2VUZXh0U3RyaW5nID0gISh2YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmKTtcbiAgICB0aGlzLl9jbG9zZVRleHQgPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBuekNsb3NlVGV4dCgpOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMuX2Nsb3NlVGV4dDtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuek1lc3NhZ2UodmFsdWU6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+KSB7XG4gICAgdGhpcy5pc01lc3NhZ2VTdHJpbmcgPSAhKHZhbHVlIGluc3RhbmNlb2YgVGVtcGxhdGVSZWYpO1xuICAgIHRoaXMuX21lc3NhZ2UgPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBuek1lc3NhZ2UoKTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLl9tZXNzYWdlO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56VHlwZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fdHlwZSA9IHZhbHVlO1xuICAgIHRoaXMuaXNUeXBlU2V0ID0gdHJ1ZTtcbiAgICB0aGlzLnVwZGF0ZU91dGVyQ2xhc3NNYXAoKTtcbiAgICB0aGlzLnVwZGF0ZUljb25DbGFzc01hcCgpO1xuICB9XG5cbiAgZ2V0IG56VHlwZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl90eXBlO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56QmFubmVyKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fYmFubmVyID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgICBpZiAoIXRoaXMuaXNUeXBlU2V0KSB7XG4gICAgICB0aGlzLm56VHlwZSA9ICd3YXJuaW5nJztcbiAgICB9XG4gICAgaWYgKCF0aGlzLmlzU2hvd0ljb25TZXQpIHtcbiAgICAgIHRoaXMubnpTaG93SWNvbiA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMudXBkYXRlT3V0ZXJDbGFzc01hcCgpO1xuICB9XG5cbiAgZ2V0IG56QmFubmVyKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9iYW5uZXI7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpDbG9zZWFibGUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9jbG9zZWFibGUgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56Q2xvc2VhYmxlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9jbG9zZWFibGU7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpTaG93SWNvbih2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX3Nob3dJY29uID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgICB0aGlzLmlzU2hvd0ljb25TZXQgPSB0cnVlO1xuICAgIHRoaXMudXBkYXRlT3V0ZXJDbGFzc01hcCgpO1xuICB9XG5cbiAgZ2V0IG56U2hvd0ljb24oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3Nob3dJY29uO1xuICB9XG5cbiAgY2xvc2VBbGVydCgpOiB2b2lkIHtcbiAgICB0aGlzLmRpc3BsYXkgPSBmYWxzZTtcbiAgfVxuXG4gIG9uRmFkZUFuaW1hdGlvbkRvbmUoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmRpc3BsYXkpIHtcbiAgICAgIHRoaXMubnpPbkNsb3NlLmVtaXQodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlT3V0ZXJDbGFzc01hcCgpOiB2b2lkIHtcbiAgICB0aGlzLm91dGVyQ2xhc3NNYXAgPSB7XG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xhc3N9YCBdICAgICAgICAgICAgICAgICA6IHRydWUsXG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xhc3N9LSR7dGhpcy5uelR5cGV9YCBdICA6IHRydWUsXG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xhc3N9LW5vLWljb25gIF0gICAgICAgICA6ICF0aGlzLm56U2hvd0ljb24sXG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xhc3N9LWJhbm5lcmAgXSAgICAgICAgICA6IHRoaXMubnpCYW5uZXIsXG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xhc3N9LXdpdGgtZGVzY3JpcHRpb25gIF06ICEhdGhpcy5uekRlc2NyaXB0aW9uXG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZUljb25DbGFzc01hcCgpOiB2b2lkIHtcbiAgICBjb25zdCBpY29uVHlwZSA9IHtcbiAgICAgICdjbG9zZS1jaXJjbGUtbycgICAgICAgICA6IHRoaXMubnpEZXNjcmlwdGlvbiAmJiB0aGlzLm56VHlwZSA9PT0gJ2Vycm9yJyxcbiAgICAgICdjaGVjay1jaXJjbGUtbycgICAgICAgICA6IHRoaXMubnpEZXNjcmlwdGlvbiAmJiB0aGlzLm56VHlwZSA9PT0gJ3N1Y2Nlc3MnLFxuICAgICAgJ2luZm8tY2lyY2xlLW8nICAgICAgICAgIDogdGhpcy5uekRlc2NyaXB0aW9uICYmIHRoaXMubnpUeXBlID09PSAnaW5mbycsXG4gICAgICAnZXhjbGFtYXRpb24tY2lyY2xlLW8nICAgOiB0aGlzLm56RGVzY3JpcHRpb24gJiYgdGhpcy5uelR5cGUgPT09ICd3YXJuaW5nJyxcbiAgICAgICdjbG9zZS1jaXJjbGUtZmlsbCcgICAgICA6ICghdGhpcy5uekRlc2NyaXB0aW9uKSAmJiB0aGlzLm56VHlwZSA9PT0gJ2Vycm9yJyxcbiAgICAgICdjaGVjay1jaXJjbGUtZmlsbCcgICAgICA6ICghdGhpcy5uekRlc2NyaXB0aW9uKSAmJiB0aGlzLm56VHlwZSA9PT0gJ3N1Y2Nlc3MnLFxuICAgICAgJ2luZm8tY2lyY2xlLWZpbGwnICAgICAgIDogKCF0aGlzLm56RGVzY3JpcHRpb24pICYmIHRoaXMubnpUeXBlID09PSAnaW5mbycsXG4gICAgICAnZXhjbGFtYXRpb24tY2lyY2xlLWZpbGwnOiAoIXRoaXMubnpEZXNjcmlwdGlvbikgJiYgdGhpcy5uelR5cGUgPT09ICd3YXJuaW5nJ1xuICAgIH07XG5cbiAgICBPYmplY3Qua2V5cyhpY29uVHlwZSkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgaWYgKGljb25UeXBlWyBrZXkgXSkge1xuICAgICAgICB0aGlzLmljb25UeXBlID0ga2V5O1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy51cGRhdGVJY29uQ2xhc3NNYXAoKTtcbiAgICB0aGlzLnVwZGF0ZU91dGVyQ2xhc3NNYXAoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOekljb25Nb2R1bGUgfSBmcm9tICcuLi9pY29uL256LWljb24ubW9kdWxlJztcblxuaW1wb3J0IHsgTnpBbGVydENvbXBvbmVudCB9IGZyb20gJy4vbnotYWxlcnQuY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbIE56QWxlcnRDb21wb25lbnQgXSxcbiAgZXhwb3J0cyAgICAgOiBbIE56QWxlcnRDb21wb25lbnQgXSxcbiAgaW1wb3J0cyAgICAgOiBbIENvbW1vbk1vZHVsZSwgTnpJY29uTW9kdWxlIF1cbn0pXG5leHBvcnQgY2xhc3MgTnpBbGVydE1vZHVsZSB7XG59XG4iLCJpbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBJbmplY3QsXG4gIElucHV0LFxuICBPbkRlc3Ryb3ksXG4gIE91dHB1dCxcbiAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZnJvbUV2ZW50LCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkLCB0aHJvdHRsZVRpbWUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBOelNjcm9sbFNlcnZpY2UgfSBmcm9tICcuLi9jb3JlL3Njcm9sbC9uei1zY3JvbGwuc2VydmljZSc7XG5pbXBvcnQgeyB0b0Jvb2xlYW4sIHRvTnVtYmVyIH0gZnJvbSAnLi4vY29yZS91dGlsL2NvbnZlcnQnO1xuXG5pbXBvcnQgeyBOekFuY2hvckxpbmtDb21wb25lbnQgfSBmcm9tICcuL256LWFuY2hvci1saW5rLmNvbXBvbmVudCc7XG5cbmludGVyZmFjZSBTZWN0aW9uIHtcbiAgY29tcDogTnpBbmNob3JMaW5rQ29tcG9uZW50O1xuICB0b3A6IG51bWJlcjtcbn1cblxuY29uc3Qgc2hhcnBNYXRjaGVyUmVneCA9IC8jKFteI10rKSQvO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICAgICAgICAgIDogJ256LWFuY2hvcicsXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxuICB0ZW1wbGF0ZVVybCAgICAgICAgOiAnLi9uei1hbmNob3IuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb24gICAgOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgTnpBbmNob3JDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXQge1xuXG4gIHByaXZhdGUgbGlua3M6IE56QW5jaG9yTGlua0NvbXBvbmVudFtdID0gW107XG4gIHByaXZhdGUgYW5pbWF0aW5nID0gZmFsc2U7XG4gIHByaXZhdGUgdGFyZ2V0OiBFbGVtZW50ID0gbnVsbDtcbiAgc2Nyb2xsJDogU3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgdmlzaWJsZSA9IGZhbHNlO1xuICB3cmFwcGVyU3R5bGU6IHt9ID0geyAnbWF4LWhlaWdodCc6ICcxMDB2aCcgfTtcbiAgQFZpZXdDaGlsZCgnd3JhcCcpIHByaXZhdGUgd3JhcDogRWxlbWVudFJlZjtcbiAgQFZpZXdDaGlsZCgnaW5rJykgcHJpdmF0ZSBpbms6IEVsZW1lbnRSZWY7XG5cbiAgLy8gcmVnaW9uOiBmaWVsZHNcblxuICBwcml2YXRlIF9hZmZpeDogYm9vbGVhbiA9IHRydWU7XG5cbiAgQElucHV0KClcbiAgc2V0IG56QWZmaXgodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9hZmZpeCA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBnZXQgbnpBZmZpeCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fYWZmaXg7XG4gIH1cblxuICBwcml2YXRlIF9ib3VuZHM6IG51bWJlciA9IDU7XG5cbiAgQElucHV0KClcbiAgc2V0IG56Qm91bmRzKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9ib3VuZHMgPSB0b051bWJlcih2YWx1ZSwgNSk7XG4gIH1cblxuICBnZXQgbnpCb3VuZHMoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fYm91bmRzO1xuICB9XG5cbiAgcHJpdmF0ZSBfb2Zmc2V0VG9wOiBudW1iZXI7XG5cbiAgQElucHV0KClcbiAgc2V0IG56T2Zmc2V0VG9wKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9vZmZzZXRUb3AgPSB0b051bWJlcih2YWx1ZSwgMCk7XG4gICAgdGhpcy53cmFwcGVyU3R5bGUgPSB7XG4gICAgICAnbWF4LWhlaWdodCc6IGBjYWxjKDEwMHZoIC0gJHt0aGlzLl9vZmZzZXRUb3B9cHgpYFxuICAgIH07XG4gIH1cblxuICBnZXQgbnpPZmZzZXRUb3AoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fb2Zmc2V0VG9wO1xuICB9XG5cbiAgcHJpdmF0ZSBfc2hvd0lua0luRml4ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBASW5wdXQoKVxuICBzZXQgbnpTaG93SW5rSW5GaXhlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX3Nob3dJbmtJbkZpeGVkID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuelNob3dJbmtJbkZpeGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9zaG93SW5rSW5GaXhlZDtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuelRhcmdldChlbDogRWxlbWVudCkge1xuICAgIHRoaXMudGFyZ2V0ID0gZWw7XG4gICAgdGhpcy5yZWdpc3RlclNjcm9sbEV2ZW50KCk7XG4gIH1cblxuICBAT3V0cHV0KCkgbnpDbGljazogRXZlbnRFbWl0dGVyPHN0cmluZz4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgQE91dHB1dCgpIG56U2Nyb2xsOiBFdmVudEVtaXR0ZXI8TnpBbmNob3JMaW5rQ29tcG9uZW50PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAvLyBlbmRyZWdpb25cblxuICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55ICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc2Nyb2xsU3J2OiBOelNjcm9sbFNlcnZpY2UsIEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgZG9jOiBhbnksIHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gIH1cblxuICByZWdpc3RlckxpbmsobGluazogTnpBbmNob3JMaW5rQ29tcG9uZW50KTogdm9pZCB7XG4gICAgdGhpcy5saW5rcy5wdXNoKGxpbmspO1xuICB9XG5cbiAgdW5yZWdpc3RlckxpbmsobGluazogTnpBbmNob3JMaW5rQ29tcG9uZW50KTogdm9pZCB7XG4gICAgdGhpcy5saW5rcy5zcGxpY2UodGhpcy5saW5rcy5pbmRleE9mKGxpbmspLCAxKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0VGFyZ2V0KCk6IEVsZW1lbnQgfCBXaW5kb3cge1xuICAgIHJldHVybiB0aGlzLnRhcmdldCB8fCB3aW5kb3c7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgdGhpcy5yZWdpc3RlclNjcm9sbEV2ZW50KCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbigpO1xuICB9XG5cbiAgcHJpdmF0ZSByZWdpc3RlclNjcm9sbEV2ZW50KCk6IHZvaWQge1xuICAgIHRoaXMucmVtb3ZlTGlzdGVuKCk7XG4gICAgdGhpcy5zY3JvbGwkID0gZnJvbUV2ZW50KHRoaXMuZ2V0VGFyZ2V0KCksICdzY3JvbGwnKS5waXBlKHRocm90dGxlVGltZSg1MCksIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCkpXG4gICAgLnN1YnNjcmliZShlID0+IHRoaXMuaGFuZGxlU2Nyb2xsKCkpO1xuICAgIC8vIMOnwpTCscOkwrrCjsOpwqHCtcOpwp3CosOlwojCt8OmwpbCsMOmwpfCtsOmwrvCmsOlworCqMOmwp3CocOkwr3CjcOnwr3CrsOnwprChMOowq7CsMOlwr/ChlxuICAgIC8vIMOlwoDCksOnwr3CrsOlwpzCqGRvbcOmwpzCqsOmwrjCssOmwp/Ck8Olwq7CjMOmwojCkMOvwrzCjMOlwq/CvMOowofCtMOowq7CocOnwq7Cl8OkwrjCjcOmwq3Co8OnwqHCrlxuICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5oYW5kbGVTY3JvbGwoKSk7XG4gIH1cblxuICBwcml2YXRlIHJlbW92ZUxpc3RlbigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5zY3JvbGwkKSB7XG4gICAgICB0aGlzLnNjcm9sbCQudW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldE9mZnNldFRvcChlbGVtZW50OiBIVE1MRWxlbWVudCk6IG51bWJlciB7XG4gICAgaWYgKCFlbGVtZW50IHx8ICFlbGVtZW50LmdldENsaWVudFJlY3RzKCkubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgY29uc3QgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgaWYgKCFyZWN0LndpZHRoICYmICFyZWN0LmhlaWdodCkge1xuICAgICAgcmV0dXJuIHJlY3QudG9wO1xuICAgIH1cbiAgICByZXR1cm4gcmVjdC50b3AgLSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFRvcDtcbiAgfVxuXG4gIGhhbmRsZVNjcm9sbCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5hbmltYXRpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBzZWN0aW9uczogU2VjdGlvbltdID0gW107XG4gICAgY29uc3Qgc2NvcGUgPSAodGhpcy5uek9mZnNldFRvcCB8fCAwKSArIHRoaXMubnpCb3VuZHM7XG4gICAgdGhpcy5saW5rcy5mb3JFYWNoKGNvbXAgPT4ge1xuICAgICAgY29uc3Qgc2hhcnBMaW5rTWF0Y2ggPSBzaGFycE1hdGNoZXJSZWd4LmV4ZWMoY29tcC5uekhyZWYudG9TdHJpbmcoKSk7XG4gICAgICBpZiAoIXNoYXJwTGlua01hdGNoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuZG9jLmdldEVsZW1lbnRCeUlkKHNoYXJwTGlua01hdGNoWyAxIF0pO1xuICAgICAgaWYgKHRhcmdldCAmJiB0aGlzLmdldE9mZnNldFRvcCh0YXJnZXQpIDwgc2NvcGUpIHtcbiAgICAgICAgY29uc3QgdG9wID0gdGhpcy5nZXRPZmZzZXRUb3AodGFyZ2V0KTtcbiAgICAgICAgc2VjdGlvbnMucHVzaCh7XG4gICAgICAgICAgdG9wLFxuICAgICAgICAgIGNvbXBcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLnZpc2libGUgPSAhIXNlY3Rpb25zLmxlbmd0aDtcbiAgICBpZiAoIXRoaXMudmlzaWJsZSkge1xuICAgICAgdGhpcy5jbGVhckFjdGl2ZSgpO1xuICAgICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG1heFNlY3Rpb24gPSBzZWN0aW9ucy5yZWR1Y2UoKHByZXYsIGN1cnIpID0+IGN1cnIudG9wID4gcHJldi50b3AgPyBjdXJyIDogcHJldik7XG4gICAgICB0aGlzLmhhbmRsZUFjdGl2ZShtYXhTZWN0aW9uLmNvbXApO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY2xlYXJBY3RpdmUoKTogdm9pZCB7XG4gICAgdGhpcy5saW5rcy5mb3JFYWNoKGkgPT4gaS5hY3RpdmUgPSBmYWxzZSk7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZUFjdGl2ZShjb21wOiBOekFuY2hvckxpbmtDb21wb25lbnQpOiB2b2lkIHtcbiAgICB0aGlzLmNsZWFyQWN0aXZlKCk7XG5cbiAgICBjb21wLmFjdGl2ZSA9IHRydWU7XG4gICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XG5cbiAgICBjb25zdCBsaW5rTm9kZSA9IChjb21wLmVsLm5hdGl2ZUVsZW1lbnQgYXMgSFRNTERpdkVsZW1lbnQpLnF1ZXJ5U2VsZWN0b3IoJy5hbnQtYW5jaG9yLWxpbmstdGl0bGUnKSBhcyBIVE1MRWxlbWVudDtcbiAgICB0aGlzLmluay5uYXRpdmVFbGVtZW50LnN0eWxlLnRvcCA9IGAke2xpbmtOb2RlLm9mZnNldFRvcCArIGxpbmtOb2RlLmNsaWVudEhlaWdodCAvIDIgLSA0LjV9cHhgO1xuXG4gICAgdGhpcy5uelNjcm9sbC5lbWl0KGNvbXApO1xuICB9XG5cbiAgaGFuZGxlU2Nyb2xsVG8obGlua0NvbXA6IE56QW5jaG9yTGlua0NvbXBvbmVudCk6IHZvaWQge1xuICAgIGNvbnN0IGVsID0gdGhpcy5kb2MucXVlcnlTZWxlY3RvcihsaW5rQ29tcC5uekhyZWYpO1xuICAgIGlmICghZWwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmFuaW1hdGluZyA9IHRydWU7XG4gICAgY29uc3QgY29udGFpbmVyU2Nyb2xsVG9wID0gdGhpcy5zY3JvbGxTcnYuZ2V0U2Nyb2xsKHRoaXMuZ2V0VGFyZ2V0KCkpO1xuICAgIGNvbnN0IGVsT2Zmc2V0VG9wID0gdGhpcy5zY3JvbGxTcnYuZ2V0T2Zmc2V0KGVsKS50b3A7XG4gICAgY29uc3QgdGFyZ2V0U2Nyb2xsVG9wID0gY29udGFpbmVyU2Nyb2xsVG9wICsgZWxPZmZzZXRUb3AgLSAodGhpcy5uek9mZnNldFRvcCB8fCAwKTtcbiAgICB0aGlzLnNjcm9sbFNydi5zY3JvbGxUbyh0aGlzLmdldFRhcmdldCgpLCB0YXJnZXRTY3JvbGxUb3AsIG51bGwsICgpID0+IHtcbiAgICAgIHRoaXMuYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICB0aGlzLmhhbmRsZUFjdGl2ZShsaW5rQ29tcCk7XG4gICAgfSk7XG4gICAgdGhpcy5uekNsaWNrLmVtaXQobGlua0NvbXAubnpIcmVmKTtcbiAgfVxuXG59XG4iLCJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIENvbnRlbnRDaGlsZCxcbiAgRWxlbWVudFJlZixcbiAgSG9zdEJpbmRpbmcsXG4gIElucHV0LFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgVGVtcGxhdGVSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE56QW5jaG9yQ29tcG9uZW50IH0gZnJvbSAnLi9uei1hbmNob3IuY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yICAgICAgICAgICA6ICduei1saW5rJyxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG4gIHRlbXBsYXRlVXJsICAgICAgICA6ICcuL256LWFuY2hvci1saW5rLmNvbXBvbmVudC5odG1sJyxcbiAgaG9zdCAgICAgICAgICAgICAgIDoge1xuICAgICdbY2xhc3MuYW50LWFuY2hvci1saW5rXSc6ICd0cnVlJyxcbiAgICAnc3R5bGUnICAgICAgICAgICAgICAgICAgOiAnZGlzcGxheTpibG9jaydcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBOekFuY2hvckxpbmtDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG5cbiAgQElucHV0KCkgbnpIcmVmID0gJyMnO1xuXG4gIHRpdGxlU3RyID0gJyc7XG4gIHRpdGxlVHBsOiBUZW1wbGF0ZVJlZjx2b2lkPjtcblxuICBASW5wdXQoKVxuICBzZXQgbnpUaXRsZSh2YWx1ZTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD4pIHtcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZikge1xuICAgICAgdGhpcy50aXRsZVRwbCA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnRpdGxlU3RyID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgQENvbnRlbnRDaGlsZCgnbnpUZW1wbGF0ZScpIG56VGVtcGxhdGU6IFRlbXBsYXRlUmVmPHZvaWQ+O1xuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW50LWFuY2hvci1saW5rLWFjdGl2ZScpIGFjdGl2ZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSBhbmNob3JDb21wOiBOekFuY2hvckNvbXBvbmVudCkge1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5hbmNob3JDb21wLnJlZ2lzdGVyTGluayh0aGlzKTtcbiAgfVxuXG4gIGdvVG9DbGljayhlOiBFdmVudCk6IHZvaWQge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHRoaXMuYW5jaG9yQ29tcC5oYW5kbGVTY3JvbGxUbyh0aGlzKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuYW5jaG9yQ29tcC51bnJlZ2lzdGVyTGluayh0aGlzKTtcbiAgfVxuXG59XG4iLCJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgTnpBZmZpeE1vZHVsZSB9IGZyb20gJy4uL2FmZml4L256LWFmZml4Lm1vZHVsZSc7XG5pbXBvcnQgeyBTQ1JPTExfU0VSVklDRV9QUk9WSURFUiB9IGZyb20gJy4uL2NvcmUvc2Nyb2xsL256LXNjcm9sbC5zZXJ2aWNlJztcblxuaW1wb3J0IHsgTnpBbmNob3JMaW5rQ29tcG9uZW50IH0gZnJvbSAnLi9uei1hbmNob3ItbGluay5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpBbmNob3JDb21wb25lbnQgfSBmcm9tICcuL256LWFuY2hvci5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFsgTnpBbmNob3JDb21wb25lbnQsIE56QW5jaG9yTGlua0NvbXBvbmVudCBdLFxuICBleHBvcnRzICAgICA6IFsgTnpBbmNob3JDb21wb25lbnQsIE56QW5jaG9yTGlua0NvbXBvbmVudCBdLFxuICBpbXBvcnRzICAgICA6IFsgQ29tbW9uTW9kdWxlLCBOekFmZml4TW9kdWxlIF0sXG4gIHByb3ZpZGVycyAgIDogWyBTQ1JPTExfU0VSVklDRV9QUk9WSURFUiBdXG59KVxuZXhwb3J0IGNsYXNzIE56QW5jaG9yTW9kdWxlIHtcbn1cbiIsImltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb21wb25lbnQsXG4gIElucHV0LFxuICBUZW1wbGF0ZVJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yICAgICAgICAgICA6ICduei1hdXRvLW9wdGdyb3VwJyxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG4gIGNoYW5nZURldGVjdGlvbiAgICA6IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGVVcmwgICAgICAgIDogJy4vbnotYXV0b2NvbXBsZXRlLW9wdGdyb3VwLmNvbXBvbmVudC5odG1sJyxcbiAgaG9zdCAgICAgICAgICAgICAgIDoge1xuICAgICdyb2xlJyA6ICdncm91cCcsXG4gICAgJ2NsYXNzJzogJ2FudC1zZWxlY3QtZHJvcGRvd24tbWVudS1pdGVtLWdyb3VwJ1xuICB9XG59KVxuZXhwb3J0IGNsYXNzIE56QXV0b2NvbXBsZXRlT3B0Z3JvdXBDb21wb25lbnQge1xuICBpc0xhYmVsU3RyaW5nOiBib29sZWFuO1xuXG4gIC8qKiBncm91cCDDp8KawoQgbGFiZWzDr8K8wozDpsKUwq/DpsKMwoEgJ3N0cmluZycgw6XCksKMIGBUZW1wbGF0ZVJlZmAgKi9cbiAgQElucHV0KClcbiAgc2V0IG56TGFiZWwodmFsdWU6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+KSB7XG4gICAgdGhpcy5pc0xhYmVsU3RyaW5nID0gISh2YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmKTtcbiAgICB0aGlzLl9sYWJlbCA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IG56TGFiZWwoKTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLl9sYWJlbDtcbiAgfVxuXG4gIF9sYWJlbDogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD47XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gIH1cblxufVxuIiwiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlcixcbiAgSW5wdXQsIE91dHB1dFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgdG9Cb29sZWFuIH0gZnJvbSAnLi4vY29yZS91dGlsL2NvbnZlcnQnO1xuXG5leHBvcnQgY2xhc3MgTnpPcHRpb25TZWxlY3Rpb25DaGFuZ2Uge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgc291cmNlOiBOekF1dG9jb21wbGV0ZU9wdGlvbkNvbXBvbmVudCxcbiAgICBwdWJsaWMgaXNVc2VySW5wdXQ6IGJvb2xlYW4gPSBmYWxzZVxuICApIHtcbiAgfVxufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICAgICAgICAgIDogJ256LWF1dG8tb3B0aW9uJyxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG4gIGNoYW5nZURldGVjdGlvbiAgICA6IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGVVcmwgICAgICAgIDogJy4vbnotYXV0b2NvbXBsZXRlLW9wdGlvbi5jb21wb25lbnQuaHRtbCcsXG4gIGhvc3QgICAgICAgICAgICAgICA6IHtcbiAgICAncm9sZScgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICdtZW51aXRlbScsXG4gICAgJ2NsYXNzJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnYW50LXNlbGVjdC1kcm9wZG93bi1tZW51LWl0ZW0nLFxuICAgICdbY2xhc3MuYW50LXNlbGVjdC1kcm9wZG93bi1tZW51LWl0ZW0tc2VsZWN0ZWRdJzogJ3NlbGVjdGVkJyxcbiAgICAnW2NsYXNzLmFudC1zZWxlY3QtZHJvcGRvd24tbWVudS1pdGVtLWFjdGl2ZV0nICA6ICdhY3RpdmUnLFxuICAgICdbY2xhc3MuYW50LXNlbGVjdC1kcm9wZG93bi1tZW51LWl0ZW0tZGlzYWJsZWRdJzogJ256RGlzYWJsZWQnLFxuICAgICdbYXR0ci5hcmlhLXNlbGVjdGVkXScgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ3NlbGVjdGVkLnRvU3RyaW5nKCknLFxuICAgICdbYXR0ci5hcmlhLWRpc2FibGVkXScgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ256RGlzYWJsZWQudG9TdHJpbmcoKScsXG4gICAgJyhjbGljayknICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnc2VsZWN0VmlhSW50ZXJhY3Rpb24oKSdcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBOekF1dG9jb21wbGV0ZU9wdGlvbkNvbXBvbmVudCB7XG4gIHByaXZhdGUgZGlzYWJsZWQgPSBmYWxzZTtcblxuICBhY3RpdmUgPSBmYWxzZTtcbiAgc2VsZWN0ZWQgPSBmYWxzZTtcblxuICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55ICovXG4gIEBJbnB1dCgpIG56VmFsdWU6IGFueTtcbiAgQElucHV0KCkgbnpMYWJlbDogc3RyaW5nO1xuXG4gIEBJbnB1dCgpXG4gIGdldCBuekRpc2FibGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmRpc2FibGVkO1xuICB9XG5cbiAgc2V0IG56RGlzYWJsZWQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLmRpc2FibGVkID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIEBPdXRwdXQoKSBzZWxlY3Rpb25DaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPE56T3B0aW9uU2VsZWN0aW9uQ2hhbmdlPigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLCBwcml2YXRlIGVsZW1lbnQ6IEVsZW1lbnRSZWYpIHtcbiAgfVxuXG4gIC8qKiDDqcKAwonDpsKLwqkgKi9cbiAgc2VsZWN0KCk6IHZvaWQge1xuICAgIHRoaXMuc2VsZWN0ZWQgPSB0cnVlO1xuICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgdGhpcy5lbWl0U2VsZWN0aW9uQ2hhbmdlRXZlbnQoKTtcbiAgfVxuXG4gIC8qKiDDpcKPwpbDpsK2wojDqcKAwonDpsKLwqkgKi9cbiAgZGVzZWxlY3QoKTogdm9pZCB7XG4gICAgdGhpcy5zZWxlY3RlZCA9IGZhbHNlO1xuICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgdGhpcy5lbWl0U2VsZWN0aW9uQ2hhbmdlRXZlbnQoKTtcbiAgfVxuXG4gIC8qKiDDqMKOwrfDpcKPwpbDp8KUwqjDpMK6wo7DpsKYwr7Dp8KkwrrDp8KawoQgbGFiZWwgKi9cbiAgZ2V0TGFiZWwoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5uekxhYmVsIHx8IHRoaXMubnpWYWx1ZS50b1N0cmluZygpO1xuICB9XG5cbiAgLyoqIMOowq7CvsOnwr3CrsOmwr/CgMOmwrTCu8OmwqDCt8OlwrzCjyAow6TCu8KFw6nCmcKQw6bCoMK3w6XCvMKPKSAqL1xuICBzZXRBY3RpdmVTdHlsZXMoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmFjdGl2ZSkge1xuICAgICAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICAgICAgdGhpcy5jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG4gIH1cblxuICAvKiogw6jCrsK+w6fCvcKuw6nCncKew6bCv8KAw6bCtMK7w6bCoMK3w6XCvMKPICjDpMK7woXDqcKZwpDDpsKgwrfDpcK8wo8pICovXG4gIHNldEluYWN0aXZlU3R5bGVzKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuICB9XG5cbiAgc2Nyb2xsSW50b1ZpZXdJZk5lZWRlZCgpOiB2b2lkIHtcbiAgICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tc3RyaW5nLWxpdGVyYWwgKi9cbiAgICBpZiAodGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQgJiYgdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnRbJ3Njcm9sbEludG9WaWV3SWZOZWVkZWQnXSkge1xuICAgICAgLyogdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXN0cmluZy1saXRlcmFsICovXG4gICAgICBzZXRUaW1lb3V0KCgpID0+ICB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudFsgJ3Njcm9sbEludG9WaWV3SWZOZWVkZWQnIF0oZmFsc2UpLCAxNTApO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZW1pdFNlbGVjdGlvbkNoYW5nZUV2ZW50KGlzVXNlcklucHV0OiBib29sZWFuID0gZmFsc2UpOiB2b2lkIHtcbiAgICB0aGlzLnNlbGVjdGlvbkNoYW5nZS5lbWl0KG5ldyBOek9wdGlvblNlbGVjdGlvbkNoYW5nZSh0aGlzLCBpc1VzZXJJbnB1dCkpO1xuICB9XG5cbiAgc2VsZWN0VmlhSW50ZXJhY3Rpb24oKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLnNlbGVjdGVkID0gIXRoaXMuc2VsZWN0ZWQ7XG4gICAgICBpZiAodGhpcy5zZWxlY3RlZCkge1xuICAgICAgICB0aGlzLnNldEFjdGl2ZVN0eWxlcygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zZXRJbmFjdGl2ZVN0eWxlcygpO1xuICAgICAgfVxuICAgICAgdGhpcy5lbWl0U2VsZWN0aW9uQ2hhbmdlRXZlbnQodHJ1ZSk7XG4gICAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgIH1cbiAgfVxuXG59XG4iLCJpbXBvcnQge1xuICBhbmltYXRlLFxuICBzdGF0ZSxcbiAgc3R5bGUsXG4gIHRyYW5zaXRpb24sXG4gIHRyaWdnZXIsXG4gIEFuaW1hdGlvblRyaWdnZXJNZXRhZGF0YVxufSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcblxuZXhwb3J0IGNvbnN0IGRyb3BEb3duQW5pbWF0aW9uOiBBbmltYXRpb25UcmlnZ2VyTWV0YWRhdGEgPSB0cmlnZ2VyKCdkcm9wRG93bkFuaW1hdGlvbicsIFtcbiAgc3RhdGUoJ2JvdHRvbScsIHN0eWxlKHtcbiAgICBvcGFjaXR5ICAgICAgICA6IDEsXG4gICAgdHJhbnNmb3JtICAgICAgOiAnc2NhbGVZKDEpJyxcbiAgICB0cmFuc2Zvcm1PcmlnaW46ICcwJSAwJSdcbiAgfSkpLFxuICB0cmFuc2l0aW9uKCd2b2lkID0+IGJvdHRvbScsIFtcbiAgICBzdHlsZSh7XG4gICAgICBvcGFjaXR5ICAgICAgICA6IDAsXG4gICAgICB0cmFuc2Zvcm0gICAgICA6ICdzY2FsZVkoMC44KScsXG4gICAgICB0cmFuc2Zvcm1PcmlnaW46ICcwJSAwJSdcbiAgICB9KSxcbiAgICBhbmltYXRlKCcxNTBtcyBjdWJpYy1iZXppZXIoMC4yMywgMSwgMC4zMiwgMSknKVxuICBdKSxcbiAgdHJhbnNpdGlvbignYm90dG9tID0+IHZvaWQnLCBbXG4gICAgYW5pbWF0ZSgnMTUwbXMgY3ViaWMtYmV6aWVyKDAuMjMsIDEsIDAuMzIsIDEpJywgc3R5bGUoe1xuICAgICAgb3BhY2l0eSAgICAgICAgOiAwLFxuICAgICAgdHJhbnNmb3JtICAgICAgOiAnc2NhbGVZKDAuOCknLFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnMCUgMCUnXG4gICAgfSkpXG4gIF0pLFxuICBzdGF0ZSgndG9wJywgc3R5bGUoe1xuICAgIG9wYWNpdHkgICAgICAgIDogMSxcbiAgICB0cmFuc2Zvcm0gICAgICA6ICdzY2FsZVkoMSknLFxuICAgIHRyYW5zZm9ybU9yaWdpbjogJzAlIDEwMCUnXG4gIH0pKSxcbiAgdHJhbnNpdGlvbigndm9pZCA9PiB0b3AnLCBbXG4gICAgc3R5bGUoe1xuICAgICAgb3BhY2l0eSAgICAgICAgOiAwLFxuICAgICAgdHJhbnNmb3JtICAgICAgOiAnc2NhbGVZKDAuOCknLFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnMCUgMTAwJSdcbiAgICB9KSxcbiAgICBhbmltYXRlKCcxNTBtcyBjdWJpYy1iZXppZXIoMC4yMywgMSwgMC4zMiwgMSknKVxuICBdKSxcbiAgdHJhbnNpdGlvbigndG9wID0+IHZvaWQnLCBbXG4gICAgYW5pbWF0ZSgnMTUwbXMgY3ViaWMtYmV6aWVyKDAuMjMsIDEsIDAuMzIsIDEpJywgc3R5bGUoe1xuICAgICAgb3BhY2l0eSAgICAgICAgOiAwLFxuICAgICAgdHJhbnNmb3JtICAgICAgOiAnc2NhbGVZKDAuOCknLFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnMCUgMTAwJSdcbiAgICB9KSlcbiAgXSlcbl0pO1xuIiwiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIENvbnRlbnRDaGlsZHJlbixcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCwgTmdab25lLFxuICBPdXRwdXQsXG4gIFF1ZXJ5TGlzdCxcbiAgVGVtcGxhdGVSZWYsXG4gIFZpZXdDaGlsZCwgVmlld0NoaWxkcmVuXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZGVmZXIsIG1lcmdlLCBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciwgc3dpdGNoTWFwLCB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyB0b0Jvb2xlYW4gfSBmcm9tICcuLi9jb3JlL3V0aWwvY29udmVydCc7XG5cbmltcG9ydCB7IGRyb3BEb3duQW5pbWF0aW9uIH0gZnJvbSAnLi4vY29yZS9hbmltYXRpb24vZHJvcGRvd24tYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBOekF1dG9jb21wbGV0ZU9wdGlvbkNvbXBvbmVudCwgTnpPcHRpb25TZWxlY3Rpb25DaGFuZ2UgfSBmcm9tICcuL256LWF1dG9jb21wbGV0ZS1vcHRpb24uY29tcG9uZW50JztcblxuZXhwb3J0IGludGVyZmFjZSBBdXRvY29tcGxldGVEYXRhU291cmNlSXRlbSB7XG4gIHZhbHVlOiBzdHJpbmc7XG4gIGxhYmVsOiBzdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIEF1dG9jb21wbGV0ZURhdGFTb3VyY2UgPSBBdXRvY29tcGxldGVEYXRhU291cmNlSXRlbVtdIHwgc3RyaW5nW10gfCBudW1iZXJbXTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yICAgICAgICAgICA6ICduei1hdXRvY29tcGxldGUnLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgY2hhbmdlRGV0ZWN0aW9uICAgIDogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBhbmltYXRpb25zICAgICAgICAgOiBbXG4gICAgZHJvcERvd25BbmltYXRpb25cbiAgXSxcbiAgdGVtcGxhdGVVcmwgICAgICAgIDogJy4vbnotYXV0b2NvbXBsZXRlLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVzICAgICAgICAgICAgIDogW1xuICAgIGBcbiAgICAuYW50LXNlbGVjdC1kcm9wZG93biB7XG4gICAgICB0b3A6IDEwMCU7XG4gICAgICBsZWZ0OiAwO1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBtYXJnaW4tdG9wOiA0cHg7XG4gICAgICBtYXJnaW4tYm90dG9tOiA0cHg7XG4gICAgfVxuICAgIGBcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBOekF1dG9jb21wbGV0ZUNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICBwcml2YXRlIGFjdGl2ZUl0ZW1JbmRleDogbnVtYmVyID0gLTE7XG4gIHByaXZhdGUgc2VsZWN0aW9uQ2hhbmdlU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgc2hvd1BhbmVsOiBib29sZWFuID0gZmFsc2U7XG4gIGlzT3BlbjogYm9vbGVhbiA9IGZhbHNlO1xuICBhY3RpdmVJdGVtOiBOekF1dG9jb21wbGV0ZU9wdGlvbkNvbXBvbmVudDtcbiAgZHJvcERvd25Qb3NpdGlvbjogJ3RvcCcgfCAnY2VudGVyJyB8ICdib3R0b20nID0gJ2JvdHRvbSc7XG5cbiAgLyoqIMOnwrvChMOkwrvCtsOmwpTCr8OmwozCgcOowq7CvsOnwr3CriBkYXRhU291cmNlIMOlwpLCjCBjb250ZW50IMOowq7CvsOnwr3CriBvcHRpb25zXG4gICAqICDDqMK/wpnDpMK4wqrDpcKxwp7DpsKAwqfDpMK4wrrDpcKFwrbDpsKPwpDDpMK+wpvDpsKWwrnDpMK+wr/Dp8KawoTDqMKuwr/DqcKXwq7DpsKWwrnDpcK8wo8gKi9cbiAgZ2V0IG9wdGlvbnMoKTogUXVlcnlMaXN0PE56QXV0b2NvbXBsZXRlT3B0aW9uQ29tcG9uZW50PiB7XG4gICAgLy8gw6TCvMKYw6XChcKIw6TCvcK/w6fClMKoIGRhdGFTb3VyY2VcbiAgICBpZiAodGhpcy5uekRhdGFTb3VyY2UpIHtcbiAgICAgIHJldHVybiB0aGlzLmZyb21EYXRhU291cmNlT3B0aW9ucztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuZnJvbUNvbnRlbnRPcHRpb25zO1xuICAgIH1cbiAgfVxuXG4gIC8qKiDDpsKPwpDDpMK+wpvDp8K7wpkgY2RrLW92ZXJsYXkgw6fClMKow6TCusKOw6bCuMKyw6bCn8KTICovXG4gIEBWaWV3Q2hpbGQoVGVtcGxhdGVSZWYpIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjx7fT47XG5cbiAgQFZpZXdDaGlsZCgncGFuZWwnKSBwYW5lbDogRWxlbWVudFJlZjtcbiAgQFZpZXdDaGlsZCgnY29udGVudCcpIGNvbnRlbnQ6IEVsZW1lbnRSZWY7XG5cbiAgLyoqIMOnwpTCsSBDb250ZW50IMOmwo/CkMOkwr7CmyBvcHRpb25zICovXG4gIEBDb250ZW50Q2hpbGRyZW4oTnpBdXRvY29tcGxldGVPcHRpb25Db21wb25lbnQsIHsgZGVzY2VuZGFudHM6IHRydWUgfSkgZnJvbUNvbnRlbnRPcHRpb25zOiBRdWVyeUxpc3Q8TnpBdXRvY29tcGxldGVPcHRpb25Db21wb25lbnQ+O1xuXG4gIC8qKiDDp8KUwrEgbnpEYXRhU291cmNlIMOmwo/CkMOkwr7CmyBvcHRpb25zICovXG4gIEBWaWV3Q2hpbGRyZW4oTnpBdXRvY29tcGxldGVPcHRpb25Db21wb25lbnQpIGZyb21EYXRhU291cmNlT3B0aW9uczogUXVlcnlMaXN0PE56QXV0b2NvbXBsZXRlT3B0aW9uQ29tcG9uZW50PjtcblxuICAvKiogw6jCh8Kqw6XCrsKaw6TCucKJw6XCrsK9w6XCusKmw6XCjcKVw6TCvcKNIHB4ICovXG4gIEBJbnB1dCgpIG56V2lkdGg6IG51bWJlcjtcblxuICAvKiogw6bCmMKvw6XCkMKmw6nCu8KYw6jCrsKkw6nCq8KYw6TCusKuw6fCrMKsw6TCuMKAw6TCuMKqw6nCgMKJw6nCocK5w6/CvMKMw6nCu8KYw6jCrsKkIGB0cnVlYCAqL1xuICBASW5wdXQoKVxuICBnZXQgbnpEZWZhdWx0QWN0aXZlRmlyc3RPcHRpb24oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZmF1bHRBY3RpdmVGaXJzdE9wdGlvbjtcbiAgfVxuXG4gIHNldCBuekRlZmF1bHRBY3RpdmVGaXJzdE9wdGlvbih2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2RlZmF1bHRBY3RpdmVGaXJzdE9wdGlvbiA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBfZGVmYXVsdEFjdGl2ZUZpcnN0T3B0aW9uOiBib29sZWFuID0gdHJ1ZTtcblxuICAvKiogw6TCvcK/w6fClMKow6nClMKuw6fCm8KYw6nCgMKJw6bCi8Kpw6nCgMKJw6nCocK5w6fCmsKEw6bCl8K2w6XCgMKZw6bCisKKw6nCgMKJw6TCuMKtw6nCocK5w6XCm8Kew6XCocKrw6XCiMKww6jCvsKTw6XChcKlw6bCocKGw6TCuMKtw6/CvMKMw6nCu8KYw6jCrsKkIGBmYWxzZWAgKi9cbiAgQElucHV0KClcbiAgZ2V0IG56QmFja2ZpbGwoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2JhY2tmaWxsO1xuICB9XG5cbiAgc2V0IG56QmFja2ZpbGwodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9iYWNrZmlsbCA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBfYmFja2ZpbGw6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvKiogw6jCh8Kqw6XCisKow6XCrsKMw6bCiMKQw6fCmsKEw6bClcKww6bCjcKuw6bCusKQICovXG4gIEBJbnB1dCgpXG4gIGdldCBuekRhdGFTb3VyY2UoKTogQXV0b2NvbXBsZXRlRGF0YVNvdXJjZSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGFTb3VyY2U7XG4gIH1cblxuICBzZXQgbnpEYXRhU291cmNlKHZhbHVlOiBBdXRvY29tcGxldGVEYXRhU291cmNlKSB7XG4gICAgdGhpcy5fZGF0YVNvdXJjZSA9IHZhbHVlO1xuICB9XG5cbiAgX2RhdGFTb3VyY2U6IEF1dG9jb21wbGV0ZURhdGFTb3VyY2U7XG5cbiAgLyoqIMOpwoDCicOmwovCqcOmwpfCtsOlwo/CkcOlwofCusOnwprChMOkwrrCi8OkwrvCtiAqL1xuICBAT3V0cHV0KCkgc2VsZWN0aW9uQ2hhbmdlOiBFdmVudEVtaXR0ZXI8TnpBdXRvY29tcGxldGVPcHRpb25Db21wb25lbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcjxOekF1dG9jb21wbGV0ZU9wdGlvbkNvbXBvbmVudD4oKTtcblxuICAvKiogw6fClMKow6TCusKOw6fCu8KEw6TCu8K2w6XChsKFw6nCg8Kow6fCm8KRw6XCkMKsIG9wdGlvbnMgw6fCmsKEw6nCgMKJw6bCi8Kpw6XCj8KYw6XCjMKWICovXG4gIHJlYWRvbmx5IG9wdGlvblNlbGVjdGlvbkNoYW5nZXM6IE9ic2VydmFibGU8TnpPcHRpb25TZWxlY3Rpb25DaGFuZ2U+ID0gZGVmZXIoKCkgPT4ge1xuICAgIGlmICh0aGlzLm9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBtZXJnZSguLi50aGlzLm9wdGlvbnMubWFwKG9wdGlvbiA9PiBvcHRpb24uc2VsZWN0aW9uQ2hhbmdlKSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9uZ1pvbmUub25TdGFibGVcbiAgICAuYXNPYnNlcnZhYmxlKClcbiAgICAucGlwZSh0YWtlKDEpLCBzd2l0Y2hNYXAoKCkgPT4gdGhpcy5vcHRpb25TZWxlY3Rpb25DaGFuZ2VzKSk7XG4gIH0pO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLCBwcml2YXRlIF9uZ1pvbmU6IE5nWm9uZSkge1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIHRoaXMub3B0aW9uc0luaXQoKTtcbiAgfVxuXG4gIHNldFZpc2liaWxpdHkoKTogdm9pZCB7XG4gICAgdGhpcy5zaG93UGFuZWwgPSAhIXRoaXMub3B0aW9ucy5sZW5ndGg7XG4gICAgdGhpcy5jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuXG4gIHNldEFjdGl2ZUl0ZW0oaW5kZXg6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IGFjdGl2ZUl0ZW0gPSB0aGlzLm9wdGlvbnMudG9BcnJheSgpWyBpbmRleCBdO1xuICAgIGlmIChhY3RpdmVJdGVtICYmICFhY3RpdmVJdGVtLmFjdGl2ZSkge1xuICAgICAgdGhpcy5hY3RpdmVJdGVtID0gYWN0aXZlSXRlbTtcbiAgICAgIHRoaXMuYWN0aXZlSXRlbUluZGV4ID0gaW5kZXg7XG4gICAgICB0aGlzLmNsZWFyU2VsZWN0ZWRPcHRpb25zKHRoaXMuYWN0aXZlSXRlbSk7XG4gICAgICB0aGlzLmFjdGl2ZUl0ZW0uc2V0QWN0aXZlU3R5bGVzKCk7XG4gICAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgIH1cbiAgfVxuXG4gIHNldE5leHRJdGVtQWN0aXZlKCk6IHZvaWQge1xuICAgIGNvbnN0IG5leHRJbmRleCA9IHRoaXMuYWN0aXZlSXRlbUluZGV4ICsgMSA8PSB0aGlzLm9wdGlvbnMubGVuZ3RoIC0gMSA/IHRoaXMuYWN0aXZlSXRlbUluZGV4ICsgMSA6IDA7XG4gICAgdGhpcy5zZXRBY3RpdmVJdGVtKG5leHRJbmRleCk7XG4gIH1cblxuICBzZXRQcmV2aW91c0l0ZW1BY3RpdmUoKTogdm9pZCB7XG4gICAgY29uc3QgcHJldmlvdXNJbmRleCA9IHRoaXMuYWN0aXZlSXRlbUluZGV4IC0gMSA8IDAgPyB0aGlzLm9wdGlvbnMubGVuZ3RoIC0gMSA6IHRoaXMuYWN0aXZlSXRlbUluZGV4IC0gMTtcbiAgICB0aGlzLnNldEFjdGl2ZUl0ZW0ocHJldmlvdXNJbmRleCk7XG4gIH1cblxuICBnZXRPcHRpb25JbmRleChvcHRpb246IE56QXV0b2NvbXBsZXRlT3B0aW9uQ29tcG9uZW50KTogbnVtYmVyIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLnJlZHVjZSgocmVzdWx0OiBudW1iZXIsIGN1cnJlbnQ6IE56QXV0b2NvbXBsZXRlT3B0aW9uQ29tcG9uZW50LCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyAob3B0aW9uID09PSBjdXJyZW50ID8gaW5kZXggOiB1bmRlZmluZWQpIDogcmVzdWx0O1xuICAgIH0sIHVuZGVmaW5lZCk7XG4gIH1cblxuICBwcml2YXRlIG9wdGlvbnNJbml0KCk6IHZvaWQge1xuICAgIHRoaXMuc2V0VmlzaWJpbGl0eSgpO1xuICAgIHRoaXMuc3Vic2NyaWJlT3B0aW9uQ2hhbmdlcygpO1xuICAgIGNvbnN0IGNoYW5nZXMgPSB0aGlzLm56RGF0YVNvdXJjZSA/IHRoaXMuZnJvbURhdGFTb3VyY2VPcHRpb25zLmNoYW5nZXMgOiB0aGlzLmZyb21Db250ZW50T3B0aW9ucy5jaGFuZ2VzO1xuXG4gICAgLy8gw6fClMKow6TCusKOw6XCpMKEw6fCkMKGw6XCisKow6bCgMKBL8OlwrzCgsOmwq3CpcOnwprChCBvcHRpb25zXG4gICAgY2hhbmdlcy5zdWJzY3JpYmUoZSA9PiB7XG4gICAgICBpZiAoIWUuZGlydHkgJiYgdGhpcy5pc09wZW4pIHtcbiAgICAgICAgc2V0VGltZW91dChfID0+IHRoaXMuc2V0VmlzaWJpbGl0eSgpKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc3Vic2NyaWJlT3B0aW9uQ2hhbmdlcygpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIMOmwrjChcOpwpnCpCBPcHRpb25zIMOnwprChMOmwr/CgMOmwrTCu8OnworCtsOmwoDCgVxuICAgKi9cbiAgcHJpdmF0ZSBjbGVhclNlbGVjdGVkT3B0aW9ucyhza2lwPzogTnpBdXRvY29tcGxldGVPcHRpb25Db21wb25lbnQsIGRlc2VsZWN0OiBib29sZWFuID0gZmFsc2UpOiB2b2lkIHtcbiAgICB0aGlzLm9wdGlvbnMuZm9yRWFjaChvcHRpb24gPT4ge1xuICAgICAgaWYgKG9wdGlvbiAhPT0gc2tpcCkge1xuICAgICAgICBpZiAoZGVzZWxlY3QpIHtcbiAgICAgICAgICBvcHRpb24uZGVzZWxlY3QoKTtcbiAgICAgICAgfVxuICAgICAgICBvcHRpb24uc2V0SW5hY3RpdmVTdHlsZXMoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgc3Vic2NyaWJlT3B0aW9uQ2hhbmdlcygpOiB2b2lkIHtcbiAgICB0aGlzLnNlbGVjdGlvbkNoYW5nZVN1YnNjcmlwdGlvbiA9IHRoaXMub3B0aW9uU2VsZWN0aW9uQ2hhbmdlc1xuICAgIC5waXBlKGZpbHRlcigoZXZlbnQ6IE56T3B0aW9uU2VsZWN0aW9uQ2hhbmdlKSA9PiBldmVudC5pc1VzZXJJbnB1dCkpXG4gICAgLnN1YnNjcmliZSgoZXZlbnQ6IE56T3B0aW9uU2VsZWN0aW9uQ2hhbmdlKSA9PiB7XG4gICAgICBldmVudC5zb3VyY2Uuc2VsZWN0KCk7XG4gICAgICBldmVudC5zb3VyY2Uuc2V0QWN0aXZlU3R5bGVzKCk7XG4gICAgICB0aGlzLmFjdGl2ZUl0ZW0gPSBldmVudC5zb3VyY2U7XG4gICAgICB0aGlzLmFjdGl2ZUl0ZW1JbmRleCA9IHRoaXMuZ2V0T3B0aW9uSW5kZXgodGhpcy5hY3RpdmVJdGVtKTtcbiAgICAgIHRoaXMuY2xlYXJTZWxlY3RlZE9wdGlvbnMoZXZlbnQuc291cmNlLCB0cnVlKTtcbiAgICAgIHRoaXMuc2VsZWN0aW9uQ2hhbmdlLmVtaXQoZXZlbnQuc291cmNlKTtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgRE9XTl9BUlJPVywgRU5URVIsIEVTQ0FQRSwgVEFCLCBVUF9BUlJPVyB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9rZXljb2Rlcyc7XG5pbXBvcnQge1xuICBDb25uZWN0ZWRPdmVybGF5UG9zaXRpb25DaGFuZ2UsXG4gIENvbm5lY3Rpb25Qb3NpdGlvblBhaXIsXG4gIEZsZXhpYmxlQ29ubmVjdGVkUG9zaXRpb25TdHJhdGVneSxcbiAgT3ZlcmxheSxcbiAgT3ZlcmxheUNvbmZpZyxcbiAgT3ZlcmxheVJlZixcbiAgUG9zaXRpb25TdHJhdGVneSxcbiAgVmVydGljYWxDb25uZWN0aW9uUG9zXG59IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcbmltcG9ydCB7IFRlbXBsYXRlUG9ydGFsIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BvcnRhbCc7XG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge1xuICBmb3J3YXJkUmVmLFxuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIEV4aXN0aW5nUHJvdmlkZXIsXG4gIEluamVjdCxcbiAgSW5wdXQsXG4gIE9uRGVzdHJveSxcbiAgT3B0aW9uYWwsXG4gIFZpZXdDb250YWluZXJSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IGZyb21FdmVudCwgbWVyZ2UsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGVsYXksIGRpc3RpbmN0LCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IE56QXV0b2NvbXBsZXRlT3B0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi9uei1hdXRvY29tcGxldGUtb3B0aW9uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOekF1dG9jb21wbGV0ZUNvbXBvbmVudCB9IGZyb20gJy4vbnotYXV0b2NvbXBsZXRlLmNvbXBvbmVudCc7XG5cbmV4cG9ydCBjb25zdCBOWl9BVVRPQ09NUExFVEVfVkFMVUVfQUNDRVNTT1I6IEV4aXN0aW5nUHJvdmlkZXIgPSB7XG4gIHByb3ZpZGUgICAgOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTnpBdXRvY29tcGxldGVUcmlnZ2VyRGlyZWN0aXZlKSxcbiAgbXVsdGkgICAgICA6IHRydWVcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXROekF1dG9jb21wbGV0ZU1pc3NpbmdQYW5lbEVycm9yKCk6IEVycm9yIHtcbiAgcmV0dXJuIEVycm9yKCdBdHRlbXB0aW5nIHRvIG9wZW4gYW4gdW5kZWZpbmVkIGluc3RhbmNlIG9mIGBuei1hdXRvY29tcGxldGVgLiAnICtcbiAgICAnTWFrZSBzdXJlIHRoYXQgdGhlIGlkIHBhc3NlZCB0byB0aGUgYG56QXV0b2NvbXBsZXRlYCBpcyBjb3JyZWN0IGFuZCB0aGF0ICcgK1xuICAgICd5b3VcXCdyZSBhdHRlbXB0aW5nIHRvIG9wZW4gaXQgYWZ0ZXIgdGhlIG5nQWZ0ZXJDb250ZW50SW5pdCBob29rLicpO1xufVxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3IgOiBgaW5wdXRbbnpBdXRvY29tcGxldGVdLCB0ZXh0YXJlYVtuekF1dG9jb21wbGV0ZV1gLFxuICBwcm92aWRlcnM6IFsgTlpfQVVUT0NPTVBMRVRFX1ZBTFVFX0FDQ0VTU09SIF0sXG4gIGhvc3QgICAgIDoge1xuICAgICdhdXRvY29tcGxldGUnICAgICA6ICdvZmYnLFxuICAgICdhcmlhLWF1dG9jb21wbGV0ZSc6ICdsaXN0JyxcbiAgICAnKGZvY3VzaW4pJyAgICAgICAgOiAnaGFuZGxlRm9jdXMoKScsXG4gICAgJyhibHVyKScgICAgICAgICAgIDogJ2hhbmRsZUJsdXIoKScsXG4gICAgJyhpbnB1dCknICAgICAgICAgIDogJ2hhbmRsZUlucHV0KCRldmVudCknLFxuICAgICcoa2V5ZG93biknICAgICAgICA6ICdoYW5kbGVLZXlkb3duKCRldmVudCknXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgTnpBdXRvY29tcGxldGVUcmlnZ2VyRGlyZWN0aXZlIGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE9uRGVzdHJveSB7XG5cbiAgcHJpdmF0ZSBvdmVybGF5UmVmOiBPdmVybGF5UmVmIHwgbnVsbDtcbiAgcHJpdmF0ZSBwb3J0YWw6IFRlbXBsYXRlUG9ydGFsPHt9PjtcbiAgcHJpdmF0ZSBwb3NpdGlvblN0cmF0ZWd5OiBGbGV4aWJsZUNvbm5lY3RlZFBvc2l0aW9uU3RyYXRlZ3k7XG4gIHByaXZhdGUgcHJldmlvdXNWYWx1ZTogc3RyaW5nIHwgbnVtYmVyIHwgbnVsbDtcbiAgcHJpdmF0ZSBzZWxlY3Rpb25DaGFuZ2VTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgcHJpdmF0ZSBvcHRpb25zQ2hhbmdlU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG4gIHByaXZhdGUgb3ZlcmxheUJhY2tkcm9wQ2xpY2tTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgcHJpdmF0ZSBvdmVybGF5UG9zaXRpb25DaGFuZ2VTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcblxuICBfb25DaGFuZ2U6ICh2YWx1ZToge30pID0+IHZvaWQgPSAoKSA9PiB7fTtcbiAgX29uVG91Y2hlZCA9ICgpID0+IHt9O1xuXG4gIHBhbmVsT3BlbjogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIC8qKiDDp8KUwqjDpMK6wo7Dp8K7wpHDpcKuwpogbnpBdXRvY29tcGxldGUgw6fCu8KEw6TCu8K2ICovXG4gIEBJbnB1dCgpIG56QXV0b2NvbXBsZXRlOiBOekF1dG9jb21wbGV0ZUNvbXBvbmVudDtcblxuICAvKipcbiAgICogw6XCvcKTw6XCicKNw6jCosKrw6bCv8KAw6bCtMK7w6fCmsKEIE9wdGlvblxuICAgKi9cbiAgZ2V0IGFjdGl2ZU9wdGlvbigpOiBOekF1dG9jb21wbGV0ZU9wdGlvbkNvbXBvbmVudCB7XG4gICAgaWYgKHRoaXMubnpBdXRvY29tcGxldGUgJiYgdGhpcy5uekF1dG9jb21wbGV0ZS5vcHRpb25zLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMubnpBdXRvY29tcGxldGUuYWN0aXZlSXRlbTtcbiAgICB9XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9lbGVtZW50OiBFbGVtZW50UmVmLCBwcml2YXRlIF9vdmVybGF5OiBPdmVybGF5LFxuICAgICAgICAgICAgICBwcml2YXRlIF92aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gICAgICAgICAgICAgIEBPcHRpb25hbCgpIEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgX2RvY3VtZW50OiBhbnkpIHtcbiAgfVxuXG4gIG9wZW5QYW5lbCgpOiB2b2lkIHtcbiAgICB0aGlzLmF0dGFjaE92ZXJsYXkoKTtcbiAgfVxuXG4gIGNsb3NlUGFuZWwoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMucGFuZWxPcGVuKSB7XG4gICAgICB0aGlzLm56QXV0b2NvbXBsZXRlLmlzT3BlbiA9IHRoaXMucGFuZWxPcGVuID0gZmFsc2U7XG5cbiAgICAgIGlmICh0aGlzLm92ZXJsYXlSZWYgJiYgdGhpcy5vdmVybGF5UmVmLmhhc0F0dGFjaGVkKCkpIHtcbiAgICAgICAgdGhpcy5vdmVybGF5UmVmLmRldGFjaCgpO1xuICAgICAgICB0aGlzLnNlbGVjdGlvbkNoYW5nZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLm92ZXJsYXlCYWNrZHJvcENsaWNrU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMub3ZlcmxheVBvc2l0aW9uQ2hhbmdlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMub3B0aW9uc0NoYW5nZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDDqMKuwqLDqcKYwoXDpsKVwrDDpsKNwq7DpsK6wpDDpsKUwrnDpcKPwpjDpMK6wovDpMK7wrZcbiAgICovXG4gIHByaXZhdGUgc3Vic2NyaWJlT3B0aW9uc0NoYW5nZSgpOiBTdWJzY3JpcHRpb24ge1xuICAgIHJldHVybiB0aGlzLm56QXV0b2NvbXBsZXRlLm9wdGlvbnMuY2hhbmdlcy5waXBlKFxuICAgICAgZGVsYXkoMClcbiAgICApLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLnJlc2V0QWN0aXZlSXRlbSgpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIMOowq7CosOpwpjChSBvcHRpb24gw6nCgMKJw6bCi8Kpw6TCusKLw6TCu8K2XG4gICAqIMOlwrnCtsOowq7CvsOnwr3CrsOlwoDCvFxuICAgKi9cbiAgcHJpdmF0ZSBzdWJzY3JpYmVTZWxlY3Rpb25DaGFuZ2UoKTogU3Vic2NyaXB0aW9uIHtcbiAgICByZXR1cm4gdGhpcy5uekF1dG9jb21wbGV0ZS5zZWxlY3Rpb25DaGFuZ2VcbiAgICAuc3Vic2NyaWJlKChvcHRpb246IE56QXV0b2NvbXBsZXRlT3B0aW9uQ29tcG9uZW50KSA9PiB7XG4gICAgICB0aGlzLnNldFZhbHVlQW5kQ2xvc2Uob3B0aW9uKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDDqMKuwqLDqcKYwoXDp8K7woTDpMK7wrbDpcKkwpbDqcKDwqjDp8KawoTDpcKNwpXDpcKHwrvDpMK6wovDpMK7wrZcbiAgICogw6XCucK2w6XChcKzw6nCl8Ktw6XCvMK5w6fCqsKXXG4gICAqL1xuICBwcml2YXRlIHN1YnNjcmliZU92ZXJsYXlCYWNrZHJvcENsaWNrKCk6IFN1YnNjcmlwdGlvbiB7XG4gICAgcmV0dXJuIG1lcmdlKFxuICAgICAgZnJvbUV2ZW50KHRoaXMuX2RvY3VtZW50LCAnY2xpY2snKSxcbiAgICAgIGZyb21FdmVudCh0aGlzLl9kb2N1bWVudCwgJ3RvdWNoZW5kJylcbiAgICApXG4gICAgLnN1YnNjcmliZSgoZXZlbnQ6IE1vdXNlRXZlbnQgfCBUb3VjaEV2ZW50KSA9PiB7XG4gICAgICBjb25zdCBjbGlja1RhcmdldCA9IGV2ZW50LnRhcmdldCBhcyBIVE1MRWxlbWVudDtcblxuICAgICAgLy8gw6fCocKuw6TCv8Kdw6TCuMKNw6bCmMKvw6fCgsK5w6XCh8K7w6fCu8KEw6TCu8K2w6jCh8Kqw6jCusKrXG4gICAgICBpZiAoY2xpY2tUYXJnZXQgIT09IHRoaXMuX2VsZW1lbnQubmF0aXZlRWxlbWVudCAmJiAhdGhpcy5vdmVybGF5UmVmLm92ZXJsYXlFbGVtZW50LmNvbnRhaW5zKGNsaWNrVGFyZ2V0KSAmJiB0aGlzLnBhbmVsT3Blbikge1xuICAgICAgICB0aGlzLmNsb3NlUGFuZWwoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDDqMKuwqLDqcKYwoUgT3ZlcmxheSDDpMK9wo3Dp8K9wq7DpsKUwrnDpcKPwpjDpMK6wovDpMK7wrZcbiAgICogw6XCucK2w6nCh8KNw6bClsKww6jCrsK+w6fCvcKuw6XCisKow6fClMK7w6bClsK5w6XCkMKRXG4gICAqL1xuICBwcml2YXRlIHN1YnNjcmliZU92ZXJsYXlQb3NpdGlvbkNoYW5nZSgpOiBTdWJzY3JpcHRpb24ge1xuICAgIHJldHVybiB0aGlzLnBvc2l0aW9uU3RyYXRlZ3kucG9zaXRpb25DaGFuZ2VzXG4gICAgLnBpcGUoXG4gICAgICBtYXAoKHBvc2l0aW9uOiBDb25uZWN0ZWRPdmVybGF5UG9zaXRpb25DaGFuZ2UpID0+IHBvc2l0aW9uLmNvbm5lY3Rpb25QYWlyLm9yaWdpblkpLFxuICAgICAgZGlzdGluY3QoKVxuICAgIClcbiAgICAuc3Vic2NyaWJlKChwb3NpdGlvbjogVmVydGljYWxDb25uZWN0aW9uUG9zKSA9PiB7XG4gICAgICB0aGlzLm56QXV0b2NvbXBsZXRlLmRyb3BEb3duUG9zaXRpb24gPSBwb3NpdGlvbjtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgYXR0YWNoT3ZlcmxheSgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMubnpBdXRvY29tcGxldGUpIHtcbiAgICAgIHRocm93IGdldE56QXV0b2NvbXBsZXRlTWlzc2luZ1BhbmVsRXJyb3IoKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMub3ZlcmxheVJlZikge1xuICAgICAgdGhpcy5wb3J0YWwgPSBuZXcgVGVtcGxhdGVQb3J0YWwodGhpcy5uekF1dG9jb21wbGV0ZS50ZW1wbGF0ZSwgdGhpcy5fdmlld0NvbnRhaW5lclJlZik7XG4gICAgICB0aGlzLm92ZXJsYXlSZWYgPSB0aGlzLl9vdmVybGF5LmNyZWF0ZSh0aGlzLmdldE92ZXJsYXlDb25maWcoKSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3ZlcmxheVJlZiAmJiAhdGhpcy5vdmVybGF5UmVmLmhhc0F0dGFjaGVkKCkpIHtcbiAgICAgIHRoaXMub3ZlcmxheVJlZi5hdHRhY2godGhpcy5wb3J0YWwpO1xuICAgICAgdGhpcy5vdmVybGF5UG9zaXRpb25DaGFuZ2VTdWJzY3JpcHRpb24gPSB0aGlzLnN1YnNjcmliZU92ZXJsYXlQb3NpdGlvbkNoYW5nZSgpO1xuICAgICAgdGhpcy5zZWxlY3Rpb25DaGFuZ2VTdWJzY3JpcHRpb24gPSB0aGlzLnN1YnNjcmliZVNlbGVjdGlvbkNoYW5nZSgpO1xuICAgICAgdGhpcy5vdmVybGF5QmFja2Ryb3BDbGlja1N1YnNjcmlwdGlvbiA9IHRoaXMuc3Vic2NyaWJlT3ZlcmxheUJhY2tkcm9wQ2xpY2soKTtcbiAgICAgIHRoaXMub3B0aW9uc0NoYW5nZVN1YnNjcmlwdGlvbiA9IHRoaXMuc3Vic2NyaWJlT3B0aW9uc0NoYW5nZSgpO1xuICAgIH1cblxuICAgIHRoaXMubnpBdXRvY29tcGxldGUuaXNPcGVuID0gdGhpcy5wYW5lbE9wZW4gPSB0cnVlO1xuICAgIHRoaXMubnpBdXRvY29tcGxldGUuc2V0VmlzaWJpbGl0eSgpO1xuICAgIHRoaXMub3ZlcmxheVJlZi51cGRhdGVTaXplKHsgd2lkdGg6IHRoaXMubnpBdXRvY29tcGxldGUubnpXaWR0aCB8fCB0aGlzLmdldEhvc3RXaWR0aCgpIH0pO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMub3ZlcmxheVJlZikge1xuICAgICAgICB0aGlzLm92ZXJsYXlSZWYudXBkYXRlUG9zaXRpb24oKTtcbiAgICAgIH1cbiAgICB9LCAxNTApO1xuICAgIHRoaXMucmVzZXRBY3RpdmVJdGVtKCk7XG4gICAgaWYgKHRoaXMuYWN0aXZlT3B0aW9uKSB7XG4gICAgICB0aGlzLmFjdGl2ZU9wdGlvbi5zY3JvbGxJbnRvVmlld0lmTmVlZGVkKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBkZXN0cm95UGFuZWwoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMub3ZlcmxheVJlZikge1xuICAgICAgdGhpcy5jbG9zZVBhbmVsKCk7XG4gICAgICB0aGlzLm92ZXJsYXlSZWYuZGlzcG9zZSgpO1xuICAgICAgdGhpcy5vdmVybGF5UmVmID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldE92ZXJsYXlDb25maWcoKTogT3ZlcmxheUNvbmZpZyB7XG4gICAgcmV0dXJuIG5ldyBPdmVybGF5Q29uZmlnKHtcbiAgICAgIHBvc2l0aW9uU3RyYXRlZ3k6IHRoaXMuZ2V0T3ZlcmxheVBvc2l0aW9uKCksXG4gICAgICBzY3JvbGxTdHJhdGVneSAgOiB0aGlzLl9vdmVybGF5LnNjcm9sbFN0cmF0ZWdpZXMucmVwb3NpdGlvbigpLFxuICAgICAgLy8gw6XCpsKCw6bCnsKcw6bCssKhw6bCnMKJw6jCrsK+w6fCvcKuIG56V2lkdGggw6XCiMKZw6TCvcK/w6fClMKoIEhvc3Qgw6XChcKDw6fCtMKgw6fCmsKEw6XCrsK9w6XCusKmXG4gICAgICB3aWR0aCAgICAgICAgICAgOiB0aGlzLm56QXV0b2NvbXBsZXRlLm56V2lkdGggfHwgdGhpcy5nZXRIb3N0V2lkdGgoKVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDb25uZWN0ZWRFbGVtZW50KCk6IEVsZW1lbnRSZWYge1xuICAgIHJldHVybiB0aGlzLl9lbGVtZW50O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRIb3N0V2lkdGgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5nZXRDb25uZWN0ZWRFbGVtZW50KCkubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0T3ZlcmxheVBvc2l0aW9uKCk6IFBvc2l0aW9uU3RyYXRlZ3kge1xuICAgIGNvbnN0IHBvc2l0aW9ucyA9IFtcbiAgICAgIG5ldyBDb25uZWN0aW9uUG9zaXRpb25QYWlyKHsgb3JpZ2luWDogJ3N0YXJ0Jywgb3JpZ2luWTogJ2JvdHRvbScgfSwgeyBvdmVybGF5WDogJ3N0YXJ0Jywgb3ZlcmxheVk6ICd0b3AnIH0pLFxuICAgICAgbmV3IENvbm5lY3Rpb25Qb3NpdGlvblBhaXIoeyBvcmlnaW5YOiAnc3RhcnQnLCBvcmlnaW5ZOiAndG9wJyB9LCB7IG92ZXJsYXlYOiAnc3RhcnQnLCBvdmVybGF5WTogJ2JvdHRvbScgfSlcbiAgICBdO1xuICAgIHRoaXMucG9zaXRpb25TdHJhdGVneSA9IHRoaXMuX292ZXJsYXkucG9zaXRpb24oKVxuICAgIC5mbGV4aWJsZUNvbm5lY3RlZFRvKHRoaXMuZ2V0Q29ubmVjdGVkRWxlbWVudCgpKVxuICAgIC53aXRoUG9zaXRpb25zKHBvc2l0aW9ucylcbiAgICAud2l0aEZsZXhpYmxlRGltZW5zaW9ucyhmYWxzZSlcbiAgICAud2l0aFB1c2goZmFsc2UpO1xuICAgIHJldHVybiB0aGlzLnBvc2l0aW9uU3RyYXRlZ3k7XG4gIH1cblxuICBwcml2YXRlIHJlc2V0QWN0aXZlSXRlbSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5uekF1dG9jb21wbGV0ZS5hY3RpdmVJdGVtICYmIHRoaXMubnpBdXRvY29tcGxldGUuZ2V0T3B0aW9uSW5kZXgodGhpcy5uekF1dG9jb21wbGV0ZS5hY3RpdmVJdGVtKSkge1xuICAgICAgdGhpcy5uekF1dG9jb21wbGV0ZS5zZXRBY3RpdmVJdGVtKHRoaXMubnpBdXRvY29tcGxldGUuZ2V0T3B0aW9uSW5kZXgodGhpcy5uekF1dG9jb21wbGV0ZS5hY3RpdmVJdGVtKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubnpBdXRvY29tcGxldGUuc2V0QWN0aXZlSXRlbSh0aGlzLm56QXV0b2NvbXBsZXRlLm56RGVmYXVsdEFjdGl2ZUZpcnN0T3B0aW9uID8gMCA6IC0xKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVLZXlkb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZCB7XG4gICAgY29uc3Qga2V5Q29kZSA9IGV2ZW50LmtleUNvZGU7XG4gICAgY29uc3QgaXNBcnJvd0tleSA9IGtleUNvZGUgPT09IFVQX0FSUk9XIHx8IGtleUNvZGUgPT09IERPV05fQVJST1c7XG5cbiAgICBpZiAoa2V5Q29kZSA9PT0gRVNDQVBFKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnBhbmVsT3BlbiAmJiAoa2V5Q29kZSA9PT0gRVNDQVBFIHx8IGtleUNvZGUgPT09IFRBQikpIHtcbiAgICAgIC8vIMOpwoDCmsOowr/ChyB0YWIgLyBFU0Mgw6XChcKzw6nCl8Ktw6/CvMKMw6nCh8KNw6fCvcKuw6jCvsKTw6XChcKlw6bCoMKHw6fCrcK+IHZhbHVlXG4gICAgICBpZiAodGhpcy5hY3RpdmVPcHRpb24uZ2V0TGFiZWwoKSAhPT0gdGhpcy5wcmV2aW91c1ZhbHVlKSB7XG4gICAgICAgIHRoaXMuc2V0VHJpZ2dlclZhbHVlKHRoaXMucHJldmlvdXNWYWx1ZSk7XG4gICAgICB9XG4gICAgICB0aGlzLmNsb3NlUGFuZWwoKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMucGFuZWxPcGVuICYmIGtleUNvZGUgPT09IEVOVEVSKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaWYgKHRoaXMubnpBdXRvY29tcGxldGUuc2hvd1BhbmVsICYmIHRoaXMuYWN0aXZlT3B0aW9uKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlT3B0aW9uLnNlbGVjdFZpYUludGVyYWN0aW9uKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLnBhbmVsT3BlbiAmJiBpc0Fycm93S2V5ICYmIHRoaXMubnpBdXRvY29tcGxldGUuc2hvd1BhbmVsKSB7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGlmIChrZXlDb2RlID09PSBVUF9BUlJPVykge1xuICAgICAgICB0aGlzLm56QXV0b2NvbXBsZXRlLnNldFByZXZpb3VzSXRlbUFjdGl2ZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5uekF1dG9jb21wbGV0ZS5zZXROZXh0SXRlbUFjdGl2ZSgpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuYWN0aXZlT3B0aW9uKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlT3B0aW9uLnNjcm9sbEludG9WaWV3SWZOZWVkZWQoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZG9CYWNrZmlsbCgpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2V0VmFsdWVBbmRDbG9zZShvcHRpb246IE56QXV0b2NvbXBsZXRlT3B0aW9uQ29tcG9uZW50KTogdm9pZCB7XG4gICAgY29uc3QgdmFsdWUgPSBvcHRpb24ubnpWYWx1ZTtcbiAgICB0aGlzLnNldFRyaWdnZXJWYWx1ZShvcHRpb24uZ2V0TGFiZWwoKSk7XG4gICAgdGhpcy5fb25DaGFuZ2UodmFsdWUpO1xuICAgIHRoaXMuX2VsZW1lbnQubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgIHRoaXMuY2xvc2VQYW5lbCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRUcmlnZ2VyVmFsdWUodmFsdWU6IHN0cmluZyB8IG51bWJlciB8IG51bGwpOiB2b2lkIHtcbiAgICB0aGlzLl9lbGVtZW50Lm5hdGl2ZUVsZW1lbnQudmFsdWUgPSB2YWx1ZSB8fCAnJztcbiAgfVxuXG4gIHByaXZhdGUgZG9CYWNrZmlsbCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5uekF1dG9jb21wbGV0ZS5uekJhY2tmaWxsKSB7XG4gICAgICAvLyDDpcKPwqrDqMKuwr7Dp8K9wq7DpsKgwofDp8Ktwr7DpsKYwr7Dp8KkwrrDpcKAwrxcbiAgICAgIHRoaXMuc2V0VHJpZ2dlclZhbHVlKHRoaXMubnpBdXRvY29tcGxldGUuYWN0aXZlSXRlbS5nZXRMYWJlbCgpKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVJbnB1dChldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgIGxldCB2YWx1ZTogbnVtYmVyIHwgc3RyaW5nIHwgbnVsbCA9IHRhcmdldC52YWx1ZTtcbiAgICBpZiAodGFyZ2V0LnR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlID09PSAnJyA/IG51bGwgOiBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuY2FuT3BlbigpICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGV2ZW50LnRhcmdldCAmJlxuICAgICAgdGhpcy5wcmV2aW91c1ZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5wcmV2aW91c1ZhbHVlID0gdmFsdWU7XG4gICAgICB0aGlzLl9vbkNoYW5nZSh2YWx1ZSk7XG4gICAgICB0aGlzLm9wZW5QYW5lbCgpO1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZUZvY3VzKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmNhbk9wZW4oKSkge1xuICAgICAgdGhpcy5wcmV2aW91c1ZhbHVlID0gdGhpcy5fZWxlbWVudC5uYXRpdmVFbGVtZW50LnZhbHVlO1xuICAgICAgdGhpcy5vcGVuUGFuZWwoKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVCbHVyKCk6IHZvaWQge1xuICAgIHRoaXMuX29uVG91Y2hlZCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBjYW5PcGVuKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQgPSB0aGlzLl9lbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XG4gICAgcmV0dXJuICFlbGVtZW50LnJlYWRPbmx5ICYmICFlbGVtZW50LmRpc2FibGVkO1xuICB9XG5cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLnNldFRyaWdnZXJWYWx1ZSh2YWx1ZSk7XG4gIH1cblxuICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAodmFsdWU6IHt9KSA9PiB7fSk6IHZvaWQge1xuICAgIHRoaXMuX29uQ2hhbmdlID0gZm47XG4gIH1cblxuICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4ge30pOiB2b2lkIHtcbiAgICB0aGlzLl9vblRvdWNoZWQgPSBmbjtcbiAgfVxuXG4gIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQge1xuICAgIGNvbnN0IGVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQgPSB0aGlzLl9lbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XG4gICAgZWxlbWVudC5kaXNhYmxlZCA9IGlzRGlzYWJsZWQ7XG4gICAgdGhpcy5jbG9zZVBhbmVsKCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLmRlc3Ryb3lQYW5lbCgpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBPdmVybGF5TW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgTnpBdXRvY29tcGxldGVPcHRncm91cENvbXBvbmVudCB9IGZyb20gJy4vbnotYXV0b2NvbXBsZXRlLW9wdGdyb3VwLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOekF1dG9jb21wbGV0ZU9wdGlvbkNvbXBvbmVudCB9IGZyb20gJy4vbnotYXV0b2NvbXBsZXRlLW9wdGlvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpBdXRvY29tcGxldGVUcmlnZ2VyRGlyZWN0aXZlIH0gZnJvbSAnLi9uei1hdXRvY29tcGxldGUtdHJpZ2dlci5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgTnpBdXRvY29tcGxldGVDb21wb25lbnQgfSBmcm9tICcuL256LWF1dG9jb21wbGV0ZS5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtOekF1dG9jb21wbGV0ZUNvbXBvbmVudCwgTnpBdXRvY29tcGxldGVPcHRpb25Db21wb25lbnQsIE56QXV0b2NvbXBsZXRlVHJpZ2dlckRpcmVjdGl2ZSwgTnpBdXRvY29tcGxldGVPcHRncm91cENvbXBvbmVudF0sXG4gIGV4cG9ydHM6IFtOekF1dG9jb21wbGV0ZUNvbXBvbmVudCwgTnpBdXRvY29tcGxldGVPcHRpb25Db21wb25lbnQsIE56QXV0b2NvbXBsZXRlVHJpZ2dlckRpcmVjdGl2ZSwgTnpBdXRvY29tcGxldGVPcHRncm91cENvbXBvbmVudF0sXG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGUsIE92ZXJsYXlNb2R1bGUsIEZvcm1zTW9kdWxlXVxufSlcbmV4cG9ydCBjbGFzcyBOekF1dG9jb21wbGV0ZU1vZHVsZSB7XG59XG4iLCJpbXBvcnQgeyBJbmplY3RhYmxlLCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE56VXBkYXRlSG9zdENsYXNzU2VydmljZSB7XG4gIHByaXZhdGUgY2xhc3NNYXAgPSB7fTtcblxuICB1cGRhdGVIb3N0Q2xhc3MoZWw6IEhUTUxFbGVtZW50LCBjbGFzc01hcDogb2JqZWN0KTogdm9pZCB7XG4gICAgdGhpcy5yZW1vdmVDbGFzcyhlbCwgdGhpcy5jbGFzc01hcCwgdGhpcy5yZW5kZXJlcik7XG4gICAgdGhpcy5jbGFzc01hcCA9IHsgLi4uY2xhc3NNYXAgfTtcbiAgICB0aGlzLmFkZENsYXNzKGVsLCB0aGlzLmNsYXNzTWFwLCB0aGlzLnJlbmRlcmVyKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVtb3ZlQ2xhc3MoZWw6IEhUTUxFbGVtZW50LCBjbGFzc01hcDogb2JqZWN0LCByZW5kZXJlcjogUmVuZGVyZXIyKTogdm9pZCB7XG4gICAgZm9yIChjb25zdCBpIGluIGNsYXNzTWFwKSB7XG4gICAgICBpZiAoY2xhc3NNYXAuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgcmVuZGVyZXIucmVtb3ZlQ2xhc3MoZWwsIGkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYWRkQ2xhc3MoZWw6IEhUTUxFbGVtZW50LCBjbGFzc01hcDogb2JqZWN0LCByZW5kZXJlcjogUmVuZGVyZXIyKTogdm9pZCB7XG4gICAgZm9yIChjb25zdCBpIGluIGNsYXNzTWFwKSB7XG4gICAgICBpZiAoY2xhc3NNYXAuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgaWYgKGNsYXNzTWFwWyBpIF0pIHtcbiAgICAgICAgICByZW5kZXJlci5hZGRDbGFzcyhlbCwgaSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcblxuICB9XG59XG4iLCJpbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgSW5wdXQsXG4gIE9uQ2hhbmdlcyxcbiAgU2ltcGxlQ2hhbmdlcywgVGVtcGxhdGVSZWYsXG4gIFZpZXdDaGlsZFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgTnpVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlIH0gZnJvbSAnLi4vY29yZS9zZXJ2aWNlcy91cGRhdGUtaG9zdC1jbGFzcy5zZXJ2aWNlJztcbmltcG9ydCB7IFN0ZXBOZ0NsYXNzVHlwZSB9IGZyb20gJy4uL3N0ZXBzJztcblxuZXhwb3J0IHR5cGUgTnpBdmF0YXJTaGFwZSA9ICdzcXVhcmUnIHwgJ2NpcmNsZSc7XG5leHBvcnQgdHlwZSBOekF2YXRhclNpemUgPSAnc21hbGwnIHwgJ2xhcmdlJyB8ICdkZWZhdWx0JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yICAgICAgICAgICA6ICduei1hdmF0YXInLFxuICB0ZW1wbGF0ZVVybCAgICAgICAgOiAnLi9uei1hdmF0YXIuY29tcG9uZW50Lmh0bWwnLFxuICBwcm92aWRlcnMgICAgICAgICAgOiBbIE56VXBkYXRlSG9zdENsYXNzU2VydmljZSBdLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgY2hhbmdlRGV0ZWN0aW9uICAgIDogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIE56QXZhdGFyQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgcHJpdmF0ZSBlbDogSFRNTEVsZW1lbnQgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcbiAgcHJpdmF0ZSBwcmVmaXhDbHMgPSAnYW50LWF2YXRhcic7XG4gIHByaXZhdGUgc2l6ZU1hcCA9IHsgbGFyZ2U6ICdsZycsIHNtYWxsOiAnc20nIH07XG4gIHByaXZhdGUgX2ljb246IHN0cmluZztcbiAgb2xkQVBJSWNvbiA9IHRydWU7IC8vIE1ha2UgdGhlIHVzZXIgZGVmaW5lZCBpY29uIGNvbXBhdGlibGUgdG8gb2xkIEFQSS4gU2hvdWxkIGJlIHJlbW92ZWQgaW4gMi4wLlxuICBoYXNUZXh0OiBib29sZWFuID0gZmFsc2U7XG4gIGhhc1NyYzogYm9vbGVhbiA9IHRydWU7XG4gIGhhc0ljb246IGJvb2xlYW4gPSBmYWxzZTtcbiAgdGV4dFN0eWxlczoge307XG5cbiAgQFZpZXdDaGlsZCgndGV4dEVsJykgdGV4dEVsOiBFbGVtZW50UmVmO1xuXG4gIEBJbnB1dCgpIG56U2hhcGU6IE56QXZhdGFyU2hhcGUgPSAnY2lyY2xlJztcblxuICBASW5wdXQoKSBuelNpemU6IE56QXZhdGFyU2l6ZSA9ICdkZWZhdWx0JztcblxuICBASW5wdXQoKSBuelRleHQ6IHN0cmluZztcblxuICBASW5wdXQoKSBuelNyYzogc3RyaW5nO1xuXG4gIEBJbnB1dCgpXG4gIHNldCBuekljb24odmFsdWU6IHN0cmluZykge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdGhpcy5vbGRBUElJY29uID0gdmFsdWUuaW5kZXhPZignYW50aWNvbicpID4gLTE7XG4gICAgfVxuICAgIHRoaXMuX2ljb24gPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBuekljb24oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5faWNvbjtcbiAgfVxuXG4gIHNldENsYXNzKCk6IHRoaXMge1xuICAgIGNvbnN0IGNsYXNzTWFwID0ge1xuICAgICAgWyB0aGlzLnByZWZpeENscyBdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0cnVlLFxuICAgICAgWyBgJHt0aGlzLnByZWZpeENsc30tJHt0aGlzLnNpemVNYXBbIHRoaXMubnpTaXplIF19YCBdOiB0aGlzLnNpemVNYXBbIHRoaXMubnpTaXplIF0sXG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xzfS0ke3RoaXMubnpTaGFwZX1gIF0gICAgICAgICAgICAgICA6IHRoaXMubnpTaGFwZSxcbiAgICAgIFsgYCR7dGhpcy5wcmVmaXhDbHN9LWljb25gIF0gICAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5uekljb24sXG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xzfS1pbWFnZWAgXSAgICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMubnpTcmNcbiAgICB9O1xuICAgIHRoaXMudXBkYXRlSG9zdENsYXNzU2VydmljZS51cGRhdGVIb3N0Q2xhc3ModGhpcy5lbCwgY2xhc3NNYXApO1xuICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgaW1nRXJyb3IoKTogdm9pZCB7XG4gICAgdGhpcy5oYXNTcmMgPSBmYWxzZTtcbiAgICB0aGlzLmhhc0ljb24gPSBmYWxzZTtcbiAgICB0aGlzLmhhc1RleHQgPSBmYWxzZTtcbiAgICBpZiAodGhpcy5uekljb24pIHtcbiAgICAgIHRoaXMuaGFzSWNvbiA9IHRydWU7XG4gICAgfSBlbHNlIGlmICh0aGlzLm56VGV4dCkge1xuICAgICAgdGhpcy5oYXNUZXh0ID0gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcy5zZXRDbGFzcygpLm5vdGlmeUNhbGMoKTtcbiAgfVxuXG4gIHByaXZhdGUgY2FsY1N0cmluZ1NpemUoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmhhc1RleHQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBjaGlsZHJlbldpZHRoID0gdGhpcy50ZXh0RWwubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgICBjb25zdCBhdmF0YXJXaWR0aCA9IHRoaXMuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG4gICAgY29uc3Qgc2NhbGUgPSBhdmF0YXJXaWR0aCAtIDggPCBjaGlsZHJlbldpZHRoID8gKGF2YXRhcldpZHRoIC0gOCkgLyBjaGlsZHJlbldpZHRoIDogMTtcbiAgICBpZiAoc2NhbGUgPT09IDEpIHtcbiAgICAgIHRoaXMudGV4dFN0eWxlcyA9IHt9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnRleHRTdHlsZXMgPSB7XG4gICAgICAgIHRyYW5zZm9ybTogYHNjYWxlKCR7c2NhbGV9KWAsXG4gICAgICAgIHBvc2l0aW9uIDogJ2Fic29sdXRlJyxcbiAgICAgICAgZGlzcGxheSAgOiAnaW5saW5lLWJsb2NrJyxcbiAgICAgICAgbGVmdCAgICAgOiBgY2FsYyg1MCUgLSAke01hdGgucm91bmQoY2hpbGRyZW5XaWR0aCAvIDIpfXB4KWBcbiAgICAgIH07XG4gICAgfVxuICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xuICB9XG5cbiAgcHJpdmF0ZSBub3RpZnlDYWxjKCk6IHRoaXMge1xuICAgIC8vIElmIHVzZSBuZ0FmdGVyVmlld0NoZWNrZWQsIGFsd2F5cyBkZW1hbmRzIG1vcmUgY29tcHV0YXRpb25zLCBzby4uLi4uLlxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5jYWxjU3RyaW5nU2l6ZSgpO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwcml2YXRlIGNkOiBDaGFuZ2VEZXRlY3RvclJlZiwgcHJpdmF0ZSB1cGRhdGVIb3N0Q2xhc3NTZXJ2aWNlOiBOelVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UpIHtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICB0aGlzLmhhc1RleHQgPSAhdGhpcy5uelNyYyAmJiAhIXRoaXMubnpUZXh0O1xuICAgIHRoaXMuaGFzSWNvbiA9ICF0aGlzLm56U3JjICYmICEhdGhpcy5uekljb247XG4gICAgdGhpcy5oYXNTcmMgPSAhIXRoaXMubnpTcmM7XG5cbiAgICB0aGlzLnNldENsYXNzKCkubm90aWZ5Q2FsYygpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE56SWNvbk1vZHVsZSB9IGZyb20gJy4uL2ljb24vbnotaWNvbi5tb2R1bGUnO1xuXG5pbXBvcnQgeyBOekF2YXRhckNvbXBvbmVudCB9IGZyb20gJy4vbnotYXZhdGFyLmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogWyBOekF2YXRhckNvbXBvbmVudCBdLFxuICBleHBvcnRzICAgICA6IFsgTnpBdmF0YXJDb21wb25lbnQgXSxcbiAgaW1wb3J0cyAgICAgOiBbIENvbW1vbk1vZHVsZSwgTnpJY29uTW9kdWxlIF1cbn0pXG5leHBvcnQgY2xhc3MgTnpBdmF0YXJNb2R1bGUge1xufVxuIiwiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5wdXQsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBPdXRwdXQsXG4gIFRlbXBsYXRlUmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge1xuICBhbmltYXRlLFxuICBzdHlsZSxcbiAgdHJhbnNpdGlvbixcbiAgdHJpZ2dlclxufSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcblxuaW1wb3J0IHsgZnJvbUV2ZW50LCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkLCB0aHJvdHRsZVRpbWUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IE56U2Nyb2xsU2VydmljZSB9IGZyb20gJy4uL2NvcmUvc2Nyb2xsL256LXNjcm9sbC5zZXJ2aWNlJztcbmltcG9ydCB7IHRvTnVtYmVyIH0gZnJvbSAnLi4vY29yZS91dGlsL2NvbnZlcnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICAgICAgICAgIDogJ256LWJhY2stdG9wJyxcbiAgYW5pbWF0aW9ucyAgICAgICAgIDogW1xuICAgIHRyaWdnZXIoJ2VudGVyTGVhdmUnLCBbXG4gICAgICB0cmFuc2l0aW9uKCc6ZW50ZXInLCBbXG4gICAgICAgIHN0eWxlKHsgb3BhY2l0eTogMCB9KSxcbiAgICAgICAgYW5pbWF0ZSgzMDAsIHN0eWxlKHsgb3BhY2l0eTogMSB9KSlcbiAgICAgIF0pLFxuICAgICAgdHJhbnNpdGlvbignOmxlYXZlJywgW1xuICAgICAgICBzdHlsZSh7IG9wYWNpdHk6IDEgfSksXG4gICAgICAgIGFuaW1hdGUoMzAwLCBzdHlsZSh7IG9wYWNpdHk6IDAgfSkpXG4gICAgICBdKVxuICAgIF0pXG4gIF0sXG4gIHRlbXBsYXRlVXJsICAgICAgICA6ICcuL256LWJhY2stdG9wLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uICAgIDogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZVxufSlcbmV4cG9ydCBjbGFzcyBOekJhY2tUb3BDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG5cbiAgcHJpdmF0ZSBzY3JvbGwkOiBTdWJzY3JpcHRpb24gPSBudWxsO1xuICBwcml2YXRlIHRhcmdldDogSFRNTEVsZW1lbnQgPSBudWxsO1xuXG4gIHZpc2libGU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBASW5wdXQoKSBuelRlbXBsYXRlOiBUZW1wbGF0ZVJlZjx2b2lkPjtcblxuICBwcml2YXRlIF92aXNpYmlsaXR5SGVpZ2h0OiBudW1iZXIgPSA0MDA7XG5cbiAgQElucHV0KClcbiAgc2V0IG56VmlzaWJpbGl0eUhlaWdodCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fdmlzaWJpbGl0eUhlaWdodCA9IHRvTnVtYmVyKHZhbHVlLCA0MDApO1xuICB9XG5cbiAgZ2V0IG56VmlzaWJpbGl0eUhlaWdodCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl92aXNpYmlsaXR5SGVpZ2h0O1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56VGFyZ2V0KGVsOiBIVE1MRWxlbWVudCkge1xuICAgIHRoaXMudGFyZ2V0ID0gZWw7XG4gICAgdGhpcy5yZWdpc3RlclNjcm9sbEV2ZW50KCk7XG4gIH1cblxuICBAT3V0cHV0KCkgbnpDbGljazogRXZlbnRFbWl0dGVyPGJvb2xlYW4+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc2Nyb2xsU3J2OiBOelNjcm9sbFNlcnZpY2UsIHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuc2Nyb2xsJCkge1xuICAgICAgdGhpcy5yZWdpc3RlclNjcm9sbEV2ZW50KCk7XG4gICAgfVxuICB9XG5cbiAgY2xpY2tCYWNrVG9wKCk6IHZvaWQge1xuICAgIHRoaXMuc2Nyb2xsU3J2LnNjcm9sbFRvKHRoaXMuZ2V0VGFyZ2V0KCksIDApO1xuICAgIHRoaXMubnpDbGljay5lbWl0KHRydWUpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRUYXJnZXQoKTogSFRNTEVsZW1lbnQgfCBXaW5kb3cge1xuICAgIHJldHVybiB0aGlzLnRhcmdldCB8fCB3aW5kb3c7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZVNjcm9sbCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy52aXNpYmxlID09PSB0aGlzLnNjcm9sbFNydi5nZXRTY3JvbGwodGhpcy5nZXRUYXJnZXQoKSkgPiB0aGlzLm56VmlzaWJpbGl0eUhlaWdodCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnZpc2libGUgPSAhdGhpcy52aXNpYmxlO1xuICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xuICB9XG5cbiAgcHJpdmF0ZSByZW1vdmVMaXN0ZW4oKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuc2Nyb2xsJCkge1xuICAgICAgdGhpcy5zY3JvbGwkLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSByZWdpc3RlclNjcm9sbEV2ZW50KCk6IHZvaWQge1xuICAgIHRoaXMucmVtb3ZlTGlzdGVuKCk7XG4gICAgdGhpcy5oYW5kbGVTY3JvbGwoKTtcbiAgICB0aGlzLnNjcm9sbCQgPSBmcm9tRXZlbnQodGhpcy5nZXRUYXJnZXQoKSwgJ3Njcm9sbCcpLnBpcGUodGhyb3R0bGVUaW1lKDUwKSwgZGlzdGluY3RVbnRpbENoYW5nZWQoKSlcbiAgICAuc3Vic2NyaWJlKGUgPT4gdGhpcy5oYW5kbGVTY3JvbGwoKSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbigpO1xuICB9XG5cbn1cbiIsImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBTQ1JPTExfU0VSVklDRV9QUk9WSURFUiB9IGZyb20gJy4uL2NvcmUvc2Nyb2xsL256LXNjcm9sbC5zZXJ2aWNlJztcblxuaW1wb3J0IHsgTnpCYWNrVG9wQ29tcG9uZW50IH0gZnJvbSAnLi9uei1iYWNrLXRvcC5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFsgTnpCYWNrVG9wQ29tcG9uZW50IF0sXG4gIGV4cG9ydHMgICAgIDogWyBOekJhY2tUb3BDb21wb25lbnQgXSxcbiAgaW1wb3J0cyAgICAgOiBbIENvbW1vbk1vZHVsZSBdLFxuICBwcm92aWRlcnMgICA6IFsgU0NST0xMX1NFUlZJQ0VfUFJPVklERVIgXVxufSlcbmV4cG9ydCBjbGFzcyBOekJhY2tUb3BNb2R1bGUge1xufVxuIiwiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBJbnB1dCxcbiAgTmdab25lLFxuICBPbkluaXQsXG4gIFJlbmRlcmVyMixcbiAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge1xuICBhbmltYXRlLFxuICBzdHlsZSxcbiAgdHJhbnNpdGlvbixcbiAgdHJpZ2dlclxufSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcblxuaW1wb3J0IHsgaXNFbXB0eSB9IGZyb20gJy4uL2NvcmUvdXRpbC9jaGVjayc7XG5pbXBvcnQgeyB0b0Jvb2xlYW4gfSBmcm9tICcuLi9jb3JlL3V0aWwvY29udmVydCc7XG5cbmV4cG9ydCB0eXBlIE56QmFkZ2VTdGF0dXNUeXBlID0gJ3N1Y2Nlc3MnIHwgJ3Byb2Nlc3NpbmcnIHwgJ2RlZmF1bHQnIHwgJ2Vycm9yJyB8ICd3YXJuaW5nJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yICAgICAgICAgICA6ICduei1iYWRnZScsXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxuICBhbmltYXRpb25zICAgICAgICAgOiBbXG4gICAgdHJpZ2dlcignZW50ZXJMZWF2ZScsIFtcbiAgICAgIHRyYW5zaXRpb24oJ3ZvaWQgPT4gKicsIFtcbiAgICAgICAgc3R5bGUoeyBvcGFjaXR5OiAwIH0pLFxuICAgICAgICBhbmltYXRlKCcwLjNzIGN1YmljLWJlemllcigwLjEyLCAwLjQsIDAuMjksIDEuNDYpJylcbiAgICAgIF0pLFxuICAgICAgdHJhbnNpdGlvbignKiA9PiB2b2lkJywgW1xuICAgICAgICBzdHlsZSh7IG9wYWNpdHk6IDEgfSksXG4gICAgICAgIGFuaW1hdGUoJzAuM3MgY3ViaWMtYmV6aWVyKDAuMTIsIDAuNCwgMC4yOSwgMS40NiknKVxuICAgICAgXSlcbiAgICBdKVxuICBdLFxuICB0ZW1wbGF0ZVVybCAgICAgICAgOiAnLi9uei1iYWRnZS5jb21wb25lbnQuaHRtbCcsXG4gIGhvc3QgICAgICAgICAgICAgICA6IHtcbiAgICAnW2NsYXNzLmFudC1iYWRnZV0nICAgICAgIDogJ3RydWUnLFxuICAgICdbY2xhc3MuYW50LWJhZGdlLXN0YXR1c10nOiAnbnpTdGF0dXMnXG4gIH0sXG4gIHN0eWxlcyAgICAgICAgICAgICA6IFtcbiAgICBgXG4gICAgICA6aG9zdDpub3QoLmFudC1iYWRnZS1ub3QtYS13cmFwcGVyKSAuYW50LWJhZGdlLWNvdW50IHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoNTAlKTtcbiAgICAgICAgcmlnaHQ6IDA7XG4gICAgICB9XG5cbiAgICAgIDpob3N0IC5hbnQtYmFkZ2UtZG90IHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoNTAlKTtcbiAgICAgICAgcmlnaHQ6IDA7XG4gICAgICB9XG4gICAgYFxuICBdXG59KVxuZXhwb3J0IGNsYXNzIE56QmFkZ2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQge1xuICBwcml2YXRlIF9zaG93RG90ID0gZmFsc2U7XG4gIHByaXZhdGUgX3Nob3daZXJvID0gZmFsc2U7XG4gIHByaXZhdGUgX2NvdW50OiBudW1iZXI7XG4gIG1heE51bWJlckFycmF5ID0gW107XG4gIGNvdW50QXJyYXkgPSBbXTtcbiAgY291bnRTaW5nbGVBcnJheSA9IFsgMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSBdO1xuICBAVmlld0NoaWxkKCdjb250ZW50RWxlbWVudCcpIGNvbnRlbnRFbGVtZW50OiBFbGVtZW50UmVmO1xuICBASW5wdXQoKSBuek92ZXJmbG93Q291bnQgPSA5OTtcbiAgQElucHV0KCkgbnpUZXh0OiBzdHJpbmc7XG4gIEBJbnB1dCgpIG56U3R5bGU6IHsgWyBrZXk6IHN0cmluZyBdOiBzdHJpbmcgfTtcbiAgQElucHV0KCkgbnpTdGF0dXM6IE56QmFkZ2VTdGF0dXNUeXBlO1xuXG4gIEBJbnB1dCgpXG4gIHNldCBuelNob3daZXJvKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fc2hvd1plcm8gPSB0b0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56U2hvd1plcm8oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3Nob3daZXJvO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56RG90KHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fc2hvd0RvdCA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBnZXQgbnpEb3QoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3Nob3dEb3Q7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpDb3VudCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgaWYgKHZhbHVlIDwgMCkge1xuICAgICAgdGhpcy5fY291bnQgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9jb3VudCA9IHZhbHVlO1xuICAgIH1cbiAgICB0aGlzLmNvdW50QXJyYXkgPSB0aGlzLl9jb3VudC50b1N0cmluZygpLnNwbGl0KCcnKTtcbiAgfVxuXG4gIGdldCBuekNvdW50KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2NvdW50O1xuICB9XG5cbiAgZ2V0IHNob3dTdXAoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubnpEb3QgfHwgdGhpcy5uekNvdW50ID4gMCB8fCAoKHRoaXMubnpDb3VudCA9PT0gMCkgJiYgdGhpcy5uelNob3daZXJvKTtcbiAgfVxuXG4gIGNoZWNrQ29udGVudCgpOiB2b2lkIHtcbiAgICBpZiAoaXNFbXB0eSh0aGlzLmNvbnRlbnRFbGVtZW50Lm5hdGl2ZUVsZW1lbnQpKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnYW50LWJhZGdlLW5vdC1hLXdyYXBwZXInKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2FudC1iYWRnZS1ub3QtYS13cmFwcGVyJyk7XG4gICAgfVxuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB6b25lOiBOZ1pvbmUsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMiwgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XG5cbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMubWF4TnVtYmVyQXJyYXkgPSB0aGlzLm56T3ZlcmZsb3dDb3VudC50b1N0cmluZygpLnNwbGl0KCcnKTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmNoZWNrQ29udGVudCgpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBPYnNlcnZlcnNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jZGsvb2JzZXJ2ZXJzJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBOekJhZGdlQ29tcG9uZW50IH0gZnJvbSAnLi9uei1iYWRnZS5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFsgTnpCYWRnZUNvbXBvbmVudCBdLFxuICBleHBvcnRzICAgICA6IFsgTnpCYWRnZUNvbXBvbmVudCBdLFxuICBpbXBvcnRzICAgICA6IFsgQ29tbW9uTW9kdWxlLCBPYnNlcnZlcnNNb2R1bGUgXVxufSlcbmV4cG9ydCBjbGFzcyBOekJhZGdlTW9kdWxlIHtcbn1cbiIsImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgSW5qZWN0b3IsXG4gIElucHV0LFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgVGVtcGxhdGVSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSwgTmF2aWdhdGlvbkVuZCwgUGFyYW1zLCBQUklNQVJZX09VVExFVCwgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciwgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5jb25zdCBST1VURV9EQVRBX0JSRUFEQ1JVTUIgPSAnYnJlYWRjcnVtYic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJlYWRjcnVtYk9wdGlvbiB7XG4gIGxhYmVsOiBzdHJpbmc7XG4gIHBhcmFtczogUGFyYW1zO1xuICB1cmw6IHN0cmluZztcbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yICAgICAgICAgICA6ICduei1icmVhZGNydW1iJyxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG4gIHRlbXBsYXRlVXJsICAgICAgICA6ICcuL256LWJyZWFkY3J1bWIuY29tcG9uZW50Lmh0bWwnLFxuICBob3N0ICAgICAgICAgICAgICAgOiB7XG4gICAgJ1tjbGFzcy5hbnQtYnJlYWRjcnVtYl0nOiAndHJ1ZSdcbiAgfSxcbiAgc3R5bGVzICAgICAgICAgICAgIDogWyBgXG4gICAgOmhvc3Qge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgfVxuICBgIF1cbn0pXG5leHBvcnQgY2xhc3MgTnpCcmVhZENydW1iQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBwcml2YXRlIF9zZXBhcmF0b3I6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+ID0gJy8nO1xuICBwcml2YXRlICRkZXN0cm95ID0gbmV3IFN1YmplY3QoKTtcbiAgaXNUZW1wbGF0ZVJlZiA9IGZhbHNlO1xuXG4gIEBJbnB1dCgpIG56QXV0b0dlbmVyYXRlID0gZmFsc2U7XG5cbiAgQElucHV0KClcbiAgc2V0IG56U2VwYXJhdG9yKHZhbHVlOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPikge1xuICAgIHRoaXMuX3NlcGFyYXRvciA9IHZhbHVlO1xuICAgIHRoaXMuaXNUZW1wbGF0ZVJlZiA9IHZhbHVlIGluc3RhbmNlb2YgVGVtcGxhdGVSZWY7XG4gIH1cblxuICBnZXQgbnpTZXBhcmF0b3IoKTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLl9zZXBhcmF0b3I7XG4gIH1cblxuICBicmVhZGNydW1iczogQnJlYWRjcnVtYk9wdGlvbltdID0gW107XG5cbiAgZ2V0QnJlYWRjcnVtYnMocm91dGU6IEFjdGl2YXRlZFJvdXRlLCB1cmw6IHN0cmluZyA9ICcnLCBicmVhZGNydW1iczogQnJlYWRjcnVtYk9wdGlvbltdID0gW10pOiBCcmVhZGNydW1iT3B0aW9uW10ge1xuICAgIGNvbnN0IGNoaWxkcmVuOiBBY3RpdmF0ZWRSb3V0ZVtdID0gcm91dGUuY2hpbGRyZW47XG4gICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGJyZWFkY3J1bWJzOyAvLyBJZiB0aGVyZSdzIG5vIHN1YiByb290LCB0aGVuIHN0b3AgdGhlIHJlY3Vyc2UgYW5kIHJldHVybnMgdGhlIGdlbmVyYXRlZCBicmVhZGNydW1icy5cbiAgICB9XG4gICAgZm9yIChjb25zdCBjaGlsZCBvZiBjaGlsZHJlbikge1xuICAgICAgaWYgKGNoaWxkLm91dGxldCA9PT0gUFJJTUFSWV9PVVRMRVQpIHtcbiAgICAgICAgLy8gT25seSBwYXJzZSBjb21wb25lbnRzIGluIHByaW1hcnkgcm91dGVyLW91dGxldCAoaW4gYW5vdGhlciB3b3JkLCByb3V0ZXItb3V0bGV0IHdpdGhvdXQgYSBzcGVjaWZpYyBuYW1lKS5cbiAgICAgICAgLy8gUGFyc2UgdGhpcyBsYXllciBhbmQgZ2VuZXJhdGUgYSBicmVhZGNydW1iIGl0ZW0uXG4gICAgICAgIGNvbnN0IHJvdXRlVVJMOiBzdHJpbmcgPSBjaGlsZC5zbmFwc2hvdC51cmwubWFwKHNlZ21lbnQgPT4gc2VnbWVudC5wYXRoKS5qb2luKCcvJyk7XG4gICAgICAgIGNvbnN0IG5leHRVcmwgPSB1cmwgKyBgLyR7cm91dGVVUkx9YDtcbiAgICAgICAgLy8gSWYgaGF2ZSBkYXRhLCBnbyB0byBnZW5lcmF0ZSBhIGJyZWFkY3J1bWIgZm9yIGl0LlxuICAgICAgICBpZiAoY2hpbGQuc25hcHNob3QuZGF0YS5oYXNPd25Qcm9wZXJ0eShST1VURV9EQVRBX0JSRUFEQ1JVTUIpKSB7XG4gICAgICAgICAgY29uc3QgYnJlYWRjcnVtYjogQnJlYWRjcnVtYk9wdGlvbiA9IHtcbiAgICAgICAgICAgIGxhYmVsIDogY2hpbGQuc25hcHNob3QuZGF0YVsgUk9VVEVfREFUQV9CUkVBRENSVU1CIF0gfHwgJ0JyZWFkY3J1bWInLFxuICAgICAgICAgICAgcGFyYW1zOiBjaGlsZC5zbmFwc2hvdC5wYXJhbXMsXG4gICAgICAgICAgICB1cmwgICA6IG5leHRVcmxcbiAgICAgICAgICB9O1xuICAgICAgICAgIGJyZWFkY3J1bWJzLnB1c2goYnJlYWRjcnVtYik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QnJlYWRjcnVtYnMoY2hpbGQsIG5leHRVcmwsIGJyZWFkY3J1bWJzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBuYXZpZ2F0ZSh1cmw6IHN0cmluZywgZTogTW91c2VFdmVudCk6IHZvaWQge1xuICAgIGUucHJldmVudERlZmF1bHQoKTsgLy8gU3RvcCBicm93c2VycycgZGVmYXVsdCBuYXZpZ2F0aW9uIGJlaGF2aW9yLlxuICAgIHRyeSB7XG4gICAgICBjb25zdCByb3V0ZXIgPSB0aGlzLl9pbmplY3Rvci5nZXQoUm91dGVyKTtcbiAgICAgIHJvdXRlci5uYXZpZ2F0ZUJ5VXJsKHVybCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICB9XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9pbmplY3RvcjogSW5qZWN0b3IpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLm56QXV0b0dlbmVyYXRlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBhY3RpdmF0ZWRSb3V0ZSA9IHRoaXMuX2luamVjdG9yLmdldChBY3RpdmF0ZWRSb3V0ZSk7XG4gICAgICAgIGNvbnN0IHJvdXRlciA9IHRoaXMuX2luamVjdG9yLmdldChSb3V0ZXIpO1xuICAgICAgICByb3V0ZXIuZXZlbnRzLnBpcGUoZmlsdGVyKGUgPT4gZSBpbnN0YW5jZW9mIE5hdmlnYXRpb25FbmQpLCB0YWtlVW50aWwodGhpcy4kZGVzdHJveSkpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5icmVhZGNydW1icyA9IHRoaXMuZ2V0QnJlYWRjcnVtYnMoYWN0aXZhdGVkUm91dGUucm9vdCk7IC8vIEJ1aWxkIHRoZSBicmVhZGNydW1iIHRyZWUgZnJvbSByb290IHJvdXRlLlxuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3Ugc2hvdWxkIGltcG9ydCBSb3V0ZXJNb2R1bGUgaWYgeW91IHdhbnQgdG8gdXNlIE56QXV0b0dlbmVyYXRlJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy4kZGVzdHJveS5uZXh0KCk7XG4gICAgdGhpcy4kZGVzdHJveS5jb21wbGV0ZSgpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgTnpCcmVhZENydW1iQ29tcG9uZW50IH0gZnJvbSAnLi9uei1icmVhZGNydW1iLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICAgICAgOiAnbnotYnJlYWRjcnVtYi1pdGVtJyxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG4gIHRlbXBsYXRlICAgICAgICAgICA6IGBcbiAgICA8c3BhbiBjbGFzcz1cImFudC1icmVhZGNydW1iLWxpbmtcIj5cbiAgICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiAgICA8L3NwYW4+XG4gICAgPHNwYW4gY2xhc3M9XCJhbnQtYnJlYWRjcnVtYi1zZXBhcmF0b3JcIj5cbiAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJuekJyZWFkQ3J1bWJDb21wb25lbnQuaXNUZW1wbGF0ZVJlZjsgZWxzZSBzdHJpbmdUZW1wbGF0ZVwiPlxuICAgICAgICA8bmctdGVtcGxhdGUgW25nVGVtcGxhdGVPdXRsZXRdPVwibnpCcmVhZENydW1iQ29tcG9uZW50Lm56U2VwYXJhdG9yXCI+PC9uZy10ZW1wbGF0ZT5cbiAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgPG5nLXRlbXBsYXRlICNzdHJpbmdUZW1wbGF0ZT5cbiAgICAgICAgIHt7IG56QnJlYWRDcnVtYkNvbXBvbmVudC5uelNlcGFyYXRvciB9fVxuICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICA8L3NwYW4+YCxcbiAgc3R5bGVzICAgICAgICAgICAgIDogW1xuICAgICAgYDpob3N0Omxhc3QtY2hpbGQge1xuICAgICAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC42NSk7XG4gICAgfVxuXG4gICAgOmhvc3Q6bGFzdC1jaGlsZCAuYW50LWJyZWFkY3J1bWItc2VwYXJhdG9ye1xuICAgICAgZGlzcGxheTogbm9uZTtcbiAgICB9XG4gICAgYFxuICBdXG59KVxuZXhwb3J0IGNsYXNzIE56QnJlYWRDcnVtYkl0ZW1Db21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgbnpCcmVhZENydW1iQ29tcG9uZW50OiBOekJyZWFkQ3J1bWJDb21wb25lbnQpIHtcbiAgfVxuXG59XG4iLCJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgTnpCcmVhZENydW1iSXRlbUNvbXBvbmVudCB9IGZyb20gJy4vbnotYnJlYWRjcnVtYi1pdGVtLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOekJyZWFkQ3J1bWJDb21wb25lbnQgfSBmcm9tICcuL256LWJyZWFkY3J1bWIuY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0cyAgICAgOiBbIENvbW1vbk1vZHVsZSBdLFxuICBkZWNsYXJhdGlvbnM6IFsgTnpCcmVhZENydW1iQ29tcG9uZW50LCBOekJyZWFkQ3J1bWJJdGVtQ29tcG9uZW50IF0sXG4gIGV4cG9ydHMgICAgIDogWyBOekJyZWFkQ3J1bWJDb21wb25lbnQsIE56QnJlYWRDcnVtYkl0ZW1Db21wb25lbnQgXVxufSlcbmV4cG9ydCBjbGFzcyBOekJyZWFkQ3J1bWJNb2R1bGUge31cbiIsImltcG9ydCB7IFBsYXRmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BsYXRmb3JtJztcbmltcG9ydCB7IE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgY2xhc3MgTnpXYXZlUmVuZGVyZXIge1xuXG4gIHJlYWRvbmx5IHdhdmVUcmFuc2l0aW9uRHVyYXRpb24gPSA0MDA7XG4gIHByaXZhdGUgc3R5bGVGb3JQc2V1ZG86IEhUTUxTdHlsZUVsZW1lbnQgfCBudWxsO1xuICBwcml2YXRlIGV4dHJhTm9kZTogSFRNTERpdkVsZW1lbnQgfCBudWxsO1xuICBwcml2YXRlIGxhc3RUaW1lID0gMDtcblxuICBnZXQgd2F2ZUF0dHJpYnV0ZU5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5pbnNlcnRFeHRyYU5vZGUgPyAnYW50LWNsaWNrLWFuaW1hdGluZycgOiAnYW50LWNsaWNrLWFuaW1hdGluZy13aXRob3V0LWV4dHJhLW5vZGUnO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0cmlnZ2VyRWxlbWVudDogSFRNTEVsZW1lbnQsIHByaXZhdGUgbmdab25lOiBOZ1pvbmUsIHByaXZhdGUgaW5zZXJ0RXh0cmFOb2RlOiBib29sZWFuKSB7XG4gICAgY29uc3QgcGxhdGZvcm0gPSBuZXcgUGxhdGZvcm0oKTtcbiAgICBpZiAocGxhdGZvcm0uaXNCcm93c2VyKSB7XG4gICAgICB0aGlzLmJpbmRUcmlnZ2VyRXZlbnQoKTtcbiAgICB9XG4gIH1cblxuICBvbkNsaWNrID0gKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgaWYgKFxuICAgICAgIXRoaXMudHJpZ2dlckVsZW1lbnQgfHxcbiAgICAgICF0aGlzLnRyaWdnZXJFbGVtZW50LmdldEF0dHJpYnV0ZSB8fFxuICAgICAgdGhpcy50cmlnZ2VyRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJykgfHxcbiAgICAgIChldmVudC50YXJnZXQgYXMgSFRNTEVsZW1lbnQpLnRhZ05hbWUgPT09ICdJTlBVVCcgfHxcbiAgICAgIHRoaXMudHJpZ2dlckVsZW1lbnQuY2xhc3NOYW1lLmluZGV4T2YoJ2Rpc2FibGVkJykgPj0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmZhZGVPdXRXYXZlKCk7XG4gIH1cblxuICBiaW5kVHJpZ2dlckV2ZW50KCk6IHZvaWQge1xuICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIGlmICh0aGlzLnRyaWdnZXJFbGVtZW50KSB7XG4gICAgICAgIHRoaXMudHJpZ2dlckVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uQ2xpY2ssIHRydWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmVtb3ZlVHJpZ2dlckV2ZW50KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnRyaWdnZXJFbGVtZW50KSB7XG4gICAgICB0aGlzLnRyaWdnZXJFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkNsaWNrLCB0cnVlKTtcbiAgICB9XG4gIH1cblxuICByZW1vdmVTdHlsZUFuZEV4dHJhTm9kZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5zdHlsZUZvclBzZXVkbyAmJiBkb2N1bWVudC5ib2R5LmNvbnRhaW5zKHRoaXMuc3R5bGVGb3JQc2V1ZG8pKSB7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHRoaXMuc3R5bGVGb3JQc2V1ZG8pO1xuICAgICAgdGhpcy5zdHlsZUZvclBzZXVkbyA9IG51bGw7XG4gICAgfVxuICAgIGlmICh0aGlzLmluc2VydEV4dHJhTm9kZSAmJiB0aGlzLnRyaWdnZXJFbGVtZW50LmNvbnRhaW5zKHRoaXMuZXh0cmFOb2RlKSkge1xuICAgICAgdGhpcy50cmlnZ2VyRWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLmV4dHJhTm9kZSk7XG4gICAgfVxuICB9XG5cbiAgZGVzdHJveSgpOiB2b2lkIHtcbiAgIHRoaXMucmVtb3ZlVHJpZ2dlckV2ZW50KCk7XG4gICB0aGlzLnJlbW92ZVN0eWxlQW5kRXh0cmFOb2RlKCk7XG4gIH1cblxuICBwcml2YXRlIGZhZGVPdXRXYXZlKCk6IHZvaWQge1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLnRyaWdnZXJFbGVtZW50O1xuICAgIGNvbnN0IHdhdmVDb2xvciA9IHRoaXMuZ2V0V2F2ZUNvbG9yKG5vZGUpO1xuICAgIG5vZGUuc2V0QXR0cmlidXRlKHRoaXMud2F2ZUF0dHJpYnV0ZU5hbWUsICd0cnVlJyk7XG4gICAgaWYgKERhdGUubm93KCkgPCB0aGlzLmxhc3RUaW1lICsgdGhpcy53YXZlVHJhbnNpdGlvbkR1cmF0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNWYWxpZENvbG9yKHdhdmVDb2xvcikpIHtcbiAgICAgIGlmICghdGhpcy5zdHlsZUZvclBzZXVkbykge1xuICAgICAgICB0aGlzLnN0eWxlRm9yUHNldWRvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zdHlsZUZvclBzZXVkby5pbm5lckhUTUwgPVxuICAgICAgICBgW2FudC1jbGljay1hbmltYXRpbmctd2l0aG91dC1leHRyYS1ub2RlXTphZnRlciB7IGJvcmRlci1jb2xvcjogJHt3YXZlQ29sb3J9OyB9YDtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5zdHlsZUZvclBzZXVkbyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaW5zZXJ0RXh0cmFOb2RlKSB7XG4gICAgICBpZiAoIXRoaXMuZXh0cmFOb2RlKSB7XG4gICAgICAgIHRoaXMuZXh0cmFOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB9XG4gICAgICB0aGlzLmV4dHJhTm9kZS5jbGFzc05hbWUgPSAnYW50LWNsaWNrLWFuaW1hdGluZy1ub2RlJztcbiAgICAgIG5vZGUuYXBwZW5kQ2hpbGQodGhpcy5leHRyYU5vZGUpO1xuICAgIH1cblxuICAgIHRoaXMubGFzdFRpbWUgPSBEYXRlLm5vdygpO1xuXG4gICAgdGhpcy5ydW5UaW1lb3V0T3V0c2lkZVpvbmUoKCkgPT4ge1xuICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUodGhpcy53YXZlQXR0cmlidXRlTmFtZSk7XG4gICAgICB0aGlzLnJlbW92ZVN0eWxlQW5kRXh0cmFOb2RlKCk7XG4gICAgfSwgdGhpcy53YXZlVHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgfVxuXG4gIHByaXZhdGUgaXNWYWxpZENvbG9yKGNvbG9yOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gY29sb3JcbiAgICAgICYmIGNvbG9yICE9PSAnI2ZmZmZmZidcbiAgICAgICYmIGNvbG9yICE9PSAncmdiKDI1NSwgMjU1LCAyNTUpJ1xuICAgICAgJiYgdGhpcy5pc05vdEdyZXkoY29sb3IpXG4gICAgICAmJiAhL3JnYmFcXChcXGQqLCBcXGQqLCBcXGQqLCAwXFwpLy50ZXN0KGNvbG9yKVxuICAgICAgJiYgY29sb3IgIT09ICd0cmFuc3BhcmVudCc7XG4gIH1cblxuICBwcml2YXRlIGlzTm90R3JleShjb2xvcjogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgY29uc3QgbWF0Y2ggPSBjb2xvci5tYXRjaCgvcmdiYT9cXCgoXFxkKiksIChcXGQqKSwgKFxcZCopKCwgW1xcLlxcZF0qKT9cXCkvKTtcbiAgICBpZiAobWF0Y2ggJiYgbWF0Y2hbIDEgXSAmJiBtYXRjaFsgMiBdICYmIG1hdGNoWyAzIF0pIHtcbiAgICAgIHJldHVybiAhKG1hdGNoWyAxIF0gPT09IG1hdGNoWyAyIF0gJiYgbWF0Y2hbIDIgXSA9PT0gbWF0Y2hbIDMgXSk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRXYXZlQ29sb3Iobm9kZTogSFRNTEVsZW1lbnQpOiBzdHJpbmcge1xuICAgIGNvbnN0IG5vZGVTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgcmV0dXJuIG5vZGVTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdib3JkZXItdG9wLWNvbG9yJykgfHwgLy8gRmlyZWZveCBDb21wYXRpYmxlXG4gICAgICBub2RlU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnYm9yZGVyLWNvbG9yJykgfHxcbiAgICAgIG5vZGVTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdiYWNrZ3JvdW5kLWNvbG9yJyk7XG4gIH1cblxuICBwcml2YXRlIHJ1blRpbWVvdXRPdXRzaWRlWm9uZShmbjogKCkgPT4gdm9pZCwgZGVsYXk6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHNldFRpbWVvdXQoZm4sIGRlbGF5KSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5wdXQsIE5nWm9uZSwgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE56V2F2ZVJlbmRlcmVyIH0gZnJvbSAnLi9uei13YXZlLXJlbmRlcmVyJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW256LXdhdmVdJ1xufSlcbmV4cG9ydCBjbGFzcyBOeldhdmVEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG5cbiAgcHJpdmF0ZSB3YXZlUmVuZGVyZXI6IE56V2F2ZVJlbmRlcmVyO1xuXG4gIEBJbnB1dCgpIG56V2F2ZUV4dHJhTm9kZSA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbmdab25lOiBOZ1pvbmUsIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgaWYgKHRoaXMud2F2ZVJlbmRlcmVyKSB7XG4gICAgICB0aGlzLndhdmVSZW5kZXJlci5kZXN0cm95KCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KSB7XG4gICAgICB0aGlzLndhdmVSZW5kZXJlciA9IG5ldyBOeldhdmVSZW5kZXJlcih0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgdGhpcy5uZ1pvbmUsIHRoaXMubnpXYXZlRXh0cmFOb2RlKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IFBsYXRmb3JtTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BsYXRmb3JtJztcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOeldhdmVEaXJlY3RpdmUgfSBmcm9tICcuL256LXdhdmUuZGlyZWN0aXZlJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0cyAgICAgOiBbIFBsYXRmb3JtTW9kdWxlIF0sXG4gIGV4cG9ydHMgICAgIDogWyBOeldhdmVEaXJlY3RpdmUgXSxcbiAgZGVjbGFyYXRpb25zOiBbIE56V2F2ZURpcmVjdGl2ZSBdXG59KVxuZXhwb3J0IGNsYXNzIE56V2F2ZU1vZHVsZSB7IH1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgdHlwZSBOekJ1dHRvbkdyb3VwU2l6ZSA9ICdzbWFsbCcgfCAnbGFyZ2UnIHwgJ2RlZmF1bHQnIDtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yICAgICAgICAgICA6ICduei1idXR0b24tZ3JvdXAnLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgdGVtcGxhdGVVcmwgICAgICAgIDogJy4vbnotYnV0dG9uLWdyb3VwLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBOekJ1dHRvbkdyb3VwQ29tcG9uZW50IHtcbiAgcHJpdmF0ZSBfc2l6ZTogTnpCdXR0b25Hcm91cFNpemU7XG4gIHByaXZhdGUgcHJlZml4Q2xzID0gJ2FudC1idG4tZ3JvdXAnO1xuICBwcml2YXRlIHNpemVNYXAgPSB7IGxhcmdlOiAnbGcnLCBzbWFsbDogJ3NtJyB9O1xuICBjbGFzc01hcCA9IHtcbiAgICBbIHRoaXMucHJlZml4Q2xzIF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRydWUsXG4gICAgWyBgJHt0aGlzLnByZWZpeENsc30tJHt0aGlzLnNpemVNYXBbIHRoaXMubnpTaXplIF19YCBdOiB0aGlzLnNpemVNYXBbIHRoaXMubnpTaXplIF1cbiAgfTtcbiAgQFZpZXdDaGlsZCgnZ3JvdXBXcmFwcGVyJykgZ3JvdXBXcmFwcGVyOiBFbGVtZW50UmVmO1xuXG4gIEBJbnB1dCgpXG4gIGdldCBuelNpemUoKTogTnpCdXR0b25Hcm91cFNpemUge1xuICAgIHJldHVybiB0aGlzLl9zaXplO1xuICB9XG5cbiAgc2V0IG56U2l6ZSh2YWx1ZTogTnpCdXR0b25Hcm91cFNpemUpIHtcbiAgICB0aGlzLl9zaXplID0gdmFsdWU7XG4gICAgdGhpcy5jbGFzc01hcCA9IHtcbiAgICAgIFsgdGhpcy5wcmVmaXhDbHMgXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdHJ1ZSxcbiAgICAgIFsgYCR7dGhpcy5wcmVmaXhDbHN9LSR7dGhpcy5zaXplTWFwWyB0aGlzLm56U2l6ZSBdfWAgXTogdGhpcy5zaXplTWFwWyB0aGlzLm56U2l6ZSBdXG4gICAgfTtcbiAgfVxufVxuIiwiaW1wb3J0IHtcbiAgQWZ0ZXJDb250ZW50SW5pdCxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgQ29udGVudENoaWxkcmVuLFxuICBFbGVtZW50UmVmLFxuICBIb3N0QmluZGluZyxcbiAgSW5wdXQsXG4gIE5nWm9uZSxcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG4gIFF1ZXJ5TGlzdCxcbiAgUmVuZGVyZXIyLFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE56VXBkYXRlSG9zdENsYXNzU2VydmljZSB9IGZyb20gJy4uL2NvcmUvc2VydmljZXMvdXBkYXRlLWhvc3QtY2xhc3Muc2VydmljZSc7XG5pbXBvcnQgeyBmaWx0ZXJOb3RFbXB0eU5vZGUsIGlzRW1wdHkgfSBmcm9tICcuLi9jb3JlL3V0aWwvY2hlY2snO1xuaW1wb3J0IHsgdG9Cb29sZWFuIH0gZnJvbSAnLi4vY29yZS91dGlsL2NvbnZlcnQnO1xuaW1wb3J0IHsgTnpXYXZlRGlyZWN0aXZlIH0gZnJvbSAnLi4vY29yZS93YXZlL256LXdhdmUuZGlyZWN0aXZlJztcbmltcG9ydCB7IE56SWNvbkRpcmVjdGl2ZSB9IGZyb20gJy4uL2ljb24vbnotaWNvbi5kaXJlY3RpdmUnO1xuXG5leHBvcnQgdHlwZSBOekJ1dHRvblR5cGUgPSAncHJpbWFyeScgfCAnZGFzaGVkJyB8ICdkYW5nZXInO1xuZXhwb3J0IHR5cGUgTnpCdXR0b25TaGFwZSA9ICdjaXJjbGUnIHwgbnVsbCA7XG5leHBvcnQgdHlwZSBOekJ1dHRvblNpemUgPSAnc21hbGwnIHwgJ2xhcmdlJyB8ICdkZWZhdWx0JyA7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICAgICAgOiAnW256LWJ1dHRvbl0nLFxuICBwcm92aWRlcnMgICAgICAgICAgOiBbIE56VXBkYXRlSG9zdENsYXNzU2VydmljZSBdLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgdGVtcGxhdGVVcmwgICAgICAgIDogJy4vbnotYnV0dG9uLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBOekJ1dHRvbkNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSBfZ2hvc3QgPSBmYWxzZTtcbiAgcHJpdmF0ZSBfc2VhcmNoID0gZmFsc2U7XG4gIHByaXZhdGUgX3R5cGU6IE56QnV0dG9uVHlwZTtcbiAgcHJpdmF0ZSBfc2hhcGU6IE56QnV0dG9uU2hhcGU7XG4gIHByaXZhdGUgX3NpemU6IE56QnV0dG9uU2l6ZTtcbiAgcHJpdmF0ZSBfbG9hZGluZyA9IGZhbHNlO1xuICBwcml2YXRlIF9ibG9jayA9IGZhbHNlO1xuICBwcml2YXRlIGVsOiBIVE1MRWxlbWVudCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICBwcml2YXRlIGljb25FbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgcHJpdmF0ZSBpY29uT25seSA9IGZhbHNlO1xuICBwcml2YXRlIHByZWZpeENscyA9ICdhbnQtYnRuJztcbiAgcHJpdmF0ZSBzaXplTWFwID0geyBsYXJnZTogJ2xnJywgc21hbGw6ICdzbScgfTtcbiAgQFZpZXdDaGlsZCgnY29udGVudEVsZW1lbnQnKSBjb250ZW50RWxlbWVudDogRWxlbWVudFJlZjtcbiAgQENvbnRlbnRDaGlsZHJlbihOekljb25EaXJlY3RpdmUsIHsgcmVhZDogRWxlbWVudFJlZiB9KSBsaXN0T2ZJY29uRWxlbWVudDogUXVlcnlMaXN0PEVsZW1lbnRSZWY+O1xuXG4gIEBJbnB1dCgpXG4gIHNldCBuekJsb2NrKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fYmxvY2sgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICAgIHRoaXMuc2V0Q2xhc3NNYXAoKTtcbiAgfVxuXG4gIGdldCBuekJsb2NrKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9ibG9jaztcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekdob3N0KHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fZ2hvc3QgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICAgIHRoaXMuc2V0Q2xhc3NNYXAoKTtcbiAgfVxuXG4gIGdldCBuekdob3N0KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9naG9zdDtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuelNlYXJjaCh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX3NlYXJjaCA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gICAgdGhpcy5zZXRDbGFzc01hcCgpO1xuICB9XG5cbiAgZ2V0IG56U2VhcmNoKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9zZWFyY2g7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpUeXBlKHZhbHVlOiBOekJ1dHRvblR5cGUpIHtcbiAgICB0aGlzLl90eXBlID0gdmFsdWU7XG4gICAgdGhpcy5zZXRDbGFzc01hcCgpO1xuICB9XG5cbiAgZ2V0IG56VHlwZSgpOiBOekJ1dHRvblR5cGUge1xuICAgIHJldHVybiB0aGlzLl90eXBlO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56U2hhcGUodmFsdWU6IE56QnV0dG9uU2hhcGUpIHtcbiAgICB0aGlzLl9zaGFwZSA9IHZhbHVlO1xuICAgIHRoaXMuc2V0Q2xhc3NNYXAoKTtcbiAgfVxuXG4gIGdldCBuelNoYXBlKCk6IE56QnV0dG9uU2hhcGUge1xuICAgIHJldHVybiB0aGlzLl9zaGFwZTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuelNpemUodmFsdWU6IE56QnV0dG9uU2l6ZSkge1xuICAgIHRoaXMuX3NpemUgPSB2YWx1ZTtcbiAgICB0aGlzLnNldENsYXNzTWFwKCk7XG4gIH1cblxuICBnZXQgbnpTaXplKCk6IE56QnV0dG9uU2l6ZSB7XG4gICAgcmV0dXJuIHRoaXMuX3NpemU7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpMb2FkaW5nKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fbG9hZGluZyA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gICAgdGhpcy5zZXRDbGFzc01hcCgpO1xuICAgIHRoaXMudXBkYXRlSWNvbkRpc3BsYXkodmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56TG9hZGluZygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fbG9hZGluZztcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnYXR0ci5uei13YXZlJykgbnpXYXZlID0gbmV3IE56V2F2ZURpcmVjdGl2ZSh0aGlzLm5nWm9uZSwgdGhpcy5lbGVtZW50UmVmKTtcblxuICB1cGRhdGVJY29uRGlzcGxheSh2YWx1ZTogYm9vbGVhbik6IHZvaWQge1xuICAgIGlmICh0aGlzLmljb25FbGVtZW50KSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuaWNvbkVsZW1lbnQsICdkaXNwbGF5JywgdmFsdWUgPyAnbm9uZScgOiAnaW5saW5lLWJsb2NrJyk7XG4gICAgfVxuICB9XG5cbiAgLyoqIHRlbXAgc29sdXRpb24gc2luY2Ugbm8gbWV0aG9kIGFkZCBjbGFzc01hcCB0byBob3N0IGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvaXNzdWVzLzcyODkgKi9cbiAgc2V0Q2xhc3NNYXAoKTogdm9pZCB7XG4gICAgY29uc3QgY2xhc3NNYXAgPSB7XG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xzfS0ke3RoaXMubnpUeXBlfWAgXSAgICAgICAgICAgICAgICA6IHRoaXMubnpUeXBlLFxuICAgICAgWyBgJHt0aGlzLnByZWZpeENsc30tJHt0aGlzLm56U2hhcGV9YCBdICAgICAgICAgICAgICAgOiB0aGlzLm56U2hhcGUsXG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xzfS0ke3RoaXMuc2l6ZU1hcFsgdGhpcy5uelNpemUgXX1gIF06IHRoaXMuc2l6ZU1hcFsgdGhpcy5uelNpemUgXSxcbiAgICAgIFsgYCR7dGhpcy5wcmVmaXhDbHN9LWxvYWRpbmdgIF0gICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5uekxvYWRpbmcsXG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xzfS1pY29uLW9ubHlgIF0gICAgICAgICAgICAgICAgICAgICA6IHRoaXMuaWNvbk9ubHksXG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xzfS1iYWNrZ3JvdW5kLWdob3N0YCBdICAgICAgICAgICAgICA6IHRoaXMubnpHaG9zdCxcbiAgICAgIFsgYCR7dGhpcy5wcmVmaXhDbHN9LWJsb2NrYCBdICAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5uekJsb2NrLFxuICAgICAgWyBgYW50LWlucHV0LXNlYXJjaC1idXR0b25gIF0gICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLm56U2VhcmNoXG4gICAgfTtcbiAgICB0aGlzLm56VXBkYXRlSG9zdENsYXNzU2VydmljZS51cGRhdGVIb3N0Q2xhc3ModGhpcy5lbCwgY2xhc3NNYXApO1xuICB9XG5cbiAgY2hlY2tDb250ZW50KCk6IHZvaWQge1xuICAgIGNvbnN0IGhhc0ljb24gPSB0aGlzLmxpc3RPZkljb25FbGVtZW50ICYmIHRoaXMubGlzdE9mSWNvbkVsZW1lbnQubGVuZ3RoO1xuICAgIGlmIChoYXNJY29uKSB7XG4gICAgICB0aGlzLm1vdmVJY29uKCk7XG4gICAgfVxuICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlU3R5bGUodGhpcy5jb250ZW50RWxlbWVudC5uYXRpdmVFbGVtZW50LCAnZGlzcGxheScpO1xuICAgIC8qKiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8xMjUzMCAqKi9cbiAgICBpZiAoaXNFbXB0eSh0aGlzLmNvbnRlbnRFbGVtZW50Lm5hdGl2ZUVsZW1lbnQpKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuY29udGVudEVsZW1lbnQubmF0aXZlRWxlbWVudCwgJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgICAgdGhpcy5pY29uT25seSA9ICEhaGFzSWNvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVTdHlsZSh0aGlzLmNvbnRlbnRFbGVtZW50Lm5hdGl2ZUVsZW1lbnQsICdkaXNwbGF5Jyk7XG4gICAgICB0aGlzLmljb25Pbmx5ID0gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuc2V0Q2xhc3NNYXAoKTtcbiAgICB0aGlzLnVwZGF0ZUljb25EaXNwbGF5KHRoaXMubnpMb2FkaW5nKTtcbiAgICB0aGlzLmNkci5kZXRlY3RDaGFuZ2VzKCk7XG4gIH1cblxuICBtb3ZlSWNvbigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5saXN0T2ZJY29uRWxlbWVudCAmJiB0aGlzLmxpc3RPZkljb25FbGVtZW50Lmxlbmd0aCkge1xuICAgICAgY29uc3QgZmlyc3RDaGlsZEVsZW1lbnQgPSB0aGlzLmZpbmRGaXJzdE5vdEVtcHR5Tm9kZSh0aGlzLmNvbnRlbnRFbGVtZW50Lm5hdGl2ZUVsZW1lbnQpO1xuICAgICAgY29uc3QgbGFzdENoaWxkRWxlbWVudCA9IHRoaXMuZmluZExhc3ROb3RFbXB0eU5vZGUodGhpcy5jb250ZW50RWxlbWVudC5uYXRpdmVFbGVtZW50KTtcbiAgICAgIGlmIChmaXJzdENoaWxkRWxlbWVudCAmJiAoZmlyc3RDaGlsZEVsZW1lbnQgPT09IHRoaXMubGlzdE9mSWNvbkVsZW1lbnQuZmlyc3QubmF0aXZlRWxlbWVudCkpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5pbnNlcnRCZWZvcmUodGhpcy5lbCwgZmlyc3RDaGlsZEVsZW1lbnQsIHRoaXMuY29udGVudEVsZW1lbnQubmF0aXZlRWxlbWVudCk7XG4gICAgICAgIHRoaXMuaWNvbkVsZW1lbnQgPSBmaXJzdENoaWxkRWxlbWVudCBhcyBIVE1MRWxlbWVudDtcbiAgICAgIH0gZWxzZSBpZiAobGFzdENoaWxkRWxlbWVudCAmJiAobGFzdENoaWxkRWxlbWVudCA9PT0gdGhpcy5saXN0T2ZJY29uRWxlbWVudC5sYXN0Lm5hdGl2ZUVsZW1lbnQpKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuYXBwZW5kQ2hpbGQodGhpcy5lbCwgbGFzdENoaWxkRWxlbWVudCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZmluZEZpcnN0Tm90RW1wdHlOb2RlKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogTm9kZSB7XG4gICAgY29uc3QgY2hpbGRyZW4gPSBlbGVtZW50LmNoaWxkTm9kZXM7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qgbm9kZSA9IGNoaWxkcmVuLml0ZW0oaSk7XG4gICAgICBpZiAoZmlsdGVyTm90RW1wdHlOb2RlKG5vZGUpKSB7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZpbmRMYXN0Tm90RW1wdHlOb2RlKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogTm9kZSB7XG4gICAgY29uc3QgY2hpbGRyZW4gPSBlbGVtZW50LmNoaWxkTm9kZXM7XG4gICAgZm9yIChsZXQgaSA9IGNoaWxkcmVuLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBjb25zdCBub2RlID0gY2hpbGRyZW4uaXRlbShpKTtcbiAgICAgIGlmIChmaWx0ZXJOb3RFbXB0eU5vZGUobm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwcml2YXRlIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMiwgcHJpdmF0ZSBuelVwZGF0ZUhvc3RDbGFzc1NlcnZpY2U6IE56VXBkYXRlSG9zdENsYXNzU2VydmljZSwgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSkge1xuICB9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xuICAgIHRoaXMuY2hlY2tDb250ZW50KCk7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWwsIHRoaXMucHJlZml4Q2xzKTtcbiAgICB0aGlzLm56V2F2ZS5uZ09uSW5pdCgpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5ueldhdmUubmdPbkRlc3Ryb3koKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgT2JzZXJ2ZXJzTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL29ic2VydmVycyc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE56V2F2ZU1vZHVsZSB9IGZyb20gJy4uL2NvcmUvd2F2ZS9uei13YXZlLm1vZHVsZSc7XG5pbXBvcnQgeyBOekljb25Nb2R1bGUgfSBmcm9tICcuLi9pY29uL256LWljb24ubW9kdWxlJztcblxuaW1wb3J0IHsgTnpCdXR0b25Hcm91cENvbXBvbmVudCB9IGZyb20gJy4vbnotYnV0dG9uLWdyb3VwLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOekJ1dHRvbkNvbXBvbmVudCB9IGZyb20gJy4vbnotYnV0dG9uLmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9ucyAgIDogWyBOekJ1dHRvbkNvbXBvbmVudCwgTnpCdXR0b25Hcm91cENvbXBvbmVudCBdLFxuICBleHBvcnRzICAgICAgICA6IFsgTnpCdXR0b25Db21wb25lbnQsIE56QnV0dG9uR3JvdXBDb21wb25lbnQgXSxcbiAgaW1wb3J0cyAgICAgICAgOiBbIENvbW1vbk1vZHVsZSwgT2JzZXJ2ZXJzTW9kdWxlLCBOeldhdmVNb2R1bGUsIE56SWNvbk1vZHVsZSBdXG59KVxuZXhwb3J0IGNsYXNzIE56QnV0dG9uTW9kdWxlIHtcbn1cbiIsIi8qIHRzbGludDpkaXNhYmxlOm5vLWFueSAqL1xuaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBJbmplY3Rpb25Ub2tlbiwgT3B0aW9uYWwsIFByb3ZpZGVyLCBTa2lwU2VsZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTG9nZ2VyU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoTlpfTE9HR0VSX1NUQVRFKSBwcml2YXRlIF9sb2dnZXJTdGF0ZTogYm9vbGVhbikge31cblxuICBsb2coLi4uYXJnczogYW55W10pOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fbG9nZ2VyU3RhdGUpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKC4uLmFyZ3MpO1xuICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cblxuICB3YXJuKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX2xvZ2dlclN0YXRlKSB7XG4gICAgICAvLyBjb25zb2xlLndhcm4oLi4uYXJncyk7XG4gICAgICBjb25zb2xlLndhcm4uYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cblxuICBlcnJvciguLi5hcmdzOiBhbnlbXSk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9sb2dnZXJTdGF0ZSkge1xuICAgICAgLy8gY29uc29sZS5lcnJvciguLi5hcmdzKTtcbiAgICAgIGNvbnNvbGUuZXJyb3IuYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cblxuICBpbmZvKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX2xvZ2dlclN0YXRlKSB7XG4gICAgICAvLyBjb25zb2xlLmxvZyguLi5hcmdzKTtcbiAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG5cbiAgZGVidWcoLi4uYXJnczogYW55W10pOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fbG9nZ2VyU3RhdGUpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdbTkctWk9SUk8tREVCVUddJywgLi4uYXJncyk7XG4gICAgICBjb25zdCBhcnJzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIFsnW05HLVpPUlJPLURFQlVHXSddLmNvbmNhdChhcnJzKSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBOWl9MT0dHRVJfU1RBVEUgPSBuZXcgSW5qZWN0aW9uVG9rZW48Ym9vbGVhbj4oJ256LWxvZ2dlci1zdGF0ZScpOyAvLyBXaGV0aGVyIHByaW50IHRoZSBsb2dcblxuZXhwb3J0IGZ1bmN0aW9uIExPR0dFUl9TRVJWSUNFX1BST1ZJREVSX0ZBQ1RPUlkoZXhpc3Q6IExvZ2dlclNlcnZpY2UsIGxvZ2dlclN0YXRlOiBib29sZWFuKTogTG9nZ2VyU2VydmljZSB7IHJldHVybiBleGlzdCB8fCBuZXcgTG9nZ2VyU2VydmljZShsb2dnZXJTdGF0ZSk7IH1cblxuZXhwb3J0IGNvbnN0IExPR0dFUl9TRVJWSUNFX1BST1ZJREVSOiBQcm92aWRlciA9IHtcbiAgcHJvdmlkZTogTG9nZ2VyU2VydmljZSxcbiAgdXNlRmFjdG9yeTogTE9HR0VSX1NFUlZJQ0VfUFJPVklERVJfRkFDVE9SWSxcbiAgZGVwczogWyBbIG5ldyBPcHRpb25hbCgpLCBuZXcgU2tpcFNlbGYoKSwgTG9nZ2VyU2VydmljZSBdLCBOWl9MT0dHRVJfU1RBVEUgXVxufTtcbiIsImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IExPR0dFUl9TRVJWSUNFX1BST1ZJREVSLCBOWl9MT0dHRVJfU1RBVEUgfSBmcm9tICcuL2xvZ2dlci5zZXJ2aWNlJztcblxuQE5nTW9kdWxlKHtcbiAgcHJvdmlkZXJzOiBbXG4gICAgeyBwcm92aWRlOiBOWl9MT0dHRVJfU1RBVEUsIHVzZVZhbHVlOiBmYWxzZSB9LFxuICAgIExPR0dFUl9TRVJWSUNFX1BST1ZJREVSLFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBMb2dnZXJNb2R1bGUgeyB9XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIHRvZGF5OiAnw6TCu8KKw6XCpMKpJyxcbiAgbm93OiAnw6bCrcKkw6XCiMK7JyxcbiAgYmFja1RvVG9kYXk6ICfDqMK/wpTDpcKbwp7DpMK7worDpcKkwqknLFxuICBvazogJ8OnwqHCrsOlwq7CmicsXG4gIHRpbWVTZWxlY3Q6ICfDqcKAwonDpsKLwqnDpsKXwrbDqcKXwrQnLFxuICBkYXRlU2VsZWN0OiAnw6nCgMKJw6bCi8Kpw6bCl8Klw6bCnMKfJyxcbiAgY2xlYXI6ICfDpsK4woXDqcKZwqQnLFxuICBtb250aDogJ8OmwpzCiCcsXG4gIHllYXI6ICfDpcK5wrQnLFxuICBwcmV2aW91c01vbnRoOiAnw6TCuMKKw6TCuMKqw6bCnMKIICjDp8K/wrvDqcKhwrXDpMK4worDqcKUwq4pJyxcbiAgbmV4dE1vbnRoOiAnw6TCuMKLw6TCuMKqw6bCnMKIICjDp8K/wrvDqcKhwrXDpMK4wovDqcKUwq4pJyxcbiAgbW9udGhTZWxlY3Q6ICfDqcKAwonDpsKLwqnDpsKcwojDpMK7wr0nLFxuICB5ZWFyU2VsZWN0OiAnw6nCgMKJw6bCi8Kpw6XCucK0w6TCu8K9JyxcbiAgZGVjYWRlU2VsZWN0OiAnw6nCgMKJw6bCi8Kpw6XCucK0w6TCu8KjJyxcbiAgeWVhckZvcm1hdDogJ1lZWVnDpcK5wrQnLFxuICBkYXlGb3JtYXQ6ICdEw6bCl8KlJyxcbiAgZGF0ZUZvcm1hdDogJ1lZWVnDpcK5wrRNw6bCnMKIRMOmwpfCpScsXG4gIGRhdGVUaW1lRm9ybWF0OiAnWVlZWcOlwrnCtE3DpsKcwohEw6bCl8KlIEhIw6bCl8K2bW3DpcKIwoZzc8OnwqfCkicsXG4gIHByZXZpb3VzWWVhcjogJ8OkwrjCisOkwrjCgMOlwrnCtCAoQ29udHJvbMOpwpTCrsOlworCoMOlwrfCpsOmwpbCucOlwpDCkcOpwpTCriknLFxuICBuZXh0WWVhcjogJ8OkwrjCi8OkwrjCgMOlwrnCtCAoQ29udHJvbMOpwpTCrsOlworCoMOlwo/Cs8OmwpbCucOlwpDCkcOpwpTCriknLFxuICBwcmV2aW91c0RlY2FkZTogJ8OkwrjCisOkwrjCgMOlwrnCtMOkwrvCoycsXG4gIG5leHREZWNhZGU6ICfDpMK4wovDpMK4woDDpcK5wrTDpMK7wqMnLFxuICBwcmV2aW91c0NlbnR1cnk6ICfDpMK4worDpMK4woDDpMK4wpbDp8K6wqonLFxuICBuZXh0Q2VudHVyeTogJ8OkwrjCi8OkwrjCgMOkwrjClsOnwrrCqicsXG59O1xuIiwiY29uc3QgbG9jYWxlID0ge1xuICBwbGFjZWhvbGRlcjogJ8Oowq/Ct8OpwoDCicOmwovCqcOmwpfCtsOpwpfCtCcsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7XG4iLCJpbXBvcnQgQ2FsZW5kYXJMb2NhbGUgZnJvbSAnLi4vY2FsZW5kYXIvemhfQ04nO1xuaW1wb3J0IFRpbWVQaWNrZXJMb2NhbGUgZnJvbSAnLi4vdGltZS1waWNrZXIvemhfQ04nO1xuXG5jb25zdCBsb2NhbGUgPSB7XG4gIGxhbmc6IHtcbiAgICBwbGFjZWhvbGRlcjogJ8Oowq/Ct8OpwoDCicOmwovCqcOmwpfCpcOmwpzCnycsXG4gICAgcmFuZ2VQbGFjZWhvbGRlcjogWyfDpcK8woDDpcKnwovDpsKXwqXDpsKcwp8nLCAnw6fCu8KTw6bCncKfw6bCl8Klw6bCnMKfJ10sXG4gICAgLi4uQ2FsZW5kYXJMb2NhbGUsXG4gIH0sXG4gIHRpbWVQaWNrZXJMb2NhbGU6IHtcbiAgICAuLi5UaW1lUGlja2VyTG9jYWxlLFxuICB9LFxufTtcblxuLy8gc2hvdWxkIGFkZCB3aGl0ZXNwYWNlIGJldHdlZW4gY2hhciBpbiBCdXR0b25cbmxvY2FsZS5sYW5nLm9rID0gJ8OnwqHCriDDpcKuwponO1xuXG4vLyBBbGwgc2V0dGluZ3MgYXQ6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2Jsb2IvbWFzdGVyL2NvbXBvbmVudHMvZGF0ZS1waWNrZXIvbG9jYWxlL2V4YW1wbGUuanNvblxuXG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIC8vIE9wdGlvbnMuanN4XG4gIGl0ZW1zX3Blcl9wYWdlOiAnw6bCncKhL8OpwqHCtScsXG4gIGp1bXBfdG86ICfDqMK3wrPDqMKHwrMnLFxuICBqdW1wX3RvX2NvbmZpcm06ICfDp8Khwq7DpcKuwponLFxuICBwYWdlOiAnw6nCocK1JyxcblxuICAvLyBQYWdpbmF0aW9uLmpzeFxuICBwcmV2X3BhZ2U6ICfDpMK4worDpMK4woDDqcKhwrUnLFxuICBuZXh0X3BhZ2U6ICfDpMK4wovDpMK4woDDqcKhwrUnLFxuICBwcmV2XzU6ICfDpcKQwpHDpcKJwo0gNSDDqcKhwrUnLFxuICBuZXh0XzU6ICfDpcKQwpHDpcKQwo4gNSDDqcKhwrUnLFxuICBwcmV2XzM6ICfDpcKQwpHDpcKJwo0gMyDDqcKhwrUnLFxuICBuZXh0XzM6ICfDpcKQwpHDpcKQwo4gMyDDqcKhwrUnLFxufTtcbiIsImltcG9ydCBDYWxlbmRhciBmcm9tICcuL2NhbGVuZGFyL3poX0NOJztcbmltcG9ydCBEYXRlUGlja2VyIGZyb20gJy4vZGF0ZS1waWNrZXIvemhfQ04nO1xuaW1wb3J0IFBhZ2luYXRpb24gZnJvbSAnLi9wYWdpbmF0aW9uL3poX0NOJztcbmltcG9ydCBUaW1lUGlja2VyIGZyb20gJy4vdGltZS1waWNrZXIvemhfQ04nO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGxvY2FsZTogJ3poLWNuJyxcbiAgUGFnaW5hdGlvbixcbiAgRGF0ZVBpY2tlcixcbiAgVGltZVBpY2tlcixcbiAgQ2FsZW5kYXIsXG4gIFRhYmxlOiB7XG4gICAgZmlsdGVyVGl0bGU6ICfDp8KtwpvDqcKAwoknLFxuICAgIGZpbHRlckNvbmZpcm06ICfDp8Khwq7DpcKuwponLFxuICAgIGZpbHRlclJlc2V0OiAnw6nCh8KNw6fCvcKuJyxcbiAgICBlbXB0eVRleHQ6ICfDpsKawoLDpsKXwqDDpsKVwrDDpsKNwq4nLFxuICAgIHNlbGVjdEFsbDogJ8OlwoXCqMOpwoDCicOlwr3Ck8OpwqHCtScsXG4gICAgc2VsZWN0SW52ZXJ0OiAnw6XCj8KNw6nCgMKJw6XCvcKTw6nCocK1JyxcbiAgfSxcbiAgTW9kYWw6IHtcbiAgICBva1RleHQ6ICfDp8Khwq7DpcKuwponLFxuICAgIGNhbmNlbFRleHQ6ICfDpcKPwpbDpsK2wognLFxuICAgIGp1c3RPa1RleHQ6ICfDp8KfwqXDqcKBwpPDpMK6woYnLFxuICB9LFxuICBQb3Bjb25maXJtOiB7XG4gICAgY2FuY2VsVGV4dDogJ8Olwo/ClsOmwrbCiCcsXG4gICAgb2tUZXh0OiAnw6fCocKuw6XCrsKaJyxcbiAgfSxcbiAgVHJhbnNmZXI6IHtcbiAgICBub3RGb3VuZENvbnRlbnQ6ICfDpsKXwqDDpcKMwrnDqcKFwo3Dp8K7wpPDpsKewpwnLFxuICAgIHNlYXJjaFBsYWNlaG9sZGVyOiAnw6jCr8K3w6jCvsKTw6XChcKlw6bCkMKcw6fCtMKiw6XChsKFw6XCrsK5JyxcbiAgICBpdGVtVW5pdDogJ8OpwqHCuScsXG4gICAgaXRlbXNVbml0OiAnw6nCocK5JyxcbiAgfSxcbiAgU2VsZWN0OiB7XG4gICAgbm90Rm91bmRDb250ZW50OiAnw6bCl8Kgw6XCjMK5w6nChcKNw6fCu8KTw6bCnsKcJyxcbiAgfSxcbiAgVXBsb2FkOiB7XG4gICAgdXBsb2FkaW5nOiAnw6bClsKHw6TCu8K2w6TCuMKKw6TCvMKgw6TCuMKtJyxcbiAgICByZW1vdmVGaWxlOiAnw6XCiMKgw6nCmcKkw6bClsKHw6TCu8K2JyxcbiAgICB1cGxvYWRFcnJvcjogJ8OkwrjCisOkwrzCoMOpwpTCmcOowq/CrycsXG4gICAgcHJldmlld0ZpbGU6ICfDqcKiwoTDqMKnwojDpsKWwofDpMK7wrYnLFxuICB9LFxufTtcbiIsImltcG9ydCB7IEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE56STE4bkludGVyZmFjZSB9IGZyb20gJy4vbnotaTE4bi5pbnRlcmZhY2UnO1xuXG5leHBvcnQgY29uc3QgTlpfSTE4TiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxOekkxOG5JbnRlcmZhY2U+KCduei1pMThuJyk7XG4iLCJpbXBvcnQgeyBEYXRlUGlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIE9wdGlvbmFsLCBQcm92aWRlciwgU2tpcFNlbGYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBMb2dnZXJTZXJ2aWNlIH0gZnJvbSAnLi4vY29yZS91dGlsL2xvZ2dlci9sb2dnZXIuc2VydmljZSc7XG5cbmltcG9ydCBwYXJzZSBmcm9tICdkYXRlLWZucy9wYXJzZSc7XG5cbmltcG9ydCB6aF9DTiBmcm9tICcuL2xhbmd1YWdlcy96aF9DTic7XG5pbXBvcnQgeyBOekkxOG5JbnRlcmZhY2UgfSBmcm9tICcuL256LWkxOG4uaW50ZXJmYWNlJztcbmltcG9ydCB7IE5aX0kxOE4gfSBmcm9tICcuL256LWkxOG4udG9rZW4nO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTnpJMThuU2VydmljZSB7XG4gIHByaXZhdGUgX2xvY2FsZTogTnpJMThuSW50ZXJmYWNlO1xuICBwcml2YXRlIF9jaGFuZ2UgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PE56STE4bkludGVyZmFjZT4odGhpcy5fbG9jYWxlKTtcblxuICBjb25zdHJ1Y3RvcihASW5qZWN0KE5aX0kxOE4pIGxvY2FsZTogTnpJMThuSW50ZXJmYWNlLCBwcml2YXRlIF9sb2dnZXI6IExvZ2dlclNlcnZpY2UsIHByaXZhdGUgZGF0ZVBpcGU6IERhdGVQaXBlKSB7XG4gICAgdGhpcy5zZXRMb2NhbGUobG9jYWxlIHx8IHpoX0NOKTtcbiAgfVxuXG4gIGdldCBsb2NhbGVDaGFuZ2UoKTogT2JzZXJ2YWJsZTxOekkxOG5JbnRlcmZhY2U+IHtcbiAgICByZXR1cm4gdGhpcy5fY2hhbmdlLmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgLy8gW05PVEVdIFBlcmZvcm1hbmNlIGlzc3VlOiB0aGlzIG1ldGhvZCBtYXkgY2FsbGVkIGJ5IGV2ZXJ5IGNoYW5nZSBkZXRlY3Rpb25zXG4gIC8vIFRPRE86IGNhY2hlIG1vcmUgZGVlcGx5IHBhdGhzIGZvciBwZXJmb3JtYW5jZVxuICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55ICovXG4gIHRyYW5zbGF0ZShwYXRoOiBzdHJpbmcsIGRhdGE/OiBhbnkpOiBzdHJpbmcge1xuICAgIC8vIHRoaXMuX2xvZ2dlci5kZWJ1ZyhgW056STE4blNlcnZpY2VdIFRyYW5zbGF0aW5nKCR7dGhpcy5fbG9jYWxlLmxvY2FsZX0pOiAke3BhdGh9YCk7XG4gICAgbGV0IGNvbnRlbnQgPSB0aGlzLl9nZXRPYmplY3RQYXRoKHRoaXMuX2xvY2FsZSwgcGF0aCkgYXMgc3RyaW5nO1xuICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKGRhdGEpLmZvckVhY2goKGtleSkgPT4gY29udGVudCA9IGNvbnRlbnQucmVwbGFjZShuZXcgUmVnRXhwKGAlJHtrZXl9JWAsICdnJyksIGRhdGFbIGtleSBdKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9XG4gICAgcmV0dXJuIHBhdGg7XG4gIH1cblxuICAvKipcbiAgICogU2V0L0NoYW5nZSBjdXJyZW50IGxvY2FsZSBnbG9iYWxseSB0aHJvdWdob3V0IHRoZSBXSE9MRSBhcHBsaWNhdGlvblxuICAgKiBbTk9URV0gSWYgY2FsbGVkIGF0IHJ1bnRpbWUsIHJlbmRlcmVkIGludGVyZmFjZSBtYXkgbm90IGNoYW5nZSBhbG9uZyB3aXRoIHRoZSBsb2NhbGUgY2hhbmdlIChiZWNhdXNlIHRoaXMgZG8gbm90IHRyaWdnZXIgYW5vdGhlciByZW5kZXIgc2NoZWR1bGUpXG4gICAqIEBwYXJhbSBsb2NhbGUgVGhlIHRyYW5zbGF0aW5nIGxldHRlcnNcbiAgICovXG4gIHNldExvY2FsZShsb2NhbGU6IE56STE4bkludGVyZmFjZSk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9sb2NhbGUgJiYgdGhpcy5fbG9jYWxlLmxvY2FsZSA9PT0gbG9jYWxlLmxvY2FsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9sb2NhbGUgPSBsb2NhbGU7XG4gICAgdGhpcy5fY2hhbmdlLm5leHQobG9jYWxlKTtcbiAgfVxuXG4gIGdldExvY2FsZSgpOiBOekkxOG5JbnRlcmZhY2Uge1xuICAgIHJldHVybiB0aGlzLl9sb2NhbGU7XG4gIH1cblxuICBnZXRMb2NhbGVJZCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9sb2NhbGUgPyB0aGlzLl9sb2NhbGUubG9jYWxlIDogJyc7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGxvY2FsZSBkYXRhXG4gICAqIEBwYXJhbSBwYXRoIGRvdCBwYXRocyBmb3IgZmluZGluZyBleGlzdCB2YWx1ZSBmcm9tIGxvY2FsZSBkYXRhLCBlZy4gXCJhLmIuY1wiXG4gICAqIEBwYXJhbSBkZWZhdWx0VmFsdWUgZGVmYXVsdCB2YWx1ZSBpZiB0aGUgcmVzdWx0IGlzIG5vdCBcInRydXRoeVwiXG4gICAqL1xuICBnZXRMb2NhbGVEYXRhKHBhdGg/OiBzdHJpbmcsIGRlZmF1bHRWYWx1ZT86IGFueSk6IGFueSB7IC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8tYW55XG4gICAgY29uc3QgcmVzdWx0ID0gcGF0aCA/IHRoaXMuX2dldE9iamVjdFBhdGgodGhpcy5fbG9jYWxlLCBwYXRoKSA6IHRoaXMuX2xvY2FsZTtcbiAgICByZXR1cm4gcmVzdWx0IHx8IGRlZmF1bHRWYWx1ZTtcbiAgfVxuXG4gIGZvcm1hdERhdGUoZGF0ZTogRGF0ZSwgZm9ybWF0Pzogc3RyaW5nLCBsb2NhbGU/OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBkYXRlID8gdGhpcy5kYXRlUGlwZS50cmFuc2Zvcm0oZGF0ZSwgZm9ybWF0LCBudWxsLCBsb2NhbGUgfHwgdGhpcy5nZXRMb2NhbGUoKS5sb2NhbGUpIDogJyc7XG4gIH1cblxuICAvKipcbiAgICogRm9ybWF0IGRhdGUgd2l0aCBjb21wYXRpYmxlIGZvciB0aGUgZm9ybWF0IG9mIG1vbWVudCBhbmQgb3RoZXJzXG4gICAqIFdoeT8gRm9yIG5vdywgd2UgbmVlZCB0byBzdXBwb3J0IHRoZSBleGlzdGluZyBsYW5ndWFnZSBmb3JtYXRzIGluIEFudEQsIGFuZCBBbnREIHVzZXMgdGhlIGRlZmF1bHQgdGVtcG9yYWwgc3ludGF4LlxuICAgKi9cbiAgZm9ybWF0RGF0ZUNvbXBhdGlibGUoZGF0ZTogRGF0ZSwgZm9ybWF0Pzogc3RyaW5nLCBsb2NhbGU/OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmZvcm1hdERhdGUoZGF0ZSwgdGhpcy5jb21wYXREYXRlRm9ybWF0KGZvcm1hdCksIGxvY2FsZSk7XG4gIH1cblxuICBwYXJzZURhdGUodGV4dDogc3RyaW5nKTogRGF0ZSB7XG4gICAgaWYgKCF0ZXh0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiBwYXJzZSh0ZXh0KTtcbiAgfVxuXG4gIHBhcnNlVGltZSh0ZXh0OiBzdHJpbmcpOiBEYXRlIHtcbiAgICBpZiAoIXRleHQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlKGAxOTcwLTAxLTAxICR7dGV4dH1gKTtcbiAgfVxuXG4gIHByaXZhdGUgX2dldE9iamVjdFBhdGgob2JqOiBvYmplY3QsIHBhdGg6IHN0cmluZyk6IHN0cmluZyB8IG9iamVjdCB8IGFueSB7IC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8tYW55XG4gICAgbGV0IHJlcyA9IG9iajtcbiAgICBjb25zdCBwYXRocyA9IHBhdGguc3BsaXQoJy4nKTtcbiAgICBjb25zdCBkZXB0aCA9IHBhdGhzLmxlbmd0aDtcbiAgICBsZXQgaW5kZXggPSAwO1xuICAgIHdoaWxlIChyZXMgJiYgaW5kZXggPCBkZXB0aCkge1xuICAgICAgcmVzID0gcmVzWyBwYXRoc1sgaW5kZXgrKyBdIF07XG4gICAgfVxuICAgIHJldHVybiBpbmRleCA9PT0gZGVwdGggPyByZXMgOiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbXBhdGlibGUgdHJhbnNsYXRlIHRoZSBtb21lbnQtbGlrZSBmb3JtYXQgcGF0dGVybiB0byBhbmd1bGFyJ3MgcGF0dGVyblxuICAgKiBXaHk/IEZvciBub3csIHdlIG5lZWQgdG8gc3VwcG9ydCB0aGUgZXhpc3RpbmcgbGFuZ3VhZ2UgZm9ybWF0cyBpbiBBbnRELCBhbmQgQW50RCB1c2VzIHRoZSBkZWZhdWx0IHRlbXBvcmFsIHN5bnRheC5cbiAgICpcbiAgICogVE9ETzogY29tcGFyZSBhbmQgY29tcGxldGUgYWxsIGZvcm1hdCBwYXR0ZXJuc1xuICAgKiBFYWNoIGZvcm1hdCBkb2NzIGFzIGJlbG93OlxuICAgKiBAbGluayBodHRwczovL21vbWVudGpzLmNvbS9kb2NzLyMvZGlzcGxheWluZy9mb3JtYXQvXG4gICAqIEBsaW5rIGh0dHBzOi8vYW5ndWxhci5pby9hcGkvY29tbW9uL0RhdGVQaXBlI2Rlc2NyaXB0aW9uXG4gICAqIEBwYXJhbSBmb3JtYXQgaW5wdXQgZm9ybWF0IHBhdHRlcm5cbiAgICovXG4gIHByaXZhdGUgY29tcGF0RGF0ZUZvcm1hdChmb3JtYXQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGZvcm1hdCAmJiBmb3JtYXRcbiAgICAucmVwbGFjZSgvWS9nLCAneScpIC8vIG9ubHkgc3VwcG9ydCB5LCB5eSwgeXl5LCB5eXl5XG4gICAgLnJlcGxhY2UoL0QvZywgJ2QnKTsgLy8gZCwgZGQgcmVwcmVzZW50IG9mIEQsIEREIGZvciBtb21lbnRqcywgb3RoZXJzIGFyZSBub3Qgc3VwcG9ydFxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBOWl9MT0NBTEVfU0VSVklDRV9QUk9WSURFUl9GQUNUT1JZKGV4aXN0OiBOekkxOG5TZXJ2aWNlLCBsb2NhbGU6IE56STE4bkludGVyZmFjZSwgbG9nZ2VyOiBMb2dnZXJTZXJ2aWNlLCBkYXRlUGlwZTogRGF0ZVBpcGUpOiBOekkxOG5TZXJ2aWNlIHtcbiAgcmV0dXJuIGV4aXN0IHx8IG5ldyBOekkxOG5TZXJ2aWNlKGxvY2FsZSwgbG9nZ2VyLCBkYXRlUGlwZSk7XG59XG5cbmV4cG9ydCBjb25zdCBOWl9JMThOX1NFUlZJQ0VfUFJPVklERVI6IFByb3ZpZGVyID0ge1xuICBwcm92aWRlICAgOiBOekkxOG5TZXJ2aWNlLFxuICB1c2VGYWN0b3J5OiBOWl9MT0NBTEVfU0VSVklDRV9QUk9WSURFUl9GQUNUT1JZLFxuICBkZXBzICAgICAgOiBbIFsgbmV3IE9wdGlvbmFsKCksIG5ldyBTa2lwU2VsZigpLCBOekkxOG5TZXJ2aWNlIF0sIE5aX0kxOE4sIExvZ2dlclNlcnZpY2UsIERhdGVQaXBlIF1cbn07XG4iLCJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE56STE4blNlcnZpY2UgfSBmcm9tICcuL256LWkxOG4uc2VydmljZSc7XG5cbkBQaXBlKHtcbiAgbmFtZTogJ256STE4bidcbn0pXG5leHBvcnQgY2xhc3MgTnpJMThuUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9sb2NhbGU6IE56STE4blNlcnZpY2UpIHtcbiAgfVxuXG4gIHRyYW5zZm9ybShwYXRoOiBzdHJpbmcsIGtleVZhbHVlPzogb2JqZWN0KTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fbG9jYWxlLnRyYW5zbGF0ZShwYXRoLCBrZXlWYWx1ZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IERhdGVQaXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IExvZ2dlck1vZHVsZSB9IGZyb20gJy4uL2NvcmUvdXRpbC9sb2dnZXIvbG9nZ2VyLm1vZHVsZSc7XG5cbmltcG9ydCB6aF9DTiBmcm9tICcuL2xhbmd1YWdlcy96aF9DTic7XG5pbXBvcnQgeyBOekkxOG5QaXBlIH0gZnJvbSAnLi9uei1pMThuLnBpcGUnO1xuaW1wb3J0IHsgTlpfSTE4Tl9TRVJWSUNFX1BST1ZJREVSIH0gZnJvbSAnLi9uei1pMThuLnNlcnZpY2UnO1xuaW1wb3J0IHsgTlpfSTE4TiB9IGZyb20gJy4vbnotaTE4bi50b2tlbic7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHMgICAgIDogWyBMb2dnZXJNb2R1bGUgXSxcbiAgZGVjbGFyYXRpb25zOiBbIE56STE4blBpcGUgXSxcbiAgZXhwb3J0cyAgICAgOiBbIE56STE4blBpcGUgXSxcbiAgcHJvdmlkZXJzICAgOiBbXG4gICAgeyBwcm92aWRlOiBOWl9JMThOLCB1c2VWYWx1ZTogemhfQ04gfSxcbiAgICBEYXRlUGlwZSxcbiAgICBOWl9JMThOX1NFUlZJQ0VfUFJPVklERVJcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBOekkxOG5Nb2R1bGUge1xufVxuIiwiaW1wb3J0IHtcbiAgZm9yd2FyZFJlZixcbiAgQWZ0ZXJDb250ZW50SW5pdCxcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBIb3N0QmluZGluZyxcbiAgSW5wdXRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBpc05vdE5pbCB9IGZyb20gJy4uL2NvcmUvdXRpbC9jaGVjayc7XG5pbXBvcnQgeyB0b0Jvb2xlYW4gfSBmcm9tICcuLi9jb3JlL3V0aWwvY29udmVydCc7XG5cbmV4cG9ydCB0eXBlIE56UmFkaW9Hcm91cFNpemVUeXBlID0gJ2xhcmdlJyB8ICdkZWZhdWx0JyB8ICdzbWFsbCc7XG5leHBvcnQgdHlwZSBOelJhZGlvQnV0dG9uU3R5bGUgPSAnb3V0bGluZScgfCAnc29saWQnO1xuXG5pbXBvcnQgeyBOelJhZGlvQnV0dG9uQ29tcG9uZW50IH0gZnJvbSAnLi9uei1yYWRpby1idXR0b24uY29tcG9uZW50JztcbmltcG9ydCB7IE56UmFkaW9Db21wb25lbnQgfSBmcm9tICcuL256LXJhZGlvLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICAgICAgOiAnbnotcmFkaW8tZ3JvdXAnLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgdGVtcGxhdGVVcmwgICAgICAgIDogJy4vbnotcmFkaW8tZ3JvdXAuY29tcG9uZW50Lmh0bWwnLFxuICBob3N0ICAgICAgICAgICAgICAgOiB7XG4gICAgJ1tjbGFzcy5hbnQtcmFkaW8tZ3JvdXBdJzogJ3RydWUnXG4gIH0sXG4gIHByb3ZpZGVycyAgICAgICAgICA6IFtcbiAgICB7XG4gICAgICBwcm92aWRlICAgIDogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBOelJhZGlvR3JvdXBDb21wb25lbnQpLFxuICAgICAgbXVsdGkgICAgICA6IHRydWVcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgTnpSYWRpb0dyb3VwQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xuICBwcml2YXRlIF9zaXplOiBOelJhZGlvR3JvdXBTaXplVHlwZSA9ICdkZWZhdWx0JztcbiAgcHJpdmF0ZSBfbmFtZTogc3RyaW5nO1xuICBwcml2YXRlIF9kaXNhYmxlZDogYm9vbGVhbjtcbiAgZWw6IEhUTUxFbGVtZW50ID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG4gIHZhbHVlOiBzdHJpbmc7XG5cbiAgLy8gbmdNb2RlbCBBY2Nlc3NcbiAgb25DaGFuZ2U6IChfOiBzdHJpbmcpID0+IHZvaWQgPSAoKSA9PiBudWxsO1xuICBvblRvdWNoZWQ6ICgpID0+IHZvaWQgPSAoKSA9PiBudWxsO1xuXG4gIHJhZGlvczogQXJyYXk8TnpSYWRpb0NvbXBvbmVudCB8IE56UmFkaW9CdXR0b25Db21wb25lbnQ+ID0gW107XG5cbiAgQElucHV0KClcbiAgc2V0IG56U2l6ZSh2YWx1ZTogTnpSYWRpb0dyb3VwU2l6ZVR5cGUpIHtcbiAgICB0aGlzLl9zaXplID0gdmFsdWU7XG4gIH1cblxuICBnZXQgbnpTaXplKCk6IE56UmFkaW9Hcm91cFNpemVUeXBlIHtcbiAgICByZXR1cm4gdGhpcy5fc2l6ZTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekRpc2FibGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fZGlzYWJsZWQgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICAgIHRoaXMudXBkYXRlRGlzYWJsZWRTdGF0ZSgpO1xuICB9XG5cbiAgZ2V0IG56RGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVkO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56TmFtZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fbmFtZSA9IHZhbHVlO1xuICAgIHRoaXMudXBkYXRlQ2hpbGRyZW5OYW1lKCk7XG4gIH1cblxuICBnZXQgbnpOYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX25hbWU7XG4gIH1cblxuICBASW5wdXQoKSBuekJ1dHRvblN0eWxlOiBOelJhZGlvQnV0dG9uU3R5bGUgPSAnb3V0bGluZSc7XG5cbiAgdXBkYXRlRGlzYWJsZWRTdGF0ZSgpOiB2b2lkIHtcbiAgICBpZiAoaXNOb3ROaWwodGhpcy5uekRpc2FibGVkKSkge1xuICAgICAgdGhpcy5yYWRpb3MuZm9yRWFjaCgocmFkaW8pID0+IHtcbiAgICAgICAgcmFkaW8ubnpEaXNhYmxlZCA9IHRoaXMubnpEaXNhYmxlZDtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZUNoaWxkcmVuTmFtZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5uek5hbWUpIHtcbiAgICAgIHRoaXMucmFkaW9zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgaXRlbS5uYW1lID0gdGhpcy5uek5hbWU7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBzeW5jQ2hlY2tlZFZhbHVlKCk6IHZvaWQge1xuICAgIHRoaXMucmFkaW9zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGl0ZW0ubnpDaGVja2VkID0gaXRlbS5uelZhbHVlID09PSB0aGlzLnZhbHVlO1xuICAgIH0pO1xuICB9XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hbnQtcmFkaW8tZ3JvdXAtbGFyZ2UnKVxuICBnZXQgaXNMYXJnZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5uelNpemUgPT09ICdsYXJnZSc7XG4gIH1cblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmFudC1yYWRpby1ncm91cC1zbWFsbCcpXG4gIGdldCBpc1NtYWxsKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLm56U2l6ZSA9PT0gJ3NtYWxsJztcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW50LXJhZGlvLWdyb3VwLXNvbGlkJylcbiAgZ2V0IGlzU29saWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubnpCdXR0b25TdHlsZSA9PT0gJ3NvbGlkJztcbiAgfVxuXG4gIGFkZFJhZGlvKHJhZGlvOiBOelJhZGlvQ29tcG9uZW50IHwgTnpSYWRpb0J1dHRvbkNvbXBvbmVudCk6IHZvaWQge1xuICAgIHRoaXMucmFkaW9zLnB1c2gocmFkaW8pO1xuICAgIHJhZGlvLm56Q2hlY2tlZCA9IHJhZGlvLm56VmFsdWUgPT09IHRoaXMudmFsdWU7XG4gIH1cblxuICBzZWxlY3RSYWRpbyhyYWRpbzogTnpSYWRpb0NvbXBvbmVudCB8IE56UmFkaW9CdXR0b25Db21wb25lbnQpOiB2b2lkIHtcbiAgICB0aGlzLnVwZGF0ZVZhbHVlKHJhZGlvLm56VmFsdWUsIHRydWUpO1xuICB9XG5cbiAgdXBkYXRlVmFsdWUodmFsdWU6IHN0cmluZywgZW1pdDogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLnN5bmNDaGVja2VkVmFsdWUoKTtcbiAgICBpZiAoZW1pdCkge1xuICAgICAgdGhpcy5vbkNoYW5nZSh2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XG4gIH1cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5zeW5jQ2hlY2tlZFZhbHVlKCk7XG4gICAgdGhpcy51cGRhdGVDaGlsZHJlbk5hbWUoKTtcbiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAgIHRoaXMudXBkYXRlRGlzYWJsZWRTdGF0ZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgd3JpdGVWYWx1ZSh2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy51cGRhdGVWYWx1ZSh2YWx1ZSwgZmFsc2UpO1xuICB9XG5cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKF86IHN0cmluZykgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMub25DaGFuZ2UgPSBmbjtcbiAgfVxuXG4gIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiAoKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5vblRvdWNoZWQgPSBmbjtcbiAgfVxuXG4gIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMubnpEaXNhYmxlZCA9IGlzRGlzYWJsZWQ7XG4gIH1cbn1cbiIsImltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7XG4gIGZvcndhcmRSZWYsXG4gIEFmdGVyVmlld0luaXQsXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgSG9zdExpc3RlbmVyLFxuICBJbmplY3QsXG4gIElucHV0LFxuICBPbkluaXQsXG4gIE9wdGlvbmFsLFxuICBSZW5kZXJlcjIsXG4gIFZpZXdDaGlsZFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBOR19WQUxVRV9BQ0NFU1NPUiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgdG9Cb29sZWFuIH0gZnJvbSAnLi4vY29yZS91dGlsL2NvbnZlcnQnO1xuXG5pbXBvcnQgeyBOelJhZGlvR3JvdXBDb21wb25lbnQgfSBmcm9tICcuL256LXJhZGlvLWdyb3VwLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICAgICAgOiAnW256LXJhZGlvXScsXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxuICB0ZW1wbGF0ZVVybCAgICAgICAgOiAnLi9uei1yYWRpby5jb21wb25lbnQuaHRtbCcsXG4gIGhvc3QgICAgICAgICAgICAgICA6IHtcbiAgICAnW2NsYXNzLmFudC1yYWRpby13cmFwcGVyXScgICAgICAgICA6ICd0cnVlJyxcbiAgICAnW2NsYXNzLmFudC1yYWRpby13cmFwcGVyLWNoZWNrZWRdJyA6ICduekNoZWNrZWQnLFxuICAgICdbY2xhc3MuYW50LXJhZGlvLXdyYXBwZXItZGlzYWJsZWRdJzogJ256RGlzYWJsZWQnXG4gIH0sXG4gIHByb3ZpZGVycyAgICAgICAgICA6IFtcbiAgICB7XG4gICAgICBwcm92aWRlICAgIDogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBOelJhZGlvQ29tcG9uZW50KSxcbiAgICAgIG11bHRpICAgICAgOiB0cnVlXG4gICAgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIE56UmFkaW9Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBBZnRlclZpZXdJbml0IHtcbiAgcHJpdmF0ZSBfY2hlY2tlZCA9IGZhbHNlO1xuICBwcml2YXRlIF9kaXNhYmxlZCA9IGZhbHNlO1xuICBwcml2YXRlIF9hdXRvRm9jdXMgPSBmYWxzZTtcbiAgaXNJbml0ID0gZmFsc2U7XG4gIGNsYXNzTWFwO1xuICBuYW1lOiBzdHJpbmc7XG4gIHByZWZpeENscyA9ICdhbnQtcmFkaW8nO1xuICBAVmlld0NoaWxkKCdpbnB1dEVsZW1lbnQnKSBpbnB1dEVsZW1lbnQ6IEVsZW1lbnRSZWY7XG4gIG9uQ2hhbmdlOiAoXzogYm9vbGVhbikgPT4gdm9pZCA9ICgpID0+IG51bGw7XG4gIG9uVG91Y2hlZDogKCkgPT4gdm9pZCA9ICgpID0+IG51bGw7XG4gIEBJbnB1dCgpIG56VmFsdWU6IHN0cmluZztcblxuICBzZXQgbnpDaGVja2VkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fY2hlY2tlZCA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gICAgdGhpcy5zZXRDbGFzc01hcCgpO1xuICB9XG5cbiAgZ2V0IG56Q2hlY2tlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fY2hlY2tlZDtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekRpc2FibGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fZGlzYWJsZWQgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICAgIHRoaXMuc2V0Q2xhc3NNYXAoKTtcbiAgfVxuXG4gIGdldCBuekRpc2FibGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9kaXNhYmxlZDtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekF1dG9Gb2N1cyh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2F1dG9Gb2N1cyA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gICAgdGhpcy51cGRhdGVBdXRvRm9jdXMoKTtcbiAgfVxuXG4gIGdldCBuekF1dG9Gb2N1cygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fYXV0b0ZvY3VzO1xuICB9XG5cbiAgdXBkYXRlQXV0b0ZvY3VzKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzSW5pdCkge1xuICAgICAgaWYgKHRoaXMubnpBdXRvRm9jdXMpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5pbnB1dEVsZW1lbnQubmF0aXZlRWxlbWVudCwgJ2F1dG9mb2N1cycsICdhdXRvZm9jdXMnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQXR0cmlidXRlKHRoaXMuaW5wdXRFbGVtZW50Lm5hdGl2ZUVsZW1lbnQsICdhdXRvZm9jdXMnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB1cGRhdGVJbnB1dEZvY3VzKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlucHV0RWxlbWVudCkge1xuICAgICAgaWYgKHRoaXMubnpDaGVja2VkKSB7XG4gICAgICAgIGlmICh0aGlzLmRvY3VtZW50LmFjdGl2ZUVsZW1lbnQubm9kZU5hbWUgPT09ICdCT0RZJykge1xuICAgICAgICAgIHRoaXMuaW5wdXRFbGVtZW50Lm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5pbnB1dEVsZW1lbnQubmF0aXZlRWxlbWVudC5ibHVyKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbICckZXZlbnQnIF0pXG4gIG9uQ2xpY2soZTogTW91c2VFdmVudCk6IHZvaWQge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLnNldENsYXNzTWFwKCk7XG4gICAgaWYgKHRoaXMubnpEaXNhYmxlZCB8fCB0aGlzLm56Q2hlY2tlZCkge1xuICAgICAgdGhpcy51cGRhdGVJbnB1dEZvY3VzKCk7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLm56UmFkaW9Hcm91cCkge1xuICAgICAgICB0aGlzLm56UmFkaW9Hcm91cC5zZWxlY3RSYWRpbyh0aGlzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudXBkYXRlVmFsdWUodHJ1ZSk7XG4gICAgICB9XG4gICAgICB0aGlzLnVwZGF0ZUlucHV0Rm9jdXMoKTtcbiAgICB9XG4gIH1cblxuICBvbkJsdXIoKTogdm9pZCB7XG4gICAgdGhpcy5vblRvdWNoZWQoKTtcbiAgICBpZiAodGhpcy5uelJhZGlvR3JvdXApIHtcbiAgICAgIHRoaXMubnpSYWRpb0dyb3VwLm9uVG91Y2hlZCgpO1xuICAgIH1cbiAgfVxuXG4gIHNldENsYXNzTWFwKCk6IHZvaWQge1xuICAgIHRoaXMuY2xhc3NNYXAgPSB7XG4gICAgICBbIHRoaXMucHJlZml4Q2xzIF0gICAgICAgICAgICAgIDogdHJ1ZSxcbiAgICAgIFsgYCR7dGhpcy5wcmVmaXhDbHN9LWNoZWNrZWRgIF0gOiB0aGlzLm56Q2hlY2tlZCxcbiAgICAgIFsgYCR7dGhpcy5wcmVmaXhDbHN9LWRpc2FibGVkYCBdOiB0aGlzLm56RGlzYWJsZWRcbiAgICB9O1xuICB9XG5cbiAgZm9jdXMoKTogdm9pZCB7XG4gICAgdGhpcy5pbnB1dEVsZW1lbnQubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICB9XG5cbiAgYmx1cigpOiB2b2lkIHtcbiAgICB0aGlzLmlucHV0RWxlbWVudC5uYXRpdmVFbGVtZW50LmJsdXIoKTtcbiAgICB0aGlzLm9uQmx1cigpO1xuICB9XG5cbiAgLyogdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueSAqL1xuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBwdWJsaWMgbnpSYWRpb0dyb3VwOiBOelJhZGlvR3JvdXBDb21wb25lbnQsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMiwgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudDogYW55KSB7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5uelJhZGlvR3JvdXApIHtcbiAgICAgIHRoaXMubnpSYWRpb0dyb3VwLmFkZFJhZGlvKHRoaXMpO1xuICAgIH1cbiAgICB0aGlzLnNldENsYXNzTWFwKCk7XG4gIH1cblxuICB1cGRhdGVWYWx1ZSh2YWx1ZTogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMub25DaGFuZ2UodmFsdWUpO1xuICAgIHRoaXMubnpDaGVja2VkID0gdmFsdWU7XG4gICAgdGhpcy5zZXRDbGFzc01hcCgpO1xuICB9XG5cbiAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5uekRpc2FibGVkID0gaXNEaXNhYmxlZDtcbiAgfVxuXG4gIHdyaXRlVmFsdWUodmFsdWU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLm56Q2hlY2tlZCA9IHZhbHVlO1xuICAgIHRoaXMuc2V0Q2xhc3NNYXAoKTtcbiAgfVxuXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46IChfOiBib29sZWFuKSA9PiB7fSk6IHZvaWQge1xuICAgIHRoaXMub25DaGFuZ2UgPSBmbjtcbiAgfVxuXG4gIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiAoKSA9PiB7fSk6IHZvaWQge1xuICAgIHRoaXMub25Ub3VjaGVkID0gZm47XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgdGhpcy5pc0luaXQgPSB0cnVlO1xuICAgIHRoaXMudXBkYXRlQXV0b0ZvY3VzKCk7XG4gICAgdGhpcy51cGRhdGVJbnB1dEZvY3VzKCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgSW5qZWN0LFxuICBPbkluaXQsXG4gIE9wdGlvbmFsLFxuICBSZW5kZXJlcjJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE56UmFkaW9Hcm91cENvbXBvbmVudCB9IGZyb20gJy4vbnotcmFkaW8tZ3JvdXAuY29tcG9uZW50JztcbmltcG9ydCB7IE56UmFkaW9Db21wb25lbnQgfSBmcm9tICcuL256LXJhZGlvLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICAgICAgOiAnW256LXJhZGlvLWJ1dHRvbl0nLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgdGVtcGxhdGVVcmwgICAgICAgIDogJy4vbnotcmFkaW8tYnV0dG9uLmNvbXBvbmVudC5odG1sJyxcbiAgaG9zdCAgICAgICAgICAgICAgIDoge1xuICAgICdbY2xhc3MuYW50LXJhZGlvLWJ1dHRvbi13cmFwcGVyXScgICAgICAgICA6ICd0cnVlJyxcbiAgICAnW2NsYXNzLmFudC1yYWRpby1idXR0b24td3JhcHBlci1jaGVja2VkXScgOiAnbnpDaGVja2VkJyxcbiAgICAnW2NsYXNzLmFudC1yYWRpby1idXR0b24td3JhcHBlci1kaXNhYmxlZF0nOiAnbnpEaXNhYmxlZCdcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBOelJhZGlvQnV0dG9uQ29tcG9uZW50IGV4dGVuZHMgTnpSYWRpb0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIHByZWZpeENscyA9ICdhbnQtcmFkaW8tYnV0dG9uJztcbiAgLyogdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueSAqL1xuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBuelJhZGlvR3JvdXA6IE56UmFkaW9Hcm91cENvbXBvbmVudCwgcmVuZGVyZXI6IFJlbmRlcmVyMiwgQEluamVjdChET0NVTUVOVCkgZG9jdW1lbnQ6IGFueSkge1xuICAgIHN1cGVyKG56UmFkaW9Hcm91cCwgcmVuZGVyZXIsIGRvY3VtZW50KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgTnpSYWRpb0J1dHRvbkNvbXBvbmVudCB9IGZyb20gJy4vbnotcmFkaW8tYnV0dG9uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOelJhZGlvR3JvdXBDb21wb25lbnQgfSBmcm9tICcuL256LXJhZGlvLWdyb3VwLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOelJhZGlvQ29tcG9uZW50IH0gZnJvbSAnLi9uei1yYWRpby5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzICAgICA6IFsgQ29tbW9uTW9kdWxlLCBGb3Jtc01vZHVsZSBdLFxuICBleHBvcnRzICAgICA6IFsgTnpSYWRpb0NvbXBvbmVudCwgTnpSYWRpb0J1dHRvbkNvbXBvbmVudCwgTnpSYWRpb0dyb3VwQ29tcG9uZW50IF0sXG4gIGRlY2xhcmF0aW9uczogWyBOelJhZGlvQ29tcG9uZW50LCBOelJhZGlvQnV0dG9uQ29tcG9uZW50LCBOelJhZGlvR3JvdXBDb21wb25lbnQgXVxufSlcbmV4cG9ydCBjbGFzcyBOelJhZGlvTW9kdWxlIHtcbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIFRlbXBsYXRlUmVmLCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgdG9Cb29sZWFuIH0gZnJvbSAnLi4vY29yZS91dGlsL2NvbnZlcnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICA6ICduei1vcHRpb24nLFxuICB0ZW1wbGF0ZVVybDogJy4vbnotb3B0aW9uLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBOek9wdGlvbkNvbXBvbmVudCB7XG4gIHByaXZhdGUgX2Rpc2FibGVkID0gZmFsc2U7XG4gIHByaXZhdGUgX2N1c3RvbUNvbnRlbnQgPSBmYWxzZTtcbiAgQFZpZXdDaGlsZChUZW1wbGF0ZVJlZikgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPHZvaWQ+O1xuICBASW5wdXQoKSBuekxhYmVsOiBzdHJpbmc7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgQElucHV0KCkgbnpWYWx1ZTogYW55O1xuXG4gIEBJbnB1dCgpXG4gIHNldCBuekRpc2FibGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fZGlzYWJsZWQgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56RGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVkO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56Q3VzdG9tQ29udGVudCh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2N1c3RvbUNvbnRlbnQgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56Q3VzdG9tQ29udGVudCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fY3VzdG9tQ29udGVudDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNOb3ROaWwgfSBmcm9tICcuLi9jb3JlL3V0aWwvY2hlY2snO1xuaW1wb3J0IHsgTnpPcHRpb25Db21wb25lbnQgfSBmcm9tICcuL256LW9wdGlvbi5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICA6ICdbbnotb3B0aW9uLWxpXScsXG4gIHRlbXBsYXRlVXJsOiAnLi9uei1vcHRpb24tbGkuY29tcG9uZW50Lmh0bWwnLFxuICBob3N0ICAgICAgIDoge1xuICAgICdbY2xhc3MuYW50LXNlbGVjdC1kcm9wZG93bi1tZW51LWl0ZW1dJyAgICAgICAgIDogJ3RydWUnLFxuICAgICdbY2xhc3MuYW50LXNlbGVjdC1kcm9wZG93bi1tZW51LWl0ZW0tc2VsZWN0ZWRdJzogJ3NlbGVjdGVkICYmICFuek9wdGlvbi5uekRpc2FibGVkJyxcbiAgICAnW2NsYXNzLmFudC1zZWxlY3QtZHJvcGRvd24tbWVudS1pdGVtLWRpc2FibGVkXSc6ICduek9wdGlvbi5uekRpc2FibGVkJyxcbiAgICAnW2NsYXNzLmFudC1zZWxlY3QtZHJvcGRvd24tbWVudS1pdGVtLWFjdGl2ZV0nICA6ICdhY3RpdmUgJiYgIW56T3B0aW9uLm56RGlzYWJsZWQgJiYgbnpTaG93QWN0aXZlICYmICFzZWxlY3RlZCcsXG4gICAgJ1thdHRyLnVuc2VsZWN0YWJsZV0nICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnXCJ1bnNlbGVjdGFibGVcIicsXG4gICAgJ1tzdHlsZS51c2VyLXNlbGVjdF0nICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnXCJub25lXCInXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgTnpPcHRpb25MaUNvbXBvbmVudCB7XG4gIGVsOiBIVE1MRWxlbWVudCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICBzZWxlY3RlZCA9IGZhbHNlO1xuICBhY3RpdmUgPSBmYWxzZTtcbiAgQElucHV0KCkgbnpPcHRpb246IE56T3B0aW9uQ29tcG9uZW50O1xuICBASW5wdXQoKSBuelNob3dBY3RpdmUgPSB0cnVlO1xuICBASW5wdXQoKSBuek1vZGUgPSAnZGVmYXVsdCc7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgQElucHV0KCkgY29tcGFyZVdpdGg6IChvMTogYW55LCBvMjogYW55KSA9PiBib29sZWFuO1xuXG4gIEBJbnB1dCgpXG4gIHNldCBuekFjdGl2ZU9wdGlvbih2YWx1ZTogTnpPcHRpb25Db21wb25lbnQpIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMuYWN0aXZlID0gdGhpcy5jb21wYXJlV2l0aCh2YWx1ZS5uelZhbHVlLCB0aGlzLm56T3B0aW9uLm56VmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIEBJbnB1dCgpXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgc2V0IG56TGlzdE9mU2VsZWN0ZWRWYWx1ZSh2YWx1ZUxpc3Q6IGFueVtdKSB7XG4gICAgdGhpcy5zZWxlY3RlZCA9IGlzTm90TmlsKHZhbHVlTGlzdC5maW5kKHYgPT4gdGhpcy5jb21wYXJlV2l0aCh2LCB0aGlzLm56T3B0aW9uLm56VmFsdWUpKSk7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHtcbiAgfVxufVxuIiwiLyogdHNsaW50OmRpc2FibGU6bm8tYW55ICovXG5pbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtLCBRdWVyeUxpc3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE56T3B0aW9uR3JvdXBDb21wb25lbnQgfSBmcm9tICcuL256LW9wdGlvbi1ncm91cC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpPcHRpb25Db21wb25lbnQgfSBmcm9tICcuL256LW9wdGlvbi5jb21wb25lbnQnO1xuXG5leHBvcnQgdHlwZSBURmlsdGVyT3B0aW9uID0gKGlucHV0Pzogc3RyaW5nLCBvcHRpb24/OiBOek9wdGlvbkNvbXBvbmVudCkgPT4gYm9vbGVhbjtcblxuLy8gVE9ETzogY2FuIG5vdCBkeW5hbWljIGNoYW5nZSBwaXBlIHB1cmUgeWV0XG5AUGlwZSh7IG5hbWU6ICduekZpbHRlck9wdGlvblBpcGUnIH0pXG5leHBvcnQgY2xhc3MgTnpPcHRpb25QaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShvcHRpb25zOiBOek9wdGlvbkNvbXBvbmVudFtdIHwgUXVlcnlMaXN0PE56T3B0aW9uQ29tcG9uZW50PiwgaW5wdXQ6IHN0cmluZywgZmlsdGVyT3B0aW9uOiBURmlsdGVyT3B0aW9uLCBzZXJ2ZXJTZWFyY2g6IGJvb2xlYW4pOiBOek9wdGlvbkNvbXBvbmVudFtdIHwgUXVlcnlMaXN0PE56T3B0aW9uQ29tcG9uZW50PiB7XG4gICAgaWYgKHNlcnZlclNlYXJjaCB8fCAhaW5wdXQpIHtcbiAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKG9wdGlvbnMgYXMgTnpPcHRpb25Db21wb25lbnRbXSkuZmlsdGVyKG8gPT4gZmlsdGVyT3B0aW9uKGlucHV0LCBvKSk7XG4gICAgfVxuICB9XG59XG5cbkBQaXBlKHsgbmFtZTogJ256U3ViRmlsdGVyT3B0aW9uUGlwZScgfSlcbmV4cG9ydCBjbGFzcyBOelN1Yk9wdGlvblBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKGdyb3VwczogTnpPcHRpb25Hcm91cENvbXBvbmVudFtdIHwgUXVlcnlMaXN0PE56T3B0aW9uR3JvdXBDb21wb25lbnQ+LCBpbnB1dDogc3RyaW5nLCBmaWx0ZXJPcHRpb246IFRGaWx0ZXJPcHRpb24sIHNlcnZlclNlYXJjaDogYm9vbGVhbik6IE56T3B0aW9uR3JvdXBDb21wb25lbnRbXSB8IFF1ZXJ5TGlzdDxOek9wdGlvbkdyb3VwQ29tcG9uZW50PiB7XG4gICAgaWYgKHNlcnZlclNlYXJjaCB8fCAhaW5wdXQpIHtcbiAgICAgIHJldHVybiBncm91cHM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoZ3JvdXBzIGFzIE56T3B0aW9uR3JvdXBDb21wb25lbnRbXSkuZmlsdGVyKGcgPT4ge1xuICAgICAgICByZXR1cm4gZy5saXN0T2ZOek9wdGlvbkNvbXBvbmVudC5zb21lKG8gPT4gZmlsdGVyT3B0aW9uKGlucHV0LCBvKSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRGaWx0ZXJPcHRpb24oaW5wdXQ6IHN0cmluZywgb3B0aW9uOiBOek9wdGlvbkNvbXBvbmVudCk6IGJvb2xlYW4ge1xuICBpZiAob3B0aW9uICYmIG9wdGlvbi5uekxhYmVsKSB7XG4gICAgcmV0dXJuIG9wdGlvbi5uekxhYmVsLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihpbnB1dC50b0xvd2VyQ2FzZSgpKSA+IC0xO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgRE9XTl9BUlJPVywgRU5URVIsIFVQX0FSUk9XIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2tleWNvZGVzJztcbmltcG9ydCB7XG4gIEFmdGVyQ29udGVudEluaXQsXG4gIENvbXBvbmVudCxcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT25EZXN0cm95LFxuICBPdXRwdXQsXG4gIFF1ZXJ5TGlzdCxcbiAgVmlld0NoaWxkcmVuXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNOb3ROaWwgfSBmcm9tICcuLi9jb3JlL3V0aWwvY2hlY2snO1xuaW1wb3J0IHsgTnpPcHRpb25Hcm91cENvbXBvbmVudCB9IGZyb20gJy4vbnotb3B0aW9uLWdyb3VwLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOek9wdGlvbkNvbXBvbmVudCB9IGZyb20gJy4vbnotb3B0aW9uLmNvbXBvbmVudCc7XG5cbmltcG9ydCB7IG1lcmdlLCBTdWJqZWN0LCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE56T3B0aW9uTGlDb21wb25lbnQgfSBmcm9tICcuL256LW9wdGlvbi1saS5jb21wb25lbnQnO1xuaW1wb3J0IHsgZGVmYXVsdEZpbHRlck9wdGlvbiwgTnpPcHRpb25QaXBlLCBURmlsdGVyT3B0aW9uIH0gZnJvbSAnLi9uei1vcHRpb24ucGlwZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICAgICAgOiAnW256LW9wdGlvbi1jb250YWluZXJdJyxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG4gIHRlbXBsYXRlVXJsICAgICAgICA6ICcuL256LW9wdGlvbi1jb250YWluZXIuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIE56T3B0aW9uQ29udGFpbmVyQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95IHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICBwcml2YXRlIF9saXN0T2ZTZWxlY3RlZFZhbHVlOiBhbnlbXTtcbiAgcHJpdmF0ZSBfc2VhcmNoVmFsdWU6IHN0cmluZztcbiAgaXNJbml0ID0gZmFsc2U7XG4gIGlzQWRkVGFnT3B0aW9uRGlzcGxheSA9IGZhbHNlO1xuICBsaXN0T2ZBbGxUZW1wbGF0ZU9wdGlvbjogTnpPcHRpb25Db21wb25lbnRbXSA9IFtdO1xuICBvcHRpb25TdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgZ3JvdXBTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgbGlzdE9mVGFnT3B0aW9uOiBOek9wdGlvbkNvbXBvbmVudFtdID0gW107XG4gIGxpc3RPZkZpbHRlck9wdGlvbjogTnpPcHRpb25Db21wb25lbnRbXSA9IFtdO1xuICBhY3RpdmF0ZWRPcHRpb246IE56T3B0aW9uQ29tcG9uZW50O1xuICAvKiogY2FuIG5vdCB1c2UgVmlld0NoaWxkIHNpbmNlIGl0IHdpbGwgbWF0Y2ggc3ViIG9wdGlvbnMgaW4gb3B0aW9uIGdyb3VwICoqL1xuICBAVmlld0NoaWxkcmVuKE56T3B0aW9uTGlDb21wb25lbnQpIGxpc3RPZk56T3B0aW9uTGlDb21wb25lbnQ6IFF1ZXJ5TGlzdDxOek9wdGlvbkxpQ29tcG9uZW50PjtcbiAgQElucHV0KCkgbGlzdE9mTnpPcHRpb25Db21wb25lbnQ6IFF1ZXJ5TGlzdDxOek9wdGlvbkNvbXBvbmVudD47XG4gIEBJbnB1dCgpIGxpc3RPZk56T3B0aW9uR3JvdXBDb21wb25lbnQ6IFF1ZXJ5TGlzdDxOek9wdGlvbkdyb3VwQ29tcG9uZW50PjtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICBAT3V0cHV0KCkgbnpMaXN0T2ZTZWxlY3RlZFZhbHVlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnlbXT4oKTtcbiAgQE91dHB1dCgpIG56TGlzdE9mVGVtcGxhdGVPcHRpb25DaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPE56T3B0aW9uQ29tcG9uZW50W10+KCk7XG4gIEBPdXRwdXQoKSBuekNsaWNrT3B0aW9uID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuICBAT3V0cHV0KCkgbnpTY3JvbGxUb0JvdHRvbSA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcbiAgQElucHV0KCkgbnpNb2RlID0gJ2RlZmF1bHQnO1xuICBASW5wdXQoKSBuelNlcnZlclNlYXJjaCA9IGZhbHNlO1xuICBASW5wdXQoKSBuekZpbHRlck9wdGlvbjogVEZpbHRlck9wdGlvbiA9IGRlZmF1bHRGaWx0ZXJPcHRpb247XG4gIEBJbnB1dCgpIG56TWF4TXVsdGlwbGVDb3VudCA9IEluZmluaXR5O1xuICBASW5wdXQoKSBuek5vdEZvdW5kQ29udGVudDogc3RyaW5nO1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gIEBJbnB1dCgpIGNvbXBhcmVXaXRoID0gKG8xOiBhbnksIG8yOiBhbnkpID0+IG8xID09PSBvMjtcblxuICBASW5wdXQoKVxuICBzZXQgbnpTZWFyY2hWYWx1ZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fc2VhcmNoVmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLnVwZGF0ZUFkZFRhZ09wdGlvbkRpc3BsYXkoKTtcbiAgICB0aGlzLnVwZGF0ZUxpc3RPZkZpbHRlck9wdGlvbigpO1xuICB9XG5cbiAgZ2V0IG56U2VhcmNoVmFsdWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fc2VhcmNoVmFsdWU7XG4gIH1cblxuICBASW5wdXQoKVxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gIHNldCBuekxpc3RPZlNlbGVjdGVkVmFsdWUodmFsdWU6IGFueVtdKSB7XG4gICAgaWYgKHRoaXMuX2xpc3RPZlNlbGVjdGVkVmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICB0aGlzLl9saXN0T2ZTZWxlY3RlZFZhbHVlID0gdmFsdWU7XG4gICAgICAvKiogc2hvdWxkIGNsZWFyIGFjdGl2ZWRPcHRpb24gd2hlbiBsaXN0T2ZTZWxlY3RlZFZhbHVlIGNoYW5nZSAqKi9cbiAgICAgIHRoaXMuY2xlYXJBY3RpdmF0ZWRPcHRpb24oKTtcbiAgICAgIHRoaXMucmVmcmVzaEFsbE9wdGlvblN0YXR1cyhmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICBnZXQgbnpMaXN0T2ZTZWxlY3RlZFZhbHVlKCk6IGFueVtdIHtcbiAgICByZXR1cm4gdGhpcy5fbGlzdE9mU2VsZWN0ZWRWYWx1ZTtcbiAgfVxuXG4gIGFkZFRhZ09wdGlvbigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5uekxpc3RPZlNlbGVjdGVkVmFsdWUubGVuZ3RoIDwgdGhpcy5uek1heE11bHRpcGxlQ291bnQpIHtcbiAgICAgIHRoaXMubnpMaXN0T2ZTZWxlY3RlZFZhbHVlID0gWyAuLi50aGlzLm56TGlzdE9mU2VsZWN0ZWRWYWx1ZSwgdGhpcy5uelNlYXJjaFZhbHVlIF07XG4gICAgICB0aGlzLm56TGlzdE9mU2VsZWN0ZWRWYWx1ZUNoYW5nZS5lbWl0KHRoaXMubnpMaXN0T2ZTZWxlY3RlZFZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBjbGlja09wdGlvbihvcHRpb246IE56T3B0aW9uQ29tcG9uZW50LCBpc1ByZXNzRW50ZXI6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLnVwZGF0ZVNlbGVjdGVkT3B0aW9uKG9wdGlvbiwgaXNQcmVzc0VudGVyKTtcbiAgICB0aGlzLm56Q2xpY2tPcHRpb24uZW1pdCgpO1xuICB9XG5cbiAgb25LZXlEb3duVWwoZTogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgIGlmIChbIFVQX0FSUk9XLCBET1dOX0FSUk9XLCBFTlRFUiBdLmluZGV4T2YoZS5rZXlDb2RlKSA+IC0xKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBjb25zdCBhY3RpdmVJbmRleCA9IHRoaXMubGlzdE9mRmlsdGVyT3B0aW9uLmZpbmRJbmRleChpdGVtID0+IGl0ZW0gPT09IHRoaXMuYWN0aXZhdGVkT3B0aW9uKTtcbiAgICAgIGlmIChlLmtleUNvZGUgPT09IFVQX0FSUk9XKSB7XG4gICAgICAgIC8vIGFycm93IHVwXG4gICAgICAgIGNvbnN0IHByZUluZGV4ID0gYWN0aXZlSW5kZXggPiAwID8gKGFjdGl2ZUluZGV4IC0gMSkgOiAodGhpcy5saXN0T2ZGaWx0ZXJPcHRpb24ubGVuZ3RoIC0gMSk7XG4gICAgICAgIHRoaXMuc2V0QWN0aXZlT3B0aW9uKHRoaXMubGlzdE9mRmlsdGVyT3B0aW9uWyBwcmVJbmRleCBdKTtcbiAgICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSBET1dOX0FSUk9XKSB7XG4gICAgICAgIC8vIGFycm93IGRvd25cbiAgICAgICAgY29uc3QgbmV4dEluZGV4ID0gYWN0aXZlSW5kZXggPCB0aGlzLmxpc3RPZkZpbHRlck9wdGlvbi5sZW5ndGggLSAxID8gKGFjdGl2ZUluZGV4ICsgMSkgOiAwO1xuICAgICAgICB0aGlzLnNldEFjdGl2ZU9wdGlvbih0aGlzLmxpc3RPZkZpbHRlck9wdGlvblsgbmV4dEluZGV4IF0pO1xuICAgICAgfSBlbHNlIGlmIChlLmtleUNvZGUgPT09IEVOVEVSKSB7XG4gICAgICAgIC8vIGVudGVyXG4gICAgICAgIGlmICh0aGlzLmlzVGFnc01vZGUpIHtcbiAgICAgICAgICBpZiAoIXRoaXMuaXNBZGRUYWdPcHRpb25EaXNwbGF5KSB7XG4gICAgICAgICAgICB0aGlzLmNsaWNrT3B0aW9uKHRoaXMuYWN0aXZhdGVkT3B0aW9uLCB0cnVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGRUYWdPcHRpb24oKTtcbiAgICAgICAgICAgIHRoaXMubnpDbGlja09wdGlvbi5lbWl0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuY2xpY2tPcHRpb24odGhpcy5hY3RpdmF0ZWRPcHRpb24sIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmVzZXRBY3RpdmVPcHRpb24oKTogdm9pZCB7XG4gICAgY29uc3QgZmlyc3RBY3RpdmVPcHRpb24gPSB0aGlzLmxpc3RPZkFsbFRlbXBsYXRlT3B0aW9uLmNvbmNhdCh0aGlzLmxpc3RPZlRhZ09wdGlvbikuZmluZChpdGVtID0+IHRoaXMuY29tcGFyZVdpdGgoaXRlbS5uelZhbHVlLCB0aGlzLm56TGlzdE9mU2VsZWN0ZWRWYWx1ZVsgMCBdKSk7XG4gICAgdGhpcy5zZXRBY3RpdmVPcHRpb24oZmlyc3RBY3RpdmVPcHRpb24pO1xuICB9XG5cbiAgY2xlYXJBY3RpdmF0ZWRPcHRpb24oKTogdm9pZCB7XG4gICAgdGhpcy5zZXRBY3RpdmVPcHRpb24obnVsbCk7XG4gIH1cblxuICBzZXRBY3RpdmVPcHRpb24ob3B0aW9uOiBOek9wdGlvbkNvbXBvbmVudCwgc2Nyb2xsOiBib29sZWFuID0gdHJ1ZSk6IHZvaWQge1xuICAgIHRoaXMuYWN0aXZhdGVkT3B0aW9uID0gb3B0aW9uO1xuICAgIGlmIChzY3JvbGwpIHtcbiAgICAgIHRoaXMuc2Nyb2xsSW50b1ZpZXcoKTtcbiAgICB9XG4gIH1cblxuICBzY3JvbGxJbnRvVmlldygpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5saXN0T2ZOek9wdGlvbkxpQ29tcG9uZW50ICYmIHRoaXMubGlzdE9mTnpPcHRpb25MaUNvbXBvbmVudC5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IHRhcmdldE9wdGlvbiA9IHRoaXMubGlzdE9mTnpPcHRpb25MaUNvbXBvbmVudC5maW5kKG8gPT4gby5uek9wdGlvbiA9PT0gdGhpcy5hY3RpdmF0ZWRPcHRpb24pO1xuICAgICAgLyogdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXN0cmluZy1saXRlcmFsICovXG4gICAgICBpZiAodGFyZ2V0T3B0aW9uICYmIHRhcmdldE9wdGlvbi5lbCAmJiB0YXJnZXRPcHRpb24uZWxbICdzY3JvbGxJbnRvVmlld0lmTmVlZGVkJyBdKSB7XG4gICAgICAgIC8qIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1zdHJpbmctbGl0ZXJhbCAqL1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRhcmdldE9wdGlvbi5lbFsgJ3Njcm9sbEludG9WaWV3SWZOZWVkZWQnIF0oZmFsc2UpLCAxNTApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZVNlbGVjdGVkT3B0aW9uKG9wdGlvbjogTnpPcHRpb25Db21wb25lbnQsIGlzUHJlc3NFbnRlcjogYm9vbGVhbik6IHZvaWQge1xuICAgIC8qKiB1cGRhdGUgbGlzdE9mU2VsZWN0ZWRPcHRpb24gLT4gdXBkYXRlIG56TGlzdE9mU2VsZWN0ZWRWYWx1ZSAtPiBlbWl0IG56TGlzdE9mU2VsZWN0ZWRWYWx1ZUNoYW5nZSAqKi9cbiAgICBpZiAob3B0aW9uICYmICFvcHRpb24ubnpEaXNhYmxlZCkge1xuICAgICAgbGV0IGNoYW5nZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuc2V0QWN0aXZlT3B0aW9uKG9wdGlvbik7XG4gICAgICBsZXQgbGlzdE9mU2VsZWN0ZWRWYWx1ZSA9IFsgLi4udGhpcy5uekxpc3RPZlNlbGVjdGVkVmFsdWUgXTtcbiAgICAgIGlmICh0aGlzLmlzTXVsdGlwbGVPclRhZ3MpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0VmFsdWUgPSBsaXN0T2ZTZWxlY3RlZFZhbHVlLmZpbmQobyA9PiB0aGlzLmNvbXBhcmVXaXRoKG8sIG9wdGlvbi5uelZhbHVlKSk7XG4gICAgICAgIGlmIChpc05vdE5pbCh0YXJnZXRWYWx1ZSkpIHtcbiAgICAgICAgICBpZiAoIWlzUHJlc3NFbnRlcikge1xuICAgICAgICAgICAgLyoqIHNob3VsZCBub3QgdG9nZ2xlIG9wdGlvbiB3aGVuIHByZXNzIGVudGVyICoqL1xuICAgICAgICAgICAgbGlzdE9mU2VsZWN0ZWRWYWx1ZS5zcGxpY2UobGlzdE9mU2VsZWN0ZWRWYWx1ZS5pbmRleE9mKHRhcmdldFZhbHVlKSwgMSk7XG4gICAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5uekxpc3RPZlNlbGVjdGVkVmFsdWUubGVuZ3RoIDwgdGhpcy5uek1heE11bHRpcGxlQ291bnQpIHtcbiAgICAgICAgICBsaXN0T2ZTZWxlY3RlZFZhbHVlLnB1c2gob3B0aW9uLm56VmFsdWUpO1xuICAgICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLmNvbXBhcmVXaXRoKGxpc3RPZlNlbGVjdGVkVmFsdWVbIDAgXSwgb3B0aW9uLm56VmFsdWUpKSB7XG4gICAgICAgIGxpc3RPZlNlbGVjdGVkVmFsdWUgPSBbIG9wdGlvbi5uelZhbHVlIF07XG4gICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgLyoqIHVwZGF0ZSBzZWxlY3RlZFZhbHVlcyB3aGVuIGNsaWNrIG9wdGlvbiAqKi9cbiAgICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgIHRoaXMuX2xpc3RPZlNlbGVjdGVkVmFsdWUgPSBsaXN0T2ZTZWxlY3RlZFZhbHVlO1xuICAgICAgICB0aGlzLm56TGlzdE9mU2VsZWN0ZWRWYWx1ZUNoYW5nZS5lbWl0KHRoaXMubnpMaXN0T2ZTZWxlY3RlZFZhbHVlKTtcbiAgICAgICAgaWYgKHRoaXMuaXNUYWdzTW9kZSkge1xuICAgICAgICAgIHRoaXMucmVmcmVzaEFsbE9wdGlvblN0YXR1cyhmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZWZyZXNoTGlzdE9mVGFnT3B0aW9uKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzVGFnc01vZGUpIHtcbiAgICAgIC8qKiByZWZyZXNoIHRhZ3Mgb3B0aW9uICoqL1xuICAgICAgY29uc3QgbGlzdE9mVGFnc09wdGlvbiA9IFtdO1xuICAgICAgdGhpcy5uekxpc3RPZlNlbGVjdGVkVmFsdWUuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICAgIGNvbnN0IGV4aXN0ZWRPcHRpb24gPSB0aGlzLmxpc3RPZkFsbFRlbXBsYXRlT3B0aW9uLmZpbmQobyA9PiB0aGlzLmNvbXBhcmVXaXRoKG8ubnpWYWx1ZSwgdmFsdWUpKTtcbiAgICAgICAgaWYgKCFleGlzdGVkT3B0aW9uKSB7XG4gICAgICAgICAgY29uc3QgbnpPcHRpb25Db21wb25lbnQgPSBuZXcgTnpPcHRpb25Db21wb25lbnQoKTtcbiAgICAgICAgICBuek9wdGlvbkNvbXBvbmVudC5uelZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgbnpPcHRpb25Db21wb25lbnQubnpMYWJlbCA9IHZhbHVlO1xuICAgICAgICAgIGxpc3RPZlRhZ3NPcHRpb24ucHVzaChuek9wdGlvbkNvbXBvbmVudCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdGhpcy5saXN0T2ZUYWdPcHRpb24gPSBsaXN0T2ZUYWdzT3B0aW9uO1xuICAgIH1cblxuICB9XG5cbiAgcmVmcmVzaExpc3RPZkFsbFRlbXBsYXRlT3B0aW9uKCk6IHZvaWQge1xuICAgIHRoaXMubGlzdE9mQWxsVGVtcGxhdGVPcHRpb24gPSB0aGlzLmxpc3RPZk56T3B0aW9uQ29tcG9uZW50LnRvQXJyYXkoKS5jb25jYXQodGhpcy5saXN0T2ZOek9wdGlvbkdyb3VwQ29tcG9uZW50LnRvQXJyYXkoKS5yZWR1Y2UoKHByZSwgY3VyKSA9PiBbIC4uLnByZSwgLi4uY3VyLmxpc3RPZk56T3B0aW9uQ29tcG9uZW50LnRvQXJyYXkoKSBdLCBbXSkpO1xuICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gdGhpcy5uekxpc3RPZlRlbXBsYXRlT3B0aW9uQ2hhbmdlLmVtaXQodGhpcy5saXN0T2ZBbGxUZW1wbGF0ZU9wdGlvbikpO1xuICB9XG5cbiAgcmVmcmVzaEFsbE9wdGlvblN0YXR1cyhpc1RlbXBsYXRlT3B0aW9uQ2hhbmdlOiBib29sZWFuKTogdm9pZCB7XG4gICAgLyoqIHVwZGF0ZSBuekxpc3RPZlNlbGVjdGVkVmFsdWUgfCB1cGRhdGUgb3B0aW9uIGxpc3QgLT4gdXBkYXRlIGxpc3RPZkFsbFRlbXBsYXRlT3B0aW9uIC0+IHVwZGF0ZSBsaXN0T2ZTZWxlY3RlZE9wdGlvbiAtPiB1cGRhdGUgYWN0aXZhdGVkT3B0aW9uICoqL1xuICAgIGlmICh0aGlzLmlzSW5pdCkge1xuICAgICAgaWYgKGlzVGVtcGxhdGVPcHRpb25DaGFuZ2UpIHtcbiAgICAgICAgdGhpcy5yZWZyZXNoTGlzdE9mQWxsVGVtcGxhdGVPcHRpb24oKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucmVmcmVzaExpc3RPZlRhZ09wdGlvbigpO1xuICAgICAgdGhpcy51cGRhdGVMaXN0T2ZGaWx0ZXJPcHRpb24oKTtcbiAgICAgIHRoaXMudXBkYXRlQWRkVGFnT3B0aW9uRGlzcGxheSgpO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZUxpc3RPZkZpbHRlck9wdGlvbigpOiB2b2lkIHtcbiAgICB0aGlzLmxpc3RPZkZpbHRlck9wdGlvbiA9IG5ldyBOek9wdGlvblBpcGUoKS50cmFuc2Zvcm0odGhpcy5saXN0T2ZBbGxUZW1wbGF0ZU9wdGlvbi5jb25jYXQodGhpcy5saXN0T2ZUYWdPcHRpb24pLCB0aGlzLm56U2VhcmNoVmFsdWUsIHRoaXMubnpGaWx0ZXJPcHRpb24sIHRoaXMubnpTZXJ2ZXJTZWFyY2gpIGFzIE56T3B0aW9uQ29tcG9uZW50W107XG4gICAgaWYgKHRoaXMubnpTZWFyY2hWYWx1ZSkge1xuICAgICAgdGhpcy5zZXRBY3RpdmVPcHRpb24odGhpcy5saXN0T2ZGaWx0ZXJPcHRpb25bIDAgXSk7XG4gICAgfVxuICB9XG5cbiAgLyoqIHdhdGNoIG9wdGlvbnMgY2hhbmdlIGluIG9wdGlvbiBncm91cCAqKi9cbiAgd2F0Y2hTdWJPcHRpb25DaGFuZ2VzKCk6IHZvaWQge1xuICAgIHRoaXMudW5zdWJzY3JpYmVPcHRpb24oKTtcbiAgICBsZXQgb3B0aW9uQ2hhbmdlcyQgPSBtZXJnZShcbiAgICAgIG5ldyBTdWJqZWN0KCkuYXNPYnNlcnZhYmxlKCksXG4gICAgICB0aGlzLmxpc3RPZk56T3B0aW9uR3JvdXBDb21wb25lbnQuY2hhbmdlcyxcbiAgICAgIHRoaXMubGlzdE9mTnpPcHRpb25Db21wb25lbnQuY2hhbmdlc1xuICAgICk7XG4gICAgaWYgKHRoaXMubGlzdE9mTnpPcHRpb25Hcm91cENvbXBvbmVudC5sZW5ndGgpIHtcbiAgICAgIHRoaXMubGlzdE9mTnpPcHRpb25Hcm91cENvbXBvbmVudC5mb3JFYWNoKGdyb3VwID0+IG9wdGlvbkNoYW5nZXMkID0gZ3JvdXAubGlzdE9mTnpPcHRpb25Db21wb25lbnQgPyBtZXJnZShncm91cC5saXN0T2ZOek9wdGlvbkNvbXBvbmVudC5jaGFuZ2VzLCBvcHRpb25DaGFuZ2VzJCkgOiBvcHRpb25DaGFuZ2VzJCk7XG4gICAgfVxuICAgIHRoaXMub3B0aW9uU3Vic2NyaXB0aW9uID0gb3B0aW9uQ2hhbmdlcyQuc3Vic2NyaWJlKCgpID0+IHRoaXMucmVmcmVzaEFsbE9wdGlvblN0YXR1cyh0cnVlKSk7XG4gIH1cblxuICB1bnN1YnNjcmliZUdyb3VwKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmdyb3VwU3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLmdyb3VwU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLmdyb3VwU3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICB1bnN1YnNjcmliZU9wdGlvbigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5vcHRpb25TdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMub3B0aW9uU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLm9wdGlvblN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGlzVGFnc01vZGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubnpNb2RlID09PSAndGFncyc7XG4gIH1cblxuICBnZXQgaXNNdWx0aXBsZU9yVGFncygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5uek1vZGUgPT09ICd0YWdzJyB8fCB0aGlzLm56TW9kZSA9PT0gJ211bHRpcGxlJztcbiAgfVxuXG4gIGdldCBpc05vdEZvdW5kRGlzcGxheSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKCF0aGlzLmlzVGFnc01vZGUpICYmICghdGhpcy5saXN0T2ZGaWx0ZXJPcHRpb24ubGVuZ3RoKTtcbiAgfVxuXG4gIHVwZGF0ZUFkZFRhZ09wdGlvbkRpc3BsYXkoKTogdm9pZCB7XG4gICAgY29uc3QgbGlzdE9mQWxsT3B0aW9uID0gdGhpcy5saXN0T2ZBbGxUZW1wbGF0ZU9wdGlvbi5jb25jYXQodGhpcy5saXN0T2ZUYWdPcHRpb24pLm1hcChpdGVtID0+IGl0ZW0ubnpMYWJlbCk7XG4gICAgY29uc3QgaXNNYXRjaCA9IGxpc3RPZkFsbE9wdGlvbi5pbmRleE9mKHRoaXMubnpTZWFyY2hWYWx1ZSkgPiAtMTtcbiAgICB0aGlzLmlzQWRkVGFnT3B0aW9uRGlzcGxheSA9IHRoaXMuaXNUYWdzTW9kZSAmJiB0aGlzLm56U2VhcmNoVmFsdWUgJiYgKCFpc01hdGNoKTtcbiAgfVxuXG4gIGRyb3BEb3duU2Nyb2xsKGU6IE1vdXNlRXZlbnQsIHVsOiBIVE1MVUxpc3RFbGVtZW50KTogdm9pZCB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgaWYgKHVsICYmICh1bC5zY3JvbGxIZWlnaHQgLSB1bC5zY3JvbGxUb3AgPT09IHVsLmNsaWVudEhlaWdodCkpIHtcbiAgICAgIHRoaXMubnpTY3JvbGxUb0JvdHRvbS5lbWl0KCk7XG4gICAgfVxuICB9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xuICAgIHRoaXMuaXNJbml0ID0gdHJ1ZTtcbiAgICB0aGlzLnJlZnJlc2hBbGxPcHRpb25TdGF0dXModHJ1ZSk7XG4gICAgdGhpcy53YXRjaFN1Yk9wdGlvbkNoYW5nZXMoKTtcbiAgICB0aGlzLmdyb3VwU3Vic2NyaXB0aW9uID0gdGhpcy5saXN0T2ZOek9wdGlvbkdyb3VwQ29tcG9uZW50LmNoYW5nZXMuc3Vic2NyaWJlKCgpID0+IHRoaXMud2F0Y2hTdWJPcHRpb25DaGFuZ2VzKCkpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy51bnN1YnNjcmliZUdyb3VwKCk7XG4gICAgdGhpcy51bnN1YnNjcmliZU9wdGlvbigpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIENvbnRlbnRDaGlsZHJlbiwgSW5wdXQsIFF1ZXJ5TGlzdCwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE56T3B0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi9uei1vcHRpb24uY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yICAgOiAnbnotb3B0aW9uLWdyb3VwJyxcbiAgdGVtcGxhdGVVcmw6ICcuL256LW9wdGlvbi1ncm91cC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgTnpPcHRpb25Hcm91cENvbXBvbmVudCB7XG4gIF9sYWJlbDogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD47XG4gIGlzTGFiZWxTdHJpbmc6IGJvb2xlYW47XG4gIEBDb250ZW50Q2hpbGRyZW4oTnpPcHRpb25Db21wb25lbnQpIGxpc3RPZk56T3B0aW9uQ29tcG9uZW50OiBRdWVyeUxpc3Q8TnpPcHRpb25Db21wb25lbnQ+O1xuXG4gIEBJbnB1dCgpXG4gIHNldCBuekxhYmVsKHZhbHVlOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPikge1xuICAgIHRoaXMuaXNMYWJlbFN0cmluZyA9ICEodmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZik7XG4gICAgdGhpcy5fbGFiZWwgPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBuekxhYmVsKCk6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5fbGFiZWw7XG4gIH1cblxufVxuIiwiaW1wb3J0IHtcbiAgYW5pbWF0ZSxcbiAgc3RhdGUsXG4gIHN0eWxlLFxuICB0cmFuc2l0aW9uLFxuICB0cmlnZ2VyXG59IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQsIFJlbmRlcmVyMiwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc05vdE5pbCB9IGZyb20gJy4uL2NvcmUvdXRpbC9jaGVjayc7XG5pbXBvcnQgeyBOek9wdGlvbkNvbXBvbmVudCB9IGZyb20gJy4vbnotb3B0aW9uLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICAgICAgOiAnW256LXNlbGVjdC10b3AtY29udHJvbF0nLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgYW5pbWF0aW9ucyAgICAgICAgIDogW1xuICAgIHRyaWdnZXIoJ3RhZ0FuaW1hdGlvbicsIFtcbiAgICAgIHN0YXRlKCcqJywgc3R5bGUoeyBvcGFjaXR5OiAxLCB0cmFuc2Zvcm06ICdzY2FsZSgxKScgfSkpLFxuICAgICAgdHJhbnNpdGlvbigndm9pZCA9PiAqJywgW1xuICAgICAgICBzdHlsZSh7IG9wYWNpdHk6IDAsIHRyYW5zZm9ybTogJ3NjYWxlKDApJyB9KSxcbiAgICAgICAgYW5pbWF0ZSgnMTUwbXMgbGluZWFyJylcbiAgICAgIF0pLFxuICAgICAgc3RhdGUoJ3ZvaWQnLCBzdHlsZSh7IG9wYWNpdHk6IDAsIHRyYW5zZm9ybTogJ3NjYWxlKDApJyB9KSksXG4gICAgICB0cmFuc2l0aW9uKCcqID0+IHZvaWQnLCBbXG4gICAgICAgIHN0eWxlKHsgb3BhY2l0eTogMSwgdHJhbnNmb3JtOiAnc2NhbGUoMSknIH0pLFxuICAgICAgICBhbmltYXRlKCcxNTBtcyBsaW5lYXInKVxuICAgICAgXSlcbiAgICBdKVxuICBdLFxuICB0ZW1wbGF0ZVVybCAgICAgICAgOiAnLi9uei1zZWxlY3QtdG9wLWNvbnRyb2wuY29tcG9uZW50Lmh0bWwnLFxuICBob3N0ICAgICAgICAgICAgICAgOiB7XG4gICAgJ1tjbGFzcy5hbnQtc2VsZWN0LXNlbGVjdGlvbl9fcmVuZGVyZWRdJzogJ3RydWUnXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgTnpTZWxlY3RUb3BDb250cm9sQ29tcG9uZW50IHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICBwcml2YXRlIF9saXN0T2ZTZWxlY3RlZFZhbHVlOiBhbnlbXTtcbiAgcHJpdmF0ZSBfbGlzdFRlbXBsYXRlT2ZPcHRpb246IE56T3B0aW9uQ29tcG9uZW50W10gPSBbXTtcbiAgbGlzdE9mQ2FjaGVkU2VsZWN0ZWRPcHRpb246IE56T3B0aW9uQ29tcG9uZW50W10gPSBbXTtcbiAgaW5wdXRWYWx1ZTogc3RyaW5nO1xuICBpc0NvbXBvc2luZyA9IGZhbHNlO1xuICBAVmlld0NoaWxkKCdpbnB1dEVsZW1lbnQnKSBpbnB1dEVsZW1lbnQ6IEVsZW1lbnRSZWY7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgQE91dHB1dCgpIG56TGlzdE9mU2VsZWN0ZWRWYWx1ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8YW55W10+KCk7XG4gIEBPdXRwdXQoKSBuek9uU2VhcmNoID0gbmV3IEV2ZW50RW1pdHRlcjx7IHZhbHVlOiBzdHJpbmcsIGVtaXQ6IGJvb2xlYW4gfT4oKTtcbiAgQElucHV0KCkgbnpNb2RlID0gJ2RlZmF1bHQnO1xuICBASW5wdXQoKSBuelNob3dTZWFyY2ggPSBmYWxzZTtcbiAgQElucHV0KCkgbnpEaXNhYmxlZCA9IGZhbHNlO1xuXG4gIEBJbnB1dCgpIG56UGxhY2VIb2xkZXI6IHN0cmluZztcbiAgQElucHV0KCkgbnpPcGVuID0gZmFsc2U7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgQElucHV0KCkgY29tcGFyZVdpdGg6IChvMTogYW55LCBvMjogYW55KSA9PiBib29sZWFuO1xuXG4gIEBJbnB1dCgpXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgc2V0IG56TGlzdE9mU2VsZWN0ZWRWYWx1ZSh2YWx1ZTogYW55W10pIHtcbiAgICB0aGlzLl9saXN0T2ZTZWxlY3RlZFZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy51cGRhdGVMaXN0T2ZDYWNoZWRPcHRpb24oKTtcbiAgfVxuXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgZ2V0IG56TGlzdE9mU2VsZWN0ZWRWYWx1ZSgpOiBhbnlbXSB7XG4gICAgcmV0dXJuIHRoaXMuX2xpc3RPZlNlbGVjdGVkVmFsdWU7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpMaXN0VGVtcGxhdGVPZk9wdGlvbih2YWx1ZTogTnpPcHRpb25Db21wb25lbnRbXSkge1xuICAgIHRoaXMuX2xpc3RUZW1wbGF0ZU9mT3B0aW9uID0gdmFsdWU7XG4gICAgdGhpcy51cGRhdGVMaXN0T2ZDYWNoZWRPcHRpb24oKTtcbiAgfVxuXG4gIGdldCBuekxpc3RUZW1wbGF0ZU9mT3B0aW9uKCk6IE56T3B0aW9uQ29tcG9uZW50W10ge1xuICAgIHJldHVybiB0aGlzLl9saXN0VGVtcGxhdGVPZk9wdGlvbjtcbiAgfVxuXG4gIC8qKiBjYWNoZWQgc2VsZWN0ZWQgb3B0aW9uIGxpc3QgKiovXG4gIHVwZGF0ZUxpc3RPZkNhY2hlZE9wdGlvbigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pc1NpbmdsZU1vZGUpIHtcbiAgICAgIGNvbnN0IHNlbGVjdGVkT3B0aW9uID0gdGhpcy5uekxpc3RUZW1wbGF0ZU9mT3B0aW9uLmZpbmQobyA9PiB0aGlzLmNvbXBhcmVXaXRoKG8ubnpWYWx1ZSwgdGhpcy5uekxpc3RPZlNlbGVjdGVkVmFsdWVbIDAgXSkpO1xuICAgICAgaWYgKGlzTm90TmlsKHNlbGVjdGVkT3B0aW9uKSkge1xuICAgICAgICB0aGlzLmxpc3RPZkNhY2hlZFNlbGVjdGVkT3B0aW9uID0gWyBzZWxlY3RlZE9wdGlvbiBdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBsaXN0T2ZDYWNoZWRPcHRpb25Gcm9tTGF0ZXN0VGVtcGxhdGUgPSB0aGlzLm56TGlzdFRlbXBsYXRlT2ZPcHRpb24uZmlsdGVyKG8gPT4gaXNOb3ROaWwodGhpcy5uekxpc3RPZlNlbGVjdGVkVmFsdWUuZmluZCh2ID0+IHRoaXMuY29tcGFyZVdpdGgodiwgby5uelZhbHVlKSkpKTtcbiAgICAgIGNvbnN0IHJlc3RTZWxlY3RlZFZhbHVlID0gdGhpcy5uekxpc3RPZlNlbGVjdGVkVmFsdWUuZmlsdGVyKHYgPT4gIWlzTm90TmlsKGxpc3RPZkNhY2hlZE9wdGlvbkZyb21MYXRlc3RUZW1wbGF0ZS5maW5kKG8gPT4gdGhpcy5jb21wYXJlV2l0aChvLm56VmFsdWUsIHYpKSkpO1xuICAgICAgY29uc3QgbGlzdE9mQ2FjaGVkT3B0aW9uRnJvbU9sZCA9IHRoaXMubGlzdE9mQ2FjaGVkU2VsZWN0ZWRPcHRpb24uZmlsdGVyKG8gPT4gaXNOb3ROaWwocmVzdFNlbGVjdGVkVmFsdWUuZmluZCh2ID0+IHRoaXMuY29tcGFyZVdpdGgoby5uelZhbHVlLCB2KSkpKTtcbiAgICAgIHRoaXMubGlzdE9mQ2FjaGVkU2VsZWN0ZWRPcHRpb24gPSBsaXN0T2ZDYWNoZWRPcHRpb25Gcm9tTGF0ZXN0VGVtcGxhdGUuY29uY2F0KGxpc3RPZkNhY2hlZE9wdGlvbkZyb21PbGQpO1xuICAgIH1cbiAgfVxuXG4gIHNldElucHV0VmFsdWUodmFsdWU6IHN0cmluZywgZW1pdDogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuaW5wdXRWYWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMudXBkYXRlV2lkdGgoKTtcbiAgICB0aGlzLm56T25TZWFyY2guZW1pdCh7IHZhbHVlLCBlbWl0IH0pO1xuICB9XG5cbiAgZ2V0IGlzU2luZ2xlTW9kZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5uek1vZGUgPT09ICdkZWZhdWx0JztcbiAgfVxuXG4gIGdldCBpc011bHRpcGxlT3JUYWdzKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLm56TW9kZSA9PT0gJ3RhZ3MnIHx8IHRoaXMubnpNb2RlID09PSAnbXVsdGlwbGUnO1xuICB9XG5cbiAgZ2V0IHBsYWNlSG9sZGVyRGlzcGxheSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmlucHV0VmFsdWUgfHwgdGhpcy5pc0NvbXBvc2luZyB8fCB0aGlzLm56TGlzdE9mU2VsZWN0ZWRWYWx1ZS5sZW5ndGggPyAnbm9uZScgOiAnYmxvY2snO1xuICB9XG5cbiAgZ2V0IHNlbGVjdGVkVmFsdWVEaXNwbGF5KCk6IHsgWyBrZXk6IHN0cmluZyBdOiBzdHJpbmcgfSB7XG4gICAgbGV0IHNob3dTZWxlY3RlZFZhbHVlID0gZmFsc2U7XG4gICAgbGV0IG9wYWNpdHkgPSAxO1xuICAgIGlmICghdGhpcy5uelNob3dTZWFyY2gpIHtcbiAgICAgIHNob3dTZWxlY3RlZFZhbHVlID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMubnpPcGVuKSB7XG4gICAgICAgIHNob3dTZWxlY3RlZFZhbHVlID0gISh0aGlzLmlucHV0VmFsdWUgfHwgdGhpcy5pc0NvbXBvc2luZyk7XG4gICAgICAgIGlmIChzaG93U2VsZWN0ZWRWYWx1ZSkge1xuICAgICAgICAgIG9wYWNpdHkgPSAwLjQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNob3dTZWxlY3RlZFZhbHVlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3BsYXk6IHNob3dTZWxlY3RlZFZhbHVlID8gJ2Jsb2NrJyA6ICdub25lJyxcbiAgICAgIG9wYWNpdHk6IGAke29wYWNpdHl9YFxuICAgIH07XG4gIH1cblxuICBnZXQgc2luZ2xlVmFsdWVMYWJlbCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmdldFByb3BlcnR5RnJvbVZhbHVlKHRoaXMubnpMaXN0T2ZTZWxlY3RlZFZhbHVlWyAwIF0sICduekxhYmVsJyk7XG4gIH1cblxuICBmb2N1c09uSW5wdXQoKTogdm9pZCB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5pbnB1dEVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5pbnB1dEVsZW1lbnQubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICBnZXRQcm9wZXJ0eUZyb21WYWx1ZSh2YWx1ZTogYW55LCBwcm9wOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IHRhcmdldE9wdGlvbiA9IHRoaXMubGlzdE9mQ2FjaGVkU2VsZWN0ZWRPcHRpb24uZmluZChpdGVtID0+IHRoaXMuY29tcGFyZVdpdGgoaXRlbS5uelZhbHVlLCB2YWx1ZSkpO1xuICAgIHJldHVybiB0YXJnZXRPcHRpb24gPyB0YXJnZXRPcHRpb25bIHByb3AgXSA6ICcnO1xuICB9XG5cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICBpc09wdGlvbkRpc3BsYXkodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAodGhpcy5uek1vZGUgPT09ICd0YWdzJykgfHwgISF0aGlzLmdldFByb3BlcnR5RnJvbVZhbHVlKHZhbHVlLCAnbnpMYWJlbCcpO1xuICB9XG5cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICByZW1vdmVWYWx1ZUZvcm1TZWxlY3RlZCh2YWx1ZTogYW55LCBldmVudD86IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5uekRpc2FibGVkIHx8IHRoaXMuZ2V0UHJvcGVydHlGcm9tVmFsdWUodmFsdWUsICduekRpc2FibGVkJykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fbGlzdE9mU2VsZWN0ZWRWYWx1ZSA9IHRoaXMubnpMaXN0T2ZTZWxlY3RlZFZhbHVlLmZpbHRlcihpdGVtID0+IGl0ZW0gIT09IHZhbHVlKTtcbiAgICB0aGlzLm56TGlzdE9mU2VsZWN0ZWRWYWx1ZUNoYW5nZS5lbWl0KHRoaXMubnpMaXN0T2ZTZWxlY3RlZFZhbHVlKTtcblxuICAgIC8vIERvIG5vdCB0cmlnZ2VyIHRoZSBwb3B1cFxuICAgIGlmIChldmVudCAmJiBldmVudC5zdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZVdpZHRoKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzTXVsdGlwbGVPclRhZ3MgJiYgdGhpcy5pbnB1dEVsZW1lbnQpIHtcbiAgICAgIGlmICh0aGlzLmlucHV0VmFsdWUgfHwgdGhpcy5pc0NvbXBvc2luZykge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuaW5wdXRFbGVtZW50Lm5hdGl2ZUVsZW1lbnQsICd3aWR0aCcsIGAke3RoaXMuaW5wdXRFbGVtZW50Lm5hdGl2ZUVsZW1lbnQuc2Nyb2xsV2lkdGh9cHhgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlU3R5bGUodGhpcy5pbnB1dEVsZW1lbnQubmF0aXZlRWxlbWVudCwgJ3dpZHRoJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgb25LZXlEb3duSW5wdXQoZTogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgIGNvbnN0IGtleUNvZGUgPSBlLmtleUNvZGU7XG4gICAgY29uc3QgZXZlbnRUYXJnZXQgPSBlLnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgIGlmIChcbiAgICAgIHRoaXMuaXNNdWx0aXBsZU9yVGFncyAmJlxuICAgICAgIWV2ZW50VGFyZ2V0LnZhbHVlICYmXG4gICAgICAvLyBCYWNrU3BhY2VcbiAgICAgIGtleUNvZGUgPT09IDhcbiAgICApIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGlmICh0aGlzLm56TGlzdE9mU2VsZWN0ZWRWYWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVWYWx1ZUZvcm1TZWxlY3RlZCh0aGlzLm56TGlzdE9mU2VsZWN0ZWRWYWx1ZVsgdGhpcy5uekxpc3RPZlNlbGVjdGVkVmFsdWUubGVuZ3RoIC0gMSBdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcblxuICB9XG59XG4iLCJpbXBvcnQgeyBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW256LXNlbGVjdC11bnNlbGVjdGFibGVdJyxcbiAgaG9zdCAgICA6IHtcbiAgICAnW2F0dHIudW5zZWxlY3RhYmxlXSc6ICdcInVuc2VsZWN0YWJsZVwiJyxcbiAgICAnW3N0eWxlLnVzZXItc2VsZWN0XSc6ICdcIm5vbmVcIidcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBOelNlbGVjdFVuc2VsZWN0YWJsZURpcmVjdGl2ZSB7XG5cbn1cbiIsImltcG9ydCB7XG4gIGFuaW1hdGUsXG4gIHN0YXRlLFxuICBzdHlsZSxcbiAgdHJhbnNpdGlvbixcbiAgdHJpZ2dlclxufSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmltcG9ydCB7IERPV05fQVJST1csIFNQQUNFLCBUQUIgfSBmcm9tICdAYW5ndWxhci9jZGsva2V5Y29kZXMnO1xuaW1wb3J0IHsgQ2RrQ29ubmVjdGVkT3ZlcmxheSwgQ2RrT3ZlcmxheU9yaWdpbiwgQ29ubmVjdGVkT3ZlcmxheVBvc2l0aW9uQ2hhbmdlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHtcbiAgZm9yd2FyZFJlZixcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ29tcG9uZW50LFxuICBDb250ZW50Q2hpbGRyZW4sXG4gIEV2ZW50RW1pdHRlcixcbiAgSG9zdExpc3RlbmVyLFxuICBJbnB1dCxcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG4gIE91dHB1dCxcbiAgUXVlcnlMaXN0LFxuICBSZW5kZXJlcjIsXG4gIFNpbXBsZUNoYW5nZSxcbiAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgaXNOb3ROaWwgfSBmcm9tICcuLi9jb3JlL3V0aWwvY2hlY2snO1xuaW1wb3J0IHsgdG9Cb29sZWFuIH0gZnJvbSAnLi4vY29yZS91dGlsL2NvbnZlcnQnO1xuaW1wb3J0IHsgTnpPcHRpb25Db250YWluZXJDb21wb25lbnQgfSBmcm9tICcuL256LW9wdGlvbi1jb250YWluZXIuY29tcG9uZW50JztcbmltcG9ydCB7IE56T3B0aW9uR3JvdXBDb21wb25lbnQgfSBmcm9tICcuL256LW9wdGlvbi1ncm91cC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpPcHRpb25Db21wb25lbnQgfSBmcm9tICcuL256LW9wdGlvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgZGVmYXVsdEZpbHRlck9wdGlvbiwgVEZpbHRlck9wdGlvbiB9IGZyb20gJy4vbnotb3B0aW9uLnBpcGUnO1xuaW1wb3J0IHsgTnpTZWxlY3RUb3BDb250cm9sQ29tcG9uZW50IH0gZnJvbSAnLi9uei1zZWxlY3QtdG9wLWNvbnRyb2wuY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yICAgICAgICAgICA6ICduei1zZWxlY3QnLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgcHJvdmlkZXJzICAgICAgICAgIDogW1xuICAgIHtcbiAgICAgIHByb3ZpZGUgICAgOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IE56U2VsZWN0Q29tcG9uZW50KSxcbiAgICAgIG11bHRpICAgICAgOiB0cnVlXG4gICAgfVxuICBdLFxuICBhbmltYXRpb25zICAgICAgICAgOiBbXG4gICAgdHJpZ2dlcignZHJvcERvd25BbmltYXRpb24nLCBbXG4gICAgICBzdGF0ZSgnaGlkZGVuJywgc3R5bGUoe1xuICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICBkaXNwbGF5OiAnbm9uZSdcbiAgICAgIH0pKSxcbiAgICAgIHN0YXRlKCdib3R0b20nLCBzdHlsZSh7XG4gICAgICAgIG9wYWNpdHkgICAgICAgIDogMSxcbiAgICAgICAgdHJhbnNmb3JtICAgICAgOiAnc2NhbGVZKDEpJyxcbiAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnMCUgMCUnXG4gICAgICB9KSksXG4gICAgICBzdGF0ZSgndG9wJywgc3R5bGUoe1xuICAgICAgICBvcGFjaXR5ICAgICAgICA6IDEsXG4gICAgICAgIHRyYW5zZm9ybSAgICAgIDogJ3NjYWxlWSgxKScsXG4gICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzAlIDEwMCUnXG4gICAgICB9KSksXG4gICAgICB0cmFuc2l0aW9uKCdoaWRkZW4gPT4gYm90dG9tJywgW1xuICAgICAgICBzdHlsZSh7XG4gICAgICAgICAgb3BhY2l0eSAgICAgICAgOiAwLFxuICAgICAgICAgIHRyYW5zZm9ybSAgICAgIDogJ3NjYWxlWSgwLjgpJyxcbiAgICAgICAgICB0cmFuc2Zvcm1PcmlnaW46ICcwJSAwJSdcbiAgICAgICAgfSksXG4gICAgICAgIGFuaW1hdGUoJzEwMG1zIGN1YmljLWJlemllcigwLjc1NSwgMC4wNSwgMC44NTUsIDAuMDYpJylcbiAgICAgIF0pLFxuICAgICAgdHJhbnNpdGlvbignYm90dG9tID0+IGhpZGRlbicsIFtcbiAgICAgICAgYW5pbWF0ZSgnMTAwbXMgY3ViaWMtYmV6aWVyKDAuNzU1LCAwLjA1LCAwLjg1NSwgMC4wNiknLCBzdHlsZSh7XG4gICAgICAgICAgb3BhY2l0eSAgICAgICAgOiAwLFxuICAgICAgICAgIHRyYW5zZm9ybSAgICAgIDogJ3NjYWxlWSgwLjgpJyxcbiAgICAgICAgICB0cmFuc2Zvcm1PcmlnaW46ICcwJSAwJSdcbiAgICAgICAgfSkpXG4gICAgICBdKSxcbiAgICAgIHRyYW5zaXRpb24oJ2hpZGRlbiA9PiB0b3AnLCBbXG4gICAgICAgIHN0eWxlKHtcbiAgICAgICAgICBvcGFjaXR5ICAgICAgICA6IDAsXG4gICAgICAgICAgdHJhbnNmb3JtICAgICAgOiAnc2NhbGVZKDAuOCknLFxuICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzAlIDEwMCUnXG4gICAgICAgIH0pLFxuICAgICAgICBhbmltYXRlKCcxMDBtcyBjdWJpYy1iZXppZXIoMC43NTUsIDAuMDUsIDAuODU1LCAwLjA2KScpXG4gICAgICBdKSxcbiAgICAgIHRyYW5zaXRpb24oJ3RvcCA9PiBoaWRkZW4nLCBbXG4gICAgICAgIGFuaW1hdGUoJzEwMG1zIGN1YmljLWJlemllcigwLjc1NSwgMC4wNSwgMC44NTUsIDAuMDYpJywgc3R5bGUoe1xuICAgICAgICAgIG9wYWNpdHkgICAgICAgIDogMCxcbiAgICAgICAgICB0cmFuc2Zvcm0gICAgICA6ICdzY2FsZVkoMC44KScsXG4gICAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnMCUgMTAwJSdcbiAgICAgICAgfSkpXG4gICAgICBdKVxuICAgIF0pXG4gIF0sXG4gIHRlbXBsYXRlVXJsICAgICAgICA6ICcuL256LXNlbGVjdC5jb21wb25lbnQuaHRtbCcsXG4gIGhvc3QgICAgICAgICAgICAgICA6IHtcbiAgICAnW2NsYXNzLmFudC1zZWxlY3RdJyAgICAgICAgICAgIDogJ3RydWUnLFxuICAgICdbY2xhc3MuYW50LXNlbGVjdC1sZ10nICAgICAgICAgOiAnbnpTaXplPT09XCJsYXJnZVwiJyxcbiAgICAnW2NsYXNzLmFudC1zZWxlY3Qtc21dJyAgICAgICAgIDogJ256U2l6ZT09PVwic21hbGxcIicsXG4gICAgJ1tjbGFzcy5hbnQtc2VsZWN0LWVuYWJsZWRdJyAgICA6ICchbnpEaXNhYmxlZCcsXG4gICAgJ1tjbGFzcy5hbnQtc2VsZWN0LWRpc2FibGVkXScgICA6ICduekRpc2FibGVkJyxcbiAgICAnW2NsYXNzLmFudC1zZWxlY3QtYWxsb3ctY2xlYXJdJzogJ256QWxsb3dDbGVhcicsXG4gICAgJ1tjbGFzcy5hbnQtc2VsZWN0LW9wZW5dJyAgICAgICA6ICduek9wZW4nXG4gIH0sXG4gIHN0eWxlcyAgICAgICAgICAgICA6IFsgYFxuICAgIC5hbnQtc2VsZWN0LWRyb3Bkb3duIHtcbiAgICAgIHRvcDogMTAwJTtcbiAgICAgIGxlZnQ6IDA7XG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIG1hcmdpbi10b3A6IDRweDtcbiAgICAgIG1hcmdpbi1ib3R0b206IDRweDtcbiAgICB9XG4gIGAgXVxufSlcbmV4cG9ydCBjbGFzcyBOelNlbGVjdENvbXBvbmVudCBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBPbkluaXQsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgX2Rpc2FibGVkID0gZmFsc2U7XG4gIHByaXZhdGUgX2FsbG93Q2xlYXIgPSBmYWxzZTtcbiAgcHJpdmF0ZSBfc2hvd1NlYXJjaCA9IGZhbHNlO1xuICBwcml2YXRlIF9vcGVuID0gZmFsc2U7XG4gIHByaXZhdGUgX3BsYWNlaG9sZGVyOiBzdHJpbmc7XG4gIHByaXZhdGUgX2F1dG9Gb2N1cyA9IGZhbHNlO1xuICBwcml2YXRlIF9kcm9wZG93bkNsYXNzTmFtZTogc3RyaW5nO1xuICBvbkNoYW5nZTogKHZhbHVlOiBzdHJpbmcgfCBzdHJpbmdbXSkgPT4gdm9pZCA9ICgpID0+IG51bGw7XG4gIG9uVG91Y2hlZDogKCkgPT4gdm9pZCA9ICgpID0+IG51bGw7XG4gIGRyb3BEb3duUG9zaXRpb246ICd0b3AnIHwgJ2NlbnRlcicgfCAnYm90dG9tJyA9ICdib3R0b20nO1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gIGxpc3RPZlNlbGVjdGVkVmFsdWU6IGFueVtdID0gW107XG4gIGxpc3RPZlRlbXBsYXRlT3B0aW9uOiBOek9wdGlvbkNvbXBvbmVudFtdID0gW107XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgdmFsdWU6IGFueSB8IGFueVtdO1xuICBvdmVybGF5V2lkdGg6IG51bWJlcjtcbiAgb3ZlcmxheU1pbldpZHRoOiBudW1iZXI7XG4gIHNlYXJjaFZhbHVlOiBzdHJpbmcgPSAnJztcbiAgaXNEZXN0cm95ID0gdHJ1ZTtcbiAgaXNJbml0ID0gZmFsc2U7XG4gIGRyb3BEb3duQ2xhc3NNYXA7XG4gIEBWaWV3Q2hpbGQoQ2RrT3ZlcmxheU9yaWdpbikgY2RrT3ZlcmxheU9yaWdpbjogQ2RrT3ZlcmxheU9yaWdpbjtcbiAgQFZpZXdDaGlsZChDZGtDb25uZWN0ZWRPdmVybGF5KSBjZGtDb25uZWN0ZWRPdmVybGF5OiBDZGtDb25uZWN0ZWRPdmVybGF5O1xuICBAVmlld0NoaWxkKE56U2VsZWN0VG9wQ29udHJvbENvbXBvbmVudCkgbnpTZWxlY3RUb3BDb250cm9sQ29tcG9uZW50OiBOelNlbGVjdFRvcENvbnRyb2xDb21wb25lbnQ7XG4gIEBWaWV3Q2hpbGQoTnpPcHRpb25Db250YWluZXJDb21wb25lbnQpIG56T3B0aW9uQ29udGFpbmVyQ29tcG9uZW50OiBOek9wdGlvbkNvbnRhaW5lckNvbXBvbmVudDtcbiAgLyoqIHNob3VsZCBtb3ZlIHRvIG56LW9wdGlvbi1jb250YWluZXIgd2hlbiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8yMDgxMCByZXNvbHZlZCAqKi9cbiAgQENvbnRlbnRDaGlsZHJlbihOek9wdGlvbkNvbXBvbmVudCkgbGlzdE9mTnpPcHRpb25Db21wb25lbnQ6IFF1ZXJ5TGlzdDxOek9wdGlvbkNvbXBvbmVudD47XG4gIEBDb250ZW50Q2hpbGRyZW4oTnpPcHRpb25Hcm91cENvbXBvbmVudCkgbGlzdE9mTnpPcHRpb25Hcm91cENvbXBvbmVudDogUXVlcnlMaXN0PE56T3B0aW9uR3JvdXBDb21wb25lbnQ+O1xuICBAT3V0cHV0KCkgbnpPblNlYXJjaCA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuICBAT3V0cHV0KCkgbnpTY3JvbGxUb0JvdHRvbSA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcbiAgQE91dHB1dCgpIG56T3BlbkNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcbiAgQElucHV0KCkgbnpTaXplID0gJ2RlZmF1bHQnO1xuICBASW5wdXQoKSBuelNlcnZlclNlYXJjaCA9IGZhbHNlO1xuICBASW5wdXQoKSBuek1vZGU6ICdkZWZhdWx0JyB8ICdtdWx0aXBsZScgfCAndGFncycgPSAnZGVmYXVsdCc7XG4gIEBJbnB1dCgpIG56RHJvcGRvd25NYXRjaFNlbGVjdFdpZHRoID0gdHJ1ZTtcbiAgQElucHV0KCkgbnpGaWx0ZXJPcHRpb246IFRGaWx0ZXJPcHRpb24gPSBkZWZhdWx0RmlsdGVyT3B0aW9uO1xuICBASW5wdXQoKSBuek1heE11bHRpcGxlQ291bnQgPSBJbmZpbml0eTtcbiAgQElucHV0KCkgbnpEcm9wZG93blN0eWxlOiB7IFsga2V5OiBzdHJpbmcgXTogc3RyaW5nOyB9O1xuICBASW5wdXQoKSBuek5vdEZvdW5kQ29udGVudDogc3RyaW5nO1xuICAvKiogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9wdWxsLzEzMzQ5L2ZpbGVzICoqL1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgQElucHV0KCkgY29tcGFyZVdpdGggPSAobzE6IGFueSwgbzI6IGFueSkgPT4gbzEgPT09IG8yO1xuXG4gIEBJbnB1dCgpXG4gIHNldCBuekRyb3Bkb3duQ2xhc3NOYW1lKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9kcm9wZG93bkNsYXNzTmFtZSA9IHZhbHVlO1xuICAgIHRoaXMudXBkYXRlRHJvcERvd25DbGFzc01hcCgpO1xuICB9XG5cbiAgZ2V0IG56RHJvcGRvd25DbGFzc05hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fZHJvcGRvd25DbGFzc05hbWU7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpBdXRvRm9jdXModmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9hdXRvRm9jdXMgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICAgIHRoaXMudXBkYXRlQXV0b0ZvY3VzKCk7XG4gIH1cblxuICBnZXQgbnpBdXRvRm9jdXMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2F1dG9Gb2N1cztcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuek9wZW4odmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9vcGVuID0gdmFsdWU7XG4gICAgdGhpcy5oYW5kbGVFc2NCdWcoKTtcbiAgICB0aGlzLnVwZGF0ZUNka0Nvbm5lY3RlZE92ZXJsYXlTdGF0dXMoKTtcbiAgICB0aGlzLnVwZGF0ZURyb3BEb3duQ2xhc3NNYXAoKTtcbiAgICBpZiAodGhpcy5uek9wZW4pIHtcbiAgICAgIGlmICh0aGlzLm56U2VsZWN0VG9wQ29udHJvbENvbXBvbmVudCkge1xuICAgICAgICB0aGlzLm56U2VsZWN0VG9wQ29udHJvbENvbXBvbmVudC5mb2N1c09uSW5wdXQoKTtcbiAgICAgICAgdGhpcy5uelNlbGVjdFRvcENvbnRyb2xDb21wb25lbnQuc2V0SW5wdXRWYWx1ZSgnJywgdHJ1ZSk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5uek9wdGlvbkNvbnRhaW5lckNvbXBvbmVudCkge1xuICAgICAgICB0aGlzLm56T3B0aW9uQ29udGFpbmVyQ29tcG9uZW50LnNjcm9sbEludG9WaWV3KCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5jZGtDb25uZWN0ZWRPdmVybGF5ICYmIHRoaXMuY2RrQ29ubmVjdGVkT3ZlcmxheS5vdmVybGF5UmVmKSB7XG4gICAgICAgIHRoaXMuY2RrQ29ubmVjdGVkT3ZlcmxheS5vdmVybGF5UmVmLnVwZGF0ZVBvc2l0aW9uKCk7XG4gICAgICAgIGNvbnN0IGJhY2tkcm9wRWxlbWVudCA9IHRoaXMuY2RrQ29ubmVjdGVkT3ZlcmxheS5vdmVybGF5UmVmLmJhY2tkcm9wRWxlbWVudDtcbiAgICAgICAgY29uc3QgcGFyZW50Tm9kZSA9IHRoaXMucmVuZGVyZXIucGFyZW50Tm9kZShiYWNrZHJvcEVsZW1lbnQpO1xuICAgICAgICBjb25zdCBob3N0RWxlbWVudCA9IHRoaXMuY2RrQ29ubmVjdGVkT3ZlcmxheS5vdmVybGF5UmVmLmhvc3RFbGVtZW50O1xuICAgICAgICB0aGlzLnJlbmRlcmVyLmFwcGVuZENoaWxkKHBhcmVudE5vZGUsIGJhY2tkcm9wRWxlbWVudCk7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuYXBwZW5kQ2hpbGQocGFyZW50Tm9kZSwgaG9zdEVsZW1lbnQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5uelNlbGVjdFRvcENvbnRyb2xDb21wb25lbnQpIHtcbiAgICAgICAgdGhpcy5uelNlbGVjdFRvcENvbnRyb2xDb21wb25lbnQuc2V0SW5wdXRWYWx1ZSgnJywgZmFsc2UpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubnpPcHRpb25Db250YWluZXJDb21wb25lbnQpIHtcbiAgICAgICAgdGhpcy5uek9wdGlvbkNvbnRhaW5lckNvbXBvbmVudC5yZXNldEFjdGl2ZU9wdGlvbigpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldCBuek9wZW4oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX29wZW47XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpEaXNhYmxlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2Rpc2FibGVkID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgICBpZiAodGhpcy5uekRpc2FibGVkKSB7XG4gICAgICB0aGlzLmNsb3NlRHJvcERvd24oKTtcbiAgICB9XG4gIH1cblxuICBnZXQgbnpEaXNhYmxlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fZGlzYWJsZWQ7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpBbGxvd0NsZWFyKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fYWxsb3dDbGVhciA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBnZXQgbnpBbGxvd0NsZWFyKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9hbGxvd0NsZWFyO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56U2hvd1NlYXJjaCh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX3Nob3dTZWFyY2ggPSB0b0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56U2hvd1NlYXJjaCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fc2hvd1NlYXJjaDtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuelBsYWNlSG9sZGVyKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9wbGFjZWhvbGRlciA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IG56UGxhY2VIb2xkZXIoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fcGxhY2Vob2xkZXI7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdjbGljaycpXG4gIG9uQ2xpY2soKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLm56RGlzYWJsZWQpIHtcbiAgICAgIHRoaXMubnpPcGVuID0gIXRoaXMubnpPcGVuO1xuICAgICAgdGhpcy5uek9wZW5DaGFuZ2UuZW1pdCh0aGlzLm56T3Blbik7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bicsIFsgJyRldmVudCcgXSlcbiAgX2hhbmRsZUtleWRvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fZGlzYWJsZWQpIHsgcmV0dXJuOyB9XG5cbiAgICBjb25zdCBrZXlDb2RlID0gZXZlbnQua2V5Q29kZTtcblxuICAgIGlmICghdGhpcy5fb3Blbikge1xuICAgICAgaWYgKGtleUNvZGUgPT09IFNQQUNFIHx8IGtleUNvZGUgPT09IERPV05fQVJST1cpIHtcbiAgICAgICAgdGhpcy5uek9wZW4gPSB0cnVlO1xuICAgICAgICB0aGlzLm56T3BlbkNoYW5nZS5lbWl0KHRoaXMubnpPcGVuKTtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGtleUNvZGUgPT09IFRBQikge1xuICAgICAgLy8gaWYgKGtleUNvZGUgPT09IFNQQUNFIHx8IGtleUNvZGUgPT09IFRBQikgeyAvLyAjMjIwMVxuICAgICAgICB0aGlzLm56T3BlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLm56T3BlbkNoYW5nZS5lbWl0KHRoaXMubnpPcGVuKTtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB1cGRhdGVBdXRvRm9jdXMoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNJbml0ICYmIHRoaXMubnpTZWxlY3RUb3BDb250cm9sQ29tcG9uZW50LmlucHV0RWxlbWVudCkge1xuICAgICAgaWYgKHRoaXMubnpBdXRvRm9jdXMpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5uelNlbGVjdFRvcENvbnRyb2xDb21wb25lbnQuaW5wdXRFbGVtZW50Lm5hdGl2ZUVsZW1lbnQsICdhdXRvZm9jdXMnLCAnYXV0b2ZvY3VzJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUF0dHJpYnV0ZSh0aGlzLm56U2VsZWN0VG9wQ29udHJvbENvbXBvbmVudC5pbnB1dEVsZW1lbnQubmF0aXZlRWxlbWVudCwgJ2F1dG9mb2N1cycpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvY3VzKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLm56U2VsZWN0VG9wQ29udHJvbENvbXBvbmVudC5pbnB1dEVsZW1lbnQpIHtcbiAgICAgIHRoaXMubnpTZWxlY3RUb3BDb250cm9sQ29tcG9uZW50LmlucHV0RWxlbWVudC5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG4gICAgfVxuICB9XG5cbiAgYmx1cigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5uelNlbGVjdFRvcENvbnRyb2xDb21wb25lbnQuaW5wdXRFbGVtZW50KSB7XG4gICAgICB0aGlzLm56U2VsZWN0VG9wQ29udHJvbENvbXBvbmVudC5pbnB1dEVsZW1lbnQubmF0aXZlRWxlbWVudC5ibHVyKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqIG92ZXJsYXkgY2FuIG5vdCBiZSBhbHdheXMgb3BlbiAsIHJlb3BlbiBvdmVybGF5IGFmdGVyIHByZXNzIGVzYyAqKi9cbiAgaGFuZGxlRXNjQnVnKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLm56T3BlbiAmJiB0aGlzLmNka0Nvbm5lY3RlZE92ZXJsYXkgJiYgdGhpcy5jZGtDb25uZWN0ZWRPdmVybGF5Lm92ZXJsYXlSZWYgJiYgIXRoaXMuY2RrQ29ubmVjdGVkT3ZlcmxheS5vdmVybGF5UmVmLmJhY2tkcm9wRWxlbWVudCkge1xuICAgICAgdGhpcy5jZGtDb25uZWN0ZWRPdmVybGF5Lm9wZW4gPSB0cnVlO1xuICAgICAgdGhpcy5jZGtDb25uZWN0ZWRPdmVybGF5Lm5nT25DaGFuZ2VzKHsgb3BlbjogbmV3IFNpbXBsZUNoYW5nZShmYWxzZSwgdHJ1ZSwgZmFsc2UpIH0pO1xuICAgIH1cbiAgfVxuXG4gIG9uS2V5RG93bkNka092ZXJsYXlPcmlnaW4oZTogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgIGlmICh0aGlzLm56T3B0aW9uQ29udGFpbmVyQ29tcG9uZW50KSB7XG4gICAgICB0aGlzLm56T3B0aW9uQ29udGFpbmVyQ29tcG9uZW50Lm9uS2V5RG93blVsKGUpO1xuICAgIH1cbiAgfVxuXG4gIGNsb3NlRHJvcERvd24oKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubnpPcGVuKSB7XG4gICAgICB0aGlzLm9uVG91Y2hlZCgpO1xuICAgICAgdGhpcy5uek9wZW4gPSBmYWxzZTtcbiAgICAgIHRoaXMubnpPcGVuQ2hhbmdlLmVtaXQodGhpcy5uek9wZW4pO1xuICAgICAgdGhpcy5ibHVyKCk7XG4gICAgfVxuICB9XG5cbiAgb25Qb3NpdGlvbkNoYW5nZShwb3NpdGlvbjogQ29ubmVjdGVkT3ZlcmxheVBvc2l0aW9uQ2hhbmdlKTogdm9pZCB7XG4gICAgdGhpcy5kcm9wRG93blBvc2l0aW9uID0gcG9zaXRpb24uY29ubmVjdGlvblBhaXIub3JpZ2luWTtcbiAgICB0aGlzLnVwZGF0ZURyb3BEb3duQ2xhc3NNYXAoKTtcbiAgfVxuXG4gIG9uQ2xpY2tPcHRpb25Gcm9tT3B0aW9uQ29udGFpbmVyKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzU2luZ2xlTW9kZSkge1xuICAgICAgdGhpcy5jbG9zZURyb3BEb3duKCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLm56TW9kZSA9PT0gJ3RhZ3MnKSB7XG4gICAgICB0aGlzLm9uU2VhcmNoKCcnLCB0cnVlKTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGVDZGtDb25uZWN0ZWRPdmVybGF5U3RhdHVzKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzSW5pdCAmJiB0aGlzLm56T3BlbiAmJiB0aGlzLmNka092ZXJsYXlPcmlnaW4pIHtcbiAgICAgIGlmICh0aGlzLm56RHJvcGRvd25NYXRjaFNlbGVjdFdpZHRoKSB7XG4gICAgICAgIHRoaXMub3ZlcmxheVdpZHRoID0gdGhpcy5jZGtPdmVybGF5T3JpZ2luLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcbiAgICAgICAgdGhpcy5jZGtDb25uZWN0ZWRPdmVybGF5Lm92ZXJsYXlSZWYudXBkYXRlU2l6ZSh7IHdpZHRoOiB0aGlzLm92ZXJsYXlXaWR0aCB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub3ZlcmxheU1pbldpZHRoID0gdGhpcy5jZGtPdmVybGF5T3JpZ2luLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcbiAgICAgICAgdGhpcy5jZGtDb25uZWN0ZWRPdmVybGF5Lm92ZXJsYXlSZWYudXBkYXRlU2l6ZSh7IG1pbldpZHRoOiB0aGlzLm92ZXJsYXlNaW5XaWR0aCB9KTtcbiAgICAgIH1cblxuICAgIH1cbiAgICB0aGlzLnVwZGF0ZUNka0Nvbm5lY3RlZE92ZXJsYXlQb3NpdGlvbnMoKTtcbiAgICBpZiAodGhpcy5jZGtDb25uZWN0ZWRPdmVybGF5ICYmIHRoaXMuY2RrQ29ubmVjdGVkT3ZlcmxheS5vdmVybGF5UmVmICYmIHRoaXMuY2RrQ29ubmVjdGVkT3ZlcmxheS5vdmVybGF5UmVmLmJhY2tkcm9wRWxlbWVudCkge1xuICAgICAgaWYgKHRoaXMubnpPcGVuKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlU3R5bGUodGhpcy5jZGtDb25uZWN0ZWRPdmVybGF5Lm92ZXJsYXlSZWYuYmFja2Ryb3BFbGVtZW50LCAnZGlzcGxheScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmNka0Nvbm5lY3RlZE92ZXJsYXkub3ZlcmxheVJlZi5iYWNrZHJvcEVsZW1lbnQsICdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB1cGRhdGVDZGtDb25uZWN0ZWRPdmVybGF5UG9zaXRpb25zKCk6IHZvaWQge1xuICAgIC8qKiB3YWl0IGZvciBpbnB1dCBzaXplIGNoYW5nZSAqKi9cbiAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuY2RrQ29ubmVjdGVkT3ZlcmxheS5vdmVybGF5UmVmLnVwZGF0ZVBvc2l0aW9uKCksIDE2MCk7XG4gIH1cblxuICBnZXQgaXNTaW5nbGVNb2RlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLm56TW9kZSA9PT0gJ2RlZmF1bHQnO1xuICB9XG5cbiAgZ2V0IGlzTXVsdGlwbGVPclRhZ3MoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubnpNb2RlID09PSAndGFncycgfHwgdGhpcy5uek1vZGUgPT09ICdtdWx0aXBsZSc7XG4gIH1cblxuICAvKiogb3B0aW9uIGNvbnRhaW5lciBuekxpc3RPZlNlbGVjdGVkVmFsdWVDaGFuZ2UgLT4gdXBkYXRlIG5nTW9kZWwgKiovXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgdXBkYXRlTGlzdE9mU2VsZWN0ZWRWYWx1ZUZyb21PcHRpb25Db250YWluZXIodmFsdWU6IGFueVtdKTogdm9pZCB7XG4gICAgdGhpcy5jbGVhclNlYXJjaFZhbHVlKCk7XG4gICAgdGhpcy51cGRhdGVGcm9tU2VsZWN0ZWRMaXN0KHZhbHVlKTtcbiAgfVxuXG4gIC8qKiBvcHRpb24gY29udGFpbmVyIG56TGlzdE9mU2VsZWN0ZWRWYWx1ZUNoYW5nZSAtPiB1cGRhdGUgbmdNb2RlbCAqKi9cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICB1cGRhdGVMaXN0T2ZTZWxlY3RlZFZhbHVlRnJvbVRvcENvbnRyb2wodmFsdWU6IGFueVtdKTogdm9pZCB7XG4gICAgdGhpcy5jbGVhclNlYXJjaFZhbHVlKCk7XG4gICAgdGhpcy51cGRhdGVGcm9tU2VsZWN0ZWRMaXN0KHZhbHVlKTtcbiAgfVxuXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgdXBkYXRlRnJvbVNlbGVjdGVkTGlzdCh2YWx1ZTogYW55W10pOiB2b2lkIHtcbiAgICBsZXQgbW9kZWxWYWx1ZTtcbiAgICBpZiAodGhpcy5pc1NpbmdsZU1vZGUpIHtcbiAgICAgIGlmICh2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgbW9kZWxWYWx1ZSA9IHZhbHVlWyAwIF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG1vZGVsVmFsdWUgPSB2YWx1ZTtcbiAgICAgIHRoaXMudXBkYXRlQ2RrQ29ubmVjdGVkT3ZlcmxheVBvc2l0aW9ucygpO1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZU5nTW9kZWwodmFsdWUsIG1vZGVsVmFsdWUpO1xuICB9XG5cbiAgb25TZWFyY2godmFsdWU6IHN0cmluZywgZW1pdDogYm9vbGVhbik6IHZvaWQge1xuICAgIGlmIChlbWl0ICYmICh0aGlzLnNlYXJjaFZhbHVlICE9PSB2YWx1ZSkpIHtcbiAgICAgIHRoaXMubnpPblNlYXJjaC5lbWl0KHZhbHVlKTtcbiAgICAgIHRoaXMuc2VhcmNoVmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICBjbGVhck5nTW9kZWwoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNTaW5nbGVNb2RlKSB7XG4gICAgICB0aGlzLnVwZGF0ZU5nTW9kZWwoW10sIG51bGwpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnVwZGF0ZU5nTW9kZWwoW10sIFtdKTtcbiAgICB9XG4gIH1cblxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gIHVwZGF0ZU5nTW9kZWwobGlzdDogYW55W10sIHZhbHVlOiBzdHJpbmcgfCBzdHJpbmdbXSk6IHZvaWQge1xuICAgIHRoaXMubGlzdE9mU2VsZWN0ZWRWYWx1ZSA9IGxpc3Q7XG4gICAgaWYgKHZhbHVlICE9PSB0aGlzLnZhbHVlKSB7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICB0aGlzLm9uQ2hhbmdlKHRoaXMudmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIGxpc3RPZlRlbXBsYXRlT3B0aW9uQ2hhbmdlKHZhbHVlOiBOek9wdGlvbkNvbXBvbmVudFtdKTogdm9pZCB7XG4gICAgdGhpcy5saXN0T2ZUZW1wbGF0ZU9wdGlvbiA9IHZhbHVlO1xuICB9XG5cbiAgdXBkYXRlRHJvcERvd25DbGFzc01hcCgpOiB2b2lkIHtcbiAgICB0aGlzLmRyb3BEb3duQ2xhc3NNYXAgPSB7XG4gICAgICBbICdhbnQtc2VsZWN0LWRyb3Bkb3duJyBdICAgICAgICAgICAgICAgICAgICAgOiB0cnVlLFxuICAgICAgWyBgYW50LXNlbGVjdC1kcm9wZG93bi0tc2luZ2xlYCBdICAgICAgICAgICAgIDogdGhpcy5pc1NpbmdsZU1vZGUsXG4gICAgICBbIGBhbnQtc2VsZWN0LWRyb3Bkb3duLS1tdWx0aXBsZWAgXSAgICAgICAgICAgOiB0aGlzLmlzTXVsdGlwbGVPclRhZ3MsXG4gICAgICBbIGBhbnQtc2VsZWN0LWRyb3Bkb3duLXBsYWNlbWVudC1ib3R0b21MZWZ0YCBdOiB0aGlzLmRyb3BEb3duUG9zaXRpb24gPT09ICdib3R0b20nLFxuICAgICAgWyBgYW50LXNlbGVjdC1kcm9wZG93bi1wbGFjZW1lbnQtdG9wTGVmdGAgXSAgIDogdGhpcy5kcm9wRG93blBvc2l0aW9uID09PSAndG9wJyxcbiAgICAgIFsgYCR7dGhpcy5uekRyb3Bkb3duQ2xhc3NOYW1lfWAgXSAgICAgICAgICAgICA6ICEhdGhpcy5uekRyb3Bkb3duQ2xhc3NOYW1lXG4gICAgfTtcbiAgfVxuXG4gIG9uQ2xlYXJTZWxlY3Rpb24oZTogTW91c2VFdmVudCk6IHZvaWQge1xuICAgIC8vIFRPRE86IHNob3VsZCBub3QgY2xlYXIgZGlzYWJsZWQgb3B0aW9uID9cbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHRoaXMuY2xlYXJOZ01vZGVsKCk7XG4gIH1cblxuICBjbGVhclNlYXJjaFZhbHVlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzU2luZ2xlTW9kZSkge1xuICAgICAgdGhpcy5uelNlbGVjdFRvcENvbnRyb2xDb21wb25lbnQuc2V0SW5wdXRWYWx1ZSgnJywgZmFsc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm56U2VsZWN0VG9wQ29udHJvbENvbXBvbmVudC5zZXRJbnB1dFZhbHVlKCcnLCBmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7XG4gIH1cblxuICAvKiogdXBkYXRlIG5nTW9kZWwgLT4gdXBkYXRlIGxpc3RPZlNlbGVjdGVkVmFsdWUgKiovXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55IHwgYW55W10pOiB2b2lkIHtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgaWYgKGlzTm90TmlsKHZhbHVlKSkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHRoaXMubGlzdE9mU2VsZWN0ZWRWYWx1ZSA9IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5saXN0T2ZTZWxlY3RlZFZhbHVlID0gWyB2YWx1ZSBdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxpc3RPZlNlbGVjdGVkVmFsdWUgPSBbXTtcbiAgICB9XG4gIH1cblxuICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAodmFsdWU6IHN0cmluZyB8IHN0cmluZ1tdKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5vbkNoYW5nZSA9IGZuO1xuICB9XG5cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0aGlzLm9uVG91Y2hlZCA9IGZuO1xuICB9XG5cbiAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5uekRpc2FibGVkID0gaXNEaXNhYmxlZDtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuaXNEZXN0cm95ID0gZmFsc2U7XG4gICAgdGhpcy51cGRhdGVEcm9wRG93bkNsYXNzTWFwKCk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgdGhpcy5pc0luaXQgPSB0cnVlO1xuICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gdGhpcy51cGRhdGVDZGtDb25uZWN0ZWRPdmVybGF5U3RhdHVzKCkpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5pc0Rlc3Ryb3kgPSB0cnVlO1xuICB9XG59XG4iLCJpbXBvcnQgeyBPdmVybGF5TW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IE56STE4bk1vZHVsZSB9IGZyb20gJy4uL2kxOG4vbnotaTE4bi5tb2R1bGUnO1xuaW1wb3J0IHsgTnpJY29uTW9kdWxlIH0gZnJvbSAnLi4vaWNvbi9uei1pY29uLm1vZHVsZSc7XG5pbXBvcnQgeyBOek9wdGlvbkNvbnRhaW5lckNvbXBvbmVudCB9IGZyb20gJy4vbnotb3B0aW9uLWNvbnRhaW5lci5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpPcHRpb25Hcm91cENvbXBvbmVudCB9IGZyb20gJy4vbnotb3B0aW9uLWdyb3VwLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOek9wdGlvbkxpQ29tcG9uZW50IH0gZnJvbSAnLi9uei1vcHRpb24tbGkuY29tcG9uZW50JztcbmltcG9ydCB7IE56T3B0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi9uei1vcHRpb24uY29tcG9uZW50JztcbmltcG9ydCB7IE56T3B0aW9uUGlwZSwgTnpTdWJPcHRpb25QaXBlIH0gZnJvbSAnLi9uei1vcHRpb24ucGlwZSc7XG5pbXBvcnQgeyBOelNlbGVjdFRvcENvbnRyb2xDb21wb25lbnQgfSBmcm9tICcuL256LXNlbGVjdC10b3AtY29udHJvbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpTZWxlY3RVbnNlbGVjdGFibGVEaXJlY3RpdmUgfSBmcm9tICcuL256LXNlbGVjdC11bnNlbGVjdGFibGUuZGlyZWN0aXZlJztcbmltcG9ydCB7IE56U2VsZWN0Q29tcG9uZW50IH0gZnJvbSAnLi9uei1zZWxlY3QuY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0cyAgICAgOiBbIENvbW1vbk1vZHVsZSwgRm9ybXNNb2R1bGUsIE92ZXJsYXlNb2R1bGUsIE56STE4bk1vZHVsZSwgTnpJY29uTW9kdWxlXSxcbiAgZGVjbGFyYXRpb25zOiBbIE56T3B0aW9uUGlwZSwgTnpTdWJPcHRpb25QaXBlLCBOek9wdGlvbkNvbXBvbmVudCwgTnpTZWxlY3RDb21wb25lbnQsIE56T3B0aW9uQ29udGFpbmVyQ29tcG9uZW50LCBOek9wdGlvbkdyb3VwQ29tcG9uZW50LCBOek9wdGlvbkxpQ29tcG9uZW50LCBOelNlbGVjdFRvcENvbnRyb2xDb21wb25lbnQsIE56U2VsZWN0VW5zZWxlY3RhYmxlRGlyZWN0aXZlIF0sXG4gIGV4cG9ydHMgICAgIDogWyBOek9wdGlvbkNvbXBvbmVudCwgTnpTZWxlY3RDb21wb25lbnQsIE56T3B0aW9uQ29udGFpbmVyQ29tcG9uZW50LCBOek9wdGlvbkdyb3VwQ29tcG9uZW50LCBOelNlbGVjdFRvcENvbnRyb2xDb21wb25lbnQgXVxufSlcbmV4cG9ydCBjbGFzcyBOelNlbGVjdE1vZHVsZSB7XG59XG4iLCJpbXBvcnQgeyBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW256RGF0ZUNlbGxdJ1xufSlcbmV4cG9ydCBjbGFzcyBOekRhdGVDZWxsRGlyZWN0aXZlIHsgfVxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbnpNb250aENlbGxdJ1xufSlcbmV4cG9ydCBjbGFzcyBOek1vbnRoQ2VsbERpcmVjdGl2ZSB7IH1cblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW256RGF0ZUZ1bGxDZWxsXSdcbn0pXG5leHBvcnQgY2xhc3MgTnpEYXRlRnVsbENlbGxEaXJlY3RpdmUgeyB9XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tuek1vbnRoRnVsbENlbGxdJ1xufSlcbmV4cG9ydCBjbGFzcyBOek1vbnRoRnVsbENlbGxEaXJlY3RpdmUgeyB9XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgc2V0TW9udGggZnJvbSAnZGF0ZS1mbnMvc2V0X21vbnRoJztcbmltcG9ydCB7IE56STE4blNlcnZpY2UgYXMgSTE4biB9IGZyb20gJy4uL2kxOG4vbnotaTE4bi5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yICAgOiAnbnotY2FsZW5kYXItaGVhZGVyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL256LWNhbGVuZGFyLWhlYWRlci5jb21wb25lbnQuaHRtbCcsXG4gIGhvc3QgICAgICAgOiB7XG4gICAgJ1tzdHlsZS5kaXNwbGF5XScgICAgICAgICAgICAgICAgOiBgJ2Jsb2NrJ2AsXG4gICAgJ1tjbGFzcy5hbnQtZnVsbGNhbGVuZGFyLWhlYWRlcl0nOiBgdHJ1ZWBcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBOekNhbGVuZGFySGVhZGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkgbW9kZTogJ21vbnRoJyB8ICd5ZWFyJyA9ICdtb250aCc7XG4gIEBPdXRwdXQoKSBtb2RlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8J21vbnRoJyB8ICd5ZWFyJz4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgQElucHV0KCkgZnVsbHNjcmVlbjogYm9vbGVhbiA9IHRydWU7XG5cbiAgQElucHV0KClcbiAgc2V0IGFjdGl2ZURhdGUodmFsdWU6IERhdGUpIHtcbiAgICB0aGlzLl9hY3RpdmVEYXRlID0gdmFsdWU7XG4gICAgdGhpcy5zZXRVcFllYXJzKCk7XG4gIH1cblxuICBnZXQgYWN0aXZlRGF0ZSgpOiBEYXRlIHtcbiAgICByZXR1cm4gdGhpcy5fYWN0aXZlRGF0ZTtcbiAgfVxuXG4gIEBPdXRwdXQoKSB5ZWFyQ2hhbmdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIG1vbnRoQ2hhbmdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBfYWN0aXZlRGF0ZSA9IG5ldyBEYXRlKCk7XG4gIHllYXJPZmZzZXQ6IG51bWJlciA9IDEwO1xuICB5ZWFyVG90YWw6IG51bWJlciA9IDIwO1xuICB5ZWFyczogQXJyYXk8eyBsYWJlbDogc3RyaW5nLCB2YWx1ZTogbnVtYmVyIH0+O1xuICBtb250aHM6IEFycmF5PHsgbGFiZWw6IHN0cmluZywgdmFsdWU6IG51bWJlciB9PjtcblxuICBnZXQgYWN0aXZlWWVhcigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmFjdGl2ZURhdGUuZ2V0RnVsbFllYXIoKTtcbiAgfVxuXG4gIGdldCBhY3RpdmVNb250aCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmFjdGl2ZURhdGUuZ2V0TW9udGgoKTtcbiAgfVxuXG4gIGdldCBzaXplKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZnVsbHNjcmVlbiA/ICdkZWZhdWx0JyA6ICdzbWFsbCc7XG4gIH1cblxuICBnZXQgeWVhclR5cGVUZXh0KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuaTE4bi5nZXRMb2NhbGUoKS5DYWxlbmRhci55ZWFyO1xuICB9XG5cbiAgZ2V0IG1vbnRoVHlwZVRleHQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5pMThuLmdldExvY2FsZSgpLkNhbGVuZGFyLm1vbnRoO1xuICB9XG5cbiAgcHJpdmF0ZSBwcmVmaXhDbHMgPSAnYW50LWZ1bGxjYWxlbmRhcic7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpMThuOiBJMThuKSB7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnNldFVwWWVhcnMoKTtcbiAgICB0aGlzLnNldFVwTW9udGhzKCk7XG4gIH1cblxuICB1cGRhdGVZZWFyKHllYXI6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMueWVhckNoYW5nZS5lbWl0KHllYXIpO1xuICAgIHRoaXMuc2V0VXBZZWFycyh5ZWFyKTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0VXBZZWFycyh5ZWFyPzogbnVtYmVyKTogdm9pZCB7XG4gICAgY29uc3Qgc3RhcnQgPSAoeWVhciB8fCB0aGlzLmFjdGl2ZVllYXIpIC0gdGhpcy55ZWFyT2Zmc2V0O1xuICAgIGNvbnN0IGVuZCA9IHN0YXJ0ICsgdGhpcy55ZWFyVG90YWw7XG5cbiAgICB0aGlzLnllYXJzID0gW107XG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgIHRoaXMueWVhcnMucHVzaCh7IGxhYmVsOiBgJHtpfWAsIHZhbHVlOiBpIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2V0VXBNb250aHMoKTogdm9pZCB7XG4gICAgdGhpcy5tb250aHMgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgY29uc3QgZGF0ZUluTW9udGggPSBzZXRNb250aCh0aGlzLmFjdGl2ZURhdGUsIGkpO1xuICAgICAgY29uc3QgbW9udGhUZXh0ID0gdGhpcy5pMThuLmZvcm1hdERhdGUoZGF0ZUluTW9udGgsICdNTU0nKTtcbiAgICAgIHRoaXMubW9udGhzLnB1c2goeyBsYWJlbDogbW9udGhUZXh0LCB2YWx1ZTogaSB9KTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XG5pbXBvcnQgeyBmb3J3YXJkUmVmLCBDb21wb25lbnQsIENvbnRlbnRDaGlsZCwgRXZlbnRFbWl0dGVyLCBIb3N0QmluZGluZywgSW5wdXQsIE9uSW5pdCwgT3V0cHV0LCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IGFkZERheXMgZnJvbSAnZGF0ZS1mbnMvYWRkX2RheXMnO1xuaW1wb3J0IGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyBmcm9tICdkYXRlLWZucy9kaWZmZXJlbmNlX2luX2NhbGVuZGFyX2RheXMnO1xuaW1wb3J0IGRpZmZlcmVuY2VJbkNhbGVuZGFyTW9udGhzIGZyb20gJ2RhdGUtZm5zL2RpZmZlcmVuY2VfaW5fY2FsZW5kYXJfbW9udGhzJztcbmltcG9ydCBkaWZmZXJlbmNlSW5DYWxlbmRhcldlZWtzIGZyb20gJ2RhdGUtZm5zL2RpZmZlcmVuY2VfaW5fY2FsZW5kYXJfd2Vla3MnO1xuaW1wb3J0IGVuZE9mTW9udGggZnJvbSAnZGF0ZS1mbnMvZW5kX29mX21vbnRoJztcbmltcG9ydCBpc1NhbWVEYXkgZnJvbSAnZGF0ZS1mbnMvaXNfc2FtZV9kYXknO1xuaW1wb3J0IGlzU2FtZU1vbnRoIGZyb20gJ2RhdGUtZm5zL2lzX3NhbWVfbW9udGgnO1xuaW1wb3J0IGlzU2FtZVllYXIgZnJvbSAnZGF0ZS1mbnMvaXNfc2FtZV95ZWFyJztcbmltcG9ydCBpc1RoaXNNb250aCBmcm9tICdkYXRlLWZucy9pc190aGlzX21vbnRoJztcbmltcG9ydCBpc1RoaXNZZWFyIGZyb20gJ2RhdGUtZm5zL2lzX3RoaXNfeWVhcic7XG5pbXBvcnQgc2V0TW9udGggZnJvbSAnZGF0ZS1mbnMvc2V0X21vbnRoJztcbmltcG9ydCBzZXRZZWFyIGZyb20gJ2RhdGUtZm5zL3NldF95ZWFyJztcbmltcG9ydCBzdGFydE9mTW9udGggZnJvbSAnZGF0ZS1mbnMvc3RhcnRfb2ZfbW9udGgnO1xuaW1wb3J0IHN0YXJ0T2ZXZWVrIGZyb20gJ2RhdGUtZm5zL3N0YXJ0X29mX3dlZWsnO1xuaW1wb3J0IHN0YXJ0T2ZZZWFyIGZyb20gJ2RhdGUtZm5zL3N0YXJ0X29mX3llYXInO1xuaW1wb3J0IHsgTnpJMThuU2VydmljZSBhcyBJMThuIH0gZnJvbSAnLi4vaTE4bi9uei1pMThuLnNlcnZpY2UnO1xuaW1wb3J0IHsgTnpEYXRlQ2VsbERpcmVjdGl2ZSBhcyBEYXRlQ2VsbCwgTnpEYXRlRnVsbENlbGxEaXJlY3RpdmUgYXMgRGF0ZUZ1bGxDZWxsLCBOek1vbnRoQ2VsbERpcmVjdGl2ZSBhcyBNb250aENlbGwsIE56TW9udGhGdWxsQ2VsbERpcmVjdGl2ZSBhcyBNb250aEZ1bGxDZWxsIH0gZnJvbSAnLi9uei1jYWxlbmRhci1jZWxscyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ256LWNhbGVuZGFyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL256LWNhbGVuZGFyLmNvbXBvbmVudC5odG1sJyxcbiAgcHJvdmlkZXJzOiBbXG4gICAgeyBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUiwgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTnpDYWxlbmRhckNvbXBvbmVudCksIG11bHRpOiB0cnVlIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBOekNhbGVuZGFyQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE9uSW5pdCB7XG4gIEBJbnB1dCgpIG56TW9kZTogJ21vbnRoJ3wneWVhcicgPSAnbW9udGgnO1xuICBAT3V0cHV0KCkgbnpNb2RlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8J21vbnRoJ3wneWVhcic+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIEBJbnB1dCgpIHNldCBuelZhbHVlKHZhbHVlOiBEYXRlKSB7IHRoaXMudXBkYXRlRGF0ZSh2YWx1ZSwgZmFsc2UpOyB9XG4gIEBPdXRwdXQoKSBuelZhbHVlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8RGF0ZT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgQElucHV0KClcbiAgc2V0IG56RGF0ZUNlbGwodmFsdWU6IFRlbXBsYXRlUmVmPHskaW1wbGljaXQ6IERhdGV9PikgeyB0aGlzLmRhdGVDZWxsID0gdmFsdWU7IH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpEYXRlRnVsbENlbGwodmFsdWU6IFRlbXBsYXRlUmVmPHskaW1wbGljaXQ6IERhdGV9PikgeyB0aGlzLmRhdGVGdWxsQ2VsbCA9IHZhbHVlOyB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56TW9udGhDZWxsKHZhbHVlOiBUZW1wbGF0ZVJlZjx7JGltcGxpY2l0OiBEYXRlfT4pIHsgdGhpcy5tb250aENlbGwgPSB2YWx1ZTsgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuek1vbnRoRnVsbENlbGwodmFsdWU6IFRlbXBsYXRlUmVmPHskaW1wbGljaXQ6IERhdGV9PikgeyB0aGlzLm1vbnRoRnVsbENlbGwgPSB2YWx1ZTsgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekZ1bGxzY3JlZW4odmFsdWU6IGJvb2xlYW4pIHsgdGhpcy5mdWxsc2NyZWVuID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTsgfVxuICBnZXQgbnpGdWxsc2NyZWVuKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5mdWxsc2NyZWVuOyB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56Q2FyZCh2YWx1ZTogYm9vbGVhbikgeyB0aGlzLmZ1bGxzY3JlZW4gPSAhY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTsgfVxuICBnZXQgbnpDYXJkKCk6IGJvb2xlYW4geyByZXR1cm4gIXRoaXMuZnVsbHNjcmVlbjsgfVxuXG4gIEBDb250ZW50Q2hpbGQoRGF0ZUNlbGwsIHtyZWFkOiBUZW1wbGF0ZVJlZn0pXG4gIHNldCBkYXRlQ2VsbENoaWxkKHZhbHVlOiBUZW1wbGF0ZVJlZjx7JGltcGxpY2l0OiBEYXRlfT4pIHsgaWYgKHZhbHVlKSB7IHRoaXMuZGF0ZUNlbGwgPSB2YWx1ZTsgfSB9XG5cbiAgQENvbnRlbnRDaGlsZChEYXRlRnVsbENlbGwsIHtyZWFkOiBUZW1wbGF0ZVJlZn0pXG4gIHNldCBkYXRlRnVsbENlbGxDaGlsZCh2YWx1ZTogVGVtcGxhdGVSZWY8eyRpbXBsaWNpdDogRGF0ZX0+KSB7IGlmICh2YWx1ZSkgeyB0aGlzLmRhdGVGdWxsQ2VsbCA9IHZhbHVlOyB9IH1cblxuICBAQ29udGVudENoaWxkKE1vbnRoQ2VsbCwge3JlYWQ6IFRlbXBsYXRlUmVmfSlcbiAgc2V0IG1vbnRoQ2VsbENoaWxkKHZhbHVlOiBUZW1wbGF0ZVJlZjx7JGltcGxpY2l0OiBEYXRlfT4pIHsgaWYgKHZhbHVlKSB7IHRoaXMubW9udGhDZWxsID0gdmFsdWU7IH0gfVxuXG4gIEBDb250ZW50Q2hpbGQoTW9udGhGdWxsQ2VsbCwge3JlYWQ6IFRlbXBsYXRlUmVmfSlcbiAgc2V0IG1vbnRoRnVsbENlbGxDaGlsZCh2YWx1ZTogVGVtcGxhdGVSZWY8eyRpbXBsaWNpdDogRGF0ZX0+KSB7IGlmICh2YWx1ZSkgeyB0aGlzLm1vbnRoRnVsbENlbGwgPSB2YWx1ZTsgfSB9XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hbnQtZnVsbGNhbGVuZGFyLS1mdWxsc2NyZWVuJylcbiAgZnVsbHNjcmVlbiA9IHRydWU7XG5cbiAgZGF5c0luV2VlazogRGF5Q2VsbENvbnRleHRbXSA9IFtdO1xuICBtb250aHNJblllYXI6IE1vbnRoQ2VsbENvbnRleHRbXSA9IFtdO1xuICBkYXRlTWF0cml4OiBEYXRlQ2VsbENvbnRleHRbXVtdID0gW107XG4gIGFjdGl2ZURhdGU6IERhdGUgPSBuZXcgRGF0ZSgpO1xuICBjdXJyZW50RGF0ZVJvdzogbnVtYmVyID0gLTE7XG4gIGN1cnJlbnREYXRlQ29sOiBudW1iZXIgPSAtMTtcbiAgYWN0aXZlRGF0ZVJvdzogbnVtYmVyID0gLTE7XG4gIGFjdGl2ZURhdGVDb2w6IG51bWJlciA9IC0xO1xuICBjdXJyZW50TW9udGhSb3c6IG51bWJlciA9IC0xO1xuICBjdXJyZW50TW9udGhDb2w6IG51bWJlciA9IC0xO1xuICBhY3RpdmVNb250aFJvdzogbnVtYmVyID0gLTE7XG4gIGFjdGl2ZU1vbnRoQ29sOiBudW1iZXIgPSAtMTtcbiAgZGF0ZUNlbGw6IFRlbXBsYXRlUmVmPHskaW1wbGljaXQ6IERhdGV9PnxudWxsID0gbnVsbDtcbiAgZGF0ZUZ1bGxDZWxsOiBUZW1wbGF0ZVJlZjx7JGltcGxpY2l0OiBEYXRlfT58bnVsbCA9IG51bGw7XG4gIG1vbnRoQ2VsbDogVGVtcGxhdGVSZWY8eyRpbXBsaWNpdDogRGF0ZX0+fG51bGwgPSBudWxsO1xuICBtb250aEZ1bGxDZWxsOiBUZW1wbGF0ZVJlZjx7JGltcGxpY2l0OiBEYXRlfT58bnVsbCA9IG51bGw7XG5cbiAgcHJpdmF0ZSBwcmVmaXhDbHMgPSAnYW50LWZ1bGxjYWxlbmRhcic7XG4gIHByaXZhdGUgY3VycmVudERhdGUgPSBuZXcgRGF0ZSgpO1xuICBwcml2YXRlIG9uQ2hhbmdlRm46IChkYXRlOiBEYXRlKSA9PiB2b2lkID0gKCkgPT4ge307XG4gIHByaXZhdGUgb25Ub3VjaEZuOiAoKSA9PiB2b2lkID0gKCkgPT4ge307XG5cbiAgcHJpdmF0ZSBnZXQgY2FsZW5kYXJTdGFydCgpOiBEYXRlIHtcbiAgICByZXR1cm4gc3RhcnRPZldlZWsoc3RhcnRPZk1vbnRoKHRoaXMuYWN0aXZlRGF0ZSkpO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpMThuOiBJMThuKSB7IH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnNldFVwRGF5c0luV2VlaygpO1xuICAgIHRoaXMuc2V0VXBNb250aHNJblllYXIoKTtcbiAgICB0aGlzLnNldFVwRGF0ZU1hdHJpeCgpO1xuICAgIHRoaXMuY2FsY3VsYXRlQ3VycmVudERhdGUoKTtcbiAgICB0aGlzLmNhbGN1bGF0ZUFjdGl2ZURhdGUoKTtcbiAgICB0aGlzLmNhbGN1bGF0ZUN1cnJlbnRNb250aCgpO1xuICAgIHRoaXMuY2FsY3VsYXRlQWN0aXZlTW9udGgoKTtcbiAgfVxuXG4gIG9uTW9kZUNoYW5nZShtb2RlOiAnbW9udGgnfCd5ZWFyJyk6IHZvaWQge1xuICAgIHRoaXMubnpNb2RlQ2hhbmdlLmVtaXQobW9kZSk7XG4gIH1cblxuICBvbkRhdGVTZWxlY3QoZGF0ZTogRGF0ZSk6IHZvaWQge1xuICAgIHRoaXMudXBkYXRlRGF0ZShkYXRlKTtcbiAgfVxuXG4gIG9uWWVhclNlbGVjdCh5ZWFyOiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCBkYXRlID0gc2V0WWVhcih0aGlzLmFjdGl2ZURhdGUsIHllYXIpO1xuICAgIHRoaXMudXBkYXRlRGF0ZShkYXRlKTtcbiAgfVxuXG4gIG9uTW9udGhTZWxlY3QobW9udGg6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IGRhdGUgPSBzZXRNb250aCh0aGlzLmFjdGl2ZURhdGUsIG1vbnRoKTtcbiAgICB0aGlzLnVwZGF0ZURhdGUoZGF0ZSk7XG4gIH1cblxuICB3cml0ZVZhbHVlKHZhbHVlOiBEYXRlfG51bGwpOiB2b2lkIHtcbiAgICB0aGlzLnVwZGF0ZURhdGUodmFsdWUgfHwgbmV3IERhdGUoKSwgZmFsc2UpO1xuICB9XG5cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKGRhdGU6IERhdGUpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0aGlzLm9uQ2hhbmdlRm4gPSBmbjtcbiAgfVxuXG4gIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiAoKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5vblRvdWNoRm4gPSBmbjtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlRGF0ZShkYXRlOiBEYXRlLCB0b3VjaGVkOiBib29sZWFuID0gdHJ1ZSk6IHZvaWQge1xuICAgIGNvbnN0IGRheUNoYW5nZWQgPSAhaXNTYW1lRGF5KGRhdGUsIHRoaXMuYWN0aXZlRGF0ZSk7XG4gICAgY29uc3QgbW9udGhDaGFuZ2VkID0gIWlzU2FtZU1vbnRoKGRhdGUsIHRoaXMuYWN0aXZlRGF0ZSk7XG4gICAgY29uc3QgeWVhckNoYW5nZWQgPSAhaXNTYW1lWWVhcihkYXRlLCB0aGlzLmFjdGl2ZURhdGUpO1xuXG4gICAgdGhpcy5hY3RpdmVEYXRlID0gZGF0ZTtcblxuICAgIGlmIChkYXlDaGFuZ2VkKSB7XG4gICAgICB0aGlzLmNhbGN1bGF0ZUFjdGl2ZURhdGUoKTtcbiAgICB9XG4gICAgaWYgKG1vbnRoQ2hhbmdlZCkge1xuICAgICAgdGhpcy5zZXRVcERhdGVNYXRyaXgoKTtcbiAgICAgIHRoaXMuY2FsY3VsYXRlQ3VycmVudERhdGUoKTtcbiAgICAgIHRoaXMuY2FsY3VsYXRlQWN0aXZlTW9udGgoKTtcbiAgICB9XG4gICAgaWYgKHllYXJDaGFuZ2VkKSB7XG4gICAgICB0aGlzLmNhbGN1bGF0ZUN1cnJlbnRNb250aCgpO1xuICAgIH1cblxuICAgIGlmICh0b3VjaGVkKSB7XG4gICAgICB0aGlzLm9uQ2hhbmdlRm4oZGF0ZSk7XG4gICAgICB0aGlzLm9uVG91Y2hGbigpO1xuICAgICAgdGhpcy5uelZhbHVlQ2hhbmdlLmVtaXQoZGF0ZSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzZXRVcERheXNJbldlZWsoKTogdm9pZCB7XG4gICAgdGhpcy5kYXlzSW5XZWVrID0gW107XG4gICAgY29uc3Qgd2Vla1N0YXJ0ID0gc3RhcnRPZldlZWsodGhpcy5hY3RpdmVEYXRlKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgY29uc3QgZGF0ZSA9IGFkZERheXMod2Vla1N0YXJ0LCBpKTtcbiAgICAgIGNvbnN0IHRpdGxlID0gdGhpcy5pMThuLmZvcm1hdERhdGUoZGF0ZSwgJ0UnKTtcbiAgICAgIGNvbnN0IGxhYmVsID0gdGhpcy5pMThuLmZvcm1hdERhdGUoZGF0ZSwgJ0VFRUVFRScpO1xuICAgICAgdGhpcy5kYXlzSW5XZWVrLnB1c2goe3RpdGxlLCBsYWJlbH0pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2V0VXBNb250aHNJblllYXIoKTogdm9pZCB7XG4gICAgdGhpcy5tb250aHNJblllYXIgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgIGNvbnN0IGRhdGUgPSBzZXRNb250aCh0aGlzLmFjdGl2ZURhdGUsIGkpO1xuICAgICAgY29uc3QgdGl0bGUgPSB0aGlzLmkxOG4uZm9ybWF0RGF0ZShkYXRlLCAnTU1NJyk7XG4gICAgICBjb25zdCBsYWJlbCA9IHRoaXMuaTE4bi5mb3JtYXREYXRlKGRhdGUsICdNTU0nKTtcbiAgICAgIGNvbnN0IHN0YXJ0ID0gc3RhcnRPZk1vbnRoKGRhdGUpO1xuICAgICAgdGhpcy5tb250aHNJblllYXIucHVzaCh7dGl0bGUsIGxhYmVsLCBzdGFydH0pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2V0VXBEYXRlTWF0cml4KCk6IHZvaWQge1xuICAgIHRoaXMuZGF0ZU1hdHJpeCA9IFtdO1xuICAgIGNvbnN0IG1vbnRoU3RhcnQgPSBzdGFydE9mTW9udGgodGhpcy5hY3RpdmVEYXRlKTtcbiAgICBjb25zdCBtb250aEVuZCA9IGVuZE9mTW9udGgodGhpcy5hY3RpdmVEYXRlKTtcbiAgICBjb25zdCB3ZWVrRGlmZiA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyV2Vla3MobW9udGhFbmQsIG1vbnRoU3RhcnQpICsgMjtcblxuICAgIGZvciAobGV0IHdlZWsgPSAwOyB3ZWVrIDwgd2Vla0RpZmY7IHdlZWsrKykge1xuICAgICAgY29uc3Qgcm93OiBEYXRlQ2VsbENvbnRleHRbXSA9IFtdO1xuICAgICAgY29uc3Qgd2Vla1N0YXJ0ID0gYWRkRGF5cyh0aGlzLmNhbGVuZGFyU3RhcnQsIHdlZWsgKiA3KTtcblxuICAgICAgZm9yIChsZXQgZGF5ID0gMDsgZGF5IDwgNzsgZGF5KyspIHtcbiAgICAgICAgY29uc3QgZGF0ZSA9IGFkZERheXMod2Vla1N0YXJ0LCBkYXkpO1xuICAgICAgICBjb25zdCBtb250aERpZmYgPSBkaWZmZXJlbmNlSW5DYWxlbmRhck1vbnRocyhkYXRlLCB0aGlzLmFjdGl2ZURhdGUpO1xuICAgICAgICBjb25zdCB0aXRsZSA9IHRoaXMuaTE4bi5mb3JtYXREYXRlKGRhdGUsICdsb25nRGF0ZScpO1xuICAgICAgICBjb25zdCBsYWJlbCA9IHRoaXMuaTE4bi5mb3JtYXREYXRlKGRhdGUsICdkZCcpO1xuICAgICAgICBjb25zdCByZWwgPSBtb250aERpZmYgPT09IDAgPyAnY3VycmVudCcgOiBtb250aERpZmYgPCAwID8gJ2xhc3QnIDogJ25leHQnO1xuICAgICAgICByb3cucHVzaCh7dGl0bGUsIGxhYmVsLCByZWwsIHZhbHVlOiBkYXRlfSk7XG4gICAgICB9XG4gICAgICB0aGlzLmRhdGVNYXRyaXgucHVzaChyb3cpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY2FsY3VsYXRlQ3VycmVudERhdGUoKTogdm9pZCB7XG4gICAgaWYgKGlzVGhpc01vbnRoKHRoaXMuYWN0aXZlRGF0ZSkpIHtcbiAgICAgIHRoaXMuY3VycmVudERhdGVSb3cgPSBkaWZmZXJlbmNlSW5DYWxlbmRhcldlZWtzKHRoaXMuY3VycmVudERhdGUsIHRoaXMuY2FsZW5kYXJTdGFydCk7XG4gICAgICB0aGlzLmN1cnJlbnREYXRlQ29sID0gZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzKHRoaXMuY3VycmVudERhdGUsIGFkZERheXModGhpcy5jYWxlbmRhclN0YXJ0LCB0aGlzLmN1cnJlbnREYXRlUm93ICogNykpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmN1cnJlbnREYXRlUm93ID0gLTE7XG4gICAgICB0aGlzLmN1cnJlbnREYXRlQ29sID0gLTE7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjYWxjdWxhdGVBY3RpdmVEYXRlKCk6IHZvaWQge1xuICAgIHRoaXMuYWN0aXZlRGF0ZVJvdyA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyV2Vla3ModGhpcy5hY3RpdmVEYXRlLCB0aGlzLmNhbGVuZGFyU3RhcnQpO1xuICAgIHRoaXMuYWN0aXZlRGF0ZUNvbCA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyh0aGlzLmFjdGl2ZURhdGUsIGFkZERheXModGhpcy5jYWxlbmRhclN0YXJ0LCB0aGlzLmFjdGl2ZURhdGVSb3cgKiA3KSk7XG4gIH1cblxuICBwcml2YXRlIGNhbGN1bGF0ZUN1cnJlbnRNb250aCgpOiB2b2lkIHtcbiAgICBpZiAoaXNUaGlzWWVhcih0aGlzLmFjdGl2ZURhdGUpKSB7XG4gICAgICBjb25zdCB5ZWFyU3RhcnQgPSBzdGFydE9mWWVhcih0aGlzLmN1cnJlbnREYXRlKTtcbiAgICAgIGNvbnN0IG1vbnRoRGlmZiA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyTW9udGhzKHRoaXMuY3VycmVudERhdGUsIHllYXJTdGFydCk7XG4gICAgICB0aGlzLmN1cnJlbnRNb250aFJvdyA9IE1hdGguZmxvb3IobW9udGhEaWZmIC8gMyk7XG4gICAgICB0aGlzLmN1cnJlbnRNb250aENvbCA9IG1vbnRoRGlmZiAlIDM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3VycmVudE1vbnRoUm93ID0gLTE7XG4gICAgICB0aGlzLmN1cnJlbnRNb250aENvbCA9IC0xO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY2FsY3VsYXRlQWN0aXZlTW9udGgoKTogdm9pZCB7XG4gICAgdGhpcy5hY3RpdmVNb250aFJvdyA9IE1hdGguZmxvb3IodGhpcy5hY3RpdmVEYXRlLmdldE1vbnRoKCkgLyAzKTtcbiAgICB0aGlzLmFjdGl2ZU1vbnRoQ29sID0gdGhpcy5hY3RpdmVEYXRlLmdldE1vbnRoKCkgJSAzO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGF5Q2VsbENvbnRleHQge1xuICB0aXRsZTogc3RyaW5nO1xuICBsYWJlbDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1vbnRoQ2VsbENvbnRleHQge1xuICB0aXRsZTogc3RyaW5nO1xuICBsYWJlbDogc3RyaW5nO1xuICBzdGFydDogRGF0ZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEYXRlQ2VsbENvbnRleHQge1xuICB0aXRsZTogc3RyaW5nO1xuICBsYWJlbDogc3RyaW5nO1xuICByZWw6ICdsYXN0J3wnY3VycmVudCd8J25leHQnO1xuICB2YWx1ZTogRGF0ZTtcbn1cbiIsImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBOekkxOG5Nb2R1bGUgfSBmcm9tICcuLi9pMThuL256LWkxOG4ubW9kdWxlJztcbmltcG9ydCB7IE56UmFkaW9Nb2R1bGUgfSBmcm9tICcuLi9yYWRpby9uei1yYWRpby5tb2R1bGUnO1xuaW1wb3J0IHsgTnpTZWxlY3RNb2R1bGUgfSBmcm9tICcuLi9zZWxlY3Qvbnotc2VsZWN0Lm1vZHVsZSc7XG5pbXBvcnQgeyBOekRhdGVDZWxsRGlyZWN0aXZlLCBOekRhdGVGdWxsQ2VsbERpcmVjdGl2ZSwgTnpNb250aENlbGxEaXJlY3RpdmUsIE56TW9udGhGdWxsQ2VsbERpcmVjdGl2ZSB9IGZyb20gJy4vbnotY2FsZW5kYXItY2VsbHMnO1xuaW1wb3J0IHsgTnpDYWxlbmRhckhlYWRlckNvbXBvbmVudCB9IGZyb20gJy4vbnotY2FsZW5kYXItaGVhZGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOekNhbGVuZGFyQ29tcG9uZW50IH0gZnJvbSAnLi9uei1jYWxlbmRhci5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBOekNhbGVuZGFySGVhZGVyQ29tcG9uZW50LFxuICAgIE56Q2FsZW5kYXJDb21wb25lbnQsXG4gICAgTnpEYXRlQ2VsbERpcmVjdGl2ZSxcbiAgICBOekRhdGVGdWxsQ2VsbERpcmVjdGl2ZSxcbiAgICBOek1vbnRoQ2VsbERpcmVjdGl2ZSxcbiAgICBOek1vbnRoRnVsbENlbGxEaXJlY3RpdmVcbiAgXSxcbiAgZXhwb3J0cyAgICAgOiBbXG4gICAgTnpDYWxlbmRhckNvbXBvbmVudCxcbiAgICBOekRhdGVDZWxsRGlyZWN0aXZlLFxuICAgIE56RGF0ZUZ1bGxDZWxsRGlyZWN0aXZlLFxuICAgIE56TW9udGhDZWxsRGlyZWN0aXZlLFxuICAgIE56TW9udGhGdWxsQ2VsbERpcmVjdGl2ZVxuICBdLFxuICBpbXBvcnRzICAgICA6IFsgQ29tbW9uTW9kdWxlLCBGb3Jtc01vZHVsZSwgTnpJMThuTW9kdWxlLCBOelJhZGlvTW9kdWxlLCBOelNlbGVjdE1vZHVsZSBdXG59KVxuZXhwb3J0IGNsYXNzIE56Q2FsZW5kYXJNb2R1bGUgeyB9XG4iLCJpbXBvcnQgeyBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW256LWNhcmQtZ3JpZF0nLFxuICBob3N0ICAgIDoge1xuICAgICdbY2xhc3MuYW50LWNhcmQtZ3JpZF0nOiAndHJ1ZSdcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBOekNhcmRHcmlkRGlyZWN0aXZlIHtcbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICA6ICduei1jYXJkLWxvYWRpbmcnLFxuICB0ZW1wbGF0ZVVybDogJy4vbnotY2FyZC1sb2FkaW5nLmNvbXBvbmVudC5odG1sJyxcbiAgaG9zdCAgICAgICA6IHtcbiAgICAnW2NsYXNzLmFudC1jYXJkLWxvYWRpbmctY29udGVudF0nOiAndHJ1ZSdcbiAgfSxcbiAgc3R5bGVzICAgICA6IFsgYFxuICAgIDpob3N0IHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIH1cbiAgYCBdXG59KVxuZXhwb3J0IGNsYXNzIE56Q2FyZExvYWRpbmdDb21wb25lbnQge1xuXG59XG4iLCJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIElucHV0LFxuICBUZW1wbGF0ZVJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yICAgICAgICAgICA6ICduei1jYXJkLW1ldGEnLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgdGVtcGxhdGVVcmwgICAgICAgIDogJy4vbnotY2FyZC1tZXRhLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVzICAgICAgICAgICAgIDogWyBgXG4gICAgOmhvc3Qge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgfVxuICBgIF0sXG4gIGhvc3QgICAgICAgICAgICAgICA6IHtcbiAgICAnW2NsYXNzLmFudC1jYXJkLW1ldGFdJzogJ3RydWUnXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgTnpDYXJkTWV0YUNvbXBvbmVudCB7XG4gIGlzRGVzY3JpcHRpb25TdHJpbmc6IGJvb2xlYW47XG4gIGlzVGl0bGVTdHJpbmc6IGJvb2xlYW47XG4gIHByaXZhdGUgX3RpdGxlOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPjtcbiAgcHJpdmF0ZSBfZGVzY3JpcHRpb246IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+O1xuICBASW5wdXQoKSBuekF2YXRhcjogVGVtcGxhdGVSZWY8dm9pZD47XG5cbiAgQElucHV0KClcbiAgc2V0IG56VGl0bGUodmFsdWU6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+KSB7XG4gICAgdGhpcy5pc1RpdGxlU3RyaW5nID0gISh2YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmKTtcbiAgICB0aGlzLl90aXRsZSA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IG56VGl0bGUoKTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLl90aXRsZTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekRlc2NyaXB0aW9uKHZhbHVlOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPikge1xuICAgIHRoaXMuaXNEZXNjcmlwdGlvblN0cmluZyA9ICEodmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZik7XG4gICAgdGhpcy5fZGVzY3JpcHRpb24gPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBuekRlc2NyaXB0aW9uKCk6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5fZGVzY3JpcHRpb247XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgVGVtcGxhdGVSZWYsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICA6ICduei1jYXJkLXRhYicsXG4gIHRlbXBsYXRlVXJsOiAnLi9uei1jYXJkLXRhYi5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgTnpDYXJkVGFiQ29tcG9uZW50IHtcbiAgQFZpZXdDaGlsZChUZW1wbGF0ZVJlZikgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPHZvaWQ+O1xufVxuIiwiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBDb250ZW50Q2hpbGQsXG4gIEhvc3RCaW5kaW5nLFxuICBJbnB1dCxcbiAgVGVtcGxhdGVSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IHRvQm9vbGVhbiB9IGZyb20gJy4uL2NvcmUvdXRpbC9jb252ZXJ0JztcblxuaW1wb3J0IHsgTnpDYXJkVGFiQ29tcG9uZW50IH0gZnJvbSAnLi9uei1jYXJkLXRhYi5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICAgICAgICAgIDogJ256LWNhcmQnLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgdGVtcGxhdGVVcmwgICAgICAgIDogJy4vbnotY2FyZC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlcyAgICAgICAgICAgICA6IFsgYFxuICAgIDpob3N0IHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIH1cbiAgYCBdLFxuICBob3N0ICAgICAgICAgICAgICAgOiB7XG4gICAgJ1tjbGFzcy5hbnQtY2FyZF0nICAgICAgICA6ICd0cnVlJyxcbiAgICAnW2NsYXNzLmFudC1jYXJkLWxvYWRpbmddJzogJ256TG9hZGluZydcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBOekNhcmRDb21wb25lbnQge1xuICBwcml2YXRlIF9ib3JkZXJlZCA9IHRydWU7XG4gIHByaXZhdGUgX2xvYWRpbmcgPSBmYWxzZTtcbiAgcHJpdmF0ZSBfaG92ZXJhYmxlID0gZmFsc2U7XG4gIHByaXZhdGUgX3RpdGxlOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPjtcbiAgcHJpdmF0ZSBfZXh0cmE6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+O1xuICBpc1RpdGxlU3RyaW5nOiBib29sZWFuO1xuICBpc0V4dHJhU3RyaW5nOiBib29sZWFuO1xuICBAQ29udGVudENoaWxkKE56Q2FyZFRhYkNvbXBvbmVudCkgdGFiOiBOekNhcmRUYWJDb21wb25lbnQ7XG4gIEBJbnB1dCgpIG56Qm9keVN0eWxlOiB7IFsga2V5OiBzdHJpbmcgXTogc3RyaW5nIH07XG4gIEBJbnB1dCgpIG56Q292ZXI6IFRlbXBsYXRlUmVmPHZvaWQ+O1xuICBASW5wdXQoKSBuekFjdGlvbnM6IEFycmF5PFRlbXBsYXRlUmVmPHZvaWQ+PiA9IFtdO1xuICBASW5wdXQoKSBuelR5cGU6IHN0cmluZztcblxuICBASW5wdXQoKVxuICBzZXQgbnpUaXRsZSh2YWx1ZTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD4pIHtcbiAgICB0aGlzLmlzVGl0bGVTdHJpbmcgPSAhKHZhbHVlIGluc3RhbmNlb2YgVGVtcGxhdGVSZWYpO1xuICAgIHRoaXMuX3RpdGxlID0gdmFsdWU7XG4gIH1cblxuICBnZXQgbnpUaXRsZSgpOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMuX3RpdGxlO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56RXh0cmEodmFsdWU6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+KSB7XG4gICAgdGhpcy5pc0V4dHJhU3RyaW5nID0gISh2YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmKTtcbiAgICB0aGlzLl9leHRyYSA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IG56RXh0cmEoKTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLl9leHRyYTtcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW50LWNhcmQtdHlwZS1pbm5lcicpXG4gIGdldCBpc0lubmVyKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLm56VHlwZSA9PT0gJ2lubmVyJztcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW50LWNhcmQtY29udGFpbi10YWJzJylcbiAgZ2V0IGlzVGFicygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISF0aGlzLnRhYjtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW50LWNhcmQtYm9yZGVyZWQnKVxuICBzZXQgbnpCb3JkZXJlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2JvcmRlcmVkID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuekJvcmRlcmVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9ib3JkZXJlZDtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekxvYWRpbmcodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9sb2FkaW5nID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuekxvYWRpbmcoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2xvYWRpbmc7XG4gIH1cblxuICBASW5wdXQoKVxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmFudC1jYXJkLWhvdmVyYWJsZScpXG4gIHNldCBuekhvdmVyYWJsZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2hvdmVyYWJsZSA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBnZXQgbnpIb3ZlcmFibGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2hvdmVyYWJsZTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE56Q2FyZEdyaWREaXJlY3RpdmUgfSBmcm9tICcuL256LWNhcmQtZ3JpZC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgTnpDYXJkTG9hZGluZ0NvbXBvbmVudCB9IGZyb20gJy4vbnotY2FyZC1sb2FkaW5nLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOekNhcmRNZXRhQ29tcG9uZW50IH0gZnJvbSAnLi9uei1jYXJkLW1ldGEuY29tcG9uZW50JztcbmltcG9ydCB7IE56Q2FyZFRhYkNvbXBvbmVudCB9IGZyb20gJy4vbnotY2FyZC10YWIuY29tcG9uZW50JztcbmltcG9ydCB7IE56Q2FyZENvbXBvbmVudCB9IGZyb20gJy4vbnotY2FyZC5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzICAgICA6IFsgQ29tbW9uTW9kdWxlIF0sXG4gIGRlY2xhcmF0aW9uczogWyBOekNhcmRDb21wb25lbnQsIE56Q2FyZEdyaWREaXJlY3RpdmUsIE56Q2FyZE1ldGFDb21wb25lbnQsIE56Q2FyZExvYWRpbmdDb21wb25lbnQsIE56Q2FyZFRhYkNvbXBvbmVudCBdLFxuICBleHBvcnRzICAgICA6IFsgTnpDYXJkQ29tcG9uZW50LCBOekNhcmRHcmlkRGlyZWN0aXZlLCBOekNhcmRNZXRhQ29tcG9uZW50LCBOekNhcmRMb2FkaW5nQ29tcG9uZW50LCBOekNhcmRUYWJDb21wb25lbnQgXVxufSlcbmV4cG9ydCBjbGFzcyBOekNhcmRNb2R1bGUge1xufVxuIiwiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBPbkluaXQsXG4gIFJlbmRlcmVyMlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgaXNOb3ROaWwgfSBmcm9tICcuLi9jb3JlL3V0aWwvY2hlY2snO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbnotY2Fyb3VzZWwtY29udGVudF0nLFxuICBob3N0ICAgIDoge1xuICAgICdbY2xhc3Muc2xpY2stc2xpZGVdJzogJ3RydWUnXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgTnpDYXJvdXNlbENvbnRlbnREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuICBwcml2YXRlIF9hY3RpdmUgPSBmYWxzZTtcbiAgcHJpdmF0ZSBfd2lkdGg6IG51bWJlciA9IDA7XG4gIHByaXZhdGUgX2xlZnQ6IG51bWJlcjtcbiAgcHJpdmF0ZSBfdG9wOiBudW1iZXI7XG4gIHByaXZhdGUgX2ZhZGVNb2RlID0gZmFsc2U7XG4gIGVsOiBIVE1MRWxlbWVudCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuXG4gIHNldCB3aWR0aCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fd2lkdGggPSB2YWx1ZTtcbiAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuZWwsICd3aWR0aCcsIGAke3RoaXMud2lkdGh9cHhgKTtcbiAgfVxuXG4gIGdldCB3aWR0aCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl93aWR0aDtcbiAgfVxuXG4gIHNldCBsZWZ0KHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9sZWZ0ID0gdmFsdWU7XG4gICAgaWYgKGlzTm90TmlsKHRoaXMubGVmdCkpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5lbCwgJ2xlZnQnLCBgJHt0aGlzLmxlZnR9cHhgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVTdHlsZSh0aGlzLmVsLCAnbGVmdCcpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBsZWZ0KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2xlZnQ7XG4gIH1cblxuICBzZXQgdG9wKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl90b3AgPSB2YWx1ZTtcbiAgICBpZiAoaXNOb3ROaWwodGhpcy50b3ApKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuZWwsICd0b3AnLCBgJHt0aGlzLnRvcH1weGApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZVN0eWxlKHRoaXMuZWwsICd0b3AnKTtcbiAgICB9XG4gIH1cblxuICBnZXQgdG9wKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3RvcDtcbiAgfVxuXG4gIHNldCBpc0FjdGl2ZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2FjdGl2ZSA9IHZhbHVlO1xuICAgIHRoaXMudXBkYXRlT3BhY2l0eSgpO1xuICAgIGlmICh0aGlzLmlzQWN0aXZlKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWwsICdzbGljay1hY3RpdmUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLmVsLCAnc2xpY2stYWN0aXZlJyk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGlzQWN0aXZlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9hY3RpdmU7XG4gIH1cblxuICBzZXQgZmFkZU1vZGUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9mYWRlTW9kZSA9IHZhbHVlO1xuICAgIGlmICh0aGlzLmZhZGVNb2RlKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuZWwsICdwb3NpdGlvbicsICdyZWxhdGl2ZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZVN0eWxlKHRoaXMuZWwsICdwb3NpdGlvbicpO1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZU9wYWNpdHkoKTtcbiAgfVxuXG4gIGdldCBmYWRlTW9kZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fZmFkZU1vZGU7XG4gIH1cblxuICB1cGRhdGVPcGFjaXR5KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmZhZGVNb2RlKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuZWwsICdvcGFjaXR5JywgdGhpcy5pc0FjdGl2ZSA/IDEgOiAwKTtcbiAgICB9XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmVsLCAndHJhbnNpdGlvbicsICdvcGFjaXR5IDUwMG1zIGVhc2UnKTtcbiAgfVxuXG59XG4iLCJpbXBvcnQgeyBMRUZUX0FSUk9XLCBSSUdIVF9BUlJPVyB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9rZXljb2Rlcyc7XG5pbXBvcnQge1xuICBBZnRlckNvbnRlbnRJbml0LFxuICBBZnRlclZpZXdJbml0LFxuICBDb21wb25lbnQsXG4gIENvbnRlbnRDaGlsZHJlbixcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBIb3N0QmluZGluZyxcbiAgSG9zdExpc3RlbmVyLFxuICBJbnB1dCxcbiAgT25EZXN0cm95LFxuICBPdXRwdXQsXG4gIFF1ZXJ5TGlzdCxcbiAgUmVuZGVyZXIyLFxuICBUZW1wbGF0ZVJlZixcbiAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgdG9Cb29sZWFuLCB0b051bWJlciB9IGZyb20gJy4uL2NvcmUvdXRpbC9jb252ZXJ0JztcbmltcG9ydCB7IE56Q2Fyb3VzZWxDb250ZW50RGlyZWN0aXZlIH0gZnJvbSAnLi9uei1jYXJvdXNlbC1jb250ZW50LmRpcmVjdGl2ZSc7XG5cbmV4cG9ydCB0eXBlIFN3aXBlRGlyZWN0aW9uID0gJ3N3aXBlbGVmdCcgfCAnc3dpcGVyaWdodCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICAgICAgOiAnbnotY2Fyb3VzZWwnLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgdGVtcGxhdGVVcmwgICAgICAgIDogJy4vbnotY2Fyb3VzZWwuY29tcG9uZW50Lmh0bWwnLFxuICBob3N0ICAgICAgICAgICAgICAgOiB7XG4gICAgJ1tjbGFzcy5hbnQtY2Fyb3VzZWxdJzogJ3RydWUnXG4gIH0sXG4gIHN0eWxlcyAgICAgICAgICAgICA6IFtcbiAgICBgXG4gICAgICA6aG9zdCB7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICB9XG5cbiAgICAgIC5zbGljay1kb3RzIHtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICB9XG5cbiAgICAgIC5zbGljay10cmFjayB7XG4gICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjVzIGVhc2U7XG4gICAgICB9XG5cbiAgICAgIC5zbGljay1zbGlkZSB7XG4gICAgICAgIHRyYW5zaXRpb246IG9wYWNpdHkgNTAwbXMgZWFzZTtcbiAgICAgIH1cblxuICAgIGBcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBOekNhcm91c2VsQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95LCBBZnRlckNvbnRlbnRJbml0IHtcbiAgcHJpdmF0ZSBfYXV0b1BsYXkgPSBmYWxzZTtcbiAgcHJpdmF0ZSBfYXV0b1BsYXlTcGVlZCA9IDMwMDA7XG4gIHByaXZhdGUgX2RvdHMgPSB0cnVlO1xuICBwcml2YXRlIF92ZXJ0aWNhbCA9IGZhbHNlO1xuICBwcml2YXRlIF9lZmZlY3QgPSAnc2Nyb2xseCc7XG4gIHByaXZhdGUgdW5zdWJzY3JpYmUkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICBhY3RpdmVJbmRleCA9IDA7XG4gIHRyYW5zZm9ybSA9ICd0cmFuc2xhdGUzZCgwcHgsIDBweCwgMHB4KSc7XG4gIHRpbWVvdXQ7XG5cbiAgQENvbnRlbnRDaGlsZHJlbihOekNhcm91c2VsQ29udGVudERpcmVjdGl2ZSkgc2xpZGVDb250ZW50czogUXVlcnlMaXN0PE56Q2Fyb3VzZWxDb250ZW50RGlyZWN0aXZlPjtcbiAgQFZpZXdDaGlsZCgnc2xpY2tMaXN0Jykgc2xpY2tMaXN0OiBFbGVtZW50UmVmO1xuICBAVmlld0NoaWxkKCdzbGlja1RyYWNrJykgc2xpY2tUcmFjazogRWxlbWVudFJlZjtcbiAgQE91dHB1dCgpIG56QWZ0ZXJDaGFuZ2U6IEV2ZW50RW1pdHRlcjxudW1iZXI+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgbnpCZWZvcmVDaGFuZ2U6IEV2ZW50RW1pdHRlcjx7IGZyb206IG51bWJlcjsgdG86IG51bWJlciB9PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQElucHV0KCkgbnpFbmFibGVTd2lwZSA9IHRydWU7XG5cbiAgQEhvc3RMaXN0ZW5lcignd2luZG93OnJlc2l6ZScsIFsgJyRldmVudCcgXSlcbiAgb25XaW5kb3dSZXNpemUoZTogVUlFdmVudCk6IHZvaWQge1xuICAgIHRoaXMucmVuZGVyQ29udGVudCgpO1xuICB9XG5cbiAgZ2V0IG5leHRJbmRleCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmFjdGl2ZUluZGV4IDwgdGhpcy5zbGlkZUNvbnRlbnRzLmxlbmd0aCAtIDEgPyAodGhpcy5hY3RpdmVJbmRleCArIDEpIDogMDtcbiAgfVxuXG4gIGdldCBwcmV2SW5kZXgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5hY3RpdmVJbmRleCA+IDAgPyAodGhpcy5hY3RpdmVJbmRleCAtIDEpIDogKHRoaXMuc2xpZGVDb250ZW50cy5sZW5ndGggLSAxKTtcbiAgfVxuXG4gIEBJbnB1dCgpIG56RG90UmVuZGVyOiBUZW1wbGF0ZVJlZjx7ICRpbXBsaWNpdDogbnVtYmVyIH0+O1xuXG4gIEBJbnB1dCgpXG4gIHNldCBuekRvdHModmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9kb3RzID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuekRvdHMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2RvdHM7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpFZmZlY3QodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX2VmZmVjdCA9IHZhbHVlO1xuICAgIHRoaXMudXBkYXRlTW9kZSgpO1xuICB9XG5cbiAgZ2V0IG56RWZmZWN0KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2VmZmVjdDtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekF1dG9QbGF5KHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fYXV0b1BsYXkgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICAgIHRoaXMuc2V0VXBBdXRvUGxheSgpO1xuICB9XG5cbiAgZ2V0IG56QXV0b1BsYXkoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2F1dG9QbGF5O1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56QXV0b1BsYXlTcGVlZCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fYXV0b1BsYXlTcGVlZCA9IHRvTnVtYmVyKHZhbHVlLCBudWxsKTtcbiAgICB0aGlzLnNldFVwQXV0b1BsYXkoKTtcbiAgfVxuXG4gIGdldCBuekF1dG9QbGF5U3BlZWQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fYXV0b1BsYXlTcGVlZDtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW50LWNhcm91c2VsLXZlcnRpY2FsJylcbiAgc2V0IG56VmVydGljYWwodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl92ZXJ0aWNhbCA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gICAgdGhpcy51cGRhdGVNb2RlKCk7XG4gIH1cblxuICBnZXQgbnpWZXJ0aWNhbCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fdmVydGljYWw7XG4gIH1cblxuICBzZXRBY3RpdmUoY29udGVudDogTnpDYXJvdXNlbENvbnRlbnREaXJlY3RpdmUsIGk6IG51bWJlcik6IHZvaWQge1xuICAgIGlmICh0aGlzLnNsaWRlQ29udGVudHMgJiYgdGhpcy5zbGlkZUNvbnRlbnRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5zZXRVcEF1dG9QbGF5KCk7XG4gICAgICBjb25zdCBiZWZvcmVJbmRleCA9IHRoaXMuc2xpZGVDb250ZW50cy50b0FycmF5KCkuZmluZEluZGV4KHNsaWRlID0+IHNsaWRlLmlzQWN0aXZlKTtcbiAgICAgIHRoaXMubnpCZWZvcmVDaGFuZ2UuZW1pdCh7IGZyb206IGJlZm9yZUluZGV4LCB0bzogaSB9KTtcbiAgICAgIHRoaXMuYWN0aXZlSW5kZXggPSBpO1xuICAgICAgaWYgKHRoaXMubnpFZmZlY3QgPT09ICdzY3JvbGx4Jykge1xuICAgICAgICBpZiAodGhpcy5uelZlcnRpY2FsKSB7XG4gICAgICAgICAgdGhpcy50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoMHB4LCAkey10aGlzLmFjdGl2ZUluZGV4ICogdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQub2Zmc2V0SGVpZ2h0fXB4LCAwcHgpYDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgkey10aGlzLmFjdGl2ZUluZGV4ICogdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGh9cHgsIDBweCwgMHB4KWA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZTNkKDBweCwgMHB4LCAwcHgpJztcbiAgICAgIH1cbiAgICAgIHRoaXMuc2xpZGVDb250ZW50cy5mb3JFYWNoKHNsaWRlID0+IHNsaWRlLmlzQWN0aXZlID0gc2xpZGUgPT09IGNvbnRlbnQpO1xuICAgICAgdGhpcy5uekFmdGVyQ2hhbmdlLmVtaXQoaSk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyQ29udGVudCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5zbGlkZUNvbnRlbnRzICYmIHRoaXMuc2xpZGVDb250ZW50cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuc2xpZGVDb250ZW50cy5mb3JFYWNoKChjb250ZW50LCBpKSA9PiB7XG4gICAgICAgIGNvbnRlbnQud2lkdGggPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgICAgICAgaWYgKHRoaXMubnpFZmZlY3QgPT09ICdmYWRlJykge1xuICAgICAgICAgIGNvbnRlbnQuZmFkZU1vZGUgPSB0cnVlO1xuICAgICAgICAgIGlmICh0aGlzLm56VmVydGljYWwpIHtcbiAgICAgICAgICAgIGNvbnRlbnQudG9wID0gLWkgKiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRlbnQubGVmdCA9IC1pICogY29udGVudC53aWR0aDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29udGVudC5mYWRlTW9kZSA9IGZhbHNlO1xuICAgICAgICAgIGNvbnRlbnQubGVmdCA9IG51bGw7XG4gICAgICAgICAgY29udGVudC50b3AgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmICh0aGlzLm56VmVydGljYWwpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVTdHlsZSh0aGlzLnNsaWNrVHJhY2submF0aXZlRWxlbWVudCwgJ3dpZHRoJyk7XG4gICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlU3R5bGUodGhpcy5zbGlja0xpc3QubmF0aXZlRWxlbWVudCwgJ3dpZHRoJyk7XG4gICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlU3R5bGUodGhpcy5zbGlja0xpc3QubmF0aXZlRWxlbWVudCwgJ2hlaWdodCcpO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuc2xpY2tMaXN0Lm5hdGl2ZUVsZW1lbnQsICdoZWlnaHQnLCBgJHt0aGlzLnNsaWRlQ29udGVudHMuZmlyc3QuZWwub2Zmc2V0SGVpZ2h0fXB4YCk7XG4gICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlU3R5bGUodGhpcy5zbGlja1RyYWNrLm5hdGl2ZUVsZW1lbnQsICdoZWlnaHQnKTtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLnNsaWNrVHJhY2submF0aXZlRWxlbWVudCwgJ2hlaWdodCcsIGAke3RoaXMuc2xpZGVDb250ZW50cy5sZW5ndGggKiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5vZmZzZXRIZWlnaHR9cHhgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlU3R5bGUodGhpcy5zbGlja1RyYWNrLm5hdGl2ZUVsZW1lbnQsICdoZWlnaHQnKTtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVTdHlsZSh0aGlzLnNsaWNrTGlzdC5uYXRpdmVFbGVtZW50LCAnaGVpZ2h0Jyk7XG4gICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlU3R5bGUodGhpcy5zbGlja1RyYWNrLm5hdGl2ZUVsZW1lbnQsICd3aWR0aCcpO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuc2xpY2tUcmFjay5uYXRpdmVFbGVtZW50LCAnd2lkdGgnLCBgJHt0aGlzLnNsaWRlQ29udGVudHMubGVuZ3RoICogdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGh9cHhgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2V0VXBBdXRvUGxheSgpO1xuICAgIH1cbiAgfVxuXG4gIHNldFVwQXV0b1BsYXkoKTogdm9pZCB7XG4gICAgdGhpcy5jbGVhclRpbWVvdXQoKTtcbiAgICBpZiAodGhpcy5uekF1dG9QbGF5ICYmIHRoaXMubnpBdXRvUGxheVNwZWVkID4gMCkge1xuICAgICAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dChfID0+IHtcbiAgICAgICAgdGhpcy5zZXRBY3RpdmUodGhpcy5zbGlkZUNvbnRlbnRzLnRvQXJyYXkoKVsgdGhpcy5uZXh0SW5kZXggXSwgdGhpcy5uZXh0SW5kZXgpO1xuICAgICAgfSwgdGhpcy5uekF1dG9QbGF5U3BlZWQpO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZU1vZGUoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuc2xpZGVDb250ZW50cyAmJiB0aGlzLnNsaWRlQ29udGVudHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLnJlbmRlckNvbnRlbnQoKTtcbiAgICAgIHRoaXMuc2V0QWN0aXZlKHRoaXMuc2xpZGVDb250ZW50cy5maXJzdCwgMCk7XG4gICAgfVxuICB9XG5cbiAgY2xlYXJUaW1lb3V0KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnRpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xuICAgICAgdGhpcy50aW1lb3V0ID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBuZXh0KCk6IHZvaWQge1xuICAgIHRoaXMuc2V0QWN0aXZlKHRoaXMuc2xpZGVDb250ZW50cy50b0FycmF5KClbIHRoaXMubmV4dEluZGV4IF0sIHRoaXMubmV4dEluZGV4KTtcbiAgfVxuXG4gIHByZSgpOiB2b2lkIHtcbiAgICB0aGlzLnNldEFjdGl2ZSh0aGlzLnNsaWRlQ29udGVudHMudG9BcnJheSgpWyB0aGlzLnByZXZJbmRleCBdLCB0aGlzLnByZXZJbmRleCk7XG4gIH1cblxuICBnb1RvKGluZGV4OiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8PSB0aGlzLnNsaWRlQ29udGVudHMubGVuZ3RoIC0gMSkge1xuICAgICAgdGhpcy5zZXRBY3RpdmUodGhpcy5zbGlkZUNvbnRlbnRzLnRvQXJyYXkoKVsgaW5kZXggXSwgaW5kZXgpO1xuICAgIH1cbiAgfVxuXG4gIG9uS2V5RG93bihlOiBLZXlib2FyZEV2ZW50KTogdm9pZCB7XG4gICAgaWYgKGUua2V5Q29kZSA9PT0gTEVGVF9BUlJPVykgeyAvLyBMZWZ0XG4gICAgICB0aGlzLnByZSgpO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSBSSUdIVF9BUlJPVykgeyAvLyBSaWdodFxuICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9XG5cbiAgc3dpcGUoYWN0aW9uOiBTd2lwZURpcmVjdGlvbiA9ICdzd2lwZWxlZnQnKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLm56RW5hYmxlU3dpcGUpIHsgcmV0dXJuOyB9XG4gICAgaWYgKGFjdGlvbiA9PT0gJ3N3aXBlbGVmdCcpIHsgdGhpcy5uZXh0KCk7IH1cbiAgICBpZiAoYWN0aW9uID09PSAnc3dpcGVyaWdodCcpIHsgdGhpcy5wcmUoKTsgfVxuICB9XG5cbiAgLyogdHNsaW50OmRpc2FibGU6bm8tYW55ICovXG4gIHN3aXBlSW5Qcm9ncmVzcyhlOiBhbnkpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5uekVmZmVjdCA9PT0gJ3Njcm9sbHgnKSB7XG4gICAgICBjb25zdCBmaW5hbCA9IGUuaXNGaW5hbDtcbiAgICAgIGNvbnN0IHNjcm9sbFdpZHRoID0gZmluYWwgPyAwIDogZS5kZWx0YVggKiAxLjI7XG4gICAgICBjb25zdCB0b3RhbFdpZHRoID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgICBpZiAodGhpcy5uelZlcnRpY2FsKSB7XG4gICAgICAgIGNvbnN0IHRvdGFsSGVpZ2h0ID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuICAgICAgICBjb25zdCBzY3JvbGxQZXJjZW50ID0gc2Nyb2xsV2lkdGggLyB0b3RhbFdpZHRoO1xuICAgICAgICBjb25zdCBzY3JvbGxIZWlnaHQgPSAgc2Nyb2xsUGVyY2VudCAqIHRvdGFsSGVpZ2h0O1xuICAgICAgICB0aGlzLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgwcHgsICR7LXRoaXMuYWN0aXZlSW5kZXggKiB0b3RhbEhlaWdodCArIHNjcm9sbEhlaWdodH1weCwgMHB4KWA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgkey10aGlzLmFjdGl2ZUluZGV4ICogdG90YWxXaWR0aCArIHNjcm9sbFdpZHRofXB4LCAwcHgsIDBweClgO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZS5pc0ZpbmFsKSB7XG4gICAgICB0aGlzLnNldFVwQXV0b1BsYXkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jbGVhclRpbWVvdXQoKTtcbiAgICB9XG4gIH1cblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7XG4gIH1cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuc2xpZGVDb250ZW50cyAmJiB0aGlzLnNsaWRlQ29udGVudHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLnNsaWRlQ29udGVudHMuZmlyc3QuaXNBY3RpdmUgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnNsaWRlQ29udGVudHMuY2hhbmdlc1xuICAgIC5waXBlKHRha2VVbnRpbCh0aGlzLnVuc3Vic2NyaWJlJCkpXG4gICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLnJlbmRlckNvbnRlbnQoKTtcbiAgICB9KTtcbiAgICB0aGlzLnJlbmRlckNvbnRlbnQoKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMudW5zdWJzY3JpYmUkLm5leHQoKTtcbiAgICB0aGlzLnVuc3Vic2NyaWJlJC5jb21wbGV0ZSgpO1xuICAgIHRoaXMuY2xlYXJUaW1lb3V0KCk7XG4gIH1cblxufVxuIiwiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE56Q2Fyb3VzZWxDb250ZW50RGlyZWN0aXZlIH0gZnJvbSAnLi9uei1jYXJvdXNlbC1jb250ZW50LmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBOekNhcm91c2VsQ29tcG9uZW50IH0gZnJvbSAnLi9uei1jYXJvdXNlbC5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFsgTnpDYXJvdXNlbENvbXBvbmVudCwgTnpDYXJvdXNlbENvbnRlbnREaXJlY3RpdmUgXSxcbiAgZXhwb3J0cyAgICAgOiBbIE56Q2Fyb3VzZWxDb21wb25lbnQsIE56Q2Fyb3VzZWxDb250ZW50RGlyZWN0aXZlIF0sXG4gIGltcG9ydHMgICAgIDogWyBDb21tb25Nb2R1bGUgXVxufSlcbmV4cG9ydCBjbGFzcyBOekNhcm91c2VsTW9kdWxlIHtcbn1cbiIsIi8vIFRoYW5rcyB0byBodHRwczovL2dpdGh1Yi5jb20vYW5kcmV5cG9wcC9yZWFjdC10ZXh0YXJlYS1hdXRvc2l6ZS9cblxuLyoqXG4gKiBjYWxjdWxhdGVOb2RlSGVpZ2h0KHVpVGV4dE5vZGUsIHVzZUNhY2hlID0gZmFsc2UpXG4gKi9cblxuY29uc3QgSElEREVOX1RFWFRBUkVBX1NUWUxFID0gYFxuICBtaW4taGVpZ2h0OjAgIWltcG9ydGFudDtcbiAgbWF4LWhlaWdodDpub25lICFpbXBvcnRhbnQ7XG4gIGhlaWdodDowICFpbXBvcnRhbnQ7XG4gIHZpc2liaWxpdHk6aGlkZGVuICFpbXBvcnRhbnQ7XG4gIG92ZXJmbG93OmhpZGRlbiAhaW1wb3J0YW50O1xuICBwb3NpdGlvbjphYnNvbHV0ZSAhaW1wb3J0YW50O1xuICB6LWluZGV4Oi0xMDAwICFpbXBvcnRhbnQ7XG4gIHRvcDowICFpbXBvcnRhbnQ7XG4gIHJpZ2h0OjAgIWltcG9ydGFudFxuYDtcblxuY29uc3QgU0laSU5HX1NUWUxFID0gW1xuICAnbGV0dGVyLXNwYWNpbmcnLFxuICAnbGluZS1oZWlnaHQnLFxuICAncGFkZGluZy10b3AnLFxuICAncGFkZGluZy1ib3R0b20nLFxuICAnZm9udC1mYW1pbHknLFxuICAnZm9udC13ZWlnaHQnLFxuICAnZm9udC1zaXplJyxcbiAgJ3RleHQtcmVuZGVyaW5nJyxcbiAgJ3RleHQtdHJhbnNmb3JtJyxcbiAgJ3dpZHRoJyxcbiAgJ3RleHQtaW5kZW50JyxcbiAgJ3BhZGRpbmctbGVmdCcsXG4gICdwYWRkaW5nLXJpZ2h0JyxcbiAgJ2JvcmRlci13aWR0aCcsXG4gICdib3gtc2l6aW5nJ1xuXTtcblxuZXhwb3J0IGludGVyZmFjZSBOb2RlVHlwZSB7XG4gIHNpemluZ1N0eWxlOiBzdHJpbmc7XG4gIHBhZGRpbmdTaXplOiBudW1iZXI7XG4gIGJvcmRlclNpemU6IG51bWJlcjtcbiAgYm94U2l6aW5nOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTm9kZVByb3BlcnR5IHtcbiAgaGVpZ2h0OiBudW1iZXI7XG4gIG1pbkhlaWdodDogbnVtYmVyO1xuICBtYXhIZWlnaHQ6IG51bWJlcjtcbiAgb3ZlcmZsb3dZOiBzdHJpbmc7XG59XG5cbmNvbnN0IGNvbXB1dGVkU3R5bGVDYWNoZTogeyBba2V5OiBzdHJpbmddOiBOb2RlVHlwZSB9ID0ge307XG5sZXQgaGlkZGVuVGV4dGFyZWE6IEhUTUxUZXh0QXJlYUVsZW1lbnQ7XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZU5vZGVTdHlsaW5nKG5vZGU6IEhUTUxFbGVtZW50LCB1c2VDYWNoZTogYm9vbGVhbiA9IGZhbHNlKTogTm9kZVR5cGUge1xuICBjb25zdCBub2RlUmVmID0gKFxuICAgIG5vZGUuZ2V0QXR0cmlidXRlKCdpZCcpIHx8XG4gICAgbm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtcmVhY3RpZCcpIHx8XG4gICAgbm9kZS5nZXRBdHRyaWJ1dGUoJ25hbWUnKVxuICApIGFzIHN0cmluZztcblxuICBpZiAodXNlQ2FjaGUgJiYgY29tcHV0ZWRTdHlsZUNhY2hlWyBub2RlUmVmIF0pIHtcbiAgICByZXR1cm4gY29tcHV0ZWRTdHlsZUNhY2hlWyBub2RlUmVmIF07XG4gIH1cblxuICBjb25zdCBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuXG4gIGNvbnN0IGJveFNpemluZyA9IChcbiAgICBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdib3gtc2l6aW5nJykgfHxcbiAgICBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCctbW96LWJveC1zaXppbmcnKSB8fFxuICAgIHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJy13ZWJraXQtYm94LXNpemluZycpXG4gICk7XG5cbiAgY29uc3QgcGFkZGluZ1NpemUgPSAoXG4gICAgcGFyc2VGbG9hdChzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdwYWRkaW5nLWJvdHRvbScpKSArXG4gICAgcGFyc2VGbG9hdChzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdwYWRkaW5nLXRvcCcpKVxuICApO1xuXG4gIGNvbnN0IGJvcmRlclNpemUgPSAoXG4gICAgcGFyc2VGbG9hdChzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdib3JkZXItYm90dG9tLXdpZHRoJykpICtcbiAgICBwYXJzZUZsb2F0KHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2JvcmRlci10b3Atd2lkdGgnKSlcbiAgKTtcblxuICBjb25zdCBzaXppbmdTdHlsZSA9IFNJWklOR19TVFlMRVxuICAubWFwKG5hbWUgPT4gYCR7bmFtZX06JHtzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpfWApXG4gIC5qb2luKCc7Jyk7XG5cbiAgY29uc3Qgbm9kZUluZm86IE5vZGVUeXBlID0ge1xuICAgIHNpemluZ1N0eWxlLFxuICAgIHBhZGRpbmdTaXplLFxuICAgIGJvcmRlclNpemUsXG4gICAgYm94U2l6aW5nXG4gIH07XG5cbiAgaWYgKHVzZUNhY2hlICYmIG5vZGVSZWYpIHtcbiAgICBjb21wdXRlZFN0eWxlQ2FjaGVbIG5vZGVSZWYgXSA9IG5vZGVJbmZvO1xuICB9XG5cbiAgcmV0dXJuIG5vZGVJbmZvO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjYWxjdWxhdGVOb2RlSGVpZ2h0KHVpVGV4dE5vZGU6IEhUTUxUZXh0QXJlYUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZUNhY2hlOiBib29sZWFuICAgICAgPSBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluUm93czogbnVtYmVyIHwgbnVsbCA9IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heFJvd3M6IG51bWJlciB8IG51bGwgPSBudWxsKTogTm9kZVByb3BlcnR5IHtcbiAgaWYgKCFoaWRkZW5UZXh0YXJlYSkge1xuICAgIGhpZGRlblRleHRhcmVhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGhpZGRlblRleHRhcmVhKTtcbiAgfVxuXG4gIC8vIEZpeCB3cmFwPVwib2ZmXCIgaXNzdWVcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvNjU3N1xuICBpZiAodWlUZXh0Tm9kZS5nZXRBdHRyaWJ1dGUoJ3dyYXAnKSkge1xuICAgIGhpZGRlblRleHRhcmVhLnNldEF0dHJpYnV0ZSgnd3JhcCcsIHVpVGV4dE5vZGUuZ2V0QXR0cmlidXRlKCd3cmFwJykgYXMgc3RyaW5nKTtcbiAgfSBlbHNlIHtcbiAgICBoaWRkZW5UZXh0YXJlYS5yZW1vdmVBdHRyaWJ1dGUoJ3dyYXAnKTtcbiAgfVxuXG4gIC8vIENvcHkgYWxsIENTUyBwcm9wZXJ0aWVzIHRoYXQgaGF2ZSBhbiBpbXBhY3Qgb24gdGhlIGhlaWdodCBvZiB0aGUgY29udGVudCBpblxuICAvLyB0aGUgdGV4dGJveFxuICBjb25zdCB7XG4gICAgICAgICAgcGFkZGluZ1NpemUsIGJvcmRlclNpemUsXG4gICAgICAgICAgYm94U2l6aW5nLCBzaXppbmdTdHlsZVxuICAgICAgICB9ID0gY2FsY3VsYXRlTm9kZVN0eWxpbmcodWlUZXh0Tm9kZSwgdXNlQ2FjaGUpO1xuXG4gIC8vIE5lZWQgdG8gaGF2ZSB0aGUgb3ZlcmZsb3cgYXR0cmlidXRlIHRvIGhpZGUgdGhlIHNjcm9sbGJhciBvdGhlcndpc2VcbiAgLy8gdGV4dC1saW5lcyB3aWxsIG5vdCBjYWxjdWxhdGVkIHByb3Blcmx5IGFzIHRoZSBzaGFkb3cgd2lsbCB0ZWNobmljYWxseSBiZVxuICAvLyBuYXJyb3dlciBmb3IgY29udGVudFxuICBoaWRkZW5UZXh0YXJlYS5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgYCR7c2l6aW5nU3R5bGV9OyR7SElEREVOX1RFWFRBUkVBX1NUWUxFfWApO1xuICBoaWRkZW5UZXh0YXJlYS52YWx1ZSA9IHVpVGV4dE5vZGUudmFsdWUgfHwgdWlUZXh0Tm9kZS5wbGFjZWhvbGRlciB8fCAnJztcblxuICBsZXQgbWluSGVpZ2h0ID0gTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVI7XG4gIGxldCBtYXhIZWlnaHQgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcbiAgbGV0IGhlaWdodCA9IGhpZGRlblRleHRhcmVhLnNjcm9sbEhlaWdodDtcbiAgbGV0IG92ZXJmbG93WTogc3RyaW5nO1xuXG4gIGlmIChib3hTaXppbmcgPT09ICdib3JkZXItYm94Jykge1xuICAgIC8vIGJvcmRlci1ib3g6IGFkZCBib3JkZXIsIHNpbmNlIGhlaWdodCA9IGNvbnRlbnQgKyBwYWRkaW5nICsgYm9yZGVyXG4gICAgaGVpZ2h0ID0gaGVpZ2h0ICsgYm9yZGVyU2l6ZTtcbiAgfSBlbHNlIGlmIChib3hTaXppbmcgPT09ICdjb250ZW50LWJveCcpIHtcbiAgICAvLyByZW1vdmUgcGFkZGluZywgc2luY2UgaGVpZ2h0ID0gY29udGVudFxuICAgIGhlaWdodCA9IGhlaWdodCAtIHBhZGRpbmdTaXplO1xuICB9XG5cbiAgaWYgKG1pblJvd3MgIT09IG51bGwgfHwgbWF4Um93cyAhPT0gbnVsbCkge1xuICAgIC8vIG1lYXN1cmUgaGVpZ2h0IG9mIGEgdGV4dGFyZWEgd2l0aCBhIHNpbmdsZSByb3dcbiAgICBoaWRkZW5UZXh0YXJlYS52YWx1ZSA9ICcnO1xuICAgIGNvbnN0IHNpbmdsZVJvd0hlaWdodCA9IGhpZGRlblRleHRhcmVhLnNjcm9sbEhlaWdodCAtIHBhZGRpbmdTaXplO1xuICAgIGlmIChtaW5Sb3dzICE9PSBudWxsKSB7XG4gICAgICBtaW5IZWlnaHQgPSBzaW5nbGVSb3dIZWlnaHQgKiBtaW5Sb3dzO1xuICAgICAgaWYgKGJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnKSB7XG4gICAgICAgIG1pbkhlaWdodCA9IG1pbkhlaWdodCArIHBhZGRpbmdTaXplICsgYm9yZGVyU2l6ZTtcbiAgICAgIH1cbiAgICAgIGhlaWdodCA9IE1hdGgubWF4KG1pbkhlaWdodCwgaGVpZ2h0KTtcbiAgICB9XG4gICAgaWYgKG1heFJvd3MgIT09IG51bGwpIHtcbiAgICAgIG1heEhlaWdodCA9IHNpbmdsZVJvd0hlaWdodCAqIG1heFJvd3M7XG4gICAgICBpZiAoYm94U2l6aW5nID09PSAnYm9yZGVyLWJveCcpIHtcbiAgICAgICAgbWF4SGVpZ2h0ID0gbWF4SGVpZ2h0ICsgcGFkZGluZ1NpemUgKyBib3JkZXJTaXplO1xuICAgICAgfVxuICAgICAgb3ZlcmZsb3dZID0gaGVpZ2h0ID4gbWF4SGVpZ2h0ID8gJycgOiAnaGlkZGVuJztcbiAgICAgIGhlaWdodCA9IE1hdGgubWluKG1heEhlaWdodCwgaGVpZ2h0KTtcbiAgICB9XG4gIH1cbiAgLy8gUmVtb3ZlIHNjcm9sbCBiYXIgZmxhc2ggd2hlbiBhdXRvc2l6ZSB3aXRob3V0IG1heFJvd3NcbiAgaWYgKCFtYXhSb3dzKSB7XG4gICAgb3ZlcmZsb3dZID0gJ2hpZGRlbic7XG4gIH1cbiAgcmV0dXJuIHsgaGVpZ2h0LCBtaW5IZWlnaHQsIG1heEhlaWdodCwgb3ZlcmZsb3dZIH07XG59XG4iLCJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBEaXJlY3RpdmUsXG4gIERvQ2hlY2ssXG4gIEVsZW1lbnRSZWYsXG4gIEhvc3RCaW5kaW5nLFxuICBIb3N0TGlzdGVuZXIsXG4gIElucHV0LFxuICBPcHRpb25hbCxcbiAgUmVuZGVyZXIyLFxuICBTZWxmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdDb250cm9sLCBOZ01vZGVsIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgY2FsY3VsYXRlTm9kZUhlaWdodCBmcm9tICcuLi9jb3JlL3V0aWwvY2FsY3VsYXRlLW5vZGUtaGVpZ2h0JztcbmltcG9ydCB7IHRvQm9vbGVhbiB9IGZyb20gJy4uL2NvcmUvdXRpbC9jb252ZXJ0JztcblxuZXhwb3J0IGludGVyZmFjZSBBdXRvU2l6ZVR5cGUge1xuICBtaW5Sb3dzPzogbnVtYmVyO1xuICBtYXhSb3dzPzogbnVtYmVyO1xufVxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbnotaW5wdXRdJyxcbiAgaG9zdCAgICA6IHtcbiAgICAnW2NsYXNzLmFudC1pbnB1dF0nOiAndHJ1ZSdcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBOeklucHV0RGlyZWN0aXZlIGltcGxlbWVudHMgRG9DaGVjaywgQWZ0ZXJWaWV3SW5pdCB7XG4gIHByaXZhdGUgX3NpemUgPSAnZGVmYXVsdCc7XG4gIHByaXZhdGUgX2Rpc2FibGVkID0gZmFsc2U7XG4gIHByaXZhdGUgX2F1dG9zaXplOiBib29sZWFuIHwgQXV0b1NpemVUeXBlID0gZmFsc2U7XG4gIHByaXZhdGUgZWw6IEhUTUxUZXh0QXJlYUVsZW1lbnQgfCBIVE1MSW5wdXRFbGVtZW50ID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG4gIHByaXZhdGUgcHJldmlvdXNWYWx1ZTogc3RyaW5nO1xuICBwcml2YXRlIHByZXZpZXdzTWluUm93czogbnVtYmVyO1xuICBwcml2YXRlIHByZXZpZXdzTWF4Um93czogbnVtYmVyO1xuICBwcml2YXRlIGlzSW5pdCA9IGZhbHNlO1xuXG4gIEBJbnB1dCgpXG4gIGdldCBuelNpemUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fc2l6ZTtcbiAgfVxuXG4gIHNldCBuelNpemUodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX3NpemUgPSB2YWx1ZTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIEBIb3N0QmluZGluZyhgY2xhc3MuYW50LWlucHV0LWRpc2FibGVkYClcbiAgc2V0IGRpc2FibGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fZGlzYWJsZWQgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IGRpc2FibGVkKCk6IGJvb2xlYW4ge1xuICAgIGlmICh0aGlzLm5nQ29udHJvbCAmJiB0aGlzLm5nQ29udHJvbC5kaXNhYmxlZCAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRoaXMubmdDb250cm9sLmRpc2FibGVkO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fZGlzYWJsZWQ7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpBdXRvc2l6ZSh2YWx1ZTogc3RyaW5nIHwgYm9vbGVhbiB8IEF1dG9TaXplVHlwZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLl9hdXRvc2l6ZSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2F1dG9zaXplID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgZ2V0IG56QXV0b3NpemUoKTogc3RyaW5nIHwgYm9vbGVhbiB8IEF1dG9TaXplVHlwZSB7XG4gICAgcmV0dXJuIHRoaXMuX2F1dG9zaXplO1xuICB9XG5cbiAgQEhvc3RCaW5kaW5nKGBjbGFzcy5hbnQtaW5wdXQtbGdgKVxuICBnZXQgc2V0TGdDbGFzcygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5uelNpemUgPT09ICdsYXJnZSc7XG4gIH1cblxuICBASG9zdEJpbmRpbmcoYGNsYXNzLmFudC1pbnB1dC1zbWApXG4gIGdldCBzZXRTbUNsYXNzKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLm56U2l6ZSA9PT0gJ3NtYWxsJztcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2lucHV0JylcbiAgdGV4dEFyZWFPbkNoYW5nZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5uekF1dG9zaXplKSB7XG4gICAgICB0aGlzLnJlc2l6ZVRleHRBcmVhKCk7XG4gICAgfVxuICB9XG5cbiAgcmVzaXplVGV4dEFyZWEoKTogdm9pZCB7XG4gICAgY29uc3QgdGV4dEFyZWFSZWYgPSB0aGlzLmVsIGFzIEhUTUxUZXh0QXJlYUVsZW1lbnQ7XG4gICAgY29uc3QgbWF4Um93cyA9IHRoaXMubnpBdXRvc2l6ZSA/ICh0aGlzLm56QXV0b3NpemUgYXMgQXV0b1NpemVUeXBlKS5tYXhSb3dzIHx8IG51bGwgOiBudWxsO1xuICAgIGNvbnN0IG1pblJvd3MgPSB0aGlzLm56QXV0b3NpemUgPyAodGhpcy5uekF1dG9zaXplIGFzIEF1dG9TaXplVHlwZSkubWluUm93cyB8fCBudWxsIDogbnVsbDtcbiAgICBpZiAoKHRoaXMucHJldmlvdXNWYWx1ZSA9PT0gdGV4dEFyZWFSZWYudmFsdWUpICYmICh0aGlzLnByZXZpZXdzTWF4Um93cyA9PT0gbWF4Um93cykgJiYgKHRoaXMucHJldmlld3NNaW5Sb3dzID09PSBtaW5Sb3dzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnByZXZpb3VzVmFsdWUgPSB0ZXh0QXJlYVJlZi52YWx1ZTtcbiAgICB0aGlzLnByZXZpZXdzTWluUm93cyA9IG1pblJvd3M7XG4gICAgdGhpcy5wcmV2aWV3c01heFJvd3MgPSBtYXhSb3dzO1xuICAgIC8vIGVsaW1pbmF0ZSBqaXR0ZXJcbiAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRleHRBcmVhUmVmLCAnaGVpZ2h0JywgJ2F1dG8nKTtcblxuICAgIGNvbnN0IHRleHRBcmVhU3R5bGVzID0gY2FsY3VsYXRlTm9kZUhlaWdodCh0ZXh0QXJlYVJlZiwgZmFsc2UsIG1pblJvd3MsIG1heFJvd3MpO1xuICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGV4dEFyZWFSZWYsICdoZWlnaHQnLCBgJHt0ZXh0QXJlYVN0eWxlcy5oZWlnaHR9cHhgKTtcbiAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRleHRBcmVhUmVmLCAnb3ZlcmZsb3dZJywgdGV4dEFyZWFTdHlsZXMub3ZlcmZsb3dZKTtcbiAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRleHRBcmVhUmVmLCAnbWluSGVpZ2h0JywgYCR7dGV4dEFyZWFTdHlsZXMubWluSGVpZ2h0fXB4YCk7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0ZXh0QXJlYVJlZiwgJ21heEhlaWdodCcsIGAke3RleHRBcmVhU3R5bGVzLm1heEhlaWdodH1weGApO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsIEBPcHRpb25hbCgpIHByaXZhdGUgbmdNb2RlbDogTmdNb2RlbCwgQE9wdGlvbmFsKCkgQFNlbGYoKSBwdWJsaWMgbmdDb250cm9sOiBOZ0NvbnRyb2wpIHtcbiAgfVxuXG4gIG5nRG9DaGVjaygpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5uekF1dG9zaXplICYmIHRoaXMuaXNJbml0KSB7XG4gICAgICB0aGlzLnJlc2l6ZVRleHRBcmVhKCk7XG4gICAgfVxuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIHRoaXMuaXNJbml0ID0gdHJ1ZTtcbiAgICBpZiAodGhpcy5uekF1dG9zaXplKSB7XG4gICAgICB0aGlzLnJlc2l6ZVRleHRBcmVhKCk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQge1xuICBBZnRlckNvbnRlbnRJbml0LFxuICBDb21wb25lbnQsXG4gIENvbnRlbnRDaGlsZHJlbixcbiAgRWxlbWVudFJlZixcbiAgSG9zdEJpbmRpbmcsXG4gIElucHV0LFxuICBRdWVyeUxpc3QsXG4gIFRlbXBsYXRlUmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgdG9Cb29sZWFuIH0gZnJvbSAnLi4vY29yZS91dGlsL2NvbnZlcnQnO1xuXG5pbXBvcnQgeyBOeklucHV0RGlyZWN0aXZlIH0gZnJvbSAnLi9uei1pbnB1dC5kaXJlY3RpdmUnO1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuZXhwb3J0IHR5cGUgVElucHV0R3JvdXBJY29uQ2xhc3MgPSBzdHJpbmcgfCBzdHJpbmdbXSB8IFNldDxzdHJpbmc+IHwgeyBbIGtsYXNzOiBzdHJpbmcgXTogYW55OyB9O1xuZXhwb3J0IHR5cGUgTnpJbnB1dEdyb3VwU2l6ZVR5cGUgPSAnbGFyZ2UnIHwgJ2RlZmF1bHQnIHwgJ3NtYWxsJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yICAgICAgICAgICA6ICduei1pbnB1dC1ncm91cCcsXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxuICB0ZW1wbGF0ZVVybCAgICAgICAgOiAnLi9uei1pbnB1dC1ncm91cC5jb21wb25lbnQuaHRtbCdcbn0pXG5cbmV4cG9ydCBjbGFzcyBOeklucHV0R3JvdXBDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0IHtcbiAgcHJpdmF0ZSBfYWRkT25CZWZvcmU6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+ID0gJyc7XG4gIHByaXZhdGUgX2FkZE9uQWZ0ZXI6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+ID0gJyc7XG4gIHByaXZhdGUgX3ByZWZpeDogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD4gPSAnJztcbiAgcHJpdmF0ZSBfc3VmZml4OiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPiA9ICcnO1xuICBwcml2YXRlIF9zaXplOiBOeklucHV0R3JvdXBTaXplVHlwZSA9ICdkZWZhdWx0JztcbiAgcHJpdmF0ZSBfY29tcGFjdCA9IGZhbHNlO1xuICBwcml2YXRlIF9zZWFyY2ggPSBmYWxzZTtcbiAgaXNBZGRPbkJlZm9yZVN0cmluZzogYm9vbGVhbjtcbiAgaXNBZGRPbkFmdGVyU3RyaW5nOiBib29sZWFuO1xuICBpc1ByZWZpeFN0cmluZzogYm9vbGVhbjtcbiAgaXNTdWZmaXhTdHJpbmc6IGJvb2xlYW47XG4gIEBDb250ZW50Q2hpbGRyZW4oTnpJbnB1dERpcmVjdGl2ZSkgbnpJbnB1dERpcmVjdGl2ZVF1ZXJ5TGlzdDogUXVlcnlMaXN0PE56SW5wdXREaXJlY3RpdmU+O1xuICBASW5wdXQoKSBuekFkZE9uQmVmb3JlSWNvbjogVElucHV0R3JvdXBJY29uQ2xhc3M7XG4gIEBJbnB1dCgpIG56QWRkT25BZnRlckljb246IFRJbnB1dEdyb3VwSWNvbkNsYXNzO1xuICBASW5wdXQoKSBuelByZWZpeEljb246IFRJbnB1dEdyb3VwSWNvbkNsYXNzO1xuICBASW5wdXQoKSBuelN1ZmZpeEljb246IFRJbnB1dEdyb3VwSWNvbkNsYXNzO1xuXG4gIEBJbnB1dCgpIHNldCBuelNpemUodmFsdWU6IE56SW5wdXRHcm91cFNpemVUeXBlKSB7XG4gICAgdGhpcy5fc2l6ZSA9IHZhbHVlO1xuICAgIHRoaXMudXBkYXRlQ2hpbGRyZW5JbnB1dFNpemUoKTtcbiAgfVxuXG4gIGdldCBuelNpemUoKTogTnpJbnB1dEdyb3VwU2l6ZVR5cGUge1xuICAgIHJldHVybiB0aGlzLl9zaXplO1xuICB9XG5cbiAgQElucHV0KClcbiAgQEhvc3RCaW5kaW5nKGBjbGFzcy5hbnQtaW5wdXQtZ3JvdXAtY29tcGFjdGApXG4gIHNldCBuekNvbXBhY3QodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9jb21wYWN0ID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuekNvbXBhY3QoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbXBhY3Q7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpBZGRPbkJlZm9yZSh2YWx1ZTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD4pIHtcbiAgICB0aGlzLmlzQWRkT25CZWZvcmVTdHJpbmcgPSAhKHZhbHVlIGluc3RhbmNlb2YgVGVtcGxhdGVSZWYpO1xuICAgIHRoaXMuX2FkZE9uQmVmb3JlID0gdmFsdWU7XG4gIH1cblxuICBnZXQgbnpBZGRPbkJlZm9yZSgpOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZE9uQmVmb3JlO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56QWRkT25BZnRlcih2YWx1ZTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD4pIHtcbiAgICB0aGlzLmlzQWRkT25BZnRlclN0cmluZyA9ICEodmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZik7XG4gICAgdGhpcy5fYWRkT25BZnRlciA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IG56QWRkT25BZnRlcigpOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZE9uQWZ0ZXI7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpQcmVmaXgodmFsdWU6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+KSB7XG4gICAgdGhpcy5pc1ByZWZpeFN0cmluZyA9ICEodmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZik7XG4gICAgdGhpcy5fcHJlZml4ID0gdmFsdWU7XG4gIH1cblxuICBnZXQgbnpQcmVmaXgoKTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLl9wcmVmaXg7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpTdWZmaXgodmFsdWU6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+KSB7XG4gICAgdGhpcy5pc1N1ZmZpeFN0cmluZyA9ICEodmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZik7XG4gICAgdGhpcy5fc3VmZml4ID0gdmFsdWU7XG4gIH1cblxuICBnZXQgbnpTdWZmaXgoKTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLl9zdWZmaXg7XG4gIH1cblxuICBASW5wdXQoKVxuICBASG9zdEJpbmRpbmcoYGNsYXNzLmFudC1pbnB1dC1zZWFyY2gtZW50ZXItYnV0dG9uYClcbiAgQEhvc3RCaW5kaW5nKGBjbGFzcy5hbnQtaW5wdXQtc2VhcmNoYClcbiAgc2V0IG56U2VhcmNoKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fc2VhcmNoID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuelNlYXJjaCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fc2VhcmNoO1xuICB9XG5cbiAgZ2V0IGlzTGFyZ2UoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubnpTaXplID09PSAnbGFyZ2UnO1xuICB9XG5cbiAgZ2V0IGlzU21hbGwoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubnpTaXplID09PSAnc21hbGwnO1xuICB9XG5cbiAgZ2V0IGlzQWZmaXgoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICghISh0aGlzLm56U3VmZml4IHx8IHRoaXMubnpQcmVmaXggfHwgdGhpcy5uelByZWZpeEljb24gfHwgdGhpcy5uelN1ZmZpeEljb24pKTtcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW50LWlucHV0LWFmZml4LXdyYXBwZXInKVxuICBnZXQgaXNBZmZpeFdyYXBwZXIoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICghISh0aGlzLm56U3VmZml4IHx8IHRoaXMubnpQcmVmaXggfHwgdGhpcy5uelByZWZpeEljb24gfHwgdGhpcy5uelN1ZmZpeEljb24pKSAmJiAhdGhpcy5pc0FkZE9uO1xuICB9XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hbnQtaW5wdXQtZ3JvdXAtd3JhcHBlcicpXG4gIGdldCBpc0FkZE9uKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhISh0aGlzLm56QWRkT25BZnRlciB8fCB0aGlzLm56QWRkT25CZWZvcmUgfHwgdGhpcy5uekFkZE9uQWZ0ZXJJY29uIHx8IHRoaXMubnpBZGRPbkJlZm9yZUljb24pO1xuICB9XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hbnQtaW5wdXQtZ3JvdXAnKVxuICBnZXQgaXNHcm91cCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKCF0aGlzLmlzQWZmaXgpICYmICghdGhpcy5pc0FkZE9uKTtcbiAgfVxuXG4gIEBIb3N0QmluZGluZyhgY2xhc3MuYW50LWlucHV0LWdyb3VwLWxnYClcbiAgZ2V0IGlzTGFyZ2VHcm91cCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5pc0dyb3VwICYmIHRoaXMuaXNMYXJnZTtcbiAgfVxuXG4gIEBIb3N0QmluZGluZyhgY2xhc3MuYW50LWlucHV0LWdyb3VwLXdyYXBwZXItbGdgKVxuICBnZXQgaXNMYXJnZUdyb3VwV3JhcHBlcigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5pc0FkZE9uICYmIHRoaXMuaXNMYXJnZTtcbiAgfVxuXG4gIEBIb3N0QmluZGluZyhgY2xhc3MuYW50LWlucHV0LWFmZml4LXdyYXBwZXItbGdgKVxuICBnZXQgaXNMYXJnZUFmZml4KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmlzQWZmaXhXcmFwcGVyICYmIHRoaXMuaXNMYXJnZTtcbiAgfVxuXG4gIEBIb3N0QmluZGluZyhgY2xhc3MuYW50LWlucHV0LXNlYXJjaC1sZ2ApXG4gIGdldCBpc0xhcmdlU2VhcmNoKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLm56U2VhcmNoICYmIHRoaXMuaXNMYXJnZTtcbiAgfVxuXG4gIEBIb3N0QmluZGluZyhgY2xhc3MuYW50LWlucHV0LWdyb3VwLXNtYClcbiAgZ2V0IGlzU21hbGxHcm91cCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5pc0dyb3VwICYmIHRoaXMuaXNTbWFsbDtcbiAgfVxuXG4gIEBIb3N0QmluZGluZyhgY2xhc3MuYW50LWlucHV0LWFmZml4LXdyYXBwZXItc21gKVxuICBnZXQgaXNTbWFsbEFmZml4KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmlzQWZmaXhXcmFwcGVyICYmIHRoaXMuaXNTbWFsbDtcbiAgfVxuXG4gIEBIb3N0QmluZGluZyhgY2xhc3MuYW50LWlucHV0LWdyb3VwLXdyYXBwZXItc21gKVxuICBnZXQgaXNTbWFsbEdyb3VwV3JhcHBlcigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5pc0FkZE9uICYmIHRoaXMuaXNTbWFsbDtcbiAgfVxuXG4gIEBIb3N0QmluZGluZyhgY2xhc3MuYW50LWlucHV0LXNlYXJjaC1zbWApXG4gIGdldCBpc1NtYWxsU2VhcmNoKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLm56U2VhcmNoICYmIHRoaXMuaXNTbWFsbDtcbiAgfVxuXG4gIHVwZGF0ZUNoaWxkcmVuSW5wdXRTaXplKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLm56SW5wdXREaXJlY3RpdmVRdWVyeUxpc3QpIHtcbiAgICAgIHRoaXMubnpJbnB1dERpcmVjdGl2ZVF1ZXJ5TGlzdC5mb3JFYWNoKGl0ZW0gPT4gaXRlbS5uelNpemUgPSB0aGlzLm56U2l6ZSk7XG4gICAgfVxuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZikge1xuXG4gIH1cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZCB7XG4gICAgdGhpcy51cGRhdGVDaGlsZHJlbklucHV0U2l6ZSgpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBOekljb25Nb2R1bGUgfSBmcm9tICcuLi9pY29uL256LWljb24ubW9kdWxlJztcblxuaW1wb3J0IHsgTnpJbnB1dEdyb3VwQ29tcG9uZW50IH0gZnJvbSAnLi9uei1pbnB1dC1ncm91cC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpJbnB1dERpcmVjdGl2ZSB9IGZyb20gJy4vbnotaW5wdXQuZGlyZWN0aXZlJztcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbIE56SW5wdXREaXJlY3RpdmUsIE56SW5wdXRHcm91cENvbXBvbmVudCBdLFxuICBleHBvcnRzICAgICA6IFsgTnpJbnB1dERpcmVjdGl2ZSwgTnpJbnB1dEdyb3VwQ29tcG9uZW50IF0sXG4gIGltcG9ydHMgICAgIDogWyBDb21tb25Nb2R1bGUsIEZvcm1zTW9kdWxlLCBOekljb25Nb2R1bGUgXVxufSlcbmV4cG9ydCBjbGFzcyBOeklucHV0TW9kdWxlIHtcbn1cbiIsImltcG9ydCB7IENvbm5lY3Rpb25Qb3NpdGlvblBhaXIgfSBmcm9tICdAYW5ndWxhci9jZGsvb3ZlcmxheSc7XG5cbmV4cG9ydCBjb25zdCBQT1NJVElPTl9NQVA6IHsgW2tleTogc3RyaW5nXTogQ29ubmVjdGlvblBvc2l0aW9uUGFpciB9ID0ge1xuICAndG9wJyAgICAgICAgIDoge1xuICAgIG9yaWdpblggOiAnY2VudGVyJyxcbiAgICBvcmlnaW5ZIDogJ3RvcCcsXG4gICAgb3ZlcmxheVg6ICdjZW50ZXInLFxuICAgIG92ZXJsYXlZOiAnYm90dG9tJ1xuICB9LFxuICAndG9wQ2VudGVyJyAgIDoge1xuICAgIG9yaWdpblggOiAnY2VudGVyJyxcbiAgICBvcmlnaW5ZIDogJ3RvcCcsXG4gICAgb3ZlcmxheVg6ICdjZW50ZXInLFxuICAgIG92ZXJsYXlZOiAnYm90dG9tJ1xuICB9LFxuICAndG9wTGVmdCcgICAgIDoge1xuICAgIG9yaWdpblggOiAnc3RhcnQnLFxuICAgIG9yaWdpblkgOiAndG9wJyxcbiAgICBvdmVybGF5WDogJ3N0YXJ0JyxcbiAgICBvdmVybGF5WTogJ2JvdHRvbSdcbiAgfSxcbiAgJ3RvcFJpZ2h0JyAgICA6IHtcbiAgICBvcmlnaW5YIDogJ2VuZCcsXG4gICAgb3JpZ2luWSA6ICd0b3AnLFxuICAgIG92ZXJsYXlYOiAnZW5kJyxcbiAgICBvdmVybGF5WTogJ2JvdHRvbSdcbiAgfSxcbiAgJ3JpZ2h0JyAgICAgICA6IHtcbiAgICBvcmlnaW5YIDogJ2VuZCcsXG4gICAgb3JpZ2luWSA6ICdjZW50ZXInLFxuICAgIG92ZXJsYXlYOiAnc3RhcnQnLFxuICAgIG92ZXJsYXlZOiAnY2VudGVyJyxcbiAgfSxcbiAgJ3JpZ2h0VG9wJyAgICA6IHtcbiAgICBvcmlnaW5YIDogJ2VuZCcsXG4gICAgb3JpZ2luWSA6ICd0b3AnLFxuICAgIG92ZXJsYXlYOiAnc3RhcnQnLFxuICAgIG92ZXJsYXlZOiAndG9wJyxcbiAgfSxcbiAgJ3JpZ2h0Qm90dG9tJyA6IHtcbiAgICBvcmlnaW5YIDogJ2VuZCcsXG4gICAgb3JpZ2luWSA6ICdib3R0b20nLFxuICAgIG92ZXJsYXlYOiAnc3RhcnQnLFxuICAgIG92ZXJsYXlZOiAnYm90dG9tJyxcbiAgfSxcbiAgJ2JvdHRvbScgICAgICA6IHtcbiAgICBvcmlnaW5YIDogJ2NlbnRlcicsXG4gICAgb3JpZ2luWSA6ICdib3R0b20nLFxuICAgIG92ZXJsYXlYOiAnY2VudGVyJyxcbiAgICBvdmVybGF5WTogJ3RvcCcsXG4gIH0sXG4gICdib3R0b21DZW50ZXInOiB7XG4gICAgb3JpZ2luWCA6ICdjZW50ZXInLFxuICAgIG9yaWdpblkgOiAnYm90dG9tJyxcbiAgICBvdmVybGF5WDogJ2NlbnRlcicsXG4gICAgb3ZlcmxheVk6ICd0b3AnLFxuICB9LFxuICAnYm90dG9tTGVmdCcgIDoge1xuICAgIG9yaWdpblggOiAnc3RhcnQnLFxuICAgIG9yaWdpblkgOiAnYm90dG9tJyxcbiAgICBvdmVybGF5WDogJ3N0YXJ0JyxcbiAgICBvdmVybGF5WTogJ3RvcCcsXG4gIH0sXG4gICdib3R0b21SaWdodCcgOiB7XG4gICAgb3JpZ2luWCA6ICdlbmQnLFxuICAgIG9yaWdpblkgOiAnYm90dG9tJyxcbiAgICBvdmVybGF5WDogJ2VuZCcsXG4gICAgb3ZlcmxheVk6ICd0b3AnLFxuICB9LFxuICAnbGVmdCcgICAgICAgIDoge1xuICAgIG9yaWdpblggOiAnc3RhcnQnLFxuICAgIG9yaWdpblkgOiAnY2VudGVyJyxcbiAgICBvdmVybGF5WDogJ2VuZCcsXG4gICAgb3ZlcmxheVk6ICdjZW50ZXInLFxuICB9LFxuICAnbGVmdFRvcCcgICAgIDoge1xuICAgIG9yaWdpblggOiAnc3RhcnQnLFxuICAgIG9yaWdpblkgOiAndG9wJyxcbiAgICBvdmVybGF5WDogJ2VuZCcsXG4gICAgb3ZlcmxheVk6ICd0b3AnLFxuICB9LFxuICAnbGVmdEJvdHRvbScgIDoge1xuICAgIG9yaWdpblggOiAnc3RhcnQnLFxuICAgIG9yaWdpblkgOiAnYm90dG9tJyxcbiAgICBvdmVybGF5WDogJ2VuZCcsXG4gICAgb3ZlcmxheVk6ICdib3R0b20nLFxuICB9LFxufSBhcyB7IH0gYXMgeyBba2V5OiBzdHJpbmddOiBDb25uZWN0aW9uUG9zaXRpb25QYWlyIH07XG5cbi8vIFRPRE86IFRoZSB3aG9sZSBsb2dpYyBkb2VzIG5vdCBtYWtlIHNlbnNlIGhlcmUsIF9vYmplY3RWYWx1ZXMganVzdCByZXR1cm5zIGEgY29weSBvZiBvcmlnaW5hbCBhcnJheVxuZXhwb3J0IGNvbnN0IERFRkFVTFRfNF9QT1NJVElPTlMgPSBfb2JqZWN0VmFsdWVzKFsgUE9TSVRJT05fTUFQLnRvcCwgUE9TSVRJT05fTUFQLnJpZ2h0LCBQT1NJVElPTl9NQVAuYm90dG9tLCBQT1NJVElPTl9NQVAubGVmdF0pO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfRFJPUERPV05fUE9TSVRJT05TID0gX29iamVjdFZhbHVlcyhbIFBPU0lUSU9OX01BUC5ib3R0b21MZWZ0LCBQT1NJVElPTl9NQVAudG9wTGVmdCBdKTtcblxuLy8gZXhwb3J0IGNvbnN0IERFRkFVTFRfREFURVBJQ0tFUl9QT1NJVElPTlMgPSBbXG4vLyAgIHtcbi8vICAgICBvcmlnaW5YIDogJ3N0YXJ0Jyxcbi8vICAgICBvcmlnaW5ZIDogJ3RvcCcsXG4vLyAgICAgb3ZlcmxheVg6ICdzdGFydCcsXG4vLyAgICAgb3ZlcmxheVk6ICd0b3AnLFxuLy8gICB9LFxuLy8gICB7XG4vLyAgICAgb3JpZ2luWCA6ICdzdGFydCcsXG4vLyAgICAgb3JpZ2luWSA6ICdib3R0b20nLFxuLy8gICAgIG92ZXJsYXlYOiAnc3RhcnQnLFxuLy8gICAgIG92ZXJsYXlZOiAnYm90dG9tJyxcbi8vICAgfVxuLy8gXSBhcyBDb25uZWN0aW9uUG9zaXRpb25QYWlyW107XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX01FTlRJT05fUE9TSVRJT05TID0gW1xuICBQT1NJVElPTl9NQVAuYm90dG9tTGVmdCxcbiAge1xuICAgIG9yaWdpblggOiAnc3RhcnQnLFxuICAgIG9yaWdpblkgOiAnYm90dG9tJyxcbiAgICBvdmVybGF5WDogJ3N0YXJ0JyxcbiAgICBvdmVybGF5WTogJ2JvdHRvbSdcbiAgfVxuXSBhcyBDb25uZWN0aW9uUG9zaXRpb25QYWlyW107XG5cbmZ1bmN0aW9uIGFycmF5TWFwPFQsIFM+KGFycmF5OiBUW10sIGl0ZXJhdGVlOiAoaXRlbTogVCwgaW5kZXg6IG51bWJlciwgYXJyOiBUW10pID0+IFMpOiBTW10ge1xuICBsZXQgaW5kZXggPSAtMTtcbiAgY29uc3QgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gIGNvbnN0IHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICByZXN1bHRbIGluZGV4IF0gPSBpdGVyYXRlZShhcnJheVsgaW5kZXggXSwgaW5kZXgsIGFycmF5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBiYXNlVmFsdWVzPFQ+KG9iamVjdDogeyBba2V5OiBzdHJpbmddOiBUIH0gfCBUW10sIHByb3BzOiBzdHJpbmdbXSk6IFRbXSB7XG4gIHJldHVybiBhcnJheU1hcChwcm9wcywgIChrZXkpID0+IHtcbiAgICByZXR1cm4gb2JqZWN0WyBrZXkgXTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RWYWx1ZXM8VD4ob2JqZWN0OiB7IFtrZXk6IHN0cmluZ106IFQgfSB8IFRbXSk6IFRbXSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZVZhbHVlcyhvYmplY3QsIE9iamVjdC5rZXlzKG9iamVjdCkpO1xufVxuIiwiLy8gdHNsaW50OmRpc2FibGU6bm8tYW55XG5pbXBvcnQge1xuICBmb3J3YXJkUmVmLFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIEhvc3RMaXN0ZW5lcixcbiAgSW5wdXQsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBPdXRwdXQsXG4gIFRlbXBsYXRlUmVmLFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IEJBQ0tTUEFDRSwgRE9XTl9BUlJPVywgRU5URVIsIEVTQ0FQRSwgTEVGVF9BUlJPVywgUklHSFRfQVJST1csIFVQX0FSUk9XIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2tleWNvZGVzJztcbmltcG9ydCB7IENvbm5lY3RlZE92ZXJsYXlQb3NpdGlvbkNoYW5nZSwgQ29ubmVjdGlvblBvc2l0aW9uUGFpciB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcbmltcG9ydCB7IERFRkFVTFRfRFJPUERPV05fUE9TSVRJT05TIH0gZnJvbSAnLi4vY29yZS9vdmVybGF5L292ZXJsYXktcG9zaXRpb24tbWFwJztcblxuaW1wb3J0IHsgZHJvcERvd25BbmltYXRpb24gfSBmcm9tICcuLi9jb3JlL2FuaW1hdGlvbi9kcm9wZG93bi1hbmltYXRpb25zJztcbmltcG9ydCB7IE56VXBkYXRlSG9zdENsYXNzU2VydmljZSB9IGZyb20gJy4uL2NvcmUvc2VydmljZXMvdXBkYXRlLWhvc3QtY2xhc3Muc2VydmljZSc7XG5pbXBvcnQgeyB0b0Jvb2xlYW4gfSBmcm9tICcuLi9jb3JlL3V0aWwvY29udmVydCc7XG5cbmZ1bmN0aW9uIHRvQXJyYXk8VD4odmFsdWU6IFQgfCBUW10pOiBUW10ge1xuICBsZXQgcmV0OiBUW107XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0ID0gW107XG4gIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0ID0gWyB2YWx1ZSBdO1xuICB9IGVsc2Uge1xuICAgIHJldCA9IHZhbHVlO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGFycmF5RXF1YWxzPFQ+KGFycmF5MTogVFtdLCBhcnJheTI6IFRbXSk6IGJvb2xlYW4ge1xuICBpZiAoIWFycmF5MSB8fCAhYXJyYXkyIHx8IGFycmF5MS5sZW5ndGggIT09IGFycmF5Mi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBsZW4gPSBhcnJheTEubGVuZ3RoO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGFycmF5MVsgaSBdICE9PSBhcnJheTJbIGkgXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuY29uc3QgZGVmYXVsdERpc3BsYXlSZW5kZXIgPSBsYWJlbCA9PiBsYWJlbC5qb2luKCcgLyAnKTtcblxuZXhwb3J0IHR5cGUgTnpDYXNjYWRlckV4cGFuZFRyaWdnZXIgPSAnY2xpY2snIHwgJ2hvdmVyJztcbmV4cG9ydCB0eXBlIE56Q2FzY2FkZXJUcmlnZ2VyVHlwZSA9ICdjbGljaycgfCAnaG92ZXInO1xuZXhwb3J0IHR5cGUgTnpDYXNjYWRlclNpemUgPSAnc21hbGwnIHwgJ2xhcmdlJyB8ICdkZWZhdWx0JyA7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2FzY2FkZXJPcHRpb24ge1xuICB2YWx1ZT86IGFueTtcbiAgbGFiZWw/OiBzdHJpbmc7XG4gIHRpdGxlPzogc3RyaW5nO1xuICBkaXNhYmxlZD86IGJvb2xlYW47XG4gIGxvYWRpbmc/OiBib29sZWFuO1xuICBpc0xlYWY/OiBib29sZWFuO1xuICBwYXJlbnQ/OiBDYXNjYWRlck9wdGlvbjtcbiAgY2hpbGRyZW4/OiBDYXNjYWRlck9wdGlvbltdO1xuXG4gIFsga2V5OiBzdHJpbmcgXTogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENhc2NhZGVyU2VhcmNoT3B0aW9uIGV4dGVuZHMgQ2FzY2FkZXJPcHRpb24ge1xuICBwYXRoOiBDYXNjYWRlck9wdGlvbltdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE56U2hvd1NlYXJjaE9wdGlvbnMge1xuICBmaWx0ZXI/KGlucHV0VmFsdWU6IHN0cmluZywgcGF0aDogQ2FzY2FkZXJPcHRpb25bXSk6IGJvb2xlYW47XG5cbiAgc29ydGVyPyhhOiBDYXNjYWRlck9wdGlvbltdLCBiOiBDYXNjYWRlck9wdGlvbltdLCBpbnB1dFZhbHVlOiBzdHJpbmcpOiBudW1iZXI7XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICAgICAgOiAnbnotY2FzY2FkZXIsW256LWNhc2NhZGVyXScsXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxuICBhbmltYXRpb25zICAgICAgICAgOiBbXG4gICAgZHJvcERvd25BbmltYXRpb25cbiAgXSxcbiAgdGVtcGxhdGVVcmwgICAgICAgIDogJy4vbnotY2FzY2FkZXIuY29tcG9uZW50Lmh0bWwnLFxuICBwcm92aWRlcnMgICAgICAgICAgOiBbXG4gICAgTnpVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlLFxuICAgIHtcbiAgICAgIHByb3ZpZGUgICAgOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IE56Q2FzY2FkZXJDb21wb25lbnQpLFxuICAgICAgbXVsdGkgICAgICA6IHRydWVcbiAgICB9XG4gIF0sXG4gIGhvc3QgICAgICAgICAgICAgICA6IHtcbiAgICAnW2F0dHIudGFiSW5kZXhdJzogJ1wiMFwiJ1xuICB9LFxuICBzdHlsZXMgICAgICAgICAgICAgOiBbXG4gICAgICBgLmFudC1jYXNjYWRlci1tZW51cyB7XG4gICAgICBtYXJnaW4tdG9wOiA0cHg7XG4gICAgICBtYXJnaW4tYm90dG9tOiA0cHg7XG4gICAgICB0b3A6IDEwMCU7XG4gICAgICBsZWZ0OiAwO1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgfWBcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBOekNhc2NhZGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcbiAgcHJpdmF0ZSBhbGxvd0NsZWFyID0gdHJ1ZTtcbiAgcHJpdmF0ZSBhdXRvRm9jdXMgPSBmYWxzZTtcbiAgcHJpdmF0ZSBkaXNhYmxlZCA9IGZhbHNlO1xuICBwcml2YXRlIGVuYWJsZUNhY2hlID0gdHJ1ZTtcbiAgcHJpdmF0ZSBzaG93QXJyb3cgPSB0cnVlO1xuICBwcml2YXRlIHNob3dJbnB1dCA9IHRydWU7XG4gIHByaXZhdGUgc2l6ZTogTnpDYXNjYWRlclNpemUgPSAnZGVmYXVsdCc7XG4gIHByaXZhdGUgcHJlZml4Q2xzID0gJ2FudC1jYXNjYWRlcic7XG4gIHByaXZhdGUgaW5wdXRQcmVmaXhDbHMgPSAnYW50LWlucHV0JztcbiAgcHJpdmF0ZSBtZW51Q2xhc3NOYW1lO1xuICBwcml2YXRlIGNvbHVtbkNsYXNzTmFtZTtcbiAgcHJpdmF0ZSBjaGFuZ2VPblNlbGVjdCA9IGZhbHNlO1xuICBwcml2YXRlIHNob3dTZWFyY2g6IGJvb2xlYW4gfCBOelNob3dTZWFyY2hPcHRpb25zO1xuICBwcml2YXRlIGRlZmF1bHRWYWx1ZTogYW55W107XG5cbiAgcHVibGljIGRyb3BEb3duUG9zaXRpb24gPSAnYm90dG9tJztcbiAgcHVibGljIG1lbnVWaXNpYmxlID0gZmFsc2U7XG4gIHB1YmxpYyBpc0xvYWRpbmcgPSBmYWxzZTtcbiAgcHJpdmF0ZSBpc09wZW5pbmcgPSBmYWxzZTtcblxuICAvLyDDpcKGwoXDqcKDwqjDpsKgwrfDpcK8wo9cbiAgcHJpdmF0ZSBfYXJyb3dDbHM6IHsgWyBuYW1lOiBzdHJpbmcgXTogYW55IH07XG4gIHByaXZhdGUgX2NsZWFyQ2xzOiB7IFsgbmFtZTogc3RyaW5nIF06IGFueSB9O1xuICBwcml2YXRlIF9pbnB1dENsczogeyBbIG5hbWU6IHN0cmluZyBdOiBhbnkgfTtcbiAgcHJpdmF0ZSBfbGFiZWxDbHM6IHsgWyBuYW1lOiBzdHJpbmcgXTogYW55IH07XG4gIHByaXZhdGUgX2xvYWRpbmdDbHM6IHsgWyBuYW1lOiBzdHJpbmcgXTogYW55IH07XG4gIHByaXZhdGUgX21lbnVDbHM6IHsgWyBuYW1lOiBzdHJpbmcgXTogYW55IH07XG4gIHByaXZhdGUgX21lbnVDb2x1bW5DbHM6IHsgWyBuYW1lOiBzdHJpbmcgXTogYW55IH07XG5cbiAgcHVibGljIGVsOiBIVE1MRWxlbWVudCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuXG4gIHByaXZhdGUgaXNGb2N1c2VkID0gZmFsc2U7XG5cbiAgLyoqIMOpwoDCicOmwovCqcOpwoDCicOpwqHCucOlwpDCjsOvwrzCjMOmwrjCssOmwp/Ck8OmwpjCvsOnwqTCusOmwpbCh8OmwpzCrCAqL1xuICBwcml2YXRlIGxhYmVsUmVuZGVyVHBsOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICBwdWJsaWMgaXNMYWJlbFJlbmRlclRlbXBsYXRlID0gZmFsc2U7XG4gIHB1YmxpYyBsYWJlbFJlbmRlclRleHQ6IHN0cmluZztcbiAgcHVibGljIGxhYmVsUmVuZGVyQ29udGV4dDogYW55ID0ge307XG5cbiAgLy8gw6XCvcKTw6XCicKNw6XCgMK8XG4gIHByaXZhdGUgdmFsdWU6IGFueVtdO1xuICAvLyDDpcK3wrLDqcKAwonDpsKLwqnDp8KawoTDqcKAwonDqcKhwrnDqMKhwqjDp8KkwrrDpcK9wpPDpcKJwo3DpcK3wrLDp8Khwq7DqMKuwqTDp8KawoTDqcKAwonDqcKhwrnDr8K8wppzZWxlY3Rpb24gd2lsbCB0cmlnZ2VyIHZhbHVlIGNoYW5nZVxuICBwcml2YXRlIHNlbGVjdGVkT3B0aW9uczogQ2FzY2FkZXJPcHRpb25bXSA9IFtdO1xuICAvLyDDpcK3wrLDpsK/woDDpsK0wrvDp8KawoTDqcKAwonDqcKhwrnDqMKhwqjDp8KkwrrDqcKAwprDqMK/wofDqcKUwq7Dp8KbwpjDpsKWwrnDpcKQwpHDqcKUwq7DqcKAwonDpsKLwqnDp8KawoTDqcKAwonDqcKhwrnDr8K8wozDpcK5wrbDpsKcwqrDpsKcwoDDp8K7wojDp8Khwq7DqMKuwqTDr8K8wojDqcKZwqTDqcKdwp7DpsKMwolFTlRFUsOpwpTCrsOvwrzCicOvwrzCmmFjdGl2YWN0aW9uIHdpbGwgbm90IHRyaWdnZXIgdmFsdWUgY2hhbmdlXG4gIHByaXZhdGUgYWN0aXZhdGVkT3B0aW9uczogQ2FzY2FkZXJPcHRpb25bXSA9IFtdO1xuICAvLyDDqMKhwqjDp8KkwrrDpcK9wpPDpcKJwo3DqMKPwpzDpcKNwpXDp8KawoTDpsKVwrDDpsKNwq7DpcKIwpfDr8K8wpphbGwgZGF0YSBjb2x1bW5zXG4gIHB1YmxpYyBuekNvbHVtbnM6IENhc2NhZGVyT3B0aW9uW11bXSA9IFtdO1xuXG4gIC8vIMOmwpjCvsOnwqTCusOmwojClsOpwprCkMOowpfCj8Oowo/CnMOlwo3ClcOowq7CocOmwpfCtsOlwpnCqFxuICBwcml2YXRlIGRlbGF5VGltZXI6IGFueTtcbiAgcHJpdmF0ZSBkZWxheVNlbGVjdFRpbWVyOiBhbnk7XG5cbiAgLyoqIMOmwpDCnMOnwrTCosOnwpvCuMOlwoXCs8OnwprChMOowr7Ck8OlwoXCpcOlwoDCvCAqL1xuICBwcml2YXRlIF9pbnB1dFZhbHVlID0gJyc7XG4gIGdldCBpbnB1dFZhbHVlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2lucHV0VmFsdWU7XG4gIH1cblxuICBzZXQgaW5wdXRWYWx1ZShpbnB1dFZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9pbnB1dFZhbHVlID0gaW5wdXRWYWx1ZTtcbiAgICBjb25zdCB3aWxsQmVJblNlYXJjaCA9ICEhaW5wdXRWYWx1ZTtcblxuICAgIC8vIMOmwpDCnMOnwrTCosOnworCtsOmwoDCgcOlwo/CmMOlworCqMOkwrnCi8OlwonCjcOvwrzCjMOlwqbCgsOowqbCgcOowr/Cm8OlwoXCpcOlwojCmcOowqbCgcOkwr/CncOnwpXCmcOkwrnCi8OlwonCjcOmwr/CgMOmwrTCu8OpwoDCicOpwqHCucOnwprChMOlwr/Cq8OnwoXCp8OvwrzCjMOpwoDCgMOlwofCusOmwpDCnMOnwrTCosOnworCtsOmwoDCgcOowqbCgcOowr/CmMOlwo7Cn8Oowq/CpcOlwr/Cq8OnwoXCp1xuICAgIGlmICghdGhpcy5pblNlYXJjaCAmJiB3aWxsQmVJblNlYXJjaCkge1xuICAgICAgdGhpcy5vbGRBY3RpdmF0ZWRPcHRpb25zID0gdGhpcy5hY3RpdmF0ZWRPcHRpb25zO1xuICAgICAgdGhpcy5hY3RpdmF0ZWRPcHRpb25zID0gW107XG4gICAgfSBlbHNlIGlmICh0aGlzLmluU2VhcmNoICYmICF3aWxsQmVJblNlYXJjaCkge1xuICAgICAgdGhpcy5hY3RpdmF0ZWRPcHRpb25zID0gdGhpcy5vbGRBY3RpdmF0ZWRPcHRpb25zO1xuICAgIH1cblxuICAgIC8vIMOmwpDCnMOnwrTCosOnworCtsOmwoDCgcOlwo/CmMOmwpvCtMOkwrnCi8OlwpDCjlxuICAgIHRoaXMuaW5TZWFyY2ggPSAhIXdpbGxCZUluU2VhcmNoO1xuICAgIGlmICh0aGlzLmluU2VhcmNoKSB7XG4gICAgICB0aGlzLmxhYmVsUmVuZGVyVGV4dCA9ICcnO1xuICAgICAgdGhpcy5wcmVwYXJlU2VhcmNoVmFsdWUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuc2hvd1NlYXJjaCkge1xuICAgICAgICB0aGlzLm56Q29sdW1ucyA9IHRoaXMub2xkQ29sdW1uc0hvbGRlcjtcbiAgICAgIH1cbiAgICAgIHRoaXMuYnVpbGREaXNwbGF5TGFiZWwoKTtcbiAgICAgIHRoaXMuc2VhcmNoV2lkdGhTdHlsZSA9ICcnO1xuICAgIH1cbiAgICB0aGlzLnNldENsYXNzTWFwKCk7XG4gIH1cblxuICAvLyBuZ01vZGVsIEFjY2Vzc1xuICBvbkNoYW5nZTogYW55ID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuICBvblRvdWNoZWQ6IGFueSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbiAgcG9zaXRpb25zOiBDb25uZWN0aW9uUG9zaXRpb25QYWlyW10gPSBbIC4uLkRFRkFVTFRfRFJPUERPV05fUE9TSVRJT05TIF07XG5cbiAgLyoqIERpc3BsYXkgUmVuZGVyIG5nVGVtcGxhdGUgKi9cbiAgQElucHV0KClcbiAgc2V0IG56TGFiZWxSZW5kZXIodmFsdWU6IFRlbXBsYXRlUmVmPGFueT4pIHtcbiAgICB0aGlzLmxhYmVsUmVuZGVyVHBsID0gdmFsdWU7XG4gICAgdGhpcy5pc0xhYmVsUmVuZGVyVGVtcGxhdGUgPSAodmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZik7XG4gIH1cblxuICBnZXQgbnpMYWJlbFJlbmRlcigpOiBUZW1wbGF0ZVJlZjxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5sYWJlbFJlbmRlclRwbDtcbiAgfVxuXG4gIC8qKiBwcmVmaXhDbHMgKi9cbiAgQElucHV0KClcbiAgc2V0IG56UHJlZml4Q2xzKHByZWZpeENsczogc3RyaW5nKSB7XG4gICAgdGhpcy5wcmVmaXhDbHMgPSBwcmVmaXhDbHM7XG4gICAgdGhpcy5zZXRDbGFzc01hcCgpO1xuICAgIHRoaXMuc2V0TGFiZWxDbGFzcygpO1xuICAgIHRoaXMuc2V0QXJyb3dDbGFzcygpO1xuICAgIHRoaXMuc2V0TG9hZGluZ0NsYXNzKCk7XG4gICAgdGhpcy5zZXRDbGVhckNsYXNzKCk7XG4gICAgdGhpcy5zZXRJbnB1dENsYXNzKCk7XG4gICAgdGhpcy5zZXRNZW51Q2xhc3MoKTtcbiAgICB0aGlzLnNldE1lbnVDb2x1bW5DbGFzcygpO1xuICB9XG5cbiAgZ2V0IG56UHJlZml4Q2xzKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMucHJlZml4Q2xzO1xuICB9XG5cbiAgLyoqIFdoZXRoZXIgaXMgZGlzYWJsZWQgKi9cbiAgQElucHV0KClcbiAgc2V0IG56RGlzYWJsZWQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLmRpc2FibGVkID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgICB0aGlzLnNldENsYXNzTWFwKCk7XG4gICAgdGhpcy5zZXRJbnB1dENsYXNzKCk7XG4gIH1cblxuICBnZXQgbnpEaXNhYmxlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5kaXNhYmxlZDtcbiAgfVxuXG4gIC8qKiBJbnB1dCBzaXplLCBvbmUgb2YgYGxhcmdlYCBgZGVmYXVsdGAgYHNtYWxsYCAqL1xuICBASW5wdXQoKVxuICBzZXQgbnpTaXplKHZhbHVlOiBOekNhc2NhZGVyU2l6ZSkge1xuICAgIHRoaXMuc2l6ZSA9IHZhbHVlO1xuICAgIHRoaXMuc2V0Q2xhc3NNYXAoKTtcbiAgICB0aGlzLnNldElucHV0Q2xhc3MoKTtcbiAgfVxuXG4gIGdldCBuelNpemUoKTogTnpDYXNjYWRlclNpemUge1xuICAgIHJldHVybiB0aGlzLnNpemU7XG4gIH1cblxuICAvKiogV2hldGhlciBzaG93IGlucHV0IGJveC4gRGVmYXVsdHMgdG8gYHRydWVgLiAqL1xuICBASW5wdXQoKVxuICBzZXQgbnpTaG93SW5wdXQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLnNob3dJbnB1dCA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBnZXQgbnpTaG93SW5wdXQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuc2hvd0lucHV0O1xuICB9XG5cbiAgLyoqIFdoZXRoZXIgY2FuIHNlYXJjaC4gRGVmYXVsdHMgdG8gYGZhbHNlYC4gKi9cbiAgQElucHV0KClcbiAgc2V0IG56U2hvd1NlYXJjaCh2YWx1ZTogYm9vbGVhbiB8IE56U2hvd1NlYXJjaE9wdGlvbnMpIHtcbiAgICB0aGlzLnNob3dTZWFyY2ggPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBuelNob3dTZWFyY2goKTogYm9vbGVhbiB8IE56U2hvd1NlYXJjaE9wdGlvbnMge1xuICAgIHJldHVybiB0aGlzLnNob3dTZWFyY2g7XG4gIH1cblxuICBwdWJsaWMgc2VhcmNoV2lkdGhTdHlsZTogc3RyaW5nO1xuICBwcml2YXRlIG9sZENvbHVtbnNIb2xkZXI7XG4gIHByaXZhdGUgb2xkQWN0aXZhdGVkT3B0aW9ucztcblxuICAvKiogSWYgY2FzY2FkZXIgaXMgaW4gc2VhcmNoIG1vZGUuICovXG4gIHB1YmxpYyBpblNlYXJjaCA9IGZhbHNlO1xuXG4gIC8qKiBXaGV0aGVyIGFsbG93IGNsZWFyLiBEZWZhdWx0cyB0byBgdHJ1ZWAuICovXG4gIEBJbnB1dCgpXG4gIHNldCBuekFsbG93Q2xlYXIodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLmFsbG93Q2xlYXIgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56QWxsb3dDbGVhcigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5hbGxvd0NsZWFyO1xuICB9XG5cbiAgLyoqIFdoZXRoZXIgYXV0byBmb2N1cy4gKi9cbiAgQElucHV0KClcbiAgc2V0IG56QXV0b0ZvY3VzKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5hdXRvRm9jdXMgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56QXV0b0ZvY3VzKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmF1dG9Gb2N1cztcbiAgfVxuXG4gIC8qKiBXaGV0aGVyIHRvIHNob3cgYXJyb3cgKi9cbiAgQElucHV0KClcbiAgc2V0IG56U2hvd0Fycm93KHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5zaG93QXJyb3cgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56U2hvd0Fycm93KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnNob3dBcnJvdztcbiAgfVxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzTmFtZSBvZiBwb3B1cCBvdmVybGF5ICovXG4gIEBJbnB1dCgpXG4gIHNldCBuek1lbnVDbGFzc05hbWUodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMubWVudUNsYXNzTmFtZSA9IHZhbHVlO1xuICAgIHRoaXMuc2V0TWVudUNsYXNzKCk7XG4gIH1cblxuICBnZXQgbnpNZW51Q2xhc3NOYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMubWVudUNsYXNzTmFtZTtcbiAgfVxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzTmFtZSBvZiBwb3B1cCBvdmVybGF5IGNvbHVtbiAqL1xuICBASW5wdXQoKVxuICBzZXQgbnpDb2x1bW5DbGFzc05hbWUodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuY29sdW1uQ2xhc3NOYW1lID0gdmFsdWU7XG4gICAgdGhpcy5zZXRNZW51Q29sdW1uQ2xhc3MoKTtcbiAgfVxuXG4gIGdldCBuekNvbHVtbkNsYXNzTmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmNvbHVtbkNsYXNzTmFtZTtcbiAgfVxuXG4gIC8qKiBPcHRpb25zIGZvciBmaXJzdCBjb2x1bW4sIHN1YiBjb2x1bW4gd2lsbCBiZSBsb2FkIGFzeW5jICovXG4gIEBJbnB1dCgpIHNldCBuek9wdGlvbnMob3B0aW9uczogQ2FzY2FkZXJPcHRpb25bXSB8IG51bGwpIHtcbiAgICB0aGlzLm9sZENvbHVtbnNIb2xkZXIgPSB0aGlzLm56Q29sdW1ucyA9IG9wdGlvbnMgJiYgb3B0aW9ucy5sZW5ndGggPyBbIG9wdGlvbnMgXSA6IFtdO1xuICAgIGlmICghdGhpcy5pblNlYXJjaCkge1xuICAgICAgaWYgKHRoaXMuZGVmYXVsdFZhbHVlICYmIHRoaXMubnpDb2x1bW5zLmxlbmd0aCkge1xuICAgICAgICB0aGlzLmluaXRPcHRpb25zKDApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnByZXBhcmVTZWFyY2hWYWx1ZSgpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBuek9wdGlvbnMoKTogQ2FzY2FkZXJPcHRpb25bXSB7XG4gICAgcmV0dXJuIHRoaXMubnpDb2x1bW5zWyAwIF07XG4gIH1cblxuICAvKiogQ2hhbmdlIHZhbHVlIG9uIGVhY2ggc2VsZWN0aW9uIGlmIHNldCB0byB0cnVlICovXG4gIEBJbnB1dCgpXG4gIHNldCBuekNoYW5nZU9uU2VsZWN0KHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5jaGFuZ2VPblNlbGVjdCA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBnZXQgbnpDaGFuZ2VPblNlbGVjdCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5jaGFuZ2VPblNlbGVjdDtcbiAgfVxuXG4gIC8qKiBIb3ZlciB0ZXh0IGZvciB0aGUgY2xlYXIgaWNvbiAqL1xuICBASW5wdXQoKSBuekNsZWFyVGV4dCA9ICdDbGVhcic7XG5cbiAgLyoqIEV4cGFuZCBjb2x1bW4gaXRlbSB3aGVuIGNsaWNrIG9yIGhvdmVyLCBvbmUgb2YgJ2NsaWNrJyAnaG92ZXInICovXG4gIEBJbnB1dCgpIG56RXhwYW5kVHJpZ2dlcjogTnpDYXNjYWRlckV4cGFuZFRyaWdnZXIgPSAnY2xpY2snO1xuXG4gIC8qKiBTcGVjaWZ5IGNvbnRlbnQgdG8gc2hvdyB3aGVuIG5vIHJlc3VsdCBtYXRjaGVzLiAqL1xuICBASW5wdXQoKSBuek5vdEZvdW5kQ29udGVudCA9ICdOb3QgRm91bmQnO1xuXG4gIC8qKiBJbnB1dCBwbGFjZWhvbGRlciAqL1xuICBASW5wdXQoKSBuelBsYWNlSG9sZGVyID0gJ1BsZWFzZSBzZWxlY3QnO1xuXG4gIC8qKiBBZGRpdGlvbmFsIHN0eWxlIG9mIHBvcHVwIG92ZXJsYXkgKi9cbiAgQElucHV0KCkgbnpNZW51U3R5bGU6IHsgWyBrZXk6IHN0cmluZyBdOiBzdHJpbmc7IH07XG5cbiAgLyoqIENoYW5nZSB2YWx1ZSBvbiBzZWxlY3Rpb24gb25seSBpZiB0aGlzIGZ1bmN0aW9uIHJldHVybnMgYHRydWVgICovXG4gIEBJbnB1dCgpIG56Q2hhbmdlT246IChvcHRpb246IENhc2NhZGVyT3B0aW9uLCBsZXZlbDogbnVtYmVyKSA9PiBib29sZWFuO1xuXG4gIC8qKiBEZWxheSB0aW1lIHRvIHNob3cgd2hlbiBtb3VzZSBlbnRlciwgd2hlbiBgbnpFeHBhbmRUcmlnZ2VyYCBpcyBgaG92ZXJgLiAqL1xuICBASW5wdXQoKSBuek1vdXNlRW50ZXJEZWxheSA9IDE1MDsgLy8gbXNcblxuICAvKiogRGVsYXkgdGltZSB0byBoaWRlIHdoZW4gbW91c2UgZW50ZXIsIHdoZW4gYG56RXhwYW5kVHJpZ2dlcmAgaXMgYGhvdmVyYC4gKi9cbiAgQElucHV0KCkgbnpNb3VzZUxlYXZlRGVsYXkgPSAxNTA7IC8vIG1zXG5cbiAgLyoqIFRyaWdnZXJpbmcgbW9kZTogY2FuIGJlIEFycmF5PCdjbGljayd8J2hvdmVyJz4gKi9cbiAgQElucHV0KCkgbnpUcmlnZ2VyQWN0aW9uOiBOekNhc2NhZGVyVHJpZ2dlclR5cGUgfCBOekNhc2NhZGVyVHJpZ2dlclR5cGVbXSA9IFsgJ2NsaWNrJyBdO1xuXG4gIC8qKiBQcm9wZXJ0eSBuYW1lIGZvciBnZXR0aW5nIGB2YWx1ZWAgaW4gdGhlIG9wdGlvbiAqL1xuICBASW5wdXQoKSBuelZhbHVlUHJvcGVydHkgPSAndmFsdWUnO1xuXG4gIC8qKiBQcm9wZXJ0eSBuYW1lIGZvciBnZXR0aW5nIGBsYWJlbGAgaW4gdGhlIG9wdGlvbiAqL1xuICBASW5wdXQoKSBuekxhYmVsUHJvcGVydHkgPSAnbGFiZWwnO1xuXG4gIC8qKiDDpcK8woLDpsKtwqXDpcKKwqDDqMK9wr3DpsKVwrDDpsKNwq4gKi9cbiAgQElucHV0KCkgbnpMb2FkRGF0YTogKG5vZGU6IENhc2NhZGVyT3B0aW9uLCBpbmRleD86IG51bWJlcikgPT4gUHJvbWlzZUxpa2U8YW55PjtcblxuICAvKiogRXZlbnQ6IGVtaXQgb24gcG9wdXAgc2hvdyBvciBoaWRlICovXG4gIEBPdXRwdXQoKSBuelZpc2libGVDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG5cbiAgLyoqIEV2ZW50OiBlbWl0IG9uIHZhbHVlcyBjaGFuZ2VkICovXG4gIEBPdXRwdXQoKSBuekNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8YW55W10+KCk7XG5cbiAgLyoqIEV2ZW50OiBlbWl0IG9uIHZhbHVlcyBhbmQgc2VsZWN0aW9uIGNoYW5nZWQgKi9cbiAgQE91dHB1dCgpIG56U2VsZWN0aW9uQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxDYXNjYWRlck9wdGlvbltdPigpO1xuXG4gIC8qKlxuICAgKiBFdmVudDogZW1pdCBvbiBvcHRpb24gc2VsZWN0ZWQsIGV2ZW50IGRhdGHDr8K8wpp7b3B0aW9uOiBhbnksIGluZGV4OiBudW1iZXJ9XG4gICAqL1xuICBAT3V0cHV0KCkgbnpTZWxlY3QgPSBuZXcgRXZlbnRFbWl0dGVyPHtcbiAgICBvcHRpb246IENhc2NhZGVyT3B0aW9uLFxuICAgIGluZGV4OiBudW1iZXJcbiAgfT4oKTtcblxuICAvKiogRXZlbnQ6IGVtaXQgb24gdGhlIGNsZWFyIGJ1dHRvbiBjbGlja2VkICovXG4gIEBPdXRwdXQoKSBuekNsZWFyID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuXG4gIEBWaWV3Q2hpbGQoJ2lucHV0JykgaW5wdXQ6IEVsZW1lbnRSZWY7XG4gIC8qKiDDpsK1wq7DpcKxwoLDqMKPwpzDpcKNwpUgKi9cbiAgQFZpZXdDaGlsZCgnbWVudScpIG1lbnU6IEVsZW1lbnRSZWY7XG5cbiAgcHVibGljIG9uUG9zaXRpb25DaGFuZ2UocG9zaXRpb246IENvbm5lY3RlZE92ZXJsYXlQb3NpdGlvbkNoYW5nZSk6IHZvaWQge1xuICAgIGNvbnN0IG5ld1ZhbHVlID0gcG9zaXRpb24uY29ubmVjdGlvblBhaXIub3JpZ2luWSA9PT0gJ2JvdHRvbScgPyAnYm90dG9tJyA6ICd0b3AnO1xuICAgIGlmICh0aGlzLmRyb3BEb3duUG9zaXRpb24gIT09IG5ld1ZhbHVlKSB7XG4gICAgICB0aGlzLmRyb3BEb3duUG9zaXRpb24gPSBuZXdWYWx1ZTtcbiAgICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZm9jdXMoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmlzRm9jdXNlZCkge1xuICAgICAgY29uc3QgaW5wdXQgPSB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoYC4ke3RoaXMucHJlZml4Q2xzfS1pbnB1dGApIGFzIEhUTUxFbGVtZW50O1xuICAgICAgaWYgKGlucHV0ICYmIGlucHV0LmZvY3VzKSB7XG4gICAgICAgIGlucHV0LmZvY3VzKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmVsLmZvY3VzKCk7XG4gICAgICB9XG4gICAgICB0aGlzLmlzRm9jdXNlZCA9IHRydWU7XG4gICAgICB0aGlzLnNldENsYXNzTWFwKCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGJsdXIoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNGb2N1c2VkKSB7XG4gICAgICBjb25zdCBpbnB1dCA9IHRoaXMuZWwucXVlcnlTZWxlY3RvcihgLiR7dGhpcy5wcmVmaXhDbHN9LWlucHV0YCkgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICBpZiAoaW5wdXQgJiYgaW5wdXQuYmx1cikge1xuICAgICAgICBpbnB1dC5ibHVyKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmVsLmJsdXIoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaXNGb2N1c2VkID0gZmFsc2U7XG4gICAgICB0aGlzLnNldENsYXNzTWFwKCk7XG4gICAgICB0aGlzLnNldExhYmVsQ2xhc3MoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHNldENsYXNzTWFwKCk6IHZvaWQge1xuICAgIGNvbnN0IGNsYXNzTWFwID0ge1xuICAgICAgWyBgJHt0aGlzLnByZWZpeENsc31gIF0gICAgICAgICAgICAgICAgICA6IDEsXG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xzfS1waWNrZXJgIF0gICAgICAgICAgIDogMSxcbiAgICAgIFsgYCR7dGhpcy5wcmVmaXhDbHN9LWxnYCBdICAgICAgICAgICAgICAgOiB0aGlzLm56U2l6ZSA9PT0gJ2xhcmdlJyxcbiAgICAgIFsgYCR7dGhpcy5wcmVmaXhDbHN9LXNtYCBdICAgICAgICAgICAgICAgOiB0aGlzLm56U2l6ZSA9PT0gJ3NtYWxsJyxcbiAgICAgIFsgYCR7dGhpcy5wcmVmaXhDbHN9LXBpY2tlci1kaXNhYmxlZGAgXSAgOiB0aGlzLmRpc2FibGVkLFxuICAgICAgWyBgJHt0aGlzLnByZWZpeENsc30tZm9jdXNlZGAgXSAgICAgICAgICA6IHRoaXMuaXNGb2N1c2VkLFxuICAgICAgWyBgJHt0aGlzLnByZWZpeENsc30tcGlja2VyLW9wZW5gIF0gICAgICA6IHRoaXMubWVudVZpc2libGUsXG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xzfS1waWNrZXItd2l0aC12YWx1ZWAgXTogdGhpcy5pbnB1dFZhbHVlICYmIHRoaXMuaW5wdXRWYWx1ZS5sZW5ndGhcbiAgICB9O1xuICAgIHRoaXMubnpVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlLnVwZGF0ZUhvc3RDbGFzcyh0aGlzLmVsLCBjbGFzc01hcCk7XG4gIH1cblxuICAvKiogw6bCoMKHw6fCrcK+IMOmwqDCt8OlwrzCjyAqL1xuICBwdWJsaWMgZ2V0IGxhYmVsQ2xzKCk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMuX2xhYmVsQ2xzO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRMYWJlbENsYXNzKCk6IHZvaWQge1xuICAgIHRoaXMuX2xhYmVsQ2xzID0ge1xuICAgICAgWyBgJHt0aGlzLnByZWZpeENsc30tcGlja2VyLWxhYmVsYCBdOiB0cnVlLFxuICAgICAgWyBgJHt0aGlzLnByZWZpeENsc30tc2hvdy1zZWFyY2hgIF0gOiAhIXRoaXMubnpTaG93U2VhcmNoLFxuICAgICAgWyBgJHt0aGlzLnByZWZpeENsc30tZm9jdXNlZGAgXSAgICAgOiAhIXRoaXMubnpTaG93U2VhcmNoICYmIHRoaXMuaXNGb2N1c2VkICYmICF0aGlzLl9pbnB1dFZhbHVlXG4gICAgfTtcbiAgfVxuXG4gIC8qKiDDp8Kuwq3DpcKkwrQgw6bCoMK3w6XCvMKPICovXG4gIHB1YmxpYyBnZXQgYXJyb3dDbHMoKTogYW55IHtcbiAgICByZXR1cm4gdGhpcy5fYXJyb3dDbHM7XG4gIH1cblxuICBwcml2YXRlIHNldEFycm93Q2xhc3MoKTogdm9pZCB7XG4gICAgdGhpcy5fYXJyb3dDbHMgPSB7XG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xzfS1waWNrZXItYXJyb3dgIF0gICAgICAgOiB0cnVlLFxuICAgICAgWyBgJHt0aGlzLnByZWZpeENsc30tcGlja2VyLWFycm93LWV4cGFuZGAgXTogdGhpcy5tZW51VmlzaWJsZVxuICAgIH07XG4gIH1cblxuICAvKiogw6XCisKgw6jCvcK9w6TCuMKtw6XCm8K+w6bCoMKHIMOmwqDCt8OlwrzCjyAqL1xuICBwdWJsaWMgZ2V0IGxvYWRpbmdDbHMoKTogYW55IHtcbiAgICByZXR1cm4gdGhpcy5fbG9hZGluZ0NscztcbiAgfVxuXG4gIHByaXZhdGUgc2V0TG9hZGluZ0NsYXNzKCk6IHZvaWQge1xuICAgIHRoaXMuX2xvYWRpbmdDbHMgPSB7XG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xzfS1waWNrZXItYXJyb3dgIF06IHRydWVcbiAgICB9O1xuICB9XG5cbiAgLyoqIMOmwrjChcOpwpnCpMOlwpvCvsOmwqDChyDDpsKgwrfDpcK8wo8gKi9cbiAgcHVibGljIGdldCBjbGVhckNscygpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLl9jbGVhckNscztcbiAgfVxuXG4gIHByaXZhdGUgc2V0Q2xlYXJDbGFzcygpOiB2b2lkIHtcbiAgICB0aGlzLl9jbGVhckNscyA9IHtcbiAgICAgIFsgYCR7dGhpcy5wcmVmaXhDbHN9LXBpY2tlci1jbGVhcmAgXTogdHJ1ZVxuICAgIH07XG4gIH1cblxuICAvKiogw6jCvsKTw6XChcKlw6bCocKGIMOmwqDCt8OlwrzCjyAqL1xuICBwdWJsaWMgZ2V0IGlucHV0Q2xzKCk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMuX2lucHV0Q2xzO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRJbnB1dENsYXNzKCk6IHZvaWQge1xuICAgIHRoaXMuX2lucHV0Q2xzID0ge1xuICAgICAgWyBgJHt0aGlzLnByZWZpeENsc30taW5wdXRgIF0gICAgICAgIDogMSxcbiAgICAgIFsgYCR7dGhpcy5pbnB1dFByZWZpeENsc30tZGlzYWJsZWRgIF06IHRoaXMubnpEaXNhYmxlZCxcbiAgICAgIFsgYCR7dGhpcy5pbnB1dFByZWZpeENsc30tbGdgIF0gICAgICA6IHRoaXMubnpTaXplID09PSAnbGFyZ2UnLFxuICAgICAgWyBgJHt0aGlzLmlucHV0UHJlZml4Q2xzfS1zbWAgXSAgICAgIDogdGhpcy5uelNpemUgPT09ICdzbWFsbCdcbiAgICB9O1xuICB9XG5cbiAgLyoqIMOmwrXCrsOlwrHCgiDDpsKgwrfDpcK8wo8gKi9cbiAgcHVibGljIGdldCBtZW51Q2xzKCk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMuX21lbnVDbHM7XG4gIH1cblxuICBwcml2YXRlIHNldE1lbnVDbGFzcygpOiB2b2lkIHtcbiAgICB0aGlzLl9tZW51Q2xzID0ge1xuICAgICAgWyBgJHt0aGlzLnByZWZpeENsc30tbWVudXNgIF0gICAgICAgOiB0cnVlLFxuICAgICAgWyBgJHt0aGlzLnByZWZpeENsc30tbWVudXMtaGlkZGVuYCBdOiAhdGhpcy5tZW51VmlzaWJsZSxcbiAgICAgIFsgYCR7dGhpcy5uek1lbnVDbGFzc05hbWV9YCBdICAgICAgIDogdGhpcy5uek1lbnVDbGFzc05hbWVcbiAgICB9O1xuICB9XG5cbiAgLyoqIMOmwrXCrsOlwrHCgsOlwojClyDDpsKgwrfDpcK8wo8gKi9cbiAgcHVibGljIGdldCBtZW51Q29sdW1uQ2xzKCk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMuX21lbnVDb2x1bW5DbHM7XG4gIH1cblxuICBwcml2YXRlIHNldE1lbnVDb2x1bW5DbGFzcygpOiB2b2lkIHtcbiAgICB0aGlzLl9tZW51Q29sdW1uQ2xzID0ge1xuICAgICAgWyBgJHt0aGlzLnByZWZpeENsc30tbWVudWAgXSAgIDogdHJ1ZSxcbiAgICAgIFsgYCR7dGhpcy5uekNvbHVtbkNsYXNzTmFtZX1gIF06IHRoaXMubnpDb2x1bW5DbGFzc05hbWVcbiAgICB9O1xuICB9XG5cbiAgLyoqIMOowo7Ct8Olwo/ClsOlwojCl8OkwrjCrU9wdGlvbsOnwprChMOmwqDCt8OlwrzCjyAqL1xuICBwdWJsaWMgZ2V0T3B0aW9uQ2xzKG9wdGlvbjogQ2FzY2FkZXJPcHRpb24sIGluZGV4OiBudW1iZXIpOiBhbnkge1xuICAgIHJldHVybiB7XG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xzfS1tZW51LWl0ZW1gIF0gICAgICAgICA6IHRydWUsXG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xzfS1tZW51LWl0ZW0tZXhwYW5kYCBdICA6ICFvcHRpb24uaXNMZWFmLFxuICAgICAgWyBgJHt0aGlzLnByZWZpeENsc30tbWVudS1pdGVtLWFjdGl2ZWAgXSAgOiB0aGlzLmlzQWN0aXZlZE9wdGlvbihvcHRpb24sIGluZGV4KSxcbiAgICAgIFsgYCR7dGhpcy5wcmVmaXhDbHN9LW1lbnUtaXRlbS1kaXNhYmxlZGAgXTogb3B0aW9uLmRpc2FibGVkXG4gICAgfTtcbiAgfVxuXG4gIC8qKiBwcmV2ZW50IGlucHV0IGNoYW5nZSBldmVudCAqL1xuICBwdWJsaWMgaGFuZGxlcklucHV0Q2hhbmdlKGV2ZW50OiBFdmVudCk6IHZvaWQge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICB9XG5cbiAgLyoqIGlucHV0IGVsZW1lbnQgYmx1ciAqL1xuICBwdWJsaWMgaGFuZGxlSW5wdXRCbHVyKGV2ZW50OiBFdmVudCk6IHZvaWQge1xuICAgIC8qXG4gICAgaWYgKCF0aGlzLm56U2hvd1NlYXJjaCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAqL1xuICAgIGlmICh0aGlzLm1lbnVWaXNpYmxlKSB7XG4gICAgICB0aGlzLmZvY3VzKCk7IC8vIGtlZXAgaW5wdXQgaGFzIGZvY3VzIHdoZW4gbWVudSBvcGVuZWRcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5ibHVyKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqIGlucHV0IGVsZW1lbnQgZm9jdXMgKi9cbiAgcHVibGljIGhhbmRsZUlucHV0Rm9jdXMoZXZlbnQ6IEV2ZW50KTogdm9pZCB7XG4gICAgLypcbiAgICBpZiAoIXRoaXMubnpTaG93U2VhcmNoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgICovXG4gICAgdGhpcy5mb2N1cygpO1xuICAgIHRoaXMuc2V0TGFiZWxDbGFzcygpO1xuICB9XG5cbiAgcHJpdmF0ZSBoYXNJbnB1dCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5pbnB1dFZhbHVlLmxlbmd0aCA+IDA7XG4gIH1cblxuICBwcml2YXRlIGhhc1ZhbHVlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnZhbHVlICYmIHRoaXMudmFsdWUubGVuZ3RoID4gMDtcbiAgfVxuXG4gIC8qKiBXaGV0aGVyIHRvIHNob3cgaW5wdXQgZWxlbWVudCBwbGFjZWhvbGRlciAqL1xuICBwdWJsaWMgZ2V0IHNob3dQbGFjZWhvbGRlcigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISh0aGlzLmhhc0lucHV0KCkgfHwgdGhpcy5oYXNWYWx1ZSgpKTtcbiAgfVxuXG4gIC8qKiBXaGV0aGVyIHRoZSBjbGVhciBidXR0b24gaXMgdmlzaWJsZSAqL1xuICBwdWJsaWMgZ2V0IHNob3dDbGVhckljb24oKTogYm9vbGVhbiB7XG4gICAgY29uc3QgaXNIYXNWYWx1ZSA9IHRoaXMuaGFzVmFsdWUoKTtcbiAgICBjb25zdCBpc0hhc0lucHV0ID0gdGhpcy5oYXNJbnB1dCgpO1xuICAgIHJldHVybiB0aGlzLm56QWxsb3dDbGVhciAmJiAhdGhpcy5uekRpc2FibGVkICYmIChpc0hhc1ZhbHVlIHx8IGlzSGFzSW5wdXQpO1xuICB9XG5cbiAgLyoqIGNsZWFyIHRoZSBpbnB1dCBib3ggYW5kIHNlbGVjdGVkIG9wdGlvbnMgKi9cbiAgcHVibGljIGNsZWFyU2VsZWN0aW9uKGV2ZW50PzogRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAoZXZlbnQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG5cbiAgICB0aGlzLmxhYmVsUmVuZGVyVGV4dCA9ICcnO1xuICAgIC8vIHRoaXMuaXNMYWJlbFJlbmRlclRlbXBsYXRlID0gZmFsc2U7XG4gICAgLy8gY2xlYXIgY3VzdG9tIGNvbnRleHRcbiAgICB0aGlzLmxhYmVsUmVuZGVyQ29udGV4dCA9IHt9O1xuICAgIHRoaXMuc2VsZWN0ZWRPcHRpb25zID0gW107XG4gICAgdGhpcy5hY3RpdmF0ZWRPcHRpb25zID0gW107XG4gICAgdGhpcy5pbnB1dFZhbHVlID0gJyc7XG4gICAgdGhpcy5zZXRNZW51VmlzaWJsZShmYWxzZSk7XG5cbiAgICAvLyB0cmlnZ2VyIGNoYW5nZSBldmVudFxuICAgIHRoaXMub25WYWx1ZUNoYW5nZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBidWlsZERpc3BsYXlMYWJlbCgpOiB2b2lkIHtcbiAgICBjb25zdCBzZWxlY3RlZE9wdGlvbnMgPSB0aGlzLnNlbGVjdGVkT3B0aW9ucztcbiAgICBjb25zdCBsYWJlbHM6IHN0cmluZ1tdID0gc2VsZWN0ZWRPcHRpb25zLm1hcChvID0+IHRoaXMuZ2V0T3B0aW9uTGFiZWwobykpO1xuICAgIC8vIMOowq7CvsOnwr3CrsOlwr3Ck8OlwonCjcOmwo7Cp8OkwrvCtsOnwprChMOmwpjCvsOnwqTCusOlwoDCvFxuICAgIGlmICh0aGlzLmlzTGFiZWxSZW5kZXJUZW1wbGF0ZSkge1xuICAgICAgdGhpcy5sYWJlbFJlbmRlckNvbnRleHQgPSB7IGxhYmVscywgc2VsZWN0ZWRPcHRpb25zIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubGFiZWxSZW5kZXJUZXh0ID0gZGVmYXVsdERpc3BsYXlSZW5kZXIuY2FsbCh0aGlzLCBsYWJlbHMsIHNlbGVjdGVkT3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bicsIFsgJyRldmVudCcgXSlcbiAgcHVibGljIG9uS2V5RG93bihldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgIGNvbnN0IGtleUNvZGUgPSBldmVudC5rZXlDb2RlO1xuICAgIGlmIChrZXlDb2RlICE9PSBET1dOX0FSUk9XICYmXG4gICAgICBrZXlDb2RlICE9PSBVUF9BUlJPVyAmJlxuICAgICAga2V5Q29kZSAhPT0gTEVGVF9BUlJPVyAmJlxuICAgICAga2V5Q29kZSAhPT0gUklHSFRfQVJST1cgJiZcbiAgICAgIGtleUNvZGUgIT09IEVOVEVSICYmXG4gICAgICBrZXlDb2RlICE9PSBCQUNLU1BBQ0UgJiZcbiAgICAgIGtleUNvZGUgIT09IEVTQ0FQRSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmluU2VhcmNoICYmIChcbiAgICAgIGtleUNvZGUgPT09IEJBQ0tTUEFDRSB8fFxuICAgICAga2V5Q29kZSA9PT0gTEVGVF9BUlJPVyB8fFxuICAgICAga2V5Q29kZSA9PT0gUklHSFRfQVJST1dcbiAgICApKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gUHJlc3MgYW55IGtleXMgYWJvdmUgdG8gcmVvcGVuIG1lbnVcbiAgICBpZiAoIXRoaXMuaXNNZW51VmlzaWJsZSgpICYmXG4gICAgICBrZXlDb2RlICE9PSBCQUNLU1BBQ0UgJiZcbiAgICAgIGtleUNvZGUgIT09IEVTQ0FQRSkge1xuICAgICAgdGhpcy5zZXRNZW51VmlzaWJsZSh0cnVlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gUHJlc3MgRVNDIHRvIGNsb3NlIG1lbnVcbiAgICBpZiAoa2V5Q29kZSA9PT0gRVNDQVBFKSB7XG4gICAgICAvLyB0aGlzLnNldE1lbnVWaXNpYmxlKGZhbHNlKTsgLy8gYWxyZWFkeSBjYWxsIGJ5IGNkay1vdmVybGF5IGRldGFjaFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzTWVudVZpc2libGUoKSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGlmIChrZXlDb2RlID09PSBET1dOX0FSUk9XKSB7XG4gICAgICAgIHRoaXMubW92ZURvd24oKTtcbiAgICAgIH0gZWxzZSBpZiAoa2V5Q29kZSA9PT0gVVBfQVJST1cpIHtcbiAgICAgICAgdGhpcy5tb3ZlVXAoKTtcbiAgICAgIH0gZWxzZSBpZiAoa2V5Q29kZSA9PT0gTEVGVF9BUlJPVykge1xuICAgICAgICB0aGlzLm1vdmVMZWZ0KCk7XG4gICAgICB9IGVsc2UgaWYgKGtleUNvZGUgPT09IFJJR0hUX0FSUk9XKSB7XG4gICAgICAgIHRoaXMubW92ZVJpZ2h0KCk7XG4gICAgICB9IGVsc2UgaWYgKGtleUNvZGUgPT09IEVOVEVSKSB7XG4gICAgICAgIHRoaXMub25FbnRlcigpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyAnJGV2ZW50JyBdKVxuICBwdWJsaWMgb25UcmlnZ2VyQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5uekRpc2FibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMub25Ub3VjaGVkKCk7IC8vIHNldCB5b3VyIGNvbnRyb2wgdG8gJ3RvdWNoZWQnXG4gICAgaWYgKHRoaXMubnpTaG93U2VhcmNoKSB7XG4gICAgICB0aGlzLmZvY3VzKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNDbGlja1RpZ2dlckFjdGlvbigpKSB7XG4gICAgICB0aGlzLmRlbGF5U2V0TWVudVZpc2libGUoIXRoaXMubWVudVZpc2libGUsIDEwMCk7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignbW91c2VlbnRlcicsIFsgJyRldmVudCcgXSlcbiAgcHVibGljIG9uVHJpZ2dlck1vdXNlRW50ZXIoZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5uekRpc2FibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLmlzUG9pbnRlclRpZ2dlckFjdGlvbigpKSB7XG4gICAgICB0aGlzLmRlbGF5U2V0TWVudVZpc2libGUodHJ1ZSwgdGhpcy5uek1vdXNlRW50ZXJEZWxheSwgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignbW91c2VsZWF2ZScsIFsgJyRldmVudCcgXSlcbiAgcHVibGljIG9uVHJpZ2dlck1vdXNlTGVhdmUoZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5uekRpc2FibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghdGhpcy5pc01lbnVWaXNpYmxlKCkgfHwgdGhpcy5pc09wZW5pbmcpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLmlzUG9pbnRlclRpZ2dlckFjdGlvbigpKSB7XG4gICAgICBjb25zdCBtb3VzZVRhcmdldCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICBjb25zdCBob3N0RWwgPSB0aGlzLmVsO1xuICAgICAgY29uc3QgbWVudUVsID0gdGhpcy5tZW51ICYmIHRoaXMubWVudS5uYXRpdmVFbGVtZW50IGFzIEhUTUxFbGVtZW50O1xuICAgICAgaWYgKGhvc3RFbC5jb250YWlucyhtb3VzZVRhcmdldCkgfHwgKG1lbnVFbCAmJiBtZW51RWwuY29udGFpbnMobW91c2VUYXJnZXQpKVxuICAgICAgLyp8fCBtb3VzZVRhcmdldC5wYXJlbnRFbGVtZW50LmNvbnRhaW5zKG1lbnVFbCkqLykge1xuICAgICAgICAvLyDDpcKbwqDDpMK4wrrDpsK1wq7DpcKxwoLDp8KawoRiYWNrZHJvcMOlwofCusOnwo7CsMOvwrzCjMOmwprCgsOmwpfCtsOmwrLCocOmwpzCicOlworCnsOmwrPClcOowofCqsOlworCqMOmwrbCiMOlwqTCsVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmRlbGF5U2V0TWVudVZpc2libGUoZmFsc2UsIHRoaXMubnpNb3VzZUxlYXZlRGVsYXkpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaXNDbGlja1RpZ2dlckFjdGlvbigpOiBib29sZWFuIHtcbiAgICBpZiAodHlwZW9mIHRoaXMubnpUcmlnZ2VyQWN0aW9uID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHRoaXMubnpUcmlnZ2VyQWN0aW9uID09PSAnY2xpY2snO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5uelRyaWdnZXJBY3Rpb24uaW5kZXhPZignY2xpY2snKSAhPT0gLTE7XG4gIH1cblxuICBwcml2YXRlIGlzUG9pbnRlclRpZ2dlckFjdGlvbigpOiBib29sZWFuIHtcbiAgICBpZiAodHlwZW9mIHRoaXMubnpUcmlnZ2VyQWN0aW9uID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHRoaXMubnpUcmlnZ2VyQWN0aW9uID09PSAnaG92ZXInO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5uelRyaWdnZXJBY3Rpb24uaW5kZXhPZignaG92ZXInKSAhPT0gLTE7XG4gIH1cblxuICBwdWJsaWMgY2xvc2VNZW51KCk6IHZvaWQge1xuICAgIHRoaXMuYmx1cigpO1xuICAgIHRoaXMuY2xlYXJEZWxheVRpbWVyKCk7XG4gICAgdGhpcy5zZXRNZW51VmlzaWJsZShmYWxzZSk7XG4gIH1cblxuICBwcml2YXRlIGNsZWFyRGVsYXlUaW1lcigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5kZWxheVRpbWVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5kZWxheVRpbWVyKTtcbiAgICAgIHRoaXMuZGVsYXlUaW1lciA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIMOmwpjCvsOnwqTCusOmwojClsOowoDChcOpwprCkMOowpfCj8Oowo/CnMOlwo3ClVxuICAgKlxuICAgKiBAcGFyYW0gdmlzaWJsZSB0cnVlLcOmwpjCvsOnwqTCusOvwrzCjGZhbHNlLcOpwprCkMOowpfCj1xuICAgKiBAcGFyYW0gZGVsYXkgw6XCu8K2w6jCv8Kfw6bCl8K2w6nCl8K0XG4gICAqL1xuICBwdWJsaWMgZGVsYXlTZXRNZW51VmlzaWJsZSh2aXNpYmxlOiBib29sZWFuLCBkZWxheTogbnVtYmVyLCBzZXRPcGVuaW5nOiBib29sZWFuID0gZmFsc2UpOiB2b2lkIHtcbiAgICB0aGlzLmNsZWFyRGVsYXlUaW1lcigpO1xuICAgIGlmIChkZWxheSkge1xuICAgICAgaWYgKHZpc2libGUgJiYgc2V0T3BlbmluZykge1xuICAgICAgICB0aGlzLmlzT3BlbmluZyA9IHRydWU7XG4gICAgICB9XG4gICAgICB0aGlzLmRlbGF5VGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5zZXRNZW51VmlzaWJsZSh2aXNpYmxlKTtcbiAgICAgICAgdGhpcy5jbGVhckRlbGF5VGltZXIoKTtcbiAgICAgICAgaWYgKHZpc2libGUpIHtcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaXNPcGVuaW5nID0gZmFsc2U7XG4gICAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgfVxuICAgICAgfSwgZGVsYXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldE1lbnVWaXNpYmxlKHZpc2libGUpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBpc01lbnVWaXNpYmxlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLm1lbnVWaXNpYmxlO1xuICB9XG5cbiAgcHVibGljIHNldE1lbnVWaXNpYmxlKG1lbnVWaXNpYmxlOiBib29sZWFuKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubnpEaXNhYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm1lbnVWaXNpYmxlICE9PSBtZW51VmlzaWJsZSkge1xuICAgICAgdGhpcy5tZW51VmlzaWJsZSA9IG1lbnVWaXNpYmxlO1xuXG4gICAgICAvLyB1cGRhdGUgY2xhc3NcbiAgICAgIHRoaXMuc2V0Q2xhc3NNYXAoKTtcbiAgICAgIHRoaXMuc2V0QXJyb3dDbGFzcygpO1xuICAgICAgdGhpcy5zZXRNZW51Q2xhc3MoKTtcblxuICAgICAgaWYgKG1lbnVWaXNpYmxlKSB7XG4gICAgICAgIHRoaXMuYmVmb3JlVmlzaWJsZSgpO1xuICAgICAgfVxuICAgICAgdGhpcy5uelZpc2libGVDaGFuZ2UuZW1pdChtZW51VmlzaWJsZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqIGxvYWQgaW5pdCBkYXRhIGlmIG5lY2Vzc2FyeSAqL1xuICBwcml2YXRlIGJlZm9yZVZpc2libGUoKTogdm9pZCB7XG4gICAgdGhpcy5sb2FkUm9vdE9wdGlvbnMoKTtcbiAgfVxuXG4gIHByaXZhdGUgbG9hZFJvb3RPcHRpb25zKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5uekNvbHVtbnMubGVuZ3RoKSB7XG4gICAgICBjb25zdCByb290OiBhbnkgPSB7fTtcbiAgICAgIHRoaXMubG9hZENoaWxkcmVuKHJvb3QsIC0xKTtcbiAgICB9XG4gIH1cblxuICAvKiogw6jCjsK3w6XCj8KWT3B0aW9uw6fCmsKEw6XCgMK8w6/CvMKMw6TCvsKLw6XCpsKCw6/CvMKMw6XCj8Kvw6TCu8Klw6bCjMKHw6XCrsKabGFiZWxQcm9wZXJ0eT1cIm5hbWVcIsOmwp3CpcOlwo/Clk5hbWUgKi9cbiAgcHVibGljIGdldE9wdGlvbkxhYmVsKG9wdGlvbjogQ2FzY2FkZXJPcHRpb24pOiBhbnkge1xuICAgIHJldHVybiBvcHRpb25bIHRoaXMubnpMYWJlbFByb3BlcnR5IHx8ICdsYWJlbCcgXTtcbiAgfVxuXG4gIC8qKiDDqMKOwrfDpcKPwpZPcHRpb27Dp8KawoTDpcKAwrzDr8K8wozDpMK+wovDpcKmwoLDr8K8wozDpcKPwq/DpMK7wqXDpsKMwofDpcKuwpp2YWx1ZVByb3BlcnR5PVwiaWRcIsOmwp3CpcOlwo/ClklEICovXG4gIHB1YmxpYyBnZXRPcHRpb25WYWx1ZShvcHRpb246IENhc2NhZGVyT3B0aW9uKTogYW55IHtcbiAgICByZXR1cm4gb3B0aW9uWyB0aGlzLm56VmFsdWVQcm9wZXJ0eSB8fCAndmFsdWUnIF07XG4gIH1cblxuICBwcml2YXRlIGlzQWN0aXZlZE9wdGlvbihvcHRpb246IENhc2NhZGVyT3B0aW9uLCBpbmRleDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgY29uc3QgYWN0aXZlT3B0ID0gdGhpcy5hY3RpdmF0ZWRPcHRpb25zWyBpbmRleCBdO1xuICAgIHJldHVybiBhY3RpdmVPcHQgPT09IG9wdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiDDqMKuwr7Dp8K9wq7DpsKfwpDDpcKIwpfDp8KawoTDpsK/woDDpsK0wrvDp8KawoTDqMKPwpzDpcKNwpXDqcKAwonDqcKhwrlcbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbiDDqMKPwpzDpcKNwpXDqcKAwonDqcKhwrlcbiAgICogQHBhcmFtIGluZGV4ICDDqcKAwonDqcKhwrnDpsKJwoDDpcKcwqjDp8KawoTDpcKIwpfDp8K7woTDp8KawoTDp8K0wqLDpcK8wpVcbiAgICogQHBhcmFtIHNlbGVjdCDDpsKYwq/DpcKQwqbDqMKnwqbDpcKPwpHDqcKAwonDpsKLwqnDp8K7wpPDp8KCwrlcbiAgICovXG4gIHByaXZhdGUgc2V0QWN0aXZlT3B0aW9uKG9wdGlvbjogQ2FzY2FkZXJPcHRpb24sIGluZGV4OiBudW1iZXIsIHNlbGVjdDogYm9vbGVhbiA9IGZhbHNlLCBsb2FkQ2hpbGRyZW46IGJvb2xlYW4gPSB0cnVlKTogdm9pZCB7XG4gICAgaWYgKCFvcHRpb24gfHwgb3B0aW9uLmRpc2FibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5hY3RpdmF0ZWRPcHRpb25zWyBpbmRleCBdID0gb3B0aW9uO1xuXG4gICAgLy8gw6XCvcKTw6fCm8K0w6bCjsKlw6nCgMKJw6bCi8Kpw6bCnMKAw6XCkMKOw6TCuMKAw6fCusKnw6bCl8K2w6/CvMKMw6XCicKNw6nCncKiw6fCmsKEw6nCgMKJw6nCocK5w6jCpsKBw6jCocKlw6XChcKow6PCgMKCw6TCvsKLw6XCpsKCw6/CvMKMw6nCgMKJw6bCi8Kpw6LCgMKcw6XCn8KOw6XCuMKCw6LCgMKdw6/CvMKMw6XCiMKZw6jCh8Kqw6XCisKow6jCocKlw6XChcKow6LCgMKcw6XCm8K9w6XCrsK2w6LCgMKdw6PCgMKBw6LCgMKcw6fCnMKBw6TCu8K9w6LCgMKdXG4gICAgZm9yIChsZXQgaSA9IGluZGV4IC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGlmICghdGhpcy5hY3RpdmF0ZWRPcHRpb25zWyBpIF0pIHtcbiAgICAgICAgdGhpcy5hY3RpdmF0ZWRPcHRpb25zWyBpIF0gPSB0aGlzLmFjdGl2YXRlZE9wdGlvbnNbIGkgKyAxIF0ucGFyZW50O1xuICAgICAgfVxuICAgIH1cbiAgICAvLyDDpsKIwqrDpsKWwq3DpcKkwprDpMK9wpnDp8KawoTDqcKAwonDqcKhwrnDr8K8wozDpcKmwoLDqcKAwonDpsKLwqnDosKAwpzDp8KcwoHDpMK7wr3DosKAwp3Dr8K8wozDpcKIwpnDpcKPwqrDpMK8wprDpsKcwonDosKAwpzDpcKbwr3DpcKuwrbDosKAwp3Do8KAwoHDosKAwpzDp8KcwoHDpMK7wr3DosKAwp3Dr8K8wozDpcKOwrvDpsKOwonDosKAwpzDpcKfwo7DpcK4woLDosKAwp3Do8KAwoHDosKAwpzDpcKMwrrDpcKOwr/DosKAwp1cbiAgICBpZiAoaW5kZXggPCB0aGlzLmFjdGl2YXRlZE9wdGlvbnMubGVuZ3RoIC0gMSkge1xuICAgICAgdGhpcy5hY3RpdmF0ZWRPcHRpb25zID0gdGhpcy5hY3RpdmF0ZWRPcHRpb25zLnNsaWNlKDAsIGluZGV4ICsgMSk7XG4gICAgfVxuXG4gICAgLy8gbG9hZCBjaGlsZHJlblxuICAgIGlmIChvcHRpb24uY2hpbGRyZW4gJiYgb3B0aW9uLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgb3B0aW9uLmlzTGVhZiA9IGZhbHNlO1xuICAgICAgb3B0aW9uLmNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4gY2hpbGQucGFyZW50ID0gb3B0aW9uKTtcbiAgICAgIHRoaXMuc2V0Q29sdW1uRGF0YShvcHRpb24uY2hpbGRyZW4sIGluZGV4ICsgMSk7XG4gICAgfSBlbHNlIGlmICghb3B0aW9uLmlzTGVhZiAmJiBsb2FkQ2hpbGRyZW4pIHtcbiAgICAgIHRoaXMubG9hZENoaWxkcmVuKG9wdGlvbiwgaW5kZXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBjbGlja2luZyBsZWFmIG5vZGUgd2lsbCByZW1vdmUgYW55IGNoaWxkcmVuIGNvbHVtbnNcbiAgICAgIGlmIChpbmRleCA8IHRoaXMubnpDb2x1bW5zLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgdGhpcy5uekNvbHVtbnMgPSB0aGlzLm56Q29sdW1ucy5zbGljZSgwLCBpbmRleCArIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHRyaWdnZXIgc2VsZWN0IGV2ZW50LCBhbmQgZGlzcGxheSBsYWJlbFxuICAgIGlmIChzZWxlY3QpIHtcbiAgICAgIHRoaXMub25TZWxlY3RPcHRpb24ob3B0aW9uLCBpbmRleCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBsb2FkQ2hpbGRyZW4ob3B0aW9uOiBDYXNjYWRlck9wdGlvbiwgaW5kZXg6IG51bWJlciwgc3VjY2Vzcz86ICgpID0+IHZvaWQsIGZhaWx1cmU/OiAoKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubnpMb2FkRGF0YSkge1xuICAgICAgdGhpcy5pc0xvYWRpbmcgPSBpbmRleCA8IDA7XG4gICAgICBvcHRpb24ubG9hZGluZyA9IHRydWU7XG4gICAgICB0aGlzLm56TG9hZERhdGEob3B0aW9uLCBpbmRleCkudGhlbigoKSA9PiB7XG4gICAgICAgIG9wdGlvbi5sb2FkaW5nID0gdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgaWYgKG9wdGlvbi5jaGlsZHJlbikge1xuICAgICAgICAgIG9wdGlvbi5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IGNoaWxkLnBhcmVudCA9IGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IG9wdGlvbik7XG4gICAgICAgICAgdGhpcy5zZXRDb2x1bW5EYXRhKG9wdGlvbi5jaGlsZHJlbiwgaW5kZXggKyAxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICAgIHN1Y2Nlc3MoKTtcbiAgICAgICAgfVxuICAgICAgfSwgKCkgPT4ge1xuICAgICAgICBvcHRpb24ubG9hZGluZyA9IHRoaXMuaXNMb2FkaW5nID0gZmFsc2U7XG4gICAgICAgIG9wdGlvbi5pc0xlYWYgPSB0cnVlO1xuICAgICAgICBpZiAoZmFpbHVyZSkge1xuICAgICAgICAgIGZhaWx1cmUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBvblNlbGVjdE9wdGlvbihvcHRpb246IENhc2NhZGVyT3B0aW9uLCBpbmRleDogbnVtYmVyKTogdm9pZCB7XG4gICAgLy8gdHJpZ2dlciBgbnpTZWxlY3RgIGV2ZW50XG4gICAgdGhpcy5uelNlbGVjdC5lbWl0KHsgb3B0aW9uLCBpbmRleCB9KTtcblxuICAgIC8vIMOnwpTCn8OmwojCkMOmwpjCvsOnwqTCulxuICAgIGlmIChvcHRpb24uaXNMZWFmIHx8IHRoaXMubnpDaGFuZ2VPblNlbGVjdCB8fCB0aGlzLmlzQ2hhbmdlT24ob3B0aW9uLCBpbmRleCkpIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWRPcHRpb25zID0gdGhpcy5hY3RpdmF0ZWRPcHRpb25zO1xuICAgICAgLy8gw6jCrsK+w6fCvcKuw6XCvcKTw6XCicKNw6bCjsKnw6TCu8K2w6fCmsKEw6bCmMK+w6fCpMK6w6XCgMK8XG4gICAgICB0aGlzLmJ1aWxkRGlzcGxheUxhYmVsKCk7XG4gICAgICAvLyDDqMKnwqbDpcKPwpHDpcKPwpjDpsKbwrTDpMK6wovDpMK7wrZcbiAgICAgIHRoaXMub25WYWx1ZUNoYW5nZSgpO1xuICAgIH1cblxuICAgIC8vIGNsb3NlIG1lbnUgaWYgY2xpY2sgb24gbGVhZlxuICAgIGlmIChvcHRpb24uaXNMZWFmKSB7XG4gICAgICB0aGlzLmRlbGF5U2V0TWVudVZpc2libGUoZmFsc2UsIHRoaXMubnpNb3VzZUxlYXZlRGVsYXkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKiDDp8KUwrHDp8KUwqjDpsKIwrfDpsKdwqXDpcKuwprDpMK5wonDp8KCwrnDpcKHwrvDpcKQwo7DpsKYwq/DpcKQwqbDpcKPwpjDpsKbwrQgKi9cbiAgcHJpdmF0ZSBpc0NoYW5nZU9uKG9wdGlvbjogQ2FzY2FkZXJPcHRpb24sIGluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICBpZiAodHlwZW9mIHRoaXMubnpDaGFuZ2VPbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIHRoaXMubnpDaGFuZ2VPbihvcHRpb24sIGluZGV4KSA9PT0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRDb2x1bW5EYXRhKG9wdGlvbnM6IENhc2NhZGVyT3B0aW9uW10sIGluZGV4OiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAoIWFycmF5RXF1YWxzKHRoaXMubnpDb2x1bW5zWyBpbmRleCBdLCBvcHRpb25zKSkge1xuICAgICAgdGhpcy5uekNvbHVtbnNbIGluZGV4IF0gPSBvcHRpb25zO1xuICAgICAgaWYgKGluZGV4IDwgdGhpcy5uekNvbHVtbnMubGVuZ3RoIC0gMSkge1xuICAgICAgICB0aGlzLm56Q29sdW1ucyA9IHRoaXMubnpDb2x1bW5zLnNsaWNlKDAsIGluZGV4ICsgMSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIMOpwrzCoMOmwqDCh8OnwoLCucOlwofCu8OpwoDCicOpwqHCuVxuICAgKlxuICAgKiBAcGFyYW0gb3B0aW9uIMOowo/CnMOlwo3ClcOpwoDCicOpwqHCuVxuICAgKiBAcGFyYW0gaW5kZXggw6nCgMKJw6nCocK5w6bCicKAw6XCnMKow6fCmsKEw6XCiMKXw6fCu8KEw6fCmsKEw6fCtMKiw6XCvMKVXG4gICAqIEBwYXJhbSBldmVudCDDqcK8wqDDpsKgwofDpMK6wovDpMK7wrZcbiAgICovXG4gIG9uT3B0aW9uQ2xpY2sob3B0aW9uOiBDYXNjYWRlck9wdGlvbiwgaW5kZXg6IG51bWJlciwgZXZlbnQ6IEV2ZW50KTogdm9pZCB7XG4gICAgaWYgKGV2ZW50KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIC8vIEtlZXAgZm9jdXNlZCBzdGF0ZSBmb3Iga2V5Ym9hcmQgc3VwcG9ydFxuICAgIHRoaXMuZWwuZm9jdXMoKTtcblxuICAgIGlmIChvcHRpb24gJiYgb3B0aW9uLmRpc2FibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaW5TZWFyY2gpIHtcbiAgICAgIHRoaXMuc2V0U2VhcmNoQWN0aXZlT3B0aW9uKG9wdGlvbiBhcyBDYXNjYWRlclNlYXJjaE9wdGlvbiwgZXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldEFjdGl2ZU9wdGlvbihvcHRpb24sIGluZGV4LCB0cnVlKTtcbiAgICB9XG4gIH1cblxuICAvKiogw6bCjMKJw6TCuMKLw6XCm8Kew6jCvcKmw6nClMKuw6bCl8K2w6nCgMKJw6bCi8KpICovXG4gIHByaXZhdGUgb25FbnRlcigpOiB2b2lkIHtcbiAgICBjb25zdCBjb2x1bW5JbmRleCA9IE1hdGgubWF4KHRoaXMuYWN0aXZhdGVkT3B0aW9ucy5sZW5ndGggLSAxLCAwKTtcbiAgICBjb25zdCBhY3RpdmVPcHRpb24gPSB0aGlzLmFjdGl2YXRlZE9wdGlvbnNbIGNvbHVtbkluZGV4IF07XG4gICAgaWYgKGFjdGl2ZU9wdGlvbiAmJiAhYWN0aXZlT3B0aW9uLmRpc2FibGVkKSB7XG4gICAgICBpZiAodGhpcy5pblNlYXJjaCkge1xuICAgICAgICB0aGlzLnNldFNlYXJjaEFjdGl2ZU9wdGlvbihhY3RpdmVPcHRpb24gYXMgQ2FzY2FkZXJTZWFyY2hPcHRpb24sIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vblNlbGVjdE9wdGlvbihhY3RpdmVPcHRpb24sIGNvbHVtbkluZGV4KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogcHJlc3MgYHVwYCBvciBgZG93bmAgYXJyb3cgdG8gYWN0aXZhdGUgdGhlIHNpYmxpbmcgb3B0aW9uLlxuICAgKi9cbiAgcHJpdmF0ZSBtb3ZlVXBPckRvd24oaXNVcDogYm9vbGVhbik6IHZvaWQge1xuICAgIGNvbnN0IGNvbHVtbkluZGV4ID0gTWF0aC5tYXgodGhpcy5hY3RpdmF0ZWRPcHRpb25zLmxlbmd0aCAtIDEsIDApO1xuICAgIC8vIMOowq/CpcOnwrvChMOkwrjCrcOlwrfCssOnwrvCj8OowqLCq8Omwr/CgMOmwrTCu8OnwprChMOpwoDCicOpwqHCuVxuICAgIGNvbnN0IGFjdGl2ZU9wdGlvbiA9IHRoaXMuYWN0aXZhdGVkT3B0aW9uc1sgY29sdW1uSW5kZXggXTtcbiAgICAvLyDDqMKvwqXDp8K7woTDpsKJwoDDpsKcwonDp8KawoTDqcKAwonDqcKhwrnDr8K8wozDp8KUwqjDpMK6wo7DqcKBwo3DpcKOwobDqMKOwrfDpcKPwpbDpMK4wovDpMK4woDDpMK4wqrDqMKiwqvDpsK/woDDpsK0wrvDp8KawoTDqcKAwonDqcKhwrlcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5uekNvbHVtbnNbIGNvbHVtbkluZGV4IF0gfHwgW107XG4gICAgY29uc3QgbGVuZ3RoID0gb3B0aW9ucy5sZW5ndGg7XG4gICAgbGV0IG5leHRJbmRleCA9IC0xO1xuICAgIGlmICghYWN0aXZlT3B0aW9uKSB7IC8vIMOowq/CpcOlwojCl8Oowr/CmMOmwrLCocOmwpzCicOpwoDCicOkwrjCrcOnwprChMOpwoDCicOpwqHCuVxuICAgICAgbmV4dEluZGV4ID0gaXNVcCA/IGxlbmd0aCA6IC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXh0SW5kZXggPSBvcHRpb25zLmluZGV4T2YoYWN0aXZlT3B0aW9uKTtcbiAgICB9XG5cbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgbmV4dEluZGV4ID0gaXNVcCA/IG5leHRJbmRleCAtIDEgOiBuZXh0SW5kZXggKyAxO1xuICAgICAgaWYgKG5leHRJbmRleCA8IDAgfHwgbmV4dEluZGV4ID49IGxlbmd0aCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNvbnN0IG5leHRPcHRpb24gPSBvcHRpb25zWyBuZXh0SW5kZXggXTtcbiAgICAgIGlmICghbmV4dE9wdGlvbiB8fCBuZXh0T3B0aW9uLmRpc2FibGVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXRBY3RpdmVPcHRpb24obmV4dE9wdGlvbiwgY29sdW1uSW5kZXgpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBtb3ZlVXAoKTogdm9pZCB7XG4gICAgdGhpcy5tb3ZlVXBPckRvd24odHJ1ZSk7XG4gIH1cblxuICBwcml2YXRlIG1vdmVEb3duKCk6IHZvaWQge1xuICAgIHRoaXMubW92ZVVwT3JEb3duKGZhbHNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBwcmVzcyBgbGVmdGAgYXJyb3cgdG8gcmVtb3ZlIHRoZSBsYXN0IHNlbGVjdGVkIG9wdGlvbi5cbiAgICovXG4gIHByaXZhdGUgbW92ZUxlZnQoKTogdm9pZCB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuYWN0aXZhdGVkT3B0aW9ucztcbiAgICBpZiAob3B0aW9ucy5sZW5ndGgpIHtcbiAgICAgIG9wdGlvbnMucG9wKCk7IC8vIFJlbW92ZSB0aGUgbGFzdCBvbmVcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogcHJlc3MgYHJpZ2h0YCBhcnJvdyB0byBzZWxlY3QgdGhlIG5leHQgY29sdW1uIG9wdGlvbi5cbiAgICovXG4gIHByaXZhdGUgbW92ZVJpZ2h0KCk6IHZvaWQge1xuICAgIGNvbnN0IGxlbmd0aCA9IHRoaXMuYWN0aXZhdGVkT3B0aW9ucy5sZW5ndGg7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMubnpDb2x1bW5zWyBsZW5ndGggXTtcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmxlbmd0aCkge1xuICAgICAgY29uc3QgbmV4dE9wdCA9IG9wdGlvbnMuZmluZChvID0+ICFvLmRpc2FibGVkKTtcbiAgICAgIGlmIChuZXh0T3B0KSB7XG4gICAgICAgIHRoaXMuc2V0QWN0aXZlT3B0aW9uKG5leHRPcHQsIGxlbmd0aCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIMOpwrzCoMOmwqDCh8OlwojCksOlwoXCpcOpwoDCicOpwqHCuVxuICAgKlxuICAgKiBAcGFyYW0gb3B0aW9uIMOowo/CnMOlwo3ClcOpwoDCicOpwqHCuVxuICAgKiBAcGFyYW0gaW5kZXggw6nCgMKJw6nCocK5w6bCicKAw6XCnMKow6fCmsKEw6XCiMKXw6fCu8KEw6fCmsKEw6fCtMKiw6XCvMKVXG4gICAqIEBwYXJhbSBldmVudCDDqcK8wqDDpsKgwofDpMK6wovDpMK7wrZcbiAgICovXG4gIG9uT3B0aW9uTW91c2VFbnRlcihvcHRpb246IENhc2NhZGVyT3B0aW9uLCBpbmRleDogbnVtYmVyLCBldmVudDogRXZlbnQpOiB2b2lkIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmICh0aGlzLm56RXhwYW5kVHJpZ2dlciA9PT0gJ2hvdmVyJyAmJiAhb3B0aW9uLmlzTGVhZikge1xuICAgICAgdGhpcy5kZWxheVNlbGVjdChvcHRpb24sIGluZGV4LCB0cnVlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogw6nCvMKgw6bCoMKHw6XCiMKSw6XCh8K6w6nCgMKJw6nCocK5XG4gICAqXG4gICAqIEBwYXJhbSBvcHRpb24gw6jCj8Kcw6XCjcKVw6nCgMKJw6nCocK5XG4gICAqIEBwYXJhbSBpbmRleCDDqcKAwonDqcKhwrnDpsKJwoDDpcKcwqjDp8KawoTDpcKIwpfDp8K7woTDp8KawoTDp8K0wqLDpcK8wpVcbiAgICogQHBhcmFtIGV2ZW50IMOpwrzCoMOmwqDCh8OkwrrCi8OkwrvCtlxuICAgKi9cbiAgb25PcHRpb25Nb3VzZUxlYXZlKG9wdGlvbjogQ2FzY2FkZXJPcHRpb24sIGluZGV4OiBudW1iZXIsIGV2ZW50OiBFdmVudCk6IHZvaWQge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKHRoaXMubnpFeHBhbmRUcmlnZ2VyID09PSAnaG92ZXInICYmICFvcHRpb24uaXNMZWFmKSB7XG4gICAgICB0aGlzLmRlbGF5U2VsZWN0KG9wdGlvbiwgaW5kZXgsIGZhbHNlKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNsZWFyRGVsYXlTZWxlY3RUaW1lcigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5kZWxheVNlbGVjdFRpbWVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5kZWxheVNlbGVjdFRpbWVyKTtcbiAgICAgIHRoaXMuZGVsYXlTZWxlY3RUaW1lciA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBkZWxheVNlbGVjdChvcHRpb246IENhc2NhZGVyT3B0aW9uLCBpbmRleDogbnVtYmVyLCBkb1NlbGVjdDogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuY2xlYXJEZWxheVNlbGVjdFRpbWVyKCk7XG4gICAgaWYgKGRvU2VsZWN0KSB7XG4gICAgICB0aGlzLmRlbGF5U2VsZWN0VGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgLy8gw6nCvMKgw6bCoMKHw6bCu8KRw6XChcKlw6XCj8Kqw6XCscKVw6XCvMKAw6/CvMKMw6TCuMKNw6jCv8Kbw6jCocKMw6nCgMKJw6TCuMKtw6bCk8KNw6TCvcKcXG4gICAgICAgIHRoaXMuc2V0QWN0aXZlT3B0aW9uKG9wdGlvbiwgaW5kZXgpO1xuICAgICAgICB0aGlzLmRlbGF5U2VsZWN0VGltZXIgPSBudWxsO1xuICAgICAgfSwgMTUwKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZ2V0U3VibWl0VmFsdWUoKTogYW55W10ge1xuICAgIGNvbnN0IHZhbHVlczogYW55W10gPSBbXTtcbiAgICB0aGlzLnNlbGVjdGVkT3B0aW9ucy5mb3JFYWNoKG9wdGlvbiA9PiB7XG4gICAgICB2YWx1ZXMucHVzaCh0aGlzLmdldE9wdGlvblZhbHVlKG9wdGlvbikpO1xuICAgIH0pO1xuICAgIHJldHVybiB2YWx1ZXM7XG4gIH1cblxuICBwcml2YXRlIG9uVmFsdWVDaGFuZ2UoKTogdm9pZCB7XG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLmdldFN1Ym1pdFZhbHVlKCk7XG4gICAgaWYgKCFhcnJheUVxdWFscyh0aGlzLnZhbHVlLCB2YWx1ZSkpIHtcbiAgICAgIHRoaXMuZGVmYXVsdFZhbHVlID0gbnVsbDsgLy8gY2xlYXIgdGhlIGluaXQtdmFsdWVcbiAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgIHRoaXMub25DaGFuZ2UodmFsdWUpOyAvLyBBbmd1bGFyIG5lZWQgdGhpc1xuICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aGlzLm56Q2xlYXIuZW1pdCgpOyAvLyBmaXJzdCB0cmlnZ2VyIGBjbGVhcmAgYW5kIHRoZW4gYGNoYW5nZWBcbiAgICAgIH1cbiAgICAgIHRoaXMubnpTZWxlY3Rpb25DaGFuZ2UuZW1pdCh0aGlzLnNlbGVjdGVkT3B0aW9ucyk7XG4gICAgICB0aGlzLm56Q2hhbmdlLmVtaXQodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICAgICAgICAgICAgcHJpdmF0ZSBjZHI6IENoYW5nZURldGVjdG9yUmVmLFxuICAgICAgICAgICAgICBwcml2YXRlIG56VXBkYXRlSG9zdENsYXNzU2VydmljZTogTnpVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlKSB7XG4gIH1cblxuICBwcml2YXRlIGZpbmRPcHRpb24ob3B0aW9uOiBhbnksIGluZGV4OiBudW1iZXIpOiBDYXNjYWRlck9wdGlvbiB7XG4gICAgY29uc3Qgb3B0aW9uczogQ2FzY2FkZXJPcHRpb25bXSA9IHRoaXMubnpDb2x1bW5zWyBpbmRleCBdO1xuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHR5cGVvZiBvcHRpb24gPT09ICdvYmplY3QnID8gdGhpcy5nZXRPcHRpb25WYWx1ZShvcHRpb24pIDogb3B0aW9uO1xuICAgICAgcmV0dXJuIG9wdGlvbnMuZmluZChvID0+IHZhbHVlID09PSB0aGlzLmdldE9wdGlvblZhbHVlKG8pKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBwcml2YXRlIGlzTG9hZGVkKGluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5uekNvbHVtbnNbIGluZGV4IF0gJiYgdGhpcy5uekNvbHVtbnNbIGluZGV4IF0ubGVuZ3RoID4gMDtcbiAgfVxuXG4gIHByaXZhdGUgYWN0aXZhdGVPbkluaXQoaW5kZXg6IG51bWJlciwgdmFsdWU6IGFueSk6IHZvaWQge1xuICAgIGxldCBvcHRpb24gPSB0aGlzLmZpbmRPcHRpb24odmFsdWUsIGluZGV4KTtcbiAgICBpZiAoIW9wdGlvbikge1xuICAgICAgb3B0aW9uID0gdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyA/IHZhbHVlIDoge1xuICAgICAgICBbIGAke3RoaXMubnpWYWx1ZVByb3BlcnR5IHx8ICd2YWx1ZSd9YCBdOiB2YWx1ZSxcbiAgICAgICAgWyBgJHt0aGlzLm56TGFiZWxQcm9wZXJ0eSB8fCAnbGFiZWwnfWAgXTogdmFsdWVcbiAgICAgIH07XG4gICAgfVxuICAgIHRoaXMuc2V0QWN0aXZlT3B0aW9uKG9wdGlvbiwgaW5kZXgsIGZhbHNlLCBmYWxzZSk7XG4gIH1cblxuICBwcml2YXRlIGluaXRPcHRpb25zKGluZGV4OiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCB2cyA9IHRoaXMuZGVmYXVsdFZhbHVlO1xuICAgIGNvbnN0IGxvYWQgPSAoKSA9PiB7XG4gICAgICB0aGlzLmFjdGl2YXRlT25Jbml0KGluZGV4LCB2c1sgaW5kZXggXSk7XG4gICAgICBpZiAoaW5kZXggPCB2cy5sZW5ndGggLSAxKSB7XG4gICAgICAgIHRoaXMuaW5pdE9wdGlvbnMoaW5kZXggKyAxKTtcbiAgICAgIH1cbiAgICAgIGlmIChpbmRleCA9PT0gdnMubGVuZ3RoIC0gMSkge1xuICAgICAgICB0aGlzLmFmdGVyV3JpdGVWYWx1ZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAodGhpcy5pc0xvYWRlZChpbmRleCkgfHwgIXRoaXMubnpMb2FkRGF0YSkge1xuICAgICAgbG9hZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBub2RlID0gdGhpcy5hY3RpdmF0ZWRPcHRpb25zWyBpbmRleCAtIDEgXSB8fCB7fTtcbiAgICAgIHRoaXMubG9hZENoaWxkcmVuKG5vZGUsIGluZGV4IC0gMSwgbG9hZCwgdGhpcy5hZnRlcldyaXRlVmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIGFmdGVyV3JpdGVWYWx1ZSgpOiB2b2lkIHtcbiAgICB0aGlzLnNlbGVjdGVkT3B0aW9ucyA9IHRoaXMuYWN0aXZhdGVkT3B0aW9ucztcbiAgICB0aGlzLnZhbHVlID0gdGhpcy5nZXRTdWJtaXRWYWx1ZSgpO1xuICAgIHRoaXMuYnVpbGREaXNwbGF5TGFiZWwoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXcml0ZSBhIG5ldyB2YWx1ZSB0byB0aGUgZWxlbWVudC5cbiAgICpcbiAgICogQE92ZXJyaWRlIChGcm9tIENvbnRyb2xWYWx1ZUFjY2Vzc29yIGludGVyZmFjZSlcbiAgICovXG4gIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQge1xuICAgIGNvbnN0IHZzID0gdGhpcy5kZWZhdWx0VmFsdWUgPSB0b0FycmF5KHZhbHVlKTtcbiAgICBpZiAodnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLmluaXRPcHRpb25zKDApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnZhbHVlID0gdnM7XG4gICAgICB0aGlzLmFjdGl2YXRlZE9wdGlvbnMgPSBbXTtcbiAgICAgIHRoaXMuYWZ0ZXJXcml0ZVZhbHVlKCk7XG4gICAgfVxuICB9XG5cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKF86IGFueSkgPT4ge30pOiB2b2lkIHtcbiAgICB0aGlzLm9uQ2hhbmdlID0gZm47XG4gIH1cblxuICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4ge30pOiB2b2lkIHtcbiAgICB0aGlzLm9uVG91Y2hlZCA9IGZuO1xuICB9XG5cbiAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZCB7XG4gICAgaWYgKGlzRGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuY2xvc2VNZW51KCk7XG4gICAgfVxuICAgIHRoaXMubnpEaXNhYmxlZCA9IGlzRGlzYWJsZWQ7XG4gIH1cblxuICBwcml2YXRlIHByZXBhcmVTZWFyY2hWYWx1ZSgpOiB2b2lkIHtcbiAgICBjb25zdCByZXN1bHRzOiBDYXNjYWRlclNlYXJjaE9wdGlvbltdID0gW107XG4gICAgY29uc3QgcGF0aDogQ2FzY2FkZXJPcHRpb25bXSA9IFtdO1xuICAgIGNvbnN0IGRlZmF1bHRGaWx0ZXIgPSAoaW5wdXRWYWx1ZTogc3RyaW5nLCBwOiBDYXNjYWRlck9wdGlvbltdKTogYm9vbGVhbiA9PiB7XG4gICAgICBsZXQgZmxhZyA9IGZhbHNlO1xuICAgICAgcC5mb3JFYWNoKG4gPT4ge1xuICAgICAgICBjb25zdCBsYWJlbE5hbWUgPSB0aGlzLm56TGFiZWxQcm9wZXJ0eTtcbiAgICAgICAgaWYgKG5bIGxhYmVsTmFtZSBdICYmIG5bIGxhYmVsTmFtZSBdLmluZGV4T2YoaW5wdXRWYWx1ZSkgPiAtMSkge1xuICAgICAgICAgIGZsYWcgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmbGFnO1xuICAgIH07XG5cbiAgICBjb25zdCBmaWx0ZXI6IChpbnB1dFZhbHVlOiBzdHJpbmcsIHA6IENhc2NhZGVyT3B0aW9uW10pID0+IGJvb2xlYW4gPVxuICAgICAgdGhpcy5uelNob3dTZWFyY2ggaW5zdGFuY2VvZiBPYmplY3QgJiYgKHRoaXMubnpTaG93U2VhcmNoIGFzIE56U2hvd1NlYXJjaE9wdGlvbnMpLmZpbHRlclxuICAgICAgICA/ICh0aGlzLm56U2hvd1NlYXJjaCBhcyBOelNob3dTZWFyY2hPcHRpb25zKS5maWx0ZXJcbiAgICAgICAgOiBkZWZhdWx0RmlsdGVyO1xuICAgIGNvbnN0IHNvcnRlcjogKGE6IENhc2NhZGVyT3B0aW9uW10sIGI6IENhc2NhZGVyT3B0aW9uW10sIGlucHV0VmFsdWU6IHN0cmluZykgPT4gbnVtYmVyID1cbiAgICAgIHRoaXMubnpTaG93U2VhcmNoIGluc3RhbmNlb2YgT2JqZWN0ICYmICh0aGlzLm56U2hvd1NlYXJjaCBhcyBOelNob3dTZWFyY2hPcHRpb25zKS5zb3J0ZXI7XG4gICAgY29uc3QgbG9vcFBhcmVudCA9IChub2RlOiBDYXNjYWRlck9wdGlvbiwgZm9yY2VEaXNhYmxlZCA9IGZhbHNlKSA9PiB7XG4gICAgICBjb25zdCBkaXNhYmxlZCA9IGZvcmNlRGlzYWJsZWQgfHwgbm9kZS5kaXNhYmxlZDtcbiAgICAgIHBhdGgucHVzaChub2RlKTtcbiAgICAgIG5vZGUuY2hpbGRyZW4uZm9yRWFjaCgoc05vZGUpID0+IHtcbiAgICAgICAgaWYgKCFzTm9kZS5wYXJlbnQpIHtcbiAgICAgICAgICBzTm9kZS5wYXJlbnQgPSBub2RlO1xuICAgICAgICB9XG4gICAgICAgIC8qKiDDpsKQwpzDp8K0wqLDp8KawoTDpcKQwozDpsKXwrbDpcK7wrrDp8KrwosgcGFyZW50IMOowr/CnsOmwo7CpcOvwrzCjMOlwpvCoMOkwrjCusOnwpTCqMOmwojCt8OnwpvCtMOmwo7CpcOmwpDCnMOnwrTCosOnwprChMOowq/CncOmwpjCr8OmwrLCocOmwpzCicOlwrvCusOnwqvCi8Oowr/CnsOmwo7CpcOnwprChMOvwrzCjMOkwrzCmsOmwo/CkMOlwo3Ch8OkwrvCjsOlwo/CtsOlwq3CkMOoworCgsOnwoLCucOlwpvCnsOmwrrCr8OnwprChMOpwprCvsOlwrrCpiAqL1xuICAgICAgICBpZiAoIXNOb2RlLmlzTGVhZikge1xuICAgICAgICAgIGxvb3BQYXJlbnQoc05vZGUsIGRpc2FibGVkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc05vZGUuaXNMZWFmIHx8ICFzTm9kZS5jaGlsZHJlbiB8fCAhc05vZGUuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgbG9vcENoaWxkKHNOb2RlLCBkaXNhYmxlZCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcGF0aC5wb3AoKTtcbiAgICB9O1xuICAgIGNvbnN0IGxvb3BDaGlsZCA9IChub2RlOiBDYXNjYWRlck9wdGlvbiwgZm9yY2VEaXNhYmxlZCA9IGZhbHNlKSA9PiB7XG4gICAgICBwYXRoLnB1c2gobm9kZSk7XG4gICAgICBjb25zdCBjUGF0aCA9IEFycmF5LmZyb20ocGF0aCk7XG4gICAgICBpZiAoZmlsdGVyKHRoaXMuX2lucHV0VmFsdWUsIGNQYXRoKSkge1xuICAgICAgICBjb25zdCBkaXNhYmxlZCA9IGZvcmNlRGlzYWJsZWQgfHwgbm9kZS5kaXNhYmxlZDtcbiAgICAgICAgY29uc3Qgb3B0aW9uOiBDYXNjYWRlclNlYXJjaE9wdGlvbiA9IHtcbiAgICAgICAgICBkaXNhYmxlZCxcbiAgICAgICAgICBpc0xlYWYgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdHJ1ZSxcbiAgICAgICAgICBwYXRoICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogY1BhdGgsXG4gICAgICAgICAgWyB0aGlzLm56TGFiZWxQcm9wZXJ0eSBdOiBjUGF0aC5tYXAocCA9PiBwLmxhYmVsKS5qb2luKCcgLyAnKVxuICAgICAgICB9O1xuICAgICAgICByZXN1bHRzLnB1c2gob3B0aW9uKTtcbiAgICAgIH1cbiAgICAgIHBhdGgucG9wKCk7XG4gICAgfTtcblxuICAgIHRoaXMub2xkQ29sdW1uc0hvbGRlclsgMCBdLmZvckVhY2gobm9kZSA9PiAobm9kZS5pc0xlYWYgfHwgIW5vZGUuY2hpbGRyZW4gfHwgIW5vZGUuY2hpbGRyZW4ubGVuZ3RoKVxuICAgICAgPyBsb29wQ2hpbGQobm9kZSlcbiAgICAgIDogbG9vcFBhcmVudChub2RlKSk7XG4gICAgaWYgKHNvcnRlcikge1xuICAgICAgcmVzdWx0cy5zb3J0KChhLCBiKSA9PiBzb3J0ZXIoYS5wYXRoLCBiLnBhdGgsIHRoaXMuX2lucHV0VmFsdWUpKTtcbiAgICB9XG4gICAgdGhpcy5uekNvbHVtbnMgPSBbIHJlc3VsdHMgXTtcbiAgfVxuXG4gIHJlbmRlclNlYXJjaFN0cmluZyhzdHI6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKG5ldyBSZWdFeHAodGhpcy5faW5wdXRWYWx1ZSwgJ2cnKSxcbiAgICAgIGA8c3BhbiBjbGFzcz1cImFudC1jYXNjYWRlci1tZW51LWl0ZW0ta2V5d29yZFwiPiR7dGhpcy5faW5wdXRWYWx1ZX08L3NwYW4+YCk7XG4gIH1cblxuICBzZXRTZWFyY2hBY3RpdmVPcHRpb24ocmVzdWx0OiBDYXNjYWRlclNlYXJjaE9wdGlvbiwgZXZlbnQ6IEV2ZW50KTogdm9pZCB7XG4gICAgdGhpcy5hY3RpdmF0ZWRPcHRpb25zID0gWyByZXN1bHQgXTtcbiAgICB0aGlzLmRlbGF5U2V0TWVudVZpc2libGUoZmFsc2UsIDIwMCk7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuaW5wdXRWYWx1ZSA9ICcnOyAvLyBOb3Qgb25seSByZW1vdmUgYGlucHV0VmFsdWVgIGJ1dCBhbHNvIHJldmVyc2UgYG56Q29sdW1uc2AgaW4gdGhlIGhvb2suXG4gICAgICBjb25zdCBpbmRleCA9IHJlc3VsdC5wYXRoLmxlbmd0aCAtIDE7XG4gICAgICBjb25zdCBkZXN0aU5vZGUgPSByZXN1bHQucGF0aFsgaW5kZXggXTtcbiAgICAgIGNvbnN0IG1vY2tDbGlja1BhcmVudCA9IChub2RlOiBDYXNjYWRlck9wdGlvbiwgY0luZGV4OiBudW1iZXIpID0+IHtcbiAgICAgICAgaWYgKG5vZGUgJiYgbm9kZS5wYXJlbnQpIHtcbiAgICAgICAgICBtb2NrQ2xpY2tQYXJlbnQobm9kZS5wYXJlbnQsIGNJbmRleCAtIDEpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub25PcHRpb25DbGljayhub2RlLCBjSW5kZXgsIGV2ZW50KTtcbiAgICAgIH07XG4gICAgICBtb2NrQ2xpY2tQYXJlbnQoZGVzdGlOb2RlLCBpbmRleCk7XG4gICAgfSwgMzAwKTtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIC8vIMOowq7CvsOnwr3CrsOmwqDCt8OlwrzCj1xuICAgIHRoaXMuc2V0Q2xhc3NNYXAoKTtcbiAgICB0aGlzLnNldExhYmVsQ2xhc3MoKTtcbiAgICB0aGlzLnNldEFycm93Q2xhc3MoKTtcbiAgICB0aGlzLnNldExvYWRpbmdDbGFzcygpO1xuICAgIHRoaXMuc2V0Q2xlYXJDbGFzcygpO1xuICAgIHRoaXMuc2V0SW5wdXRDbGFzcygpO1xuICAgIHRoaXMuc2V0TWVudUNsYXNzKCk7XG4gICAgdGhpcy5zZXRNZW51Q29sdW1uQ2xhc3MoKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuY2xlYXJEZWxheVRpbWVyKCk7XG4gICAgdGhpcy5jbGVhckRlbGF5U2VsZWN0VGltZXIoKTtcbiAgfVxuXG59XG4iLCJpbXBvcnQgeyBPdmVybGF5TW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IE56SWNvbk1vZHVsZSB9IGZyb20gJy4uL2ljb24vbnotaWNvbi5tb2R1bGUnO1xuXG5pbXBvcnQgeyBOeklucHV0TW9kdWxlIH0gZnJvbSAnLi4vaW5wdXQvbnotaW5wdXQubW9kdWxlJztcblxuaW1wb3J0IHsgTnpDYXNjYWRlckNvbXBvbmVudCB9IGZyb20gJy4vbnotY2FzY2FkZXIuY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0cyAgICAgOiBbIENvbW1vbk1vZHVsZSwgRm9ybXNNb2R1bGUsIE92ZXJsYXlNb2R1bGUsIE56SW5wdXRNb2R1bGUsIE56SWNvbk1vZHVsZSBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBOekNhc2NhZGVyQ29tcG9uZW50XG4gIF0sXG4gIGV4cG9ydHMgICAgIDogW1xuICAgIE56Q2FzY2FkZXJDb21wb25lbnRcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBOekNhc2NhZGVyTW9kdWxlIHtcbn1cbiIsImltcG9ydCB7XG4gIGZvcndhcmRSZWYsXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgSW5wdXQsXG4gIE9uSW5pdCxcbiAgUmVuZGVyZXIyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyB0b0Jvb2xlYW4gfSBmcm9tICcuLi9jb3JlL3V0aWwvY29udmVydCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTnpDaGVja0JveE9wdGlvbkludGVyZmFjZSB7XG4gIGxhYmVsOiBzdHJpbmc7XG4gIHZhbHVlOiBzdHJpbmc7XG4gIGNoZWNrZWQ/OiBib29sZWFuO1xuICBkaXNhYmxlZD86IGJvb2xlYW47XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICAgICAgOiAnbnotY2hlY2tib3gtZ3JvdXAnLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgdGVtcGxhdGVVcmwgICAgICAgIDogJy4vbnotY2hlY2tib3gtZ3JvdXAuY29tcG9uZW50Lmh0bWwnLFxuICBwcm92aWRlcnMgICAgICAgICAgOiBbXG4gICAge1xuICAgICAgcHJvdmlkZSAgICA6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTnpDaGVja2JveEdyb3VwQ29tcG9uZW50KSxcbiAgICAgIG11bHRpICAgICAgOiB0cnVlXG4gICAgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIE56Q2hlY2tib3hHcm91cENvbXBvbmVudCBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBPbkluaXQge1xuICBwcml2YXRlIF9kaXNhYmxlZCA9IGZhbHNlO1xuICBwcml2YXRlIGVsOiBIVE1MRWxlbWVudCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICBwcml2YXRlIHByZWZpeENscyA9ICdhbnQtY2hlY2tib3gtZ3JvdXAnO1xuICBwcml2YXRlIG9uQ2hhbmdlID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuICBwcml2YXRlIG9uVG91Y2hlZCA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbiAgb3B0aW9uczogTnpDaGVja0JveE9wdGlvbkludGVyZmFjZVtdO1xuXG4gIEBJbnB1dCgpXG4gIHNldCBuekRpc2FibGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fZGlzYWJsZWQgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56RGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVkO1xuICB9XG5cbiAgb25PcHRpb25DaGFuZ2UoKTogdm9pZCB7XG4gICAgdGhpcy5vbkNoYW5nZSh0aGlzLm9wdGlvbnMpO1xuICB9XG5cbiAgd3JpdGVWYWx1ZSh2YWx1ZTogTnpDaGVja0JveE9wdGlvbkludGVyZmFjZVtdKTogdm9pZCB7XG4gICAgdGhpcy5vcHRpb25zID0gdmFsdWU7XG4gIH1cblxuICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAoXzogTnpDaGVja0JveE9wdGlvbkludGVyZmFjZVtdKSA9PiB7fSk6IHZvaWQge1xuICAgIHRoaXMub25DaGFuZ2UgPSBmbjtcbiAgfVxuXG4gIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiAoKSA9PiB7fSk6IHZvaWQge1xuICAgIHRoaXMub25Ub3VjaGVkID0gZm47XG4gIH1cblxuICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLm56RGlzYWJsZWQgPSBpc0Rpc2FibGVkO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbCwgYCR7dGhpcy5wcmVmaXhDbHN9YCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgTnpDaGVja2JveENvbXBvbmVudCB9IGZyb20gJy4vbnotY2hlY2tib3guY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yICAgICAgICAgICA6ICduei1jaGVja2JveC13cmFwcGVyJyxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG4gIHRlbXBsYXRlVXJsICAgICAgICA6ICcuL256LWNoZWNrYm94LXdyYXBwZXIuY29tcG9uZW50Lmh0bWwnLFxuICBob3N0ICAgICAgICAgICAgICAgOiB7XG4gICAgJ1tjbGFzcy5hbnQtY2hlY2tib3gtZ3JvdXBdJzogJ3RydWUnXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgTnpDaGVja2JveFdyYXBwZXJDb21wb25lbnQge1xuICBAT3V0cHV0KCkgbnpPbkNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nW10+KCk7XG4gIHByaXZhdGUgY2hlY2tib3hMaXN0OiBOekNoZWNrYm94Q29tcG9uZW50W10gPSBbXTtcblxuICBhZGRDaGVja2JveCh2YWx1ZTogTnpDaGVja2JveENvbXBvbmVudCk6IHZvaWQge1xuICAgIHRoaXMuY2hlY2tib3hMaXN0LnB1c2godmFsdWUpO1xuICB9XG5cbiAgcmVtb3ZlQ2hlY2tib3godmFsdWU6IE56Q2hlY2tib3hDb21wb25lbnQpOiB2b2lkIHtcbiAgICB0aGlzLmNoZWNrYm94TGlzdC5zcGxpY2UodGhpcy5jaGVja2JveExpc3QuaW5kZXhPZih2YWx1ZSksIDEpO1xuICB9XG5cbiAgb3V0cHV0VmFsdWUoKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IGNoZWNrZWRMaXN0ID0gdGhpcy5jaGVja2JveExpc3QuZmlsdGVyKGl0ZW0gPT4gaXRlbS5uekNoZWNrZWQpO1xuICAgIHJldHVybiBjaGVja2VkTGlzdC5tYXAoaXRlbSA9PiBpdGVtLm56VmFsdWUpO1xuICB9XG5cbiAgb25DaGFuZ2UoKTogdm9pZCB7XG4gICAgdGhpcy5uek9uQ2hhbmdlLmVtaXQodGhpcy5vdXRwdXRWYWx1ZSgpKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtcbiAgZm9yd2FyZFJlZixcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIEhvc3RMaXN0ZW5lcixcbiAgSW5wdXQsXG4gIE9uQ2hhbmdlcyxcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG4gIE9wdGlvbmFsLFxuICBPdXRwdXQsXG4gIFJlbmRlcmVyMixcbiAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBpc0VtcHR5IH0gZnJvbSAnLi4vY29yZS91dGlsL2NoZWNrJztcbmltcG9ydCB7IHRvQm9vbGVhbiB9IGZyb20gJy4uL2NvcmUvdXRpbC9jb252ZXJ0JztcblxuaW1wb3J0IHsgTnpDaGVja2JveFdyYXBwZXJDb21wb25lbnQgfSBmcm9tICcuL256LWNoZWNrYm94LXdyYXBwZXIuY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yICAgICAgICAgICA6ICdbbnotY2hlY2tib3hdJyxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG4gIHRlbXBsYXRlVXJsICAgICAgICA6ICcuL256LWNoZWNrYm94LmNvbXBvbmVudC5odG1sJyxcbiAgcHJvdmlkZXJzICAgICAgICAgIDogW1xuICAgIHtcbiAgICAgIHByb3ZpZGUgICAgOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IE56Q2hlY2tib3hDb21wb25lbnQpLFxuICAgICAgbXVsdGkgICAgICA6IHRydWVcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgTnpDaGVja2JveENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSBfZGlzYWJsZWQgPSBmYWxzZTtcbiAgcHJpdmF0ZSBfaW5kZXRlcm1pbmF0ZSA9IGZhbHNlO1xuICBwcml2YXRlIF9hdXRvRm9jdXMgPSBmYWxzZTtcbiAgcHJpdmF0ZSBfY2hlY2tlZCA9IGZhbHNlO1xuICBwcml2YXRlIGVsOiBIVE1MRWxlbWVudCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICBwcml2YXRlIGlzSW5pdCA9IGZhbHNlO1xuICBwcml2YXRlIHByZWZpeENscyA9ICdhbnQtY2hlY2tib3gnO1xuICBwcml2YXRlIG9uQ2hhbmdlID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuICBwcml2YXRlIG9uVG91Y2hlZCA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbiAgQFZpZXdDaGlsZCgnaW5wdXRFbGVtZW50JylcbiAgcHJpdmF0ZSBpbnB1dEVsZW1lbnQ6IEVsZW1lbnRSZWY7XG4gIEBWaWV3Q2hpbGQoJ2NvbnRlbnRFbGVtZW50JykgY29udGVudEVsZW1lbnQ6IEVsZW1lbnRSZWY7XG4gIGNsYXNzTWFwID0ge307XG4gIEBPdXRwdXQoKSBuekNoZWNrZWRDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG4gIEBJbnB1dCgpIG56VmFsdWU6IHN0cmluZztcblxuICBASW5wdXQoKVxuICBzZXQgbnpBdXRvRm9jdXModmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9hdXRvRm9jdXMgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICAgIHRoaXMudXBkYXRlQXV0b0ZvY3VzKCk7XG4gIH1cblxuICBnZXQgbnpBdXRvRm9jdXMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2F1dG9Gb2N1cztcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekRpc2FibGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fZGlzYWJsZWQgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56RGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVkO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56SW5kZXRlcm1pbmF0ZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2luZGV0ZXJtaW5hdGUgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56SW5kZXRlcm1pbmF0ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5faW5kZXRlcm1pbmF0ZTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekNoZWNrZWQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9jaGVja2VkID0gdmFsdWU7XG4gICAgdGhpcy51cGRhdGVDbGFzc01hcCgpO1xuICB9XG5cbiAgZ2V0IG56Q2hlY2tlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fY2hlY2tlZDtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyAnJGV2ZW50JyBdKVxuICBvbkNsaWNrKGU6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5pbnB1dEVsZW1lbnQubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgIGlmICghdGhpcy5uekRpc2FibGVkKSB7XG4gICAgICB0aGlzLnVwZGF0ZVZhbHVlKCF0aGlzLm56Q2hlY2tlZCk7XG4gICAgfVxuICB9XG5cbiAgb25CbHVyKCk6IHZvaWQge1xuICAgIHRoaXMub25Ub3VjaGVkKCk7XG4gIH1cblxuICB1cGRhdGVBdXRvRm9jdXMoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNJbml0KSB7XG4gICAgICBpZiAodGhpcy5uekF1dG9Gb2N1cykge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLmlucHV0RWxlbWVudC5uYXRpdmVFbGVtZW50LCAnYXV0b2ZvY3VzJywgJ2F1dG9mb2N1cycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVBdHRyaWJ1dGUodGhpcy5pbnB1dEVsZW1lbnQubmF0aXZlRWxlbWVudCwgJ2F1dG9mb2N1cycpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZVZhbHVlKHZhbHVlOiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5vbkNoYW5nZSh2YWx1ZSk7XG4gICAgdGhpcy5uekNoZWNrZWRDaGFuZ2UuZW1pdCh2YWx1ZSk7XG4gICAgdGhpcy5uekNoZWNrZWQgPSB2YWx1ZTtcbiAgICBpZiAodGhpcy5uekNoZWNrYm94V3JhcHBlckNvbXBvbmVudCkge1xuICAgICAgdGhpcy5uekNoZWNrYm94V3JhcHBlckNvbXBvbmVudC5vbkNoYW5nZSgpO1xuICAgIH1cbiAgfVxuXG4gIHdyaXRlVmFsdWUodmFsdWU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLm56Q2hlY2tlZCA9IHZhbHVlO1xuICB9XG5cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKF86IGJvb2xlYW4pID0+IHt9KTogdm9pZCB7XG4gICAgdGhpcy5vbkNoYW5nZSA9IGZuO1xuICB9XG5cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHt9KTogdm9pZCB7XG4gICAgdGhpcy5vblRvdWNoZWQgPSBmbjtcbiAgfVxuXG4gIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMubnpEaXNhYmxlZCA9IGlzRGlzYWJsZWQ7XG4gIH1cblxuICB1cGRhdGVDbGFzc01hcCgpOiB2b2lkIHtcbiAgICB0aGlzLmNsYXNzTWFwID0ge1xuICAgICAgWyB0aGlzLnByZWZpeENscyBdICAgICAgICAgICAgICAgICAgIDogdHJ1ZSxcbiAgICAgIFsgYCR7dGhpcy5wcmVmaXhDbHN9LWNoZWNrZWRgIF0gICAgICA6IHRoaXMubnpDaGVja2VkICYmICghdGhpcy5uekluZGV0ZXJtaW5hdGUpLFxuICAgICAgWyBgJHt0aGlzLnByZWZpeENsc30tZGlzYWJsZWRgIF0gICAgIDogdGhpcy5uekRpc2FibGVkLFxuICAgICAgWyBgJHt0aGlzLnByZWZpeENsc30taW5kZXRlcm1pbmF0ZWAgXTogdGhpcy5uekluZGV0ZXJtaW5hdGVcbiAgICB9O1xuICB9XG5cbiAgZm9jdXMoKTogdm9pZCB7XG4gICAgdGhpcy5pbnB1dEVsZW1lbnQubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICB9XG5cbiAgYmx1cigpOiB2b2lkIHtcbiAgICB0aGlzLmlucHV0RWxlbWVudC5uYXRpdmVFbGVtZW50LmJsdXIoKTtcbiAgfVxuXG4gIGNoZWNrQ29udGVudCgpOiB2b2lkIHtcbiAgICBpZiAoaXNFbXB0eSh0aGlzLmNvbnRlbnRFbGVtZW50Lm5hdGl2ZUVsZW1lbnQpKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuY29udGVudEVsZW1lbnQubmF0aXZlRWxlbWVudCwgJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZVN0eWxlKHRoaXMuY29udGVudEVsZW1lbnQubmF0aXZlRWxlbWVudCwgJ2Rpc3BsYXknKTtcbiAgICB9XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMiwgQE9wdGlvbmFsKCkgcHJpdmF0ZSBuekNoZWNrYm94V3JhcHBlckNvbXBvbmVudDogTnpDaGVja2JveFdyYXBwZXJDb21wb25lbnQpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbCwgYCR7dGhpcy5wcmVmaXhDbHN9LXdyYXBwZXJgKTtcbiAgICB0aGlzLnVwZGF0ZUNsYXNzTWFwKCk7XG4gICAgaWYgKHRoaXMubnpDaGVja2JveFdyYXBwZXJDb21wb25lbnQpIHtcbiAgICAgIHRoaXMubnpDaGVja2JveFdyYXBwZXJDb21wb25lbnQuYWRkQ2hlY2tib3godGhpcyk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkNoYW5nZXMoKTogdm9pZCB7XG4gICAgdGhpcy51cGRhdGVDbGFzc01hcCgpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIHRoaXMuaXNJbml0ID0gdHJ1ZTtcbiAgICB0aGlzLnVwZGF0ZUF1dG9Gb2N1cygpO1xuICAgIHRoaXMuY2hlY2tDb250ZW50KCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5uekNoZWNrYm94V3JhcHBlckNvbXBvbmVudCkge1xuICAgICAgdGhpcy5uekNoZWNrYm94V3JhcHBlckNvbXBvbmVudC5yZW1vdmVDaGVja2JveCh0aGlzKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IE9ic2VydmVyc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vYnNlcnZlcnMnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgTnpDaGVja2JveEdyb3VwQ29tcG9uZW50IH0gZnJvbSAnLi9uei1jaGVja2JveC1ncm91cC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpDaGVja2JveFdyYXBwZXJDb21wb25lbnQgfSBmcm9tICcuL256LWNoZWNrYm94LXdyYXBwZXIuY29tcG9uZW50JztcbmltcG9ydCB7IE56Q2hlY2tib3hDb21wb25lbnQgfSBmcm9tICcuL256LWNoZWNrYm94LmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHMgICAgIDogWyBDb21tb25Nb2R1bGUsIEZvcm1zTW9kdWxlLCBPYnNlcnZlcnNNb2R1bGUgXSxcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgTnpDaGVja2JveENvbXBvbmVudCxcbiAgICBOekNoZWNrYm94R3JvdXBDb21wb25lbnQsXG4gICAgTnpDaGVja2JveFdyYXBwZXJDb21wb25lbnRcbiAgXSxcbiAgZXhwb3J0cyAgICAgOiBbXG4gICAgTnpDaGVja2JveENvbXBvbmVudCxcbiAgICBOekNoZWNrYm94R3JvdXBDb21wb25lbnQsXG4gICAgTnpDaGVja2JveFdyYXBwZXJDb21wb25lbnRcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBOekNoZWNrYm94TW9kdWxlIHtcbn1cbiIsImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgSW5wdXRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IHRvQm9vbGVhbiB9IGZyb20gJy4uL2NvcmUvdXRpbC9jb252ZXJ0JztcblxuaW1wb3J0IHsgTnpDb2xsYXBzZVBhbmVsQ29tcG9uZW50IH0gZnJvbSAnLi9uei1jb2xsYXBzZS1wYW5lbC5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICA6ICduei1jb2xsYXBzZScsXG4gIHRlbXBsYXRlVXJsOiAnLi9uei1jb2xsYXBzZS5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlcyAgICAgOiBbXG4gICAgYDpob3N0IHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIH1gXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgTnpDb2xsYXBzZUNvbXBvbmVudCB7XG4gIHByaXZhdGUgX2FjY29yZGlvbiA9IGZhbHNlO1xuICBwcml2YXRlIF9ib3JkZXJlZCA9IHRydWU7XG4gIHByaXZhdGUgbGlzdE9mUGFuZWw6IE56Q29sbGFwc2VQYW5lbENvbXBvbmVudFtdID0gW107XG5cbiAgQElucHV0KClcbiAgc2V0IG56QWNjb3JkaW9uKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fYWNjb3JkaW9uID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuekFjY29yZGlvbigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fYWNjb3JkaW9uO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56Qm9yZGVyZWQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9ib3JkZXJlZCA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBnZXQgbnpCb3JkZXJlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fYm9yZGVyZWQ7XG4gIH1cblxuICBjbGljayhjb2xsYXBzZTogTnpDb2xsYXBzZVBhbmVsQ29tcG9uZW50KTogdm9pZCB7XG4gICAgaWYgKHRoaXMubnpBY2NvcmRpb24pIHtcbiAgICAgIHRoaXMubGlzdE9mUGFuZWwuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgY29uc3QgYWN0aXZlID0gY29sbGFwc2UgPT09IGl0ZW07XG4gICAgICAgIGlmIChhY3RpdmUgJiYgaXRlbS5uekFjdGl2ZSA9PT0gYWN0aXZlKSB7XG4gICAgICAgICAgaXRlbS5uekFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgIGl0ZW0ubnpBY3RpdmVDaGFuZ2UuZW1pdChpdGVtLm56QWN0aXZlKTtcbiAgICAgICAgfSBlbHNlIGlmIChpdGVtLm56QWN0aXZlICE9PSBhY3RpdmUpIHtcbiAgICAgICAgICBpdGVtLm56QWN0aXZlID0gYWN0aXZlO1xuICAgICAgICAgIGl0ZW0ubnpBY3RpdmVDaGFuZ2UuZW1pdChpdGVtLm56QWN0aXZlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbGxhcHNlLm56QWN0aXZlID0gIWNvbGxhcHNlLm56QWN0aXZlO1xuICAgICAgY29sbGFwc2UubnpBY3RpdmVDaGFuZ2UuZW1pdChjb2xsYXBzZS5uekFjdGl2ZSk7XG4gICAgfVxuICB9XG5cbiAgYWRkQ29sbGFwc2UoY29sbGFwc2U6IE56Q29sbGFwc2VQYW5lbENvbXBvbmVudCk6IHZvaWQge1xuICAgIHRoaXMubGlzdE9mUGFuZWwucHVzaChjb2xsYXBzZSk7XG4gIH1cblxuICByZW1vdmVDb2xsYXBzZShjb2xsYXBzZTogTnpDb2xsYXBzZVBhbmVsQ29tcG9uZW50KTogdm9pZCB7XG4gICAgdGhpcy5saXN0T2ZQYW5lbC5zcGxpY2UodGhpcy5saXN0T2ZQYW5lbC5pbmRleE9mKGNvbGxhcHNlKSwgMSk7XG4gIH1cbn1cbiIsImltcG9ydCB7XG4gIGFuaW1hdGUsXG4gIHN0YXRlLFxuICBzdHlsZSxcbiAgdHJhbnNpdGlvbixcbiAgdHJpZ2dlclxufSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBIb3N0LFxuICBIb3N0QmluZGluZyxcbiAgSW5wdXQsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBPdXRwdXQsXG4gIFRlbXBsYXRlUmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyB0b0Jvb2xlYW4gfSBmcm9tICcuLi9jb3JlL3V0aWwvY29udmVydCc7XG5cbmltcG9ydCB7IE56Q29sbGFwc2VDb21wb25lbnQgfSBmcm9tICcuL256LWNvbGxhcHNlLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgIDogJ256LWNvbGxhcHNlLXBhbmVsJyxcbiAgdGVtcGxhdGVVcmw6ICcuL256LWNvbGxhcHNlLXBhbmVsLmNvbXBvbmVudC5odG1sJyxcbiAgYW5pbWF0aW9ucyA6IFtcbiAgICB0cmlnZ2VyKCdjb2xsYXBzZVN0YXRlJywgW1xuICAgICAgc3RhdGUoJ2luYWN0aXZlJywgc3R5bGUoe1xuICAgICAgICBvcGFjaXR5OiAnMCcsXG4gICAgICAgIGhlaWdodCA6IDBcbiAgICAgIH0pKSxcbiAgICAgIHN0YXRlKCdhY3RpdmUnLCBzdHlsZSh7XG4gICAgICAgIG9wYWNpdHk6ICcxJyxcbiAgICAgICAgaGVpZ2h0IDogJyonXG4gICAgICB9KSksXG4gICAgICB0cmFuc2l0aW9uKCdpbmFjdGl2ZSA9PiBhY3RpdmUnLCBhbmltYXRlKCcxNTBtcyBlYXNlLWluJykpLFxuICAgICAgdHJhbnNpdGlvbignYWN0aXZlID0+IGluYWN0aXZlJywgYW5pbWF0ZSgnMTUwbXMgZWFzZS1vdXQnKSlcbiAgICBdKVxuICBdLFxuICBzdHlsZXMgICAgIDogW1xuICAgIGBcbiAgICAgIDpob3N0IHtcbiAgICAgICAgZGlzcGxheTogYmxvY2tcbiAgICAgIH1gXG4gIF0sXG4gIGhvc3QgICAgICAgOiB7XG4gICAgJ1tjbGFzcy5hbnQtY29sbGFwc2UtaXRlbV0nOiAndHJ1ZScsXG4gICAgJ1thdHRyLnJvbGVdJyAgICAgICAgICAgICAgOiAnXCJ0YWJsaXN0XCInXG4gIH1cbn0pXG5cbmV4cG9ydCBjbGFzcyBOekNvbGxhcHNlUGFuZWxDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIE9uSW5pdCB7XG4gIHByaXZhdGUgX2Rpc2FibGVkID0gZmFsc2U7XG4gIHByaXZhdGUgX3Nob3dBcnJvdyA9IHRydWU7XG4gIHByaXZhdGUgX2FjdGl2ZSA9IGZhbHNlO1xuICBwcml2YXRlIF9oZWFkZXI6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+O1xuICBpc0hlYWRlclN0cmluZzogYm9vbGVhbjtcbiAgcHJpdmF0ZSBlbDogSFRNTEVsZW1lbnQgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcbiAgQE91dHB1dCgpIG56QWN0aXZlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXG4gIEBJbnB1dCgpIHNldCBuelNob3dBcnJvdyh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX3Nob3dBcnJvdyA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBnZXQgbnpTaG93QXJyb3coKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3Nob3dBcnJvdztcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW50LWNvbGxhcHNlLW5vLWFycm93JylcbiAgZ2V0IGlzTm9BcnJvdygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gIXRoaXMubnpTaG93QXJyb3c7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpIZWFkZXIodmFsdWU6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+KSB7XG4gICAgdGhpcy5pc0hlYWRlclN0cmluZyA9ICEodmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZik7XG4gICAgdGhpcy5faGVhZGVyID0gdmFsdWU7XG4gIH1cblxuICBnZXQgbnpIZWFkZXIoKTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLl9oZWFkZXI7XG4gIH1cblxuICBASW5wdXQoKVxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmFudC1jb2xsYXBzZS1pdGVtLWRpc2FibGVkJylcbiAgc2V0IG56RGlzYWJsZWQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9kaXNhYmxlZCA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBnZXQgbnpEaXNhYmxlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fZGlzYWJsZWQ7XG4gIH1cblxuICBASW5wdXQoKVxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmFudC1jb2xsYXBzZS1pdGVtLWFjdGl2ZScpXG4gIHNldCBuekFjdGl2ZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2FjdGl2ZSA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBnZXQgbnpBY3RpdmUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2FjdGl2ZTtcbiAgfVxuXG4gIGNsaWNrSGVhZGVyKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5uekRpc2FibGVkKSB7XG4gICAgICB0aGlzLm56Q29sbGFwc2VDb21wb25lbnQuY2xpY2sodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgY29uc3RydWN0b3IoQEhvc3QoKSBwcml2YXRlIG56Q29sbGFwc2VDb21wb25lbnQ6IE56Q29sbGFwc2VDb21wb25lbnQsIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5uekNvbGxhcHNlQ29tcG9uZW50LmFkZENvbGxhcHNlKHRoaXMpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5uekNvbGxhcHNlQ29tcG9uZW50LnJlbW92ZUNvbGxhcHNlKHRoaXMpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE56SWNvbk1vZHVsZSB9IGZyb20gJy4uL2ljb24vbnotaWNvbi5tb2R1bGUnO1xuXG5pbXBvcnQgeyBOekNvbGxhcHNlUGFuZWxDb21wb25lbnQgfSBmcm9tICcuL256LWNvbGxhcHNlLXBhbmVsLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOekNvbGxhcHNlQ29tcG9uZW50IH0gZnJvbSAnLi9uei1jb2xsYXBzZS5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFsgTnpDb2xsYXBzZVBhbmVsQ29tcG9uZW50LCBOekNvbGxhcHNlQ29tcG9uZW50IF0sXG4gIGV4cG9ydHMgICAgIDogWyBOekNvbGxhcHNlUGFuZWxDb21wb25lbnQsIE56Q29sbGFwc2VDb21wb25lbnQgXSxcbiAgaW1wb3J0cyAgICAgOiBbIENvbW1vbk1vZHVsZSwgTnpJY29uTW9kdWxlIF1cbn0pXG5cbmV4cG9ydCBjbGFzcyBOekNvbGxhcHNlTW9kdWxlIHtcbn1cbiIsImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSG9zdExpc3RlbmVyLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgTnpJMThuU2VydmljZSB9IGZyb20gJy4uL2kxOG4vbnotaTE4bi5zZXJ2aWNlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yIDogJ2lucHV0W256VGltZV0nLFxuICBwcm92aWRlcnM6IFtcbiAgICB7IHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLCB1c2VFeGlzdGluZzogTnpUaW1lVmFsdWVBY2Nlc3NvckRpcmVjdGl2ZSwgbXVsdGk6IHRydWUgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIE56VGltZVZhbHVlQWNjZXNzb3JEaXJlY3RpdmUgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG5cbiAgcHJpdmF0ZSBfb25DaGFuZ2U6ICh2YWx1ZTogRGF0ZSkgPT4gdm9pZDtcbiAgcHJpdmF0ZSBfb25Ub3VjaDogKCkgPT4gdm9pZDtcbiAgQElucHV0KCkgbnpUaW1lOiBzdHJpbmc7XG5cbiAgQEhvc3RMaXN0ZW5lcigna2V5dXAnKVxuICBrZXl1cCgpOiB2b2lkIHtcbiAgICB0aGlzLmNoYW5nZWQoKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2JsdXInKVxuICBibHVyKCk6IHZvaWQge1xuICAgIHRoaXMudG91Y2hlZCgpO1xuICB9XG5cbiAgY2hhbmdlZCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fb25DaGFuZ2UpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5pMThuLnBhcnNlVGltZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC52YWx1ZSk7XG4gICAgICB0aGlzLl9vbkNoYW5nZSh2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgdG91Y2hlZCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fb25Ub3VjaCkge1xuICAgICAgdGhpcy5fb25Ub3VjaCgpO1xuICAgIH1cbiAgfVxuXG4gIHNldFJhbmdlKCk6IHZvaWQge1xuICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG4gICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuc2V0U2VsZWN0aW9uUmFuZ2UoMCwgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQudmFsdWUubGVuZ3RoKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaTE4bjogTnpJMThuU2VydmljZSwgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XG4gIH1cblxuICB3cml0ZVZhbHVlKHZhbHVlOiBEYXRlKTogdm9pZCB7XG4gICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQudmFsdWUgPSB0aGlzLmkxOG4uZm9ybWF0RGF0ZSh2YWx1ZSwgdGhpcy5uelRpbWUpO1xuICB9XG5cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKHZhbHVlOiBEYXRlKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5fb25DaGFuZ2UgPSBmbjtcbiAgfVxuXG4gIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiAoKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5fb25Ub3VjaCA9IGZuO1xuICB9XG5cbn1cbiIsImltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGlzTm90TmlsIH0gZnJvbSAnLi4vY29yZS91dGlsL2NoZWNrJztcblxuZXhwb3J0IGNsYXNzIFRpbWVIb2xkZXIge1xuICBwcml2YXRlIF9zZWNvbmRzID0gdW5kZWZpbmVkO1xuICBwcml2YXRlIF9ob3VycyA9IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBfbWludXRlcyA9IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBfZGVmYXVsdE9wZW5WYWx1ZTogRGF0ZSA9IG5ldyBEYXRlKCk7XG4gIHByaXZhdGUgX3ZhbHVlOiBEYXRlO1xuICBwcml2YXRlIF9jaGFuZ2VzID0gbmV3IFN1YmplY3Q8RGF0ZT4oKTtcblxuICBzZXREZWZhdWx0VmFsdWVJZk5pbCgpOiB2b2lkIHtcbiAgICBpZiAoIWlzTm90TmlsKHRoaXMuX3ZhbHVlKSkge1xuICAgICAgdGhpcy5fdmFsdWUgPSBuZXcgRGF0ZSh0aGlzLmRlZmF1bHRPcGVuVmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHNldE1pbnV0ZXModmFsdWU6IG51bWJlciwgZGlzYWJsZWQ6IGJvb2xlYW4pOiB0aGlzIHtcbiAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB0aGlzLnNldERlZmF1bHRWYWx1ZUlmTmlsKCk7XG4gICAgdGhpcy5taW51dGVzID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzZXRIb3Vycyh2YWx1ZTogbnVtYmVyLCBkaXNhYmxlZDogYm9vbGVhbik6IHRoaXMge1xuICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHRoaXMuc2V0RGVmYXVsdFZhbHVlSWZOaWwoKTtcbiAgICB0aGlzLmhvdXJzID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzZXRTZWNvbmRzKHZhbHVlOiBudW1iZXIsIGRpc2FibGVkOiBib29sZWFuKTogdGhpcyB7XG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgdGhpcy5zZXREZWZhdWx0VmFsdWVJZk5pbCgpO1xuICAgIHRoaXMuc2Vjb25kcyA9IHZhbHVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZ2V0IGNoYW5nZXMoKTogT2JzZXJ2YWJsZTxEYXRlPiB7XG4gICAgcmV0dXJuIHRoaXMuX2NoYW5nZXMuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICBnZXQgdmFsdWUoKTogRGF0ZSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgc2V0IHZhbHVlKHZhbHVlOiBEYXRlKSB7XG4gICAgaWYgKHZhbHVlICE9PSB0aGlzLl92YWx1ZSkge1xuICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcbiAgICAgIGlmIChpc05vdE5pbCh0aGlzLl92YWx1ZSkpIHtcbiAgICAgICAgdGhpcy5faG91cnMgPSB0aGlzLl92YWx1ZS5nZXRIb3VycygpO1xuICAgICAgICB0aGlzLl9taW51dGVzID0gdGhpcy5fdmFsdWUuZ2V0TWludXRlcygpO1xuICAgICAgICB0aGlzLl9zZWNvbmRzID0gdGhpcy5fdmFsdWUuZ2V0U2Vjb25kcygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fY2xlYXIoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzZXRWYWx1ZSh2YWx1ZTogRGF0ZSk6IHRoaXMge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGNsZWFyKCk6IHZvaWQge1xuICAgIHRoaXMuX2NsZWFyKCk7XG4gICAgdGhpcy51cGRhdGUoKTtcbiAgfVxuXG4gIGdldCBpc0VtcHR5KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhKGlzTm90TmlsKHRoaXMuX2hvdXJzKSB8fCBpc05vdE5pbCh0aGlzLl9taW51dGVzKSB8fCBpc05vdE5pbCh0aGlzLl9zZWNvbmRzKSk7XG4gIH1cblxuICBwcml2YXRlIF9jbGVhcigpOiB2b2lkIHtcbiAgICB0aGlzLl9ob3VycyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9taW51dGVzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3NlY29uZHMgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pc0VtcHR5KSB7XG4gICAgICB0aGlzLl92YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFpc05vdE5pbCh0aGlzLl9ob3VycykpIHtcbiAgICAgICAgdGhpcy5faG91cnMgPSB0aGlzLmRlZmF1bHRIb3VycztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3ZhbHVlLnNldEhvdXJzKHRoaXMuaG91cnMpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTm90TmlsKHRoaXMuX21pbnV0ZXMpKSB7XG4gICAgICAgIHRoaXMuX21pbnV0ZXMgPSB0aGlzLmRlZmF1bHRNaW51dGVzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fdmFsdWUuc2V0TWludXRlcyh0aGlzLm1pbnV0ZXMpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTm90TmlsKHRoaXMuX3NlY29uZHMpKSB7XG4gICAgICAgIHRoaXMuX3NlY29uZHMgPSB0aGlzLmRlZmF1bHRTZWNvbmRzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fdmFsdWUuc2V0U2Vjb25kcyh0aGlzLnNlY29uZHMpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl92YWx1ZSA9IG5ldyBEYXRlKHRoaXMuX3ZhbHVlKTtcbiAgICB9XG4gICAgdGhpcy5jaGFuZ2VkKCk7XG4gIH1cblxuICBjaGFuZ2VkKCk6IHZvaWQge1xuICAgIHRoaXMuX2NoYW5nZXMubmV4dCh0aGlzLl92YWx1ZSk7XG4gIH1cblxuICBnZXQgaG91cnMoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5faG91cnM7XG4gIH1cblxuICBzZXQgaG91cnModmFsdWU6IG51bWJlcikge1xuICAgIGlmICh2YWx1ZSAhPT0gdGhpcy5faG91cnMpIHtcbiAgICAgIHRoaXMuX2hvdXJzID0gdmFsdWU7XG4gICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBtaW51dGVzKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX21pbnV0ZXM7XG4gIH1cblxuICBzZXQgbWludXRlcyh2YWx1ZTogbnVtYmVyKSB7XG4gICAgaWYgKHZhbHVlICE9PSB0aGlzLl9taW51dGVzKSB7XG4gICAgICB0aGlzLl9taW51dGVzID0gdmFsdWU7XG4gICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBzZWNvbmRzKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3NlY29uZHM7XG4gIH1cblxuICBzZXQgc2Vjb25kcyh2YWx1ZTogbnVtYmVyKSB7XG4gICAgaWYgKHZhbHVlICE9PSB0aGlzLl9zZWNvbmRzKSB7XG4gICAgICB0aGlzLl9zZWNvbmRzID0gdmFsdWU7XG4gICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBkZWZhdWx0T3BlblZhbHVlKCk6IERhdGUge1xuICAgIHJldHVybiB0aGlzLl9kZWZhdWx0T3BlblZhbHVlO1xuICB9XG5cbiAgc2V0IGRlZmF1bHRPcGVuVmFsdWUodmFsdWU6IERhdGUpIHtcbiAgICBpZiAodGhpcy5fZGVmYXVsdE9wZW5WYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuX2RlZmF1bHRPcGVuVmFsdWUgPSB2YWx1ZTtcbiAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgc2V0RGVmYXVsdE9wZW5WYWx1ZSh2YWx1ZTogRGF0ZSk6IHRoaXMge1xuICAgIHRoaXMuZGVmYXVsdE9wZW5WYWx1ZSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZ2V0IGRlZmF1bHRIb3VycygpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9kZWZhdWx0T3BlblZhbHVlLmdldEhvdXJzKCk7XG4gIH1cblxuICBnZXQgZGVmYXVsdE1pbnV0ZXMoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fZGVmYXVsdE9wZW5WYWx1ZS5nZXRNaW51dGVzKCk7XG4gIH1cblxuICBnZXQgZGVmYXVsdFNlY29uZHMoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fZGVmYXVsdE9wZW5WYWx1ZS5nZXRTZWNvbmRzKCk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG59XG4iLCJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5wdXQsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBPdXRwdXQsXG4gIFRlbXBsYXRlUmVmLFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgcmVxQW5pbUZyYW1lIH0gZnJvbSAnLi4vY29yZS9wb2x5ZmlsbC9yZXF1ZXN0LWFuaW1hdGlvbic7XG5pbXBvcnQgeyBOelVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UgYXMgVXBkYXRlQ2xzIH0gZnJvbSAnLi4vY29yZS9zZXJ2aWNlcy91cGRhdGUtaG9zdC1jbGFzcy5zZXJ2aWNlJztcbmltcG9ydCB7IGlzTm90TmlsIH0gZnJvbSAnLi4vY29yZS91dGlsL2NoZWNrJztcbmltcG9ydCB7IE56VGltZVZhbHVlQWNjZXNzb3JEaXJlY3RpdmUgfSBmcm9tICcuL256LXRpbWUtdmFsdWUtYWNjZXNzb3IuZGlyZWN0aXZlJztcbmltcG9ydCB7IFRpbWVIb2xkZXIgfSBmcm9tICcuL3RpbWUtaG9sZGVyJztcblxuZnVuY3Rpb24gbWFrZVJhbmdlKGxlbmd0aDogbnVtYmVyLCBzdGVwOiBudW1iZXIgPSAxKTogbnVtYmVyW10ge1xuICByZXR1cm4gbmV3IEFycmF5KE1hdGguY2VpbChsZW5ndGggLyBzdGVwKSkuZmlsbCgwKS5tYXAoKF8sIGkpID0+IGkgKiBzdGVwKTtcbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yICAgOiAnbnotdGltZS1waWNrZXItcGFuZWwnLFxuICB0ZW1wbGF0ZVVybDogJy4vbnotdGltZS1waWNrZXItcGFuZWwuY29tcG9uZW50Lmh0bWwnLFxuICBwcm92aWRlcnMgIDogW1xuICAgIFVwZGF0ZUNscyxcbiAgICB7IHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLCB1c2VFeGlzdGluZzogTnpUaW1lUGlja2VyUGFuZWxDb21wb25lbnQsIG11bHRpOiB0cnVlIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBOelRpbWVQaWNrZXJQYW5lbENvbXBvbmVudCBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBPbkluaXQsIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgX256SG91clN0ZXAgPSAxO1xuICBwcml2YXRlIF9uek1pbnV0ZVN0ZXAgPSAxO1xuICBwcml2YXRlIF9uelNlY29uZFN0ZXAgPSAxO1xuICBwcml2YXRlIHVuc3Vic2NyaWJlJCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG4gIHByaXZhdGUgb25DaGFuZ2U6ICh2YWx1ZTogRGF0ZSkgPT4gdm9pZDtcbiAgcHJpdmF0ZSBvblRvdWNoOiAoKSA9PiB2b2lkO1xuICBwcml2YXRlIF9mb3JtYXQgPSAnSEg6bW06c3MnO1xuICBwcml2YXRlIF9kaXNhYmxlZEhvdXJzOiAoKSA9PiBudW1iZXJbXTtcbiAgcHJpdmF0ZSBfZGlzYWJsZWRNaW51dGVzOiAoaG91cjogbnVtYmVyKSA9PiBudW1iZXJbXTtcbiAgcHJpdmF0ZSBfZGlzYWJsZWRTZWNvbmRzOiAoaG91cjogbnVtYmVyLCBtaW51dGU6IG51bWJlcikgPT4gbnVtYmVyW107XG4gIHByaXZhdGUgX2RlZmF1bHRPcGVuVmFsdWUgPSBuZXcgRGF0ZSgpO1xuICBwcml2YXRlIF9vcGVuZWQgPSBmYWxzZTtcbiAgcHJpdmF0ZSBfYWxsb3dFbXB0eSA9IHRydWU7XG4gIHByZWZpeENsczogc3RyaW5nID0gJ2FudC10aW1lLXBpY2tlci1wYW5lbCc7XG4gIHRpbWUgPSBuZXcgVGltZUhvbGRlcigpO1xuICBob3VyRW5hYmxlZCA9IHRydWU7XG4gIG1pbnV0ZUVuYWJsZWQgPSB0cnVlO1xuICBzZWNvbmRFbmFibGVkID0gdHJ1ZTtcbiAgZW5hYmxlZENvbHVtbnMgPSAzO1xuICBob3VyUmFuZ2U6IFJlYWRvbmx5QXJyYXk8eyBpbmRleDogbnVtYmVyLCBkaXNhYmxlZDogYm9vbGVhbiB9PjtcbiAgbWludXRlUmFuZ2U6IFJlYWRvbmx5QXJyYXk8eyBpbmRleDogbnVtYmVyLCBkaXNhYmxlZDogYm9vbGVhbiB9PjtcbiAgc2Vjb25kUmFuZ2U6IFJlYWRvbmx5QXJyYXk8eyBpbmRleDogbnVtYmVyLCBkaXNhYmxlZDogYm9vbGVhbiB9PjtcbiAgQFZpZXdDaGlsZChOelRpbWVWYWx1ZUFjY2Vzc29yRGlyZWN0aXZlKSBuelRpbWVWYWx1ZUFjY2Vzc29yRGlyZWN0aXZlOiBOelRpbWVWYWx1ZUFjY2Vzc29yRGlyZWN0aXZlO1xuICBAVmlld0NoaWxkKCdob3VyTGlzdEVsZW1lbnQnKSBob3VyTGlzdEVsZW1lbnQ7XG4gIEBWaWV3Q2hpbGQoJ21pbnV0ZUxpc3RFbGVtZW50JykgbWludXRlTGlzdEVsZW1lbnQ7XG4gIEBWaWV3Q2hpbGQoJ3NlY29uZExpc3RFbGVtZW50Jykgc2Vjb25kTGlzdEVsZW1lbnQ7XG4gIEBJbnB1dCgpIG56SW5EYXRlUGlja2VyOiBib29sZWFuID0gZmFsc2U7IC8vIElmIGluc2lkZSBhIGRhdGUtcGlja2VyLCBtb3JlIGRpZmYgd29ya3MgbmVlZCB0byBiZSBkb25lXG4gIEBJbnB1dCgpIG56QWRkT246IFRlbXBsYXRlUmVmPHZvaWQ+O1xuICBASW5wdXQoKSBuekhpZGVEaXNhYmxlZE9wdGlvbnMgPSBmYWxzZTtcbiAgQElucHV0KCkgbnpDbGVhclRleHQ6IHN0cmluZztcbiAgQElucHV0KCkgbnpQbGFjZUhvbGRlcjogc3RyaW5nO1xuICBAT3V0cHV0KCkgdGltZUNsZWFyID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuXG4gIEBJbnB1dCgpXG4gIHNldCBuekFsbG93RW1wdHkodmFsdWU6IGJvb2xlYW4pIHtcbiAgICBpZiAoaXNOb3ROaWwodmFsdWUpKSB7XG4gICAgICB0aGlzLl9hbGxvd0VtcHR5ID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgZ2V0IG56QWxsb3dFbXB0eSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fYWxsb3dFbXB0eTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBvcGVuZWQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9vcGVuZWQgPSB2YWx1ZTtcbiAgICBpZiAodGhpcy5vcGVuZWQpIHtcbiAgICAgIHRoaXMuaW5pdFBvc2l0aW9uKCk7XG4gICAgICB0aGlzLnNlbGVjdElucHV0UmFuZ2UoKTtcbiAgICB9XG4gIH1cblxuICBnZXQgb3BlbmVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9vcGVuZWQ7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpEZWZhdWx0T3BlblZhbHVlKHZhbHVlOiBEYXRlKSB7XG4gICAgaWYgKGlzTm90TmlsKHZhbHVlKSkge1xuICAgICAgdGhpcy5fZGVmYXVsdE9wZW5WYWx1ZSA9IHZhbHVlO1xuICAgICAgdGhpcy50aW1lLnNldERlZmF1bHRPcGVuVmFsdWUodGhpcy5uekRlZmF1bHRPcGVuVmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBuekRlZmF1bHRPcGVuVmFsdWUoKTogRGF0ZSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZmF1bHRPcGVuVmFsdWU7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpEaXNhYmxlZEhvdXJzKHZhbHVlOiAoKSA9PiBudW1iZXJbXSkge1xuICAgIHRoaXMuX2Rpc2FibGVkSG91cnMgPSB2YWx1ZTtcbiAgICBpZiAodGhpcy5fZGlzYWJsZWRIb3Vycykge1xuICAgICAgdGhpcy5idWlsZEhvdXJzKCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IG56RGlzYWJsZWRIb3VycygpOiAoKSA9PiBudW1iZXJbXSB7XG4gICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVkSG91cnM7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpEaXNhYmxlZE1pbnV0ZXModmFsdWU6IChob3VyOiBudW1iZXIpID0+IG51bWJlcltdKSB7XG4gICAgaWYgKGlzTm90TmlsKHZhbHVlKSkge1xuICAgICAgdGhpcy5fZGlzYWJsZWRNaW51dGVzID0gdmFsdWU7XG4gICAgICB0aGlzLmJ1aWxkTWludXRlcygpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBuekRpc2FibGVkTWludXRlcygpOiAoaG91cjogbnVtYmVyKSA9PiBudW1iZXJbXSB7XG4gICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVkTWludXRlcztcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekRpc2FibGVkU2Vjb25kcyh2YWx1ZTogKGhvdXI6IG51bWJlciwgbWludXRlOiBudW1iZXIpID0+IG51bWJlcltdKSB7XG4gICAgaWYgKGlzTm90TmlsKHZhbHVlKSkge1xuICAgICAgdGhpcy5fZGlzYWJsZWRTZWNvbmRzID0gdmFsdWU7XG4gICAgICB0aGlzLmJ1aWxkU2Vjb25kcygpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBuekRpc2FibGVkU2Vjb25kcygpOiAoaG91cjogbnVtYmVyLCBtaW51dGU6IG51bWJlcikgPT4gbnVtYmVyW10ge1xuICAgIHJldHVybiB0aGlzLl9kaXNhYmxlZFNlY29uZHM7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgZm9ybWF0KHZhbHVlOiBzdHJpbmcpIHtcbiAgICBpZiAoaXNOb3ROaWwodmFsdWUpKSB7XG4gICAgICB0aGlzLl9mb3JtYXQgPSB2YWx1ZTtcbiAgICAgIHRoaXMuZW5hYmxlZENvbHVtbnMgPSAwO1xuICAgICAgY29uc3QgY2hhclNldCA9IG5ldyBTZXQodmFsdWUpO1xuICAgICAgdGhpcy5ob3VyRW5hYmxlZCA9IGNoYXJTZXQuaGFzKCdIJykgfHwgY2hhclNldC5oYXMoJ2gnKTtcbiAgICAgIHRoaXMubWludXRlRW5hYmxlZCA9IGNoYXJTZXQuaGFzKCdtJyk7XG4gICAgICB0aGlzLnNlY29uZEVuYWJsZWQgPSBjaGFyU2V0LmhhcygncycpO1xuICAgICAgaWYgKHRoaXMuaG91ckVuYWJsZWQpIHtcbiAgICAgICAgdGhpcy5lbmFibGVkQ29sdW1ucysrO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubWludXRlRW5hYmxlZCkge1xuICAgICAgICB0aGlzLmVuYWJsZWRDb2x1bW5zKys7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5zZWNvbmRFbmFibGVkKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlZENvbHVtbnMrKztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXQgZm9ybWF0KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2Zvcm1hdDtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekhvdXJTdGVwKHZhbHVlOiBudW1iZXIpIHtcbiAgICBpZiAoaXNOb3ROaWwodmFsdWUpKSB7XG4gICAgICB0aGlzLl9uekhvdXJTdGVwID0gdmFsdWU7XG4gICAgICB0aGlzLmJ1aWxkSG91cnMoKTtcbiAgICB9XG4gIH1cblxuICBnZXQgbnpIb3VyU3RlcCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9uekhvdXJTdGVwO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56TWludXRlU3RlcCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgaWYgKGlzTm90TmlsKHZhbHVlKSkge1xuICAgICAgdGhpcy5fbnpNaW51dGVTdGVwID0gdmFsdWU7XG4gICAgICB0aGlzLmJ1aWxkTWludXRlcygpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBuek1pbnV0ZVN0ZXAoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbnpNaW51dGVTdGVwO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56U2Vjb25kU3RlcCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgaWYgKGlzTm90TmlsKHZhbHVlKSkge1xuICAgICAgdGhpcy5fbnpTZWNvbmRTdGVwID0gdmFsdWU7XG4gICAgICB0aGlzLmJ1aWxkU2Vjb25kcygpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBuelNlY29uZFN0ZXAoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbnpTZWNvbmRTdGVwO1xuICB9XG5cbiAgc2VsZWN0SW5wdXRSYW5nZSgpOiB2b2lkIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmICh0aGlzLm56VGltZVZhbHVlQWNjZXNzb3JEaXJlY3RpdmUpIHtcbiAgICAgICAgdGhpcy5uelRpbWVWYWx1ZUFjY2Vzc29yRGlyZWN0aXZlLnNldFJhbmdlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBidWlsZEhvdXJzKCk6IHZvaWQge1xuICAgIHRoaXMuaG91clJhbmdlID0gbWFrZVJhbmdlKDI0LCB0aGlzLm56SG91clN0ZXApLm1hcChyID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpbmRleCAgIDogcixcbiAgICAgICAgICBkaXNhYmxlZDogdGhpcy5uekRpc2FibGVkSG91cnMgJiYgKHRoaXMubnpEaXNhYmxlZEhvdXJzKCkuaW5kZXhPZihyKSAhPT0gLTEpXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIGJ1aWxkTWludXRlcygpOiB2b2lkIHtcbiAgICB0aGlzLm1pbnV0ZVJhbmdlID0gbWFrZVJhbmdlKDYwLCB0aGlzLm56TWludXRlU3RlcCkubWFwKHIgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGluZGV4ICAgOiByLFxuICAgICAgICAgIGRpc2FibGVkOiB0aGlzLm56RGlzYWJsZWRNaW51dGVzICYmICh0aGlzLm56RGlzYWJsZWRNaW51dGVzKHRoaXMudGltZS5ob3VycykuaW5kZXhPZihyKSAhPT0gLTEpXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIGJ1aWxkU2Vjb25kcygpOiB2b2lkIHtcbiAgICB0aGlzLnNlY29uZFJhbmdlID0gbWFrZVJhbmdlKDYwLCB0aGlzLm56U2Vjb25kU3RlcCkubWFwKHIgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGluZGV4ICAgOiByLFxuICAgICAgICAgIGRpc2FibGVkOiB0aGlzLm56RGlzYWJsZWRTZWNvbmRzICYmICh0aGlzLm56RGlzYWJsZWRTZWNvbmRzKHRoaXMudGltZS5ob3VycywgdGhpcy50aW1lLm1pbnV0ZXMpLmluZGV4T2YocikgIT09IC0xKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICk7XG4gIH1cblxuICBidWlsZFRpbWVzKCk6IHZvaWQge1xuICAgIHRoaXMuYnVpbGRIb3VycygpO1xuICAgIHRoaXMuYnVpbGRNaW51dGVzKCk7XG4gICAgdGhpcy5idWlsZFNlY29uZHMoKTtcbiAgfVxuXG4gIHNlbGVjdEhvdXIoaG91cjogeyBpbmRleDogbnVtYmVyLCBkaXNhYmxlZDogYm9vbGVhbiB9KTogdm9pZCB7XG4gICAgdGhpcy50aW1lLnNldEhvdXJzKGhvdXIuaW5kZXgsIGhvdXIuZGlzYWJsZWQpO1xuICAgIHRoaXMuc2Nyb2xsVG9TZWxlY3RlZCh0aGlzLmhvdXJMaXN0RWxlbWVudC5uYXRpdmVFbGVtZW50LCBob3VyLmluZGV4LCAxMjAsICdob3VyJyk7XG5cbiAgICBpZiAodGhpcy5fZGlzYWJsZWRNaW51dGVzKSB7XG4gICAgICB0aGlzLmJ1aWxkTWludXRlcygpO1xuICAgIH1cbiAgICBpZiAodGhpcy5fZGlzYWJsZWRTZWNvbmRzIHx8IHRoaXMuX2Rpc2FibGVkTWludXRlcykge1xuICAgICAgdGhpcy5idWlsZFNlY29uZHMoKTtcbiAgICB9XG4gIH1cblxuICBzZWxlY3RNaW51dGUobWludXRlOiB7IGluZGV4OiBudW1iZXIsIGRpc2FibGVkOiBib29sZWFuIH0pOiB2b2lkIHtcbiAgICB0aGlzLnRpbWUuc2V0TWludXRlcyhtaW51dGUuaW5kZXgsIG1pbnV0ZS5kaXNhYmxlZCk7XG4gICAgdGhpcy5zY3JvbGxUb1NlbGVjdGVkKHRoaXMubWludXRlTGlzdEVsZW1lbnQubmF0aXZlRWxlbWVudCwgbWludXRlLmluZGV4LCAxMjAsICdtaW51dGUnKTtcbiAgICBpZiAodGhpcy5fZGlzYWJsZWRTZWNvbmRzKSB7XG4gICAgICB0aGlzLmJ1aWxkU2Vjb25kcygpO1xuICAgIH1cbiAgfVxuXG4gIHNlbGVjdFNlY29uZChzZWNvbmQ6IHsgaW5kZXg6IG51bWJlciwgZGlzYWJsZWQ6IGJvb2xlYW4gfSk6IHZvaWQge1xuICAgIHRoaXMudGltZS5zZXRTZWNvbmRzKHNlY29uZC5pbmRleCwgc2Vjb25kLmRpc2FibGVkKTtcbiAgICB0aGlzLnNjcm9sbFRvU2VsZWN0ZWQodGhpcy5zZWNvbmRMaXN0RWxlbWVudC5uYXRpdmVFbGVtZW50LCBzZWNvbmQuaW5kZXgsIDEyMCwgJ3NlY29uZCcpO1xuICB9XG5cbiAgc2Nyb2xsVG9TZWxlY3RlZChpbnN0YW5jZTogSFRNTEVsZW1lbnQsIGluZGV4OiBudW1iZXIsIGR1cmF0aW9uOiBudW1iZXIgPSAwLCB1bml0OiBzdHJpbmcpOiB2b2lkIHtcbiAgICBjb25zdCB0cmFuc0luZGV4ID0gdGhpcy50cmFuc2xhdGVJbmRleChpbmRleCwgdW5pdCk7XG4gICAgY29uc3QgY3VycmVudE9wdGlvbiA9IChpbnN0YW5jZS5jaGlsZHJlblsgMCBdLmNoaWxkcmVuWyB0cmFuc0luZGV4IF0gfHwgaW5zdGFuY2UuY2hpbGRyZW5bIDAgXS5jaGlsZHJlblsgMCBdKSBhcyBIVE1MRWxlbWVudDtcbiAgICB0aGlzLnNjcm9sbFRvKGluc3RhbmNlLCBjdXJyZW50T3B0aW9uLm9mZnNldFRvcCwgZHVyYXRpb24pO1xuICB9XG5cbiAgdHJhbnNsYXRlSW5kZXgoaW5kZXg6IG51bWJlciwgdW5pdDogc3RyaW5nKTogbnVtYmVyIHtcbiAgICBpZiAodW5pdCA9PT0gJ2hvdXInKSB7XG4gICAgICBjb25zdCBkaXNhYmxlZEhvdXJzID0gdGhpcy5uekRpc2FibGVkSG91cnMgJiYgdGhpcy5uekRpc2FibGVkSG91cnMoKTtcbiAgICAgIHJldHVybiB0aGlzLmNhbGNJbmRleChkaXNhYmxlZEhvdXJzLCB0aGlzLmhvdXJSYW5nZS5tYXAoaXRlbSA9PiBpdGVtLmluZGV4KS5pbmRleE9mKGluZGV4KSk7XG4gICAgfSBlbHNlIGlmICh1bml0ID09PSAnbWludXRlJykge1xuICAgICAgY29uc3QgZGlzYWJsZWRNaW51dGVzID0gdGhpcy5uekRpc2FibGVkTWludXRlcyAmJiB0aGlzLm56RGlzYWJsZWRNaW51dGVzKHRoaXMudGltZS5ob3Vycyk7XG4gICAgICByZXR1cm4gdGhpcy5jYWxjSW5kZXgoZGlzYWJsZWRNaW51dGVzLCB0aGlzLm1pbnV0ZVJhbmdlLm1hcChpdGVtID0+IGl0ZW0uaW5kZXgpLmluZGV4T2YoaW5kZXgpKTtcbiAgICB9IGVsc2UgaWYgKHVuaXQgPT09ICdzZWNvbmQnKSB7XG4gICAgICBjb25zdCBkaXNhYmxlZFNlY29uZHMgPSB0aGlzLm56RGlzYWJsZWRTZWNvbmRzICYmIHRoaXMubnpEaXNhYmxlZFNlY29uZHModGhpcy50aW1lLmhvdXJzLCB0aGlzLnRpbWUubWludXRlcyk7XG4gICAgICByZXR1cm4gdGhpcy5jYWxjSW5kZXgoZGlzYWJsZWRTZWNvbmRzLCB0aGlzLnNlY29uZFJhbmdlLm1hcChpdGVtID0+IGl0ZW0uaW5kZXgpLmluZGV4T2YoaW5kZXgpKTtcbiAgICB9XG4gIH1cblxuICBzY3JvbGxUbyhlbGVtZW50OiBIVE1MRWxlbWVudCwgdG86IG51bWJlciwgZHVyYXRpb246IG51bWJlcik6IHZvaWQge1xuICAgIGlmIChkdXJhdGlvbiA8PSAwKSB7XG4gICAgICBlbGVtZW50LnNjcm9sbFRvcCA9IHRvO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBkaWZmZXJlbmNlID0gdG8gLSBlbGVtZW50LnNjcm9sbFRvcDtcbiAgICBjb25zdCBwZXJUaWNrID0gZGlmZmVyZW5jZSAvIGR1cmF0aW9uICogMTA7XG5cbiAgICByZXFBbmltRnJhbWUoKCkgPT4ge1xuICAgICAgZWxlbWVudC5zY3JvbGxUb3AgPSBlbGVtZW50LnNjcm9sbFRvcCArIHBlclRpY2s7XG4gICAgICBpZiAoZWxlbWVudC5zY3JvbGxUb3AgPT09IHRvKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2Nyb2xsVG8oZWxlbWVudCwgdG8sIGR1cmF0aW9uIC0gMTApO1xuICAgIH0pO1xuICB9XG5cbiAgY2FsY0luZGV4KGFycmF5OiBudW1iZXJbXSwgaW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgaWYgKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB0aGlzLm56SGlkZURpc2FibGVkT3B0aW9ucykge1xuICAgICAgcmV0dXJuIGluZGV4IC0gYXJyYXkucmVkdWNlKChwcmUsIHZhbHVlKSA9PiB7XG4gICAgICAgIHJldHVybiBwcmUgKyAodmFsdWUgPCBpbmRleCA/IDEgOiAwKTtcbiAgICAgIH0sIDApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaW5kZXg7XG4gICAgfVxuICB9XG5cbiAgY2xlYXIoKTogdm9pZCB7XG4gICAgdGhpcy50aW1lLmNsZWFyKCk7XG4gICAgdGhpcy50aW1lQ2xlYXIuZW1pdCgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNoYW5nZWQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMub25DaGFuZ2UpIHtcbiAgICAgIHRoaXMub25DaGFuZ2UodGhpcy50aW1lLnZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgdG91Y2hlZCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5vblRvdWNoKSB7XG4gICAgICB0aGlzLm9uVG91Y2goKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHNldENsYXNzTWFwKCk6IHZvaWQge1xuICAgIHRoaXMudXBkYXRlQ2xzLnVwZGF0ZUhvc3RDbGFzcyh0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudCwge1xuICAgICAgW2Ake3RoaXMucHJlZml4Q2xzfWBdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRydWUsXG4gICAgICBbYCR7dGhpcy5wcmVmaXhDbHN9LWNvbHVtbi0ke3RoaXMuZW5hYmxlZENvbHVtbnN9YF0gICAgIDogdGhpcy5uekluRGF0ZVBpY2tlciA/IGZhbHNlIDogdHJ1ZSxcbiAgICAgIFtgJHt0aGlzLnByZWZpeENsc30tbmFycm93YF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmVuYWJsZWRDb2x1bW5zIDwgMyxcbiAgICAgIFtgJHt0aGlzLnByZWZpeENsc30tcGxhY2VtZW50LWJvdHRvbUxlZnRgXSAgICAgICAgICAgICAgOiB0aGlzLm56SW5EYXRlUGlja2VyID8gZmFsc2UgOiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICBpc1NlbGVjdGVkSG91cihob3VyOiB7IGluZGV4OiBudW1iZXIsIGRpc2FibGVkOiBib29sZWFuIH0pOiBib29sZWFuIHtcbiAgICByZXR1cm4gKGhvdXIuaW5kZXggPT09IHRoaXMudGltZS5ob3VycykgfHwgKCFpc05vdE5pbCh0aGlzLnRpbWUuaG91cnMpICYmIChob3VyLmluZGV4ID09PSB0aGlzLnRpbWUuZGVmYXVsdEhvdXJzKSk7XG4gIH1cblxuICBpc1NlbGVjdGVkTWludXRlKG1pbnV0ZTogeyBpbmRleDogbnVtYmVyLCBkaXNhYmxlZDogYm9vbGVhbiB9KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChtaW51dGUuaW5kZXggPT09IHRoaXMudGltZS5taW51dGVzKSB8fCAoIWlzTm90TmlsKHRoaXMudGltZS5taW51dGVzKSAmJiAobWludXRlLmluZGV4ID09PSB0aGlzLnRpbWUuZGVmYXVsdE1pbnV0ZXMpKTtcbiAgfVxuXG4gIGlzU2VsZWN0ZWRTZWNvbmQoc2Vjb25kOiB7IGluZGV4OiBudW1iZXIsIGRpc2FibGVkOiBib29sZWFuIH0pOiBib29sZWFuIHtcbiAgICByZXR1cm4gKHNlY29uZC5pbmRleCA9PT0gdGhpcy50aW1lLnNlY29uZHMpIHx8ICghaXNOb3ROaWwodGhpcy50aW1lLnNlY29uZHMpICYmIChzZWNvbmQuaW5kZXggPT09IHRoaXMudGltZS5kZWZhdWx0U2Vjb25kcykpO1xuICB9XG5cbiAgaW5pdFBvc2l0aW9uKCk6IHZvaWQge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuaG91ckVuYWJsZWQgJiYgdGhpcy5ob3VyTGlzdEVsZW1lbnQpIHtcbiAgICAgICAgaWYgKGlzTm90TmlsKHRoaXMudGltZS5ob3VycykpIHtcbiAgICAgICAgICB0aGlzLnNjcm9sbFRvU2VsZWN0ZWQodGhpcy5ob3VyTGlzdEVsZW1lbnQubmF0aXZlRWxlbWVudCwgdGhpcy50aW1lLmhvdXJzLCAwLCAnaG91cicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc2Nyb2xsVG9TZWxlY3RlZCh0aGlzLmhvdXJMaXN0RWxlbWVudC5uYXRpdmVFbGVtZW50LCB0aGlzLnRpbWUuZGVmYXVsdEhvdXJzLCAwLCAnaG91cicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5taW51dGVFbmFibGVkICYmIHRoaXMubWludXRlTGlzdEVsZW1lbnQpIHtcbiAgICAgICAgaWYgKGlzTm90TmlsKHRoaXMudGltZS5taW51dGVzKSkge1xuICAgICAgICAgIHRoaXMuc2Nyb2xsVG9TZWxlY3RlZCh0aGlzLm1pbnV0ZUxpc3RFbGVtZW50Lm5hdGl2ZUVsZW1lbnQsIHRoaXMudGltZS5taW51dGVzLCAwLCAnbWludXRlJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zY3JvbGxUb1NlbGVjdGVkKHRoaXMubWludXRlTGlzdEVsZW1lbnQubmF0aXZlRWxlbWVudCwgdGhpcy50aW1lLmRlZmF1bHRNaW51dGVzLCAwLCAnbWludXRlJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnNlY29uZEVuYWJsZWQgJiYgdGhpcy5zZWNvbmRMaXN0RWxlbWVudCkge1xuICAgICAgICBpZiAoaXNOb3ROaWwodGhpcy50aW1lLnNlY29uZHMpKSB7XG4gICAgICAgICAgdGhpcy5zY3JvbGxUb1NlbGVjdGVkKHRoaXMuc2Vjb25kTGlzdEVsZW1lbnQubmF0aXZlRWxlbWVudCwgdGhpcy50aW1lLnNlY29uZHMsIDAsICdzZWNvbmQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNjcm9sbFRvU2VsZWN0ZWQodGhpcy5zZWNvbmRMaXN0RWxlbWVudC5uYXRpdmVFbGVtZW50LCB0aGlzLnRpbWUuZGVmYXVsdFNlY29uZHMsIDAsICdzZWNvbmQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmLCBwcml2YXRlIHVwZGF0ZUNsczogVXBkYXRlQ2xzKSB7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5uekluRGF0ZVBpY2tlcikge1xuICAgICAgdGhpcy5wcmVmaXhDbHMgPSAnYW50LWNhbGVuZGFyLXRpbWUtcGlja2VyJztcbiAgICB9XG5cbiAgICB0aGlzLnRpbWUuY2hhbmdlcy5waXBlKHRha2VVbnRpbCh0aGlzLnVuc3Vic2NyaWJlJCkpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLmNoYW5nZWQoKTtcbiAgICAgIHRoaXMudG91Y2hlZCgpO1xuICAgIH0pO1xuICAgIHRoaXMuYnVpbGRUaW1lcygpO1xuICAgIHRoaXMuc2V0Q2xhc3NNYXAoKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMudW5zdWJzY3JpYmUkLm5leHQoKTtcbiAgICB0aGlzLnVuc3Vic2NyaWJlJC5jb21wbGV0ZSgpO1xuICB9XG5cbiAgd3JpdGVWYWx1ZSh2YWx1ZTogRGF0ZSk6IHZvaWQge1xuICAgIHRoaXMudGltZS52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMuYnVpbGRUaW1lcygpO1xuICB9XG5cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKHZhbHVlOiBEYXRlKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5vbkNoYW5nZSA9IGZuO1xuICB9XG5cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0aGlzLm9uVG91Y2ggPSBmbjtcbiAgfVxuXG59XG4iLCJpbXBvcnQge1xuICBhbmltYXRlLFxuICBzdGF0ZSxcbiAgc3R5bGUsXG4gIHRyYW5zaXRpb24sXG4gIHRyaWdnZXJcbn0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBDZGtPdmVybGF5T3JpZ2luLCBDb25uZWN0aW9uUG9zaXRpb25QYWlyLCBPdmVybGF5LCBPdmVybGF5UG9zaXRpb25CdWlsZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LFxuICBPbkluaXQsXG4gIE91dHB1dCxcbiAgUmVuZGVyZXIyLFxuICBUZW1wbGF0ZVJlZixcbiAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgZHJvcERvd25BbmltYXRpb24gfSBmcm9tICcuLi9jb3JlL2FuaW1hdGlvbi9kcm9wZG93bi1hbmltYXRpb25zJztcbmltcG9ydCB7IE56VXBkYXRlSG9zdENsYXNzU2VydmljZSBhcyBVcGRhdGVDbHMgfSBmcm9tICcuLi9jb3JlL3NlcnZpY2VzL3VwZGF0ZS1ob3N0LWNsYXNzLnNlcnZpY2UnO1xuaW1wb3J0IHsgaXNOb3ROaWwgfSBmcm9tICcuLi9jb3JlL3V0aWwvY2hlY2snO1xuaW1wb3J0IHsgdG9Cb29sZWFuIH0gZnJvbSAnLi4vY29yZS91dGlsL2NvbnZlcnQnO1xuaW1wb3J0IHsgTnpJMThuU2VydmljZSBhcyBJMThuIH0gZnJvbSAnLi4vaTE4bi9uei1pMThuLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICA6ICduei10aW1lLXBpY2tlcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9uei10aW1lLXBpY2tlci5jb21wb25lbnQuaHRtbCcsXG4gIGFuaW1hdGlvbnMgOiBbXG4gICAgdHJpZ2dlcignZHJvcERvd25BbmltYXRpb24nLCBbXG4gICAgICBzdGF0ZSgndm9pZCcsIHN0eWxlKHtcbiAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICB9KSksXG4gICAgICBzdGF0ZSgnKicsIHN0eWxlKHtcbiAgICAgICAgb3BhY2l0eSAgICAgICAgOiAxLFxuICAgICAgICB0cmFuc2Zvcm0gICAgICA6ICdzY2FsZVkoMSknLFxuICAgICAgICB0cmFuc2Zvcm1PcmlnaW46ICcwJSAwJSdcbiAgICAgIH0pKSxcbiAgICAgIHRyYW5zaXRpb24oJ3ZvaWQgPT4gKicsIFtcbiAgICAgICAgc3R5bGUoe1xuICAgICAgICAgIG9wYWNpdHkgICAgICAgIDogMCxcbiAgICAgICAgICB0cmFuc2Zvcm0gICAgICA6ICdzY2FsZVkoMC44KScsXG4gICAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnMCUgMCUnXG4gICAgICAgIH0pLFxuICAgICAgICBhbmltYXRlKCcxMDBtcyBjdWJpYy1iZXppZXIoMC43NTUsIDAuMDUsIDAuODU1LCAwLjA2KScpXG4gICAgICBdKSxcbiAgICAgIHRyYW5zaXRpb24oJyogPT4gdm9pZCcsIFtcbiAgICAgICAgYW5pbWF0ZSgnMTAwbXMgY3ViaWMtYmV6aWVyKDAuNzU1LCAwLjA1LCAwLjg1NSwgMC4wNiknLCBzdHlsZSh7XG4gICAgICAgICAgb3BhY2l0eSAgICAgICAgOiAwLFxuICAgICAgICAgIHRyYW5zZm9ybSAgICAgIDogJ3NjYWxlWSgwLjgpJyxcbiAgICAgICAgICB0cmFuc2Zvcm1PcmlnaW46ICcwJSAwJSdcbiAgICAgICAgfSkpXG4gICAgICBdKVxuICAgIF0pXG4gIF0sXG4gIHByb3ZpZGVycyAgOiBbXG4gICAgVXBkYXRlQ2xzLFxuICAgIHsgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsIHVzZUV4aXN0aW5nOiBOelRpbWVQaWNrZXJDb21wb25lbnQsIG11bHRpOiB0cnVlIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBOelRpbWVQaWNrZXJDb21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciwgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcbiAgcHJpdmF0ZSBfZGlzYWJsZWQgPSBmYWxzZTtcbiAgcHJpdmF0ZSBfdmFsdWU6IERhdGUgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBfYWxsb3dFbXB0eSA9IHRydWU7XG4gIHByaXZhdGUgX2F1dG9Gb2N1cyA9IGZhbHNlO1xuICBwcml2YXRlIF9vbkNoYW5nZTogKHZhbHVlOiBEYXRlKSA9PiB2b2lkO1xuICBwcml2YXRlIF9vblRvdWNoZWQ6ICgpID0+IHZvaWQ7XG4gIHByaXZhdGUgX2hpZGVEaXNhYmxlZE9wdGlvbnMgPSBmYWxzZTtcbiAgaXNJbml0ID0gZmFsc2U7XG4gIG9yaWdpbjogQ2RrT3ZlcmxheU9yaWdpbjtcbiAgb3ZlcmxheVBvc2l0aW9uczogQ29ubmVjdGlvblBvc2l0aW9uUGFpcltdID0gWyB7XG4gICAgb3JpZ2luWCA6ICdzdGFydCcsXG4gICAgb3JpZ2luWSA6ICd0b3AnLFxuICAgIG92ZXJsYXlYOiAnZW5kJyxcbiAgICBvdmVybGF5WTogJ3RvcCcsXG4gICAgb2Zmc2V0WCA6IDAsXG4gICAgb2Zmc2V0WSA6IDBcbiAgfSBdO1xuICBAVmlld0NoaWxkKCdpbnB1dEVsZW1lbnQnKSBpbnB1dFJlZjogRWxlbWVudFJlZjtcbiAgQElucHV0KCkgbnpTaXplOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgQElucHV0KCkgbnpIb3VyU3RlcCA9IDE7XG4gIEBJbnB1dCgpIG56TWludXRlU3RlcCA9IDE7XG4gIEBJbnB1dCgpIG56U2Vjb25kU3RlcCA9IDE7XG4gIEBJbnB1dCgpIG56Q2xlYXJUZXh0ID0gJ2NsZWFyJztcbiAgQElucHV0KCkgbnpQb3B1cENsYXNzTmFtZSA9ICcnO1xuICBASW5wdXQoKSBuelBsYWNlSG9sZGVyID0gJyc7XG4gIEBJbnB1dCgpIG56QWRkT246IFRlbXBsYXRlUmVmPHZvaWQ+O1xuICBASW5wdXQoKSBuekRlZmF1bHRPcGVuVmFsdWUgPSBuZXcgRGF0ZSgpO1xuICBASW5wdXQoKSBuekRpc2FibGVkSG91cnM6ICgpID0+IG51bWJlcltdO1xuICBASW5wdXQoKSBuekRpc2FibGVkTWludXRlczogKGhvdXI6IG51bWJlcikgPT4gbnVtYmVyW107XG4gIEBJbnB1dCgpIG56RGlzYWJsZWRTZWNvbmRzOiAoaG91cjogbnVtYmVyLCBtaW51dGU6IG51bWJlcikgPT4gbnVtYmVyW107XG4gIEBJbnB1dCgpIG56Rm9ybWF0ID0gJ0hIOm1tOnNzJztcbiAgQElucHV0KCkgbnpPcGVuID0gZmFsc2U7XG4gIEBPdXRwdXQoKSBuek9wZW5DaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG5cbiAgQElucHV0KClcbiAgc2V0IG56SGlkZURpc2FibGVkT3B0aW9ucyh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2hpZGVEaXNhYmxlZE9wdGlvbnMgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56SGlkZURpc2FibGVkT3B0aW9ucygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5faGlkZURpc2FibGVkT3B0aW9ucztcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekFsbG93RW1wdHkodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9hbGxvd0VtcHR5ID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuekFsbG93RW1wdHkoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2FsbG93RW1wdHk7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpBdXRvRm9jdXModmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9hdXRvRm9jdXMgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICAgIHRoaXMudXBkYXRlQXV0b0ZvY3VzKCk7XG4gIH1cblxuICBnZXQgbnpBdXRvRm9jdXMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2F1dG9Gb2N1cztcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekRpc2FibGVkKHZhbHVlOiBib29sZWFuIHwgc3RyaW5nKSB7XG4gICAgdGhpcy5fZGlzYWJsZWQgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICAgIGNvbnN0IGlucHV0ID0gdGhpcy5pbnB1dFJlZi5uYXRpdmVFbGVtZW50IGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgaWYgKHRoaXMuX2Rpc2FibGVkKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShpbnB1dCwgJ2Rpc2FibGVkJywgJycpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUF0dHJpYnV0ZShpbnB1dCwgJ2Rpc2FibGVkJyk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IG56RGlzYWJsZWQoKTogYm9vbGVhbiB8IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVkO1xuICB9XG5cbiAgc2V0IHZhbHVlKHZhbHVlOiBEYXRlIHwgbnVsbCkge1xuICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG4gICAgaWYgKHRoaXMuX29uQ2hhbmdlKSB7XG4gICAgICB0aGlzLl9vbkNoYW5nZSh0aGlzLnZhbHVlKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX29uVG91Y2hlZCkge1xuICAgICAgdGhpcy5fb25Ub3VjaGVkKCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IHZhbHVlKCk6IERhdGUgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cblxuICBvcGVuKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLm56RGlzYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5uek9wZW4gPSB0cnVlO1xuICAgIHRoaXMubnpPcGVuQ2hhbmdlLmVtaXQodGhpcy5uek9wZW4pO1xuICB9XG5cbiAgY2xvc2UoKTogdm9pZCB7XG4gICAgdGhpcy5uek9wZW4gPSBmYWxzZTtcbiAgICB0aGlzLm56T3BlbkNoYW5nZS5lbWl0KHRoaXMubnpPcGVuKTtcbiAgfVxuXG4gIHVwZGF0ZUF1dG9Gb2N1cygpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pc0luaXQgJiYgIXRoaXMubnpEaXNhYmxlZCkge1xuICAgICAgaWYgKHRoaXMubnpBdXRvRm9jdXMpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5pbnB1dFJlZi5uYXRpdmVFbGVtZW50LCAnYXV0b2ZvY3VzJywgJ2F1dG9mb2N1cycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVBdHRyaWJ1dGUodGhpcy5pbnB1dFJlZi5uYXRpdmVFbGVtZW50LCAnYXV0b2ZvY3VzJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzZXRDbGFzc01hcCgpOiB2b2lkIHtcbiAgICB0aGlzLnVwZGF0ZUNscy51cGRhdGVIb3N0Q2xhc3ModGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsIHtcbiAgICAgIFsgYGFudC10aW1lLXBpY2tlcmAgXSAgICAgICAgICAgICAgIDogdHJ1ZSxcbiAgICAgIFsgYGFudC10aW1lLXBpY2tlci0ke3RoaXMubnpTaXplfWAgXTogaXNOb3ROaWwodGhpcy5uelNpemUpXG4gICAgfSk7XG4gIH1cblxuICBmb2N1cygpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pbnB1dFJlZi5uYXRpdmVFbGVtZW50KSB7XG4gICAgICB0aGlzLmlucHV0UmVmLm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcbiAgICB9XG4gIH1cblxuICBibHVyKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlucHV0UmVmLm5hdGl2ZUVsZW1lbnQpIHtcbiAgICAgIHRoaXMuaW5wdXRSZWYubmF0aXZlRWxlbWVudC5ibHVyKCk7XG4gICAgfVxuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmLFxuICAgICAgICAgICAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgICAgICAgICAgIHByaXZhdGUgb3ZlcmxheTogT3ZlcmxheSxcbiAgICAgICAgICAgICAgcHJpdmF0ZSBwb3NpdGlvbkJ1aWxkZXI6IE92ZXJsYXlQb3NpdGlvbkJ1aWxkZXIsXG4gICAgICAgICAgICAgIHByaXZhdGUgaTE4bjogSTE4bixcbiAgICAgICAgICAgICAgcHJpdmF0ZSB1cGRhdGVDbHM6IFVwZGF0ZUNscykge1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5zZXRDbGFzc01hcCgpO1xuICAgIHRoaXMub3JpZ2luID0gbmV3IENka092ZXJsYXlPcmlnaW4odGhpcy5lbGVtZW50KTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmlzSW5pdCA9IHRydWU7XG4gICAgdGhpcy51cGRhdGVBdXRvRm9jdXMoKTtcbiAgfVxuXG4gIHdyaXRlVmFsdWUodGltZTogRGF0ZSB8IG51bGwpOiB2b2lkIHtcbiAgICB0aGlzLl92YWx1ZSA9IHRpbWU7XG4gIH1cblxuICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAodGltZTogRGF0ZSkgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMuX29uQ2hhbmdlID0gZm47XG4gIH1cblxuICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMuX29uVG91Y2hlZCA9IGZuO1xuICB9XG5cbiAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5uekRpc2FibGVkID0gaXNEaXNhYmxlZDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgT3ZlcmxheU1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBOekkxOG5Nb2R1bGUgfSBmcm9tICcuLi9pMThuL256LWkxOG4ubW9kdWxlJztcbmltcG9ydCB7IE56SWNvbk1vZHVsZSB9IGZyb20gJy4uL2ljb24vbnotaWNvbi5tb2R1bGUnO1xuaW1wb3J0IHsgTnpUaW1lUGlja2VyUGFuZWxDb21wb25lbnQgfSBmcm9tICcuL256LXRpbWUtcGlja2VyLXBhbmVsLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOelRpbWVQaWNrZXJDb21wb25lbnQgfSBmcm9tICcuL256LXRpbWUtcGlja2VyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOelRpbWVWYWx1ZUFjY2Vzc29yRGlyZWN0aXZlIH0gZnJvbSAnLi9uei10aW1lLXZhbHVlLWFjY2Vzc29yLmRpcmVjdGl2ZSc7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9ucyAgIDogW1xuICAgIE56VGltZVBpY2tlckNvbXBvbmVudCxcbiAgICBOelRpbWVQaWNrZXJQYW5lbENvbXBvbmVudCxcbiAgICBOelRpbWVWYWx1ZUFjY2Vzc29yRGlyZWN0aXZlXG4gIF0sXG4gIGV4cG9ydHMgICAgICAgIDogW1xuICAgIE56VGltZVBpY2tlclBhbmVsQ29tcG9uZW50LFxuICAgIE56VGltZVBpY2tlckNvbXBvbmVudFxuICBdLFxuICBpbXBvcnRzICAgICAgICA6IFsgQ29tbW9uTW9kdWxlLCBGb3Jtc01vZHVsZSwgTnpJMThuTW9kdWxlLCBPdmVybGF5TW9kdWxlLCBOekljb25Nb2R1bGUgXSxcbiAgZW50cnlDb21wb25lbnRzOiBbXVxufSlcbmV4cG9ydCBjbGFzcyBOelRpbWVQaWNrZXJNb2R1bGUge1xufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGlzTm9uRW1wdHlTdHJpbmcsIGlzVGVtcGxhdGVSZWYgfSBmcm9tICcuLi8uLi8uLi9jb3JlL3V0aWwvY2hlY2snO1xuaW1wb3J0IHsgTnpDYWxlbmRhckkxOG5JbnRlcmZhY2UgfSBmcm9tICcuLi8uLi8uLi9pMThuL256LWkxOG4uaW50ZXJmYWNlJztcbmltcG9ydCB7IENhbmR5RGF0ZSB9IGZyb20gJy4uL2NhbmR5LWRhdGUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjYWxlbmRhci1mb290ZXInLFxuICB0ZW1wbGF0ZVVybDogJ2NhbGVuZGFyLWZvb3Rlci5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgQ2FsZW5kYXJGb290ZXJDb21wb25lbnQge1xuICBASW5wdXQoKSBsb2NhbGU6IE56Q2FsZW5kYXJJMThuSW50ZXJmYWNlO1xuICBASW5wdXQoKSBzaG93VG9kYXk6IGJvb2xlYW4gPSBmYWxzZTtcbiAgQElucHV0KCkgaGFzVGltZVBpY2tlcjogYm9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoKSBpc1JhbmdlOiBib29sZWFuID0gZmFsc2U7XG5cbiAgQElucHV0KCkgc2hvd1RpbWVQaWNrZXI6IGJvb2xlYW4gPSBmYWxzZTtcbiAgQE91dHB1dCgpIHNob3dUaW1lUGlja2VyQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXG4gIC8vIEBJbnB1dCgpIGRpc2FibGVkOiBib29sZWFuID0gZmFsc2U7XG4gIEBJbnB1dCgpIHRpbWVQaWNrZXJEaXNhYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoKSBva0Rpc2FibGVkOiBib29sZWFuID0gZmFsc2U7XG4gIEBJbnB1dCgpIGRpc2FibGVkRGF0ZTogKGQ6IERhdGUpID0+IGJvb2xlYW47XG4gIEBJbnB1dCgpIGV4dHJhRm9vdGVyOiBUZW1wbGF0ZVJlZjx2b2lkPiB8IHN0cmluZztcbiAgQElucHV0KCkgcmFuZ2VRdWlja1NlbGVjdG9yOiBUZW1wbGF0ZVJlZjx2b2lkPjtcblxuICBAT3V0cHV0KCkgY2xpY2tPayA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcbiAgQE91dHB1dCgpIGNsaWNrVG9kYXkgPSBuZXcgRXZlbnRFbWl0dGVyPENhbmR5RGF0ZT4oKTtcblxuICBwcmVmaXhDbHM6IHN0cmluZyA9ICdhbnQtY2FsZW5kYXInO1xuICBpc1RlbXBsYXRlUmVmID0gaXNUZW1wbGF0ZVJlZjtcbiAgaXNOb25FbXB0eVN0cmluZyA9IGlzTm9uRW1wdHlTdHJpbmc7XG59XG4iLCJcbi8qKlxuICogW1RlbXBvcmFyeV0gR2V0IHRoZSBmaXJzdCBkYXkgb2Ygd2VlayBkZXBlbmQgb24gbG9jYWxlICgwLTYgcmVwcmVzZW50IGFzIFN1bmRheS1TYXR1cmRheSlcbiAqIEBwYXJhbSBsb2NhbGUgTG9jYWxlIGNvZGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpcnN0RGF5T2ZXZWVrKGxvY2FsZT86IHN0cmluZyk6IG51bWJlciB7XG4gIHJldHVybiBsb2NhbGUgJiYgWyAnemgtY24nLCAnemgtdHcnIF0uaW5kZXhPZihsb2NhbGUudG9Mb3dlckNhc2UoKSkgPiAtMSA/IDEgOiAwO1xufVxuIiwiaW1wb3J0IGFkZE1vbnRocyBmcm9tICdkYXRlLWZucy9hZGRfbW9udGhzJztcbmltcG9ydCBhZGRZZWFycyBmcm9tICdkYXRlLWZucy9hZGRfeWVhcnMnO1xuaW1wb3J0IGVuZE9mTW9udGggZnJvbSAnZGF0ZS1mbnMvZW5kX29mX21vbnRoJztcbmltcG9ydCBzZXREYXkgZnJvbSAnZGF0ZS1mbnMvc2V0X2RheSc7XG5pbXBvcnQgc2V0TW9udGggZnJvbSAnZGF0ZS1mbnMvc2V0X21vbnRoJztcbi8vIGltcG9ydCBzZXRZZWFyIGZyb20gJ2RhdGUtZm5zL3NldF95ZWFyJztcbmltcG9ydCB7IGZpcnN0RGF5T2ZXZWVrIH0gZnJvbSAnLi91dGlsJztcblxuLyoqXG4gKiBXcmFwcGluZyBraW5kIEFQSXMgZm9yIGRhdGUgb3BlcmF0aW5nIGFuZCB1bmlmeVxuICogTk9URTogZXZlcnkgbmV3IEFQSSByZXR1cm4gbmV3IENhbmR5RGF0ZSBvYmplY3Qgd2l0aG91dCBzaWRlIGVmZmVjdHMgdG8gdGhlIGZvcm1lciBEYXRlIG9iamVjdFxuICogTk9URTogbW9zdCBBUElzIGFyZSBiYXNlZCBvbiBsb2NhbCB0aW1lIG90aGVyIHRoYW4gY3VzdG9taXplZCBsb2NhbGUgaWQgKHRoaXMgbmVlZHMgdG9iZSBzdXBwb3J0IGluIGZ1dHVyZSlcbiAqIFRPRE86IHN1cHBvcnQgZm9ybWF0KCkgYWdhaW5zdCB0byBhbmd1bGFyJ3MgY29yZSBBUElcbiAqL1xuZXhwb3J0IGNsYXNzIENhbmR5RGF0ZSB7XG4gIG5hdGl2ZURhdGU6IERhdGU7XG4gIC8vIGxvY2FsZTogc3RyaW5nOyAvLyBDdXN0b20gc3BlY2lmaWVkIGxvY2FsZSBJRFxuXG4gIGNvbnN0cnVjdG9yKGRhdGU/OiBEYXRlIHwgc3RyaW5nKSB7XG4gICAgLy8gaWYgKCEodGhpcyBpbnN0YW5jZW9mIENhbmR5RGF0ZSkpIHtcbiAgICAvLyAgIHJldHVybiBuZXcgQ2FuZHlEYXRlKGRhdGUpO1xuICAgIC8vIH1cblxuICAgIGlmIChkYXRlKSB7XG4gICAgICBpZiAoZGF0ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgdGhpcy5uYXRpdmVEYXRlID0gZGF0ZTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRhdGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMubmF0aXZlRGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgaW5wdXQgZGF0ZSB0eXBlIGlzIG5vdCBzdXBwb3J0ZWQgKFwiRGF0ZVwiIGFuZCBcInN0cmluZ1wiIGlzIG5vdyByZWNvbW1lbmRlZCknKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5uYXRpdmVEYXRlID0gbmV3IERhdGUoKTtcbiAgICB9XG4gIH1cblxuICAvLyBnZXRMb2NhbGUoKTogc3RyaW5nIHtcbiAgLy8gICByZXR1cm4gdGhpcy5sb2NhbGU7XG4gIC8vIH1cblxuICAvLyBzZXRMb2NhbGUobG9jYWxlOiBzdHJpbmcpOiBDYW5keURhdGUge1xuICAvLyAgIHRoaXMubG9jYWxlID0gbG9jYWxlO1xuICAvLyAgIHJldHVybiB0aGlzO1xuICAvLyB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgTmF0aXZlIHNob3J0Y3V0c1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICBnZXRZZWFyKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMubmF0aXZlRGF0ZS5nZXRGdWxsWWVhcigpO1xuICB9XG5cbiAgZ2V0TW9udGgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5uYXRpdmVEYXRlLmdldE1vbnRoKCk7XG4gIH1cblxuICBnZXREYXkoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5uYXRpdmVEYXRlLmdldERheSgpO1xuICB9XG5cbiAgZ2V0VGltZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLm5hdGl2ZURhdGUuZ2V0VGltZSgpO1xuICB9XG5cbiAgZ2V0RGF0ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLm5hdGl2ZURhdGUuZ2V0RGF0ZSgpO1xuICB9XG5cbiAgZ2V0SG91cnMoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5uYXRpdmVEYXRlLmdldEhvdXJzKCk7XG4gIH1cblxuICBnZXRNaW51dGVzKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMubmF0aXZlRGF0ZS5nZXRNaW51dGVzKCk7XG4gIH1cblxuICBnZXRTZWNvbmRzKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMubmF0aXZlRGF0ZS5nZXRTZWNvbmRzKCk7XG4gIH1cblxuICBnZXRNaWxsaXNlY29uZHMoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5uYXRpdmVEYXRlLmdldE1pbGxpc2Vjb25kcygpO1xuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgTmV3IGltcGxlbWVudGluZyBBUElzXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIGNsb25lKCk6IENhbmR5RGF0ZSB7XG4gICAgcmV0dXJuIG5ldyBDYW5keURhdGUobmV3IERhdGUodGhpcy5uYXRpdmVEYXRlKSk7XG4gIH1cblxuICBzZXRIbXMoaG91cjogbnVtYmVyLCBtaW51dGU6IG51bWJlciwgc2Vjb25kOiBudW1iZXIpOiBDYW5keURhdGUge1xuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSh0aGlzLm5hdGl2ZURhdGUpO1xuICAgIGRhdGUuc2V0SG91cnMoaG91ciwgbWludXRlLCBzZWNvbmQpO1xuICAgIHJldHVybiBuZXcgQ2FuZHlEYXRlKGRhdGUpO1xuICB9XG5cbiAgc2V0WWVhcih5ZWFyOiBudW1iZXIpOiBDYW5keURhdGUge1xuICAgIC8vIHJldHVybiBuZXcgQ2FuZHlEYXRlKHNldFllYXIodGhpcy5kYXRlLCB5ZWFyKSk7XG4gICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHRoaXMubmF0aXZlRGF0ZSk7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcih5ZWFyKTtcbiAgICByZXR1cm4gbmV3IENhbmR5RGF0ZShkYXRlKTtcbiAgfVxuXG4gIGFkZFllYXJzKGFtb3VudDogbnVtYmVyKTogQ2FuZHlEYXRlIHtcbiAgICByZXR1cm4gbmV3IENhbmR5RGF0ZShhZGRZZWFycyh0aGlzLm5hdGl2ZURhdGUsIGFtb3VudCkpO1xuICB9XG5cbiAgLy8gTk9URTogbW9udGggc3RhcnRzIGZyb20gMFxuICAvLyBOT1RFOiBEb24ndCB1c2UgdGhlIG5hdGl2ZSBBUEkgZm9yIG1vbnRoIG1hbmlwdWxhdGlvbiBhcyBpdCBub3QgcmVzdHJpY3QgdGhlIGRhdGUgd2hlbiBpdCBvdmVyZmxvd3MsIGVnLiAobmV3IERhdGUoJzIwMTgtNy0zMScpKS5zZXRNb250aCgxKSB3aWxsIGJlIGRhdGUgb2YgMjAxOC0zLTAzIGluc3RlYWQgb2YgMjAxOC0yLTI4XG4gIHNldE1vbnRoKG1vbnRoOiBudW1iZXIpOiBDYW5keURhdGUge1xuICAgIC8vIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSh0aGlzLm5hdGl2ZURhdGUpO1xuICAgIC8vIGRhdGUuc2V0TW9udGgobW9udGgpO1xuICAgIC8vIHJldHVybiBuZXcgQ2FuZHlEYXRlKGRhdGUpO1xuICAgIHJldHVybiBuZXcgQ2FuZHlEYXRlKHNldE1vbnRoKHRoaXMubmF0aXZlRGF0ZSwgbW9udGgpKTtcbiAgfVxuXG4gIGFkZE1vbnRocyhhbW91bnQ6IG51bWJlcik6IENhbmR5RGF0ZSB7XG4gICAgcmV0dXJuIG5ldyBDYW5keURhdGUoYWRkTW9udGhzKHRoaXMubmF0aXZlRGF0ZSwgYW1vdW50KSk7XG4gIH1cblxuICBzZXREYXkoZGF5OiBudW1iZXIsIG9wdGlvbnM/OiB7IHdlZWtTdGFydHNPbjogbnVtYmVyIH0pOiBDYW5keURhdGUge1xuICAgIHJldHVybiBuZXcgQ2FuZHlEYXRlKHNldERheSh0aGlzLm5hdGl2ZURhdGUsIGRheSwgb3B0aW9ucykpO1xuICB9XG5cbiAgc2V0RGF0ZShhbW91bnQ6IG51bWJlcik6IENhbmR5RGF0ZSB7XG4gICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHRoaXMubmF0aXZlRGF0ZSk7XG4gICAgZGF0ZS5zZXREYXRlKGFtb3VudCk7XG4gICAgcmV0dXJuIG5ldyBDYW5keURhdGUoZGF0ZSk7XG4gIH1cblxuICBhZGREYXlzKGFtb3VudDogbnVtYmVyKTogQ2FuZHlEYXRlIHtcbiAgICByZXR1cm4gdGhpcy5zZXREYXRlKHRoaXMuZ2V0RGF0ZSgpICsgYW1vdW50KTtcbiAgfVxuXG4gIGVuZE9mKGdyYWluOiAnbW9udGgnKTogQ2FuZHlEYXRlIHtcbiAgICBzd2l0Y2ggKGdyYWluKSB7XG4gICAgICBjYXNlICdtb250aCc6IHJldHVybiBuZXcgQ2FuZHlEYXRlKGVuZE9mTW9udGgodGhpcy5uYXRpdmVEYXRlKSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaXNTYW1lKGRhdGU6IENhbmR5RGF0ZSB8IERhdGUsIGdyYWluOiBDYW5keURhdGVDb21wYXJlR3JhaW4pOiBib29sZWFuIHsgLy8gVE9ETzogUHJlY2lwaXRhdGUgaW50byBhIGZ1bmN0aW9uIFwiY29tcGFyZSgpXCJcbiAgICBpZiAoZGF0ZSkge1xuICAgICAgY29uc3QgbGVmdCA9IHRoaXMudG9OYXRpdmVEYXRlKCk7XG4gICAgICBjb25zdCByaWdodCA9IHRoaXMudG9OYXRpdmVEYXRlKGRhdGUpO1xuICAgICAgc3dpdGNoIChncmFpbikge1xuICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICByZXR1cm4gbGVmdC5nZXRGdWxsWWVhcigpID09PSByaWdodC5nZXRGdWxsWWVhcigpO1xuICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAgcmV0dXJuIGxlZnQuZ2V0RnVsbFllYXIoKSA9PT0gcmlnaHQuZ2V0RnVsbFllYXIoKVxuICAgICAgICAgICAgJiYgbGVmdC5nZXRNb250aCgpID09PSByaWdodC5nZXRNb250aCgpO1xuICAgICAgICBjYXNlICdkYXknOlxuICAgICAgICAgIHJldHVybiBsZWZ0LmdldEZ1bGxZZWFyKCkgPT09IHJpZ2h0LmdldEZ1bGxZZWFyKClcbiAgICAgICAgICAgICYmIGxlZnQuZ2V0TW9udGgoKSA9PT0gcmlnaHQuZ2V0TW9udGgoKVxuICAgICAgICAgICAgJiYgbGVmdC5nZXREYXRlKCkgPT09IHJpZ2h0LmdldERhdGUoKTtcbiAgICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgICAgcmV0dXJuIGxlZnQuZ2V0RnVsbFllYXIoKSA9PT0gcmlnaHQuZ2V0RnVsbFllYXIoKVxuICAgICAgICAgICAgJiYgbGVmdC5nZXRNb250aCgpID09PSByaWdodC5nZXRNb250aCgpXG4gICAgICAgICAgICAmJiBsZWZ0LmdldERhdGUoKSA9PT0gcmlnaHQuZ2V0RGF0ZSgpXG4gICAgICAgICAgICAmJiBsZWZ0LmdldEhvdXJzKCkgPT09IHJpZ2h0LmdldEhvdXJzKCk7XG4gICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgcmV0dXJuIGxlZnQuZ2V0RnVsbFllYXIoKSA9PT0gcmlnaHQuZ2V0RnVsbFllYXIoKVxuICAgICAgICAgICAgJiYgbGVmdC5nZXRNb250aCgpID09PSByaWdodC5nZXRNb250aCgpXG4gICAgICAgICAgICAmJiBsZWZ0LmdldERhdGUoKSA9PT0gcmlnaHQuZ2V0RGF0ZSgpXG4gICAgICAgICAgICAmJiBsZWZ0LmdldEhvdXJzKCkgPT09IHJpZ2h0LmdldEhvdXJzKClcbiAgICAgICAgICAgICYmIGxlZnQuZ2V0TWludXRlcygpID09PSByaWdodC5nZXRNaW51dGVzKCk7XG4gICAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgICAgcmV0dXJuIGxlZnQuZ2V0RnVsbFllYXIoKSA9PT0gcmlnaHQuZ2V0RnVsbFllYXIoKVxuICAgICAgICAgICAgJiYgbGVmdC5nZXRNb250aCgpID09PSByaWdodC5nZXRNb250aCgpXG4gICAgICAgICAgICAmJiBsZWZ0LmdldERhdGUoKSA9PT0gcmlnaHQuZ2V0RGF0ZSgpXG4gICAgICAgICAgICAmJiBsZWZ0LmdldEhvdXJzKCkgPT09IHJpZ2h0LmdldEhvdXJzKClcbiAgICAgICAgICAgICYmIGxlZnQuZ2V0TWludXRlcygpID09PSByaWdodC5nZXRNaW51dGVzKClcbiAgICAgICAgICAgICYmIGxlZnQuZ2V0U2Vjb25kcygpID09PSByaWdodC5nZXRTZWNvbmRzKCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlzQWZ0ZXIoZGF0ZTogQ2FuZHlEYXRlIHwgRGF0ZSwgZ3JhaW46IENhbmR5RGF0ZUNvbXBhcmVHcmFpbik6IGJvb2xlYW4geyAvLyBUT0RPOiBQcmVjaXBpdGF0ZSBpbnRvIGEgZnVuY3Rpb24gXCJjb21wYXJlKClcIlxuICAgIGlmIChkYXRlKSB7XG4gICAgICBjb25zdCBsZWZ0ID0gdGhpcy50b05hdGl2ZURhdGUoKTtcbiAgICAgIGNvbnN0IHJpZ2h0ID0gdGhpcy50b05hdGl2ZURhdGUoZGF0ZSk7XG4gICAgICBzd2l0Y2ggKGdyYWluKSB7XG4gICAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICAgIHJldHVybiBsZWZ0LmdldEZ1bGxZZWFyKCkgPiByaWdodC5nZXRGdWxsWWVhcigpO1xuICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAgcmV0dXJuIChsZWZ0LmdldEZ1bGxZZWFyKCkgPiByaWdodC5nZXRGdWxsWWVhcigpKVxuICAgICAgICAgICAgfHwgKGxlZnQuZ2V0RnVsbFllYXIoKSA9PT0gcmlnaHQuZ2V0RnVsbFllYXIoKSAmJiBsZWZ0LmdldE1vbnRoKCkgPiByaWdodC5nZXRNb250aCgpKTtcbiAgICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgICByZXR1cm4gKGxlZnQuZ2V0RnVsbFllYXIoKSA+IHJpZ2h0LmdldEZ1bGxZZWFyKCkpXG4gICAgICAgICAgICB8fCAobGVmdC5nZXRGdWxsWWVhcigpID09PSByaWdodC5nZXRGdWxsWWVhcigpICYmIGxlZnQuZ2V0TW9udGgoKSA+IHJpZ2h0LmdldE1vbnRoKCkpXG4gICAgICAgICAgICB8fCAobGVmdC5nZXRGdWxsWWVhcigpID09PSByaWdodC5nZXRGdWxsWWVhcigpICYmIGxlZnQuZ2V0TW9udGgoKSA9PT0gcmlnaHQuZ2V0TW9udGgoKSAmJiBsZWZ0LmdldERhdGUoKSA+IHJpZ2h0LmdldERhdGUoKSk7XG4gICAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICAgIHJldHVybiAobGVmdC5nZXRGdWxsWWVhcigpID4gcmlnaHQuZ2V0RnVsbFllYXIoKSlcbiAgICAgICAgICAgIHx8IChsZWZ0LmdldEZ1bGxZZWFyKCkgPT09IHJpZ2h0LmdldEZ1bGxZZWFyKCkgJiYgbGVmdC5nZXRNb250aCgpID4gcmlnaHQuZ2V0TW9udGgoKSlcbiAgICAgICAgICAgIHx8IChsZWZ0LmdldEZ1bGxZZWFyKCkgPT09IHJpZ2h0LmdldEZ1bGxZZWFyKCkgJiYgbGVmdC5nZXRNb250aCgpID09PSByaWdodC5nZXRNb250aCgpICYmIGxlZnQuZ2V0RGF0ZSgpID4gcmlnaHQuZ2V0RGF0ZSgpKVxuICAgICAgICAgICAgfHwgKGxlZnQuZ2V0RnVsbFllYXIoKSA9PT0gcmlnaHQuZ2V0RnVsbFllYXIoKSAmJiBsZWZ0LmdldE1vbnRoKCkgPT09IHJpZ2h0LmdldE1vbnRoKCkgJiYgbGVmdC5nZXREYXRlKCkgPT09IHJpZ2h0LmdldERhdGUoKSAmJiBsZWZ0LmdldEhvdXJzKCkgPiByaWdodC5nZXRIb3VycygpKTtcbiAgICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgICByZXR1cm4gKGxlZnQuZ2V0RnVsbFllYXIoKSA+IHJpZ2h0LmdldEZ1bGxZZWFyKCkpXG4gICAgICAgICAgICB8fCAobGVmdC5nZXRGdWxsWWVhcigpID09PSByaWdodC5nZXRGdWxsWWVhcigpICYmIGxlZnQuZ2V0TW9udGgoKSA+IHJpZ2h0LmdldE1vbnRoKCkpXG4gICAgICAgICAgICB8fCAobGVmdC5nZXRGdWxsWWVhcigpID09PSByaWdodC5nZXRGdWxsWWVhcigpICYmIGxlZnQuZ2V0TW9udGgoKSA9PT0gcmlnaHQuZ2V0TW9udGgoKSAmJiBsZWZ0LmdldERhdGUoKSA+IHJpZ2h0LmdldERhdGUoKSlcbiAgICAgICAgICAgIHx8IChsZWZ0LmdldEZ1bGxZZWFyKCkgPT09IHJpZ2h0LmdldEZ1bGxZZWFyKCkgJiYgbGVmdC5nZXRNb250aCgpID09PSByaWdodC5nZXRNb250aCgpICYmIGxlZnQuZ2V0RGF0ZSgpID09PSByaWdodC5nZXREYXRlKCkgJiYgbGVmdC5nZXRIb3VycygpID4gcmlnaHQuZ2V0SG91cnMoKSlcbiAgICAgICAgICAgIHx8IChsZWZ0LmdldEZ1bGxZZWFyKCkgPT09IHJpZ2h0LmdldEZ1bGxZZWFyKCkgJiYgbGVmdC5nZXRNb250aCgpID09PSByaWdodC5nZXRNb250aCgpICYmIGxlZnQuZ2V0RGF0ZSgpID09PSByaWdodC5nZXREYXRlKCkgJiYgbGVmdC5nZXRIb3VycygpID09PSByaWdodC5nZXRIb3VycygpICYmIGxlZnQuZ2V0TWludXRlcygpID4gcmlnaHQuZ2V0TWludXRlcygpKTtcbiAgICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgICByZXR1cm4gKGxlZnQuZ2V0RnVsbFllYXIoKSA+IHJpZ2h0LmdldEZ1bGxZZWFyKCkpXG4gICAgICAgICAgICB8fCAobGVmdC5nZXRGdWxsWWVhcigpID09PSByaWdodC5nZXRGdWxsWWVhcigpICYmIGxlZnQuZ2V0TW9udGgoKSA+IHJpZ2h0LmdldE1vbnRoKCkpXG4gICAgICAgICAgICB8fCAobGVmdC5nZXRGdWxsWWVhcigpID09PSByaWdodC5nZXRGdWxsWWVhcigpICYmIGxlZnQuZ2V0TW9udGgoKSA9PT0gcmlnaHQuZ2V0TW9udGgoKSAmJiBsZWZ0LmdldERhdGUoKSA+IHJpZ2h0LmdldERhdGUoKSlcbiAgICAgICAgICAgIHx8IChsZWZ0LmdldEZ1bGxZZWFyKCkgPT09IHJpZ2h0LmdldEZ1bGxZZWFyKCkgJiYgbGVmdC5nZXRNb250aCgpID09PSByaWdodC5nZXRNb250aCgpICYmIGxlZnQuZ2V0RGF0ZSgpID09PSByaWdodC5nZXREYXRlKCkgJiYgbGVmdC5nZXRIb3VycygpID4gcmlnaHQuZ2V0SG91cnMoKSlcbiAgICAgICAgICAgIHx8IChsZWZ0LmdldEZ1bGxZZWFyKCkgPT09IHJpZ2h0LmdldEZ1bGxZZWFyKCkgJiYgbGVmdC5nZXRNb250aCgpID09PSByaWdodC5nZXRNb250aCgpICYmIGxlZnQuZ2V0RGF0ZSgpID09PSByaWdodC5nZXREYXRlKCkgJiYgbGVmdC5nZXRIb3VycygpID09PSByaWdodC5nZXRIb3VycygpICYmIGxlZnQuZ2V0TWludXRlcygpID4gcmlnaHQuZ2V0TWludXRlcygpKVxuICAgICAgICAgICAgfHwgKGxlZnQuZ2V0RnVsbFllYXIoKSA9PT0gcmlnaHQuZ2V0RnVsbFllYXIoKSAmJiBsZWZ0LmdldE1vbnRoKCkgPT09IHJpZ2h0LmdldE1vbnRoKCkgJiYgbGVmdC5nZXREYXRlKCkgPT09IHJpZ2h0LmdldERhdGUoKSAmJiBsZWZ0LmdldEhvdXJzKCkgPT09IHJpZ2h0LmdldEhvdXJzKCkgJiYgbGVmdC5nZXRNaW51dGVzKCkgPT09IHJpZ2h0LmdldE1pbnV0ZXMoKSAmJiBsZWZ0LmdldFNlY29uZHMoKSA+IHJpZ2h0LmdldFNlY29uZHMoKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlzQmVmb3JlKGRhdGU6IENhbmR5RGF0ZSB8IERhdGUsIGdyYWluOiBDYW5keURhdGVDb21wYXJlR3JhaW4pOiBib29sZWFuIHsgLy8gVE9ETzogUHJlY2lwaXRhdGUgaW50byBhIGZ1bmN0aW9uIFwiY29tcGFyZSgpXCJcbiAgICBpZiAoZGF0ZSkge1xuICAgICAgY29uc3QgbGVmdCA9IHRoaXMudG9OYXRpdmVEYXRlKCk7XG4gICAgICBjb25zdCByaWdodCA9IHRoaXMudG9OYXRpdmVEYXRlKGRhdGUpO1xuICAgICAgc3dpdGNoIChncmFpbikge1xuICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICByZXR1cm4gbGVmdC5nZXRGdWxsWWVhcigpIDwgcmlnaHQuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgIHJldHVybiAobGVmdC5nZXRGdWxsWWVhcigpIDwgcmlnaHQuZ2V0RnVsbFllYXIoKSlcbiAgICAgICAgICAgIHx8IChsZWZ0LmdldEZ1bGxZZWFyKCkgPT09IHJpZ2h0LmdldEZ1bGxZZWFyKCkgJiYgbGVmdC5nZXRNb250aCgpIDwgcmlnaHQuZ2V0TW9udGgoKSk7XG4gICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgICAgcmV0dXJuIChsZWZ0LmdldEZ1bGxZZWFyKCkgPCByaWdodC5nZXRGdWxsWWVhcigpKVxuICAgICAgICAgICAgfHwgKGxlZnQuZ2V0RnVsbFllYXIoKSA9PT0gcmlnaHQuZ2V0RnVsbFllYXIoKSAmJiBsZWZ0LmdldE1vbnRoKCkgPCByaWdodC5nZXRNb250aCgpKVxuICAgICAgICAgICAgfHwgKGxlZnQuZ2V0RnVsbFllYXIoKSA9PT0gcmlnaHQuZ2V0RnVsbFllYXIoKSAmJiBsZWZ0LmdldE1vbnRoKCkgPT09IHJpZ2h0LmdldE1vbnRoKCkgJiYgbGVmdC5nZXREYXRlKCkgPCByaWdodC5nZXREYXRlKCkpO1xuICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgICByZXR1cm4gKGxlZnQuZ2V0RnVsbFllYXIoKSA8IHJpZ2h0LmdldEZ1bGxZZWFyKCkpXG4gICAgICAgICAgICB8fCAobGVmdC5nZXRGdWxsWWVhcigpID09PSByaWdodC5nZXRGdWxsWWVhcigpICYmIGxlZnQuZ2V0TW9udGgoKSA8IHJpZ2h0LmdldE1vbnRoKCkpXG4gICAgICAgICAgICB8fCAobGVmdC5nZXRGdWxsWWVhcigpID09PSByaWdodC5nZXRGdWxsWWVhcigpICYmIGxlZnQuZ2V0TW9udGgoKSA9PT0gcmlnaHQuZ2V0TW9udGgoKSAmJiBsZWZ0LmdldERhdGUoKSA8IHJpZ2h0LmdldERhdGUoKSlcbiAgICAgICAgICAgIHx8IChsZWZ0LmdldEZ1bGxZZWFyKCkgPT09IHJpZ2h0LmdldEZ1bGxZZWFyKCkgJiYgbGVmdC5nZXRNb250aCgpID09PSByaWdodC5nZXRNb250aCgpICYmIGxlZnQuZ2V0RGF0ZSgpID09PSByaWdodC5nZXREYXRlKCkgJiYgbGVmdC5nZXRIb3VycygpIDwgcmlnaHQuZ2V0SG91cnMoKSk7XG4gICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgcmV0dXJuIChsZWZ0LmdldEZ1bGxZZWFyKCkgPCByaWdodC5nZXRGdWxsWWVhcigpKVxuICAgICAgICAgICAgfHwgKGxlZnQuZ2V0RnVsbFllYXIoKSA9PT0gcmlnaHQuZ2V0RnVsbFllYXIoKSAmJiBsZWZ0LmdldE1vbnRoKCkgPCByaWdodC5nZXRNb250aCgpKVxuICAgICAgICAgICAgfHwgKGxlZnQuZ2V0RnVsbFllYXIoKSA9PT0gcmlnaHQuZ2V0RnVsbFllYXIoKSAmJiBsZWZ0LmdldE1vbnRoKCkgPT09IHJpZ2h0LmdldE1vbnRoKCkgJiYgbGVmdC5nZXREYXRlKCkgPCByaWdodC5nZXREYXRlKCkpXG4gICAgICAgICAgICB8fCAobGVmdC5nZXRGdWxsWWVhcigpID09PSByaWdodC5nZXRGdWxsWWVhcigpICYmIGxlZnQuZ2V0TW9udGgoKSA9PT0gcmlnaHQuZ2V0TW9udGgoKSAmJiBsZWZ0LmdldERhdGUoKSA9PT0gcmlnaHQuZ2V0RGF0ZSgpICYmIGxlZnQuZ2V0SG91cnMoKSA8IHJpZ2h0LmdldEhvdXJzKCkpXG4gICAgICAgICAgICB8fCAobGVmdC5nZXRGdWxsWWVhcigpID09PSByaWdodC5nZXRGdWxsWWVhcigpICYmIGxlZnQuZ2V0TW9udGgoKSA9PT0gcmlnaHQuZ2V0TW9udGgoKSAmJiBsZWZ0LmdldERhdGUoKSA9PT0gcmlnaHQuZ2V0RGF0ZSgpICYmIGxlZnQuZ2V0SG91cnMoKSA9PT0gcmlnaHQuZ2V0SG91cnMoKSAmJiBsZWZ0LmdldE1pbnV0ZXMoKSA8IHJpZ2h0LmdldE1pbnV0ZXMoKSk7XG4gICAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgICAgcmV0dXJuIChsZWZ0LmdldEZ1bGxZZWFyKCkgPCByaWdodC5nZXRGdWxsWWVhcigpKVxuICAgICAgICAgICAgfHwgKGxlZnQuZ2V0RnVsbFllYXIoKSA9PT0gcmlnaHQuZ2V0RnVsbFllYXIoKSAmJiBsZWZ0LmdldE1vbnRoKCkgPCByaWdodC5nZXRNb250aCgpKVxuICAgICAgICAgICAgfHwgKGxlZnQuZ2V0RnVsbFllYXIoKSA9PT0gcmlnaHQuZ2V0RnVsbFllYXIoKSAmJiBsZWZ0LmdldE1vbnRoKCkgPT09IHJpZ2h0LmdldE1vbnRoKCkgJiYgbGVmdC5nZXREYXRlKCkgPCByaWdodC5nZXREYXRlKCkpXG4gICAgICAgICAgICB8fCAobGVmdC5nZXRGdWxsWWVhcigpID09PSByaWdodC5nZXRGdWxsWWVhcigpICYmIGxlZnQuZ2V0TW9udGgoKSA9PT0gcmlnaHQuZ2V0TW9udGgoKSAmJiBsZWZ0LmdldERhdGUoKSA9PT0gcmlnaHQuZ2V0RGF0ZSgpICYmIGxlZnQuZ2V0SG91cnMoKSA8IHJpZ2h0LmdldEhvdXJzKCkpXG4gICAgICAgICAgICB8fCAobGVmdC5nZXRGdWxsWWVhcigpID09PSByaWdodC5nZXRGdWxsWWVhcigpICYmIGxlZnQuZ2V0TW9udGgoKSA9PT0gcmlnaHQuZ2V0TW9udGgoKSAmJiBsZWZ0LmdldERhdGUoKSA9PT0gcmlnaHQuZ2V0RGF0ZSgpICYmIGxlZnQuZ2V0SG91cnMoKSA9PT0gcmlnaHQuZ2V0SG91cnMoKSAmJiBsZWZ0LmdldE1pbnV0ZXMoKSA8IHJpZ2h0LmdldE1pbnV0ZXMoKSlcbiAgICAgICAgICAgIHx8IChsZWZ0LmdldEZ1bGxZZWFyKCkgPT09IHJpZ2h0LmdldEZ1bGxZZWFyKCkgJiYgbGVmdC5nZXRNb250aCgpID09PSByaWdodC5nZXRNb250aCgpICYmIGxlZnQuZ2V0RGF0ZSgpID09PSByaWdodC5nZXREYXRlKCkgJiYgbGVmdC5nZXRIb3VycygpID09PSByaWdodC5nZXRIb3VycygpICYmIGxlZnQuZ2V0TWludXRlcygpID09PSByaWdodC5nZXRNaW51dGVzKCkgJiYgbGVmdC5nZXRTZWNvbmRzKCkgPCByaWdodC5nZXRTZWNvbmRzKCkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBFcXVhbCB0byB0b2RheSBhY2N1cmF0ZSB0byBcImRheVwiXG4gIGlzVG9kYXkoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaXNTYW1lKG5ldyBEYXRlKCksICdkYXknKTtcbiAgfVxuXG4gIGlzSW52YWxpZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gaXNOYU4odGhpcy5uYXRpdmVEYXRlLnZhbHVlT2YoKSk7XG4gIH1cblxuICAvKipcbiAgICogMC02IChTdW5kYXkgdG8gU2F0dXJkYXkpXG4gICAqL1xuICBmaXJzdERheU9mV2Vlayhsb2NhbGU/OiBzdHJpbmcpOiBudW1iZXIge1xuICAgIHJldHVybiBmaXJzdERheU9mV2Vlayhsb2NhbGUpO1xuICB9XG5cbiAgcHJpdmF0ZSB0b05hdGl2ZURhdGUoZGF0ZTogQ2FuZHlEYXRlIHwgRGF0ZSA9IHRoaXMpOiBEYXRlIHtcbiAgICByZXR1cm4gZGF0ZSBpbnN0YW5jZW9mIENhbmR5RGF0ZSA/IGRhdGUubmF0aXZlRGF0ZSA6IGRhdGU7XG4gIH1cblxuICAvLyBjb21wYXJlKGRhdGU6IENhbmR5RGF0ZSwgRGF0ZSwgZ3JhaW46IENhbmR5RGF0ZUNvbXBhcmVHcmFpbiA9ICdtaWxsaXNlY29uZCcpOiBudW1iZXIge1xuICAvLyAgIGNvbnN0IGxldmVsID0geyAnbWlsbGlzZWNvbmQnOiAxLCAnc2Vjb25kJzogMTAwMCwgJ21pbnV0ZSc6IDEwMDAgKiA2MCwgJ2hvdXInOiAxMDAwICogNjAgKiA2MCwgJ2RheSc6IDEwMDAgKiA2MCAqIDYwICogMjQgfVsgZ3JhaW4gXTtcbiAgLy8gICBjb25zdCBsZWZ0ID0gdGhpcy5uYXRpdmVEYXRlLmdldFRpbWUoKSAvIGxldmVsO1xuICAvLyAgIGNvbnN0IHJpZ2h0ID0gKGRhdGUgaW5zdGFuY2VvZiBDYW5keURhdGUgPyBkYXRlLm5hdGl2ZURhdGUgOiBkYXRlKS5nZXRUaW1lKCkgLyBsZXZlbDtcbiAgLy8gICByZXR1cm4gTWF0aC5mbG9vcihsZWZ0KSAtIE1hdGguZmxvb3IocmlnaHQpO1xuICAvLyB9XG59XG5cbmV4cG9ydCB0eXBlIENhbmR5RGF0ZUNvbXBhcmVHcmFpbiA9ICd5ZWFyJyB8ICdtb250aCcgfCAnZGF5JyB8ICdob3VyJyB8ICdtaW51dGUnIHwgJ3NlY29uZCc7XG5cbmV4cG9ydCB0eXBlIENhbmR5RGF0ZUNvbXBhcmVUeXBlID0gJ2VxJyB8ICdndCcgfCAnbHQnO1xuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkNoYW5nZXMsIE9uSW5pdCwgT3V0cHV0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE56Q2FsZW5kYXJJMThuSW50ZXJmYWNlIH0gZnJvbSAnLi4vLi4vLi4vaTE4bi9uei1pMThuLmludGVyZmFjZSc7XG5pbXBvcnQgeyBOekkxOG5TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vaTE4bi9uei1pMThuLnNlcnZpY2UnO1xuaW1wb3J0IHsgUGFuZWxNb2RlIH0gZnJvbSAnLi4vLi4vc3RhbmRhcmQtdHlwZXMnO1xuaW1wb3J0IHsgQ2FuZHlEYXRlIH0gZnJvbSAnLi4vY2FuZHktZGF0ZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2NhbGVuZGFyLWhlYWRlcicsXG4gIHRlbXBsYXRlVXJsOiAnY2FsZW5kYXItaGVhZGVyLmNvbXBvbmVudC5odG1sJ1xufSlcblxuZXhwb3J0IGNsYXNzIENhbGVuZGFySGVhZGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xuICBASW5wdXQoKSBsb2NhbGU6IE56Q2FsZW5kYXJJMThuSW50ZXJmYWNlO1xuICBASW5wdXQoKSBlbmFibGVQcmV2OiBib29sZWFuID0gdHJ1ZTtcbiAgQElucHV0KCkgZW5hYmxlTmV4dDogYm9vbGVhbiA9IHRydWU7XG4gIEBJbnB1dCgpIGRpc2FibGVkTW9udGg6IChkYXRlOiBEYXRlKSA9PiBib29sZWFuO1xuICBASW5wdXQoKSBzaG93VGltZVBpY2tlcjogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIEBJbnB1dCgpIHZhbHVlOiBDYW5keURhdGU7XG4gIEBPdXRwdXQoKSB2YWx1ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Q2FuZHlEYXRlPigpO1xuXG4gIEBJbnB1dCgpIHBhbmVsTW9kZTogUGFuZWxNb2RlO1xuICBAT3V0cHV0KCkgcGFuZWxNb2RlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxQYW5lbE1vZGU+KCk7XG5cbiAgQE91dHB1dCgpIGNob29zZURlY2FkZSA9IG5ldyBFdmVudEVtaXR0ZXI8Q2FuZHlEYXRlPigpO1xuICBAT3V0cHV0KCkgY2hvb3NlWWVhciA9IG5ldyBFdmVudEVtaXR0ZXI8Q2FuZHlEYXRlPigpO1xuICBAT3V0cHV0KCkgY2hvb3NlTW9udGggPSBuZXcgRXZlbnRFbWl0dGVyPENhbmR5RGF0ZT4oKTtcblxuICBwcmVmaXhDbHM6IHN0cmluZyA9ICdhbnQtY2FsZW5kYXInO1xuICB5ZWFyTW9udGhEYXlTZWxlY3RvcnM6IFllYXJNb250aERheVNlbGVjdG9yW107XG5cbiAgcHJpdmF0ZSB5ZWFyVG9Nb250aDogYm9vbGVhbiA9IGZhbHNlOyAvLyBJbmRpY2F0ZSB3aGV0aGVyIHNob3VsZCBjaGFuZ2UgdG8gbW9udGggcGFuZWwgd2hlbiBjdXJyZW50IGlzIHllYXIgcGFuZWwgKGlmIHJlZmVyZXI9bW9udGgsIGl0IHNob3VsZCBzaG93IG1vbnRoIHBhbmVsIHdoZW4gY2hvb3NlZCBhIHllYXIpXG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpMThuOiBOekkxOG5TZXJ2aWNlKSB7IH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMudmFsdWUpIHtcbiAgICAgIHRoaXMudmFsdWUgPSBuZXcgQ2FuZHlEYXRlKCk7IC8vIFNob3cgdG9kYXkgYnkgZGVmYXVsdFxuICAgIH1cbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBpZiAoY2hhbmdlcy52YWx1ZSB8fCBjaGFuZ2VzLnNob3dUaW1lUGlja2VyIHx8IGNoYW5nZXMucGFuZWxNb2RlKSB7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH1cbiAgfVxuXG4gIHByZXZpb3VzWWVhcigpOiB2b2lkIHtcbiAgICB0aGlzLmdvdG9ZZWFyKC0xKTtcbiAgfVxuXG4gIG5leHRZZWFyKCk6IHZvaWQge1xuICAgIHRoaXMuZ290b1llYXIoMSk7XG4gIH1cblxuICBwcmV2aW91c01vbnRoKCk6IHZvaWQge1xuICAgIHRoaXMuZ290b01vbnRoKC0xKTtcbiAgfVxuXG4gIG5leHRNb250aCgpOiB2b2lkIHtcbiAgICB0aGlzLmdvdG9Nb250aCgxKTtcbiAgfVxuXG4gIGNoYW5nZVBhbmVsKG1vZGU6IFBhbmVsTW9kZSwgdmFsdWU/OiBDYW5keURhdGUpOiB2b2lkIHtcbiAgICB0aGlzLnBhbmVsTW9kZUNoYW5nZS5lbWl0KG1vZGUpO1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdGhpcy5jaGFuZ2VWYWx1ZUZyb21JbnNpZGUodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIG9uQ2hvb3NlRGVjYWRlKHZhbHVlOiBDYW5keURhdGUpOiB2b2lkIHtcbiAgICB0aGlzLmNoYW5nZVBhbmVsKCd5ZWFyJywgdmFsdWUpO1xuICAgIHRoaXMuY2hvb3NlRGVjYWRlLmVtaXQodmFsdWUpO1xuICB9XG5cbiAgb25DaG9vc2VZZWFyKHZhbHVlOiBDYW5keURhdGUpOiB2b2lkIHtcbiAgICB0aGlzLmNoYW5nZVBhbmVsKHRoaXMueWVhclRvTW9udGggPyAnbW9udGgnIDogJ2RhdGUnLCB2YWx1ZSk7XG4gICAgdGhpcy55ZWFyVG9Nb250aCA9IGZhbHNlOyAvLyBDbGVhclxuICAgIHRoaXMuY2hvb3NlWWVhci5lbWl0KHZhbHVlKTtcbiAgfVxuXG4gIG9uQ2hvb3NlTW9udGgodmFsdWU6IENhbmR5RGF0ZSk6IHZvaWQge1xuICAgIHRoaXMuY2hhbmdlUGFuZWwoJ2RhdGUnLCB2YWx1ZSk7XG4gICAgdGhpcy55ZWFyVG9Nb250aCA9IGZhbHNlOyAvLyBDbGVhclxuICAgIHRoaXMuY2hvb3NlTW9udGguZW1pdCh2YWx1ZSk7XG4gIH1cblxuICBjaGFuZ2VUb01vbnRoUGFuZWwoKTogdm9pZCB7XG4gICAgdGhpcy5jaGFuZ2VQYW5lbCgnbW9udGgnKTtcbiAgICB0aGlzLnllYXJUb01vbnRoID0gdHJ1ZTtcbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnZhbHVlKSB7XG4gICAgICB0aGlzLnllYXJNb250aERheVNlbGVjdG9ycyA9IHRoaXMuY3JlYXRlWWVhck1vbnRoRGF5U2VsZWN0b3JzKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnb3RvTW9udGgoYW1vdW50OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLmNoYW5nZVZhbHVlRnJvbUluc2lkZSh0aGlzLnZhbHVlLmFkZE1vbnRocyhhbW91bnQpKTtcbiAgfVxuXG4gIHByaXZhdGUgZ290b1llYXIoYW1vdW50OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLmNoYW5nZVZhbHVlRnJvbUluc2lkZSh0aGlzLnZhbHVlLmFkZFllYXJzKGFtb3VudCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBjaGFuZ2VWYWx1ZUZyb21JbnNpZGUodmFsdWU6IENhbmR5RGF0ZSk6IHZvaWQge1xuICAgIGlmICh0aGlzLnZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgdGhpcy52YWx1ZUNoYW5nZS5lbWl0KHRoaXMudmFsdWUpO1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGZvcm1hdERhdGVUaW1lKGxvY2FsZUZvcm1hdDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5pMThuLmZvcm1hdERhdGVDb21wYXRpYmxlKHRoaXMudmFsdWUubmF0aXZlRGF0ZSwgbG9jYWxlRm9ybWF0KTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlWWVhck1vbnRoRGF5U2VsZWN0b3JzKCk6IFllYXJNb250aERheVNlbGVjdG9yW10ge1xuICAgIGxldCB5ZWFyOiBZZWFyTW9udGhEYXlTZWxlY3RvcjtcbiAgICBsZXQgbW9udGg6IFllYXJNb250aERheVNlbGVjdG9yO1xuICAgIGxldCBkYXk6IFllYXJNb250aERheVNlbGVjdG9yO1xuXG4gICAgeWVhciA9IHtcbiAgICAgIGNsYXNzTmFtZTogYCR7dGhpcy5wcmVmaXhDbHN9LXllYXItc2VsZWN0YCxcbiAgICAgIHRpdGxlOiB0aGlzLmxvY2FsZS55ZWFyU2VsZWN0LFxuICAgICAgb25DbGljazogKCkgPT4gdGhpcy5zaG93VGltZVBpY2tlciA/IG51bGwgOiB0aGlzLmNoYW5nZVBhbmVsKCd5ZWFyJyksXG4gICAgICBsYWJlbDogdGhpcy5mb3JtYXREYXRlVGltZSh0aGlzLmxvY2FsZS55ZWFyRm9ybWF0KVxuICAgIH07XG5cbiAgICBtb250aCA9IHtcbiAgICAgIGNsYXNzTmFtZTogYCR7dGhpcy5wcmVmaXhDbHN9LW1vbnRoLXNlbGVjdGAsXG4gICAgICB0aXRsZTogdGhpcy5sb2NhbGUubW9udGhTZWxlY3QsXG4gICAgICBvbkNsaWNrOiAoKSA9PiB0aGlzLnNob3dUaW1lUGlja2VyID8gbnVsbCA6IHRoaXMuY2hhbmdlVG9Nb250aFBhbmVsKCksXG4gICAgICBsYWJlbDogdGhpcy5sb2NhbGUubW9udGhGb3JtYXQgPyB0aGlzLmZvcm1hdERhdGVUaW1lKHRoaXMubG9jYWxlLm1vbnRoRm9ybWF0KSA6IHRoaXMuaTE4bi5mb3JtYXREYXRlKHRoaXMudmFsdWUubmF0aXZlRGF0ZSwgJ01NTScpXG4gICAgfTtcblxuICAgIGlmICh0aGlzLnNob3dUaW1lUGlja2VyKSB7XG4gICAgICBkYXkgPSB7XG4gICAgICAgIGNsYXNzTmFtZTogYCR7dGhpcy5wcmVmaXhDbHN9LWRheS1zZWxlY3RgLFxuICAgICAgICBsYWJlbDogdGhpcy5mb3JtYXREYXRlVGltZSh0aGlzLmxvY2FsZS5kYXlGb3JtYXQpXG4gICAgICB9O1xuICAgIH1cblxuICAgIGxldCByZXN1bHQ6IFllYXJNb250aERheVNlbGVjdG9yW107XG5cbiAgICBpZiAodGhpcy5sb2NhbGUubW9udGhCZWZvcmVZZWFyKSB7XG4gICAgICByZXN1bHQgPSBbIG1vbnRoLCBkYXksIHllYXIgXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gWyB5ZWFyLCBtb250aCwgZGF5IF07XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdC5maWx0ZXIoc2VsZWN0b3IgPT4gISFzZWxlY3Rvcik7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBZZWFyTW9udGhEYXlTZWxlY3RvciB7XG4gIGNsYXNzTmFtZTogc3RyaW5nO1xuICB0aXRsZT86IHN0cmluZztcbiAgbGFiZWw6IHN0cmluZztcbiAgb25DbGljaz8oKTogdm9pZDtcbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgSW5wdXRCb29sZWFuIH0gZnJvbSAnLi4vLi4vLi4vY29yZS91dGlsL2NvbnZlcnQnO1xuaW1wb3J0IHsgTnpDYWxlbmRhckkxOG5JbnRlcmZhY2UgfSBmcm9tICcuLi8uLi8uLi9pMThuL256LWkxOG4uaW50ZXJmYWNlJztcbmltcG9ydCB7IE56STE4blNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9pMThuL256LWkxOG4uc2VydmljZSc7XG5pbXBvcnQgeyBDYW5keURhdGUgfSBmcm9tICcuLi9jYW5keS1kYXRlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY2FsZW5kYXItaW5wdXQnLFxuICB0ZW1wbGF0ZVVybDogJ2NhbGVuZGFyLWlucHV0LmNvbXBvbmVudC5odG1sJ1xufSlcblxuZXhwb3J0IGNsYXNzIENhbGVuZGFySW5wdXRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBASW5wdXQoKSBsb2NhbGU6IE56Q2FsZW5kYXJJMThuSW50ZXJmYWNlO1xuICBASW5wdXQoKSBmb3JtYXQ6IHN0cmluZztcbiAgQElucHV0KCkgcGxhY2Vob2xkZXI6IHN0cmluZztcbiAgQElucHV0KCkgZGlzYWJsZWREYXRlOiAoZDogRGF0ZSkgPT4gYm9vbGVhbjtcblxuICBASW5wdXQoKSB2YWx1ZTogQ2FuZHlEYXRlO1xuICBAT3V0cHV0KCkgdmFsdWVDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPENhbmR5RGF0ZT4oKTtcblxuICBwcmVmaXhDbHM6IHN0cmluZyA9ICdhbnQtY2FsZW5kYXInO1xuICBpbnZhbGlkSW5wdXRDbGFzczogc3RyaW5nID0gJyc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpMThuOiBOekkxOG5TZXJ2aWNlKSB7IH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHsgfVxuXG4gIG9uSW5wdXRLZXl1cChldmVudDogRXZlbnQpOiB2b2lkIHtcbiAgICBjb25zdCBkYXRlID0gdGhpcy5jaGVja1ZhbGlkSW5wdXREYXRlKGV2ZW50KTtcblxuICAgIGlmICghZGF0ZSB8fCAodGhpcy5kaXNhYmxlZERhdGUgJiYgdGhpcy5kaXNhYmxlZERhdGUoZGF0ZS5uYXRpdmVEYXRlKSkpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuXG4gICAgaWYgKCFkYXRlLmlzU2FtZSh0aGlzLnZhbHVlLCAnc2Vjb25kJykpIHsgLy8gTm90IHNhbWUgd2l0aCBvcmlnaW5hbCB2YWx1ZVxuICAgICAgdGhpcy52YWx1ZSA9IGRhdGU7XG4gICAgICB0aGlzLnZhbHVlQ2hhbmdlLmVtaXQodGhpcy52YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgdG9SZWFkYWJsZUlucHV0KHZhbHVlOiBDYW5keURhdGUpOiBzdHJpbmcge1xuICAgIHJldHVybiB2YWx1ZSA/IHRoaXMuaTE4bi5mb3JtYXREYXRlQ29tcGF0aWJsZSh2YWx1ZS5uYXRpdmVEYXRlLCB0aGlzLmZvcm1hdCkgOiAnJztcbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tWYWxpZElucHV0RGF0ZShldmVudDogRXZlbnQpOiBDYW5keURhdGUge1xuICAgIGNvbnN0IGlucHV0ID0gKGV2ZW50LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZTtcbiAgICBjb25zdCBkYXRlID0gbmV3IENhbmR5RGF0ZShpbnB1dCk7XG5cbiAgICB0aGlzLmludmFsaWRJbnB1dENsYXNzID0gJyc7XG4gICAgaWYgKGRhdGUuaXNJbnZhbGlkKCkgfHwgaW5wdXQgIT09IHRoaXMudG9SZWFkYWJsZUlucHV0KGRhdGUpKSB7IC8vIFNob3VsZCBhbHNvIG1hdGNoIHRoZSBpbnB1dCBmb3JtYXQgZXhhY3RseVxuICAgICAgdGhpcy5pbnZhbGlkSW5wdXRDbGFzcyA9IGAke3RoaXMucHJlZml4Q2xzfS1pbnB1dC1pbnZhbGlkYDtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRlO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE56Q2FsZW5kYXJJMThuSW50ZXJmYWNlIH0gZnJvbSAnLi4vLi4vLi4vaTE4bi9uei1pMThuLmludGVyZmFjZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ29rLWJ1dHRvbicsXG4gIHRlbXBsYXRlVXJsOiAnb2stYnV0dG9uLmNvbXBvbmVudC5odG1sJ1xufSlcblxuZXhwb3J0IGNsYXNzIE9rQnV0dG9uQ29tcG9uZW50IHtcbiAgQElucHV0KCkgbG9jYWxlOiBOekNhbGVuZGFySTE4bkludGVyZmFjZTtcbiAgQElucHV0KCkgb2tEaXNhYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xuICBAT3V0cHV0KCkgY2xpY2tPayA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuICBwcmVmaXhDbHM6IHN0cmluZyA9ICdhbnQtY2FsZW5kYXInO1xufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgTnpDYWxlbmRhckkxOG5JbnRlcmZhY2UgfSBmcm9tICcuLi8uLi8uLi9pMThuL256LWkxOG4uaW50ZXJmYWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGltZS1waWNrZXItYnV0dG9uJyxcbiAgdGVtcGxhdGVVcmw6ICd0aW1lLXBpY2tlci1idXR0b24uY29tcG9uZW50Lmh0bWwnXG59KVxuXG5leHBvcnQgY2xhc3MgVGltZVBpY2tlckJ1dHRvbkNvbXBvbmVudCB7XG4gIEBJbnB1dCgpIGxvY2FsZTogTnpDYWxlbmRhckkxOG5JbnRlcmZhY2U7XG4gIEBJbnB1dCgpIHRpbWVQaWNrZXJEaXNhYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIEBJbnB1dCgpIHNob3dUaW1lUGlja2VyOiBib29sZWFuID0gZmFsc2U7XG4gIEBPdXRwdXQoKSBzaG93VGltZVBpY2tlckNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuICBwcmVmaXhDbHM6IHN0cmluZyA9ICdhbnQtY2FsZW5kYXInO1xuXG4gIG9uQ2xpY2soKTogdm9pZCB7XG4gICAgdGhpcy5zaG93VGltZVBpY2tlciA9ICF0aGlzLnNob3dUaW1lUGlja2VyO1xuICAgIHRoaXMuc2hvd1RpbWVQaWNrZXJDaGFuZ2UuZW1pdCh0aGlzLnNob3dUaW1lUGlja2VyKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkNoYW5nZXMsIE9uSW5pdCwgT3V0cHV0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE56Q2FsZW5kYXJJMThuSW50ZXJmYWNlIH0gZnJvbSAnLi4vLi4vLi4vaTE4bi9uei1pMThuLmludGVyZmFjZSc7XG5pbXBvcnQgeyBOekkxOG5TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vaTE4bi9uei1pMThuLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2FuZHlEYXRlIH0gZnJvbSAnLi4vY2FuZHktZGF0ZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RvZGF5LWJ1dHRvbicsXG4gIHRlbXBsYXRlVXJsOiAndG9kYXktYnV0dG9uLmNvbXBvbmVudC5odG1sJ1xufSlcblxuZXhwb3J0IGNsYXNzIFRvZGF5QnV0dG9uQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xuICBASW5wdXQoKSBsb2NhbGU6IE56Q2FsZW5kYXJJMThuSW50ZXJmYWNlO1xuICBASW5wdXQoKSBoYXNUaW1lUGlja2VyOiBib29sZWFuID0gZmFsc2U7XG4gIC8vIEBJbnB1dCgpIGRpc2FibGVkOiBib29sZWFuID0gZmFsc2U7XG4gIEBJbnB1dCgpIGRpc2FibGVkRGF0ZTogKGQ6IERhdGUpID0+IGJvb2xlYW47XG5cbiAgQE91dHB1dCgpIGNsaWNrVG9kYXkgPSBuZXcgRXZlbnRFbWl0dGVyPENhbmR5RGF0ZT4oKTtcblxuICBwcmVmaXhDbHM6IHN0cmluZyA9ICdhbnQtY2FsZW5kYXInO1xuICBpc0Rpc2FibGVkOiBib29sZWFuID0gZmFsc2U7XG4gIGdldCB0aXRsZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmkxOG4uZm9ybWF0RGF0ZSh0aGlzLm5vdy5uYXRpdmVEYXRlLCAnbG9uZ0RhdGUnKTtcbiAgfVxuXG4gIHByaXZhdGUgbm93OiBDYW5keURhdGUgPSBuZXcgQ2FuZHlEYXRlKCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpMThuOiBOekkxOG5TZXJ2aWNlKSB7IH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHsgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBpZiAoY2hhbmdlcy5kaXNhYmxlZERhdGUpIHtcbiAgICAgIHRoaXMuaXNEaXNhYmxlZCA9IHRoaXMuZGlzYWJsZWREYXRlICYmIHRoaXMuZGlzYWJsZWREYXRlKHRoaXMubm93Lm5hdGl2ZURhdGUpO1xuICAgIH1cbiAgfVxuXG4gIG9uQ2xpY2tUb2RheSgpOiB2b2lkIHtcbiAgICB0aGlzLmNsaWNrVG9kYXkuZW1pdCh0aGlzLm5vdy5jbG9uZSgpKTsgLy8gVG8gcHJldmVudCB0aGUgXCJub3dcIiBiZWluZyBtb2RpZmllZCBmcm9tIG91dHNpZGUsIHdlIHVzZSBjbG9uZVxuICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uQ2hhbmdlcywgT25Jbml0LCBPdXRwdXQsIFNpbXBsZUNoYW5nZXMsIFRlbXBsYXRlUmVmLCBTaW1wbGVDaGFuZ2UgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgRnVuY3Rpb25Qcm9wIH0gZnJvbSAnLi4vLi4vLi4vY29yZS90eXBlcy9jb21tb24td3JhcCc7XG5pbXBvcnQgeyBpc05vbkVtcHR5U3RyaW5nLCBpc1RlbXBsYXRlUmVmIH0gZnJvbSAnLi4vLi4vLi4vY29yZS91dGlsL2NoZWNrJztcbmltcG9ydCB7IHZhbHVlRnVuY3Rpb25Qcm9wIH0gZnJvbSAnLi4vLi4vLi4vY29yZS91dGlsL2NvbnZlcnQnO1xuaW1wb3J0IHsgTnpJMThuU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL2kxOG4vbnotaTE4bi5zZXJ2aWNlJztcbmltcG9ydCB7IENhbmR5RGF0ZSB9IGZyb20gJy4uL2NhbmR5LWRhdGUnO1xuXG5jb25zdCBEQVRFX1JPV19OVU0gPSA2O1xuY29uc3QgREFURV9DT0xfTlVNID0gNztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZGF0ZS10YWJsZScsXG4gIHRlbXBsYXRlVXJsOiAnZGF0ZS10YWJsZS5jb21wb25lbnQuaHRtbCdcbn0pXG5cbmV4cG9ydCBjbGFzcyBEYXRlVGFibGVDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgpIHNlbGVjdGVkVmFsdWU6IENhbmR5RGF0ZVtdOyAvLyBSYW5nZSBPTkxZXG4gIEBJbnB1dCgpIGhvdmVyVmFsdWU6IENhbmR5RGF0ZVtdOyAvLyBSYW5nZSBPTkxZXG5cbiAgQElucHV0KCkgdmFsdWU6IENhbmR5RGF0ZTtcbiAgQE91dHB1dCgpIHZhbHVlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxDYW5keURhdGU+KCk7XG5cbiAgQElucHV0KCkgc2hvd1dlZWs6IGJvb2xlYW47XG4gIEBJbnB1dCgpIGRpc2FibGVkRGF0ZTogKGQ6IERhdGUpID0+IGJvb2xlYW47XG4gIEBJbnB1dCgpIGRhdGVSZW5kZXI6IEZ1bmN0aW9uUHJvcDxUZW1wbGF0ZVJlZjxEYXRlPiB8IHN0cmluZz47IC8vIEN1c3RvbWl6ZSBkYXRlIGNvbnRlbnQgd2hpbGUgcmVuZGVyaW5nXG5cbiAgQE91dHB1dCgpIGRheUhvdmVyID0gbmV3IEV2ZW50RW1pdHRlcjxDYW5keURhdGU+KCk7IC8vIEVtaXR0ZWQgd2hlbiBob3ZlciBvbiBhIGRheSBieSBtb3VzZSBlbnRlclxuXG4gIHByZWZpeENsczogc3RyaW5nID0gJ2FudC1jYWxlbmRhcic7XG4gIGhlYWRXZWVrRGF5czogV2Vla0RheUxhYmVsW107XG4gIHdlZWtSb3dzOiBXZWVrUm93W107XG5cbiAgaXNUZW1wbGF0ZVJlZiA9IGlzVGVtcGxhdGVSZWY7XG4gIGlzTm9uRW1wdHlTdHJpbmcgPSBpc05vbkVtcHR5U3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaTE4bjogTnpJMThuU2VydmljZSkgeyB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7IH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNEYXRlUmVhbENoYW5nZShjaGFuZ2VzLnZhbHVlKSB8fFxuICAgICAgICB0aGlzLmlzRGF0ZVJlYWxDaGFuZ2UoY2hhbmdlcy5zZWxlY3RlZFZhbHVlKSB8fFxuICAgICAgICB0aGlzLmlzRGF0ZVJlYWxDaGFuZ2UoY2hhbmdlcy5ob3ZlclZhbHVlKSkge1xuXG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaXNEYXRlUmVhbENoYW5nZShjaGFuZ2U6IFNpbXBsZUNoYW5nZSk6IGJvb2xlYW4ge1xuICAgIGlmIChjaGFuZ2UpIHtcbiAgICAgIGNvbnN0IHByZXZpb3VzVmFsdWU6IENhbmR5RGF0ZSB8IENhbmR5RGF0ZVtdID0gY2hhbmdlLnByZXZpb3VzVmFsdWU7XG4gICAgICBjb25zdCBjdXJyZW50VmFsdWU6IENhbmR5RGF0ZSB8IENhbmR5RGF0ZVtdID0gY2hhbmdlLmN1cnJlbnRWYWx1ZTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGN1cnJlbnRWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuICFBcnJheS5pc0FycmF5KHByZXZpb3VzVmFsdWUpIHx8XG4gICAgICAgICAgY3VycmVudFZhbHVlLmxlbmd0aCAhPT0gcHJldmlvdXNWYWx1ZS5sZW5ndGggfHxcbiAgICAgICAgICBjdXJyZW50VmFsdWUuc29tZSgodmFsdWUsIGluZGV4KSA9PiAhdGhpcy5pc1NhbWVEYXRlKHByZXZpb3VzVmFsdWVbaW5kZXhdLCB2YWx1ZSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLmlzU2FtZURhdGUocHJldmlvdXNWYWx1ZSBhcyBDYW5keURhdGUsIGN1cnJlbnRWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHByaXZhdGUgaXNTYW1lRGF0ZShsZWZ0OiBDYW5keURhdGUsIHJpZ2h0OiBDYW5keURhdGUpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKCFsZWZ0ICYmICFyaWdodCkgfHwgKGxlZnQgJiYgcmlnaHQgJiYgcmlnaHQuaXNTYW1lKGxlZnQsICdkYXknKSk7XG4gIH1cblxuICBwcml2YXRlIHJlbmRlcigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy52YWx1ZSkge1xuICAgICAgdGhpcy5oZWFkV2Vla0RheXMgPSB0aGlzLm1ha2VIZWFkV2Vla0RheXMoKTtcbiAgICAgIHRoaXMud2Vla1Jvd3MgPSB0aGlzLm1ha2VXZWVrUm93cygpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY2hhbmdlVmFsdWVGcm9tSW5zaWRlKHZhbHVlOiBDYW5keURhdGUpOiB2b2lkIHtcbiAgICBpZiAodGhpcy52YWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgIC8vIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgIC8vIHRoaXMudmFsdWVDaGFuZ2UuZW1pdCh0aGlzLnZhbHVlKTtcbiAgICAgIC8vIHRoaXMucmVuZGVyKCk7XG4gICAgICB0aGlzLnZhbHVlQ2hhbmdlLmVtaXQodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgbWFrZUhlYWRXZWVrRGF5cygpOiBXZWVrRGF5TGFiZWxbXSB7XG4gICAgY29uc3Qgd2Vla0RheXM6IFdlZWtEYXlMYWJlbFtdID0gW107XG4gICAgY29uc3QgZmlyc3REYXlPZldlZWsgPSB0aGlzLmdldEZpcnN0RGF5T2ZXZWVrKCk7XG4gICAgZm9yIChsZXQgY29sSW5kZXggPSAwOyBjb2xJbmRleCA8IERBVEVfQ09MX05VTTsgY29sSW5kZXggKyspIHtcbiAgICAgIGNvbnN0IGRheSA9IChmaXJzdERheU9mV2VlayArIGNvbEluZGV4KSAlIERBVEVfQ09MX05VTTtcbiAgICAgIGNvbnN0IHRlbXBEYXRlID0gdGhpcy52YWx1ZS5zZXREYXkoZGF5KTtcbiAgICAgIHdlZWtEYXlzWyBjb2xJbmRleCBdID0ge1xuICAgICAgICBzaG9ydDogdGhpcy5pMThuLmZvcm1hdERhdGUodGVtcERhdGUubmF0aXZlRGF0ZSwgJ0UnKSwgLy8gZWcuIFR1ZVxuICAgICAgICB2ZXJ5U2hvcnQ6IHRoaXMuaTE4bi5mb3JtYXREYXRlKHRlbXBEYXRlLm5hdGl2ZURhdGUsIHRoaXMuZ2V0VmVyeVNob3J0V2Vla0Zvcm1hdCgpKSAvLyBlZy4gVHVcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB3ZWVrRGF5cztcbiAgfVxuXG4gIHByaXZhdGUgZ2V0VmVyeVNob3J0V2Vla0Zvcm1hdCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmkxOG4uZ2V0TG9jYWxlSWQoKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ3poJykgPT09IDAgPyAnRUVFRUUnIDogJ0VFRUVFRSc7IC8vIFVzZSBleHRyZW1lIHNob3J0IGZvciBjaGluZXNlXG4gIH1cblxuICBwcml2YXRlIG1ha2VXZWVrUm93cygpOiBXZWVrUm93W10ge1xuICAgIC8vIGxldCBqdXN0UmVuZGVyZWQgPSB0cnVlO1xuICAgIGNvbnN0IHdlZWtSb3dzOiBXZWVrUm93W10gPSBbXTtcbiAgICBjb25zdCBmaXJzdERheU9mV2VlayA9IHRoaXMuZ2V0Rmlyc3REYXlPZldlZWsoKTtcbiAgICBjb25zdCBmaXJzdERhdGVPZk1vbnRoID0gdGhpcy52YWx1ZS5zZXREYXRlKDEpO1xuICAgIC8vIGNvbnN0IGZpcnN0RGF0ZVRvU2hvdyA9IGZpcnN0RGF0ZU9mTW9udGguc2V0RGF5KGZpcnN0RGF5T2ZXZWVrLCB7IHdlZWtTdGFydHNPbjogZmlyc3REYXlPZldlZWsgfSk7XG4gICAgY29uc3QgZmlyc3REYXRlT2Zmc2V0ID0gKGZpcnN0RGF0ZU9mTW9udGguZ2V0RGF5KCkgKyA3IC0gZmlyc3REYXlPZldlZWspICUgNztcbiAgICBjb25zdCBmaXJzdERhdGVUb1Nob3cgPSBmaXJzdERhdGVPZk1vbnRoLmFkZERheXMoMCAtIGZpcnN0RGF0ZU9mZnNldCk7XG5cbiAgICBsZXQgaW5jcmVhc2VkID0gMDtcbiAgICBmb3IgKGxldCByb3dJbmRleCA9IDA7IHJvd0luZGV4IDwgREFURV9ST1dfTlVNOyByb3dJbmRleCArKykge1xuICAgICAgY29uc3Qgd2VlazogV2Vla1JvdyA9IHdlZWtSb3dzW3Jvd0luZGV4XSA9IHtcbiAgICAgICAgaXNBY3RpdmU6IGZhbHNlLFxuICAgICAgICBpc0N1cnJlbnQ6IGZhbHNlLFxuICAgICAgICBkYXRlQ2VsbHM6IFtdXG4gICAgICB9O1xuXG4gICAgICBmb3IgKGxldCBjb2xJbmRleCA9IDA7IGNvbEluZGV4IDwgREFURV9DT0xfTlVNOyBjb2xJbmRleCArKykge1xuICAgICAgICBjb25zdCBjdXJyZW50ID0gZmlyc3REYXRlVG9TaG93LmFkZERheXMoaW5jcmVhc2VkICsrKTtcbiAgICAgICAgY29uc3QgaXNCZWZvcmVNb250aFllYXIgPSB0aGlzLmlzQmVmb3JlTW9udGhZZWFyKGN1cnJlbnQsIHRoaXMudmFsdWUpO1xuICAgICAgICBjb25zdCBpc0FmdGVyTW9udGhZZWFyID0gdGhpcy5pc0FmdGVyTW9udGhZZWFyKGN1cnJlbnQsIHRoaXMudmFsdWUpO1xuICAgICAgICBjb25zdCBjZWxsOiBEYXRlQ2VsbCA9IHtcbiAgICAgICAgICB2YWx1ZTogY3VycmVudCxcbiAgICAgICAgICBpc1NlbGVjdGVkOiBmYWxzZSxcbiAgICAgICAgICBpc0Rpc2FibGVkOiBmYWxzZSxcbiAgICAgICAgICBpc1RvZGF5OiBmYWxzZSxcbiAgICAgICAgICB0aXRsZTogdGhpcy5nZXREYXRlVGl0bGUoY3VycmVudCksXG4gICAgICAgICAgY3VzdG9tQ29udGVudDogdmFsdWVGdW5jdGlvblByb3AodGhpcy5kYXRlUmVuZGVyLCBjdXJyZW50KSwgLy8gQ3VzdG9taXplZCBjb250ZW50XG4gICAgICAgICAgY29udGVudDogYCR7Y3VycmVudC5nZXREYXRlKCl9YCxcbiAgICAgICAgICBvbkNsaWNrOiAoKSA9PiB0aGlzLmNoYW5nZVZhbHVlRnJvbUluc2lkZShjdXJyZW50KSxcbiAgICAgICAgICBvbk1vdXNlRW50ZXI6ICgpID0+IHRoaXMuZGF5SG92ZXIuZW1pdChjZWxsLnZhbHVlKVxuICAgICAgICAgIC8vIG9uTW91c2VFbnRlcjogKCkgPT4ge1xuICAgICAgICAgICAgLy8gaWYgKCFqdXN0UmVuZGVyZWQpIHsgLy8gW0hhY2tdIFRvIHByZXZlbnQgdGhlIGltbWVkaWF0ZWx5IFwibW91c2VlbnRlclwiIGV2ZW50IHdoZW4gaXQganVzdCByZW5kZXJlZCwgb3IgdGhlIFwiaG92ZXJWYWx1ZVwiIG1heSBhbHdheXMgc2FpZCBhcyBjaGFuZ2VkXG4gICAgICAgICAgICAgIC8vIHRoaXMuZGF5SG92ZXIuZW1pdChjZWxsLnZhbHVlKTtcbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIC8vIGp1c3RSZW5kZXJlZCA9IGZhbHNlO1xuICAgICAgICAgIC8vIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodGhpcy5zaG93V2VlayAmJiAhd2Vlay53ZWVrTnVtKSB7XG4gICAgICAgICAgd2Vlay53ZWVrTnVtID0gdGhpcy5nZXRXZWVrTnVtKGN1cnJlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGN1cnJlbnQuaXNUb2RheSgpKSB7XG4gICAgICAgICAgY2VsbC5pc1RvZGF5ID0gdHJ1ZTtcbiAgICAgICAgICB3ZWVrLmlzQ3VycmVudCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnNlbGVjdGVkVmFsdWUpICYmICFpc0JlZm9yZU1vbnRoWWVhciAmJiAhaXNBZnRlck1vbnRoWWVhcikgeyAvLyBSYW5nZSBzZWxlY3Rpb25zXG4gICAgICAgICAgY29uc3QgcmFuZ2VWYWx1ZSA9IHRoaXMuaG92ZXJWYWx1ZSAmJiB0aGlzLmhvdmVyVmFsdWUubGVuZ3RoID8gdGhpcy5ob3ZlclZhbHVlIDogdGhpcy5zZWxlY3RlZFZhbHVlO1xuICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gcmFuZ2VWYWx1ZVswXTtcbiAgICAgICAgICBjb25zdCBlbmQgPSByYW5nZVZhbHVlWzFdO1xuICAgICAgICAgIGlmIChzdGFydCkge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnQuaXNTYW1lKHN0YXJ0LCAnZGF5JykpIHtcbiAgICAgICAgICAgICAgY2VsbC5pc1NlbGVjdGVkU3RhcnREYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgY2VsbC5pc1NlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgd2Vlay5pc0FjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZW5kKSB7XG4gICAgICAgICAgICAgIGlmIChjdXJyZW50LmlzU2FtZShlbmQsICdkYXknKSkge1xuICAgICAgICAgICAgICAgIGNlbGwuaXNTZWxlY3RlZEVuZERhdGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNlbGwuaXNTZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgd2Vlay5pc0FjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudC5pc0FmdGVyKHN0YXJ0LCAnZGF5JykgJiYgY3VycmVudC5pc0JlZm9yZShlbmQsICdkYXknKSkge1xuICAgICAgICAgICAgICAgIGNlbGwuaXNJblJhbmdlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50LmlzU2FtZSh0aGlzLnZhbHVlLCAnZGF5JykpIHtcbiAgICAgICAgICBjZWxsLmlzU2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgIHdlZWsuaXNBY3RpdmUgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWREYXRlICYmIHRoaXMuZGlzYWJsZWREYXRlKGN1cnJlbnQubmF0aXZlRGF0ZSkpIHtcbiAgICAgICAgICBjZWxsLmlzRGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY2VsbC5jbGFzc01hcCA9IHtcbiAgICAgICAgICBbYCR7dGhpcy5wcmVmaXhDbHN9LWNlbGxgXTogdHJ1ZSxcbiAgICAgICAgICAvLyBbYCR7dGhpcy5wcmVmaXhDbHN9LXNlbGVjdGVkLWRhdGVgXTogZmFsc2UsXG4gICAgICAgICAgW2Ake3RoaXMucHJlZml4Q2xzfS10b2RheWBdOiBjZWxsLmlzVG9kYXksXG4gICAgICAgICAgW2Ake3RoaXMucHJlZml4Q2xzfS1sYXN0LW1vbnRoLWNlbGxgXTogaXNCZWZvcmVNb250aFllYXIsXG4gICAgICAgICAgW2Ake3RoaXMucHJlZml4Q2xzfS1uZXh0LW1vbnRoLWJ0bi1kYXlgXTogaXNBZnRlck1vbnRoWWVhcixcbiAgICAgICAgICBbYCR7dGhpcy5wcmVmaXhDbHN9LXNlbGVjdGVkLWRheWBdOiBjZWxsLmlzU2VsZWN0ZWQsXG4gICAgICAgICAgW2Ake3RoaXMucHJlZml4Q2xzfS1kaXNhYmxlZC1jZWxsYF06IGNlbGwuaXNEaXNhYmxlZCxcbiAgICAgICAgICBbYCR7dGhpcy5wcmVmaXhDbHN9LXNlbGVjdGVkLXN0YXJ0LWRhdGVgXTogISFjZWxsLmlzU2VsZWN0ZWRTdGFydERhdGUsXG4gICAgICAgICAgW2Ake3RoaXMucHJlZml4Q2xzfS1zZWxlY3RlZC1lbmQtZGF0ZWBdOiAhIWNlbGwuaXNTZWxlY3RlZEVuZERhdGUsXG4gICAgICAgICAgW2Ake3RoaXMucHJlZml4Q2xzfS1pbi1yYW5nZS1jZWxsYF06ICEhY2VsbC5pc0luUmFuZ2VcbiAgICAgICAgfTtcblxuICAgICAgICB3ZWVrLmRhdGVDZWxscy5wdXNoKGNlbGwpO1xuICAgICAgfVxuXG4gICAgICB3ZWVrLmNsYXNzTWFwID0ge1xuICAgICAgICBbYCR7dGhpcy5wcmVmaXhDbHN9LWN1cnJlbnQtd2Vla2BdOiB3ZWVrLmlzQ3VycmVudCxcbiAgICAgICAgW2Ake3RoaXMucHJlZml4Q2xzfS1hY3RpdmUtd2Vla2BdOiB3ZWVrLmlzQWN0aXZlXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gd2Vla1Jvd3M7XG4gIH1cblxuICBwcml2YXRlIGdldEZpcnN0RGF5T2ZXZWVrKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWUuZmlyc3REYXlPZldlZWsodGhpcy5pMThuLmdldExvY2FsZUlkKCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXREYXRlVGl0bGUoZGF0ZTogQ2FuZHlEYXRlKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5pMThuLmZvcm1hdERhdGUoZGF0ZS5uYXRpdmVEYXRlLCAnbG9uZ0RhdGUnKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0V2Vla051bShkYXRlOiBDYW5keURhdGUpOiBudW1iZXIge1xuICAgIHJldHVybiArdGhpcy5pMThuLmZvcm1hdERhdGUoZGF0ZS5uYXRpdmVEYXRlLCAndycpO1xuICB9XG5cbiAgcHJpdmF0ZSBpc0JlZm9yZU1vbnRoWWVhcihjdXJyZW50OiBDYW5keURhdGUsIHRhcmdldDogQ2FuZHlEYXRlKTogYm9vbGVhbiB7XG4gICAgaWYgKGN1cnJlbnQuZ2V0WWVhcigpIDwgdGFyZ2V0LmdldFllYXIoKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBjdXJyZW50LmdldFllYXIoKSA9PT0gdGFyZ2V0LmdldFllYXIoKSAmJiBjdXJyZW50LmdldE1vbnRoKCkgPCB0YXJnZXQuZ2V0TW9udGgoKTtcbiAgfVxuXG4gIHByaXZhdGUgaXNBZnRlck1vbnRoWWVhcihjdXJyZW50OiBDYW5keURhdGUsIHRhcmdldDogQ2FuZHlEYXRlKTogYm9vbGVhbiB7XG4gICAgaWYgKGN1cnJlbnQuZ2V0WWVhcigpID4gdGFyZ2V0LmdldFllYXIoKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBjdXJyZW50LmdldFllYXIoKSA9PT0gdGFyZ2V0LmdldFllYXIoKSAmJiBjdXJyZW50LmdldE1vbnRoKCkgPiB0YXJnZXQuZ2V0TW9udGgoKTtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdlZWtEYXlMYWJlbCB7XG4gIHNob3J0OiBzdHJpbmc7XG4gIHZlcnlTaG9ydDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERhdGVDZWxsIHtcbiAgdmFsdWU6IENhbmR5RGF0ZTtcbiAgdGl0bGU6IHN0cmluZztcbiAgY3VzdG9tQ29udGVudDogVGVtcGxhdGVSZWY8RGF0ZT4gfCBzdHJpbmc7XG4gIGNvbnRlbnQ6IHN0cmluZztcbiAgaXNTZWxlY3RlZD86IGJvb2xlYW47XG4gIGlzVG9kYXk/OiBib29sZWFuO1xuICBpc0Rpc2FibGVkPzogYm9vbGVhbjtcbiAgaXNTZWxlY3RlZFN0YXJ0RGF0ZT86IGJvb2xlYW47XG4gIGlzU2VsZWN0ZWRFbmREYXRlPzogYm9vbGVhbjtcbiAgaXNJblJhbmdlPzogYm9vbGVhbjtcbiAgY2xhc3NNYXA/OiBvYmplY3Q7XG4gIG9uQ2xpY2soZGF0ZTogQ2FuZHlEYXRlKTogdm9pZDtcbiAgb25Nb3VzZUVudGVyKCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2Vla1JvdyB7XG4gIGlzQ3VycmVudD86IGJvb2xlYW47IC8vIElzIHRoZSB3ZWVrIHRoYXQgdG9kYXkgc3RheXMgaW5cbiAgaXNBY3RpdmU/OiBib29sZWFuOyAvLyBJcyB0aGUgd2VlayB0aGF0IGN1cnJlbnQgc2V0dGluZyBkYXRlIHN0YXlzIGluXG4gIHdlZWtOdW0/OiBudW1iZXI7XG4gIGNsYXNzTWFwPzogb2JqZWN0O1xuICBkYXRlQ2VsbHM6IERhdGVDZWxsW107XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uQ2hhbmdlcywgT3V0cHV0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE56Q2FsZW5kYXJJMThuSW50ZXJmYWNlIH0gZnJvbSAnLi4vLi4vLi4vaTE4bi9uei1pMThuLmludGVyZmFjZSc7XG5pbXBvcnQgeyBDYW5keURhdGUgfSBmcm9tICcuLi9jYW5keS1kYXRlJztcblxuY29uc3QgTUFYX1JPVyA9IDQ7XG5jb25zdCBNQVhfQ09MID0gMztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZGVjYWRlLXBhbmVsJyxcbiAgdGVtcGxhdGVVcmw6ICdkZWNhZGUtcGFuZWwuY29tcG9uZW50Lmh0bWwnXG59KVxuXG5leHBvcnQgY2xhc3MgRGVjYWRlUGFuZWxDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICBASW5wdXQoKSBsb2NhbGU6IE56Q2FsZW5kYXJJMThuSW50ZXJmYWNlO1xuXG4gIEBJbnB1dCgpIHZhbHVlOiBDYW5keURhdGU7XG4gIEBPdXRwdXQoKSB2YWx1ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Q2FuZHlEYXRlPigpO1xuXG4gIGdldCBzdGFydFllYXIoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gcGFyc2VJbnQoYCR7dGhpcy52YWx1ZS5nZXRZZWFyKCkgLyAxMDB9YCwgMTApICogMTAwO1xuICB9XG4gIGdldCBlbmRZZWFyKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuc3RhcnRZZWFyICsgOTk7XG4gIH1cblxuICBwcmVmaXhDbHM6IHN0cmluZyA9ICdhbnQtY2FsZW5kYXItZGVjYWRlLXBhbmVsJztcbiAgcGFuZWxEZWNhZGVzOiBQYW5lbERlY2FkZURhdGFbXVtdO1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKGNoYW5nZXMudmFsdWUpIHtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfVxuICB9XG5cbiAgcHJldmlvdXNDZW50dXJ5KCk6IHZvaWQge1xuICAgIHRoaXMuZ290b1llYXIoLTEwMCk7XG4gIH1cblxuICBuZXh0Q2VudHVyeSgpOiB2b2lkIHtcbiAgICB0aGlzLmdvdG9ZZWFyKDEwMCk7XG4gIH1cblxuICB0cmFja1BhbmVsRGVjYWRlKGluZGV4OiBudW1iZXIsIGRlY2FkZURhdGE6IFBhbmVsRGVjYWRlRGF0YSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGRlY2FkZURhdGEuY29udGVudDtcbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnZhbHVlKSB7XG4gICAgICB0aGlzLnBhbmVsRGVjYWRlcyA9IHRoaXMubWFrZVBhbmVsRGVjYWRlcygpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFJlLXJlbmRlciBwYW5lbCBjb250ZW50IGJ5IHRoZSBoZWFkZXIncyBidXR0b25zIChOT1RFOiBEbyBub3QgdHJ5IHRvIHRyaWdnZXIgZmluYWwgdmFsdWUgY2hhbmdlKVxuICBwcml2YXRlIGdvdG9ZZWFyKGFtb3VudDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy52YWx1ZSA9IHRoaXMudmFsdWUuYWRkWWVhcnMoYW1vdW50KTtcbiAgICAvLyB0aGlzLnZhbHVlQ2hhbmdlLmVtaXQodGhpcy52YWx1ZSk7IC8vIERvIG5vdCB0cnkgdG8gdHJpZ2dlciBmaW5hbCB2YWx1ZSBjaGFuZ2VcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgcHJpdmF0ZSBjaG9vc2VEZWNhZGUoc3RhcnRZZWFyOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy52YWx1ZS5zZXRZZWFyKHN0YXJ0WWVhcik7XG4gICAgdGhpcy52YWx1ZUNoYW5nZS5lbWl0KHRoaXMudmFsdWUpO1xuICB9XG5cbiAgcHJpdmF0ZSBtYWtlUGFuZWxEZWNhZGVzKCk6IFBhbmVsRGVjYWRlRGF0YVtdW10ge1xuICAgIGNvbnN0IGRlY2FkZXM6IFBhbmVsRGVjYWRlRGF0YVtdW10gPSBbXTtcbiAgICBjb25zdCBjdXJyZW50WWVhciA9IHRoaXMudmFsdWUuZ2V0WWVhcigpO1xuICAgIGNvbnN0IHN0YXJ0WWVhciA9IHRoaXMuc3RhcnRZZWFyO1xuICAgIGNvbnN0IGVuZFllYXIgPSB0aGlzLmVuZFllYXI7XG4gICAgY29uc3QgcHJldmlvdXNZZWFyID0gc3RhcnRZZWFyIC0gMTA7XG5cbiAgICBsZXQgaW5kZXggPSAwO1xuICAgIGZvciAobGV0IHJvd0luZGV4ID0gMDsgcm93SW5kZXggPCBNQVhfUk9XOyByb3dJbmRleCArKykge1xuICAgICAgZGVjYWRlc1tyb3dJbmRleF0gPSBbXTtcbiAgICAgIGZvciAobGV0IGNvbEluZGV4ID0gMDsgY29sSW5kZXggPCBNQVhfQ09MOyBjb2xJbmRleCArKykge1xuICAgICAgICBjb25zdCBzdGFydCA9IHByZXZpb3VzWWVhciArIGluZGV4ICogMTA7XG4gICAgICAgIGNvbnN0IGVuZCA9IHByZXZpb3VzWWVhciArIGluZGV4ICogMTAgKyA5O1xuICAgICAgICBjb25zdCBjb250ZW50ID0gYCR7c3RhcnR9LSR7ZW5kfWA7XG5cbiAgICAgICAgY29uc3QgY2VsbCA9IGRlY2FkZXNbcm93SW5kZXhdW2NvbEluZGV4XSA9IHtcbiAgICAgICAgICBjb250ZW50LFxuICAgICAgICAgIHRpdGxlOiBjb250ZW50LFxuICAgICAgICAgIGlzQ3VycmVudDogY3VycmVudFllYXIgPj0gc3RhcnQgJiYgY3VycmVudFllYXIgPD0gZW5kLFxuICAgICAgICAgIGlzTG93ZXJUaGFuU3RhcnQ6IGVuZCA8IHN0YXJ0WWVhcixcbiAgICAgICAgICBpc0JpZ2dlclRoYW5FbmQ6IHN0YXJ0ID4gZW5kWWVhcixcbiAgICAgICAgICBjbGFzc01hcDogbnVsbCxcbiAgICAgICAgICBvbkNsaWNrOiBudWxsXG4gICAgICAgIH07XG5cbiAgICAgICAgY2VsbC5jbGFzc01hcCA9IHtcbiAgICAgICAgICBbYCR7dGhpcy5wcmVmaXhDbHN9LWNlbGxgXTogdHJ1ZSxcbiAgICAgICAgICBbYCR7dGhpcy5wcmVmaXhDbHN9LXNlbGVjdGVkLWNlbGxgXTogY2VsbC5pc0N1cnJlbnQsXG4gICAgICAgICAgW2Ake3RoaXMucHJlZml4Q2xzfS1sYXN0LWNlbnR1cnktY2VsbGBdOiBjZWxsLmlzTG93ZXJUaGFuU3RhcnQsXG4gICAgICAgICAgW2Ake3RoaXMucHJlZml4Q2xzfS1uZXh0LWNlbnR1cnktY2VsbGBdOiBjZWxsLmlzQmlnZ2VyVGhhbkVuZFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChjZWxsLmlzTG93ZXJUaGFuU3RhcnQpIHtcbiAgICAgICAgICBjZWxsLm9uQ2xpY2sgPSAoKSA9PiB0aGlzLnByZXZpb3VzQ2VudHVyeSgpO1xuICAgICAgICB9IGVsc2UgaWYgKGNlbGwuaXNCaWdnZXJUaGFuRW5kKSB7XG4gICAgICAgICAgY2VsbC5vbkNsaWNrID0gKCkgPT4gdGhpcy5uZXh0Q2VudHVyeSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNlbGwub25DbGljayA9ICgpID0+IHRoaXMuY2hvb3NlRGVjYWRlKHN0YXJ0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGluZGV4ICsrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGVjYWRlcztcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBhbmVsRGVjYWRlRGF0YSB7XG4gIGNvbnRlbnQ6IHN0cmluZztcbiAgdGl0bGU6IHN0cmluZztcbiAgaXNDdXJyZW50OiBib29sZWFuO1xuICBpc0xvd2VyVGhhblN0YXJ0OiBib29sZWFuO1xuICBpc0JpZ2dlclRoYW5FbmQ6IGJvb2xlYW47XG4gIGNsYXNzTWFwOiBvYmplY3Q7XG4gIG9uQ2xpY2soKTogdm9pZDtcbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgTnpDYWxlbmRhckkxOG5JbnRlcmZhY2UgfSBmcm9tICcuLi8uLi8uLi9pMThuL256LWkxOG4uaW50ZXJmYWNlJztcbmltcG9ydCB7IENhbmR5RGF0ZSB9IGZyb20gJy4uL2NhbmR5LWRhdGUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtb250aC1wYW5lbCcsXG4gIHRlbXBsYXRlVXJsOiAnbW9udGgtcGFuZWwuY29tcG9uZW50Lmh0bWwnXG59KVxuXG5leHBvcnQgY2xhc3MgTW9udGhQYW5lbENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBJbnB1dCgpIGxvY2FsZTogTnpDYWxlbmRhckkxOG5JbnRlcmZhY2U7XG5cbiAgQElucHV0KCkgdmFsdWU6IENhbmR5RGF0ZTtcbiAgQE91dHB1dCgpIHZhbHVlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxDYW5keURhdGU+KCk7XG5cbiAgQElucHV0KCkgZGlzYWJsZWREYXRlOiAoZGF0ZTogRGF0ZSkgPT4gYm9vbGVhbjtcblxuICBAT3V0cHV0KCkgeWVhclBhbmVsU2hvdyA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuICBwcmVmaXhDbHM6IHN0cmluZyA9ICdhbnQtY2FsZW5kYXItbW9udGgtcGFuZWwnO1xuXG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7IH1cblxuICBwcmV2aW91c1llYXIoKTogdm9pZCB7XG4gICAgdGhpcy5nb3RvWWVhcigtMSk7XG4gIH1cblxuICBuZXh0WWVhcigpOiB2b2lkIHtcbiAgICB0aGlzLmdvdG9ZZWFyKDEpO1xuICB9XG5cbiAgLy8gUmUtcmVuZGVyIHBhbmVsIGNvbnRlbnQgYnkgdGhlIGhlYWRlcidzIGJ1dHRvbnMgKE5PVEU6IERvIG5vdCB0cnkgdG8gdHJpZ2dlciBmaW5hbCB2YWx1ZSBjaGFuZ2UpXG4gIHByaXZhdGUgZ290b1llYXIoYW1vdW50OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy52YWx1ZS5hZGRZZWFycyhhbW91bnQpO1xuICAgIC8vIHRoaXMudmFsdWVDaGFuZ2UuZW1pdCh0aGlzLnZhbHVlKTsgLy8gRG8gbm90IHRyeSB0byB0cmlnZ2VyIGZpbmFsIHZhbHVlIGNoYW5nZVxuICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uQ2hhbmdlcywgT25Jbml0LCBPdXRwdXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgTnpJMThuU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL2kxOG4vbnotaTE4bi5zZXJ2aWNlJztcbmltcG9ydCB7IENhbmR5RGF0ZSB9IGZyb20gJy4uL2NhbmR5LWRhdGUnO1xuXG5jb25zdCBNQVhfUk9XID0gNDtcbmNvbnN0IE1BWF9DT0wgPSAzO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtb250aC10YWJsZScsXG4gIHRlbXBsYXRlVXJsOiAnbW9udGgtdGFibGUuY29tcG9uZW50Lmh0bWwnXG59KVxuXG5leHBvcnQgY2xhc3MgTW9udGhUYWJsZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgdmFsdWU6IENhbmR5RGF0ZTtcbiAgQE91dHB1dCgpIHZhbHVlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxDYW5keURhdGU+KCk7XG5cbiAgQElucHV0KCkgZGlzYWJsZWREYXRlOiAoZGF0ZTogRGF0ZSkgPT4gYm9vbGVhbjtcblxuICBwcmVmaXhDbHM6IHN0cmluZyA9ICdhbnQtY2FsZW5kYXItbW9udGgtcGFuZWwnO1xuICBwYW5lbE1vbnRoczogUGFuZWxNb250aERhdGFbXVtdO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaTE4bjogTnpJMThuU2VydmljZSkgeyB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7IH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKGNoYW5nZXMudmFsdWUgfHwgY2hhbmdlcy5kaXNhYmxlZERhdGUpIHtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfVxuICB9XG5cbiAgdHJhY2tQYW5lbE1vbnRoKGluZGV4OiBudW1iZXIsIG1vbnRoRGF0YTogUGFuZWxNb250aERhdGEpOiBudW1iZXIge1xuICAgIHJldHVybiBtb250aERhdGEubW9udGg7XG4gIH1cblxuICBwcml2YXRlIHJlbmRlcigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy52YWx1ZSkge1xuICAgICAgdGhpcy5wYW5lbE1vbnRocyA9IHRoaXMubWFrZVBhbmVsTW9udGhzKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBtYWtlUGFuZWxNb250aHMoKTogUGFuZWxNb250aERhdGFbXVtdIHtcbiAgICBjb25zdCBtb250aHM6IFBhbmVsTW9udGhEYXRhW11bXSA9IFtdO1xuICAgIGNvbnN0IGN1cnJlbnRNb250aCA9IHRoaXMudmFsdWUuZ2V0TW9udGgoKTtcbiAgICBjb25zdCB0b2RheSA9IG5ldyBDYW5keURhdGUoKTtcblxuICAgIGxldCBtb250aFZhbHVlID0gMDtcbiAgICBmb3IgKGxldCByb3dJbmRleCA9IDA7IHJvd0luZGV4IDwgTUFYX1JPVzsgcm93SW5kZXggKyspIHtcbiAgICAgIG1vbnRoc1tyb3dJbmRleF0gPSBbXTtcbiAgICAgIGZvciAobGV0IGNvbEluZGV4ID0gMDsgY29sSW5kZXggPCBNQVhfQ09MOyBjb2xJbmRleCArKykge1xuICAgICAgICBjb25zdCBtb250aCA9IHRoaXMudmFsdWUuc2V0TW9udGgobW9udGhWYWx1ZSk7XG4gICAgICAgIGNvbnN0IGRpc2FibGVkID0gdGhpcy5kaXNhYmxlZERhdGUgPyB0aGlzLmRpc2FibGVkRGF0ZSh0aGlzLnZhbHVlLnNldE1vbnRoKG1vbnRoVmFsdWUpLm5hdGl2ZURhdGUpIDogZmFsc2U7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSB0aGlzLmkxOG4uZm9ybWF0RGF0ZUNvbXBhdGlibGUobW9udGgubmF0aXZlRGF0ZSwgJ01NTScpO1xuXG4gICAgICAgIGNvbnN0IGNlbGwgPSBtb250aHNbcm93SW5kZXhdW2NvbEluZGV4XSA9IHtcbiAgICAgICAgICBkaXNhYmxlZCxcbiAgICAgICAgICBjb250ZW50LFxuICAgICAgICAgIG1vbnRoOiBtb250aFZhbHVlLFxuICAgICAgICAgIHRpdGxlOiBjb250ZW50LFxuICAgICAgICAgIGNsYXNzTWFwOiBudWxsLFxuICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IHRoaXMuY2hvb3NlTW9udGgoY2VsbC5tb250aClcbiAgICAgICAgfTtcblxuICAgICAgICBjZWxsLmNsYXNzTWFwID0ge1xuICAgICAgICAgIFtgJHt0aGlzLnByZWZpeENsc30tY2VsbGBdOiB0cnVlLFxuICAgICAgICAgIFtgJHt0aGlzLnByZWZpeENsc30tY2VsbC1kaXNhYmxlZGBdOiBkaXNhYmxlZCxcbiAgICAgICAgICBbYCR7dGhpcy5wcmVmaXhDbHN9LXNlbGVjdGVkLWNlbGxgXTogY2VsbC5tb250aCA9PT0gY3VycmVudE1vbnRoLFxuICAgICAgICAgIFtgJHt0aGlzLnByZWZpeENsc30tY3VycmVudC1jZWxsYF06IHRvZGF5LmdldFllYXIoKSA9PT0gdGhpcy52YWx1ZS5nZXRZZWFyKCkgJiYgY2VsbC5tb250aCA9PT0gdG9kYXkuZ2V0TW9udGgoKVxuICAgICAgICB9O1xuXG4gICAgICAgIG1vbnRoVmFsdWUgKys7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtb250aHM7XG4gIH1cblxuICBwcml2YXRlIGNob29zZU1vbnRoKG1vbnRoOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy52YWx1ZS5zZXRNb250aChtb250aCk7XG4gICAgdGhpcy52YWx1ZUNoYW5nZS5lbWl0KHRoaXMudmFsdWUpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYW5lbE1vbnRoRGF0YSB7XG4gIGRpc2FibGVkOiBib29sZWFuO1xuICBjb250ZW50OiBzdHJpbmc7XG4gIG1vbnRoOiBudW1iZXI7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIGNsYXNzTWFwOiBvYmplY3Q7XG4gIG9uQ2xpY2soKTogdm9pZDtcbn1cbiIsImltcG9ydCB7IERpc2FibGVkRGF0ZUZuLCBEaXNhYmxlZFRpbWVDb25maWcsIERpc2FibGVkVGltZUZuIH0gZnJvbSAnLi4vc3RhbmRhcmQtdHlwZXMnO1xuaW1wb3J0IHsgQ2FuZHlEYXRlIH0gZnJvbSAnLi9jYW5keS1kYXRlJztcblxuY29uc3QgZGVmYXVsdERpc2FibGVkVGltZTogRGlzYWJsZWRUaW1lQ29uZmlnID0ge1xuICBuekRpc2FibGVkSG91cnMoKTogbnVtYmVyW10ge1xuICAgIHJldHVybiBbXTtcbiAgfSxcbiAgbnpEaXNhYmxlZE1pbnV0ZXMoKTogbnVtYmVyW10ge1xuICAgIHJldHVybiBbXTtcbiAgfSxcbiAgbnpEaXNhYmxlZFNlY29uZHMoKTogbnVtYmVyW10ge1xuICAgIHJldHVybiBbXTtcbiAgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRpbWVDb25maWcodmFsdWU6IENhbmR5RGF0ZSwgZGlzYWJsZWRUaW1lOiBEaXNhYmxlZFRpbWVGbik6IERpc2FibGVkVGltZUNvbmZpZyB7XG4gIGxldCBkaXNhYmxlZFRpbWVDb25maWcgPSBkaXNhYmxlZFRpbWUgPyBkaXNhYmxlZFRpbWUodmFsdWUgJiYgdmFsdWUubmF0aXZlRGF0ZSkgOiB7fSBhcyBEaXNhYmxlZFRpbWVDb25maWc7XG4gIGRpc2FibGVkVGltZUNvbmZpZyA9IHtcbiAgICAuLi5kZWZhdWx0RGlzYWJsZWRUaW1lLFxuICAgIC4uLmRpc2FibGVkVGltZUNvbmZpZ1xuICB9O1xuICByZXR1cm4gZGlzYWJsZWRUaW1lQ29uZmlnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNUaW1lVmFsaWRCeUNvbmZpZyh2YWx1ZTogQ2FuZHlEYXRlLCBkaXNhYmxlZFRpbWVDb25maWc6IERpc2FibGVkVGltZUNvbmZpZyk6IGJvb2xlYW4ge1xuICBsZXQgaW52YWxpZFRpbWUgPSBmYWxzZTtcbiAgaWYgKHZhbHVlKSB7XG4gICAgY29uc3QgaG91ciA9IHZhbHVlLmdldEhvdXJzKCk7XG4gICAgY29uc3QgbWludXRlcyA9IHZhbHVlLmdldE1pbnV0ZXMoKTtcbiAgICBjb25zdCBzZWNvbmRzID0gdmFsdWUuZ2V0U2Vjb25kcygpO1xuICAgIGNvbnN0IGRpc2FibGVkSG91cnMgPSBkaXNhYmxlZFRpbWVDb25maWcubnpEaXNhYmxlZEhvdXJzKCk7XG4gICAgaWYgKGRpc2FibGVkSG91cnMuaW5kZXhPZihob3VyKSA9PT0gLTEpIHtcbiAgICAgIGNvbnN0IGRpc2FibGVkTWludXRlcyA9IGRpc2FibGVkVGltZUNvbmZpZy5uekRpc2FibGVkTWludXRlcyhob3VyKTtcbiAgICAgIGlmIChkaXNhYmxlZE1pbnV0ZXMuaW5kZXhPZihtaW51dGVzKSA9PT0gLTEpIHtcbiAgICAgICAgY29uc3QgZGlzYWJsZWRTZWNvbmRzID0gZGlzYWJsZWRUaW1lQ29uZmlnLm56RGlzYWJsZWRTZWNvbmRzKGhvdXIsIG1pbnV0ZXMpO1xuICAgICAgICBpbnZhbGlkVGltZSA9IGRpc2FibGVkU2Vjb25kcy5pbmRleE9mKHNlY29uZHMpICE9PSAtMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGludmFsaWRUaW1lID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaW52YWxpZFRpbWUgPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gIWludmFsaWRUaW1lO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNUaW1lVmFsaWQodmFsdWU6IENhbmR5RGF0ZSwgZGlzYWJsZWRUaW1lOiBEaXNhYmxlZFRpbWVGbik6IGJvb2xlYW4ge1xuICBjb25zdCBkaXNhYmxlZFRpbWVDb25maWcgPSBnZXRUaW1lQ29uZmlnKHZhbHVlLCBkaXNhYmxlZFRpbWUpO1xuICByZXR1cm4gaXNUaW1lVmFsaWRCeUNvbmZpZyh2YWx1ZSwgZGlzYWJsZWRUaW1lQ29uZmlnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQWxsb3dlZERhdGUodmFsdWU6IENhbmR5RGF0ZSwgZGlzYWJsZWREYXRlPzogRGlzYWJsZWREYXRlRm4sIGRpc2FibGVkVGltZT86IERpc2FibGVkVGltZUZuKTogYm9vbGVhbiB7XG4gIGlmIChkaXNhYmxlZERhdGUpIHtcbiAgICBpZiAoZGlzYWJsZWREYXRlKHZhbHVlLm5hdGl2ZURhdGUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGlmIChkaXNhYmxlZFRpbWUpIHtcbiAgICBpZiAoIWlzVGltZVZhbGlkKHZhbHVlLCBkaXNhYmxlZFRpbWUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkNoYW5nZXMsIE9uSW5pdCwgT3V0cHV0LCBTaW1wbGVDaGFuZ2VzLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBGdW5jdGlvblByb3AgfSBmcm9tICcuLi8uLi8uLi9jb3JlL3R5cGVzL2NvbW1vbi13cmFwJztcbmltcG9ydCB7IHZhbHVlRnVuY3Rpb25Qcm9wIH0gZnJvbSAnLi4vLi4vLi4vY29yZS91dGlsL2NvbnZlcnQnO1xuaW1wb3J0IHsgTnpDYWxlbmRhckkxOG5JbnRlcmZhY2UgfSBmcm9tICcuLi8uLi8uLi9pMThuL256LWkxOG4uaW50ZXJmYWNlJztcbmltcG9ydCB7XG4gIERpc2FibGVkRGF0ZUZuLFxuICBEaXNhYmxlZFRpbWVDb25maWcsXG4gIERpc2FibGVkVGltZUZuLFxuICBEaXNhYmxlZFRpbWVQYXJ0aWFsLFxuICBQYW5lbE1vZGUsXG4gIFByZXNldFJhbmdlcyxcbiAgU3VwcG9ydFRpbWVPcHRpb25zXG59IGZyb20gJy4uLy4uL3N0YW5kYXJkLXR5cGVzJztcbmltcG9ydCB7IENhbmR5RGF0ZSB9IGZyb20gJy4uL2NhbmR5LWRhdGUnO1xuaW1wb3J0IHsgZ2V0VGltZUNvbmZpZywgaXNBbGxvd2VkRGF0ZSB9IGZyb20gJy4uL3V0aWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICA6ICdkYXRlLXJhbmdlLXBvcHVwJyxcbiAgdGVtcGxhdGVVcmw6ICdkYXRlLXJhbmdlLXBvcHVwLmNvbXBvbmVudC5odG1sJ1xufSlcblxuZXhwb3J0IGNsYXNzIERhdGVSYW5nZVBvcHVwQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xuICBASW5wdXQoKSBpc1JhbmdlOiBib29sZWFuO1xuICBASW5wdXQoKSBzaG93V2VlazogYm9vbGVhbjtcblxuICBASW5wdXQoKSBsb2NhbGU6IE56Q2FsZW5kYXJJMThuSW50ZXJmYWNlO1xuICBASW5wdXQoKSBmb3JtYXQ6IHN0cmluZztcbiAgQElucHV0KCkgcGxhY2Vob2xkZXI6IHN0cmluZyB8IHN0cmluZ1tdO1xuICBASW5wdXQoKSBkaXNhYmxlZERhdGU6IERpc2FibGVkRGF0ZUZuO1xuICBASW5wdXQoKSBkaXNhYmxlZFRpbWU6IERpc2FibGVkVGltZUZuOyAvLyBUaGlzIHdpbGwgbGVhZCB0byByZWJ1aWxkIHRpbWUgb3B0aW9uc1xuICBASW5wdXQoKSBzaG93VG9kYXk6IGJvb2xlYW47XG4gIEBJbnB1dCgpIHNob3dUaW1lOiBTdXBwb3J0VGltZU9wdGlvbnMgfCBib29sZWFuO1xuICBASW5wdXQoKSBleHRyYUZvb3RlcjogVGVtcGxhdGVSZWY8dm9pZD4gfCBzdHJpbmc7XG4gIEBJbnB1dCgpIHJhbmdlczogRnVuY3Rpb25Qcm9wPFByZXNldFJhbmdlcz47XG4gIEBJbnB1dCgpIGRhdGVSZW5kZXI6IEZ1bmN0aW9uUHJvcDxUZW1wbGF0ZVJlZjxEYXRlPiB8IHN0cmluZz47XG4gIEBJbnB1dCgpIHBvcHVwU3R5bGU6IG9iamVjdDtcbiAgQElucHV0KCkgZHJvcGRvd25DbGFzc05hbWU6IHN0cmluZztcblxuICBASW5wdXQoKSBwYW5lbE1vZGU6IFBhbmVsTW9kZSB8IFBhbmVsTW9kZVtdO1xuICBAT3V0cHV0KCkgcGFuZWxNb2RlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxQYW5lbE1vZGUgfCBQYW5lbE1vZGVbXT4oKTtcblxuICBASW5wdXQoKSB2YWx1ZTogQ2FuZHlEYXRlIHwgQ2FuZHlEYXRlW107XG4gIEBPdXRwdXQoKSB2YWx1ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Q2FuZHlEYXRlIHwgQ2FuZHlEYXRlW10+KCk7XG5cbiAgQE91dHB1dCgpIHJlc3VsdE9rID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpOyAvLyBFbWl0dGVkIHdoZW4gZG9uZSB3aXRoIGRhdGUgc2VsZWN0aW5nXG4gIEBPdXRwdXQoKSBjbG9zZVBpY2tlciA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTsgLy8gTm90aWZ5IG91dHNpZGUgdG8gY2xvc2UgdGhlIHBpY2tlciBwYW5lbFxuICAvLyBAT3V0cHV0KCkgc2VsZWN0RGF0ZSA9IG5ldyBFdmVudEVtaXR0ZXI8Q2FuZHlEYXRlPigpOyAvLyBFbWl0dGVkIHdoZW4gdGhlIGRhdGUgaXMgc2VsZWN0ZWQgYnkgY2xpY2sgdGhlIGRhdGUgcGFuZWwgKGlmIGlzUmFuZ2UsIHRoZSByZXR1cm5lZCBkYXRlIGlzIGZyb20gb25lIG9mIHRoZSByYW5nZSBwYXJ0cylcblxuICBwcmVmaXhDbHM6IHN0cmluZyA9ICdhbnQtY2FsZW5kYXInO1xuICBzaG93VGltZVBpY2tlcjogYm9vbGVhbiA9IGZhbHNlO1xuICB0aW1lT3B0aW9uczogU3VwcG9ydFRpbWVPcHRpb25zIHwgU3VwcG9ydFRpbWVPcHRpb25zW107XG4gIC8vIHZhbHVlRm9yU2VsZWN0b3I6IENhbmR5RGF0ZVtdOyAvLyBSYW5nZSBPTkxZXG4gIHZhbHVlRm9yUmFuZ2VTaG93OiBDYW5keURhdGVbXTsgLy8gUmFuZ2UgT05MWVxuICBzZWxlY3RlZFZhbHVlOiBDYW5keURhdGVbXTsgLy8gUmFuZ2UgT05MWVxuICBob3ZlclZhbHVlOiBDYW5keURhdGVbXTsgLy8gUmFuZ2UgT05MWVxuICAvLyBpbml0aWFsVmFsdWU6IENhbmR5RGF0ZSA9IG5ldyBDYW5keURhdGUoKTsgLy8gSW5pdGlhbCBkYXRlIHRvIHNob3cgd2hlbiBubyB2YWx1ZSBpbnB1dHNcblxuICAvLyBnZXQgdmFsdWVPckluaXRpYWwoKTogQ2FuZHlEYXRlIHtcbiAgLy8gICByZXR1cm4gdGhpcy52YWx1ZSB8fCB0aGlzLmluaXRpYWxWYWx1ZTtcbiAgLy8gfVxuICBnZXQgaGFzVGltZVBpY2tlcigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISF0aGlzLnNob3dUaW1lO1xuICB9XG5cbiAgZ2V0IGhhc0Zvb3RlcigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zaG93VG9kYXkgfHwgdGhpcy5oYXNUaW1lUGlja2VyIHx8ICEhdGhpcy5leHRyYUZvb3RlciB8fCAhIXRoaXMucmFuZ2VzO1xuICB9XG5cbiAgcHJpdmF0ZSBwYXJ0VHlwZU1hcCA9IHsgJ2xlZnQnOiAwLCAncmlnaHQnOiAxIH07XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgLy8gSW5pdGlhbGl6YXRpb24gZm9yIHJhbmdlIHByb3BlcnRpZXMgdG8gcHJldmVudCBlcnJvcnMgd2hpbGUgbGF0ZXIgYXNzaWdubWVudFxuICAgIGlmICh0aGlzLmlzUmFuZ2UpIHtcbiAgICAgIFsgJ3BsYWNlaG9sZGVyJywgJ3BhbmVsTW9kZScsICdzZWxlY3RlZFZhbHVlJywgJ2hvdmVyVmFsdWUnIF0uZm9yRWFjaCgocHJvcCkgPT4gdGhpcy5pbml0aWFsQXJyYXkocHJvcCkpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pc1JhbmdlKSB7XG4gICAgICBpZiAoY2hhbmdlcy52YWx1ZSkgeyAvLyBSZS1pbml0aWFsaXplIGFsbCByZWxhdGVkIHZhbHVlc1xuICAgICAgICB0aGlzLmNsZWFySG92ZXJWYWx1ZSgpO1xuICAgICAgICB0aGlzLnNlbGVjdGVkVmFsdWUgPSB0aGlzLnZhbHVlIGFzIENhbmR5RGF0ZVtdO1xuICAgICAgICB0aGlzLnZhbHVlRm9yUmFuZ2VTaG93ID0gdGhpcy5ub3JtYWxpemVSYW5nZVZhbHVlKHRoaXMudmFsdWUgYXMgQ2FuZHlEYXRlW10pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFBhcnNlIHNob3dUaW1lIG9wdGlvbnNcbiAgICBpZiAoY2hhbmdlcy5zaG93VGltZSB8fCBjaGFuZ2VzLmRpc2FibGVkVGltZSkge1xuICAgICAgaWYgKHRoaXMuc2hvd1RpbWUpIHtcbiAgICAgICAgdGhpcy5idWlsZFRpbWVPcHRpb25zKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU2hvdyB0aW1lIHBpY2tlciB3aGVuIGFzc2lnbmVkIHBhbmVsIG1vZGUgYXMgXCJ0aW1lXCJcbiAgICBpZiAoY2hhbmdlcy5wYW5lbE1vZGUgJiYgdGhpcy5oYXNUaW1lUGlja2VyKSB7XG4gICAgICB0aGlzLnNob3dUaW1lUGlja2VyID0gdGhpcy5wYW5lbE1vZGUgPT09ICd0aW1lJztcbiAgICB9XG4gIH1cblxuICBvblNob3dUaW1lUGlja2VyQ2hhbmdlKHNob3c6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAvLyB0aGlzLnBhbmVsTW9kZSA9IHNob3cgPyAndGltZScgOiAnZGF0ZSc7XG4gICAgLy8gdGhpcy5wYW5lbE1vZGVDaGFuZ2UuZW1pdCh0aGlzLnBhbmVsTW9kZSk7XG4gICAgdGhpcy5wYW5lbE1vZGVDaGFuZ2UuZW1pdChzaG93ID8gJ3RpbWUnIDogJ2RhdGUnKTtcbiAgfVxuXG4gIG9uQ2xpY2tUb2RheSh2YWx1ZTogQ2FuZHlEYXRlKTogdm9pZCB7XG4gICAgLy8gaWYgKHRoaXMuaXNSYW5nZSkgeyAvLyBTaG93IHRvZGF5IGlzIG5vdCBzdXBwb3J0IGJ5IHJhbmdlXG4gICAgLy8gICB0aHJvdyBuZXcgRXJyb3IoJ1wibnpTaG93VG9kYXlcIiBpcyBub3Qgc3VwcG9ydCBmb3IgXCJSYW5nZVBpY2tlclwiIScpO1xuICAgIC8vIH0gZWxzZSB7XG4gICAgaWYgKCF0aGlzLmlzUmFuZ2UpIHtcbiAgICAgIHRoaXMudmFsdWUgPSBudWxsOyAvLyBDbGVhciBjdXJyZW50IHZhbHVlIHRvIG5vdCBzeW5jIHRpbWUgYnkgbmV4dCBzdGVwXG4gICAgICB0aGlzLmNoYW5nZVZhbHVlKHZhbHVlKTtcbiAgICB9XG4gICAgdGhpcy5jbG9zZVBpY2tlclBhbmVsKCk7XG4gIH1cblxuICBvbkRheUhvdmVyKHZhbHVlOiBDYW5keURhdGUpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pc1JhbmdlICYmIHRoaXMuc2VsZWN0ZWRWYWx1ZVsgMCBdICYmICF0aGlzLnNlbGVjdGVkVmFsdWVbIDEgXSkgeyAvLyBXaGVuIHJpZ2h0IHZhbHVlIGlzIHNlbGVjdGVkLCBkb24ndCBkbyBob3ZlclxuICAgICAgY29uc3QgYmFzZSA9IHRoaXMuc2VsZWN0ZWRWYWx1ZVsgMCBdOyAvLyBVc2UgdGhlIGxlZnQgb2Ygc2VsZWN0ZWQgdmFsdWUgYXMgdGhlIGJhc2UgdG8gZGVjaWRlIGxhdGVyIGhvdmVyVmFsdWVcbiAgICAgIGlmIChiYXNlLmlzQmVmb3JlKHZhbHVlLCAnZGF5JykpIHtcbiAgICAgICAgdGhpcy5ob3ZlclZhbHVlID0gWyBiYXNlLCB2YWx1ZSBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5ob3ZlclZhbHVlID0gWyB2YWx1ZSwgYmFzZSBdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG9uUGFuZWxNb2RlQ2hhbmdlKG1vZGU6IFBhbmVsTW9kZSwgcGFydFR5cGU/OiBSYW5nZVBhcnRUeXBlKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNSYW5nZSkge1xuICAgICAgKHRoaXMucGFuZWxNb2RlIGFzIFBhbmVsTW9kZVtdKVsgdGhpcy5nZXRQYXJ0VHlwZUluZGV4KHBhcnRUeXBlKSBdID0gbW9kZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wYW5lbE1vZGUgPSBtb2RlO1xuICAgIH1cbiAgICB0aGlzLnBhbmVsTW9kZUNoYW5nZS5lbWl0KHRoaXMucGFuZWxNb2RlKTtcbiAgfVxuXG4gIG9uSGVhZGVyQ2hhbmdlKHZhbHVlOiBDYW5keURhdGUsIHBhcnRUeXBlPzogUmFuZ2VQYXJ0VHlwZSk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzUmFuZ2UpIHtcbiAgICAgIHRoaXMudmFsdWVGb3JSYW5nZVNob3dbIHRoaXMuZ2V0UGFydFR5cGVJbmRleChwYXJ0VHlwZSkgXSA9IHZhbHVlO1xuICAgICAgdGhpcy52YWx1ZUZvclJhbmdlU2hvdyA9IHRoaXMubm9ybWFsaXplUmFuZ2VWYWx1ZSh0aGlzLnZhbHVlRm9yUmFuZ2VTaG93KTsgLy8gU2hvdWxkIGFsd2F5cyB0YWtlIGNhcmUgb2Ygc3RhcnQvZW5kXG4gICAgfVxuICB9XG5cbiAgb25TZWxlY3RUaW1lKHZhbHVlOiBDYW5keURhdGUsIHBhcnRUeXBlPzogUmFuZ2VQYXJ0VHlwZSk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzUmFuZ2UpIHtcbiAgICAgIGNvbnN0IG5ld1ZhbHVlID0gdGhpcy5jbG9uZVJhbmdlRGF0ZSh0aGlzLnZhbHVlIGFzIENhbmR5RGF0ZVtdKTtcbiAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5nZXRQYXJ0VHlwZUluZGV4KHBhcnRUeXBlKTtcbiAgICAgIG5ld1ZhbHVlWyBpbmRleCBdID0gdGhpcy5vdmVycmlkZUhtcyh2YWx1ZSwgbmV3VmFsdWVbIGluZGV4IF0pO1xuICAgICAgdGhpcy5zZXRWYWx1ZShuZXdWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5vdmVycmlkZUhtcyh2YWx1ZSwgKHRoaXMudmFsdWUgYXMgQ2FuZHlEYXRlKSB8fCBuZXcgQ2FuZHlEYXRlKCkpKTsgLy8gSWYgbm90IHNlbGVjdCBhIGRhdGUgY3VycmVudGx5LCB1c2UgdG9kYXlcbiAgICB9XG4gIH1cblxuICBjaGFuZ2VWYWx1ZSh2YWx1ZTogQ2FuZHlEYXRlLCBwYXJ0VHlwZT86IFJhbmdlUGFydFR5cGUpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pc1JhbmdlKSB7XG4gICAgICBjb25zdCBpbmRleCA9IHRoaXMuZ2V0UGFydFR5cGVJbmRleChwYXJ0VHlwZSk7XG4gICAgICB0aGlzLnNlbGVjdGVkVmFsdWVbIGluZGV4IF0gPSB2YWx1ZTtcbiAgICAgIGlmICh0aGlzLmlzVmFsaWRSYW5nZSh0aGlzLnNlbGVjdGVkVmFsdWUpKSB7XG4gICAgICAgIHRoaXMudmFsdWVGb3JSYW5nZVNob3cgPSB0aGlzLm5vcm1hbGl6ZVJhbmdlVmFsdWUodGhpcy5zZWxlY3RlZFZhbHVlKTtcbiAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLmNsb25lUmFuZ2VEYXRlKHRoaXMuc2VsZWN0ZWRWYWx1ZSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldFZhbHVlKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBjaGFuZ2VWYWx1ZUZyb21TZWxlY3QodmFsdWU6IENhbmR5RGF0ZSk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzUmFuZ2UpIHtcbiAgICAgIGNvbnN0IFsgbGVmdCwgcmlnaHQgXSA9IHRoaXMuc2VsZWN0ZWRWYWx1ZSBhcyBDYW5keURhdGVbXTsgLy8gTk9URTogdGhlIGxlZnQvcmlnaHQgbWF5YmUgbm90IHRoZSBzZXF1ZW5jZSBpdCBzZWxlY3QgYXQgdGhlIGRhdGUgcGFuZWxzXG5cbiAgICAgIGlmICgoIWxlZnQgJiYgIXJpZ2h0KSB8fCAobGVmdCAmJiByaWdodCkpIHsgLy8gSWYgdG90YWxseSBmdWxsIG9yIGVtcHR5LCBjbGVhbiB1cCAmJiByZS1hc3NpZ24gbGVmdCBmaXJzdFxuICAgICAgICB0aGlzLmhvdmVyVmFsdWUgPSB0aGlzLnNlbGVjdGVkVmFsdWUgPSBbIHZhbHVlIF07XG4gICAgICB9IGVsc2UgaWYgKGxlZnQgJiYgIXJpZ2h0KSB7IC8vIElmIG9uZSBvZiB0aGVtIGlzIGVtcHR5LCBhc3NpZ24gdGhlIG90aGVyIG9uZSBhbmQgc29ydCwgdGhlbiBzZXQgdGhlIGZpbmFsIHZhbHVlc1xuICAgICAgICB0aGlzLmNsZWFySG92ZXJWYWx1ZSgpOyAvLyBDbGVhbiB1cFxuICAgICAgICB0aGlzLnNldFJhbmdlVmFsdWUoJ3NlbGVjdGVkVmFsdWUnLCAncmlnaHQnLCB2YWx1ZSk7XG4gICAgICAgIHRoaXMuc29ydFJhbmdlVmFsdWUoJ3NlbGVjdGVkVmFsdWUnKTsgLy8gU29ydFxuXG4gICAgICAgIHRoaXMudmFsdWVGb3JSYW5nZVNob3cgPSB0aGlzLm5vcm1hbGl6ZVJhbmdlVmFsdWUodGhpcy5zZWxlY3RlZFZhbHVlKTtcbiAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLmNsb25lUmFuZ2VEYXRlKHRoaXMuc2VsZWN0ZWRWYWx1ZSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldFZhbHVlKHZhbHVlKTtcbiAgICB9XG4gICAgLy8gdGhpcy5zZWxlY3REYXRlLmVtaXQodmFsdWUpO1xuICB9XG5cbiAgZW5hYmxlUHJldk5leHQoZGlyZWN0aW9uOiAncHJldicgfCAnbmV4dCcsIHBhcnRUeXBlPzogUmFuZ2VQYXJ0VHlwZSk6IGJvb2xlYW4ge1xuICAgIGlmICh0aGlzLmlzUmFuZ2UpIHtcbiAgICAgIGNvbnN0IFsgc3RhcnQsIGVuZCBdID0gdGhpcy52YWx1ZUZvclJhbmdlU2hvdztcbiAgICAgIGNvbnN0IHNob3dNaWRkbGUgPSAhc3RhcnQuYWRkTW9udGhzKDEpLmlzU2FtZShlbmQsICdtb250aCcpOyAvLyBPbmUgbW9udGggZGlmZiB0aGVuIGRvbid0IHNob3cgbWlkZGxlIHByZXYvbmV4dFxuICAgICAgaWYgKChwYXJ0VHlwZSA9PT0gJ2xlZnQnICYmIGRpcmVjdGlvbiA9PT0gJ25leHQnKSB8fCAocGFydFR5cGUgPT09ICdyaWdodCcgJiYgZGlyZWN0aW9uID09PSAncHJldicpKSB7XG4gICAgICAgIHJldHVybiBzaG93TWlkZGxlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGdldFBhbmVsTW9kZShwYXJ0VHlwZT86IFJhbmdlUGFydFR5cGUpOiBQYW5lbE1vZGUge1xuICAgIGlmICh0aGlzLmlzUmFuZ2UpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhbmVsTW9kZVsgdGhpcy5nZXRQYXJ0VHlwZUluZGV4KHBhcnRUeXBlKSBdIGFzIFBhbmVsTW9kZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMucGFuZWxNb2RlIGFzIFBhbmVsTW9kZTtcbiAgICB9XG4gIH1cblxuICAvLyBHZXQgc2luZ2xlIHZhbHVlIG9yIHBhcnQgdmFsdWUgb2YgYSByYW5nZVxuICBnZXRWYWx1ZShwYXJ0VHlwZT86IFJhbmdlUGFydFR5cGUpOiBDYW5keURhdGUge1xuICAgIGlmICh0aGlzLmlzUmFuZ2UpIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlWyB0aGlzLmdldFBhcnRUeXBlSW5kZXgocGFydFR5cGUpIF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlIGFzIENhbmR5RGF0ZTtcbiAgICB9XG4gIH1cblxuICBnZXRWYWx1ZUJ5U2VsZWN0b3IocGFydFR5cGU/OiBSYW5nZVBhcnRUeXBlKTogQ2FuZHlEYXRlIHtcbiAgICBpZiAodGhpcy5pc1JhbmdlKSB7XG4gICAgICBjb25zdCB2YWx1ZVNob3cgPSB0aGlzLnNob3dUaW1lUGlja2VyID8gdGhpcy52YWx1ZSA6IHRoaXMudmFsdWVGb3JSYW5nZVNob3c7IC8vIFVzZSB0aGUgcmVhbCB0aW1lIHZhbHVlIHRoYXQgd2l0aG91dCBkZWNvcmF0aW9ucyB3aGVuIHRpbWVwaWNrZXIgaXMgc2hvd24gdXBcbiAgICAgIHJldHVybiB2YWx1ZVNob3dbIHRoaXMuZ2V0UGFydFR5cGVJbmRleChwYXJ0VHlwZSkgXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMudmFsdWUgYXMgQ2FuZHlEYXRlO1xuICAgIH1cbiAgfVxuXG4gIGdldFBhcnRUeXBlSW5kZXgocGFydFR5cGU6IFJhbmdlUGFydFR5cGUpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnBhcnRUeXBlTWFwWyBwYXJ0VHlwZSBdO1xuICB9XG5cbiAgZ2V0UGxhY2Vob2xkZXIocGFydFR5cGU/OiBSYW5nZVBhcnRUeXBlKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5pc1JhbmdlID8gdGhpcy5wbGFjZWhvbGRlclsgdGhpcy5nZXRQYXJ0VHlwZUluZGV4KHBhcnRUeXBlKSBdIDogdGhpcy5wbGFjZWhvbGRlciBhcyBzdHJpbmc7XG4gIH1cblxuICBoYXNTZWxlY3RlZFZhbHVlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnNlbGVjdGVkVmFsdWUgJiYgISF0aGlzLnNlbGVjdGVkVmFsdWVbIDEgXSAmJiAhIXRoaXMuc2VsZWN0ZWRWYWx1ZVsgMCBdO1xuICB9XG5cbiAgZGlzYWJsZWRTdGFydFRpbWUgPSAodmFsdWU6IERhdGUpOiBEaXNhYmxlZFRpbWVDb25maWcgPT4ge1xuICAgIHJldHVybiB0aGlzLmRpc2FibGVkVGltZSAmJiB0aGlzLmRpc2FibGVkVGltZSh2YWx1ZSwgJ3N0YXJ0Jyk7XG4gIH1cblxuICBkaXNhYmxlZEVuZFRpbWUgPSAodmFsdWU6IERhdGUpOiBEaXNhYmxlZFRpbWVDb25maWcgPT4ge1xuICAgIHJldHVybiB0aGlzLmRpc2FibGVkVGltZSAmJiB0aGlzLmRpc2FibGVkVGltZSh2YWx1ZSwgJ2VuZCcpO1xuICB9XG5cbiAgaXNBbGxvd2VkU2VsZWN0ZWRWYWx1ZSgpOiBib29sZWFuIHtcbiAgICBjb25zdCBzZWxlY3RlZFZhbHVlID0gdGhpcy5zZWxlY3RlZFZhbHVlO1xuICAgIGlmIChzZWxlY3RlZFZhbHVlICYmIHNlbGVjdGVkVmFsdWVbIDAgXSAmJiBzZWxlY3RlZFZhbHVlWyAxIF0pIHtcbiAgICAgIHJldHVybiBpc0FsbG93ZWREYXRlKHNlbGVjdGVkVmFsdWVbIDAgXSwgdGhpcy5kaXNhYmxlZERhdGUsIHRoaXMuZGlzYWJsZWRTdGFydFRpbWUpICYmXG4gICAgICAgIGlzQWxsb3dlZERhdGUoc2VsZWN0ZWRWYWx1ZVsgMSBdLCB0aGlzLmRpc2FibGVkRGF0ZSwgdGhpcy5kaXNhYmxlZEVuZFRpbWUpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB0aW1lUGlja2VyRGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgaWYgKCF0aGlzLmhhc1RpbWVQaWNrZXIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzUmFuZ2UpIHtcbiAgICAgIHJldHVybiAhdGhpcy5oYXNTZWxlY3RlZFZhbHVlKCkgfHwgISF0aGlzLmhvdmVyVmFsdWUubGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgb2tEaXNhYmxlZCgpOiBib29sZWFuIHtcbiAgICBpZiAoIXRoaXMuaGFzVGltZVBpY2tlcikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNSYW5nZSkge1xuICAgICAgcmV0dXJuICF0aGlzLmlzQWxsb3dlZFNlbGVjdGVkVmFsdWUoKSB8fCAhdGhpcy5oYXNTZWxlY3RlZFZhbHVlKCkgfHwgISF0aGlzLmhvdmVyVmFsdWUubGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy52YWx1ZSA/ICFpc0FsbG93ZWREYXRlKHRoaXMudmFsdWUgYXMgQ2FuZHlEYXRlLCB0aGlzLmRpc2FibGVkRGF0ZSwgdGhpcy5kaXNhYmxlZFRpbWUpIDogZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZ2V0VGltZU9wdGlvbnMocGFydFR5cGU/OiBSYW5nZVBhcnRUeXBlKTogU3VwcG9ydFRpbWVPcHRpb25zIHtcbiAgICBpZiAodGhpcy5zaG93VGltZSAmJiB0aGlzLnRpbWVPcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1JhbmdlID8gdGhpcy50aW1lT3B0aW9uc1sgdGhpcy5nZXRQYXJ0VHlwZUluZGV4KHBhcnRUeXBlKSBdIDogdGhpcy50aW1lT3B0aW9ucztcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBvbkNsaWNrUHJlc2V0UmFuZ2UodmFsOiBEYXRlW10pOiB2b2lkIHtcbiAgICBjb25zdCB2YWx1ZSA9IHZhbHVlRnVuY3Rpb25Qcm9wKHZhbCk7XG4gICAgdGhpcy5zZXRWYWx1ZShbIG5ldyBDYW5keURhdGUodmFsdWVbIDAgXSksIG5ldyBDYW5keURhdGUodmFsdWVbIDEgXSkgXSk7XG4gICAgdGhpcy5yZXN1bHRPay5lbWl0KCk7XG4gIH1cblxuICBvblByZXNldFJhbmdlTW91c2VMZWF2ZSgpOiB2b2lkIHtcbiAgICB0aGlzLmNsZWFySG92ZXJWYWx1ZSgpO1xuICB9XG5cbiAgb25Ib3ZlclByZXNldFJhbmdlKHZhbDogRGF0ZVtdKTogdm9pZCB7XG4gICAgdGhpcy5ob3ZlclZhbHVlID0gKFsgbmV3IENhbmR5RGF0ZSh2YWxbIDAgXSksIG5ldyBDYW5keURhdGUodmFsWyAxIF0pIF0pO1xuICB9XG5cbiAgZ2V0T2JqZWN0S2V5cyhvYmo6IG9iamVjdCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gb2JqID8gT2JqZWN0LmtleXMob2JqKSA6IFtdO1xuICB9XG5cbiAgcHJpdmF0ZSBjbG9zZVBpY2tlclBhbmVsKCk6IHZvaWQge1xuICAgIHRoaXMuY2xvc2VQaWNrZXIuZW1pdCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBjbGVhckhvdmVyVmFsdWUoKTogdm9pZCB7XG4gICAgdGhpcy5ob3ZlclZhbHVlID0gW107XG4gIH1cblxuICBwcml2YXRlIGJ1aWxkVGltZU9wdGlvbnMoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuc2hvd1RpbWUpIHtcbiAgICAgIGNvbnN0IHNob3dUaW1lID0gdHlwZW9mIHRoaXMuc2hvd1RpbWUgPT09ICdvYmplY3QnID8gdGhpcy5zaG93VGltZSA6IHt9O1xuICAgICAgaWYgKHRoaXMuaXNSYW5nZSkge1xuICAgICAgICB0aGlzLnRpbWVPcHRpb25zID0gWyB0aGlzLm92ZXJyaWRlVGltZU9wdGlvbnMoc2hvd1RpbWUsIHRoaXMudmFsdWVbIDAgXSwgJ3N0YXJ0JyksIHRoaXMub3ZlcnJpZGVUaW1lT3B0aW9ucyhzaG93VGltZSwgdGhpcy52YWx1ZVsgMSBdLCAnZW5kJykgXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudGltZU9wdGlvbnMgPSB0aGlzLm92ZXJyaWRlVGltZU9wdGlvbnMoc2hvd1RpbWUsIHRoaXMudmFsdWUgYXMgQ2FuZHlEYXRlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50aW1lT3B0aW9ucyA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBvdmVycmlkZVRpbWVPcHRpb25zKG9yaWdpbjogU3VwcG9ydFRpbWVPcHRpb25zLCB2YWx1ZTogQ2FuZHlEYXRlLCBwYXJ0aWFsPzogRGlzYWJsZWRUaW1lUGFydGlhbCk6IFN1cHBvcnRUaW1lT3B0aW9ucyB7XG4gICAgbGV0IGRpc2FibGVkVGltZUZuO1xuICAgIGlmIChwYXJ0aWFsKSB7XG4gICAgICBkaXNhYmxlZFRpbWVGbiA9IHBhcnRpYWwgPT09ICdzdGFydCcgPyB0aGlzLmRpc2FibGVkU3RhcnRUaW1lIDogdGhpcy5kaXNhYmxlZEVuZFRpbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRpc2FibGVkVGltZUZuID0gdGhpcy5kaXNhYmxlZFRpbWU7XG4gICAgfVxuICAgIHJldHVybiB7IC4uLm9yaWdpbiwgLi4uZ2V0VGltZUNvbmZpZyh2YWx1ZSwgZGlzYWJsZWRUaW1lRm4pIH07XG4gIH1cblxuICAvLyBTZXQgdmFsdWUgYW5kIHRyaWdnZXIgY2hhbmdlIGV2ZW50XG4gIHByaXZhdGUgc2V0VmFsdWUodmFsdWU6IENhbmR5RGF0ZSB8IENhbmR5RGF0ZVtdKTogdm9pZCB7XG4gICAgY29uc3QgbmV3VmFsdWUgPSB2YWx1ZTtcblxuICAgIC8vIFRPRE86IFN5bmMgb3JpZ2luYWwgdGltZSAoTk9URTogdGhpcyBzaG91bGQgdGFrZSBtb3JlIGNhcmUgb2YgYmVhY3VzZSBpdCBtYXkgZGVwZW5kIG9uIG1hbnkgY2hhbmdlIHNvdXJjZXMpXG4gICAgLy8gaWYgKHRoaXMuaXNSYW5nZSkge1xuICAgIC8vICAgLy8gVE9ETzogU3luYyB0aW1lXG4gICAgLy8gfSBlbHNlIHtcbiAgICAvLyAgIGlmICh0aGlzLnZhbHVlKSB7IC8vIFN5bmMgdGltZSBmcm9tIHRoZSBvcmlnaW5hbCBvbmUgaWYgaXQncyBhdmFpbGFibGVcbiAgICAvLyAgICAgbmV3VmFsdWUgPSB0aGlzLm92ZXJyaWRlSG1zKHRoaXMudmFsdWUgYXMgQ2FuZHlEYXRlLCBuZXdWYWx1ZSBhcyBDYW5keURhdGUpO1xuICAgIC8vICAgfVxuICAgIC8vIH1cblxuICAgIHRoaXMudmFsdWUgPSBuZXdWYWx1ZTtcbiAgICB0aGlzLnZhbHVlQ2hhbmdlLmVtaXQodGhpcy52YWx1ZSk7XG5cbiAgICB0aGlzLmJ1aWxkVGltZU9wdGlvbnMoKTtcbiAgfVxuXG4gIHByaXZhdGUgb3ZlcnJpZGVIbXMoZnJvbTogQ2FuZHlEYXRlLCB0bzogQ2FuZHlEYXRlKTogQ2FuZHlEYXRlIHtcbiAgICBpZiAoIWZyb20gfHwgIXRvKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHRvLnNldEhtcyhmcm9tLmdldEhvdXJzKCksIGZyb20uZ2V0TWludXRlcygpLCBmcm9tLmdldFNlY29uZHMoKSk7XG4gIH1cblxuICAvLyBDaGVjayBpZiBpdCdzIGEgdmFsaWQgcmFuZ2UgdmFsdWVcbiAgcHJpdmF0ZSBpc1ZhbGlkUmFuZ2UodmFsdWU6IENhbmR5RGF0ZVtdKTogYm9vbGVhbiB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICBjb25zdCBbIHN0YXJ0LCBlbmQgXSA9IHZhbHVlO1xuICAgICAgY29uc3QgZ3JhaW4gPSB0aGlzLmhhc1RpbWVQaWNrZXIgPyAnc2Vjb25kJyA6ICdkYXknO1xuICAgICAgcmV0dXJuIHN0YXJ0ICYmIGVuZCAmJiAoc3RhcnQuaXNCZWZvcmUoZW5kLCBncmFpbikgfHwgc3RhcnQuaXNTYW1lKGVuZCwgZ3JhaW4pKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcHJpdmF0ZSBub3JtYWxpemVSYW5nZVZhbHVlKHZhbHVlOiBDYW5keURhdGVbXSk6IENhbmR5RGF0ZVtdIHtcbiAgICBjb25zdCBbIHN0YXJ0LCBlbmQgXSA9IHZhbHVlO1xuICAgIGNvbnN0IG5ld1N0YXJ0ID0gc3RhcnQgfHwgbmV3IENhbmR5RGF0ZSgpO1xuICAgIGNvbnN0IG5ld0VuZCA9IGVuZCAmJiBlbmQuaXNTYW1lKG5ld1N0YXJ0LCAnbW9udGgnKSA/IGVuZC5hZGRNb250aHMoMSkgOiBlbmQgfHwgbmV3U3RhcnQuYWRkTW9udGhzKDEpO1xuICAgIHJldHVybiBbIG5ld1N0YXJ0LCBuZXdFbmQgXTtcbiAgfVxuXG4gIC8vIHByaXZhdGUgaXNFbXB0eVJhbmdlVmFsdWUodmFsdWU6IENhbmR5RGF0ZVtdKTogYm9vbGVhbiB7XG4gIC8vICAgcmV0dXJuICF2YWx1ZSB8fCAhQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHwgdmFsdWUuZXZlcnkoKHZhbCkgPT4gIXZhbCk7XG4gIC8vIH1cblxuICAvLyBTb3J0IGEgcmFuZ2UgdmFsdWUgKGFjY3VyYXRlIHRvIHNlY29uZClcbiAgcHJpdmF0ZSBzb3J0UmFuZ2VWYWx1ZShrZXk6ICdzZWxlY3RlZFZhbHVlJyk6IHZvaWQge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXNbIGtleSBdKSkge1xuICAgICAgY29uc3QgWyBzdGFydCwgZW5kIF0gPSB0aGlzWyBrZXkgXTtcbiAgICAgIGlmIChzdGFydCAmJiBlbmQgJiYgc3RhcnQuaXNBZnRlcihlbmQsICdkYXknKSkge1xuICAgICAgICB0aGlzWyBrZXkgXSA9IFsgZW5kLCBzdGFydCBdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIFJlbmV3IGFuZCBzZXQgYSByYW5nZSB2YWx1ZSB0byB0cmlnZ2VyIHN1Yi1jb21wb25lbnQncyBjaGFuZ2UgZGV0ZWN0aW9uXG4gIHByaXZhdGUgc2V0UmFuZ2VWYWx1ZShrZXk6ICd2YWx1ZScgfCAnc2VsZWN0ZWRWYWx1ZScsIHBhcnRUeXBlOiBSYW5nZVBhcnRUeXBlLCB2YWx1ZTogQ2FuZHlEYXRlKTogdm9pZCB7XG4gICAgY29uc3QgcmVmID0gdGhpc1sga2V5IF0gPSB0aGlzLmNsb25lUmFuZ2VEYXRlKHRoaXNbIGtleSBdIGFzIENhbmR5RGF0ZVtdKTtcbiAgICByZWZbIHRoaXMuZ2V0UGFydFR5cGVJbmRleChwYXJ0VHlwZSkgXSA9IHZhbHVlO1xuICB9XG5cbiAgcHJpdmF0ZSBjbG9uZVJhbmdlRGF0ZSh2YWx1ZTogQ2FuZHlEYXRlW10pOiBDYW5keURhdGVbXSB7XG4gICAgcmV0dXJuIFsgdmFsdWVbIDAgXSAmJiB2YWx1ZVsgMCBdLmNsb25lKCksIHZhbHVlWyAxIF0gJiYgdmFsdWVbIDEgXS5jbG9uZSgpIF0gYXMgQ2FuZHlEYXRlW107XG4gIH1cblxuICBwcml2YXRlIGluaXRpYWxBcnJheShrZXk6IHN0cmluZyk6IHZvaWQge1xuICAgIGlmICghdGhpc1sga2V5IF0gfHwgIUFycmF5LmlzQXJyYXkodGhpc1sga2V5IF0pKSB7XG4gICAgICB0aGlzWyBrZXkgXSA9IFtdO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgdHlwZSBSYW5nZVBhcnRUeXBlID0gJ2xlZnQnIHwgJ3JpZ2h0JztcbiIsImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25DaGFuZ2VzLCBPbkluaXQsIE91dHB1dCwgU2ltcGxlQ2hhbmdlcywgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgRnVuY3Rpb25Qcm9wIH0gZnJvbSAnLi4vLi4vLi4vY29yZS90eXBlcy9jb21tb24td3JhcCc7XG5pbXBvcnQgeyBOekNhbGVuZGFySTE4bkludGVyZmFjZSB9IGZyb20gJy4uLy4uLy4uL2kxOG4vbnotaTE4bi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgRGlzYWJsZWREYXRlRm4sIFBhbmVsTW9kZSB9IGZyb20gJy4uLy4uL3N0YW5kYXJkLXR5cGVzJztcbmltcG9ydCB7IENhbmR5RGF0ZSB9IGZyb20gJy4uL2NhbmR5LWRhdGUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdpbm5lci1wb3B1cCcsXG4gIHRlbXBsYXRlVXJsOiAnaW5uZXItcG9wdXAuY29tcG9uZW50Lmh0bWwnXG59KVxuXG5leHBvcnQgY2xhc3MgSW5uZXJQb3B1cENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgc2hvd1dlZWs6IGJvb2xlYW47XG5cbiAgQElucHV0KCkgbG9jYWxlOiBOekNhbGVuZGFySTE4bkludGVyZmFjZTtcbiAgQElucHV0KCkgc2hvd1RpbWVQaWNrZXI6IGJvb2xlYW47XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgQElucHV0KCkgdGltZU9wdGlvbnM6IGFueTtcbiAgQElucHV0KCkgZW5hYmxlUHJldjogYm9vbGVhbjtcbiAgQElucHV0KCkgZW5hYmxlTmV4dDogYm9vbGVhbjtcbiAgQElucHV0KCkgZGlzYWJsZWREYXRlOiBEaXNhYmxlZERhdGVGbjtcbiAgQElucHV0KCkgZGF0ZVJlbmRlcjogRnVuY3Rpb25Qcm9wPFRlbXBsYXRlUmVmPERhdGU+IHwgc3RyaW5nPjtcbiAgQElucHV0KCkgc2VsZWN0ZWRWYWx1ZTogQ2FuZHlEYXRlW107IC8vIFJhbmdlIE9OTFlcbiAgQElucHV0KCkgaG92ZXJWYWx1ZTogQ2FuZHlEYXRlW107IC8vIFJhbmdlIE9OTFlcblxuICBASW5wdXQoKSBwYW5lbE1vZGU6IFBhbmVsTW9kZTtcbiAgQE91dHB1dCgpIHBhbmVsTW9kZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8UGFuZWxNb2RlPigpO1xuXG4gIEBJbnB1dCgpIHZhbHVlOiBDYW5keURhdGU7XG5cbiAgQE91dHB1dCgpIGhlYWRlckNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Q2FuZHlEYXRlPigpOyAvLyBFbWl0dGVkIHdoZW4gdXNlciBjaGFuZ2VkIHRoZSBoZWFkZXIncyB2YWx1ZVxuICBAT3V0cHV0KCkgc2VsZWN0RGF0ZSA9IG5ldyBFdmVudEVtaXR0ZXI8Q2FuZHlEYXRlPigpOyAvLyBFbWl0dGVkIHdoZW4gdGhlIGRhdGUgaXMgc2VsZWN0ZWQgYnkgY2xpY2sgdGhlIGRhdGUgcGFuZWxcbiAgQE91dHB1dCgpIHNlbGVjdFRpbWUgPSBuZXcgRXZlbnRFbWl0dGVyPENhbmR5RGF0ZT4oKTtcbiAgQE91dHB1dCgpIGRheUhvdmVyID0gbmV3IEV2ZW50RW1pdHRlcjxDYW5keURhdGU+KCk7IC8vIEVtaXR0ZWQgd2hlbiBob3ZlciBvbiBhIGRheSBieSBtb3VzZSBlbnRlclxuXG4gIHByZWZpeENsczogc3RyaW5nID0gJ2FudC1jYWxlbmRhcic7XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHsgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBpZiAoY2hhbmdlcy52YWx1ZSAmJiAhdGhpcy52YWx1ZSkge1xuICAgICAgdGhpcy52YWx1ZSA9IG5ldyBDYW5keURhdGUoKTtcbiAgICB9XG4gIH1cblxuICBvblNlbGVjdFRpbWUoZGF0ZTogRGF0ZSk6IHZvaWQge1xuICAgIHRoaXMuc2VsZWN0VGltZS5lbWl0KG5ldyBDYW5keURhdGUoZGF0ZSkpO1xuICB9XG5cbiAgLy8gVGhlIHZhbHVlIHJlYWwgY2hhbmdlZCB0byBvdXRzaWRlXG4gIG9uU2VsZWN0RGF0ZShkYXRlOiBDYW5keURhdGUgfCBEYXRlKTogdm9pZCB7XG4gICAgLy8gdGhpcy52YWx1ZSA9IGRhdGUgaW5zdGFuY2VvZiBDYW5keURhdGUgPyBkYXRlIDogbmV3IENhbmR5RGF0ZShkYXRlKTtcbiAgICBjb25zdCB2YWx1ZSAgPSBkYXRlIGluc3RhbmNlb2YgQ2FuZHlEYXRlID8gZGF0ZSA6IG5ldyBDYW5keURhdGUoZGF0ZSk7XG4gICAgdGhpcy5zZWxlY3REYXRlLmVtaXQodmFsdWUpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uQ2hhbmdlcywgT3V0cHV0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE56Q2FsZW5kYXJJMThuSW50ZXJmYWNlIH0gZnJvbSAnLi4vLi4vLi4vaTE4bi9uei1pMThuLmludGVyZmFjZSc7XG5pbXBvcnQgeyBDYW5keURhdGUgfSBmcm9tICcuLi9jYW5keS1kYXRlJztcblxuY29uc3QgTUFYX1JPVyA9IDQ7XG5jb25zdCBNQVhfQ09MID0gMztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAneWVhci1wYW5lbCcsXG4gIHRlbXBsYXRlVXJsOiAneWVhci1wYW5lbC5jb21wb25lbnQuaHRtbCdcbn0pXG5cbmV4cG9ydCBjbGFzcyBZZWFyUGFuZWxDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICBASW5wdXQoKSBsb2NhbGU6IE56Q2FsZW5kYXJJMThuSW50ZXJmYWNlO1xuXG4gIEBJbnB1dCgpIHZhbHVlOiBDYW5keURhdGU7XG4gIEBPdXRwdXQoKSB2YWx1ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Q2FuZHlEYXRlPigpO1xuXG4gIEBPdXRwdXQoKSBkZWNhZGVQYW5lbFNob3cgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cbiAgZ2V0IGN1cnJlbnRZZWFyKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWUuZ2V0WWVhcigpO1xuICB9XG4gIGdldCBzdGFydFllYXIoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gcGFyc2VJbnQoYCR7dGhpcy5jdXJyZW50WWVhciAvIDEwfWAsIDEwKSAqIDEwO1xuICB9XG4gIGdldCBlbmRZZWFyKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuc3RhcnRZZWFyICsgOTtcbiAgfVxuXG4gIHByZWZpeENsczogc3RyaW5nID0gJ2FudC1jYWxlbmRhci15ZWFyLXBhbmVsJztcbiAgcGFuZWxZZWFyczogUGFuZWxZZWFyRGF0YVtdW107XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKGNoYW5nZXMudmFsdWUpIHtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfVxuICB9XG5cbiAgcHJldmlvdXNEZWNhZGUoKTogdm9pZCB7XG4gICAgdGhpcy5nb3RvWWVhcigtMTApO1xuICB9XG5cbiAgbmV4dERlY2FkZSgpOiB2b2lkIHtcbiAgICB0aGlzLmdvdG9ZZWFyKDEwKTtcbiAgfVxuXG4gIHRyYWNrUGFuZWxZZWFyKGluZGV4OiBudW1iZXIsIHllYXJEYXRhOiBQYW5lbFllYXJEYXRhKTogc3RyaW5nIHtcbiAgICByZXR1cm4geWVhckRhdGEuY29udGVudDtcbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnZhbHVlKSB7XG4gICAgICB0aGlzLnBhbmVsWWVhcnMgPSB0aGlzLm1ha2VQYW5lbFllYXJzKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gUmUtcmVuZGVyIHBhbmVsIGNvbnRlbnQgYnkgdGhlIGhlYWRlcidzIGJ1dHRvbnMgKE5PVEU6IERvIG5vdCB0cnkgdG8gdHJpZ2dlciBmaW5hbCB2YWx1ZSBjaGFuZ2UpXG4gIHByaXZhdGUgZ290b1llYXIoYW1vdW50OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy52YWx1ZS5hZGRZZWFycyhhbW91bnQpO1xuICAgIC8vIHRoaXMudmFsdWVDaGFuZ2UuZW1pdCh0aGlzLnZhbHVlKTsgLy8gRG8gbm90IHRyaWdnZXIgZmluYWwgdmFsdWUgY2hhbmdlXG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHByaXZhdGUgY2hvb3NlWWVhcih5ZWFyOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy52YWx1ZS5zZXRZZWFyKHllYXIpO1xuICAgIHRoaXMudmFsdWVDaGFuZ2UuZW1pdCh0aGlzLnZhbHVlKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgcHJpdmF0ZSBtYWtlUGFuZWxZZWFycygpOiBQYW5lbFllYXJEYXRhW11bXSB7XG4gICAgY29uc3QgeWVhcnM6IFBhbmVsWWVhckRhdGFbXVtdID0gW107XG4gICAgY29uc3QgY3VycmVudFllYXIgPSB0aGlzLmN1cnJlbnRZZWFyO1xuICAgIGNvbnN0IHN0YXJ0WWVhciA9IHRoaXMuc3RhcnRZZWFyO1xuICAgIGNvbnN0IGVuZFllYXIgPSB0aGlzLmVuZFllYXI7XG4gICAgY29uc3QgcHJldmlvdXNZZWFyID0gc3RhcnRZZWFyIC0gMTtcbiAgICBsZXQgaW5kZXggPSAwO1xuICAgIGZvciAobGV0IHJvd0luZGV4ID0gMDsgcm93SW5kZXggPCBNQVhfUk9XOyByb3dJbmRleCArKykge1xuICAgICAgeWVhcnNbcm93SW5kZXhdID0gW107XG4gICAgICBmb3IgKGxldCBjb2xJbmRleCA9IDA7IGNvbEluZGV4IDwgTUFYX0NPTDsgY29sSW5kZXggKyspIHtcbiAgICAgICAgY29uc3QgeWVhciA9IHByZXZpb3VzWWVhciArIGluZGV4O1xuICAgICAgICBjb25zdCBjb250ZW50ID0gU3RyaW5nKHllYXIpO1xuXG4gICAgICAgIGNvbnN0IGNlbGwgPSB5ZWFyc1tyb3dJbmRleF1bY29sSW5kZXhdID0ge1xuICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgICAgeWVhcixcbiAgICAgICAgICB0aXRsZTogY29udGVudCxcbiAgICAgICAgICBpc0N1cnJlbnQ6IHllYXIgPT09IGN1cnJlbnRZZWFyLFxuICAgICAgICAgIGlzTG93ZXJUaGFuU3RhcnQ6IHllYXIgPCBzdGFydFllYXIsXG4gICAgICAgICAgaXNCaWdnZXJUaGFuRW5kOiB5ZWFyID4gZW5kWWVhcixcbiAgICAgICAgICBjbGFzc01hcDogbnVsbCxcbiAgICAgICAgICBvbkNsaWNrOiBudWxsXG4gICAgICAgIH07XG5cbiAgICAgICAgY2VsbC5jbGFzc01hcCA9IHtcbiAgICAgICAgICBbYCR7dGhpcy5wcmVmaXhDbHN9LWNlbGxgXTogdHJ1ZSxcbiAgICAgICAgICBbYCR7dGhpcy5wcmVmaXhDbHN9LXNlbGVjdGVkLWNlbGxgXTogY2VsbC5pc0N1cnJlbnQsXG4gICAgICAgICAgW2Ake3RoaXMucHJlZml4Q2xzfS1sYXN0LWRlY2FkZS1jZWxsYF06IGNlbGwuaXNMb3dlclRoYW5TdGFydCxcbiAgICAgICAgICBbYCR7dGhpcy5wcmVmaXhDbHN9LW5leHQtZGVjYWRlLWNlbGxgXTogY2VsbC5pc0JpZ2dlclRoYW5FbmRcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoY2VsbC5pc0xvd2VyVGhhblN0YXJ0KSB7XG4gICAgICAgICAgY2VsbC5vbkNsaWNrID0gKCkgPT4gdGhpcy5wcmV2aW91c0RlY2FkZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKGNlbGwuaXNCaWdnZXJUaGFuRW5kKSB7XG4gICAgICAgICAgY2VsbC5vbkNsaWNrID0gKCkgPT4gdGhpcy5uZXh0RGVjYWRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2VsbC5vbkNsaWNrID0gKCkgPT4gdGhpcy5jaG9vc2VZZWFyKGNlbGwueWVhcik7XG4gICAgICAgIH1cblxuICAgICAgICBpbmRleCArKztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHllYXJzO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFuZWxZZWFyRGF0YSB7XG4gIGNvbnRlbnQ6IHN0cmluZztcbiAgeWVhcjogbnVtYmVyO1xuICB0aXRsZTogc3RyaW5nO1xuICBpc0N1cnJlbnQ6IGJvb2xlYW47XG4gIGlzTG93ZXJUaGFuU3RhcnQ6IGJvb2xlYW47XG4gIGlzQmlnZ2VyVGhhbkVuZDogYm9vbGVhbjtcbiAgY2xhc3NNYXA6IG9iamVjdDtcbiAgb25DbGljaygpOiB2b2lkO1xufVxuIiwiLyoqXG4gKiBBIGNvbGxlY3Rpb24gbW9kdWxlIG9mIHN0YW5kYXJkIG91dHB1dCBmb3IgYWxsIGxpYiBjb21wb25lbnRzXG4gKi9cblxuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgTnpJMThuTW9kdWxlIH0gZnJvbSAnLi4vLi4vaTE4bi9uei1pMThuLm1vZHVsZSc7XG5pbXBvcnQgeyBOelRpbWVQaWNrZXJNb2R1bGUgfSBmcm9tICcuLi8uLi90aW1lLXBpY2tlci9uei10aW1lLXBpY2tlci5tb2R1bGUnO1xuXG5pbXBvcnQgeyBDYWxlbmRhckZvb3RlckNvbXBvbmVudCB9IGZyb20gJy4vY2FsZW5kYXIvY2FsZW5kYXItZm9vdGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDYWxlbmRhckhlYWRlckNvbXBvbmVudCB9IGZyb20gJy4vY2FsZW5kYXIvY2FsZW5kYXItaGVhZGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDYWxlbmRhcklucHV0Q29tcG9uZW50IH0gZnJvbSAnLi9jYWxlbmRhci9jYWxlbmRhci1pbnB1dC5jb21wb25lbnQnO1xuaW1wb3J0IHsgT2tCdXR0b25Db21wb25lbnQgfSBmcm9tICcuL2NhbGVuZGFyL29rLWJ1dHRvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgVGltZVBpY2tlckJ1dHRvbkNvbXBvbmVudCB9IGZyb20gJy4vY2FsZW5kYXIvdGltZS1waWNrZXItYnV0dG9uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBUb2RheUJ1dHRvbkNvbXBvbmVudCB9IGZyb20gJy4vY2FsZW5kYXIvdG9kYXktYnV0dG9uLmNvbXBvbmVudCc7XG5cbmltcG9ydCB7IERhdGVUYWJsZUNvbXBvbmVudCB9IGZyb20gJy4vZGF0ZS9kYXRlLXRhYmxlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEZWNhZGVQYW5lbENvbXBvbmVudCB9IGZyb20gJy4vZGVjYWRlL2RlY2FkZS1wYW5lbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTW9udGhQYW5lbENvbXBvbmVudCB9IGZyb20gJy4vbW9udGgvbW9udGgtcGFuZWwuY29tcG9uZW50JztcbmltcG9ydCB7IE1vbnRoVGFibGVDb21wb25lbnQgfSBmcm9tICcuL21vbnRoL21vbnRoLXRhYmxlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEYXRlUmFuZ2VQb3B1cENvbXBvbmVudCB9IGZyb20gJy4vcG9wdXBzL2RhdGUtcmFuZ2UtcG9wdXAuY29tcG9uZW50JztcbmltcG9ydCB7IElubmVyUG9wdXBDb21wb25lbnQgfSBmcm9tICcuL3BvcHVwcy9pbm5lci1wb3B1cC5jb21wb25lbnQnO1xuaW1wb3J0IHsgWWVhclBhbmVsQ29tcG9uZW50IH0gZnJvbSAnLi95ZWFyL3llYXItcGFuZWwuY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZSxcbiAgICBGb3Jtc01vZHVsZSxcblxuICAgIE56STE4bk1vZHVsZSxcbiAgICBOelRpbWVQaWNrZXJNb2R1bGVcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIENhbGVuZGFySGVhZGVyQ29tcG9uZW50LFxuICAgIENhbGVuZGFySW5wdXRDb21wb25lbnQsXG4gICAgQ2FsZW5kYXJGb290ZXJDb21wb25lbnQsXG4gICAgT2tCdXR0b25Db21wb25lbnQsXG4gICAgVGltZVBpY2tlckJ1dHRvbkNvbXBvbmVudCxcbiAgICBUb2RheUJ1dHRvbkNvbXBvbmVudCxcblxuICAgIERhdGVUYWJsZUNvbXBvbmVudCxcbiAgICBZZWFyUGFuZWxDb21wb25lbnQsXG4gICAgTW9udGhQYW5lbENvbXBvbmVudCxcbiAgICBNb250aFRhYmxlQ29tcG9uZW50LFxuICAgIERlY2FkZVBhbmVsQ29tcG9uZW50LFxuICAgIElubmVyUG9wdXBDb21wb25lbnQsXG4gICAgRGF0ZVJhbmdlUG9wdXBDb21wb25lbnRcbiAgXSxcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgQ2FsZW5kYXJIZWFkZXJDb21wb25lbnQsXG4gICAgQ2FsZW5kYXJJbnB1dENvbXBvbmVudCxcbiAgICBDYWxlbmRhckZvb3RlckNvbXBvbmVudCxcbiAgICBPa0J1dHRvbkNvbXBvbmVudCxcbiAgICBUaW1lUGlja2VyQnV0dG9uQ29tcG9uZW50LFxuICAgIFRvZGF5QnV0dG9uQ29tcG9uZW50LFxuXG4gICAgRGF0ZVRhYmxlQ29tcG9uZW50LFxuICAgIFllYXJQYW5lbENvbXBvbmVudCxcbiAgICBNb250aFBhbmVsQ29tcG9uZW50LFxuICAgIE1vbnRoVGFibGVDb21wb25lbnQsXG4gICAgRGVjYWRlUGFuZWxDb21wb25lbnQsXG4gICAgSW5uZXJQb3B1cENvbXBvbmVudCxcbiAgICBEYXRlUmFuZ2VQb3B1cENvbXBvbmVudFxuICBdXG59KVxuZXhwb3J0IGNsYXNzIExpYlBhY2tlck1vZHVsZSB7IH1cbiIsImltcG9ydCB7XG4gIENka0Nvbm5lY3RlZE92ZXJsYXksXG4gIENka092ZXJsYXlPcmlnaW4sXG4gIENvbm5lY3RlZE92ZXJsYXlQb3NpdGlvbkNoYW5nZSxcbiAgQ29ubmVjdGlvblBvc2l0aW9uUGFpclxufSBmcm9tICdAYW5ndWxhci9jZGsvb3ZlcmxheSc7XG5pbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT25Jbml0LFxuICBPdXRwdXQsXG4gIFZpZXdDaGlsZFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgZHJvcERvd25BbmltYXRpb24gfSBmcm9tICcuLi9jb3JlL2FuaW1hdGlvbi9kcm9wZG93bi1hbmltYXRpb25zJztcbmltcG9ydCB7IE56STE4blNlcnZpY2UgfSBmcm9tICcuLi9pMThuL256LWkxOG4uc2VydmljZSc7XG5pbXBvcnQgeyBDYW5keURhdGUgfSBmcm9tICcuL2xpYi9jYW5keS1kYXRlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yICAgICAgIDogJ256LXBpY2tlcicsXG4gIHRlbXBsYXRlVXJsICAgIDogJy4vcGlja2VyLmNvbXBvbmVudC5odG1sJyxcbiAgYW5pbWF0aW9ucyAgICAgOiBbXG4gICAgZHJvcERvd25BbmltYXRpb25cbiAgXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5cbmV4cG9ydCBjbGFzcyBOelBpY2tlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XG4gIEBJbnB1dCgpIGlzUmFuZ2U6IGJvb2xlYW4gPSBmYWxzZTtcbiAgQElucHV0KCkgb3BlbjogYm9vbGVhbiA9IHVuZGVmaW5lZDsgLy8gXCJ1bmRlZmluZWRcIiA9IHRoaXMgdmFsdWUgd2lsbCBiZSBub3QgdXNlZFxuICBASW5wdXQoKSBkaXNhYmxlZDogYm9vbGVhbjtcbiAgQElucHV0KCkgcGxhY2Vob2xkZXI6IHN0cmluZyB8IHN0cmluZ1tdO1xuICBASW5wdXQoKSBhbGxvd0NsZWFyOiBib29sZWFuO1xuICBASW5wdXQoKSBhdXRvRm9jdXM6IGJvb2xlYW47XG4gIEBJbnB1dCgpIGNsYXNzTmFtZTogc3RyaW5nO1xuICBASW5wdXQoKSBmb3JtYXQ6IHN0cmluZztcbiAgQElucHV0KCkgc2l6ZTogJ2xhcmdlJyB8ICdzbWFsbCc7XG4gIEBJbnB1dCgpIHN0eWxlOiBvYmplY3Q7XG5cbiAgQElucHV0KCkgdmFsdWU6IENhbmR5RGF0ZSB8IENhbmR5RGF0ZVtdO1xuICBAT3V0cHV0KCkgdmFsdWVDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPENhbmR5RGF0ZSB8IENhbmR5RGF0ZVtdPigpO1xuXG4gIEBPdXRwdXQoKSBvcGVuQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpOyAvLyBFbWl0dGVkIHdoZW4gb3ZlcmxheSdzIG9wZW4gc3RhdGUgY2hhbmdlXG5cbiAgQFZpZXdDaGlsZCgnb3JpZ2luJykgb3JpZ2luOiBDZGtPdmVybGF5T3JpZ2luO1xuICBAVmlld0NoaWxkKENka0Nvbm5lY3RlZE92ZXJsYXkpIGNka0Nvbm5lY3RlZE92ZXJsYXk6IENka0Nvbm5lY3RlZE92ZXJsYXk7XG4gIEBWaWV3Q2hpbGQoJ3BpY2tlcklucHV0JykgcGlja2VySW5wdXQ6IEVsZW1lbnRSZWY7XG5cbiAgcHJlZml4Q2xzID0gJ2FudC1jYWxlbmRhcic7XG4gIGFuaW1hdGlvbk9wZW5TdGF0ZSA9IGZhbHNlO1xuICBvdmVybGF5T3BlbjogYm9vbGVhbiA9IGZhbHNlOyAvLyBBdmFpbGFibGUgd2hlbiBcIm9wZW5cIj11bmRlZmluZWRcbiAgb3ZlcmxheU9mZnNldFk6IG51bWJlciA9IDA7XG4gIG92ZXJsYXlPZmZzZXRYOiBudW1iZXIgPSAtMjtcbiAgb3ZlcmxheVBvc2l0aW9uczogQ29ubmVjdGlvblBvc2l0aW9uUGFpcltdID0gW1xuICAgIHtcbiAgICAgIC8vIG9mZnNldFg6IC0xMCwgLy8gVE9ETzogV2hhdCBhIHBpdHksIGNkay9vdmVybGF5IGN1cnJlbnQgbm90IHN1cHBvcnQgb2Zmc2V0IGNvbmZpZ3MgZXZlbiB0aG91Z2ggaXQgYWxyZWFkeSBwcm92aWRlIHRoZXNlIHByb3BlcnRpZXNcbiAgICAgIC8vIG9mZnNldFk6IC0xMCxcbiAgICAgIG9yaWdpblggOiAnc3RhcnQnLFxuICAgICAgb3JpZ2luWSA6ICd0b3AnLFxuICAgICAgb3ZlcmxheVg6ICdzdGFydCcsXG4gICAgICBvdmVybGF5WTogJ3RvcCdcbiAgICB9LFxuICAgIHtcbiAgICAgIG9yaWdpblggOiAnc3RhcnQnLFxuICAgICAgb3JpZ2luWSA6ICdib3R0b20nLFxuICAgICAgb3ZlcmxheVg6ICdzdGFydCcsXG4gICAgICBvdmVybGF5WTogJ2JvdHRvbSdcbiAgICB9LFxuICAgIHtcbiAgICAgIG9yaWdpblggOiAnZW5kJyxcbiAgICAgIG9yaWdpblkgOiAndG9wJyxcbiAgICAgIG92ZXJsYXlYOiAnZW5kJyxcbiAgICAgIG92ZXJsYXlZOiAndG9wJ1xuICAgIH0sXG4gICAge1xuICAgICAgb3JpZ2luWCA6ICdlbmQnLFxuICAgICAgb3JpZ2luWSA6ICdib3R0b20nLFxuICAgICAgb3ZlcmxheVg6ICdlbmQnLFxuICAgICAgb3ZlcmxheVk6ICdib3R0b20nXG4gICAgfVxuICBdIGFzIENvbm5lY3Rpb25Qb3NpdGlvblBhaXJbXTtcbiAgZHJvcGRvd25BbmltYXRpb246ICd0b3AnIHwgJ2JvdHRvbScgPSAnYm90dG9tJztcbiAgY3VycmVudFBvc2l0aW9uWDogJ3N0YXJ0JyB8ICdlbmQnID0gJ3N0YXJ0JztcbiAgY3VycmVudFBvc2l0aW9uWTogJ3RvcCcgfCAnYm90dG9tJyA9ICd0b3AnO1xuICAvLyBnZXQgdmFsdWVSZWFkYWJsZSgpOiBzdHJpbmcge1xuICAvLyAgIHJldHVybiB0aGlzLnZhbHVlICYmIHRoaXMuaTE4bi5mb3JtYXREYXRlQ29tcGF0aWJsZSh0aGlzLnZhbHVlLm5hdGl2ZURhdGUsIHRoaXMuZm9ybWF0KTtcbiAgLy8gfVxuICBnZXQgcmVhbE9wZW5TdGF0ZSgpOiBib29sZWFuIHsgLy8gVGhlIHZhbHVlIHRoYXQgcmVhbGx5IGRlY2lkZSB0aGUgb3BlbiBzdGF0ZSBvZiBvdmVybGF5XG4gICAgcmV0dXJuIHRoaXMuaXNPcGVuSGFuZGxlZEJ5VXNlcigpID8gdGhpcy5vcGVuIDogdGhpcy5vdmVybGF5T3BlbjtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaTE4bjogTnpJMThuU2VydmljZSwgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmF1dG9Gb2N1cykge1xuICAgICAgaWYgKHRoaXMuaXNSYW5nZSkge1xuICAgICAgICBjb25zdCBmaXJzdElucHV0ID0gKHRoaXMucGlja2VySW5wdXQubmF0aXZlRWxlbWVudCBhcyBIVE1MRWxlbWVudCkucXVlcnlTZWxlY3RvcignaW5wdXQ6Zmlyc3QtY2hpbGQnKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgICAgICBmaXJzdElucHV0LmZvY3VzKCk7IC8vIEZvY3VzIG9uIHRoZSBmaXJzdCBpbnB1dFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5waWNrZXJJbnB1dC5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gU2hvdyBvdmVybGF5IGNvbnRlbnRcbiAgc2hvd092ZXJsYXkoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLnJlYWxPcGVuU3RhdGUpIHtcbiAgICAgIHRoaXMub3ZlcmxheU9wZW4gPSB0cnVlO1xuICAgICAgdGhpcy5vcGVuQ2hhbmdlLmVtaXQodGhpcy5vdmVybGF5T3Blbik7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuY2RrQ29ubmVjdGVkT3ZlcmxheSAmJiB0aGlzLmNka0Nvbm5lY3RlZE92ZXJsYXkub3ZlcmxheVJlZikge1xuICAgICAgICAgIHRoaXMuY2RrQ29ubmVjdGVkT3ZlcmxheS5vdmVybGF5UmVmLnVwZGF0ZVBvc2l0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGhpZGVPdmVybGF5KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnJlYWxPcGVuU3RhdGUpIHtcbiAgICAgIHRoaXMub3ZlcmxheU9wZW4gPSBmYWxzZTtcbiAgICAgIHRoaXMub3BlbkNoYW5nZS5lbWl0KHRoaXMub3ZlcmxheU9wZW4pO1xuICAgIH1cbiAgfVxuXG4gIG9uQ2xpY2tJbnB1dEJveCgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuZGlzYWJsZWQgJiYgIXRoaXMuaXNPcGVuSGFuZGxlZEJ5VXNlcigpKSB7XG4gICAgICB0aGlzLnNob3dPdmVybGF5KCk7XG4gICAgfVxuICB9XG5cbiAgb25DbGlja0JhY2tkcm9wKCk6IHZvaWQge1xuICAgIHRoaXMuaGlkZU92ZXJsYXkoKTtcbiAgfVxuXG4gIG9uT3ZlcmxheURldGFjaCgpOiB2b2lkIHtcbiAgICB0aGlzLmhpZGVPdmVybGF5KCk7XG4gIH1cblxuICAvLyBOT1RFOiBBIGlzc3VlIGhlcmUsIHRoZSBmaXJzdCB0aW1lIHBvc2l0aW9uIGNoYW5nZSwgdGhlIGFuaW1hdGlvbiB3aWxsIG5vdCBiZSB0cmlnZ2VyZWQuXG4gIC8vIEJlY2F1c2UgdGhlIG92ZXJsYXkncyBcInBvc2l0aW9uQ2hhbmdlXCIgZXZlbnQgaXMgZW1pdHRlZCBhZnRlciB0aGUgY29udGVudCdzIGZ1bGwgc2hvd24gdXAuXG4gIC8vIEFsbCBvdGhlciBjb21wb25lbnRzIGxpa2UgXCJuei1kcm9wZG93blwiIHdoaWNoIGRlcGVuZHMgb24gb3ZlcmxheSBhbHNvIGhhcyB0aGUgc2FtZSBpc3N1ZS5cbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vTkctWk9SUk8vbmctem9ycm8tYW50ZC9pc3N1ZXMvMTQyOVxuICBvblBvc2l0aW9uQ2hhbmdlKHBvc2l0aW9uOiBDb25uZWN0ZWRPdmVybGF5UG9zaXRpb25DaGFuZ2UpOiB2b2lkIHtcbiAgICB0aGlzLmRyb3Bkb3duQW5pbWF0aW9uID0gcG9zaXRpb24uY29ubmVjdGlvblBhaXIub3JpZ2luWSA9PT0gJ3RvcCcgPyAnYm90dG9tJyA6ICd0b3AnO1xuICAgIHRoaXMuY3VycmVudFBvc2l0aW9uWCA9IHBvc2l0aW9uLmNvbm5lY3Rpb25QYWlyLm9yaWdpblggYXMgJ3N0YXJ0JyB8ICdlbmQnO1xuICAgIHRoaXMuY3VycmVudFBvc2l0aW9uWSA9IHBvc2l0aW9uLmNvbm5lY3Rpb25QYWlyLm9yaWdpblkgYXMgJ3RvcCcgfCAnYm90dG9tJztcbiAgICB0aGlzLmNoYW5nZURldGVjdG9yLmRldGVjdENoYW5nZXMoKTsgLy8gVGFrZSBzaWRlLWVmZmVjdHMgdG8gcG9zaXRpb24gc3R5bGVzXG4gIH1cblxuICBvbkNsaWNrQ2xlYXIoZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgdGhpcy52YWx1ZSA9IHRoaXMuaXNSYW5nZSA/IFtdIDogbnVsbDtcbiAgICB0aGlzLnZhbHVlQ2hhbmdlLmVtaXQodGhpcy52YWx1ZSk7XG4gIH1cblxuICBnZXRSZWFkYWJsZVZhbHVlKHBhcnRUeXBlPzogUmFuZ2VQYXJ0VHlwZSk6IHN0cmluZyB7XG4gICAgbGV0IHZhbHVlOiBDYW5keURhdGU7XG4gICAgaWYgKHRoaXMuaXNSYW5nZSkge1xuICAgICAgdmFsdWUgPSB0aGlzLnZhbHVlWyB0aGlzLmdldFBhcnRUeXBlSW5kZXgocGFydFR5cGUpIF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlID0gdGhpcy52YWx1ZSBhcyBDYW5keURhdGU7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZSA/IHRoaXMuaTE4bi5mb3JtYXREYXRlQ29tcGF0aWJsZSh2YWx1ZS5uYXRpdmVEYXRlLCB0aGlzLmZvcm1hdCkgOiBudWxsO1xuICB9XG5cbiAgZ2V0UGFydFR5cGVJbmRleChwYXJ0VHlwZTogUmFuZ2VQYXJ0VHlwZSk6IG51bWJlciB7XG4gICAgcmV0dXJuIHsgJ2xlZnQnOiAwLCAncmlnaHQnOiAxIH1bIHBhcnRUeXBlIF07XG4gIH1cblxuICBnZXRQbGFjZWhvbGRlcihwYXJ0VHlwZT86IFJhbmdlUGFydFR5cGUpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmlzUmFuZ2UgPyB0aGlzLnBsYWNlaG9sZGVyWyB0aGlzLmdldFBhcnRUeXBlSW5kZXgocGFydFR5cGUpIF0gOiB0aGlzLnBsYWNlaG9sZGVyIGFzIHN0cmluZztcbiAgfVxuXG4gIGlzRW1wdHlWYWx1ZSh2YWx1ZTogQ2FuZHlEYXRlW10gfCBDYW5keURhdGUpOiBib29sZWFuIHtcbiAgICBpZiAodGhpcy5pc1JhbmdlKSB7XG4gICAgICByZXR1cm4gIXZhbHVlIHx8ICFBcnJheS5pc0FycmF5KHZhbHVlKSB8fCB2YWx1ZS5ldmVyeSgodmFsKSA9PiAhdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICF2YWx1ZTtcbiAgICB9XG4gIH1cblxuICAvLyBXaGV0aGVyIG9wZW4gc3RhdGUgaXMgcGVybWFuZW50bHkgY29udHJvbGxlZCBieSB1c2VyIGhpbXNlbGZcbiAgaXNPcGVuSGFuZGxlZEJ5VXNlcigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5vcGVuICE9PSB1bmRlZmluZWQ7XG4gIH1cblxuICBhbmltYXRpb25TdGFydCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5yZWFsT3BlblN0YXRlKSB7XG4gICAgICB0aGlzLmFuaW1hdGlvbk9wZW5TdGF0ZSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgYW5pbWF0aW9uRG9uZSgpOiB2b2lkIHtcbiAgICB0aGlzLmFuaW1hdGlvbk9wZW5TdGF0ZSA9IHRoaXMucmVhbE9wZW5TdGF0ZTtcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBSYW5nZVBhcnRUeXBlID0gJ2xlZnQnIHwgJ3JpZ2h0JztcbiIsImltcG9ydCB7XG4gIEV2ZW50RW1pdHRlcixcbiAgSW5wdXQsXG4gIE9uQ2hhbmdlcyxcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG4gIE91dHB1dCxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IElucHV0Qm9vbGVhbiB9IGZyb20gJy4uL2NvcmUvdXRpbC9jb252ZXJ0JztcbmltcG9ydCB7IE56RGF0ZVBpY2tlckkxOG5JbnRlcmZhY2UgfSBmcm9tICcuLi9pMThuL256LWkxOG4uaW50ZXJmYWNlJztcbmltcG9ydCB7IE56STE4blNlcnZpY2UgfSBmcm9tICcuLi9pMThuL256LWkxOG4uc2VydmljZSc7XG5pbXBvcnQgeyBDYW5keURhdGUgfSBmcm9tICcuL2xpYi9jYW5keS1kYXRlJztcbmltcG9ydCB7IE56UGlja2VyQ29tcG9uZW50IH0gZnJvbSAnLi9waWNrZXIuY29tcG9uZW50JztcblxuY29uc3QgUE9QVVBfU1RZTEVfUEFUQ0ggPSB7ICdwb3NpdGlvbic6ICdyZWxhdGl2ZScgfTsgLy8gQWltIHRvIG92ZXJyaWRlIGFudGQncyBzdHlsZSB0byBzdXBwb3J0IG92ZXJsYXkncyBwb3NpdGlvbiBzdHJhdGVneSAocG9zaXRpb246YWJzb2x1dGUgd2lsbCBjYXVzZSBpdCBub3Qgd29ya2luZyBiZWFjdXNlIHRoZSBvdmVybGF5IGNhbid0IGdldCB0aGUgaGVpZ2h0L3dpZHRoIG9mIGl0J3MgY29udGVudClcblxuLyoqXG4gKiBUaGUgYmFzZSBwaWNrZXIgZm9yIGFsbCBjb21tb24gQVBJc1xuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RQaWNrZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gIC8vIC0tLSBDb21tb24gQVBJXG4gIEBJbnB1dCgpIEBJbnB1dEJvb2xlYW4oKSBuekFsbG93Q2xlYXI6IGJvb2xlYW4gPSB0cnVlO1xuICBASW5wdXQoKSBASW5wdXRCb29sZWFuKCkgbnpBdXRvRm9jdXM6IGJvb2xlYW4gPSBmYWxzZTtcbiAgQElucHV0KCkgQElucHV0Qm9vbGVhbigpIG56RGlzYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgQElucHV0KCkgQElucHV0Qm9vbGVhbigpIG56T3BlbjogYm9vbGVhbjtcbiAgQElucHV0KCkgbnpDbGFzc05hbWU6IHN0cmluZztcbiAgQElucHV0KCkgbnpEaXNhYmxlZERhdGU6IChkOiBEYXRlKSA9PiBib29sZWFuO1xuICBASW5wdXQoKSBuekxvY2FsZTogTnpEYXRlUGlja2VySTE4bkludGVyZmFjZTtcbiAgQElucHV0KCkgbnpQbGFjZUhvbGRlcjogc3RyaW5nIHwgc3RyaW5nW107XG4gIEBJbnB1dCgpIG56UG9wdXBTdHlsZTogb2JqZWN0ID0gUE9QVVBfU1RZTEVfUEFUQ0g7XG4gIEBJbnB1dCgpIG56RHJvcGRvd25DbGFzc05hbWU6IHN0cmluZztcbiAgQElucHV0KCkgbnpTaXplOiAnbGFyZ2UnIHwgJ3NtYWxsJztcbiAgQElucHV0KCkgbnpTdHlsZTogb2JqZWN0O1xuICBAT3V0cHV0KCkgbnpPbk9wZW5DaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG5cbiAgQElucHV0KCkgbnpGb3JtYXQ6IHN0cmluZztcblxuICBASW5wdXQoKSBuelZhbHVlOiBDb21wYXRpYmxlVmFsdWU7XG5cbiAgQFZpZXdDaGlsZChOelBpY2tlckNvbXBvbmVudCkgcHJvdGVjdGVkIHBpY2tlcjogTnpQaWNrZXJDb21wb25lbnQ7XG5cbiAgaXNSYW5nZTogYm9vbGVhbiA9IGZhbHNlOyAvLyBJbmRpY2F0ZSB3aGV0aGVyIHRoZSB2YWx1ZSBpcyBhIHJhbmdlIHZhbHVlXG5cbiAgZ2V0IHJlYWxPcGVuU3RhdGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMucGlja2VyLmFuaW1hdGlvbk9wZW5TdGF0ZTtcbiAgfSAvLyBVc2UgcGlja2VyJ3MgcmVhbCBvcGVuIHN0YXRlIHRvIGxldCByZS1yZW5kZXIgdGhlIHBpY2tlcidzIGNvbnRlbnQgd2hlbiBzaG93biB1cFxuXG4gIGluaXRWYWx1ZSgpOiB2b2lkIHtcbiAgICB0aGlzLm56VmFsdWUgPSB0aGlzLmlzUmFuZ2UgPyBbXSA6IG51bGw7XG4gIH1cblxuICBwcm90ZWN0ZWQgZGVzdHJveWVkJDogU3ViamVjdDx2b2lkPiA9IG5ldyBTdWJqZWN0KCk7XG4gIHByb3RlY3RlZCBpc0N1c3RvbVBsYWNlSG9sZGVyOiBib29sZWFuID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGkxOG46IE56STE4blNlcnZpY2UpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIC8vIFN1YnNjcmliZSB0aGUgZXZlcnkgbG9jYWxlIGNoYW5nZSBpZiB0aGUgbnpMb2NhbGUgaXMgbm90IGhhbmRsZWQgYnkgdXNlclxuICAgIGlmICghdGhpcy5uekxvY2FsZSkge1xuICAgICAgdGhpcy5pMThuLmxvY2FsZUNoYW5nZVxuICAgICAgICAucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0cm95ZWQkKSlcbiAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB0aGlzLnNldExvY2FsZSgpKTtcbiAgICB9XG5cbiAgICAvLyBEZWZhdWx0IHZhbHVlXG4gICAgdGhpcy5pbml0VmFsdWUoKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBpZiAoY2hhbmdlcy5uelBvcHVwU3R5bGUpIHsgLy8gQWx3YXlzIGFzc2lnbiB0aGUgcG9wdXAgc3R5bGUgcGF0Y2hcbiAgICAgIHRoaXMubnpQb3B1cFN0eWxlID0gdGhpcy5uelBvcHVwU3R5bGUgPyB7IC4uLnRoaXMubnpQb3B1cFN0eWxlLCAuLi5QT1BVUF9TVFlMRV9QQVRDSCB9IDogUE9QVVBfU1RZTEVfUEFUQ0g7XG4gICAgfVxuXG4gICAgLy8gTWFyayBhcyBjdXN0b21pemVkIHBsYWNlaG9sZGVyIGJ5IHVzZXIgb25jZSBuelBsYWNlSG9sZGVyIGFzc2lnbmVkIGF0IHRoZSBmaXJzdCB0aW1lXG4gICAgaWYgKGNoYW5nZXMubnpQbGFjZUhvbGRlciAmJiBjaGFuZ2VzLm56UGxhY2VIb2xkZXIuZmlyc3RDaGFuZ2UgJiYgdHlwZW9mIHRoaXMubnpQbGFjZUhvbGRlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMuaXNDdXN0b21QbGFjZUhvbGRlciA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGNoYW5nZXMubnpMb2NhbGUpIHsgLy8gVGhlIG56TG9jYWxlIGlzIGN1cnJlbnRseSBoYW5kbGVkIGJ5IHVzZXJcbiAgICAgIHRoaXMuc2V0RGVmYXVsdFBsYWNlSG9sZGVyKCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5kZXN0cm95ZWQkLm5leHQoKTtcbiAgICB0aGlzLmRlc3Ryb3llZCQuY29tcGxldGUoKTtcbiAgfVxuXG4gIGNsb3NlT3ZlcmxheSgpOiB2b2lkIHtcbiAgICB0aGlzLnBpY2tlci5oaWRlT3ZlcmxheSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbW1vbiBoYW5kbGUgZm9yIHZhbHVlIGNoYW5nZXNcbiAgICogQHBhcmFtIHZhbHVlIGNoYW5nZWQgdmFsdWVcbiAgICovXG4gIG9uVmFsdWVDaGFuZ2UodmFsdWU6IENvbXBhdGlibGVWYWx1ZSk6IHZvaWQge1xuICAgIHRoaXMubnpWYWx1ZSA9IHZhbHVlO1xuICAgIGlmICh0aGlzLmlzUmFuZ2UpIHtcbiAgICAgIGlmICgodGhpcy5uelZhbHVlIGFzIENhbmR5RGF0ZVtdKS5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5vbkNoYW5nZUZuKFsgdGhpcy5uelZhbHVlWyAwIF0ubmF0aXZlRGF0ZSwgdGhpcy5uelZhbHVlWyAxIF0ubmF0aXZlRGF0ZSBdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub25DaGFuZ2VGbihbXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLm56VmFsdWUpIHtcbiAgICAgICAgdGhpcy5vbkNoYW5nZUZuKCh0aGlzLm56VmFsdWUgYXMgQ2FuZHlEYXRlKS5uYXRpdmVEYXRlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub25DaGFuZ2VGbihudWxsKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5vblRvdWNoZWRGbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRyaWdnZXJlZCB3aGVuIG92ZXJsYXlPcGVuIGNoYW5nZXMgKGRpZmZlcmVudCB3aXRoIHJlYWxPcGVuU3RhdGUpXG4gICAqIEBwYXJhbSBvcGVuIFRoZSBvdmVybGF5T3BlbiBpbiBwaWNrZXIgY29tcG9uZW50XG4gICAqL1xuICBvbk9wZW5DaGFuZ2Uob3BlbjogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMubnpPbk9wZW5DaGFuZ2UuZW1pdChvcGVuKTtcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IENvbnRyb2wgdmFsdWUgYWNjZXNzb3IgaW1wbGVtZW50c1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBOT1RFOiBvbkNoYW5nZUZuL29uVG91Y2hlZEZuIHdpbGwgbm90IGJlIGFzc2lnbmVkIGlmIHVzZXIgbm90IHVzZSBhcyBuZ01vZGVsXG4gIG9uQ2hhbmdlRm46ICh2YWw6IENvbXBhdGlibGVEYXRlKSA9PiB2b2lkID0gKCkgPT4gdm9pZCAwO1xuICBvblRvdWNoZWRGbjogKCkgPT4gdm9pZCA9ICgpID0+IHZvaWQgMDtcblxuICB3cml0ZVZhbHVlKHZhbHVlOiBDb21wYXRpYmxlRGF0ZSk6IHZvaWQge1xuICAgIHRoaXMuc2V0VmFsdWUodmFsdWUpO1xuICB9XG5cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZCB7IC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8tYW55XG4gICAgdGhpcy5vbkNoYW5nZUZuID0gZm47XG4gIH1cblxuICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZCB7IC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8tYW55XG4gICAgdGhpcy5vblRvdWNoZWRGbiA9IGZuO1xuICB9XG5cbiAgc2V0RGlzYWJsZWRTdGF0ZShkaXNhYmxlZDogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMubnpEaXNhYmxlZCA9IGRpc2FibGVkO1xuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgSW50ZXJuYWwgbWV0aG9kc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBSZWxvYWQgbG9jYWxlIGZyb20gaTE4biB3aXRoIHNpZGUgZWZmZWN0c1xuICBwcml2YXRlIHNldExvY2FsZSgpOiB2b2lkIHtcbiAgICB0aGlzLm56TG9jYWxlID0gdGhpcy5pMThuLmdldExvY2FsZURhdGEoJ0RhdGVQaWNrZXInLCB7fSk7XG4gICAgdGhpcy5zZXREZWZhdWx0UGxhY2VIb2xkZXIoKTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0RGVmYXVsdFBsYWNlSG9sZGVyKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5pc0N1c3RvbVBsYWNlSG9sZGVyICYmIHRoaXMubnpMb2NhbGUpIHtcbiAgICAgIHRoaXMubnpQbGFjZUhvbGRlciA9IHRoaXMuaXNSYW5nZSA/IHRoaXMubnpMb2NhbGUubGFuZy5yYW5nZVBsYWNlaG9sZGVyIDogdGhpcy5uekxvY2FsZS5sYW5nLnBsYWNlaG9sZGVyO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZm9ybWF0RGF0ZShkYXRlOiBDYW5keURhdGUpOiBzdHJpbmcge1xuICAgIHJldHVybiBkYXRlID8gdGhpcy5pMThuLmZvcm1hdERhdGVDb21wYXRpYmxlKGRhdGUubmF0aXZlRGF0ZSwgdGhpcy5uekZvcm1hdCkgOiAnJztcbiAgfVxuXG4gIC8vIFNhZmUgd2F5IG9mIHNldHRpbmcgdmFsdWUgd2l0aCBkZWZhdWx0XG4gIHByaXZhdGUgc2V0VmFsdWUodmFsdWU6IENvbXBhdGlibGVEYXRlKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNSYW5nZSkge1xuICAgICAgdGhpcy5uelZhbHVlID0gdmFsdWUgPyAodmFsdWUgYXMgRGF0ZVtdKS5tYXAodmFsID0+IG5ldyBDYW5keURhdGUodmFsKSkgOiBbXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5uelZhbHVlID0gdmFsdWUgPyBuZXcgQ2FuZHlEYXRlKHZhbHVlIGFzIERhdGUpIDogbnVsbDtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgQ29tcGF0aWJsZVZhbHVlID0gQ2FuZHlEYXRlIHwgQ2FuZHlEYXRlW107XG5cbmV4cG9ydCB0eXBlIENvbXBhdGlibGVEYXRlID0gRGF0ZSB8IERhdGVbXTtcbiIsImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25DaGFuZ2VzLCBPbkluaXQsIE91dHB1dCwgU2ltcGxlQ2hhbmdlcywgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgRnVuY3Rpb25Qcm9wIH0gZnJvbSAnLi4vY29yZS90eXBlcy9jb21tb24td3JhcCc7XG5pbXBvcnQgeyB0b0Jvb2xlYW4sIHZhbHVlRnVuY3Rpb25Qcm9wLCBJbnB1dEJvb2xlYW4gfSBmcm9tICcuLi9jb3JlL3V0aWwvY29udmVydCc7XG5pbXBvcnQgeyBOekkxOG5TZXJ2aWNlIH0gZnJvbSAnLi4vaTE4bi9uei1pMThuLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2FuZHlEYXRlIH0gZnJvbSAnLi9saWIvY2FuZHktZGF0ZSc7XG5cbmltcG9ydCB7IEFic3RyYWN0UGlja2VyQ29tcG9uZW50LCBDb21wYXRpYmxlRGF0ZSB9IGZyb20gJy4vYWJzdHJhY3QtcGlja2VyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEaXNhYmxlZFRpbWVGbiwgUGFuZWxNb2RlLCBQcmVzZXRSYW5nZXMgfSBmcm9tICcuL3N0YW5kYXJkLXR5cGVzJztcblxuQENvbXBvbmVudCh7XG4gIHRlbXBsYXRlOiBgYCAvLyBKdXN0IGZvciByb2xsdXBcbn0pXG5cbmV4cG9ydCBjbGFzcyBEYXRlUmFuZ2VQaWNrZXJDb21wb25lbnQgZXh0ZW5kcyBBYnN0cmFjdFBpY2tlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgc2hvd1dlZWs6IGJvb2xlYW4gPSBmYWxzZTsgLy8gU2hvdWxkIHNob3cgYXMgd2VlayBwaWNrZXJcblxuICBASW5wdXQoKSBuekRhdGVSZW5kZXI6IEZ1bmN0aW9uUHJvcDxUZW1wbGF0ZVJlZjxEYXRlPiB8IHN0cmluZz47XG4gIEBJbnB1dCgpIG56RGlzYWJsZWRUaW1lOiBEaXNhYmxlZFRpbWVGbjtcbiAgQElucHV0KCkgbnpSZW5kZXJFeHRyYUZvb3RlcjogRnVuY3Rpb25Qcm9wPFRlbXBsYXRlUmVmPHZvaWQ+IHwgc3RyaW5nPjtcbiAgQElucHV0KCkgQElucHV0Qm9vbGVhbigpIG56U2hvd1RvZGF5OiBib29sZWFuID0gdHJ1ZTtcbiAgQElucHV0KCkgbnpNb2RlOiBQYW5lbE1vZGUgfCBQYW5lbE1vZGVbXTtcbiAgQElucHV0KCkgbnpSYW5nZXM6IEZ1bmN0aW9uUHJvcDxQcmVzZXRSYW5nZXM+O1xuICBAT3V0cHV0KCkgbnpPblBhbmVsQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxQYW5lbE1vZGUgfCBQYW5lbE1vZGVbXT4oKTtcblxuICBwcml2YXRlIF9zaG93VGltZTogb2JqZWN0IHwgYm9vbGVhbjtcbiAgQElucHV0KCkgZ2V0IG56U2hvd1RpbWUoKTogb2JqZWN0IHwgYm9vbGVhbiB7IHJldHVybiB0aGlzLl9zaG93VGltZTsgfVxuICBzZXQgbnpTaG93VGltZSh2YWx1ZTogb2JqZWN0IHwgYm9vbGVhbikge1xuICAgIHRoaXMuX3Nob3dUaW1lID0gdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyA/IHZhbHVlIDogdG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIEBPdXRwdXQoKSBuek9uT2sgPSBuZXcgRXZlbnRFbWl0dGVyPENvbXBhdGlibGVEYXRlPigpO1xuXG4gIGdldCByZWFsU2hvd1RvZGF5KCk6IGJvb2xlYW4geyAvLyBSYW5nZSBub3Qgc3VwcG9ydCBuelNob3dUb2RheSBjdXJyZW50bHlcbiAgICByZXR1cm4gIXRoaXMuaXNSYW5nZSAmJiB0aGlzLm56U2hvd1RvZGF5O1xuICB9XG5cbiAgcGlja2VyU3R5bGU6IG9iamVjdDsgLy8gRmluYWwgcGlja2VyIHN0eWxlIHRoYXQgY29udGFpbnMgd2lkdGggZml4IGNvcnJlY3Rpb25zIGV0Yy5cbiAgZXh0cmFGb290ZXI6IFRlbXBsYXRlUmVmPHZvaWQ+IHwgc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKGkxOG46IE56STE4blNlcnZpY2UpIHtcbiAgICBzdXBlcihpMThuKTtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHN1cGVyLm5nT25Jbml0KCk7XG5cbiAgICAvLyBEZWZhdWx0IGZvcm1hdCB3aGVuIGl0J3MgZW1wdHlcbiAgICBpZiAoIXRoaXMubnpGb3JtYXQpIHtcbiAgICAgIGlmICh0aGlzLnNob3dXZWVrKSB7XG4gICAgICAgIHRoaXMubnpGb3JtYXQgPSAneXl5eS13dyc7IC8vIEZvcm1hdCBmb3Igd2Vla1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5uekZvcm1hdCA9IHRoaXMubnpTaG93VGltZSA/ICd5eXl5LU1NLWRkIEhIOm1tOnNzJyA6ICd5eXl5LU1NLWRkJztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgc3VwZXIubmdPbkNoYW5nZXMoY2hhbmdlcyk7XG5cbiAgICBpZiAoY2hhbmdlcy5uelJlbmRlckV4dHJhRm9vdGVyKSB7XG4gICAgICB0aGlzLmV4dHJhRm9vdGVyID0gdmFsdWVGdW5jdGlvblByb3AodGhpcy5uelJlbmRlckV4dHJhRm9vdGVyKTtcbiAgICB9XG5cbiAgICBpZiAoY2hhbmdlcy5uelNob3dUaW1lIHx8IGNoYW5nZXMubnpTdHlsZSkge1xuICAgICAgdGhpcy5zZXRGaXhlZFBpY2tlclN0eWxlKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gSWYgaGFzIG5vIHRpbWVwaWNrZXIgYW5kIHRoZSB1c2VyIHNlbGVjdCBhIGRhdGUgYnkgZGF0ZSBwYW5lbCwgdGhlbiBjbG9zZSBwaWNrZXJcbiAgb25WYWx1ZUNoYW5nZSh2YWx1ZTogQ2FuZHlEYXRlKTogdm9pZCB7XG4gICAgc3VwZXIub25WYWx1ZUNoYW5nZSh2YWx1ZSk7XG5cbiAgICBpZiAoIXRoaXMubnpTaG93VGltZSkge1xuICAgICAgdGhpcy5jbG9zZU92ZXJsYXkoKTtcbiAgICB9XG4gIH1cblxuICAvLyBFbWl0dGVkIHdoZW4gZG9uZSB3aXRoIGRhdGUgc2VsZWN0aW5nXG4gIG9uUmVzdWx0T2soKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNSYW5nZSkge1xuICAgICAgaWYgKCh0aGlzLm56VmFsdWUgYXMgQ2FuZHlEYXRlW10pLmxlbmd0aCkge1xuICAgICAgICB0aGlzLm56T25Pay5lbWl0KFsgdGhpcy5uelZhbHVlWyAwIF0ubmF0aXZlRGF0ZSwgdGhpcy5uelZhbHVlWyAxIF0ubmF0aXZlRGF0ZSBdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubnpPbk9rLmVtaXQoW10pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5uelZhbHVlKSB7XG4gICAgICAgIHRoaXMubnpPbk9rLmVtaXQoKHRoaXMubnpWYWx1ZSBhcyBDYW5keURhdGUpLm5hdGl2ZURhdGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5uek9uT2suZW1pdChudWxsKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5jbG9zZU92ZXJsYXkoKTtcbiAgfVxuXG4gIG9uT3BlbkNoYW5nZShvcGVuOiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5uek9uT3BlbkNoYW5nZS5lbWl0KG9wZW4pO1xuICB9XG5cbiAgLy8gU2V0dXAgZml4ZWQgc3R5bGUgZm9yIHBpY2tlclxuICBwcml2YXRlIHNldEZpeGVkUGlja2VyU3R5bGUoKTogdm9pZCB7XG4gICAgY29uc3Qgc2hvd1RpbWVGaXhlczogeyB3aWR0aD86IHN0cmluZyB9ID0ge307XG4gICAgaWYgKHRoaXMubnpTaG93VGltZSkge1xuICAgICAgc2hvd1RpbWVGaXhlcy53aWR0aCA9IHRoaXMuaXNSYW5nZSA/ICczNTBweCcgOiAnMTk1cHgnO1xuICAgIH1cblxuICAgIHRoaXMucGlja2VyU3R5bGUgPSB7IC4uLnNob3dUaW1lRml4ZXMsIC4uLnRoaXMubnpTdHlsZSB9O1xuICB9XG59XG4iLCJpbXBvcnQgeyBmb3J3YXJkUmVmLCBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgTnpJMThuU2VydmljZSB9IGZyb20gJy4uL2kxOG4vbnotaTE4bi5zZXJ2aWNlJztcblxuaW1wb3J0IHsgRGF0ZVJhbmdlUGlja2VyQ29tcG9uZW50IH0gZnJvbSAnLi9kYXRlLXJhbmdlLXBpY2tlci5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICA6ICduei1kYXRlLXBpY2tlcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9kYXRlLXJhbmdlLXBpY2tlci5jb21wb25lbnQuaHRtbCcsXG4gIHByb3ZpZGVycyAgOiBbIHtcbiAgICBwcm92aWRlICAgIDogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgbXVsdGkgICAgICA6IHRydWUsXG4gICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTnpEYXRlUGlja2VyQ29tcG9uZW50KVxuICB9IF0sXG4gIGhvc3QgICAgICAgOiB7XG4gICAgJ1tjbGFzcy5hbnQtY2FsZW5kYXItcGlja2VyXSc6ICd0cnVlJ1xuICB9XG59KVxuXG5leHBvcnQgY2xhc3MgTnpEYXRlUGlja2VyQ29tcG9uZW50IGV4dGVuZHMgRGF0ZVJhbmdlUGlja2VyQ29tcG9uZW50IHtcbiAgaXNSYW5nZTogYm9vbGVhbiA9IGZhbHNlO1xuICBjb25zdHJ1Y3RvcihpMThuOiBOekkxOG5TZXJ2aWNlKSB7XG4gICAgc3VwZXIoaTE4bik7XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uQ2hhbmdlcywgT25Jbml0LCBTaW1wbGVDaGFuZ2VzLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBGdW5jdGlvblByb3AgfSBmcm9tICcuLi9jb3JlL3R5cGVzL2NvbW1vbi13cmFwJztcbmltcG9ydCB7IHZhbHVlRnVuY3Rpb25Qcm9wIH0gZnJvbSAnLi4vY29yZS91dGlsL2NvbnZlcnQnO1xuaW1wb3J0IHsgTnpJMThuU2VydmljZSB9IGZyb20gJy4uL2kxOG4vbnotaTE4bi5zZXJ2aWNlJztcbmltcG9ydCB7IEFic3RyYWN0UGlja2VyQ29tcG9uZW50IH0gZnJvbSAnLi9hYnN0cmFjdC1waWNrZXIuY29tcG9uZW50JztcbmltcG9ydCB7IENhbmR5RGF0ZSB9IGZyb20gJy4vbGliL2NhbmR5LWRhdGUnO1xuaW1wb3J0IHsgUGFuZWxNb2RlIH0gZnJvbSAnLi9zdGFuZGFyZC10eXBlcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgcGlja2VyIGZvciBoZWFkZXIgcGFuZWxzLCBjdXJyZW50IHN1cHBvcnQ6IFllYXIvTW9udGhcbiAqL1xuXG5AQ29tcG9uZW50KHtcbiAgdGVtcGxhdGU6IGBgXG59KVxuZXhwb3J0IGNsYXNzIEhlYWRlclBpY2tlckNvbXBvbmVudCBleHRlbmRzIEFic3RyYWN0UGlja2VyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xuICBASW5wdXQoKSBuelBsYWNlSG9sZGVyOiBzdHJpbmc7XG5cbiAgQElucHV0KCkgbnpSZW5kZXJFeHRyYUZvb3RlcjogRnVuY3Rpb25Qcm9wPFRlbXBsYXRlUmVmPHZvaWQ+IHwgc3RyaW5nPjtcbiAgQElucHV0KCkgbnpEZWZhdWx0VmFsdWU6IENhbmR5RGF0ZTtcbiAgQElucHV0KCkgbnpGb3JtYXQ6IHN0cmluZzsgLy8gW0Nhbm1wbGVtZW50ZWQgYnkgc3ViIGNsYXNzXSBUaGUgb3V0cHV0IGZvcm1hdFxuXG4gIGVuZFBhbmVsTW9kZTogU3VwcG9ydEhlYWRlclBhbmVsOyAvLyBbSW1wbGVtZW50ZWQgYnkgc3ViIGNsYXNzXSBUaGUgZmluYWwgcGFuZWwgZm9yIHBpY2tpbmcgYSBkYXRlXG4gIHBhbmVsTW9kZTogUGFuZWxNb2RlOyAvLyBDdXJyZW50IHBhbmVsIG1vZGVcbiAgZXh0cmFGb290ZXI6IFRlbXBsYXRlUmVmPHZvaWQ+IHwgc3RyaW5nO1xuXG4gIHByaXZhdGUgc3VwcG9ydFBhbmVsczogUGFuZWxNb2RlW107XG5cbiAgY29uc3RydWN0b3IoaTE4bjogTnpJMThuU2VydmljZSkge1xuICAgIHN1cGVyKGkxOG4pO1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgc3VwZXIubmdPbkluaXQoKTtcblxuICAgIHRoaXMucGFuZWxNb2RlID0gdGhpcy5lbmRQYW5lbE1vZGU7XG5cbiAgICBjb25zdCBhbGxIZWFkZXJQYW5lbHM6IFBhbmVsTW9kZVtdID0gWyAnZGVjYWRlJywgJ3llYXInLCAnbW9udGgnIF07XG4gICAgdGhpcy5zdXBwb3J0UGFuZWxzID0gYWxsSGVhZGVyUGFuZWxzLnNsaWNlKDAsIGFsbEhlYWRlclBhbmVscy5pbmRleE9mKHRoaXMuZW5kUGFuZWxNb2RlKSArIDEpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIHN1cGVyLm5nT25DaGFuZ2VzKGNoYW5nZXMpO1xuXG4gICAgaWYgKGNoYW5nZXMubnpSZW5kZXJFeHRyYUZvb3Rlcikge1xuICAgICAgdGhpcy5leHRyYUZvb3RlciA9IHZhbHVlRnVuY3Rpb25Qcm9wKHRoaXMubnpSZW5kZXJFeHRyYUZvb3Rlcik7XG4gICAgfVxuICB9XG5cbiAgb25QYW5lbE1vZGVDaGFuZ2UobW9kZTogUGFuZWxNb2RlKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuc3VwcG9ydFBhbmVscy5pbmRleE9mKG1vZGUpID4gLTEpIHtcbiAgICAgIHRoaXMucGFuZWxNb2RlID0gbW9kZTtcbiAgICB9IGVsc2UgeyAvLyBTaW5jZSB0aGUgZGVmYXVsdCBcImNsaWNrIHllYXJcIiBsb2dpYyBjYW4gYmUgXCJ5ZWFyIHBhbmVsXCIgLT4gXCJkYXRlIHBhbmVsXCIsIHdlIG5lZWQgZm9yY2UgdG8gdGhlIGVuZCBwYW5lbCBvdGhlcndpc2VcbiAgICAgIHRoaXMucGFuZWxNb2RlID0gdGhpcy5lbmRQYW5lbE1vZGU7XG4gICAgfVxuICB9XG5cbiAgb25DaG9vc2VWYWx1ZShtb2RlOiBTdXBwb3J0SGVhZGVyUGFuZWwsIHZhbHVlOiBDYW5keURhdGUpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5lbmRQYW5lbE1vZGUgPT09IG1vZGUpIHtcbiAgICAgIHN1cGVyLm9uVmFsdWVDaGFuZ2UodmFsdWUpO1xuXG4gICAgICB0aGlzLmNsb3NlT3ZlcmxheSgpO1xuICAgIH1cbiAgfVxuXG4gIG9uT3BlbkNoYW5nZShvcGVuOiBib29sZWFuKTogdm9pZCB7XG4gICAgaWYgKCFvcGVuKSB7XG4gICAgICB0aGlzLmNsZWFuVXAoKTtcbiAgICB9XG4gICAgdGhpcy5uek9uT3BlbkNoYW5nZS5lbWl0KG9wZW4pO1xuICB9XG5cbiAgLy8gUmVzdG9yZSBzb21lIGluaXRpYWwgcHJvcHMgdG8gbGV0IG9wZW4gYXMgbmV3IGluIG5leHQgdGltZVxuICBwcml2YXRlIGNsZWFuVXAoKTogdm9pZCB7XG4gICAgdGhpcy5wYW5lbE1vZGUgPSB0aGlzLmVuZFBhbmVsTW9kZTtcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBTdXBwb3J0SGVhZGVyUGFuZWwgPSAneWVhcicgfCAnbW9udGgnO1xuIiwiaW1wb3J0IHsgZm9yd2FyZFJlZiwgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBOekkxOG5TZXJ2aWNlIH0gZnJvbSAnLi4vaTE4bi9uei1pMThuLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBIZWFkZXJQaWNrZXJDb21wb25lbnQsIFN1cHBvcnRIZWFkZXJQYW5lbCB9IGZyb20gJy4vaGVhZGVyLXBpY2tlci5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduei1tb250aC1waWNrZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vaGVhZGVyLXBpY2tlci5jb21wb25lbnQuaHRtbCcsXG4gIHByb3ZpZGVyczogW3tcbiAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICBtdWx0aTogdHJ1ZSxcbiAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBOek1vbnRoUGlja2VyQ29tcG9uZW50KVxuICB9XSxcbiAgaG9zdCAgICAgICAgICAgICAgIDoge1xuICAgICdbY2xhc3MuYW50LWNhbGVuZGFyLXBpY2tlcl0nOiAndHJ1ZSdcbiAgfVxufSlcblxuZXhwb3J0IGNsYXNzIE56TW9udGhQaWNrZXJDb21wb25lbnQgZXh0ZW5kcyBIZWFkZXJQaWNrZXJDb21wb25lbnQge1xuICBASW5wdXQoKSBuekZvcm1hdDogc3RyaW5nID0gJ3l5eXktTU0nO1xuXG4gIGVuZFBhbmVsTW9kZTogU3VwcG9ydEhlYWRlclBhbmVsID0gJ21vbnRoJztcbiAgY29uc3RydWN0b3IoaTE4bjogTnpJMThuU2VydmljZSkge1xuICAgIHN1cGVyKGkxOG4pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBmb3J3YXJkUmVmLCBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgTnpJMThuU2VydmljZSB9IGZyb20gJy4uL2kxOG4vbnotaTE4bi5zZXJ2aWNlJztcblxuaW1wb3J0IHsgRGF0ZVJhbmdlUGlja2VyQ29tcG9uZW50IH0gZnJvbSAnLi9kYXRlLXJhbmdlLXBpY2tlci5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICA6ICduei1yYW5nZS1waWNrZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vZGF0ZS1yYW5nZS1waWNrZXIuY29tcG9uZW50Lmh0bWwnLFxuICBwcm92aWRlcnMgIDogWyB7XG4gICAgcHJvdmlkZSAgICA6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgIG11bHRpICAgICAgOiB0cnVlLFxuICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IE56UmFuZ2VQaWNrZXJDb21wb25lbnQpXG4gIH0gXSxcbiAgaG9zdCAgICAgICA6IHtcbiAgICAnW2NsYXNzLmFudC1jYWxlbmRhci1waWNrZXJdJzogJ3RydWUnXG4gIH1cbn0pXG5cbmV4cG9ydCBjbGFzcyBOelJhbmdlUGlja2VyQ29tcG9uZW50IGV4dGVuZHMgRGF0ZVJhbmdlUGlja2VyQ29tcG9uZW50IHtcbiAgaXNSYW5nZTogYm9vbGVhbiA9IHRydWU7XG4gIGNvbnN0cnVjdG9yKGkxOG46IE56STE4blNlcnZpY2UpIHtcbiAgICBzdXBlcihpMThuKTtcbiAgfVxuXG59XG4iLCJpbXBvcnQgeyBmb3J3YXJkUmVmLCBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgTnpJMThuU2VydmljZSB9IGZyb20gJy4uL2kxOG4vbnotaTE4bi5zZXJ2aWNlJztcblxuaW1wb3J0IHsgRGF0ZVJhbmdlUGlja2VyQ29tcG9uZW50IH0gZnJvbSAnLi9kYXRlLXJhbmdlLXBpY2tlci5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICA6ICduei13ZWVrLXBpY2tlcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9kYXRlLXJhbmdlLXBpY2tlci5jb21wb25lbnQuaHRtbCcsXG4gIHByb3ZpZGVycyAgOiBbIHtcbiAgICBwcm92aWRlICAgIDogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgbXVsdGkgICAgICA6IHRydWUsXG4gICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTnpXZWVrUGlja2VyQ29tcG9uZW50KVxuICB9IF0sXG4gIGhvc3QgICAgICAgOiB7XG4gICAgJ1tjbGFzcy5hbnQtY2FsZW5kYXItcGlja2VyXSc6ICd0cnVlJ1xuICB9XG59KVxuXG5leHBvcnQgY2xhc3MgTnpXZWVrUGlja2VyQ29tcG9uZW50IGV4dGVuZHMgRGF0ZVJhbmdlUGlja2VyQ29tcG9uZW50IHtcbiAgc2hvd1dlZWs6IGJvb2xlYW4gPSB0cnVlO1xuICBjb25zdHJ1Y3RvcihpMThuOiBOekkxOG5TZXJ2aWNlKSB7XG4gICAgc3VwZXIoaTE4bik7XG4gIH1cbn1cbiIsImltcG9ydCB7IGZvcndhcmRSZWYsIENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgTnpJMThuU2VydmljZSB9IGZyb20gJy4uL2kxOG4vbnotaTE4bi5zZXJ2aWNlJztcblxuaW1wb3J0IHsgSGVhZGVyUGlja2VyQ29tcG9uZW50LCBTdXBwb3J0SGVhZGVyUGFuZWwgfSBmcm9tICcuL2hlYWRlci1waWNrZXIuY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbnoteWVhci1waWNrZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vaGVhZGVyLXBpY2tlci5jb21wb25lbnQuaHRtbCcsXG4gIHByb3ZpZGVyczogW3tcbiAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICBtdWx0aTogdHJ1ZSxcbiAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBOelllYXJQaWNrZXJDb21wb25lbnQpXG4gIH1dLFxuICBob3N0ICAgICAgICAgICAgICAgOiB7XG4gICAgJ1tjbGFzcy5hbnQtY2FsZW5kYXItcGlja2VyXSc6ICd0cnVlJ1xuICB9XG59KVxuXG5leHBvcnQgY2xhc3MgTnpZZWFyUGlja2VyQ29tcG9uZW50IGV4dGVuZHMgSGVhZGVyUGlja2VyQ29tcG9uZW50IHtcbiAgQElucHV0KCkgbnpGb3JtYXQ6IHN0cmluZyA9ICd5eXl5JztcblxuICBlbmRQYW5lbE1vZGU6IFN1cHBvcnRIZWFkZXJQYW5lbCA9ICd5ZWFyJztcbiAgY29uc3RydWN0b3IoaTE4bjogTnpJMThuU2VydmljZSkge1xuICAgIHN1cGVyKGkxOG4pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBPdmVybGF5TW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE56SWNvbk1vZHVsZSB9IGZyb20gJy4uL2ljb24vbnotaWNvbi5tb2R1bGUnO1xuXG5pbXBvcnQgeyBMaWJQYWNrZXJNb2R1bGUgfSBmcm9tICcuL2xpYi9saWItcGFja2VyLm1vZHVsZSc7XG5cbmltcG9ydCB7IE56RGF0ZVBpY2tlckNvbXBvbmVudCB9IGZyb20gJy4vZGF0ZS1waWNrZXIuY29tcG9uZW50JztcbmltcG9ydCB7IERhdGVSYW5nZVBpY2tlckNvbXBvbmVudCB9IGZyb20gJy4vZGF0ZS1yYW5nZS1waWNrZXIuY29tcG9uZW50JztcbmltcG9ydCB7IEhlYWRlclBpY2tlckNvbXBvbmVudCB9IGZyb20gJy4vaGVhZGVyLXBpY2tlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpNb250aFBpY2tlckNvbXBvbmVudCB9IGZyb20gJy4vbW9udGgtcGlja2VyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOelBpY2tlckNvbXBvbmVudCB9IGZyb20gJy4vcGlja2VyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOelJhbmdlUGlja2VyQ29tcG9uZW50IH0gZnJvbSAnLi9yYW5nZS1waWNrZXIuY29tcG9uZW50JztcbmltcG9ydCB7IE56V2Vla1BpY2tlckNvbXBvbmVudCB9IGZyb20gJy4vd2Vlay1waWNrZXIuY29tcG9uZW50JztcbmltcG9ydCB7IE56WWVhclBpY2tlckNvbXBvbmVudCB9IGZyb20gJy4veWVhci1waWNrZXIuY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZSxcbiAgICBPdmVybGF5TW9kdWxlLFxuXG4gICAgTGliUGFja2VyTW9kdWxlLFxuXG4gICAgTnpJY29uTW9kdWxlXG4gIF0sXG4gIGV4cG9ydHM6IFtcbiAgICBOekRhdGVQaWNrZXJDb21wb25lbnQsXG4gICAgTnpSYW5nZVBpY2tlckNvbXBvbmVudCxcbiAgICBOek1vbnRoUGlja2VyQ29tcG9uZW50LFxuICAgIE56WWVhclBpY2tlckNvbXBvbmVudCxcbiAgICBOeldlZWtQaWNrZXJDb21wb25lbnRcbiAgXSxcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgSGVhZGVyUGlja2VyQ29tcG9uZW50LFxuICAgIERhdGVSYW5nZVBpY2tlckNvbXBvbmVudCxcbiAgICBOelBpY2tlckNvbXBvbmVudCxcblxuICAgIE56RGF0ZVBpY2tlckNvbXBvbmVudCxcbiAgICBOek1vbnRoUGlja2VyQ29tcG9uZW50LFxuICAgIE56WWVhclBpY2tlckNvbXBvbmVudCxcbiAgICBOeldlZWtQaWNrZXJDb21wb25lbnQsXG4gICAgTnpSYW5nZVBpY2tlckNvbXBvbmVudFxuICBdLFxuICBwcm92aWRlcnM6IFtdXG59KVxuZXhwb3J0IGNsYXNzIE56RGF0ZVBpY2tlck1vZHVsZSB7IH1cbiIsImltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBJbnB1dCxcbiAgT25DaGFuZ2VzLFxuICBPbkluaXQsXG4gIFNpbXBsZUNoYW5nZXMsXG4gIFRlbXBsYXRlUmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBOelVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UgfSBmcm9tICcuLi9jb3JlL3NlcnZpY2VzL3VwZGF0ZS1ob3N0LWNsYXNzLnNlcnZpY2UnO1xuaW1wb3J0IHsgdG9Cb29sZWFuIH0gZnJvbSAnLi4vY29yZS91dGlsL2NvbnZlcnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICAgICAgICAgIDogJ256LWRpdmlkZXInLFxuICB0ZW1wbGF0ZVVybCAgICAgICAgOiAnLi9uei1kaXZpZGVyLmNvbXBvbmVudC5odG1sJyxcbiAgcHJvdmlkZXJzICAgICAgICAgIDogWyBOelVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UgXSxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG4gIGNoYW5nZURldGVjdGlvbiAgICA6IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBOekRpdmlkZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uSW5pdCB7XG4gIC8vIHJlZ2lvbiBmaWVsZHNcblxuICBpc1RleHQgPSBmYWxzZTtcbiAgdGV4dFN0ciA9ICcnO1xuICB0ZXh0VHBsOiBUZW1wbGF0ZVJlZjx2b2lkPjtcblxuICBASW5wdXQoKVxuICBzZXQgbnpUZXh0KHZhbHVlOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPikge1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmKSB7XG4gICAgICB0aGlzLnRleHRTdHIgPSBudWxsO1xuICAgICAgdGhpcy50ZXh0VHBsID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudGV4dFN0ciA9IHZhbHVlO1xuICAgIH1cbiAgICB0aGlzLmlzVGV4dCA9ICEhdmFsdWU7XG4gIH1cblxuICBASW5wdXQoKSBuelR5cGU6ICdob3Jpem9udGFsJyB8ICd2ZXJ0aWNhbCcgPSAnaG9yaXpvbnRhbCc7XG5cbiAgQElucHV0KCkgbnpPcmllbnRhdGlvbjogJ2xlZnQnIHwgJ3JpZ2h0JyB8ICcnID0gJyc7XG5cbiAgcHJpdmF0ZSBfZGFzaGVkID0gZmFsc2U7XG5cbiAgQElucHV0KClcbiAgc2V0IG56RGFzaGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fZGFzaGVkID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuekRhc2hlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fZGFzaGVkO1xuICB9XG5cbiAgLy8gZW5kcmVnaW9uXG4gIHByaXZhdGUgc2V0Q2xhc3MoKTogdm9pZCB7XG4gICAgY29uc3Qgb3JpZW50YXRpb25QcmVmaXggPSAodGhpcy5uek9yaWVudGF0aW9uLmxlbmd0aCA+IDApID8gJy0nICsgdGhpcy5uek9yaWVudGF0aW9uIDogdGhpcy5uek9yaWVudGF0aW9uO1xuICAgIGNvbnN0IGNsYXNzTWFwID0ge1xuICAgICAgWyAnYW50LWRpdmlkZXInIF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRydWUsXG4gICAgICBbIGBhbnQtZGl2aWRlci0ke3RoaXMubnpUeXBlfWAgXSAgICAgICAgICAgICAgIDogdHJ1ZSxcbiAgICAgIFsgYGFudC1kaXZpZGVyLXdpdGgtdGV4dCR7b3JpZW50YXRpb25QcmVmaXh9YCBdOiB0aGlzLmlzVGV4dCxcbiAgICAgIFsgYGFudC1kaXZpZGVyLWRhc2hlZGAgXSAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLm56RGFzaGVkXG4gICAgfTtcbiAgICB0aGlzLnVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UudXBkYXRlSG9zdENsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgY2xhc3NNYXApO1xuICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsIHByaXZhdGUgdXBkYXRlSG9zdENsYXNzU2VydmljZTogTnpVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlKSB7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgdGhpcy5zZXRDbGFzcygpO1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5zZXRDbGFzcygpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgTnpEaXZpZGVyQ29tcG9uZW50IH0gZnJvbSAnLi9uei1kaXZpZGVyLmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHMgICAgIDogWyBDb21tb25Nb2R1bGUgXSxcbiAgZGVjbGFyYXRpb25zOiBbIE56RGl2aWRlckNvbXBvbmVudCBdLFxuICBleHBvcnRzICAgICA6IFsgTnpEaXZpZGVyQ29tcG9uZW50IF1cbn0pXG5leHBvcnQgY2xhc3MgTnpEaXZpZGVyTW9kdWxlIHtcbn1cbiIsImltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNOb3ROaWwgfSBmcm9tICcuLi91dGlsL2NoZWNrJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTnpNZWFzdXJlU2Nyb2xsYmFyU2VydmljZSB7XG4gIHByaXZhdGUgX3Njcm9sbGJhcldpZHRoOiBudW1iZXI7XG4gIHByaXZhdGUgc2Nyb2xsYmFyTWVhc3VyZSA9IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB0b3AgICAgIDogJy05OTk5cHgnLFxuICAgIHdpZHRoICAgOiAnNTBweCcsXG4gICAgaGVpZ2h0ICA6ICc1MHB4JyxcbiAgICBvdmVyZmxvdzogJ3Njcm9sbCdcbiAgfTtcblxuICBnZXQgc2Nyb2xsQmFyV2lkdGgoKTogbnVtYmVyIHtcbiAgICBpZiAoaXNOb3ROaWwodGhpcy5fc2Nyb2xsYmFyV2lkdGgpKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2Nyb2xsYmFyV2lkdGg7XG4gICAgfVxuICAgIHRoaXMuaW5pdFNjcm9sbEJhcldpZHRoKCk7XG4gICAgcmV0dXJuIHRoaXMuX3Njcm9sbGJhcldpZHRoO1xuICB9XG5cbiAgaW5pdFNjcm9sbEJhcldpZHRoKCk6IHZvaWQge1xuICAgIGNvbnN0IHNjcm9sbERpdiA9IHRoaXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZm9yIChjb25zdCBzY3JvbGxQcm9wIGluIHRoaXMuc2Nyb2xsYmFyTWVhc3VyZSkge1xuICAgICAgaWYgKHRoaXMuc2Nyb2xsYmFyTWVhc3VyZS5oYXNPd25Qcm9wZXJ0eShzY3JvbGxQcm9wKSkge1xuICAgICAgICBzY3JvbGxEaXYuc3R5bGVbIHNjcm9sbFByb3AgXSA9IHRoaXMuc2Nyb2xsYmFyTWVhc3VyZVsgc2Nyb2xsUHJvcCBdO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2Nyb2xsRGl2KTtcbiAgICBjb25zdCB3aWR0aCA9IHNjcm9sbERpdi5vZmZzZXRXaWR0aCAtIHNjcm9sbERpdi5jbGllbnRXaWR0aDtcbiAgICB0aGlzLmRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc2Nyb2xsRGl2KTtcbiAgICB0aGlzLl9zY3JvbGxiYXJXaWR0aCA9IHdpZHRoO1xuICB9XG5cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICBjb25zdHJ1Y3RvcihASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIGRvY3VtZW50OiBhbnkpIHtcbiAgICB0aGlzLmluaXRTY3JvbGxCYXJXaWR0aCgpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBTY3JvbGxTdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcbmltcG9ydCB7IFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTnpNZWFzdXJlU2Nyb2xsYmFyU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL256LW1lYXN1cmUtc2Nyb2xsYmFyLnNlcnZpY2UnXG5cbmV4cG9ydCBjbGFzcyBOekJsb2NrU2Nyb2xsU3RyYXRlZ3kgaW1wbGVtZW50cyBTY3JvbGxTdHJhdGVneSB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBkb2N1bWVudDogRG9jdW1lbnQsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMiwgcHJpdmF0ZSBuek1lYXN1cmVTY3JvbGxiYXJTZXJ2aWNlOiBOek1lYXN1cmVTY3JvbGxiYXJTZXJ2aWNlKSB7XG4gIH1cblxuICBhdHRhY2goKTogdm9pZCB7fVxuXG4gIGVuYWJsZSgpOiB2b2lkIHtcbiAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKGRvY3VtZW50LmJvZHksICdvdmVyZmxvdycsICdoaWRkZW4nKTtcbiAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuZG9jdW1lbnQuYm9keSwgJ3BhZGRpbmctcmlnaHQnLCBgJHt0aGlzLm56TWVhc3VyZVNjcm9sbGJhclNlcnZpY2Uuc2Nyb2xsQmFyV2lkdGh9cHhgKTtcblxuICB9XG5cbiAgZGlzYWJsZSgpOiB2b2lkIHtcbiAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZVN0eWxlKGRvY3VtZW50LmJvZHksICdvdmVyZmxvdycpO1xuICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlU3R5bGUoZG9jdW1lbnQuYm9keSwgJ3BhZGRpbmctcmlnaHQnKTtcbiAgfVxuXG59XG4iLCJpbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIFJlbmRlcmVyMiwgUmVuZGVyZXJGYWN0b3J5MiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTnpNZWFzdXJlU2Nyb2xsYmFyU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL256LW1lYXN1cmUtc2Nyb2xsYmFyLnNlcnZpY2UnXG5pbXBvcnQgeyBOekJsb2NrU2Nyb2xsU3RyYXRlZ3kgfSBmcm9tICcuL256LWJsb2NrLXNjcm9sbC1zdHJhdGVneSc7XG5cbkBJbmplY3RhYmxlKHtwcm92aWRlZEluOiAncm9vdCd9KVxuZXhwb3J0IGNsYXNzIE56U2Nyb2xsU3RyYXRlZ3lPcHRpb25zIHtcbiAgcHJpdmF0ZSBkb2N1bWVudDogRG9jdW1lbnQ7XG4gIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMjtcbiAgY29uc3RydWN0b3IoXG4gICAgcmVuZGVyZXJGYWN0b3J5OiBSZW5kZXJlckZhY3RvcnkyLFxuICAgIHByaXZhdGUgbnpNZWFzdXJlU2Nyb2xsYmFyU2VydmljZTogTnpNZWFzdXJlU2Nyb2xsYmFyU2VydmljZSxcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gICAgQEluamVjdChET0NVTUVOVCkgZG9jdW1lbnQ6IGFueVxuICApIHtcbiAgICB0aGlzLmRvY3VtZW50ID0gZG9jdW1lbnQ7XG4gICAgdGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyRmFjdG9yeS5jcmVhdGVSZW5kZXJlcihudWxsLCBudWxsKTtcbiAgfVxuXG4gIGJsb2NrID0gKCkgPT4gbmV3IE56QmxvY2tTY3JvbGxTdHJhdGVneSh0aGlzLmRvY3VtZW50LCB0aGlzLnJlbmRlcmVyLCB0aGlzLm56TWVhc3VyZVNjcm9sbGJhclNlcnZpY2UpO1xufVxuIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMvaW5kZXgnO1xuXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTnpEcmF3ZXJSZWY8UiA9IGFueT4ge1xuXG4gIGFic3RyYWN0IGFmdGVyQ2xvc2U6IE9ic2VydmFibGU8Uj47XG4gIGFic3RyYWN0IGFmdGVyT3BlbjogT2JzZXJ2YWJsZTx2b2lkPjtcblxuICBhYnN0cmFjdCBjbG9zZShyZXN1bHQ/OiBSKTogdm9pZDtcbiAgYWJzdHJhY3Qgb3BlbigpOiB2b2lkO1xufVxuIiwiaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5qZWN0LFxuICBJbmplY3RvcixcbiAgSW5wdXQsXG4gIE9uQ2hhbmdlcyxcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG4gIE9wdGlvbmFsLFxuICBPdXRwdXQsXG4gIFJlbmRlcmVyMixcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgVGVtcGxhdGVSZWYsXG4gIFR5cGUsXG4gIFZpZXdDaGlsZCxcbiAgVmlld0NvbnRhaW5lclJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgRm9jdXNUcmFwLCBGb2N1c1RyYXBGYWN0b3J5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2ExMXknO1xuaW1wb3J0IHsgT3ZlcmxheSwgT3ZlcmxheUNvbmZpZywgT3ZlcmxheVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcbmltcG9ydCB7IENka1BvcnRhbE91dGxldCwgQ29tcG9uZW50UG9ydGFsLCBQb3J0YWxJbmplY3RvciwgVGVtcGxhdGVQb3J0YWwgfSBmcm9tICdAYW5ndWxhci9jZGsvcG9ydGFsJztcblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBOelNjcm9sbFN0cmF0ZWd5T3B0aW9ucyB9IGZyb20gJy4uL2NvcmUvb3ZlcmxheS9zY3JvbGwvbnotc2Nyb2xsLXN0cmF0ZWd5LW9wdGlvbnMnO1xuaW1wb3J0IHsgdG9Dc3NQaXhlbCwgSW5wdXRCb29sZWFuIH0gZnJvbSAnLi4vY29yZS91dGlsL2NvbnZlcnQnO1xuaW1wb3J0IHsgTnpEcmF3ZXJPcHRpb25zLCBOekRyYXdlclBsYWNlbWVudCB9IGZyb20gJy4vbnotZHJhd2VyLW9wdGlvbnMnO1xuaW1wb3J0IHsgTnpEcmF3ZXJSZWYgfSBmcm9tICcuL256LWRyYXdlci1yZWYnO1xuXG5leHBvcnQgY29uc3QgRFJBV0VSX0FOSU1BVEVfRFVSQVRJT04gPSAzMDA7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICAgICAgOiAnbnotZHJhd2VyJyxcbiAgdGVtcGxhdGVVcmwgICAgICAgIDogJy4vbnotZHJhd2VyLmNvbXBvbmVudC5odG1sJyxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG4gIGNoYW5nZURldGVjdGlvbiAgICA6IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbmV4cG9ydCBjbGFzcyBOekRyYXdlckNvbXBvbmVudDxUID0gYW55LCBSID0gYW55LCBEID0gYW55PiBleHRlbmRzIE56RHJhd2VyUmVmPFI+IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXQsIE9uQ2hhbmdlcywgTnpEcmF3ZXJPcHRpb25zIHtcbiAgcHJldmlvdXNseUZvY3VzZWRFbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgbnpDb250ZW50UGFyYW1zOiBEOyAvLyBvbmx5IHNlcnZpY2VcbiAgb3ZlcmxheVJlZjogT3ZlcmxheVJlZjtcbiAgcG9ydGFsOiBUZW1wbGF0ZVBvcnRhbDtcbiAgZm9jdXNUcmFwOiBGb2N1c1RyYXA7XG4gIGlzT3BlbiA9IGZhbHNlO1xuICB0ZW1wbGF0ZUNvbnRleHQ6IHsgJGltcGxpY2l0OiBEOyBkcmF3ZXJSZWY6IE56RHJhd2VyUmVmPFI+IH0gPSB7XG4gICAgJGltcGxpY2l0OiB1bmRlZmluZWQsXG4gICAgZHJhd2VyUmVmOiB0aGlzIGFzIE56RHJhd2VyUmVmPFI+XG4gIH07XG5cbiAgZ2V0IG9mZnNldFRyYW5zZm9ybSgpOiBzdHJpbmcge1xuICAgIGlmICghdGhpcy5pc09wZW4gfHwgKHRoaXMubnpPZmZzZXRYICsgdGhpcy5uek9mZnNldFkpID09PSAwKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgc3dpdGNoICh0aGlzLm56UGxhY2VtZW50KSB7XG4gICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgcmV0dXJuIGB0cmFuc2xhdGVYKCR7dGhpcy5uek9mZnNldFh9cHgpYDtcbiAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgcmV0dXJuIGB0cmFuc2xhdGVYKC0ke3RoaXMubnpPZmZzZXRYfXB4KWA7XG4gICAgICBjYXNlICd0b3AnOlxuICAgICAgICByZXR1cm4gYHRyYW5zbGF0ZVkoJHt0aGlzLm56T2Zmc2V0WX1weClgO1xuICAgICAgY2FzZSAnYm90dG9tJzpcbiAgICAgICAgcmV0dXJuIGB0cmFuc2xhdGVZKC0ke3RoaXMubnpPZmZzZXRZfXB4KWA7XG4gICAgfVxuICB9XG5cbiAgZ2V0IHRyYW5zZm9ybSgpOiBzdHJpbmcge1xuXG4gICAgaWYgKHRoaXMuaXNPcGVuKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRoaXMubnpQbGFjZW1lbnQpIHtcbiAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICByZXR1cm4gYHRyYW5zbGF0ZVgoLTEwMCUpYDtcbiAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgcmV0dXJuIGB0cmFuc2xhdGVYKDEwMCUpYDtcbiAgICAgIGNhc2UgJ3RvcCc6XG4gICAgICAgIHJldHVybiBgdHJhbnNsYXRlWSgtMTAwJSlgO1xuICAgICAgY2FzZSAnYm90dG9tJzpcbiAgICAgICAgcmV0dXJuIGB0cmFuc2xhdGVZKDEwMCUpYDtcbiAgICB9XG4gIH1cblxuICBnZXQgd2lkdGgoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5pc0xlZnRPclJpZ2h0ID8gdG9Dc3NQaXhlbCh0aGlzLm56V2lkdGgpIDogbnVsbDtcbiAgfVxuXG4gIGdldCBoZWlnaHQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gIXRoaXMuaXNMZWZ0T3JSaWdodCA/IHRvQ3NzUGl4ZWwodGhpcy5uekhlaWdodCkgOiBudWxsO1xuICB9XG5cbiAgZ2V0IGlzTGVmdE9yUmlnaHQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubnpQbGFjZW1lbnQgPT09ICdsZWZ0JyB8fCB0aGlzLm56UGxhY2VtZW50ID09PSAncmlnaHQnO1xuICB9XG5cbiAgQFZpZXdDaGlsZCgnZHJhd2VyVGVtcGxhdGUnKSBkcmF3ZXJUZW1wbGF0ZTogVGVtcGxhdGVSZWY8e30+O1xuICBAVmlld0NoaWxkKCdjb250ZW50VGVtcGxhdGUnKSBjb250ZW50VGVtcGxhdGU6IFRlbXBsYXRlUmVmPHt9PjtcbiAgQFZpZXdDaGlsZChDZGtQb3J0YWxPdXRsZXQpIGJvZHlQb3J0YWxPdXRsZXQ6IENka1BvcnRhbE91dGxldDtcbiAgQElucHV0KCkgbnpDb250ZW50OiBUZW1wbGF0ZVJlZjx7ICRpbXBsaWNpdDogRCwgZHJhd2VyUmVmOiBOekRyYXdlclJlZjxSPiB9PiB8IFR5cGU8VD47XG4gIEBJbnB1dCgpIEBJbnB1dEJvb2xlYW4oKSBuekNsb3NhYmxlID0gdHJ1ZTtcbiAgQElucHV0KCkgQElucHV0Qm9vbGVhbigpIG56TWFza0Nsb3NhYmxlID0gdHJ1ZTtcbiAgQElucHV0KCkgQElucHV0Qm9vbGVhbigpIG56TWFzayA9IHRydWU7XG4gIEBJbnB1dCgpIG56VGl0bGU6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHt9PjtcbiAgQElucHV0KCkgbnpQbGFjZW1lbnQ6IE56RHJhd2VyUGxhY2VtZW50ID0gJ3JpZ2h0JztcbiAgQElucHV0KCkgbnpNYXNrU3R5bGU6IG9iamVjdCA9IHt9O1xuICBASW5wdXQoKSBuekJvZHlTdHlsZTogb2JqZWN0ID0ge307XG4gIEBJbnB1dCgpIG56V3JhcENsYXNzTmFtZTogc3RyaW5nO1xuICBASW5wdXQoKSBueldpZHRoOiBudW1iZXIgfCBzdHJpbmcgPSAyNTY7XG4gIEBJbnB1dCgpIG56SGVpZ2h0OiBudW1iZXIgfCBzdHJpbmcgPSAyNTY7XG4gIEBJbnB1dCgpIG56WkluZGV4ID0gMTAwMDtcbiAgQElucHV0KCkgbnpPZmZzZXRYID0gMDtcbiAgQElucHV0KCkgbnpPZmZzZXRZID0gMDtcblxuICBASW5wdXQoKVxuICBzZXQgbnpWaXNpYmxlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5pc09wZW4gPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBuelZpc2libGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaXNPcGVuO1xuICB9XG5cbiAgQE91dHB1dCgpIG56T25WaWV3SW5pdCA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcbiAgQE91dHB1dCgpIG56T25DbG9zZSA9IG5ldyBFdmVudEVtaXR0ZXI8TW91c2VFdmVudD4oKTtcbiAgbnpBZnRlck9wZW4gPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuICBuekFmdGVyQ2xvc2UgPSBuZXcgU3ViamVjdDxSPigpO1xuXG4gIGdldCBhZnRlck9wZW4oKTogT2JzZXJ2YWJsZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMubnpBZnRlck9wZW4uYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICBnZXQgYWZ0ZXJDbG9zZSgpOiBPYnNlcnZhYmxlPFI+IHtcbiAgICByZXR1cm4gdGhpcy5uekFmdGVyQ2xvc2UuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICBpc05vbkVtcHR5U3RyaW5nKHZhbHVlOiB7fSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlICE9PSAnJztcbiAgfVxuXG4gIGlzVGVtcGxhdGVSZWYodmFsdWU6IHt9KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgVGVtcGxhdGVSZWY7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudDogYW55LFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIG92ZXJsYXk6IE92ZXJsYXksXG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxuICAgIHByaXZhdGUgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuICAgIHByaXZhdGUgZm9jdXNUcmFwRmFjdG9yeTogRm9jdXNUcmFwRmFjdG9yeSxcbiAgICBwcml2YXRlIG56U2Nyb2xsU3RyYXRlZ3lPcHRpb25zOiBOelNjcm9sbFN0cmF0ZWd5T3B0aW9ucyxcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5hdHRhY2hPdmVybGF5KCk7XG4gICAgdGhpcy51cGRhdGVPdmVybGF5U3R5bGUoKTtcbiAgICB0aGlzLnVwZGF0ZUJvZHlPdmVyZmxvdygpO1xuICAgIHRoaXMudGVtcGxhdGVDb250ZXh0ID0geyAkaW1wbGljaXQ6IHRoaXMubnpDb250ZW50UGFyYW1zLCBkcmF3ZXJSZWY6IHRoaXMgYXMgTnpEcmF3ZXJSZWY8Uj4gfTtcbiAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmF0dGFjaEJvZHlDb250ZW50KCk7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLm56T25WaWV3SW5pdC5lbWl0KCk7XG4gICAgfSk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKGNoYW5nZXMuaGFzT3duUHJvcGVydHkoJ256VmlzaWJsZScpKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IGNoYW5nZXMubnpWaXNpYmxlLmN1cnJlbnRWYWx1ZTtcbiAgICAgIHRoaXMudXBkYXRlT3ZlcmxheVN0eWxlKCk7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy51cGRhdGVCb2R5T3ZlcmZsb3coKTtcbiAgICAgICAgdGhpcy5zYXZlUHJldmlvdXNseUZvY3VzZWRFbGVtZW50KCk7XG4gICAgICAgIHRoaXMudHJhcEZvY3VzKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZUJvZHlPdmVyZmxvdygpO1xuICAgICAgICAgIHRoaXMucmVzdG9yZUZvY3VzKCk7XG4gICAgICAgIH0sIERSQVdFUl9BTklNQVRFX0RVUkFUSU9OKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLmRpc3Bvc2VPdmVybGF5KCk7XG4gIH1cblxuICBjbG9zZShyZXN1bHQ/OiBSKTogdm9pZCB7XG4gICAgdGhpcy5pc09wZW4gPSBmYWxzZTtcbiAgICB0aGlzLnVwZGF0ZU92ZXJsYXlTdHlsZSgpO1xuICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy51cGRhdGVCb2R5T3ZlcmZsb3coKTtcbiAgICAgIHRoaXMucmVzdG9yZUZvY3VzKCk7XG4gICAgICB0aGlzLm56QWZ0ZXJDbG9zZS5uZXh0KHJlc3VsdCk7XG4gICAgICB0aGlzLm56QWZ0ZXJDbG9zZS5jb21wbGV0ZSgpO1xuICAgIH0sIERSQVdFUl9BTklNQVRFX0RVUkFUSU9OKTtcbiAgfVxuXG4gIG9wZW4oKTogdm9pZCB7XG4gICAgdGhpcy5pc09wZW4gPSB0cnVlO1xuICAgIHRoaXMudXBkYXRlT3ZlcmxheVN0eWxlKCk7XG4gICAgdGhpcy51cGRhdGVCb2R5T3ZlcmZsb3coKTtcbiAgICB0aGlzLnNhdmVQcmV2aW91c2x5Rm9jdXNlZEVsZW1lbnQoKTtcbiAgICB0aGlzLnRyYXBGb2N1cygpO1xuICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5uekFmdGVyT3Blbi5uZXh0KCk7XG4gICAgfSwgRFJBV0VSX0FOSU1BVEVfRFVSQVRJT04pO1xuICB9XG5cbiAgY2xvc2VDbGljaygpOiB2b2lkIHtcbiAgICB0aGlzLm56T25DbG9zZS5lbWl0KCk7XG4gIH1cblxuICBtYXNrQ2xpY2soKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubnpNYXNrQ2xvc2FibGUgJiYgdGhpcy5uek1hc2spIHtcbiAgICAgIHRoaXMubnpPbkNsb3NlLmVtaXQoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGF0dGFjaEJvZHlDb250ZW50KCk6IHZvaWQge1xuICAgIHRoaXMuYm9keVBvcnRhbE91dGxldC5kaXNwb3NlKCk7XG5cbiAgICBpZiAodGhpcy5uekNvbnRlbnQgaW5zdGFuY2VvZiBUeXBlKSB7XG4gICAgICBjb25zdCBjaGlsZEluamVjdG9yID0gbmV3IFBvcnRhbEluamVjdG9yKHRoaXMuaW5qZWN0b3IsIG5ldyBXZWFrTWFwKFsgWyBOekRyYXdlclJlZiwgdGhpcyBdIF0pKTtcbiAgICAgIGNvbnN0IGNvbXBvbmVudFBvcnRhbCA9IG5ldyBDb21wb25lbnRQb3J0YWw8VD4odGhpcy5uekNvbnRlbnQsIG51bGwsIGNoaWxkSW5qZWN0b3IpO1xuICAgICAgY29uc3QgY29tcG9uZW50UmVmID0gdGhpcy5ib2R5UG9ydGFsT3V0bGV0LmF0dGFjaENvbXBvbmVudFBvcnRhbChjb21wb25lbnRQb3J0YWwpO1xuICAgICAgT2JqZWN0LmFzc2lnbihjb21wb25lbnRSZWYuaW5zdGFuY2UsIHRoaXMubnpDb250ZW50UGFyYW1zKTtcbiAgICAgIGNvbXBvbmVudFJlZi5jaGFuZ2VEZXRlY3RvclJlZi5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhdHRhY2hPdmVybGF5KCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5vdmVybGF5UmVmKSB7XG4gICAgICB0aGlzLnBvcnRhbCA9IG5ldyBUZW1wbGF0ZVBvcnRhbCh0aGlzLmRyYXdlclRlbXBsYXRlLCB0aGlzLnZpZXdDb250YWluZXJSZWYpO1xuICAgICAgdGhpcy5vdmVybGF5UmVmID0gdGhpcy5vdmVybGF5LmNyZWF0ZSh0aGlzLmdldE92ZXJsYXlDb25maWcoKSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3ZlcmxheVJlZiAmJiAhdGhpcy5vdmVybGF5UmVmLmhhc0F0dGFjaGVkKCkpIHtcbiAgICAgIHRoaXMub3ZlcmxheVJlZi5hdHRhY2godGhpcy5wb3J0YWwpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZGlzcG9zZU92ZXJsYXkoKTogdm9pZCB7XG4gICAgdGhpcy5vdmVybGF5UmVmLmRpc3Bvc2UoKTtcbiAgICB0aGlzLm92ZXJsYXlSZWYgPSBudWxsO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRPdmVybGF5Q29uZmlnKCk6IE92ZXJsYXlDb25maWcge1xuICAgIHJldHVybiBuZXcgT3ZlcmxheUNvbmZpZyh7XG4gICAgICBzY3JvbGxTdHJhdGVneTogdGhpcy5uelNjcm9sbFN0cmF0ZWd5T3B0aW9ucy5ibG9jaygpXG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZU92ZXJsYXlTdHlsZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5vdmVybGF5UmVmICYmIHRoaXMub3ZlcmxheVJlZi5vdmVybGF5RWxlbWVudCkge1xuICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLm92ZXJsYXlSZWYub3ZlcmxheUVsZW1lbnQsICdwb2ludGVyLWV2ZW50cycsIHRoaXMuaXNPcGVuID8gJ2F1dG8nIDogJ25vbmUnKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZUJvZHlPdmVyZmxvdygpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5vdmVybGF5UmVmKSB7XG4gICAgICBpZiAodGhpcy5pc09wZW4pIHtcbiAgICAgICAgdGhpcy5vdmVybGF5UmVmLmdldENvbmZpZygpLnNjcm9sbFN0cmF0ZWd5LmVuYWJsZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vdmVybGF5UmVmLmdldENvbmZpZygpLnNjcm9sbFN0cmF0ZWd5LmRpc2FibGUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzYXZlUHJldmlvdXNseUZvY3VzZWRFbGVtZW50KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmRvY3VtZW50KSB7XG4gICAgICB0aGlzLnByZXZpb3VzbHlGb2N1c2VkRWxlbWVudCA9IHRoaXMuZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBhcyBIVE1MRWxlbWVudDtcbiAgICAgIHRoaXMucHJldmlvdXNseUZvY3VzZWRFbGVtZW50LmJsdXIoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHRyYXBGb2N1cygpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuZm9jdXNUcmFwKSB7XG4gICAgICB0aGlzLmZvY3VzVHJhcCA9IHRoaXMuZm9jdXNUcmFwRmFjdG9yeS5jcmVhdGUodGhpcy5vdmVybGF5UmVmLm92ZXJsYXlFbGVtZW50KTtcbiAgICB9XG4gICAgdGhpcy5mb2N1c1RyYXAuZm9jdXNJbml0aWFsRWxlbWVudFdoZW5SZWFkeSgpO1xuICB9XG5cbiAgcHJpdmF0ZSByZXN0b3JlRm9jdXMoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMucHJldmlvdXNseUZvY3VzZWRFbGVtZW50KSB7XG4gICAgICB0aGlzLnByZXZpb3VzbHlGb2N1c2VkRWxlbWVudC5mb2N1cygpO1xuICAgIH1cbiAgICBpZiAodGhpcy5mb2N1c1RyYXApIHtcbiAgICAgIHRoaXMuZm9jdXNUcmFwLmRlc3Ryb3koKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IE92ZXJsYXksIE92ZXJsYXlSZWYgfSBmcm9tICdAYW5ndWxhci9jZGsvb3ZlcmxheSc7XG5pbXBvcnQgeyBDb21wb25lbnRQb3J0YWwgfSBmcm9tICdAYW5ndWxhci9jZGsvcG9ydGFsJztcbmltcG9ydCB7IENvbXBvbmVudFJlZiwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgTnpEcmF3ZXJPcHRpb25zIH0gZnJvbSAnLi9uei1kcmF3ZXItb3B0aW9ucyc7XG5pbXBvcnQgeyBOekRyYXdlclJlZiB9IGZyb20gJy4vbnotZHJhd2VyLXJlZic7XG5pbXBvcnQgeyBOekRyYXdlckNvbXBvbmVudCB9IGZyb20gJy4vbnotZHJhd2VyLmNvbXBvbmVudCc7XG5cbmV4cG9ydCBjbGFzcyBEcmF3ZXJCdWlsZGVyRm9yU2VydmljZTxSPiB7XG4gIHByaXZhdGUgZHJhd2VyUmVmOiBDb21wb25lbnRSZWY8TnpEcmF3ZXJDb21wb25lbnQ+O1xuICBwcml2YXRlIG92ZXJsYXlSZWY6IE92ZXJsYXlSZWY7XG4gIHByaXZhdGUgdW5zdWJzY3JpYmUkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG92ZXJsYXk6IE92ZXJsYXksIHByaXZhdGUgb3B0aW9uczogTnpEcmF3ZXJPcHRpb25zKSB7XG4gICAgdGhpcy5jcmVhdGVEcmF3ZXIoKTtcbiAgICB0aGlzLnVwZGF0ZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgdGhpcy5kcmF3ZXJSZWYuaW5zdGFuY2UubnpPblZpZXdJbml0XG4gICAgLnBpcGUodGFrZVVudGlsKHRoaXMudW5zdWJzY3JpYmUkKSlcbiAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMuZHJhd2VyUmVmLmluc3RhbmNlLm9wZW4oKTtcbiAgICB9KTtcblxuICAgIHRoaXMuZHJhd2VyUmVmLmluc3RhbmNlLm56T25DbG9zZVxuICAgIC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy5kcmF3ZXJSZWYuaW5zdGFuY2UuY2xvc2UoKTtcbiAgICB9KTtcblxuICAgIHRoaXMuZHJhd2VyUmVmLmluc3RhbmNlLmFmdGVyQ2xvc2VcbiAgICAucGlwZSh0YWtlVW50aWwodGhpcy51bnN1YnNjcmliZSQpKVxuICAgIC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy5vdmVybGF5UmVmLmRpc3Bvc2UoKTtcbiAgICAgIHRoaXMuZHJhd2VyUmVmID0gbnVsbDtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUkLm5leHQoKTtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUkLmNvbXBsZXRlKCk7XG4gICAgfSk7XG4gIH1cblxuICBnZXRJbnN0YW5jZSgpOiBOekRyYXdlclJlZjxSPiB7XG4gICAgcmV0dXJuIHRoaXMuZHJhd2VyUmVmICYmIHRoaXMuZHJhd2VyUmVmLmluc3RhbmNlO1xuICB9XG5cbiAgY3JlYXRlRHJhd2VyKCk6IHZvaWQge1xuICAgIHRoaXMub3ZlcmxheVJlZiA9IHRoaXMub3ZlcmxheS5jcmVhdGUoKTtcbiAgICB0aGlzLmRyYXdlclJlZiA9IHRoaXMub3ZlcmxheVJlZi5hdHRhY2gobmV3IENvbXBvbmVudFBvcnRhbChOekRyYXdlckNvbXBvbmVudCkpO1xuICB9XG5cbiAgdXBkYXRlT3B0aW9ucyhvcHRpb25zOiBOekRyYXdlck9wdGlvbnMpOiB2b2lkIHtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMuZHJhd2VyUmVmLmluc3RhbmNlLCBvcHRpb25zKTtcbiAgfVxufVxuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290J30pXG5leHBvcnQgY2xhc3MgTnpEcmF3ZXJTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG92ZXJsYXk6IE92ZXJsYXkpIHtcbiAgfVxuXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgY3JlYXRlPFQgPSBhbnksIEQgPSBhbnksIFIgPSBhbnk+KG9wdGlvbnM6IE56RHJhd2VyT3B0aW9uczxULCBEPik6IE56RHJhd2VyUmVmPFI+IHtcbiAgICByZXR1cm4gbmV3IERyYXdlckJ1aWxkZXJGb3JTZXJ2aWNlPFI+KHRoaXMub3ZlcmxheSwgb3B0aW9ucykuZ2V0SW5zdGFuY2UoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgT3ZlcmxheU1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcbmltcG9ydCB7IFBvcnRhbE1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9wb3J0YWwnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOekljb25Nb2R1bGUgfSBmcm9tICcuLi9pY29uL256LWljb24ubW9kdWxlJztcblxuaW1wb3J0IHsgTnpEcmF3ZXJDb21wb25lbnQgfSBmcm9tICcuL256LWRyYXdlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpEcmF3ZXJTZXJ2aWNlIH0gZnJvbSAnLi9uei1kcmF3ZXIuc2VydmljZSc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHMgICAgICAgIDogWyBDb21tb25Nb2R1bGUsIE92ZXJsYXlNb2R1bGUsIFBvcnRhbE1vZHVsZSwgTnpJY29uTW9kdWxlIF0sXG4gIGV4cG9ydHMgICAgICAgIDogWyBOekRyYXdlckNvbXBvbmVudCBdLFxuICBkZWNsYXJhdGlvbnMgICA6IFsgTnpEcmF3ZXJDb21wb25lbnQgXSxcbiAgZW50cnlDb21wb25lbnRzOiBbIE56RHJhd2VyQ29tcG9uZW50IF0sXG4gIHByb3ZpZGVycyAgICAgIDogWyBOekRyYXdlclNlcnZpY2UgXVxufSlcbmV4cG9ydCBjbGFzcyBOekRyYXdlck1vZHVsZSB7XG59XG4iLCJpbXBvcnQgeyBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW256LW1lbnUtZGl2aWRlcl0nLFxuICBob3N0ICAgIDoge1xuICAgICdbY2xhc3MuYW50LWRyb3Bkb3duLW1lbnUtaXRlbS1kaXZpZGVyXSc6ICd0cnVlJ1xuICB9XG59KVxuZXhwb3J0IGNsYXNzIE56TWVudURpdmlkZXJEaXJlY3RpdmUge1xufVxuIiwiaW1wb3J0IHtcbiAgQ29tcG9uZW50XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICAgICAgICAgIDogJ1tuei1tZW51LWdyb3VwXScsXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxuICB0ZW1wbGF0ZVVybCAgICAgICAgOiAnLi9uei1tZW51LWdyb3VwLmNvbXBvbmVudC5odG1sJyxcbiAgaG9zdCAgICAgICAgICAgICAgIDoge1xuICAgICdbY2xhc3MuYW50LW1lbnUtaXRlbS1ncm91cF0nOiAndHJ1ZSdcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBOek1lbnVHcm91cENvbXBvbmVudCB7XG59XG4iLCJpbXBvcnQge1xuICBBZnRlckNvbnRlbnRJbml0LFxuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgSG9zdEJpbmRpbmcsXG4gIElucHV0LFxuICBPdXRwdXRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IHRvQm9vbGVhbiB9IGZyb20gJy4uL2NvcmUvdXRpbC9jb252ZXJ0JztcblxuaW1wb3J0IHsgTnpNZW51SXRlbURpcmVjdGl2ZSB9IGZyb20gJy4vbnotbWVudS1pdGVtLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBOelN1Yk1lbnVDb21wb25lbnQgfSBmcm9tICcuL256LXN1Ym1lbnUuY29tcG9uZW50JztcblxuZXhwb3J0IHR5cGUgTnpNb2RlID0gJ3ZlcnRpY2FsJyB8ICdob3Jpem9udGFsJyB8ICdpbmxpbmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbnotbWVudV0nXG59KVxuXG5leHBvcnQgY2xhc3MgTnpNZW51RGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XG4gIHByaXZhdGUgX3NlbGVjdGFibGUgPSB0cnVlO1xuICBwcml2YXRlIF9pbmxpbmVDb2xsYXBzZWQgPSBmYWxzZTtcbiAgcHJpdmF0ZSBfaW5Ecm9wRG93biA9IGZhbHNlO1xuICAvKiogdmlldyBpbml0IGZsYXQgKi9cbiAgcHJpdmF0ZSBpc0luaXQgPSBmYWxzZTtcbiAgLyoqIGNhY2hlIG1vZGUgKi9cbiAgcHJpdmF0ZSBjYWNoZU1vZGU6IE56TW9kZTtcbiAgLyoqIG9wZW5lZCBpbmRleCBvZiBhcnJheSAqL1xuICBwcml2YXRlIHN1Yk1lbnVzT3BlbkluZGV4ID0gW107XG5cbiAgLyoqIGNvbGxlY3Rpb24gb2YgbWVudSBpdGVtICovXG4gIG1lbnVJdGVtczogTnpNZW51SXRlbURpcmVjdGl2ZVtdID0gW107XG4gIC8qKiBjb2xsZWN0aW9uIG9mIHN1YiBtZW51ICovXG4gIHN1Yk1lbnVzOiBOelN1Yk1lbnVDb21wb25lbnRbXSA9IFtdO1xuICBASW5wdXQoKSBuelRoZW1lOiAnbGlnaHQnIHwgJ2RhcmsnID0gJ2xpZ2h0JztcbiAgQElucHV0KCkgbnpJbmxpbmVJbmRlbnQgPSAyNDtcbiAgQElucHV0KCkgbnpNb2RlOiBOek1vZGUgPSAndmVydGljYWwnO1xuICBAT3V0cHV0KCkgbnpDbGljayA9IG5ldyBFdmVudEVtaXR0ZXI8TnpNZW51SXRlbURpcmVjdGl2ZT4oKTtcblxuICBASW5wdXQoKVxuICBzZXQgbnpJbkRyb3BEb3duKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5faW5Ecm9wRG93biA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gICAgdGhpcy5uelNlbGVjdGFibGUgPSAhdGhpcy5faW5Ecm9wRG93bjtcbiAgICB0aGlzLm1lbnVJdGVtcy5mb3JFYWNoKG1lbnUgPT4gbWVudS5pc0luRHJvcERvd24gPSB0aGlzLl9pbkRyb3BEb3duKTtcbiAgICB0aGlzLnN1Yk1lbnVzLmZvckVhY2goc3ViTWVudSA9PiBzdWJNZW51LmlzSW5Ecm9wRG93biA9IHRoaXMuX2luRHJvcERvd24pO1xuICB9XG5cbiAgZ2V0IG56SW5Ecm9wRG93bigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5faW5Ecm9wRG93bjtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuelNlbGVjdGFibGUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9zZWxlY3RhYmxlID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuelNlbGVjdGFibGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3NlbGVjdGFibGU7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpJbmxpbmVDb2xsYXBzZWQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9pbmxpbmVDb2xsYXBzZWQgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICAgIGlmICh0aGlzLmlzSW5pdCkge1xuICAgICAgdGhpcy51cGRhdGVJbmxpbmVDb2xsYXBzZSgpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBueklubGluZUNvbGxhcHNlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5faW5saW5lQ29sbGFwc2VkO1xuICB9XG5cbiAgdXBkYXRlSW5saW5lQ29sbGFwc2UoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX2lubGluZUNvbGxhcHNlZCkge1xuICAgICAgdGhpcy5oaWRlU3ViTWVudXMoKTtcbiAgICAgIHRoaXMubnpNb2RlID0gJ3ZlcnRpY2FsJztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZWR1Y3Rpb25TdWJNZW51cygpO1xuICAgICAgdGhpcy5uek1vZGUgPSB0aGlzLmNhY2hlTW9kZTtcbiAgICB9XG4gIH1cblxuICAvKiogZGVmaW5lIGhvc3QgY2xhc3MgKi9cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hbnQtZHJvcGRvd24tbWVudScpXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW50LW1lbnUtZHJvcGRvd24tdmVydGljYWwnKVxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmFudC1kcm9wZG93bi1tZW51LXJvb3QnKVxuICBnZXQgaXNJbkRyb3BEb3duQ2xhc3MoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubnpJbkRyb3BEb3duO1xuICB9XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hbnQtbWVudScpXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW50LW1lbnUtcm9vdCcpXG4gIGdldCBpc05vdEluRHJvcERvd25DbGFzcygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gIXRoaXMubnpJbkRyb3BEb3duO1xuICB9XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hbnQtZHJvcGRvd24tbWVudS1saWdodCcpXG4gIGdldCBzZXREcm9wRG93blRoZW1lTGlnaHRDbGFzcygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5uekluRHJvcERvd24gJiYgKHRoaXMubnpUaGVtZSA9PT0gJ2xpZ2h0Jyk7XG4gIH1cblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmFudC1kcm9wZG93bi1tZW51LWRhcmsnKVxuICBnZXQgc2V0RHJvcERvd25UaGVtZURhcmtDbGFzcygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5uekluRHJvcERvd24gJiYgKHRoaXMubnpUaGVtZSA9PT0gJ2RhcmsnKTtcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW50LW1lbnUtbGlnaHQnKVxuICBnZXQgc2V0TWVudVRoZW1lTGlnaHRDbGFzcygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKCF0aGlzLm56SW5Ecm9wRG93bikgJiYgKHRoaXMubnpUaGVtZSA9PT0gJ2xpZ2h0Jyk7XG4gIH1cblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmFudC1tZW51LWRhcmsnKVxuICBnZXQgc2V0TWVudVRoZW1lRGFya0NsYXNzKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoIXRoaXMubnpJbkRyb3BEb3duKSAmJiAodGhpcy5uelRoZW1lID09PSAnZGFyaycpO1xuICB9XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hbnQtbWVudS12ZXJ0aWNhbCcpXG4gIGdldCBzZXRNZW51VmVydGljYWxDbGFzcygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKCF0aGlzLm56SW5Ecm9wRG93bikgJiYgKHRoaXMubnpNb2RlID09PSAndmVydGljYWwnKTtcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW50LW1lbnUtaG9yaXpvbnRhbCcpXG4gIGdldCBzZXRNZW51SG9yaXpvbnRhbENsYXNzKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoIXRoaXMubnpJbkRyb3BEb3duKSAmJiAodGhpcy5uek1vZGUgPT09ICdob3Jpem9udGFsJyk7XG4gIH1cblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmFudC1tZW51LWlubGluZScpXG4gIGdldCBzZXRNZW51SW5saW5lQ2xhc3MoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICghdGhpcy5uekluRHJvcERvd24pICYmICh0aGlzLm56TW9kZSA9PT0gJ2lubGluZScpO1xuICB9XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hbnQtbWVudS1pbmxpbmUtY29sbGFwc2VkJylcbiAgZ2V0IHNldE1lbnVJbmxpbmVDb2xsYXBzZWRDbGFzcygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKCF0aGlzLm56SW5Ecm9wRG93bikgJiYgKHRoaXMubnpNb2RlICE9PSAnaG9yaXpvbnRhbCcpICYmIHRoaXMubnpJbmxpbmVDb2xsYXBzZWQ7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgZWw6IEVsZW1lbnRSZWYpIHtcblxuICB9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xuICAgIHRoaXMuaXNJbml0ID0gdHJ1ZTtcbiAgICB0aGlzLmNhY2hlTW9kZSA9IHRoaXMubnpNb2RlO1xuICAgIHRoaXMudXBkYXRlSW5saW5lQ29sbGFwc2UoKTtcbiAgfVxuXG4gIC8qKiB0cmlnZ2VyIHdoZW4gbWVudSBpdGVtIGNsaWNrZWQgKi9cbiAgY2xlYXJBbGxTZWxlY3RlZCgpOiB2b2lkIHtcbiAgICB0aGlzLm1lbnVJdGVtcy5mb3JFYWNoKG1lbnUgPT4gbWVudS5uelNlbGVjdGVkID0gZmFsc2UpO1xuICB9XG5cbiAgaGlkZVN1Yk1lbnVzKCk6IHZvaWQge1xuICAgIHRoaXMuc3ViTWVudXNPcGVuSW5kZXggPSBbXTtcbiAgICB0aGlzLnN1Yk1lbnVzLmZvckVhY2goKHN1Ym1lbnUsIGluZGV4KSA9PiB7XG4gICAgICBpZiAoc3VibWVudS5uek9wZW4pIHtcbiAgICAgICAgdGhpcy5zdWJNZW51c09wZW5JbmRleC5wdXNoKGluZGV4KTtcbiAgICAgIH1cbiAgICAgIHN1Ym1lbnUubnpPcGVuID0gZmFsc2U7XG4gICAgfSk7XG4gIH1cblxuICByZWR1Y3Rpb25TdWJNZW51cygpOiB2b2lkIHtcbiAgICB0aGlzLnN1Yk1lbnVzT3BlbkluZGV4LmZvckVhY2goaSA9PiB0aGlzLnN1Yk1lbnVzWyBpIF0ubnpPcGVuID0gdHJ1ZSk7XG4gICAgdGhpcy5zdWJNZW51c09wZW5JbmRleCA9IFtdO1xuICB9XG5cbiAgY2xpY2tJdGVtKHZhbHVlOiBOek1lbnVJdGVtRGlyZWN0aXZlKTogdm9pZCB7XG4gICAgdGhpcy5uekNsaWNrLmVtaXQodmFsdWUpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RMaXN0ZW5lciwgT25Jbml0LCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW256LWRyb3Bkb3duXScsXG4gIGhvc3QgICAgOiB7XG4gICAgJ1tjbGFzcy5hbnQtZHJvcGRvd24tdHJpZ2dlcl0nOiAndHJ1ZSdcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBOekRyb3BEb3duRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgJG1vdXNlZW50ZXIgPSBuZXcgU3ViamVjdDxNb3VzZUV2ZW50PigpO1xuICAkbW91c2VsZWF2ZSA9IG5ldyBTdWJqZWN0PE1vdXNlRXZlbnQ+KCk7XG4gICRjbGljayA9IG5ldyBTdWJqZWN0PE1vdXNlRXZlbnQ+KCk7XG5cbiAgQEhvc3RMaXN0ZW5lcignbW91c2VlbnRlcicsIFsgJyRldmVudCcgXSlcbiAgb25Nb3VzZUVudGVyKGU6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICB0aGlzLiRtb3VzZWVudGVyLm5leHQoZSk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdtb3VzZWxlYXZlJywgWyAnJGV2ZW50JyBdKVxuICBvbk1vdXNlTGVhdmUoZTogTW91c2VFdmVudCk6IHZvaWQge1xuICAgIHRoaXMuJG1vdXNlbGVhdmUubmV4dChlKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyAnJGV2ZW50JyBdKVxuICBvbkNsaWNrKGU6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHRoaXMuJGNsaWNrLm5leHQoZSk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQubm9kZU5hbWUgPT09ICdBJykge1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2FudC1kcm9wZG93bi1saW5rJyk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBDZGtDb25uZWN0ZWRPdmVybGF5LCBDb25uZWN0ZWRPdmVybGF5UG9zaXRpb25DaGFuZ2UsIENvbm5lY3Rpb25Qb3NpdGlvblBhaXIgfSBmcm9tICdAYW5ndWxhci9jZGsvb3ZlcmxheSc7XG5pbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgQ29tcG9uZW50LFxuICBDb250ZW50Q2hpbGQsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5wdXQsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBPdXRwdXQsXG4gIFJlbmRlcmVyMixcbiAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBjb21iaW5lTGF0ZXN0LCBtZXJnZSwgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBkZWJvdW5jZVRpbWUsIGRpc3RpbmN0VW50aWxDaGFuZ2VkLCBtYXAsIG1hcFRvLCB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IGRyb3BEb3duQW5pbWF0aW9uIH0gZnJvbSAnLi4vY29yZS9hbmltYXRpb24vZHJvcGRvd24tYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBERUZBVUxUX0RST1BET1dOX1BPU0lUSU9OUywgUE9TSVRJT05fTUFQIH0gZnJvbSAnLi4vY29yZS9vdmVybGF5L292ZXJsYXktcG9zaXRpb24tbWFwJztcbmltcG9ydCB7IHRvQm9vbGVhbiB9IGZyb20gJy4uL2NvcmUvdXRpbC9jb252ZXJ0JztcbmltcG9ydCB7IE56TWVudURpcmVjdGl2ZSB9IGZyb20gJy4uL21lbnUvbnotbWVudS5kaXJlY3RpdmUnO1xuXG5pbXBvcnQgeyBOekRyb3BEb3duRGlyZWN0aXZlIH0gZnJvbSAnLi9uei1kcm9wZG93bi5kaXJlY3RpdmUnO1xuXG5leHBvcnQgdHlwZSBOelBsYWNlbWVudCA9ICdib3R0b21MZWZ0JyB8ICdib3R0b21DZW50ZXInIHwgJ2JvdHRvbVJpZ2h0JyB8ICd0b3BMZWZ0JyB8ICd0b3BDZW50ZXInIHwgJ3RvcFJpZ2h0JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yICAgICAgICAgICA6ICduei1kcm9wZG93bicsXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxuICBhbmltYXRpb25zICAgICAgICAgOiBbXG4gICAgZHJvcERvd25BbmltYXRpb25cbiAgXSxcbiAgdGVtcGxhdGVVcmwgICAgICAgIDogJy4vbnotZHJvcGRvd24uY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZXMgICAgICAgICAgICAgOiBbXG4gICAgYFxuICAgICAgLmFudC1kcm9wZG93biB7XG4gICAgICAgIHRvcDogMTAwJTtcbiAgICAgICAgbGVmdDogMDtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgbWFyZ2luLXRvcDogNHB4O1xuICAgICAgICBtYXJnaW4tYm90dG9tOiA0cHg7XG4gICAgICB9XG4gICAgYFxuICBdXG59KVxuXG5leHBvcnQgY2xhc3MgTnpEcm9wRG93bkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95LCBBZnRlclZpZXdJbml0IHtcbiAgcHJpdmF0ZSBfY2xpY2tIaWRlID0gdHJ1ZTtcbiAgcHJpdmF0ZSBfdmlzaWJsZSA9IGZhbHNlO1xuICBwcml2YXRlIF9kaXNhYmxlZCA9IGZhbHNlO1xuICBwcml2YXRlIHVuc3Vic2NyaWJlJCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cbiAgQElucHV0KCkgaGFzRmlsdGVyQnV0dG9uID0gZmFsc2U7XG4gIHRyaWdnZXJXaWR0aCA9IDA7XG4gIHBsYWNlbWVudDogTnpQbGFjZW1lbnQgPSAnYm90dG9tTGVmdCc7XG4gIGRyb3BEb3duUG9zaXRpb246ICd0b3AnIHwgJ2NlbnRlcicgfCAnYm90dG9tJyA9ICdib3R0b20nO1xuICBwb3NpdGlvbnM6IENvbm5lY3Rpb25Qb3NpdGlvblBhaXJbXSA9IFsgLi4uREVGQVVMVF9EUk9QRE9XTl9QT1NJVElPTlMgXTtcbiAgJHN1Yk9wZW4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+KGZhbHNlKTtcbiAgJHZpc2libGVDaGFuZ2UgPSBuZXcgU3ViamVjdDxib29sZWFuPigpO1xuICBAQ29udGVudENoaWxkKE56RHJvcERvd25EaXJlY3RpdmUpIG56T3JpZ2luOiBOekRyb3BEb3duRGlyZWN0aXZlO1xuICBAQ29udGVudENoaWxkKE56TWVudURpcmVjdGl2ZSkgbnpNZW51OiBOek1lbnVEaXJlY3RpdmU7XG4gIEBJbnB1dCgpIG56VHJpZ2dlcjogJ2NsaWNrJyB8ICdob3ZlcicgPSAnaG92ZXInO1xuICBAT3V0cHV0KCkgbnpWaXNpYmxlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBWaWV3Q2hpbGQoQ2RrQ29ubmVjdGVkT3ZlcmxheSkgY2RrT3ZlcmxheTogQ2RrQ29ubmVjdGVkT3ZlcmxheTtcblxuICBASW5wdXQoKVxuICBzZXQgbnpDbGlja0hpZGUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9jbGlja0hpZGUgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56Q2xpY2tIaWRlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9jbGlja0hpZGU7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpEaXNhYmxlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2Rpc2FibGVkID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgICBpZiAodGhpcy5fZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKHRoaXMubnpPcmlnaW4uZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnZGlzYWJsZWQnLCAnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQXR0cmlidXRlKHRoaXMubnpPcmlnaW4uZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnZGlzYWJsZWQnKTtcbiAgICB9XG4gIH1cblxuICBnZXQgbnpEaXNhYmxlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fZGlzYWJsZWQ7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpWaXNpYmxlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fdmlzaWJsZSA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gICAgLyoqIGhhbmRsZSBuelZpc2libGUgY2hhbmdlIHdpdGggbW91c2UgZXZlbnQgKiovXG4gICAgdGhpcy4kdmlzaWJsZUNoYW5nZS5uZXh0KHRoaXMuX3Zpc2libGUpO1xuICB9XG5cbiAgZ2V0IG56VmlzaWJsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fdmlzaWJsZTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuelBsYWNlbWVudCh2YWx1ZTogTnpQbGFjZW1lbnQpIHtcbiAgICB0aGlzLnBsYWNlbWVudCA9IHZhbHVlO1xuICAgIHRoaXMuZHJvcERvd25Qb3NpdGlvbiA9ICh0aGlzLm56UGxhY2VtZW50LmluZGV4T2YoJ3RvcCcpICE9PSAtMSkgPyAndG9wJyA6ICdib3R0b20nO1xuICAgIHRoaXMucG9zaXRpb25zLnVuc2hpZnQoUE9TSVRJT05fTUFQWyB0aGlzLnBsYWNlbWVudCBdIGFzIENvbm5lY3Rpb25Qb3NpdGlvblBhaXIpO1xuICB9XG5cbiAgZ2V0IG56UGxhY2VtZW50KCk6IE56UGxhY2VtZW50IHtcbiAgICByZXR1cm4gdGhpcy5wbGFjZW1lbnQ7XG4gIH1cblxuICBvbkNsaWNrRXZlbnQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubnpUcmlnZ2VyID09PSAnY2xpY2snKSB7XG4gICAgICB0aGlzLnNob3coKTtcbiAgICB9XG4gIH1cblxuICBvbk1vdXNlRW50ZXJFdmVudCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5uelRyaWdnZXIgPT09ICdob3ZlcicpIHtcbiAgICAgIHRoaXMuc2hvdygpO1xuICAgIH1cbiAgfVxuXG4gIG9uTW91c2VMZWF2ZUV2ZW50KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLm56VHJpZ2dlciA9PT0gJ2hvdmVyJykge1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfVxuICB9XG5cbiAgaGlkZSgpOiB2b2lkIHtcbiAgICB0aGlzLiR2aXNpYmxlQ2hhbmdlLm5leHQoZmFsc2UpO1xuICB9XG5cbiAgc2hvdygpOiB2b2lkIHtcbiAgICB0aGlzLiR2aXNpYmxlQ2hhbmdlLm5leHQodHJ1ZSk7XG4gIH1cblxuICBvblBvc2l0aW9uQ2hhbmdlKHBvc2l0aW9uOiBDb25uZWN0ZWRPdmVybGF5UG9zaXRpb25DaGFuZ2UpOiB2b2lkIHtcbiAgICB0aGlzLmRyb3BEb3duUG9zaXRpb24gPSBwb3NpdGlvbi5jb25uZWN0aW9uUGFpci5vcmlnaW5ZO1xuICB9XG5cbiAgc2V0VHJpZ2dlcldpZHRoKCk6IHZvaWQge1xuICAgIHRoaXMudHJpZ2dlcldpZHRoID0gdGhpcy5uek9yaWdpbi5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG4gICAgLyoqIHNob3VsZCByZW1vdmUgYWZ0ZXIgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvbWF0ZXJpYWwyL3B1bGwvODc2NSBtZXJnZWQgKiovXG4gICAgaWYgKHRoaXMuY2RrT3ZlcmxheSAmJiB0aGlzLmNka092ZXJsYXkub3ZlcmxheVJlZikge1xuICAgICAgdGhpcy5jZGtPdmVybGF5Lm92ZXJsYXlSZWYudXBkYXRlU2l6ZSh7XG4gICAgICAgIG1pbldpZHRoOiB0aGlzLnRyaWdnZXJXaWR0aFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgc3RhcnRTdWJzY3JpYmUob2JzZXJ2YWJsZSQ6IE9ic2VydmFibGU8Ym9vbGVhbj4pOiB2b2lkIHtcbiAgICBsZXQgJHByZSA9IG9ic2VydmFibGUkO1xuICAgIGlmICh0aGlzLm56Q2xpY2tIaWRlICYmIHRoaXMubnpNZW51KSB7XG4gICAgICBjb25zdCAkbWVudUl0ZW1DbGljayA9IHRoaXMubnpNZW51Lm56Q2xpY2suYXNPYnNlcnZhYmxlKCkucGlwZShtYXBUbyhmYWxzZSkpO1xuICAgICAgJHByZSA9IG1lcmdlKCRwcmUsICRtZW51SXRlbUNsaWNrKTtcbiAgICB9XG4gICAgY29uc3QgZmluYWwkID0gY29tYmluZUxhdGVzdCgkcHJlLCB0aGlzLiRzdWJPcGVuKS5waXBlKG1hcCh2YWx1ZSA9PiB2YWx1ZVsgMCBdIHx8IHZhbHVlWyAxIF0pLCBkZWJvdW5jZVRpbWUoNTApLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKTtcbiAgICBmaW5hbCQucGlwZSh0YWtlVW50aWwodGhpcy51bnN1YnNjcmliZSQpKS5zdWJzY3JpYmUodGhpcy5vblZpc2libGVDaGFuZ2UpO1xuICB9XG5cbiAgb25WaXNpYmxlQ2hhbmdlID0gKHZpc2libGU6IGJvb2xlYW4pID0+IHtcbiAgICBpZiAodmlzaWJsZSkge1xuICAgICAgdGhpcy5zZXRUcmlnZ2VyV2lkdGgoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMubnpWaXNpYmxlICE9PSB2aXNpYmxlKSB7XG4gICAgICB0aGlzLm56VmlzaWJsZSA9IHZpc2libGU7XG4gICAgICB0aGlzLm56VmlzaWJsZUNoYW5nZS5lbWl0KHRoaXMubnpWaXNpYmxlKTtcbiAgICB9XG4gICAgdGhpcy5jaGFuZ2VEZXRlY3Rvci5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLm56TWVudSkge1xuICAgICAgdGhpcy5uek1lbnUubnpJbkRyb3BEb3duID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLnVuc3Vic2NyaWJlJC5uZXh0KCk7XG4gICAgdGhpcy51bnN1YnNjcmliZSQuY29tcGxldGUoKTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICBsZXQgbW91c2UkOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuICAgIGlmICh0aGlzLm56VHJpZ2dlciA9PT0gJ2hvdmVyJykge1xuICAgICAgY29uc3QgbW91c2VFbnRlck9yaWdpbiQgPSB0aGlzLm56T3JpZ2luLiRtb3VzZWVudGVyLnBpcGUobWFwVG8odHJ1ZSkpO1xuICAgICAgY29uc3QgbW91c2VMZWF2ZU9yaWdpbiQgPSB0aGlzLm56T3JpZ2luLiRtb3VzZWxlYXZlLnBpcGUobWFwVG8oZmFsc2UpKTtcbiAgICAgIG1vdXNlJCA9IG1lcmdlKG1vdXNlTGVhdmVPcmlnaW4kLCBtb3VzZUVudGVyT3JpZ2luJCk7XG4gICAgfVxuICAgIGlmICh0aGlzLm56VHJpZ2dlciA9PT0gJ2NsaWNrJykge1xuICAgICAgbW91c2UkID0gdGhpcy5uek9yaWdpbi4kY2xpY2sucGlwZShtYXBUbyh0cnVlKSk7XG4gICAgfVxuICAgIGNvbnN0IG9ic2VydmFibGUkID0gbWVyZ2UodGhpcy4kdmlzaWJsZUNoYW5nZSwgbW91c2UkKTtcbiAgICB0aGlzLnN0YXJ0U3Vic2NyaWJlKG9ic2VydmFibGUkKTtcbiAgfVxuXG4gIGdldCBoYXNCYWNrZHJvcCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5uelRyaWdnZXIgPT09ICdjbGljayc7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHByb3RlY3RlZCBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcbiAgfVxufVxuIiwiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG4gIE91dHB1dCxcbiAgUmVuZGVyZXIyLFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGRyb3BEb3duQW5pbWF0aW9uIH0gZnJvbSAnLi4vY29yZS9hbmltYXRpb24vZHJvcGRvd24tYW5pbWF0aW9ucyc7XG5cbmltcG9ydCB7IE56RHJvcERvd25Db21wb25lbnQgfSBmcm9tICcuL256LWRyb3Bkb3duLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOekRyb3BEb3duRGlyZWN0aXZlIH0gZnJvbSAnLi9uei1kcm9wZG93bi5kaXJlY3RpdmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICAgICAgICAgIDogJ256LWRyb3Bkb3duLWJ1dHRvbicsXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxuICBhbmltYXRpb25zICAgICAgICAgOiBbXG4gICAgZHJvcERvd25BbmltYXRpb25cbiAgXSxcbiAgdGVtcGxhdGVVcmwgICAgICAgIDogJy4vbnotZHJvcGRvd24tYnV0dG9uLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVzICAgICAgICAgICAgIDogWyBgXG4gICAgOmhvc3Qge1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIH1cblxuICAgIC5hbnQtZHJvcGRvd24ge1xuICAgICAgdG9wOiAxMDAlO1xuICAgICAgbGVmdDogMDtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgbWFyZ2luLXRvcDogNHB4O1xuICAgICAgbWFyZ2luLWJvdHRvbTogNHB4O1xuICAgIH1cbiAgYCBdXG59KVxuXG5leHBvcnQgY2xhc3MgTnpEcm9wRG93bkJ1dHRvbkNvbXBvbmVudCBleHRlbmRzIE56RHJvcERvd25Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSwgQWZ0ZXJWaWV3SW5pdCB7XG4gIEBJbnB1dCgpIG56U2l6ZSA9ICdkZWZhdWx0JztcbiAgQElucHV0KCkgbnpUeXBlID0gJ2RlZmF1bHQnO1xuICBAVmlld0NoaWxkKCdjb250ZW50JykgY29udGVudDtcbiAgQE91dHB1dCgpIG56Q2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyPE1vdXNlRXZlbnQ+KCk7XG4gIEBWaWV3Q2hpbGQoTnpEcm9wRG93bkRpcmVjdGl2ZSkgbnpPcmlnaW47XG5cbiAgb25WaXNpYmxlQ2hhbmdlID0gKHZpc2libGU6IGJvb2xlYW4pID0+IHtcbiAgICBpZiAodGhpcy5uekRpc2FibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh2aXNpYmxlKSB7XG4gICAgICB0aGlzLnNldFRyaWdnZXJXaWR0aCgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5uelZpc2libGUgIT09IHZpc2libGUpIHtcbiAgICAgIHRoaXMubnpWaXNpYmxlID0gdmlzaWJsZTtcbiAgICAgIHRoaXMubnpWaXNpYmxlQ2hhbmdlLmVtaXQodGhpcy5uelZpc2libGUpO1xuICAgIH1cbiAgICB0aGlzLmNoYW5nZURldGVjdG9yLm1hcmtGb3JDaGVjaygpO1xuICB9XG5cbiAgY29uc3RydWN0b3IocmVuZGVyZXI6IFJlbmRlcmVyMiwgY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gICAgc3VwZXIocmVuZGVyZXIsIGNoYW5nZURldGVjdG9yKTtcbiAgfVxuXG4gIC8qKiByZXdyaXRlIGFmdGVyVmlld0luaXQgaG9vayAqL1xuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgdGhpcy5zdGFydFN1YnNjcmliZSh0aGlzLiR2aXNpYmxlQ2hhbmdlKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgYW5pbWF0ZSwgc3RhdGUsIHN0eWxlLCB0cmFuc2l0aW9uLCB0cmlnZ2VyIH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBDZGtDb25uZWN0ZWRPdmVybGF5LCBDb25uZWN0ZWRPdmVybGF5UG9zaXRpb25DaGFuZ2UsIENvbm5lY3Rpb25Qb3NpdGlvblBhaXIgfSBmcm9tICdAYW5ndWxhci9jZGsvb3ZlcmxheSc7XG5pbXBvcnQge1xuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgQ29tcG9uZW50LFxuICBDb250ZW50Q2hpbGRyZW4sXG4gIEVsZW1lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgSG9zdCxcbiAgSG9zdEJpbmRpbmcsXG4gIElucHV0LFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgT3B0aW9uYWwsXG4gIE91dHB1dCxcbiAgUXVlcnlMaXN0LFxuICBTa2lwU2VsZixcbiAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBjb21iaW5lTGF0ZXN0LCBCZWhhdmlvclN1YmplY3QsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGF1ZGl0VGltZSwgbWFwLCB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IFBPU0lUSU9OX01BUCB9IGZyb20gJy4uL2NvcmUvb3ZlcmxheS9vdmVybGF5LXBvc2l0aW9uLW1hcCc7XG5pbXBvcnQgeyB0b0Jvb2xlYW4gfSBmcm9tICcuLi9jb3JlL3V0aWwvY29udmVydCc7XG5pbXBvcnQgeyBOekRyb3BEb3duQnV0dG9uQ29tcG9uZW50IH0gZnJvbSAnLi4vZHJvcGRvd24vbnotZHJvcGRvd24tYnV0dG9uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOekRyb3BEb3duQ29tcG9uZW50IH0gZnJvbSAnLi4vZHJvcGRvd24vbnotZHJvcGRvd24uY29tcG9uZW50JztcblxuaW1wb3J0IHsgTnpNZW51RGlyZWN0aXZlIH0gZnJvbSAnLi9uei1tZW51LmRpcmVjdGl2ZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICAgICAgOiAnW256LXN1Ym1lbnVdJyxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG4gIGFuaW1hdGlvbnMgICAgICAgICA6IFtcbiAgICB0cmlnZ2VyKCdleHBhbmRBbmltYXRpb24nLCBbXG4gICAgICBzdGF0ZSgnZXhwYW5kJywgc3R5bGUoeyBoZWlnaHQ6ICcqJyB9KSksXG4gICAgICBzdGF0ZSgnaGlkZGVuJywgc3R5bGUoeyBoZWlnaHQ6IDAsIG92ZXJmbG93OiAnaGlkZGVuJyB9KSksXG4gICAgICB0cmFuc2l0aW9uKCdleHBhbmQgPT4gaGlkZGVuJywgYW5pbWF0ZSgxNTApKSxcbiAgICAgIHRyYW5zaXRpb24oJ2hpZGRlbiA9PiBleHBhbmQnLCBhbmltYXRlKDE1MCkpLFxuICAgICAgc3RhdGUoJ2ZhZGUnLCBzdHlsZSh7IG9wYWNpdHk6IDEgfSkpLFxuICAgICAgdHJhbnNpdGlvbignZmFkZSA9PiB2b2lkJywgW1xuICAgICAgICBhbmltYXRlKDE1MCwgc3R5bGUoeyBvcGFjaXR5OiAwIH0pKVxuICAgICAgXSksXG4gICAgICB0cmFuc2l0aW9uKCd2b2lkID0+IGZhZGUnLCBbXG4gICAgICAgIHN0eWxlKHsgb3BhY2l0eTogJzAnIH0pLFxuICAgICAgICBhbmltYXRlKDE1MClcbiAgICAgIF0pLFxuICAgICAgc3RhdGUoJ2JvdHRvbScsIHN0eWxlKHtcbiAgICAgICAgb3BhY2l0eSAgICAgICAgOiAxLFxuICAgICAgICB0cmFuc2Zvcm0gICAgICA6ICdzY2FsZVkoMSknLFxuICAgICAgICB0cmFuc2Zvcm1PcmlnaW46ICcwJSAwJSdcbiAgICAgIH0pKSxcbiAgICAgIHRyYW5zaXRpb24oJ3ZvaWQgPT4gYm90dG9tJywgW1xuICAgICAgICBzdHlsZSh7XG4gICAgICAgICAgb3BhY2l0eSAgICAgICAgOiAwLFxuICAgICAgICAgIHRyYW5zZm9ybSAgICAgIDogJ3NjYWxlWSgwLjgpJyxcbiAgICAgICAgICB0cmFuc2Zvcm1PcmlnaW46ICcwJSAwJSdcbiAgICAgICAgfSksXG4gICAgICAgIGFuaW1hdGUoJzE1MG1zIGN1YmljLWJlemllcigwLjIzLCAxLCAwLjMyLCAxKScpXG4gICAgICBdKSxcbiAgICAgIHRyYW5zaXRpb24oJ2JvdHRvbSA9PiB2b2lkJywgW1xuICAgICAgICBhbmltYXRlKCcxNTBtcyBjdWJpYy1iZXppZXIoMC4yMywgMSwgMC4zMiwgMSknLCBzdHlsZSh7XG4gICAgICAgICAgb3BhY2l0eSAgICAgICAgOiAwLFxuICAgICAgICAgIHRyYW5zZm9ybSAgICAgIDogJ3NjYWxlWSgwLjgpJyxcbiAgICAgICAgICB0cmFuc2Zvcm1PcmlnaW46ICcwJSAwJSdcbiAgICAgICAgfSkpXG4gICAgICBdKVxuICAgIF0pXG4gIF0sXG4gIHRlbXBsYXRlVXJsICAgICAgICA6ICcuL256LXN1Ym1lbnUuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZXMgICAgICAgICAgICAgOiBbXG4gICAgYFxuICAgICAgLmFudC1tZW51LXN1Ym1lbnUtcGxhY2VtZW50LWJvdHRvbUxlZnQge1xuICAgICAgICB0b3A6IDZweDtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgfVxuXG4gICAgICAuYW50LW1lbnUtc3VibWVudS1wbGFjZW1lbnQtcmlnaHRUb3Age1xuICAgICAgICBsZWZ0OiA0cHg7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIH1cblxuICAgICAgLmFudC1tZW51LXN1Ym1lbnUtcGxhY2VtZW50LWxlZnRUb3Age1xuICAgICAgICByaWdodDogNHB4O1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICB9XG4gICAgYFxuICBdXG59KVxuXG5leHBvcnQgY2xhc3MgTnpTdWJNZW51Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBwcml2YXRlIF9vcGVuID0gZmFsc2U7XG4gIHByaXZhdGUgX2Rpc2FibGVkID0gZmFsc2U7XG4gIHByaXZhdGUgJG1vdXNlU3ViamVjdCA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XG4gIHByaXZhdGUgdW5zdWJzY3JpYmUkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICBwbGFjZW1lbnQgPSAncmlnaHRUb3AnO1xuICAkc3ViT3BlbiA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4oZmFsc2UpO1xuICBpc0luRHJvcERvd24gPSBmYWxzZTtcbiAgaXNJblN1Yk1lbnUgPSBmYWxzZTtcbiAgbGV2ZWwgPSAxO1xuICB0cmlnZ2VyV2lkdGggPSBudWxsO1xuICBAQ29udGVudENoaWxkcmVuKE56U3ViTWVudUNvbXBvbmVudCwgeyBkZXNjZW5kYW50czogdHJ1ZSB9KSBzdWJNZW51czogUXVlcnlMaXN0PE56U3ViTWVudUNvbXBvbmVudD47XG4gIEBPdXRwdXQoKSBuek9wZW5DaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQFZpZXdDaGlsZChDZGtDb25uZWN0ZWRPdmVybGF5KSBjZGtPdmVybGF5OiBDZGtDb25uZWN0ZWRPdmVybGF5O1xuICBAVmlld0NoaWxkKCd0cmlnZ2VyJykgdHJpZ2dlcjogRWxlbWVudFJlZjtcblxuICBASW5wdXQoKVxuICBzZXQgbnpPcGVuKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fb3BlbiA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gICAgdGhpcy5zZXRUcmlnZ2VyV2lkdGgoKTtcbiAgfVxuXG4gIGdldCBuek9wZW4oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX29wZW47XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpEaXNhYmxlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2Rpc2FibGVkID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuekRpc2FibGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9kaXNhYmxlZDtcbiAgfVxuXG4gIGdldCBzdWJJdGVtU2VsZWN0ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhdGhpcy5uek1lbnVEaXJlY3RpdmUubWVudUl0ZW1zLmZpbmQoZSA9PiBlLm56U2VsZWN0ZWQgJiYgZS5uelN1Yk1lbnVDb21wb25lbnQgPT09IHRoaXMpO1xuICB9XG5cbiAgZ2V0IHN1Ym1lbnVTZWxlY3RlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISF0aGlzLnN1Yk1lbnVzLnRvQXJyYXkoKS5maW5kKGUgPT4gZSAhPT0gdGhpcyAmJiBlLnN1Ykl0ZW1TZWxlY3RlZCk7XG4gIH1cblxuICBnZXQgZXhwYW5kU3RhdGUoKTogc3RyaW5nIHtcbiAgICBpZiAodGhpcy5uek9wZW4gJiYgdGhpcy5zdWJNZW51TW9kZSA9PT0gJ2lubGluZScpIHtcbiAgICAgIHJldHVybiAnZXhwYW5kJztcbiAgICB9IGVsc2UgaWYgKHRoaXMubnpPcGVuICYmIHRoaXMuc3ViTWVudU1vZGUgPT09ICdob3Jpem9udGFsJykge1xuICAgICAgcmV0dXJuICdib3R0b20nO1xuICAgIH0gZWxzZSBpZiAodGhpcy5uek9wZW4gJiYgdGhpcy5zdWJNZW51TW9kZSA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgcmV0dXJuICdmYWRlJztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICdoaWRkZW4nO1xuICAgIH1cbiAgfVxuXG4gIGdldCBvdmVybGF5UG9zaXRpb25zKCk6IENvbm5lY3Rpb25Qb3NpdGlvblBhaXJbXSB7XG4gICAgaWYgKHRoaXMuc3ViTWVudU1vZGUgPT09ICdob3Jpem9udGFsJykge1xuICAgICAgcmV0dXJuIFsgUE9TSVRJT05fTUFQLmJvdHRvbUxlZnQgXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFsgUE9TSVRJT05fTUFQLnJpZ2h0VG9wLCBQT1NJVElPTl9NQVAubGVmdFRvcCBdO1xuICAgIH1cbiAgfVxuXG4gIGNsaWNrU3ViTWVudVRpdGxlKCRldmVudDogTW91c2VFdmVudCk6IHZvaWQge1xuICAgIGlmICh0aGlzLm56RGlzYWJsZWQpIHtcbiAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoKHRoaXMuc3ViTWVudU1vZGUgPT09ICdpbmxpbmUnKSAmJiAoIXRoaXMuaXNJbkRyb3BEb3duKSkge1xuICAgICAgdGhpcy5uek9wZW4gPSAhdGhpcy5uek9wZW47XG4gICAgICB0aGlzLm56T3BlbkNoYW5nZS5lbWl0KHRoaXMubnpPcGVuKTtcbiAgICB9XG4gIH1cblxuICBjbGlja1N1Yk1lbnVEcm9wRG93bigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pc0luRHJvcERvd24gfHwgKHRoaXMuc3ViTWVudU1vZGUgPT09ICd2ZXJ0aWNhbCcpIHx8ICh0aGlzLnN1Yk1lbnVNb2RlID09PSAnaG9yaXpvbnRhbCcpKSB7XG4gICAgICB0aGlzLiRtb3VzZVN1YmplY3QubmV4dChmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IHN1Yk1lbnVNb2RlKCk6IHN0cmluZyB7XG4gICAgaWYgKHRoaXMubnpNZW51RGlyZWN0aXZlLm56TW9kZSA9PT0gJ2lubGluZScpIHtcbiAgICAgIHJldHVybiAnaW5saW5lJztcbiAgICB9IGVsc2UgaWYgKCh0aGlzLm56TWVudURpcmVjdGl2ZS5uek1vZGUgPT09ICd2ZXJ0aWNhbCcpIHx8ICh0aGlzLmlzSW5TdWJNZW51KSkge1xuICAgICAgcmV0dXJuICd2ZXJ0aWNhbCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnaG9yaXpvbnRhbCc7XG4gICAgfVxuICB9XG5cbiAgb25Nb3VzZUVudGVyRXZlbnQoZTogTW91c2VFdmVudCk6IHZvaWQge1xuICAgIGlmICgodGhpcy5zdWJNZW51TW9kZSA9PT0gJ2hvcml6b250YWwnKSB8fCAodGhpcy5zdWJNZW51TW9kZSA9PT0gJ3ZlcnRpY2FsJykgfHwgdGhpcy5pc0luRHJvcERvd24pIHtcbiAgICAgIHRoaXMuJG1vdXNlU3ViamVjdC5uZXh0KHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIG9uTW91c2VMZWF2ZUV2ZW50KGU6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAoKHRoaXMuc3ViTWVudU1vZGUgPT09ICdob3Jpem9udGFsJykgfHwgKHRoaXMuc3ViTWVudU1vZGUgPT09ICd2ZXJ0aWNhbCcpIHx8IHRoaXMuaXNJbkRyb3BEb3duKSB7XG4gICAgICB0aGlzLiRtb3VzZVN1YmplY3QubmV4dChmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hbnQtZHJvcGRvd24tbWVudS1zdWJtZW51JylcbiAgZ2V0IHNldERyb3BEb3duU3VibWVudUNsYXNzKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmlzSW5Ecm9wRG93bjtcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW50LW1lbnUtc3VibWVudS1vcGVuJylcbiAgZ2V0IHNldE1lbnVTdWJtZW51T3BlbkNsYXNzKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoIXRoaXMuaXNJbkRyb3BEb3duKSAmJiAodGhpcy5uek9wZW4pO1xuICB9XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hbnQtZHJvcGRvd24tbWVudS1zdWJtZW51LXZlcnRpY2FsJylcbiAgZ2V0IHNldERyb3BEb3duVmVydGljYWxDbGFzcygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5pc0luRHJvcERvd24gJiYgKHRoaXMuc3ViTWVudU1vZGUgPT09ICd2ZXJ0aWNhbCcpO1xuICB9XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hbnQtZHJvcGRvd24tbWVudS1zdWJtZW51LWhvcml6b250YWwnKVxuICBnZXQgc2V0RHJvcERvd25Ib3Jpem9udGFsQ2xhc3MoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaXNJbkRyb3BEb3duICYmICh0aGlzLnN1Yk1lbnVNb2RlID09PSAnaG9yaXpvbnRhbCcpO1xuICB9XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hbnQtZHJvcGRvd24tbWVudS1zdWJtZW51LWRpc2FibGVkJylcbiAgZ2V0IHNldERyb3BEb3duRGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaXNJbkRyb3BEb3duICYmIHRoaXMubnpEaXNhYmxlZDtcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW50LW1lbnUtc3VibWVudScpXG4gIGdldCBzZXRNZW51U3VibWVudUNsYXNzKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhdGhpcy5pc0luRHJvcERvd247XG4gIH1cblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmFudC1tZW51LXN1Ym1lbnUtc2VsZWN0ZWQnKVxuICBnZXQgc2V0TWVudVN1Ym1lbnVTZWxlY3RlZENsYXNzKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnN1Ym1lbnVTZWxlY3RlZCB8fCB0aGlzLnN1Ykl0ZW1TZWxlY3RlZDtcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW50LW1lbnUtc3VibWVudS12ZXJ0aWNhbCcpXG4gIGdldCBzZXRNZW51VmVydGljYWxDbGFzcygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKCF0aGlzLmlzSW5Ecm9wRG93bikgJiYgKHRoaXMuc3ViTWVudU1vZGUgPT09ICd2ZXJ0aWNhbCcpO1xuICB9XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hbnQtbWVudS1zdWJtZW51LWhvcml6b250YWwnKVxuICBnZXQgc2V0TWVudUhvcml6b250YWxDbGFzcygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKCF0aGlzLmlzSW5Ecm9wRG93bikgJiYgKHRoaXMuc3ViTWVudU1vZGUgPT09ICdob3Jpem9udGFsJyk7XG4gIH1cblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmFudC1tZW51LXN1Ym1lbnUtaW5saW5lJylcbiAgZ2V0IHNldE1lbnVJbmxpbmVDbGFzcygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKCF0aGlzLmlzSW5Ecm9wRG93bikgJiYgKHRoaXMuc3ViTWVudU1vZGUgPT09ICdpbmxpbmUnKTtcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW50LW1lbnUtc3VibWVudS1kaXNhYmxlZCcpXG4gIGdldCBzZXRNZW51RGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICghdGhpcy5pc0luRHJvcERvd24pICYmIHRoaXMubnpEaXNhYmxlZDtcbiAgfVxuXG4gIHNldFRyaWdnZXJXaWR0aCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5zdWJNZW51TW9kZSA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICB0aGlzLnRyaWdnZXJXaWR0aCA9IHRoaXMudHJpZ2dlci5uYXRpdmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xuICAgICAgLyoqIHNob3VsZCByZW1vdmUgYWZ0ZXIgYWZ0ZXIgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvbWF0ZXJpYWwyL3B1bGwvODc2NSBtZXJnZWQgKiovXG4gICAgICBpZiAodGhpcy5jZGtPdmVybGF5ICYmIHRoaXMuY2RrT3ZlcmxheS5vdmVybGF5UmVmKSB7XG4gICAgICAgIHRoaXMuY2RrT3ZlcmxheS5vdmVybGF5UmVmLnVwZGF0ZVNpemUoe1xuICAgICAgICAgIHdpZHRoOiB0aGlzLnRyaWdnZXJXaWR0aFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgfVxuXG4gIG9uUG9zaXRpb25DaGFuZ2UoJGV2ZW50OiBDb25uZWN0ZWRPdmVybGF5UG9zaXRpb25DaGFuZ2UpOiB2b2lkIHtcbiAgICBpZiAoJGV2ZW50LmNvbm5lY3Rpb25QYWlyKSB7XG4gICAgICBjb25zdCBvcmlnaW5NYXAgPSB7XG4gICAgICAgIG9yaWdpblggOiAkZXZlbnQuY29ubmVjdGlvblBhaXIub3JpZ2luWCxcbiAgICAgICAgb3JpZ2luWSA6ICRldmVudC5jb25uZWN0aW9uUGFpci5vcmlnaW5ZLFxuICAgICAgICBvdmVybGF5WDogJGV2ZW50LmNvbm5lY3Rpb25QYWlyLm92ZXJsYXlYLFxuICAgICAgICBvdmVybGF5WTogJGV2ZW50LmNvbm5lY3Rpb25QYWlyLm92ZXJsYXlZXG4gICAgICB9O1xuICAgICAgY29uc3Qga2V5TGlzdCA9IFsgJ29yaWdpblgnLCAnb3JpZ2luWScsICdvdmVybGF5WCcsICdvdmVybGF5WScgXTtcbiAgICAgIGlmIChrZXlMaXN0LmV2ZXJ5KGtleSA9PiBvcmlnaW5NYXBbIGtleSBdID09PSBQT1NJVElPTl9NQVAubGVmdFRvcFsga2V5IF0pKSB7XG4gICAgICAgIHRoaXMucGxhY2VtZW50ID0gJ2xlZnRUb3AnO1xuICAgICAgfSBlbHNlIGlmIChrZXlMaXN0LmV2ZXJ5KGtleSA9PiBvcmlnaW5NYXBbIGtleSBdID09PSBQT1NJVElPTl9NQVAucmlnaHRUb3BbIGtleSBdKSkge1xuICAgICAgICB0aGlzLnBsYWNlbWVudCA9ICdyaWdodFRvcCc7XG4gICAgICB9XG4gICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVPcGVuRXZlbnQgPSAoZGF0YTogYm9vbGVhbikgPT4ge1xuICAgIGlmICh0aGlzLm56RGlzYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMubnpPcGVuICE9PSBkYXRhKSB7XG4gICAgICB0aGlzLm56T3BlbiA9IGRhdGE7XG4gICAgICB0aGlzLm56T3BlbkNoYW5nZS5lbWl0KHRoaXMubnpPcGVuKTtcbiAgICB9XG4gICAgaWYgKHRoaXMubnpTdWJNZW51Q29tcG9uZW50KSB7XG4gICAgICB0aGlzLm56U3ViTWVudUNvbXBvbmVudC4kc3ViT3Blbi5uZXh0KHRoaXMubnpPcGVuKTtcbiAgICB9XG4gICAgaWYgKHRoaXMubnpEcm9wRG93bkNvbXBvbmVudCkge1xuICAgICAgdGhpcy5uekRyb3BEb3duQ29tcG9uZW50LiRzdWJPcGVuLm5leHQodGhpcy5uek9wZW4pO1xuICAgIH1cbiAgICBpZiAodGhpcy5uekRyb3BEb3duQnV0dG9uQ29tcG9uZW50KSB7XG4gICAgICB0aGlzLm56RHJvcERvd25CdXR0b25Db21wb25lbnQuJHN1Yk9wZW4ubmV4dCh0aGlzLm56T3Blbik7XG4gICAgfVxuICB9XG5cbiAgY29uc3RydWN0b3IocHVibGljIG56TWVudURpcmVjdGl2ZTogTnpNZW51RGlyZWN0aXZlLCBwcml2YXRlIGNkOiBDaGFuZ2VEZXRlY3RvclJlZiwgQFNraXBTZWxmKCkgQE9wdGlvbmFsKCkgcHJpdmF0ZSBuelN1Yk1lbnVDb21wb25lbnQ6IE56U3ViTWVudUNvbXBvbmVudCwgQEhvc3QoKSBAT3B0aW9uYWwoKSBwcml2YXRlIG56RHJvcERvd25Db21wb25lbnQ6IE56RHJvcERvd25Db21wb25lbnQsIEBIb3N0KCkgQE9wdGlvbmFsKCkgcHJpdmF0ZSBuekRyb3BEb3duQnV0dG9uQ29tcG9uZW50OiBOekRyb3BEb3duQnV0dG9uQ29tcG9uZW50KSB7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5uelN1Yk1lbnVDb21wb25lbnQpIHtcbiAgICAgIHRoaXMubGV2ZWwgPSB0aGlzLm56U3ViTWVudUNvbXBvbmVudC5sZXZlbCArIDE7XG4gICAgICB0aGlzLmlzSW5TdWJNZW51ID0gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcy5uek1lbnVEaXJlY3RpdmUuc3ViTWVudXMucHVzaCh0aGlzKTtcbiAgICBjb25zdCAkY29tYmluZUFsbCA9IGNvbWJpbmVMYXRlc3QodGhpcy4kc3ViT3BlbiwgdGhpcy4kbW91c2VTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpKS5waXBlKG1hcCh2YWx1ZSA9PiB2YWx1ZVsgMCBdIHx8IHZhbHVlWyAxIF0pLCBhdWRpdFRpbWUoMTUwKSk7XG4gICAgJGNvbWJpbmVBbGwucGlwZSh0YWtlVW50aWwodGhpcy51bnN1YnNjcmliZSQpKS5zdWJzY3JpYmUodGhpcy5oYW5kbGVPcGVuRXZlbnQpO1xuICAgIHRoaXMuaXNJbkRyb3BEb3duID0gdGhpcy5uek1lbnVEaXJlY3RpdmUubnpJbkRyb3BEb3duO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy51bnN1YnNjcmliZSQubmV4dCgpO1xuICAgIHRoaXMudW5zdWJzY3JpYmUkLmNvbXBsZXRlKCk7XG4gIH1cbn1cbiIsImltcG9ydCB7XG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIEhvc3RCaW5kaW5nLFxuICBIb3N0TGlzdGVuZXIsXG4gIElucHV0LFxuICBPbkluaXQsXG4gIE9wdGlvbmFsLFxuICBSZW5kZXJlcjJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IHRvQm9vbGVhbiB9IGZyb20gJy4uL2NvcmUvdXRpbC9jb252ZXJ0JztcblxuaW1wb3J0IHsgTnpNZW51RGlyZWN0aXZlIH0gZnJvbSAnLi9uei1tZW51LmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBOelN1Yk1lbnVDb21wb25lbnQgfSBmcm9tICcuL256LXN1Ym1lbnUuY29tcG9uZW50JztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW256LW1lbnUtaXRlbV0nXG59KVxuZXhwb3J0IGNsYXNzIE56TWVudUl0ZW1EaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuICBwcml2YXRlIF9kaXNhYmxlZCA9IGZhbHNlO1xuICBwcml2YXRlIF9zZWxlY3RlZCA9IGZhbHNlO1xuICBwcml2YXRlIF9pbml0aWFsaXplZCA9IGZhbHNlO1xuICBsZXZlbCA9IDA7XG4gIHBhZGRpbmcgPSBudWxsO1xuICBpc0luRHJvcERvd24gPSBmYWxzZTtcblxuICBASW5wdXQoKVxuICBzZXQgbnpEaXNhYmxlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2Rpc2FibGVkID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuekRpc2FibGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9kaXNhYmxlZDtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuelNlbGVjdGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fc2VsZWN0ZWQgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICAgIGlmICh0aGlzLl9pbml0aWFsaXplZCkge1xuICAgICAgdGhpcy5zZXRDbGFzcygpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBuelNlbGVjdGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9zZWxlY3RlZDtcbiAgfVxuXG4gIC8qKiBjbGVhciBhbGwgaXRlbSBzZWxlY3RlZCBzdGF0dXMgZXhjZXB0IHRoaXMgKi9cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbICckZXZlbnQnIF0pXG4gIG9uQ2xpY2tJdGVtKGU6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5uekRpc2FibGVkKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLm56TWVudURpcmVjdGl2ZS5jbGlja0l0ZW0odGhpcyk7XG4gICAgaWYgKHRoaXMubnpNZW51RGlyZWN0aXZlLm56U2VsZWN0YWJsZSkge1xuICAgICAgdGhpcy5uek1lbnVEaXJlY3RpdmUuY2xlYXJBbGxTZWxlY3RlZCgpO1xuICAgICAgdGhpcy5uelNlbGVjdGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMubnpTdWJNZW51Q29tcG9uZW50KSB7XG4gICAgICB0aGlzLm56U3ViTWVudUNvbXBvbmVudC5jbGlja1N1Yk1lbnVEcm9wRG93bigpO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBkZWZpbmUgaG9zdCBjbGFzcyAqL1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmFudC1kcm9wZG93bi1tZW51LWl0ZW0nKVxuICBnZXQgaXNJbkRyb3BEb3duQ2xhc3MoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaXNJbkRyb3BEb3duO1xuICB9XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hbnQtbWVudS1pdGVtJylcbiAgZ2V0IGlzTm90SW5Ecm9wRG93bkNsYXNzKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhdGhpcy5pc0luRHJvcERvd247XG4gIH1cblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmFudC1kcm9wZG93bi1tZW51LWl0ZW0tZGlzYWJsZWQnKVxuICBnZXQgc2V0RHJvcERvd25EaXNhYmxlQ2xhc3MoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaXNJbkRyb3BEb3duICYmIHRoaXMubnpEaXNhYmxlZDtcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW50LW1lbnUtaXRlbS1kaXNhYmxlZCcpXG4gIGdldCBzZXRNZW51RGlzYWJsZUNsYXNzKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoIXRoaXMuaXNJbkRyb3BEb3duKSAmJiB0aGlzLm56RGlzYWJsZWQ7XG4gIH1cblxuICBASG9zdEJpbmRpbmcoJ3N0eWxlLnBhZGRpbmctbGVmdC5weCcpXG4gIGdldCBzZXRQYWRkaW5nTGVmdCgpOiBudW1iZXIge1xuICAgIGlmICh0aGlzLm56TWVudURpcmVjdGl2ZS5uek1vZGUgPT09ICdpbmxpbmUnKSB7XG4gICAgICBpZiAodGhpcy5uelN1Yk1lbnVDb21wb25lbnQpIHtcbiAgICAgICAgLyoqIGlmIGluIHN1YiBtZW51IGNvbXBvbmVudCBhbmQgaG9zdCBtZW51J3MgbW9kZSBpcyBpbmxpbmUgYWRkIFBBRERJTkdfQkFTRSAqIGxldmVsIHBhZGRpbmcgKi9cbiAgICAgICAgcmV0dXJuICh0aGlzLm56U3ViTWVudUNvbXBvbmVudC5sZXZlbCArIDEpICogdGhpcy5uek1lbnVEaXJlY3RpdmUubnpJbmxpbmVJbmRlbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiogbm90IGluIHN1YiBtZW51IGNvbXBvbmVudCBidXQgcm9vdCBtZW51J3MgbW9kZSBpcyBpbmxpbmUgcmV0dXJuIGRlZmF1bHQgcGFkZGluZyAqL1xuICAgICAgICByZXR1cm4gdGhpcy5uek1lbnVEaXJlY3RpdmUubnpJbmxpbmVJbmRlbnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnBhZGRpbmc7XG4gICAgfVxuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLCBwdWJsaWMgY2Q6IENoYW5nZURldGVjdG9yUmVmLCBwcml2YXRlIG56TWVudURpcmVjdGl2ZTogTnpNZW51RGlyZWN0aXZlLCBAT3B0aW9uYWwoKSBwdWJsaWMgbnpTdWJNZW51Q29tcG9uZW50OiBOelN1Yk1lbnVDb21wb25lbnQsIHByaXZhdGUgaG9zdEVsZW1lbnQ6IEVsZW1lbnRSZWYpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMubnpNZW51RGlyZWN0aXZlLm1lbnVJdGVtcy5wdXNoKHRoaXMpO1xuICAgIC8qKiBzdG9yZSBvcmlnaW4gcGFkZGluZyBpbiBwYWRkaW5nICovXG4gICAgaWYgKHRoaXMuaG9zdEVsZW1lbnQubmF0aXZlRWxlbWVudC5zdHlsZVsgJ3BhZGRpbmctbGVmdCcgXSkge1xuICAgICAgdGhpcy5wYWRkaW5nID0gcGFyc2VJbnQodGhpcy5ob3N0RWxlbWVudC5uYXRpdmVFbGVtZW50LnN0eWxlWyAncGFkZGluZy1sZWZ0JyBdLCAxMCk7XG4gICAgfVxuICAgIHRoaXMuaXNJbkRyb3BEb3duID0gdGhpcy5uek1lbnVEaXJlY3RpdmUubnpJbkRyb3BEb3duO1xuICAgIHRoaXMuc2V0Q2xhc3MoKTtcbiAgICB0aGlzLl9pbml0aWFsaXplZCA9IHRydWU7XG4gIH1cblxuICBzZXRDbGFzcygpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fc2VsZWN0ZWQpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5ob3N0RWxlbWVudC5uYXRpdmVFbGVtZW50LCB0aGlzLmlzSW5Ecm9wRG93biA/ICdhbnQtZHJvcGRvd24tbWVudS1pdGVtLXNlbGVjdGVkJyA6ICdhbnQtbWVudS1pdGVtLXNlbGVjdGVkJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5ob3N0RWxlbWVudC5uYXRpdmVFbGVtZW50LCB0aGlzLmlzSW5Ecm9wRG93biA/ICdhbnQtZHJvcGRvd24tbWVudS1pdGVtLXNlbGVjdGVkJyA6ICdhbnQtbWVudS1pdGVtLXNlbGVjdGVkJyk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBPdmVybGF5TW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgTnpCdXR0b25Nb2R1bGUgfSBmcm9tICcuLi9idXR0b24vbnotYnV0dG9uLm1vZHVsZSc7XG5pbXBvcnQgeyBOekljb25Nb2R1bGUgfSBmcm9tICcuLi9pY29uL256LWljb24ubW9kdWxlJztcbmltcG9ydCB7IE56TWVudURpdmlkZXJEaXJlY3RpdmUgfSBmcm9tICcuLi9tZW51L256LW1lbnUtZGl2aWRlci5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgTnpNZW51R3JvdXBDb21wb25lbnQgfSBmcm9tICcuLi9tZW51L256LW1lbnUtZ3JvdXAuY29tcG9uZW50JztcbmltcG9ydCB7IE56TWVudUl0ZW1EaXJlY3RpdmUgfSBmcm9tICcuLi9tZW51L256LW1lbnUtaXRlbS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgTnpNZW51RGlyZWN0aXZlIH0gZnJvbSAnLi4vbWVudS9uei1tZW51LmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBOelN1Yk1lbnVDb21wb25lbnQgfSBmcm9tICcuLi9tZW51L256LXN1Ym1lbnUuY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0cyAgICAgOiBbIENvbW1vbk1vZHVsZSwgRm9ybXNNb2R1bGUsIE56QnV0dG9uTW9kdWxlLCBPdmVybGF5TW9kdWxlLCBOekljb25Nb2R1bGUgXSxcbiAgZGVjbGFyYXRpb25zOiBbIE56TWVudURpcmVjdGl2ZSwgTnpNZW51SXRlbURpcmVjdGl2ZSwgTnpTdWJNZW51Q29tcG9uZW50LCBOek1lbnVEaXZpZGVyRGlyZWN0aXZlLCBOek1lbnVHcm91cENvbXBvbmVudCBdLFxuICBleHBvcnRzICAgICA6IFsgTnpNZW51RGlyZWN0aXZlLCBOek1lbnVJdGVtRGlyZWN0aXZlLCBOelN1Yk1lbnVDb21wb25lbnQsIE56TWVudURpdmlkZXJEaXJlY3RpdmUsIE56TWVudUdyb3VwQ29tcG9uZW50IF1cbn0pXG5leHBvcnQgY2xhc3MgTnpNZW51TW9kdWxlIHtcbn1cbiIsImltcG9ydCB7IEFmdGVyVmlld0luaXQsIENvbXBvbmVudCwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgZHJvcERvd25BbmltYXRpb24gfSBmcm9tICcuLi9jb3JlL2FuaW1hdGlvbi9kcm9wZG93bi1hbmltYXRpb25zJztcblxuaW1wb3J0IHsgTnpEcm9wZG93blNlcnZpY2UgfSBmcm9tICcuL256LWRyb3Bkb3duLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICA6ICduei1kcm9wZG93bi1jb250ZXh0JyxcbiAgYW5pbWF0aW9ucyA6IFtcbiAgICBkcm9wRG93bkFuaW1hdGlvblxuICBdLFxuICB0ZW1wbGF0ZVVybDogJy4vbnotZHJvcGRvd24tY29udGV4dC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlcyAgICAgOiBbXG4gICAgYFxuICAgICAgLmFudC1kcm9wZG93biB7XG4gICAgICAgIHRvcDogMTAwJTtcbiAgICAgICAgbGVmdDogMDtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgbWFyZ2luLXRvcDogNHB4O1xuICAgICAgICBtYXJnaW4tYm90dG9tOiA0cHg7XG4gICAgICB9XG4gICAgYFxuICBdXG59KVxuZXhwb3J0IGNsYXNzIE56RHJvcGRvd25Db250ZXh0Q29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG4gIGRyb3BEb3duUG9zaXRpb246ICd0b3AnIHwgJ2JvdHRvbScgPSAnYm90dG9tJztcbiAgY29udHJvbDogTnpEcm9wZG93blNlcnZpY2U7XG4gIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjx2b2lkPjtcbiAgb3BlbiA9IHRydWU7XG5cbiAgc2V0VGVtcGxhdGVSZWYodmFsdWU6IFRlbXBsYXRlUmVmPHZvaWQ+KTogdm9pZCB7XG4gICAgdGhpcy50ZW1wbGF0ZSA9IHZhbHVlO1xuICB9XG5cbiAgc2V0Q29udHJvbCh2YWx1ZTogTnpEcm9wZG93blNlcnZpY2UpOiB2b2lkIHtcbiAgICB0aGlzLmNvbnRyb2wgPSB2YWx1ZTtcbiAgfVxuXG4gIHNldERyb3BEb3duUG9zaXRpb24odmFsdWU6ICd0b3AnIHwgJ2JvdHRvbScpOiB2b2lkIHtcbiAgICB0aGlzLmRyb3BEb3duUG9zaXRpb24gPSB2YWx1ZTtcbiAgfVxuXG4gIGNsb3NlKCk6IHZvaWQge1xuICAgIHRoaXMub3BlbiA9IGZhbHNlO1xuICB9XG5cbiAgYWZ0ZXJBbmltYXRpb24oKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLm9wZW4pIHtcbiAgICAgIHRoaXMuY29udHJvbC5jbG9zZSgpO1xuICAgIH1cbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICAvLyBUT0RPIGF1dG8gc2V0IGRyb3Bkb3duIGNsYXNzIGFmdGVyIHRoZSBidWcgcmVzb2x2ZWRcbiAgICAvKiogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMTQ4NDIgKiovXG4gIH1cbn1cbiIsImltcG9ydCB7IE92ZXJsYXlNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jZGsvb3ZlcmxheSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBOekJ1dHRvbk1vZHVsZSB9IGZyb20gJy4uL2J1dHRvbi9uei1idXR0b24ubW9kdWxlJztcbmltcG9ydCB7IE56SWNvbk1vZHVsZSB9IGZyb20gJy4uL2ljb24vbnotaWNvbi5tb2R1bGUnO1xuaW1wb3J0IHsgTnpNZW51TW9kdWxlIH0gZnJvbSAnLi4vbWVudS9uei1tZW51Lm1vZHVsZSc7XG5cbmltcG9ydCB7IE56RHJvcERvd25CdXR0b25Db21wb25lbnQgfSBmcm9tICcuL256LWRyb3Bkb3duLWJ1dHRvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpEcm9wZG93bkNvbnRleHRDb21wb25lbnQgfSBmcm9tICcuL256LWRyb3Bkb3duLWNvbnRleHQuY29tcG9uZW50JztcbmltcG9ydCB7IE56RHJvcERvd25Db21wb25lbnQgfSBmcm9tICcuL256LWRyb3Bkb3duLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOekRyb3BEb3duRGlyZWN0aXZlIH0gZnJvbSAnLi9uei1kcm9wZG93bi5kaXJlY3RpdmUnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzICAgICAgICA6IFsgQ29tbW9uTW9kdWxlLCBPdmVybGF5TW9kdWxlLCBGb3Jtc01vZHVsZSwgTnpCdXR0b25Nb2R1bGUsIE56TWVudU1vZHVsZSwgTnpJY29uTW9kdWxlIF0sXG4gIGRlY2xhcmF0aW9ucyAgIDogWyBOekRyb3BEb3duQ29tcG9uZW50LCBOekRyb3BEb3duQnV0dG9uQ29tcG9uZW50LCBOekRyb3BEb3duRGlyZWN0aXZlLCBOekRyb3Bkb3duQ29udGV4dENvbXBvbmVudCBdLFxuICBlbnRyeUNvbXBvbmVudHM6IFsgTnpEcm9wZG93bkNvbnRleHRDb21wb25lbnQgXSxcbiAgZXhwb3J0cyAgICAgICAgOiBbIE56RHJvcERvd25Db21wb25lbnQsIE56RHJvcERvd25CdXR0b25Db21wb25lbnQsIE56RHJvcERvd25EaXJlY3RpdmUgXVxufSlcbmV4cG9ydCBjbGFzcyBOekRyb3BEb3duTW9kdWxlIHtcbn1cbiIsImZ1bmN0aW9uIG1hdGNoTWVkaWFGdW5jKCk6IChtZWRpYVF1ZXJ5OiBzdHJpbmcpID0+IE1lZGlhUXVlcnlMaXN0IHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuICgpID0+IG51bGw7XG4gIH1cbiAgaWYgKHdpbmRvdy5tYXRjaE1lZGlhKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5tYXRjaE1lZGlhLmJpbmQod2luZG93KTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBtYXRjaE1lZGlhUG9seWZpbGwgPSAobWVkaWFRdWVyeTogc3RyaW5nKTogTWVkaWFRdWVyeUxpc3QgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWVkaWEgIDogbWVkaWFRdWVyeSxcbiAgICAgICAgbWF0Y2hlczogZmFsc2UsXG4gICAgICAgIGFkZExpc3RlbmVyKCk6IHZvaWQge1xuICAgICAgICB9LFxuICAgICAgICByZW1vdmVMaXN0ZW5lcigpOiB2b2lkIHtcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gbWF0Y2hNZWRpYVBvbHlmaWxsO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBtYXRjaE1lZGlhID0gbWF0Y2hNZWRpYUZ1bmMoKTtcbiIsImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgSG9zdExpc3RlbmVyLFxuICBJbnB1dCxcbiAgT25Jbml0LFxuICBSZW5kZXJlcjJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IG1hdGNoTWVkaWEgfSBmcm9tICcuLi9jb3JlL3BvbHlmaWxsL21hdGNoLW1lZGlhJztcbmltcG9ydCB7IE56VXBkYXRlSG9zdENsYXNzU2VydmljZSB9IGZyb20gJy4uL2NvcmUvc2VydmljZXMvdXBkYXRlLWhvc3QtY2xhc3Muc2VydmljZSc7XG5cbmV4cG9ydCB0eXBlIE56SnVzdGlmeSA9ICdzdGFydCcgfCAnZW5kJyB8ICdjZW50ZXInIHwgJ3NwYWNlLWFyb3VuZCcgfCAnc3BhY2UtYmV0d2Vlbic7XG5leHBvcnQgdHlwZSBOekFsaWduID0gJ3RvcCcgfCAnbWlkZGxlJyB8ICdib3R0b20nO1xuZXhwb3J0IHR5cGUgTnpUeXBlID0gJ2ZsZXgnIHwgbnVsbDtcbmV4cG9ydCB0eXBlIEJyZWFrcG9pbnQgPSAneHhsJyB8ICd4bCcgfCAnbGcnIHwgJ21kJyB8ICdzbScgfCAneHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEJyZWFrcG9pbnRNYXAge1xuICB4cz86IHN0cmluZztcbiAgc20/OiBzdHJpbmc7XG4gIG1kPzogc3RyaW5nO1xuICBsZz86IHN0cmluZztcbiAgeGw/OiBzdHJpbmc7XG4gIHh4bD86IHN0cmluZztcbn1cblxuY29uc3QgcmVzcG9uc2l2ZU1hcDogQnJlYWtwb2ludE1hcCA9IHtcbiAgeHMgOiAnKG1heC13aWR0aDogNTc1cHgpJyxcbiAgc20gOiAnKG1pbi13aWR0aDogNTc2cHgpJyxcbiAgbWQgOiAnKG1pbi13aWR0aDogNzY4cHgpJyxcbiAgbGcgOiAnKG1pbi13aWR0aDogOTkycHgpJyxcbiAgeGwgOiAnKG1pbi13aWR0aDogMTIwMHB4KScsXG4gIHh4bDogJyhtaW4td2lkdGg6IDE2MDBweCknXG59O1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICAgICAgICAgIDogJ256LXJvdycsXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxuICBwcm92aWRlcnMgICAgICAgICAgOiBbIE56VXBkYXRlSG9zdENsYXNzU2VydmljZSBdLFxuICB0ZW1wbGF0ZVVybCAgICAgICAgOiAnLi9uei1yb3cuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIE56Um93Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBwcml2YXRlIF9ndXR0ZXI6IG51bWJlciB8IG9iamVjdDtcbiAgcHJpdmF0ZSBfdHlwZTogTnpUeXBlO1xuICBwcml2YXRlIF9hbGlnbjogTnpBbGlnbiA9ICd0b3AnO1xuICBwcml2YXRlIF9qdXN0aWZ5OiBOekp1c3RpZnkgPSAnc3RhcnQnO1xuICBwcml2YXRlIGVsOiBIVE1MRWxlbWVudCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICBwcml2YXRlIHByZWZpeENscyA9ICdhbnQtcm93JztcbiAgcHJpdmF0ZSBicmVha1BvaW50OiBCcmVha3BvaW50O1xuICBhY3R1YWxHdXR0ZXI6IG51bWJlcjtcblxuICBASW5wdXQoKVxuICBzZXQgbnpUeXBlKHZhbHVlOiBOelR5cGUpIHtcbiAgICB0aGlzLl90eXBlID0gdmFsdWU7XG4gICAgdGhpcy5zZXRDbGFzc01hcCgpO1xuICB9XG5cbiAgZ2V0IG56VHlwZSgpOiBOelR5cGUge1xuICAgIHJldHVybiB0aGlzLl90eXBlO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56QWxpZ24odmFsdWU6IE56QWxpZ24pIHtcbiAgICB0aGlzLl9hbGlnbiA9IHZhbHVlO1xuICAgIHRoaXMuc2V0Q2xhc3NNYXAoKTtcbiAgfVxuXG4gIGdldCBuekFsaWduKCk6IE56QWxpZ24ge1xuICAgIHJldHVybiB0aGlzLl9hbGlnbjtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekp1c3RpZnkodmFsdWU6IE56SnVzdGlmeSkge1xuICAgIHRoaXMuX2p1c3RpZnkgPSB2YWx1ZTtcbiAgICB0aGlzLnNldENsYXNzTWFwKCk7XG4gIH1cblxuICBnZXQgbnpKdXN0aWZ5KCk6IE56SnVzdGlmeSB7XG4gICAgcmV0dXJuIHRoaXMuX2p1c3RpZnk7XG4gIH1cblxuICBASW5wdXQoKVxuICBnZXQgbnpHdXR0ZXIoKTogbnVtYmVyIHwgb2JqZWN0IHtcbiAgICByZXR1cm4gdGhpcy5fZ3V0dGVyO1xuICB9XG5cbiAgc2V0IG56R3V0dGVyKHZhbHVlOiBudW1iZXIgfCBvYmplY3QpIHtcbiAgICB0aGlzLl9ndXR0ZXIgPSB2YWx1ZTtcbiAgICB0aGlzLnVwZGF0ZUd1dHRlcigpO1xuICAgIHRoaXMuc2V0U3R5bGUoKTtcbiAgfVxuXG4gIHNldFN0eWxlKCk6IHZvaWQge1xuICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5lbCwgJ21hcmdpbi1sZWZ0JywgYC0ke3RoaXMuYWN0dWFsR3V0dGVyIC8gMn1weGApO1xuICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5lbCwgJ21hcmdpbi1yaWdodCcsIGAtJHt0aGlzLmFjdHVhbEd1dHRlciAvIDJ9cHhgKTtcbiAgfVxuXG4gIGNhbGN1bGF0ZUd1dHRlcigpOiBudW1iZXIge1xuICAgIGlmICh0eXBlb2YgdGhpcy5uekd1dHRlciAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiB0aGlzLm56R3V0dGVyO1xuICAgIH0gZWxzZSBpZiAodGhpcy5icmVha1BvaW50ICYmIHRoaXMubnpHdXR0ZXJbIHRoaXMuYnJlYWtQb2ludCBdKSB7XG4gICAgICByZXR1cm4gdGhpcy5uekd1dHRlclsgdGhpcy5icmVha1BvaW50IF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICB1cGRhdGVHdXR0ZXIoKTogdm9pZCB7XG4gICAgdGhpcy5hY3R1YWxHdXR0ZXIgPSB0aGlzLmNhbGN1bGF0ZUd1dHRlcigpO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignd2luZG93OnJlc2l6ZScsIFsgJyRldmVudCcgXSlcbiAgb25XaW5kb3dSZXNpemUoZTogVUlFdmVudCk6IHZvaWQge1xuICAgIHRoaXMud2F0Y2hNZWRpYSgpO1xuICB9XG5cbiAgd2F0Y2hNZWRpYSgpOiB2b2lkIHtcbiAgICBPYmplY3Qua2V5cyhyZXNwb25zaXZlTWFwKS5tYXAoKHNjcmVlbjogQnJlYWtwb2ludCkgPT4ge1xuICAgICAgY29uc3QgbWF0Y2hCZWxvdyA9IG1hdGNoTWVkaWEocmVzcG9uc2l2ZU1hcFsgc2NyZWVuIF0pLm1hdGNoZXM7XG4gICAgICBpZiAobWF0Y2hCZWxvdykge1xuICAgICAgICB0aGlzLmJyZWFrUG9pbnQgPSBzY3JlZW47XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy51cGRhdGVHdXR0ZXIoKTtcbiAgICB0aGlzLnNldFN0eWxlKCk7XG4gIH1cblxuICAvKiogdGVtcCBzb2x1dGlvbiBzaW5jZSBubyBtZXRob2QgYWRkIGNsYXNzTWFwIHRvIGhvc3QgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvNzI4OSovXG4gIHNldENsYXNzTWFwKCk6IHZvaWQge1xuICAgIGNvbnN0IGNsYXNzTWFwID0ge1xuICAgICAgWyBgJHt0aGlzLnByZWZpeENsc31gIF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICF0aGlzLm56VHlwZSxcbiAgICAgIFsgYCR7dGhpcy5wcmVmaXhDbHN9LSR7dGhpcy5uelR5cGV9YCBdICAgICAgICAgICAgICAgICAgOiB0aGlzLm56VHlwZSxcbiAgICAgIFsgYCR7dGhpcy5wcmVmaXhDbHN9LSR7dGhpcy5uelR5cGV9LSR7dGhpcy5uekFsaWdufWAgXSAgOiB0aGlzLm56VHlwZSAmJiB0aGlzLm56QWxpZ24sXG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xzfS0ke3RoaXMubnpUeXBlfS0ke3RoaXMubnpKdXN0aWZ5fWAgXTogdGhpcy5uelR5cGUgJiYgdGhpcy5uekp1c3RpZnlcbiAgICB9O1xuICAgIHRoaXMubnpVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlLnVwZGF0ZUhvc3RDbGFzcyh0aGlzLmVsLCBjbGFzc01hcCk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHVibGljIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHB1YmxpYyBuelVwZGF0ZUhvc3RDbGFzc1NlcnZpY2U6IE56VXBkYXRlSG9zdENsYXNzU2VydmljZSkge1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5zZXRDbGFzc01hcCgpO1xuICAgIHRoaXMud2F0Y2hNZWRpYSgpO1xuICB9XG59XG4iLCJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIFJlbmRlcmVyMlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgTnpVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlIH0gZnJvbSAnLi4vY29yZS9zZXJ2aWNlcy91cGRhdGUtaG9zdC1jbGFzcy5zZXJ2aWNlJztcblxuaW1wb3J0IHsgTnpSb3dDb21wb25lbnQgfSBmcm9tICcuL256LXJvdy5jb21wb25lbnQnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3IgOiAnW256LXJvd10nLFxuICBwcm92aWRlcnM6IFsgTnpVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlIF1cbn0pXG5leHBvcnQgY2xhc3MgTnpSb3dEaXJlY3RpdmUgZXh0ZW5kcyBOelJvd0NvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIG56VXBkYXRlSG9zdENsYXNzU2VydmljZTogTnpVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlKSB7XG4gICAgc3VwZXIoZWxlbWVudFJlZiwgcmVuZGVyZXIsIG56VXBkYXRlSG9zdENsYXNzU2VydmljZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgSG9zdCxcbiAgSG9zdEJpbmRpbmcsXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIE9uSW5pdCxcbiAgT3B0aW9uYWwsXG4gIFJlbmRlcmVyMixcbiAgU2ltcGxlQ2hhbmdlXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBOelVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UgfSBmcm9tICcuLi9jb3JlL3NlcnZpY2VzL3VwZGF0ZS1ob3N0LWNsYXNzLnNlcnZpY2UnO1xuaW1wb3J0IHsgaXNOb3ROaWwgfSBmcm9tICcuLi9jb3JlL3V0aWwvY2hlY2snO1xuXG5pbXBvcnQgeyBOelJvd0NvbXBvbmVudCB9IGZyb20gJy4vbnotcm93LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOelJvd0RpcmVjdGl2ZSB9IGZyb20gJy4vbnotcm93LmRpcmVjdGl2ZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRW1iZWRkZWRQcm9wZXJ0eSB7XG4gIHNwYW46IG51bWJlcjtcbiAgcHVsbDogbnVtYmVyO1xuICBwdXNoOiBudW1iZXI7XG4gIG9mZnNldDogbnVtYmVyO1xuICBvcmRlcjogbnVtYmVyO1xufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICAgICAgICAgIDogJ256LWNvbCcsXG4gIHByb3ZpZGVycyAgICAgICAgICA6IFsgTnpVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlIF0sXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxuICB0ZW1wbGF0ZVVybCAgICAgICAgOiAnLi9uei1jb2wuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIE56Q29sQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xuICBwcml2YXRlIGVsOiBIVE1MRWxlbWVudCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICBwcml2YXRlIHByZWZpeENscyA9ICdhbnQtY29sJztcblxuICBASG9zdEJpbmRpbmcoJ3N0eWxlLnBhZGRpbmctbGVmdC5weCcpXG4gIGdldCBwYWRkaW5nTGVmdCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLm56Um93ICYmIHRoaXMubnpSb3cuYWN0dWFsR3V0dGVyIC8gMjtcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnc3R5bGUucGFkZGluZy1yaWdodC5weCcpXG4gIGdldCBwYWRkaW5nUmlnaHQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5uelJvdyAmJiB0aGlzLm56Um93LmFjdHVhbEd1dHRlciAvIDI7XG4gIH1cblxuICBASW5wdXQoKSBuelNwYW46IG51bWJlcjtcbiAgQElucHV0KCkgbnpPcmRlcjogbnVtYmVyO1xuICBASW5wdXQoKSBuek9mZnNldDogbnVtYmVyO1xuICBASW5wdXQoKSBuelB1c2g6IG51bWJlcjtcbiAgQElucHV0KCkgbnpQdWxsOiBudW1iZXI7XG4gIEBJbnB1dCgpIG56WHM6IG51bWJlciB8IEVtYmVkZGVkUHJvcGVydHk7XG4gIEBJbnB1dCgpIG56U206IG51bWJlciB8IEVtYmVkZGVkUHJvcGVydHk7XG4gIEBJbnB1dCgpIG56TWQ6IG51bWJlciB8IEVtYmVkZGVkUHJvcGVydHk7XG4gIEBJbnB1dCgpIG56TGc6IG51bWJlciB8IEVtYmVkZGVkUHJvcGVydHk7XG4gIEBJbnB1dCgpIG56WGw6IG51bWJlciB8IEVtYmVkZGVkUHJvcGVydHk7XG4gIEBJbnB1dCgpIG56WFhsOiBudW1iZXIgfCBFbWJlZGRlZFByb3BlcnR5O1xuXG4gIC8qKiB0ZW1wIHNvbHV0aW9uIHNpbmNlIG5vIG1ldGhvZCBhZGQgY2xhc3NNYXAgdG8gaG9zdCBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy83Mjg5Ki9cbiAgc2V0Q2xhc3NNYXAoKTogdm9pZCB7XG4gICAgY29uc3QgY2xhc3NNYXAgPSB7XG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xzfS0ke3RoaXMubnpTcGFufWAgXSAgICAgICAgIDogaXNOb3ROaWwodGhpcy5uelNwYW4pLFxuICAgICAgWyBgJHt0aGlzLnByZWZpeENsc30tb3JkZXItJHt0aGlzLm56T3JkZXJ9YCBdICA6IGlzTm90TmlsKHRoaXMubnpPcmRlciksXG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xzfS1vZmZzZXQtJHt0aGlzLm56T2Zmc2V0fWAgXTogaXNOb3ROaWwodGhpcy5uek9mZnNldCksXG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xzfS1wdWxsLSR7dGhpcy5uelB1bGx9YCBdICAgIDogaXNOb3ROaWwodGhpcy5uelB1bGwpLFxuICAgICAgWyBgJHt0aGlzLnByZWZpeENsc30tcHVzaC0ke3RoaXMubnpQdXNofWAgXSAgICA6IGlzTm90TmlsKHRoaXMubnpQdXNoKSxcbiAgICAgIC4uLnRoaXMuZ2VuZXJhdGVDbGFzcygpXG4gICAgfTtcbiAgICB0aGlzLm56VXBkYXRlSG9zdENsYXNzU2VydmljZS51cGRhdGVIb3N0Q2xhc3ModGhpcy5lbCwgY2xhc3NNYXApO1xuICB9XG5cbiAgZ2VuZXJhdGVDbGFzcygpOiBvYmplY3Qge1xuICAgIGNvbnN0IGxpc3RPZlNpemVJbnB1dE5hbWUgPSBbICduelhzJywgJ256U20nLCAnbnpNZCcsICduekxnJywgJ256WGwnLCAnbnpYWGwnIF07XG4gICAgY29uc3QgbGlzdENsYXNzTWFwID0ge307XG4gICAgbGlzdE9mU2l6ZUlucHV0TmFtZS5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgY29uc3Qgc2l6ZU5hbWUgPSBuYW1lLnJlcGxhY2UoJ256JywgJycpLnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAoaXNOb3ROaWwodGhpc1sgbmFtZSBdKSkge1xuICAgICAgICBpZiAoKHR5cGVvZih0aGlzWyBuYW1lIF0pID09PSAnbnVtYmVyJykgfHwgKHR5cGVvZiAodGhpc1sgbmFtZSBdKSA9PT0gJ3N0cmluZycpKSB7XG4gICAgICAgICAgbGlzdENsYXNzTWFwWyBgJHt0aGlzLnByZWZpeENsc30tJHtzaXplTmFtZX0tJHt0aGlzWyBuYW1lIF19YCBdID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsaXN0Q2xhc3NNYXBbIGAke3RoaXMucHJlZml4Q2xzfS0ke3NpemVOYW1lfS0ke3RoaXNbIG5hbWUgXS5zcGFufWAgXSA9IHRoaXNbIG5hbWUgXSAmJiBpc05vdE5pbCh0aGlzWyBuYW1lIF0uc3Bhbik7XG4gICAgICAgICAgbGlzdENsYXNzTWFwWyBgJHt0aGlzLnByZWZpeENsc30tJHtzaXplTmFtZX0tcHVsbC0ke3RoaXNbIG5hbWUgXS5wdWxsfWAgXSA9IHRoaXNbIG5hbWUgXSAmJiBpc05vdE5pbCh0aGlzWyBuYW1lIF0ucHVsbCk7XG4gICAgICAgICAgbGlzdENsYXNzTWFwWyBgJHt0aGlzLnByZWZpeENsc30tJHtzaXplTmFtZX0tcHVzaC0ke3RoaXNbIG5hbWUgXS5wdXNofWAgXSA9IHRoaXNbIG5hbWUgXSAmJiBpc05vdE5pbCh0aGlzWyBuYW1lIF0ucHVzaCk7XG4gICAgICAgICAgbGlzdENsYXNzTWFwWyBgJHt0aGlzLnByZWZpeENsc30tJHtzaXplTmFtZX0tb2Zmc2V0LSR7dGhpc1sgbmFtZSBdLm9mZnNldH1gIF0gPSB0aGlzWyBuYW1lIF0gJiYgaXNOb3ROaWwodGhpc1sgbmFtZSBdLm9mZnNldCk7XG4gICAgICAgICAgbGlzdENsYXNzTWFwWyBgJHt0aGlzLnByZWZpeENsc30tJHtzaXplTmFtZX0tb3JkZXItJHt0aGlzWyBuYW1lIF0ub3JkZXJ9YCBdID0gdGhpc1sgbmFtZSBdICYmIGlzTm90TmlsKHRoaXNbIG5hbWUgXS5vcmRlcik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgIH0pO1xuICAgIHJldHVybiBsaXN0Q2xhc3NNYXA7XG4gIH1cblxuICBnZXQgbnpSb3coKTogTnpSb3dDb21wb25lbnQge1xuICAgIHJldHVybiB0aGlzLm56Um93Q29tcG9uZW50IHx8IHRoaXMubnpSb3dEaXJlY3RpdmU7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiB7IFsgcHJvcGVydHlOYW1lOiBzdHJpbmcgXTogU2ltcGxlQ2hhbmdlIH0pOiB2b2lkIHtcbiAgICB0aGlzLnNldENsYXNzTWFwKCk7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG56VXBkYXRlSG9zdENsYXNzU2VydmljZTogTnpVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlLCBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIEBPcHRpb25hbCgpIEBIb3N0KCkgcHVibGljIG56Um93Q29tcG9uZW50OiBOelJvd0NvbXBvbmVudCwgQE9wdGlvbmFsKCkgQEhvc3QoKSBwdWJsaWMgbnpSb3dEaXJlY3RpdmU6IE56Um93RGlyZWN0aXZlLCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuc2V0Q2xhc3NNYXAoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBIb3N0LFxuICBPcHRpb25hbCxcbiAgUmVuZGVyZXIyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBOelVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UgfSBmcm9tICcuLi9jb3JlL3NlcnZpY2VzL3VwZGF0ZS1ob3N0LWNsYXNzLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBOekNvbENvbXBvbmVudCB9IGZyb20gJy4vbnotY29sLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOelJvd0NvbXBvbmVudCB9IGZyb20gJy4vbnotcm93LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOelJvd0RpcmVjdGl2ZSB9IGZyb20gJy4vbnotcm93LmRpcmVjdGl2ZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvciA6ICdbbnotY29sXScsXG4gIHByb3ZpZGVyczogWyBOelVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UgXVxufSlcbmV4cG9ydCBjbGFzcyBOekNvbERpcmVjdGl2ZSBleHRlbmRzIE56Q29sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IobnpVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlOiBOelVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UsIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIEBPcHRpb25hbCgpIEBIb3N0KCkgbnpSb3dDb21wb25lbnQ6IE56Um93Q29tcG9uZW50LCBAT3B0aW9uYWwoKSBASG9zdCgpIG56Um93RGlyZWN0aXZlOiBOelJvd0RpcmVjdGl2ZSwgcmVuZGVyZXI6IFJlbmRlcmVyMikge1xuICAgIHN1cGVyKG56VXBkYXRlSG9zdENsYXNzU2VydmljZSwgZWxlbWVudFJlZiwgbnpSb3dDb21wb25lbnQsIG56Um93RGlyZWN0aXZlLCByZW5kZXJlcik7XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBOekNvbENvbXBvbmVudCB9IGZyb20gJy4vbnotY29sLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOekNvbERpcmVjdGl2ZSB9IGZyb20gJy4vbnotY29sLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBOelJvd0NvbXBvbmVudCB9IGZyb20gJy4vbnotcm93LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOelJvd0RpcmVjdGl2ZSB9IGZyb20gJy4vbnotcm93LmRpcmVjdGl2ZSc7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogWyBOelJvd0NvbXBvbmVudCwgTnpDb2xEaXJlY3RpdmUsIE56Q29sQ29tcG9uZW50LCBOelJvd0RpcmVjdGl2ZSBdLFxuICBleHBvcnRzICAgICA6IFsgTnpSb3dDb21wb25lbnQsIE56Q29sRGlyZWN0aXZlLCBOekNvbENvbXBvbmVudCwgTnpSb3dEaXJlY3RpdmUgXSxcbiAgaW1wb3J0cyAgICAgOiBbIENvbW1vbk1vZHVsZSBdXG59KVxuZXhwb3J0IGNsYXNzIE56R3JpZE1vZHVsZSB7XG59XG4iLCJpbXBvcnQge1xuICBBZnRlckNvbnRlbnRJbml0LFxuICBDb21wb25lbnQsXG4gIENvbnRlbnRDaGlsZCxcbiAgRWxlbWVudFJlZixcbiAgSG9zdCxcbiAgSW5wdXQsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBPcHRpb25hbCxcbiAgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtQ29udHJvbCwgTmdDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOelVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UgfSBmcm9tICcuLi9jb3JlL3NlcnZpY2VzL3VwZGF0ZS1ob3N0LWNsYXNzLnNlcnZpY2UnO1xuaW1wb3J0IHsgdG9Cb29sZWFuIH0gZnJvbSAnLi4vY29yZS91dGlsL2NvbnZlcnQnO1xuaW1wb3J0IHsgTnpDb2xDb21wb25lbnQgfSBmcm9tICcuLi9ncmlkL256LWNvbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpSb3dDb21wb25lbnQgfSBmcm9tICcuLi9ncmlkL256LXJvdy5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpSb3dEaXJlY3RpdmUgfSBmcm9tICcuLi9ncmlkL256LXJvdy5kaXJlY3RpdmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICAgICAgICAgIDogJ256LWZvcm0tY29udHJvbCcsXG4gIHByb3ZpZGVycyAgICAgICAgICA6IFsgTnpVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlIF0sXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxuICB0ZW1wbGF0ZVVybCAgICAgICAgOiAnLi9uei1mb3JtLWNvbnRyb2wuY29tcG9uZW50Lmh0bWwnLFxuICBob3N0ICAgICAgICAgICAgICAgOiB7XG4gICAgJ1tjbGFzcy5hbnQtZm9ybS1pdGVtLWNvbnRyb2wtd3JhcHBlcl0nOiAndHJ1ZSdcbiAgfSxcbiAgc3R5bGVzICAgICAgICAgICAgIDogWyBgOmhvc3Qge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICB9YCBdXG59KVxuZXhwb3J0IGNsYXNzIE56Rm9ybUNvbnRyb2xDb21wb25lbnQgZXh0ZW5kcyBOekNvbENvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSwgT25Jbml0LCBBZnRlckNvbnRlbnRJbml0IHtcbiAgcHJpdmF0ZSBfaGFzRmVlZGJhY2sgPSBmYWxzZTtcbiAgdmFsaWRhdGVDaGFuZ2VzOiBTdWJzY3JpcHRpb247XG4gIHZhbGlkYXRlU3RyaW5nOiBzdHJpbmc7XG4gIGNvbnRyb2xTdGF0dXM6IHN0cmluZztcbiAgY29udHJvbENsYXNzTWFwO1xuICBpY29uVHlwZTogc3RyaW5nO1xuICBAQ29udGVudENoaWxkKE5nQ29udHJvbCkgdmFsaWRhdGVDb250cm9sOiBGb3JtQ29udHJvbDtcblxuICBASW5wdXQoKVxuICBzZXQgbnpIYXNGZWVkYmFjayh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2hhc0ZlZWRiYWNrID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgICB0aGlzLnNldENvbnRyb2xDbGFzc01hcCgpO1xuICB9XG5cbiAgZ2V0IG56SGFzRmVlZGJhY2soKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2hhc0ZlZWRiYWNrO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56VmFsaWRhdGVTdGF0dXModmFsdWU6IHN0cmluZyB8IEZvcm1Db250cm9sKSB7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRm9ybUNvbnRyb2wpIHtcbiAgICAgIHRoaXMudmFsaWRhdGVDb250cm9sID0gdmFsdWU7XG4gICAgICB0aGlzLnZhbGlkYXRlU3RyaW5nID0gbnVsbDtcbiAgICAgIHRoaXMuY29udHJvbFN0YXR1cyA9IG51bGw7XG4gICAgICB0aGlzLnNldENvbnRyb2xDbGFzc01hcCgpO1xuICAgICAgdGhpcy53YXRjaENvbnRyb2woKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy52YWxpZGF0ZVN0cmluZyA9IHZhbHVlO1xuICAgICAgdGhpcy52YWxpZGF0ZUNvbnRyb2wgPSBudWxsO1xuICAgICAgdGhpcy5yZW1vdmVTdWJzY3JpYmUoKTtcbiAgICAgIHRoaXMuc2V0Q29udHJvbENsYXNzTWFwKCk7XG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlU3Vic2NyaWJlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnZhbGlkYXRlQ2hhbmdlcykge1xuICAgICAgdGhpcy52YWxpZGF0ZUNoYW5nZXMudW5zdWJzY3JpYmUoKTtcbiAgICAgIHRoaXMudmFsaWRhdGVDaGFuZ2VzID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICB1cGRhdGVWYWxpZGF0ZVN0YXR1cyhzdGF0dXM6IHN0cmluZyk6IHZvaWQge1xuICAgIGlmICh0aGlzLnZhbGlkYXRlQ29udHJvbC5kaXJ0eSB8fCB0aGlzLnZhbGlkYXRlQ29udHJvbC50b3VjaGVkKSB7XG4gICAgICB0aGlzLmNvbnRyb2xTdGF0dXMgPSBzdGF0dXM7XG4gICAgICB0aGlzLnNldENvbnRyb2xDbGFzc01hcCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvbnRyb2xTdGF0dXMgPSBudWxsO1xuICAgICAgdGhpcy5zZXRDb250cm9sQ2xhc3NNYXAoKTtcbiAgICB9XG4gIH1cblxuICB3YXRjaENvbnRyb2woKTogdm9pZCB7XG4gICAgdGhpcy5yZW1vdmVTdWJzY3JpYmUoKTtcbiAgICAvKiogbWlzcyBkZXRlY3QgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMTA4ODcgKiovXG4gICAgaWYgKHRoaXMudmFsaWRhdGVDb250cm9sICYmIHRoaXMudmFsaWRhdGVDb250cm9sLnN0YXR1c0NoYW5nZXMpIHtcbiAgICAgIHRoaXMudmFsaWRhdGVDaGFuZ2VzID0gdGhpcy52YWxpZGF0ZUNvbnRyb2wuc3RhdHVzQ2hhbmdlcy5zdWJzY3JpYmUoZGF0YSA9PiB0aGlzLnVwZGF0ZVZhbGlkYXRlU3RhdHVzKGRhdGEpKTtcbiAgICB9XG5cbiAgfVxuXG4gIHNldENvbnRyb2xDbGFzc01hcCgpOiB2b2lkIHtcbiAgICB0aGlzLmNvbnRyb2xDbGFzc01hcCA9IHtcbiAgICAgIFsgYGhhcy13YXJuaW5nYCBdICA6IHRoaXMudmFsaWRhdGVTdHJpbmcgPT09ICd3YXJuaW5nJyxcbiAgICAgIFsgYGlzLXZhbGlkYXRpbmdgIF06IHRoaXMudmFsaWRhdGVTdHJpbmcgPT09ICd2YWxpZGF0aW5nJyB8fCB0aGlzLnZhbGlkYXRlU3RyaW5nID09PSAncGVuZGluZycgfHwgdGhpcy5jb250cm9sU3RhdHVzID09PSAnUEVORElORycsXG4gICAgICBbIGBoYXMtZXJyb3JgIF0gICAgOiB0aGlzLnZhbGlkYXRlU3RyaW5nID09PSAnZXJyb3InIHx8IHRoaXMuY29udHJvbFN0YXR1cyA9PT0gJ0lOVkFMSUQnLFxuICAgICAgWyBgaGFzLXN1Y2Nlc3NgIF0gIDogdGhpcy52YWxpZGF0ZVN0cmluZyA9PT0gJ3N1Y2Nlc3MnIHx8IHRoaXMuY29udHJvbFN0YXR1cyA9PT0gJ1ZBTElEJyxcbiAgICAgIFsgYGhhcy1mZWVkYmFja2AgXSA6IHRoaXMubnpIYXNGZWVkYmFja1xuICAgIH07XG5cbiAgICBpZiAodGhpcy5jb250cm9sQ2xhc3NNYXBbICdoYXMtd2FybmluZycgXSkge1xuICAgICAgdGhpcy5pY29uVHlwZSA9ICdleGNsYW1hdGlvbi1jaXJjbGUtZmlsbCc7XG4gICAgfSBlbHNlIGlmICh0aGlzLmNvbnRyb2xDbGFzc01hcFsgJ2lzLXZhbGlkYXRpbmcnIF0pIHtcbiAgICAgIHRoaXMuaWNvblR5cGUgPSAnbG9hZGluZyc7XG4gICAgfSBlbHNlIGlmICh0aGlzLmNvbnRyb2xDbGFzc01hcFsnaGFzLWVycm9yJ10pIHtcbiAgICAgIHRoaXMuaWNvblR5cGUgPSAnY2xvc2UtY2lyY2xlLWZpbGwnO1xuICAgIH0gZWxzZSBpZiAodGhpcy5jb250cm9sQ2xhc3NNYXBbJ2hhcy1zdWNjZXNzJ10pIHtcbiAgICAgIHRoaXMuaWNvblR5cGUgPSAnY2hlY2stY2lyY2xlLWZpbGwnO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmljb25UeXBlID0gJyc7XG4gICAgfVxuICB9XG5cbiAgY29uc3RydWN0b3IobnpVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlOiBOelVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UsIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIEBPcHRpb25hbCgpIEBIb3N0KCkgbnpSb3dDb21wb25lbnQ6IE56Um93Q29tcG9uZW50LCBAT3B0aW9uYWwoKSBASG9zdCgpIG56Um93RGlyZWN0aXZlOiBOelJvd0RpcmVjdGl2ZSwgcmVuZGVyZXI6IFJlbmRlcmVyMikge1xuICAgIHN1cGVyKG56VXBkYXRlSG9zdENsYXNzU2VydmljZSwgZWxlbWVudFJlZiwgbnpSb3dDb21wb25lbnQsIG56Um93RGlyZWN0aXZlLCByZW5kZXJlcik7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnNldENsYXNzTWFwKCk7XG4gICAgdGhpcy5zZXRDb250cm9sQ2xhc3NNYXAoKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMucmVtb3ZlU3Vic2NyaWJlKCk7XG4gIH1cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZCB7XG4gICAgdGhpcy53YXRjaENvbnRyb2woKTtcbiAgICBpZiAodGhpcy52YWxpZGF0ZUNvbnRyb2wpIHtcbiAgICAgIHRoaXMudXBkYXRlVmFsaWRhdGVTdGF0dXModGhpcy52YWxpZGF0ZUNvbnRyb2wuc3RhdHVzKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTnpVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlIH0gZnJvbSAnLi4vY29yZS9zZXJ2aWNlcy91cGRhdGUtaG9zdC1jbGFzcy5zZXJ2aWNlJztcbmltcG9ydCB7IHRvQm9vbGVhbiB9IGZyb20gJy4uL2NvcmUvdXRpbC9jb252ZXJ0JztcbmltcG9ydCB7IE56Um93Q29tcG9uZW50IH0gZnJvbSAnLi4vZ3JpZC9uei1yb3cuY29tcG9uZW50JztcblxuLyoqIHNob3VsZCBhZGQgbnotcm93IGRpcmVjdGl2ZSB0byBob3N0LCB0cmFjayBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy84Nzg1ICoqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yICAgICAgICAgICA6ICduei1mb3JtLWl0ZW0nLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgcHJvdmlkZXJzICAgICAgICAgIDogWyBOelVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UgXSxcbiAgdGVtcGxhdGVVcmwgICAgICAgIDogJy4vbnotZm9ybS1pdGVtLmNvbXBvbmVudC5odG1sJyxcbiAgaG9zdCAgICAgICAgICAgICAgIDoge1xuICAgICdbY2xhc3MuYW50LWZvcm0taXRlbV0nICAgICAgICAgIDogJ3RydWUnLFxuICAgICdbY2xhc3MuYW50LWZvcm0taXRlbS13aXRoLWhlbHBdJzogJ3dpdGhIZWxwPjAnXG4gIH0sXG4gIHN0eWxlcyAgICAgICAgICAgICA6IFsgYDpob3N0IHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgfWAgXVxufSlcbmV4cG9ydCBjbGFzcyBOekZvcm1JdGVtQ29tcG9uZW50IGV4dGVuZHMgTnpSb3dDb21wb25lbnQge1xuICBwcml2YXRlIF9mbGV4ID0gZmFsc2U7XG4gIHdpdGhIZWxwID0gMDtcblxuICBASW5wdXQoKVxuICBzZXQgbnpGbGV4KHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fZmxleCA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gICAgaWYgKHRoaXMuX2ZsZXgpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdkaXNwbGF5JywgJ2ZsZXgnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVTdHlsZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2Rpc3BsYXknKTtcbiAgICB9XG4gIH1cblxuICBlbmFibGVIZWxwKCk6IHZvaWQge1xuICAgIHRoaXMud2l0aEhlbHArKztcbiAgfVxuXG4gIGRpc2FibGVIZWxwKCk6IHZvaWQge1xuICAgIHRoaXMud2l0aEhlbHAtLTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIG56VXBkYXRlSG9zdENsYXNzU2VydmljZTogTnpVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlKSB7XG4gICAgc3VwZXIoZWxlbWVudFJlZiwgcmVuZGVyZXIsIG56VXBkYXRlSG9zdENsYXNzU2VydmljZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7XG4gIGFuaW1hdGUsXG4gIHN0eWxlLFxuICB0cmFuc2l0aW9uLFxuICB0cmlnZ2VyXG59IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBPbkRlc3Ryb3ksIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTnpGb3JtSXRlbUNvbXBvbmVudCB9IGZyb20gJy4vbnotZm9ybS1pdGVtLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICAgICAgOiAnbnotZm9ybS1leHBsYWluJyxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG4gIGFuaW1hdGlvbnMgICAgICAgICA6IFtcbiAgICB0cmlnZ2VyKCdmb3JtRXhwbGFpbkFuaW1hdGlvbicsIFtcbiAgICAgIHRyYW5zaXRpb24oJ3ZvaWQgPT4gKicsIFtcbiAgICAgICAgc3R5bGUoe1xuICAgICAgICAgIG9wYWNpdHkgIDogMCxcbiAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKC01cHgpJ1xuICAgICAgICB9KSxcbiAgICAgICAgYW5pbWF0ZSgnMC4zcyBjdWJpYy1iZXppZXIoMC42NDUsIDAuMDQ1LCAwLjM1NSwgMSknLCBzdHlsZSh7XG4gICAgICAgICAgb3BhY2l0eSAgOiAxLFxuICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoMCknXG4gICAgICAgIH0pKVxuICAgICAgXSksXG4gICAgICB0cmFuc2l0aW9uKCcqID0+IHZvaWQnLCBbXG4gICAgICAgIHN0eWxlKHtcbiAgICAgICAgICBvcGFjaXR5ICA6IDEsXG4gICAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgwKSdcbiAgICAgICAgfSksXG4gICAgICAgIGFuaW1hdGUoJzAuM3MgY3ViaWMtYmV6aWVyKDAuNjQ1LCAwLjA0NSwgMC4zNTUsIDEpJywgc3R5bGUoe1xuICAgICAgICAgIG9wYWNpdHkgIDogMCxcbiAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKC01cHgpJ1xuICAgICAgICB9KSlcbiAgICAgIF0pXG4gICAgXSlcbiAgXSxcbiAgdGVtcGxhdGVVcmwgICAgICAgIDogJy4vbnotZm9ybS1leHBsYWluLmNvbXBvbmVudC5odG1sJyxcbiAgaG9zdCAgICAgICAgICAgICAgIDoge1xuICAgICdbY2xhc3MuYW50LWZvcm0tZXhwbGFpbl0nOiAndHJ1ZSdcbiAgfSxcbiAgc3R5bGVzICAgICAgICAgICAgIDogW1xuICAgIGA6aG9zdHtcbiAgICAgIGRpc3BsYXk6YmxvY2s7XG4gICAgfWBcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBOekZvcm1FeHBsYWluQ29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95LCBPbkluaXQge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG56Rm9ybUl0ZW1Db21wb25lbnQ6IE56Rm9ybUl0ZW1Db21wb25lbnQpIHtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMubnpGb3JtSXRlbUNvbXBvbmVudC5kaXNhYmxlSGVscCgpO1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5uekZvcm1JdGVtQ29tcG9uZW50LmVuYWJsZUhlbHAoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgIDogJ256LWZvcm0tZXh0cmEnLFxuICB0ZW1wbGF0ZVVybDogJy4vbnotZm9ybS1leHRyYS5jb21wb25lbnQuaHRtbCcsXG4gIGhvc3QgICAgICAgOiB7XG4gICAgJ1tjbGFzcy5hbnQtZm9ybS1leHRyYV0nOiAndHJ1ZSdcbiAgfSxcbiAgc3R5bGVzICAgICA6IFsgYDpob3N0IHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgfWAgXVxufSlcbmV4cG9ydCBjbGFzcyBOekZvcm1FeHRyYUNvbXBvbmVudCB7XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEhvc3QsIElucHV0LCBPcHRpb25hbCwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOelVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UgfSBmcm9tICcuLi9jb3JlL3NlcnZpY2VzL3VwZGF0ZS1ob3N0LWNsYXNzLnNlcnZpY2UnO1xuaW1wb3J0IHsgdG9Cb29sZWFuIH0gZnJvbSAnLi4vY29yZS91dGlsL2NvbnZlcnQnO1xuaW1wb3J0IHsgTnpDb2xDb21wb25lbnQgfSBmcm9tICcuLi9ncmlkL256LWNvbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpSb3dDb21wb25lbnQgfSBmcm9tICcuLi9ncmlkL256LXJvdy5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpSb3dEaXJlY3RpdmUgfSBmcm9tICcuLi9ncmlkL256LXJvdy5kaXJlY3RpdmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICAgICAgICAgIDogJ256LWZvcm0tbGFiZWwnLFxuICBwcm92aWRlcnMgICAgICAgICAgOiBbIE56VXBkYXRlSG9zdENsYXNzU2VydmljZSBdLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgdGVtcGxhdGVVcmwgICAgICAgIDogJy4vbnotZm9ybS1sYWJlbC5jb21wb25lbnQuaHRtbCcsXG4gIGhvc3QgICAgICAgICAgICAgICA6IHtcbiAgICAnW2NsYXNzLmFudC1mb3JtLWl0ZW0tbGFiZWxdJzogJ3RydWUnXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgTnpGb3JtTGFiZWxDb21wb25lbnQgZXh0ZW5kcyBOekNvbENvbXBvbmVudCB7XG4gIEBJbnB1dCgpIG56Rm9yOiBzdHJpbmc7XG4gIHByaXZhdGUgX3JlcXVpcmVkID0gZmFsc2U7XG5cbiAgQElucHV0KClcbiAgc2V0IG56UmVxdWlyZWQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9yZXF1aXJlZCA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBnZXQgbnpSZXF1aXJlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fcmVxdWlyZWQ7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihuelVwZGF0ZUhvc3RDbGFzc1NlcnZpY2U6IE56VXBkYXRlSG9zdENsYXNzU2VydmljZSwgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgQE9wdGlvbmFsKCkgQEhvc3QoKSBuelJvd0NvbXBvbmVudDogTnpSb3dDb21wb25lbnQsIEBPcHRpb25hbCgpIEBIb3N0KCkgbnpSb3dEaXJlY3RpdmU6IE56Um93RGlyZWN0aXZlLCByZW5kZXJlcjogUmVuZGVyZXIyKSB7XG4gICAgc3VwZXIobnpVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlLCBlbGVtZW50UmVmLCBuelJvd0NvbXBvbmVudCwgbnpSb3dEaXJlY3RpdmUsIHJlbmRlcmVyKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgIDogJ256LWZvcm0tc3BsaXQnLFxuICB0ZW1wbGF0ZVVybDogJy4vbnotZm9ybS1zcGxpdC5jb21wb25lbnQuaHRtbCcsXG4gIGhvc3QgICAgICAgOiB7XG4gICAgJ1tjbGFzcy5hbnQtZm9ybS1zcGxpdF0nOiAndHJ1ZSdcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBOekZvcm1TcGxpdENvbXBvbmVudCB7XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yICAgOiAnbnotZm9ybS10ZXh0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL256LWZvcm0tdGV4dC5jb21wb25lbnQuaHRtbCcsXG4gIGhvc3QgICAgICAgOiB7XG4gICAgJ1tjbGFzcy5hbnQtZm9ybS10ZXh0XSc6ICd0cnVlJ1xuICB9XG59KVxuZXhwb3J0IGNsYXNzIE56Rm9ybVRleHRDb21wb25lbnQge1xufVxuIiwiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgT25Jbml0LCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE56VXBkYXRlSG9zdENsYXNzU2VydmljZSB9IGZyb20gJy4uL2NvcmUvc2VydmljZXMvdXBkYXRlLWhvc3QtY2xhc3Muc2VydmljZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvciA6ICdbbnotZm9ybV0nLFxuICBwcm92aWRlcnM6IFsgTnpVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlIF1cbn0pXG5leHBvcnQgY2xhc3MgTnpGb3JtRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgZWw6IEhUTUxFbGVtZW50ID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG4gIHByZWZpeENscyA9ICdhbnQtZm9ybSc7XG4gIHByaXZhdGUgX2xheW91dCA9ICdob3Jpem9udGFsJztcblxuICBASW5wdXQoKVxuICBzZXQgbnpMYXlvdXQodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX2xheW91dCA9IHZhbHVlO1xuICAgIHRoaXMuc2V0Q2xhc3NNYXAoKTtcbiAgfVxuXG4gIGdldCBuekxheW91dCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9sYXlvdXQ7XG4gIH1cblxuICBzZXRDbGFzc01hcCgpOiB2b2lkIHtcbiAgICBjb25zdCBjbGFzc01hcCA9IHtcbiAgICAgIFsgYCR7dGhpcy5wcmVmaXhDbHN9YCBdICAgICAgICAgICAgICAgICA6IHRydWUsXG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xzfS0ke3RoaXMubnpMYXlvdXR9YCBdOiB0aGlzLm56TGF5b3V0XG4gICAgfTtcbiAgICB0aGlzLm56VXBkYXRlSG9zdENsYXNzU2VydmljZS51cGRhdGVIb3N0Q2xhc3ModGhpcy5lbCwgY2xhc3NNYXApO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgbnpVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlOiBOelVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuc2V0Q2xhc3NNYXAoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE56R3JpZE1vZHVsZSB9IGZyb20gJy4uL2dyaWQvbnotZ3JpZC5tb2R1bGUnO1xuaW1wb3J0IHsgTnpJY29uTW9kdWxlIH0gZnJvbSAnLi4vaWNvbi9uei1pY29uLm1vZHVsZSc7XG5pbXBvcnQgeyBOekZvcm1Db250cm9sQ29tcG9uZW50IH0gZnJvbSAnLi9uei1mb3JtLWNvbnRyb2wuY29tcG9uZW50JztcbmltcG9ydCB7IE56Rm9ybUV4cGxhaW5Db21wb25lbnQgfSBmcm9tICcuL256LWZvcm0tZXhwbGFpbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpGb3JtRXh0cmFDb21wb25lbnQgfSBmcm9tICcuL256LWZvcm0tZXh0cmEuY29tcG9uZW50JztcbmltcG9ydCB7IE56Rm9ybUl0ZW1Db21wb25lbnQgfSBmcm9tICcuL256LWZvcm0taXRlbS5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpGb3JtTGFiZWxDb21wb25lbnQgfSBmcm9tICcuL256LWZvcm0tbGFiZWwuY29tcG9uZW50JztcbmltcG9ydCB7IE56Rm9ybVNwbGl0Q29tcG9uZW50IH0gZnJvbSAnLi9uei1mb3JtLXNwbGl0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOekZvcm1UZXh0Q29tcG9uZW50IH0gZnJvbSAnLi9uei1mb3JtLXRleHQuY29tcG9uZW50JztcbmltcG9ydCB7IE56Rm9ybURpcmVjdGl2ZSB9IGZyb20gJy4vbnotZm9ybS5kaXJlY3RpdmUnO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBOekZvcm1FeHRyYUNvbXBvbmVudCxcbiAgICBOekZvcm1MYWJlbENvbXBvbmVudCxcbiAgICBOekZvcm1EaXJlY3RpdmUsXG4gICAgTnpGb3JtSXRlbUNvbXBvbmVudCxcbiAgICBOekZvcm1Db250cm9sQ29tcG9uZW50LFxuICAgIE56Rm9ybUV4cGxhaW5Db21wb25lbnQsXG4gICAgTnpGb3JtVGV4dENvbXBvbmVudCxcbiAgICBOekZvcm1TcGxpdENvbXBvbmVudCBdLFxuICBleHBvcnRzICAgICA6IFtcbiAgICBOekZvcm1FeHRyYUNvbXBvbmVudCxcbiAgICBOekZvcm1MYWJlbENvbXBvbmVudCxcbiAgICBOekZvcm1EaXJlY3RpdmUsXG4gICAgTnpGb3JtSXRlbUNvbXBvbmVudCxcbiAgICBOekZvcm1Db250cm9sQ29tcG9uZW50LFxuICAgIE56Rm9ybUV4cGxhaW5Db21wb25lbnQsXG4gICAgTnpGb3JtVGV4dENvbXBvbmVudCxcbiAgICBOekZvcm1TcGxpdENvbXBvbmVudFxuICBdLFxuICBpbXBvcnRzICAgICA6IFsgQ29tbW9uTW9kdWxlLCBOekdyaWRNb2R1bGUsIE56SWNvbk1vZHVsZSBdXG59KVxuZXhwb3J0IGNsYXNzIE56Rm9ybU1vZHVsZSB7XG59XG4iLCJpbXBvcnQgeyBET1dOX0FSUk9XLCBVUF9BUlJPVyB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9rZXljb2Rlcyc7XG5pbXBvcnQge1xuICBmb3J3YXJkUmVmLFxuICBBZnRlclZpZXdJbml0LFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIEhvc3RCaW5kaW5nLFxuICBJbnB1dCxcbiAgUmVuZGVyZXIyLFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IGlzTm90TmlsIH0gZnJvbSAnLi4vY29yZS91dGlsL2NoZWNrJztcbmltcG9ydCB7IHRvQm9vbGVhbiB9IGZyb20gJy4uL2NvcmUvdXRpbC9jb252ZXJ0JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yICAgOiAnbnotaW5wdXQtbnVtYmVyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL256LWlucHV0LW51bWJlci5jb21wb25lbnQuaHRtbCcsXG4gIHByb3ZpZGVycyAgOiBbXG4gICAge1xuICAgICAgcHJvdmlkZSAgICA6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTnpJbnB1dE51bWJlckNvbXBvbmVudCksXG4gICAgICBtdWx0aSAgICAgIDogdHJ1ZVxuICAgIH1cbiAgXSxcbiAgaG9zdCAgICAgICA6IHtcbiAgICAnW2NsYXNzLmFudC1pbnB1dC1udW1iZXJdJyAgICAgICAgOiAndHJ1ZScsXG4gICAgJ1tjbGFzcy5hbnQtaW5wdXQtbnVtYmVyLWZvY3VzZWRdJzogJ2lzRm9jdXNlZCdcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBOeklucHV0TnVtYmVyQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIEFmdGVyVmlld0luaXQge1xuICBwcml2YXRlIGlzSW5pdCA9IGZhbHNlO1xuICBwcml2YXRlIF9kaXNhYmxlZCA9IGZhbHNlO1xuICBwcml2YXRlIF9zdGVwID0gMTtcbiAgcHJpdmF0ZSBhdXRvU3RlcFRpbWVyO1xuICBwcml2YXRlIF9hdXRvRm9jdXMgPSBmYWxzZTtcbiAgcHJpdmF0ZSBfZm9ybWF0dGVyID0gKHZhbHVlKSA9PiB2YWx1ZTtcbiAgZGlzcGxheVZhbHVlOiBzdHJpbmcgfCBudW1iZXI7XG4gIGFjdHVhbFZhbHVlOiBzdHJpbmcgfCBudW1iZXI7XG4gIGlzRm9jdXNlZCA9IGZhbHNlO1xuICB2YWx1ZTogc3RyaW5nIHwgbnVtYmVyO1xuICBlbDogSFRNTEVsZW1lbnQgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcbiAgcHJlZml4Q2xzID0gJ2FudC1pbnB1dC1udW1iZXInO1xuICBkaXNhYmxlZFVwID0gZmFsc2U7XG4gIGRpc2FibGVkRG93biA9IGZhbHNlO1xuICBvbkNoYW5nZTogKHZhbHVlOiBudW1iZXIpID0+IHZvaWQgPSAoKSA9PiBudWxsO1xuICBvblRvdWNoZWQ6ICgpID0+IHZvaWQgPSAoKSA9PiBudWxsO1xuICBAVmlld0NoaWxkKCdpbnB1dEVsZW1lbnQnKSBpbnB1dEVsZW1lbnQ6IEVsZW1lbnRSZWY7XG4gIEBJbnB1dCgpIG56U2l6ZTogJ3NtYWxsJyB8ICdkZWZhdWx0JyB8ICdsYXJnZScgPSAnZGVmYXVsdCc7XG4gIEBJbnB1dCgpIG56TWluOiBudW1iZXIgPSAtSW5maW5pdHk7XG4gIEBJbnB1dCgpIG56TWF4OiBudW1iZXIgPSBJbmZpbml0eTtcbiAgQElucHV0KCkgbnpQYXJzZXIgPSAodmFsdWUpID0+IHZhbHVlO1xuICBASW5wdXQoKSBuelByZWNpc2lvbjogbnVtYmVyO1xuICBASW5wdXQoKSBuelBsYWNlSG9sZGVyID0gJyc7XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hbnQtaW5wdXQtbnVtYmVyLWxnJylcbiAgZ2V0IGlzTGFyZ2UoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubnpTaXplID09PSAnbGFyZ2UnO1xuICB9XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hbnQtaW5wdXQtbnVtYmVyLXNtJylcbiAgZ2V0IGlzU21hbGwoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubnpTaXplID09PSAnc21hbGwnO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56QXV0b0ZvY3VzKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fYXV0b0ZvY3VzID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgICB0aGlzLnVwZGF0ZUF1dG9Gb2N1cygpO1xuICB9XG5cbiAgZ2V0IG56QXV0b0ZvY3VzKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9hdXRvRm9jdXM7XG4gIH1cblxuICBASW5wdXQoKVxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmFudC1pbnB1dC1udW1iZXItZGlzYWJsZWQnKVxuICBzZXQgbnpEaXNhYmxlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2Rpc2FibGVkID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuekRpc2FibGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9kaXNhYmxlZDtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuelN0ZXAodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX3N0ZXAgPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBuelN0ZXAoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fc3RlcDtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekZvcm1hdHRlcih2OiAodmFsdWU6IG51bWJlcikgPT4gc3RyaW5nIHwgbnVtYmVyKSB7XG4gICAgdGhpcy5fZm9ybWF0dGVyID0gdjtcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZ2V0Q3VycmVudFZhbGlkVmFsdWUodGhpcy5hY3R1YWxWYWx1ZSk7XG4gICAgdGhpcy53cml0ZVZhbHVlKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuekZvcm1hdHRlcigpOiAodmFsdWU6IG51bWJlcikgPT4gc3RyaW5nIHwgbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fZm9ybWF0dGVyO1xuICB9XG5cbiAgdXBkYXRlQXV0b0ZvY3VzKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLm56QXV0b0ZvY3VzKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLmlucHV0RWxlbWVudC5uYXRpdmVFbGVtZW50LCAnYXV0b2ZvY3VzJywgJ2F1dG9mb2N1cycpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUF0dHJpYnV0ZSh0aGlzLmlucHV0RWxlbWVudC5uYXRpdmVFbGVtZW50LCAnYXV0b2ZvY3VzJyk7XG4gICAgfVxuICB9XG5cbiAgb25Nb2RlbENoYW5nZSh2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5hY3R1YWxWYWx1ZSA9IHRoaXMubnpQYXJzZXIodmFsdWUudHJpbSgpLnJlcGxhY2UoL8OjwoDCgi9nLCAnLicpLnJlcGxhY2UoL1teXFx3XFwuLV0rL2csICcnKSk7XG4gICAgdGhpcy5pbnB1dEVsZW1lbnQubmF0aXZlRWxlbWVudC52YWx1ZSA9IHRoaXMuYWN0dWFsVmFsdWU7XG4gIH1cblxuICBnZXRDdXJyZW50VmFsaWRWYWx1ZSh2YWx1ZTogc3RyaW5nIHwgbnVtYmVyKTogbnVtYmVyIHtcbiAgICBsZXQgdmFsID0gdmFsdWU7XG4gICAgaWYgKHZhbCA9PT0gJycpIHtcbiAgICAgIHZhbCA9ICcnO1xuICAgIH0gZWxzZSBpZiAoIXRoaXMuaXNOb3RDb21wbGV0ZU51bWJlcih2YWwpKSB7XG4gICAgICB2YWwgPSB0aGlzLmdldFZhbGlkVmFsdWUodmFsKSBhcyBzdHJpbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbCA9IHRoaXMudmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRvTnVtYmVyKHZhbCk7XG4gIH1cblxuICAvLyAnMS4nICcxeCcgJ3h4JyAnJyA9PiBhcmUgbm90IGNvbXBsZXRlIG51bWJlcnNcbiAgaXNOb3RDb21wbGV0ZU51bWJlcihudW06IHN0cmluZyB8IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoXG4gICAgICBpc05hTihudW0gYXMgbnVtYmVyKSB8fFxuICAgICAgbnVtID09PSAnJyB8fFxuICAgICAgbnVtID09PSBudWxsIHx8XG4gICAgICAobnVtICYmIG51bS50b1N0cmluZygpLmluZGV4T2YoJy4nKSA9PT0gbnVtLnRvU3RyaW5nKCkubGVuZ3RoIC0gMSlcbiAgICApO1xuICB9XG5cbiAgZ2V0VmFsaWRWYWx1ZSh2YWx1ZTogc3RyaW5nIHwgbnVtYmVyKTogc3RyaW5nIHwgbnVtYmVyIHtcbiAgICBsZXQgdmFsID0gcGFyc2VGbG9hdCh2YWx1ZSBhcyBzdHJpbmcpO1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vaXNzdWVzLzczNThcbiAgICBpZiAoaXNOYU4odmFsKSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBpZiAodmFsIDwgdGhpcy5uek1pbikge1xuICAgICAgdmFsID0gdGhpcy5uek1pbjtcbiAgICB9XG4gICAgaWYgKHZhbCA+IHRoaXMubnpNYXgpIHtcbiAgICAgIHZhbCA9IHRoaXMubnpNYXg7XG4gICAgfVxuICAgIHJldHVybiB2YWw7XG4gIH1cblxuICB0b051bWJlcihudW06IHN0cmluZyB8IG51bWJlcik6IG51bWJlciB7XG4gICAgaWYgKHRoaXMuaXNOb3RDb21wbGV0ZU51bWJlcihudW0pKSB7XG4gICAgICByZXR1cm4gbnVtIGFzIG51bWJlcjtcbiAgICB9XG4gICAgaWYgKGlzTm90TmlsKHRoaXMubnpQcmVjaXNpb24pKSB7XG4gICAgICByZXR1cm4gTnVtYmVyKE51bWJlcihudW0pLnRvRml4ZWQodGhpcy5uelByZWNpc2lvbikpO1xuICAgIH1cbiAgICByZXR1cm4gTnVtYmVyKG51bSk7XG4gIH1cblxuICBvbkJsdXIoZTogRm9jdXNFdmVudCk6IHZvaWQge1xuICAgIHRoaXMub25Ub3VjaGVkKCk7XG4gICAgdGhpcy5pc0ZvY3VzZWQgPSBmYWxzZTtcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZ2V0Q3VycmVudFZhbGlkVmFsdWUodGhpcy5hY3R1YWxWYWx1ZSk7XG4gICAgdGhpcy5zZXRWYWx1ZSh2YWx1ZSwgYCR7dGhpcy52YWx1ZX1gICE9PSBgJHt2YWx1ZX1gKTtcbiAgfVxuXG4gIG9uRm9jdXMoZTogRm9jdXNFdmVudCk6IHZvaWQge1xuICAgIHRoaXMuaXNGb2N1c2VkID0gdHJ1ZTtcbiAgfVxuXG4gIGdldFJhdGlvKGU6IEtleWJvYXJkRXZlbnQpOiBudW1iZXIge1xuICAgIGxldCByYXRpbyA9IDE7XG4gICAgaWYgKGUubWV0YUtleSB8fCBlLmN0cmxLZXkpIHtcbiAgICAgIHJhdGlvID0gMC4xO1xuICAgIH0gZWxzZSBpZiAoZS5zaGlmdEtleSkge1xuICAgICAgcmF0aW8gPSAxMDtcbiAgICB9XG4gICAgcmV0dXJuIHJhdGlvO1xuICB9XG5cbiAgZG93bihlOiBNb3VzZUV2ZW50IHwgS2V5Ym9hcmRFdmVudCwgcmF0aW8/OiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuaXNGb2N1c2VkKSB7XG4gICAgICB0aGlzLmZvY3VzKCk7XG4gICAgfVxuICAgIHRoaXMuc3RlcCgnZG93bicsIGUsIHJhdGlvKTtcbiAgfVxuXG4gIHVwKGU6IE1vdXNlRXZlbnQgfCBLZXlib2FyZEV2ZW50LCByYXRpbz86IG51bWJlcik6IHZvaWQge1xuICAgIGlmICghdGhpcy5pc0ZvY3VzZWQpIHtcbiAgICAgIHRoaXMuZm9jdXMoKTtcbiAgICB9XG4gICAgdGhpcy5zdGVwKCd1cCcsIGUsIHJhdGlvKTtcbiAgfVxuXG4gIGdldFByZWNpc2lvbih2YWx1ZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBjb25zdCB2YWx1ZVN0cmluZyA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgaWYgKHZhbHVlU3RyaW5nLmluZGV4T2YoJ2UtJykgPj0gMCkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlU3RyaW5nLnNsaWNlKHZhbHVlU3RyaW5nLmluZGV4T2YoJ2UtJykgKyAyKSwgMTApO1xuICAgIH1cbiAgICBsZXQgcHJlY2lzaW9uID0gMDtcbiAgICBpZiAodmFsdWVTdHJpbmcuaW5kZXhPZignLicpID49IDApIHtcbiAgICAgIHByZWNpc2lvbiA9IHZhbHVlU3RyaW5nLmxlbmd0aCAtIHZhbHVlU3RyaW5nLmluZGV4T2YoJy4nKSAtIDE7XG4gICAgfVxuICAgIHJldHVybiBwcmVjaXNpb247XG4gIH1cblxuICAvLyBzdGVwPXsxLjB9IHZhbHVlPXsxLjUxfVxuICAvLyBwcmVzcyArXG4gIC8vIHRoZW4gdmFsdWUgc2hvdWxkIGJlIDIuNTEsIHJhdGhlciB0aGFuIDIuNVxuICAvLyBpZiB0aGlzLnByb3BzLnByZWNpc2lvbiBpcyB1bmRlZmluZWRcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LWNvbXBvbmVudC9pbnB1dC1udW1iZXIvaXNzdWVzLzM5XG4gIGdldE1heFByZWNpc2lvbihjdXJyZW50VmFsdWU6IHN0cmluZyB8IG51bWJlciwgcmF0aW86IG51bWJlcik6IG51bWJlciB7XG4gICAgaWYgKGlzTm90TmlsKHRoaXMubnpQcmVjaXNpb24pKSB7XG4gICAgICByZXR1cm4gdGhpcy5uelByZWNpc2lvbjtcbiAgICB9XG4gICAgY29uc3QgcmF0aW9QcmVjaXNpb24gPSB0aGlzLmdldFByZWNpc2lvbihyYXRpbyk7XG4gICAgY29uc3Qgc3RlcFByZWNpc2lvbiA9IHRoaXMuZ2V0UHJlY2lzaW9uKHRoaXMubnpTdGVwKTtcbiAgICBjb25zdCBjdXJyZW50VmFsdWVQcmVjaXNpb24gPSB0aGlzLmdldFByZWNpc2lvbihjdXJyZW50VmFsdWUgYXMgbnVtYmVyKTtcbiAgICBpZiAoIWN1cnJlbnRWYWx1ZSkge1xuICAgICAgcmV0dXJuIHJhdGlvUHJlY2lzaW9uICsgc3RlcFByZWNpc2lvbjtcbiAgICB9XG4gICAgcmV0dXJuIE1hdGgubWF4KGN1cnJlbnRWYWx1ZVByZWNpc2lvbiwgcmF0aW9QcmVjaXNpb24gKyBzdGVwUHJlY2lzaW9uKTtcbiAgfVxuXG4gIGdldFByZWNpc2lvbkZhY3RvcihjdXJyZW50VmFsdWU6IHN0cmluZyB8IG51bWJlciwgcmF0aW86IG51bWJlcik6IG51bWJlciB7XG4gICAgY29uc3QgcHJlY2lzaW9uID0gdGhpcy5nZXRNYXhQcmVjaXNpb24oY3VycmVudFZhbHVlLCByYXRpbyk7XG4gICAgcmV0dXJuIE1hdGgucG93KDEwLCBwcmVjaXNpb24pO1xuICB9XG5cbiAgdXBTdGVwKHZhbDogc3RyaW5nIHwgbnVtYmVyLCByYXQ6IG51bWJlcik6IG51bWJlciB7XG4gICAgY29uc3QgcHJlY2lzaW9uRmFjdG9yID0gdGhpcy5nZXRQcmVjaXNpb25GYWN0b3IodmFsLCByYXQpO1xuICAgIGNvbnN0IHByZWNpc2lvbiA9IE1hdGguYWJzKHRoaXMuZ2V0TWF4UHJlY2lzaW9uKHZhbCwgcmF0KSk7XG4gICAgbGV0IHJlc3VsdDtcbiAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJlc3VsdCA9XG4gICAgICAgICgocHJlY2lzaW9uRmFjdG9yICogdmFsICsgcHJlY2lzaW9uRmFjdG9yICogdGhpcy5uelN0ZXAgKiByYXQpIC9cbiAgICAgICAgICBwcmVjaXNpb25GYWN0b3IpLnRvRml4ZWQocHJlY2lzaW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gdGhpcy5uek1pbiA9PT0gLUluZmluaXR5ID8gdGhpcy5uelN0ZXAgOiB0aGlzLm56TWluO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50b051bWJlcihyZXN1bHQpO1xuICB9XG5cbiAgZG93blN0ZXAodmFsOiBzdHJpbmcgfCBudW1iZXIsIHJhdDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBjb25zdCBwcmVjaXNpb25GYWN0b3IgPSB0aGlzLmdldFByZWNpc2lvbkZhY3Rvcih2YWwsIHJhdCk7XG4gICAgY29uc3QgcHJlY2lzaW9uID0gTWF0aC5hYnModGhpcy5nZXRNYXhQcmVjaXNpb24odmFsLCByYXQpKTtcbiAgICBsZXQgcmVzdWx0O1xuICAgIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgICAgcmVzdWx0ID1cbiAgICAgICAgKChwcmVjaXNpb25GYWN0b3IgKiB2YWwgLSBwcmVjaXNpb25GYWN0b3IgKiB0aGlzLm56U3RlcCAqIHJhdCkgL1xuICAgICAgICAgIHByZWNpc2lvbkZhY3RvcikudG9GaXhlZChwcmVjaXNpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSB0aGlzLm56TWluID09PSAtSW5maW5pdHkgPyAtdGhpcy5uelN0ZXAgOiB0aGlzLm56TWluO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50b051bWJlcihyZXN1bHQpO1xuICB9XG5cbiAgc3RlcCh0eXBlOiBzdHJpbmcsIGU6IE1vdXNlRXZlbnQgfCBLZXlib2FyZEV2ZW50LCByYXRpbzogbnVtYmVyID0gMSk6IHZvaWQge1xuICAgIHRoaXMuc3RvcCgpO1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAodGhpcy5uekRpc2FibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5nZXRDdXJyZW50VmFsaWRWYWx1ZSh0aGlzLmFjdHVhbFZhbHVlKSB8fCAwO1xuICAgIGxldCB2YWw7XG4gICAgaWYgKHR5cGUgPT09ICd1cCcpIHtcbiAgICAgIHZhbCA9IHRoaXMudXBTdGVwKHZhbHVlLCByYXRpbyk7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnZG93bicpIHtcbiAgICAgIHZhbCA9IHRoaXMuZG93blN0ZXAodmFsdWUsIHJhdGlvKTtcbiAgICB9XG4gICAgY29uc3Qgb3V0T2ZSYW5nZSA9IHZhbCA+IHRoaXMubnpNYXggfHwgdmFsIDwgdGhpcy5uek1pbjtcbiAgICBpZiAodmFsID4gdGhpcy5uek1heCkge1xuICAgICAgdmFsID0gdGhpcy5uek1heDtcbiAgICB9IGVsc2UgaWYgKHZhbCA8IHRoaXMubnpNaW4pIHtcbiAgICAgIHZhbCA9IHRoaXMubnpNaW47XG4gICAgfVxuICAgIHRoaXMuc2V0VmFsdWUodmFsLCB0cnVlKTtcbiAgICB0aGlzLmlzRm9jdXNlZCA9IHRydWU7XG4gICAgaWYgKG91dE9mUmFuZ2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5hdXRvU3RlcFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzWyB0eXBlIF0oZSwgcmF0aW8sIHRydWUpO1xuICAgIH0sIDYwMCk7XG4gIH1cblxuICBzdG9wKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmF1dG9TdGVwVGltZXIpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLmF1dG9TdGVwVGltZXIpO1xuICAgIH1cbiAgfVxuXG4gIHNldFZhbHVlKHZhbHVlOiBudW1iZXIsIGVtaXQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBpZiAoZW1pdCAmJiAoYCR7dGhpcy52YWx1ZX1gICE9PSBgJHt2YWx1ZX1gKSkge1xuICAgICAgdGhpcy5vbkNoYW5nZSh2YWx1ZSk7XG4gICAgfVxuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLmFjdHVhbFZhbHVlID0gdmFsdWU7XG4gICAgY29uc3QgZGlzcGxheVZhbHVlID0gaXNOb3ROaWwodGhpcy5uekZvcm1hdHRlcih0aGlzLnZhbHVlKSkgPyB0aGlzLm56Rm9ybWF0dGVyKHRoaXMudmFsdWUpIDogJyc7XG4gICAgdGhpcy5kaXNwbGF5VmFsdWUgPSBkaXNwbGF5VmFsdWU7XG4gICAgdGhpcy5pbnB1dEVsZW1lbnQubmF0aXZlRWxlbWVudC52YWx1ZSA9IGRpc3BsYXlWYWx1ZTtcbiAgICB0aGlzLmRpc2FibGVkVXAgPSB0aGlzLmRpc2FibGVkRG93biA9IGZhbHNlO1xuICAgIGlmICh2YWx1ZSB8fCB2YWx1ZSA9PT0gMCkge1xuICAgICAgY29uc3QgdmFsID0gTnVtYmVyKHZhbHVlKTtcbiAgICAgIGlmICh2YWwgPj0gdGhpcy5uek1heCkge1xuICAgICAgICB0aGlzLmRpc2FibGVkVXAgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHZhbCA8PSB0aGlzLm56TWluKSB7XG4gICAgICAgIHRoaXMuZGlzYWJsZWREb3duID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgfVxuXG4gIG9uS2V5RG93bihlOiBLZXlib2FyZEV2ZW50KTogdm9pZCB7XG4gICAgaWYgKGUuY29kZSA9PT0gJ0Fycm93VXAnIHx8IGUua2V5Q29kZSA9PT0gVVBfQVJST1cpIHtcbiAgICAgIGNvbnN0IHJhdGlvID0gdGhpcy5nZXRSYXRpbyhlKTtcbiAgICAgIHRoaXMudXAoZSwgcmF0aW8pO1xuICAgICAgdGhpcy5zdG9wKCk7XG4gICAgfSBlbHNlIGlmIChlLmNvZGUgPT09ICdBcnJvd0Rvd24nIHx8IGUua2V5Q29kZSA9PT0gRE9XTl9BUlJPVykge1xuICAgICAgY29uc3QgcmF0aW8gPSB0aGlzLmdldFJhdGlvKGUpO1xuICAgICAgdGhpcy5kb3duKGUsIHJhdGlvKTtcbiAgICAgIHRoaXMuc3RvcCgpO1xuICAgIH1cbiAgfVxuXG4gIG9uS2V5VXAoZTogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgIHRoaXMuc3RvcCgpO1xuICB9XG5cbiAgd3JpdGVWYWx1ZSh2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5zZXRWYWx1ZSh2YWx1ZSwgZmFsc2UpO1xuICB9XG5cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKF86IG51bWJlcikgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMub25DaGFuZ2UgPSBmbjtcbiAgfVxuXG4gIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiAoKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5vblRvdWNoZWQgPSBmbjtcbiAgfVxuXG4gIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMubnpEaXNhYmxlZCA9IGlzRGlzYWJsZWQ7XG4gIH1cblxuICBmb2N1cygpOiB2b2lkIHtcbiAgICB0aGlzLmlucHV0RWxlbWVudC5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG4gIH1cblxuICBibHVyKCk6IHZvaWQge1xuICAgIHRoaXMuaW5wdXRFbGVtZW50Lm5hdGl2ZUVsZW1lbnQuYmx1cigpO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmlzSW5pdCA9IHRydWU7XG4gICAgaWYgKHRoaXMuX2F1dG9Gb2N1cykge1xuICAgICAgdGhpcy5mb2N1cygpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IE56SWNvbk1vZHVsZSB9IGZyb20gJy4uL2ljb24vbnotaWNvbi5tb2R1bGUnO1xuXG5pbXBvcnQgeyBOeklucHV0TnVtYmVyQ29tcG9uZW50IH0gZnJvbSAnLi9uei1pbnB1dC1udW1iZXIuY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0cyAgICAgOiBbIENvbW1vbk1vZHVsZSwgRm9ybXNNb2R1bGUsIE56SWNvbk1vZHVsZSBdLFxuICBkZWNsYXJhdGlvbnM6IFsgTnpJbnB1dE51bWJlckNvbXBvbmVudCBdLFxuICBleHBvcnRzICAgICA6IFsgTnpJbnB1dE51bWJlckNvbXBvbmVudCBdXG59KVxuZXhwb3J0IGNsYXNzIE56SW5wdXROdW1iZXJNb2R1bGUge1xufVxuIiwiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgbWF0Y2hNZWRpYSB9IGZyb20gJy4uL3BvbHlmaWxsL21hdGNoLW1lZGlhJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE56TWF0Y2hNZWRpYVNlcnZpY2Uge1xuICBtYXRjaE1lZGlhKG1lZGlhUXVlcnk6IHN0cmluZyk6IE1lZGlhUXVlcnlMaXN0IHtcbiAgICByZXR1cm4gbWF0Y2hNZWRpYShtZWRpYVF1ZXJ5KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICAgICAgOiAnbnotY29udGVudCcsXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxuICB0ZW1wbGF0ZVVybCAgICAgICAgOiAnLi9uei1jb250ZW50LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVzICAgICAgICAgICAgIDogW1xuICAgIGA6aG9zdCB7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICB9YFxuICBdLFxuICBob3N0ICAgICAgICAgICAgICAgOiB7XG4gICAgJ1tjbGFzcy5hbnQtbGF5b3V0LWNvbnRlbnRdJzogJ3RydWUnXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgTnpDb250ZW50Q29tcG9uZW50IHtcbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICAgICAgICAgIDogJ256LWZvb3RlcicsXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxuICB0ZW1wbGF0ZVVybCAgICAgICAgOiAnLi9uei1mb290ZXIuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZXMgICAgICAgICAgICAgOiBbXG4gICAgYDpob3N0IHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIH1gXG4gIF0sXG4gIGhvc3QgICAgICAgICAgICAgICA6IHtcbiAgICAnW2NsYXNzLmFudC1sYXlvdXQtZm9vdGVyXSc6ICd0cnVlJ1xuICB9XG59KVxuZXhwb3J0IGNsYXNzIE56Rm9vdGVyQ29tcG9uZW50IHtcbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICAgICAgICAgIDogJ256LWhlYWRlcicsXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxuICB0ZW1wbGF0ZVVybCAgICAgICAgOiAnLi9uei1oZWFkZXIuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZXMgICAgICAgICAgICAgOiBbXG4gICAgYDpob3N0IHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIH1gXG4gIF0sXG4gIGhvc3QgICAgICAgICAgICAgICA6IHtcbiAgICAnW2NsYXNzLmFudC1sYXlvdXQtaGVhZGVyXSc6ICd0cnVlJ1xuICB9XG59KVxuZXhwb3J0IGNsYXNzIE56SGVhZGVyQ29tcG9uZW50IHtcbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICAgICAgICAgIDogJ256LWxheW91dCcsXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxuICB0ZW1wbGF0ZVVybCAgICAgICAgOiAnLi9uei1sYXlvdXQuY29tcG9uZW50Lmh0bWwnLFxuICBob3N0ICAgICAgICAgICAgICAgOiB7XG4gICAgJ1tjbGFzcy5hbnQtbGF5b3V0XScgICAgICAgICAgOiAndHJ1ZScsXG4gICAgJ1tjbGFzcy5hbnQtbGF5b3V0LWhhcy1zaWRlcl0nOiAnaGFzU2lkZXInXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgTnpMYXlvdXRDb21wb25lbnQge1xuICBoYXNTaWRlciA9IGZhbHNlO1xufVxuIiwiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ29tcG9uZW50LFxuICBFdmVudEVtaXR0ZXIsXG4gIEhvc3QsXG4gIEhvc3RCaW5kaW5nLFxuICBIb3N0TGlzdGVuZXIsXG4gIElucHV0LFxuICBPbkluaXQsXG4gIE9wdGlvbmFsLFxuICBPdXRwdXQsXG4gIFRlbXBsYXRlUmVmLFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE56TWF0Y2hNZWRpYVNlcnZpY2UgfSBmcm9tICcuLi9jb3JlL3NlcnZpY2VzL256LW1hdGNoLW1lZGlhLnNlcnZpY2UnO1xuaW1wb3J0IHsgdG9Cb29sZWFuIH0gZnJvbSAnLi4vY29yZS91dGlsL2NvbnZlcnQnO1xuXG5pbXBvcnQgeyBOekxheW91dENvbXBvbmVudCB9IGZyb20gJy4vbnotbGF5b3V0LmNvbXBvbmVudCc7XG5cbmV4cG9ydCB0eXBlIE56QnJlYWtQb2ludCA9ICd4cycgfCAnc20nIHwgJ21kJyB8ICdsZycgfCAneGwnIHwgJ3h4bCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICAgICAgOiAnbnotc2lkZXInLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgdGVtcGxhdGVVcmwgICAgICAgIDogJy4vbnotc2lkZXIuY29tcG9uZW50Lmh0bWwnLFxuICBob3N0ICAgICAgICAgICAgICAgOiB7XG4gICAgJ1tjbGFzcy5hbnQtbGF5b3V0LXNpZGVyXSc6ICd0cnVlJ1xuICB9XG59KVxuZXhwb3J0IGNsYXNzIE56U2lkZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQge1xuICBwcml2YXRlIF9jb2xsYXBzZWQgPSBmYWxzZTtcbiAgcHJpdmF0ZSBfY29sbGFwc2libGUgPSBmYWxzZTtcbiAgQFZpZXdDaGlsZCgnZGVmYXVsdFRyaWdnZXInKSBfdHJpZ2dlcjogVGVtcGxhdGVSZWY8dm9pZD47XG4gIHByaXZhdGUgX3JldmVyc2VBcnJvdyA9IGZhbHNlO1xuICBwcml2YXRlIGJlbG93ID0gZmFsc2U7XG4gIHByaXZhdGUgaXNJbml0ID0gZmFsc2U7XG4gIHByaXZhdGUgZGltZW5zaW9uTWFwID0ge1xuICAgIHhzIDogJzQ4MHB4JyxcbiAgICBzbSA6ICc1NzZweCcsXG4gICAgbWQgOiAnNzY4cHgnLFxuICAgIGxnIDogJzk5MnB4JyxcbiAgICB4bCA6ICcxMjAwcHgnLFxuICAgIHh4bDogJzE2MDBweCdcbiAgfTtcbiAgQElucHV0KCkgbnpXaWR0aCA9IDIwMDtcbiAgQElucHV0KCkgbnpDb2xsYXBzZWRXaWR0aCA9IDgwO1xuICBASW5wdXQoKSBuekJyZWFrcG9pbnQ6IE56QnJlYWtQb2ludDtcblxuICBASW5wdXQoKVxuICBzZXQgbnpSZXZlcnNlQXJyb3codmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9yZXZlcnNlQXJyb3cgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56UmV2ZXJzZUFycm93KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9yZXZlcnNlQXJyb3c7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpUcmlnZ2VyKHZhbHVlOiBUZW1wbGF0ZVJlZjx2b2lkPikge1xuICAgIHRoaXMuX3RyaWdnZXIgPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBuelRyaWdnZXIoKTogVGVtcGxhdGVSZWY8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLl90cmlnZ2VyO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56Q29sbGFwc2libGUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9jb2xsYXBzaWJsZSA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBnZXQgbnpDb2xsYXBzaWJsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fY29sbGFwc2libGU7XG4gIH1cblxuICBASW5wdXQoKVxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmFudC1sYXlvdXQtc2lkZXItY29sbGFwc2VkJylcbiAgc2V0IG56Q29sbGFwc2VkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fY29sbGFwc2VkID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuekNvbGxhcHNlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fY29sbGFwc2VkO1xuICB9XG5cbiAgQE91dHB1dCgpIG56Q29sbGFwc2VkQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW50LWxheW91dC1zaWRlci16ZXJvLXdpZHRoJylcbiAgZ2V0IHNldFplcm9DbGFzcygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5uekNvbGxhcHNlZCAmJiAodGhpcy5uekNvbGxhcHNlZFdpZHRoID09PSAwKTtcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnc3R5bGUuZmxleCcpXG4gIGdldCBzZXRGbGV4KCk6IHN0cmluZyB7XG4gICAgaWYgKHRoaXMubnpDb2xsYXBzZWQpIHtcbiAgICAgIHJldHVybiBgMCAwICR7dGhpcy5uekNvbGxhcHNlZFdpZHRofXB4YDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGAwIDAgJHt0aGlzLm56V2lkdGh9cHhgO1xuICAgIH1cbiAgfVxuXG4gIEBIb3N0QmluZGluZygnc3R5bGUubWF4LXdpZHRoLnB4JylcbiAgQEhvc3RCaW5kaW5nKCdzdHlsZS5taW4td2lkdGgucHgnKVxuICBASG9zdEJpbmRpbmcoJ3N0eWxlLndpZHRoLnB4JylcbiAgZ2V0IHNldFdpZHRoKCk6IG51bWJlciB7XG4gICAgaWYgKHRoaXMubnpDb2xsYXBzZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLm56Q29sbGFwc2VkV2lkdGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLm56V2lkdGg7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignd2luZG93OnJlc2l6ZScsIFsgJyRldmVudCcgXSlcbiAgb25XaW5kb3dSZXNpemUoZTogVUlFdmVudCk6IHZvaWQge1xuICAgIHRoaXMud2F0Y2hNYXRjaE1lZGlhKCk7XG4gIH1cblxuICB3YXRjaE1hdGNoTWVkaWEoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubnpCcmVha3BvaW50KSB7XG4gICAgICBjb25zdCBtYXRjaEJlbG93ID0gdGhpcy5uek1hdGNoTWVkaWFTZXJ2aWNlLm1hdGNoTWVkaWEoYChtYXgtd2lkdGg6ICR7dGhpcy5kaW1lbnNpb25NYXBbIHRoaXMubnpCcmVha3BvaW50IF19KWApLm1hdGNoZXM7XG4gICAgICB0aGlzLmJlbG93ID0gbWF0Y2hCZWxvdztcbiAgICAgIHRoaXMubnpDb2xsYXBzZWQgPSBtYXRjaEJlbG93O1xuICAgICAgaWYgKHRoaXMuaXNJbml0KSB7XG4gICAgICAgIHRoaXMubnpDb2xsYXBzZWRDaGFuZ2UuZW1pdChtYXRjaEJlbG93KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0b2dnbGVDb2xsYXBzZSgpOiB2b2lkIHtcbiAgICB0aGlzLm56Q29sbGFwc2VkID0gIXRoaXMubnpDb2xsYXBzZWQ7XG4gICAgdGhpcy5uekNvbGxhcHNlZENoYW5nZS5lbWl0KHRoaXMubnpDb2xsYXBzZWQpO1xuICB9XG5cbiAgZ2V0IGlzWmVyb1RyaWdnZXIoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubnpDb2xsYXBzaWJsZSAmJiB0aGlzLm56VHJpZ2dlciAmJiAodGhpcy5uekNvbGxhcHNlZFdpZHRoID09PSAwKSAmJiAoKHRoaXMubnpCcmVha3BvaW50ICYmIHRoaXMuYmVsb3cpIHx8ICghdGhpcy5uekJyZWFrcG9pbnQpKTtcbiAgfVxuXG4gIGdldCBpc1NpZGVyVHJpZ2dlcigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5uekNvbGxhcHNpYmxlICYmIHRoaXMubnpUcmlnZ2VyICYmICh0aGlzLm56Q29sbGFwc2VkV2lkdGggIT09IDApO1xuICB9XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEhvc3QoKSBwcml2YXRlIG56TGF5b3V0Q29tcG9uZW50OiBOekxheW91dENvbXBvbmVudCwgcHJpdmF0ZSBuek1hdGNoTWVkaWFTZXJ2aWNlOiBOek1hdGNoTWVkaWFTZXJ2aWNlKSB7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5uekxheW91dENvbXBvbmVudCkge1xuICAgICAgdGhpcy5uekxheW91dENvbXBvbmVudC5oYXNTaWRlciA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIHRoaXMuaXNJbml0ID0gdHJ1ZTtcbiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHRoaXMud2F0Y2hNYXRjaE1lZGlhKCkpO1xuICB9XG5cbn1cbiIsImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBOek1hdGNoTWVkaWFTZXJ2aWNlIH0gZnJvbSAnLi4vY29yZS9zZXJ2aWNlcy9uei1tYXRjaC1tZWRpYS5zZXJ2aWNlJztcbmltcG9ydCB7IE56SWNvbk1vZHVsZSB9IGZyb20gJy4uL2ljb24vbnotaWNvbi5tb2R1bGUnO1xuXG5pbXBvcnQgeyBOekNvbnRlbnRDb21wb25lbnQgfSBmcm9tICcuL256LWNvbnRlbnQuY29tcG9uZW50JztcbmltcG9ydCB7IE56Rm9vdGVyQ29tcG9uZW50IH0gZnJvbSAnLi9uei1mb290ZXIuY29tcG9uZW50JztcbmltcG9ydCB7IE56SGVhZGVyQ29tcG9uZW50IH0gZnJvbSAnLi9uei1oZWFkZXIuY29tcG9uZW50JztcbmltcG9ydCB7IE56TGF5b3V0Q29tcG9uZW50IH0gZnJvbSAnLi9uei1sYXlvdXQuY29tcG9uZW50JztcbmltcG9ydCB7IE56U2lkZXJDb21wb25lbnQgfSBmcm9tICcuL256LXNpZGVyLmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogWyBOekxheW91dENvbXBvbmVudCwgTnpIZWFkZXJDb21wb25lbnQsIE56Q29udGVudENvbXBvbmVudCwgTnpGb290ZXJDb21wb25lbnQsIE56U2lkZXJDb21wb25lbnQgXSxcbiAgZXhwb3J0cyAgICAgOiBbIE56TGF5b3V0Q29tcG9uZW50LCBOekhlYWRlckNvbXBvbmVudCwgTnpDb250ZW50Q29tcG9uZW50LCBOekZvb3RlckNvbXBvbmVudCwgTnpTaWRlckNvbXBvbmVudCBdLFxuICBwcm92aWRlcnMgICA6IFsgTnpNYXRjaE1lZGlhU2VydmljZSBdLFxuICBpbXBvcnRzICAgICA6IFsgQ29tbW9uTW9kdWxlLCBOekljb25Nb2R1bGUgXVxufSlcbmV4cG9ydCBjbGFzcyBOekxheW91dE1vZHVsZSB7XG59XG4iLCJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBJbnB1dCxcbiAgTmdab25lLFxuICBSZW5kZXJlcjIsXG4gIFRlbXBsYXRlUmVmLFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRlYm91bmNlVGltZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgaXNFbXB0eSwgaXNOb3ROaWwgfSBmcm9tICcuLi9jb3JlL3V0aWwvY2hlY2snO1xuaW1wb3J0IHsgdG9Cb29sZWFuIH0gZnJvbSAnLi4vY29yZS91dGlsL2NvbnZlcnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICAgICAgICAgIDogJ256LXNwaW4nLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgY2hhbmdlRGV0ZWN0aW9uICAgIDogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZVVybCAgICAgICAgOiAnLi9uei1zcGluLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBOelNwaW5Db21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgcHJpdmF0ZSBfdGlwOiBzdHJpbmc7XG4gIHByaXZhdGUgX2RlbGF5ID0gMDtcbiAgZWw6IEhUTUxFbGVtZW50ID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG5cbiAgYmFzZVNwaW5uaW5nJCA9IG5ldyBCZWhhdmlvclN1YmplY3QodHJ1ZSk7XG4gIHJlc3VsdFNwaW5uaW5nJDogT2JzZXJ2YWJsZTxib29sZWFuPiA9IHRoaXMuYmFzZVNwaW5uaW5nJC5hc09ic2VydmFibGUoKS5waXBlKGRlYm91bmNlVGltZSh0aGlzLm56RGVsYXkpKTtcbiAgQFZpZXdDaGlsZCgnY29udGFpbmVyRWxlbWVudCcpIGNvbnRhaW5lckVsZW1lbnQ6IEVsZW1lbnRSZWY7XG4gIEBWaWV3Q2hpbGQoJ25lc3RlZEVsZW1lbnQnKSBuZXN0ZWRFbGVtZW50OiBFbGVtZW50UmVmO1xuICBASW5wdXQoKSBuekluZGljYXRvcjogVGVtcGxhdGVSZWY8dm9pZD47XG4gIEBJbnB1dCgpIG56U2l6ZSA9ICdkZWZhdWx0JztcblxuICBASW5wdXQoKVxuICBzZXQgbnpEZWxheSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgaWYgKGlzTm90TmlsKHZhbHVlKSkge1xuICAgICAgdGhpcy5fZGVsYXkgPSB2YWx1ZTtcbiAgICAgIHRoaXMucmVzdWx0U3Bpbm5pbmckID0gdGhpcy5iYXNlU3Bpbm5pbmckLmFzT2JzZXJ2YWJsZSgpLnBpcGUoZGVib3VuY2VUaW1lKHRoaXMubnpEZWxheSkpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBuekRlbGF5KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2RlbGF5O1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56VGlwKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl90aXAgPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBuelRpcCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl90aXA7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpTcGlubmluZyh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuYmFzZVNwaW5uaW5nJC5uZXh0KHRvQm9vbGVhbih2YWx1ZSkpO1xuICB9XG5cbiAgY2hlY2tOZXN0ZWQoKTogdm9pZCB7XG4gICAgY29uc3QgY29udGFpbmVyRWxlbWVudCA9IHRoaXMuY29udGFpbmVyRWxlbWVudC5uYXRpdmVFbGVtZW50O1xuICAgIGNvbnN0IG5lc3RlZEVsZW1lbnQgPSB0aGlzLm5lc3RlZEVsZW1lbnQubmF0aXZlRWxlbWVudDtcbiAgICAvKiogbm8gd2F5IHRvIGRldGVjdCBlbXB0eSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8xMjUzMCAqKi9cbiAgICAvKiogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvbWF0ZXJpYWwyL2lzc3Vlcy8xMTI4MCAqKi9cbiAgICBpZiAoIWlzRW1wdHkoY29udGFpbmVyRWxlbWVudCkpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlU3R5bGUoY29udGFpbmVyRWxlbWVudCwgJ2Rpc3BsYXknKTtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5lbCwgJ2Rpc3BsYXknLCAnYmxvY2snKTtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3MobmVzdGVkRWxlbWVudCwgJ2FudC1zcGluLW5lc3RlZC1sb2FkaW5nJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUoY29udGFpbmVyRWxlbWVudCwgJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVTdHlsZSh0aGlzLmVsLCAnZGlzcGxheScpO1xuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyhuZXN0ZWRFbGVtZW50LCAnYW50LXNwaW4tbmVzdGVkLWxvYWRpbmcnKTtcbiAgICB9XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMiwgcHJpdmF0ZSB6b25lOiBOZ1pvbmUpIHtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmNoZWNrTmVzdGVkKCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IE9ic2VydmVyc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vYnNlcnZlcnMnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE56U3BpbkNvbXBvbmVudCB9IGZyb20gJy4vbnotc3Bpbi5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICBleHBvcnRzICAgICA6IFsgTnpTcGluQ29tcG9uZW50IF0sXG4gIGRlY2xhcmF0aW9uczogWyBOelNwaW5Db21wb25lbnQgXSxcbiAgaW1wb3J0cyAgICAgOiBbIENvbW1vbk1vZHVsZSwgT2JzZXJ2ZXJzTW9kdWxlIF1cbn0pXG5leHBvcnQgY2xhc3MgTnpTcGluTW9kdWxlIHtcbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICAgICAgOiAnbnotbGlzdC1pdGVtLW1ldGEnLFxuICB0ZW1wbGF0ZVVybCAgICAgICAgOiAnLi9uei1saXN0LWl0ZW0tbWV0YS5jb21wb25lbnQuaHRtbCcsXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxuICBob3N0ICAgICAgICAgICAgICAgOiB7XG4gICAgJ1tjbGFzcy5hbnQtbGlzdC1pdGVtLW1ldGFdJzogJ3RydWUnXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgTnpMaXN0SXRlbU1ldGFDb21wb25lbnQge1xuXG4gIGlzQXZhdGFyID0gZmFsc2U7XG4gIGF2YXRhclN0ciA9ICcnO1xuICBhdmF0YXJUcGw6IFRlbXBsYXRlUmVmPHZvaWQ+O1xuXG4gIEBJbnB1dCgpXG4gIHNldCBuekF2YXRhcih2YWx1ZTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD4pIHtcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZikge1xuICAgICAgdGhpcy5hdmF0YXJTdHIgPSBudWxsO1xuICAgICAgdGhpcy5hdmF0YXJUcGwgPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hdmF0YXJTdHIgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICB0aGlzLmlzQXZhdGFyID0gISF2YWx1ZTtcbiAgfVxuXG4gIGlzVGl0bGUgPSBmYWxzZTtcbiAgdGl0bGVTdHIgPSAnJztcbiAgdGl0bGVUcGw6IFRlbXBsYXRlUmVmPHZvaWQ+O1xuXG4gIEBJbnB1dCgpXG4gIHNldCBuelRpdGxlKHZhbHVlOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPikge1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmKSB7XG4gICAgICB0aGlzLnRpdGxlU3RyID0gbnVsbDtcbiAgICAgIHRoaXMudGl0bGVUcGwgPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50aXRsZVN0ciA9IHZhbHVlO1xuICAgIH1cblxuICAgIHRoaXMuaXNUaXRsZSA9ICEhdmFsdWU7XG4gIH1cblxuICBpc0Rlc2MgPSBmYWxzZTtcbiAgZGVzY1N0ciA9ICcnO1xuICBkZXNjVHBsOiBUZW1wbGF0ZVJlZjx2b2lkPjtcblxuICBASW5wdXQoKVxuICBzZXQgbnpEZXNjcmlwdGlvbih2YWx1ZTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD4pIHtcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZikge1xuICAgICAgdGhpcy5kZXNjU3RyID0gbnVsbDtcbiAgICAgIHRoaXMuZGVzY1RwbCA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRlc2NTdHIgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICB0aGlzLmlzRGVzYyA9ICEhdmFsdWU7XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgQ29udGVudENoaWxkcmVuLCBJbnB1dCwgUXVlcnlMaXN0LCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBOekxpc3RJdGVtTWV0YUNvbXBvbmVudCB9IGZyb20gJy4vbnotbGlzdC1pdGVtLW1ldGEuY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yICAgICAgICAgICA6ICduei1saXN0LWl0ZW0nLFxuICB0ZW1wbGF0ZVVybCAgICAgICAgOiAnLi9uei1saXN0LWl0ZW0uY29tcG9uZW50Lmh0bWwnLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgaG9zdCAgICAgICAgICAgICAgIDoge1xuICAgICdbY2xhc3MuYW50LWxpc3QtaXRlbV0nOiAndHJ1ZSdcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBOekxpc3RJdGVtQ29tcG9uZW50IHtcbiAgQElucHV0KCkgbnpBY3Rpb25zOiBBcnJheTxUZW1wbGF0ZVJlZjx2b2lkPj4gPSBbXTtcbiAgQENvbnRlbnRDaGlsZHJlbihOekxpc3RJdGVtTWV0YUNvbXBvbmVudCkgbWV0YXM6IFF1ZXJ5TGlzdDxOekxpc3RJdGVtTWV0YUNvbXBvbmVudD47XG5cbiAgaXNDb24gPSBmYWxzZTtcbiAgY29uU3RyID0gJyc7XG4gIGNvblRwbDogVGVtcGxhdGVSZWY8dm9pZD47XG5cbiAgQElucHV0KClcbiAgc2V0IG56Q29udGVudCh2YWx1ZTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD4pIHtcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZikge1xuICAgICAgdGhpcy5jb25TdHIgPSBudWxsO1xuICAgICAgdGhpcy5jb25UcGwgPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jb25TdHIgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICB0aGlzLmlzQ29uID0gISF2YWx1ZTtcbiAgfVxuXG4gIEBJbnB1dCgpIG56RXh0cmE6IFRlbXBsYXRlUmVmPHZvaWQ+O1xufVxuIiwiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBUZW1wbGF0ZVJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBOelVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UgfSBmcm9tICcuLi9jb3JlL3NlcnZpY2VzL3VwZGF0ZS1ob3N0LWNsYXNzLnNlcnZpY2UnO1xuaW1wb3J0IHsgSW5wdXRCb29sZWFuIH0gZnJvbSAnLi4vY29yZS91dGlsL2NvbnZlcnQnO1xuaW1wb3J0IHsgTnpJMThuU2VydmljZSB9IGZyb20gJy4uL2kxOG4vbnotaTE4bi5zZXJ2aWNlJztcblxuaW1wb3J0IHsgTGlzdFNpemUsIE56TGlzdEdyaWQgfSBmcm9tICcuL2ludGVyZmFjZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICAgICAgOiAnbnotbGlzdCcsXG4gIHRlbXBsYXRlVXJsICAgICAgICA6ICcuL256LWxpc3QuY29tcG9uZW50Lmh0bWwnLFxuICBwcm92aWRlcnMgICAgICAgICAgOiBbIE56VXBkYXRlSG9zdENsYXNzU2VydmljZSBdLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgY2hhbmdlRGV0ZWN0aW9uICAgIDogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBzdHlsZXMgICAgICAgICAgICAgOiBbIGBcbiAgICA6aG9zdCB7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICB9XG5cbiAgICBuei1zcGluIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIH1cbiAgYCBdXG59KVxuZXhwb3J0IGNsYXNzIE56TGlzdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55ICovXG4gIGxvY2FsZTogYW55ID0ge307XG4gIHByaXZhdGUgaTE4biQ6IFN1YnNjcmlwdGlvbjtcblxuICAvLyAjcmVnaW9uIGZpZWxkc1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gIEBJbnB1dCgpIG56RGF0YVNvdXJjZTogYW55W107XG5cbiAgQElucHV0KCkgQElucHV0Qm9vbGVhbigpIG56Qm9yZGVyZWQgPSBmYWxzZTtcblxuICBASW5wdXQoKSBuekdyaWQ6IE56TGlzdEdyaWQ7XG5cbiAgX2lzSGVhZGVyID0gZmFsc2U7XG4gIF9oZWFkZXIgPSAnJztcbiAgX2hlYWRlclRwbDogVGVtcGxhdGVSZWY8dm9pZD47XG5cbiAgQElucHV0KClcbiAgc2V0IG56SGVhZGVyKHZhbHVlOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPikge1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmKSB7XG4gICAgICB0aGlzLl9oZWFkZXIgPSBudWxsO1xuICAgICAgdGhpcy5faGVhZGVyVHBsID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2hlYWRlciA9IHZhbHVlO1xuICAgIH1cblxuICAgIHRoaXMuX2lzSGVhZGVyID0gISF2YWx1ZTtcbiAgfVxuXG4gIF9pc0Zvb3RlciA9IGZhbHNlO1xuICBfZm9vdGVyID0gJyc7XG4gIF9mb290ZXJUcGw6IFRlbXBsYXRlUmVmPHZvaWQ+O1xuXG4gIEBJbnB1dCgpXG4gIHNldCBuekZvb3Rlcih2YWx1ZTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD4pIHtcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZikge1xuICAgICAgdGhpcy5fZm9vdGVyID0gbnVsbDtcbiAgICAgIHRoaXMuX2Zvb3RlclRwbCA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9mb290ZXIgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICB0aGlzLl9pc0Zvb3RlciA9ICEhdmFsdWU7XG4gIH1cblxuICBASW5wdXQoKSBuekl0ZW1MYXlvdXQ6ICd2ZXJ0aWNhbCcgfCAnaG9yaXpvbnRhbCcgPSAnaG9yaXpvbnRhbCc7XG5cbiAgQElucHV0KCkgbnpSZW5kZXJJdGVtOiBUZW1wbGF0ZVJlZjx2b2lkPjtcblxuICBASW5wdXQoKSBASW5wdXRCb29sZWFuKCkgbnpMb2FkaW5nID0gZmFsc2U7XG5cbiAgQElucHV0KCkgbnpMb2FkTW9yZTogVGVtcGxhdGVSZWY8dm9pZD47XG5cbiAgQElucHV0KCkgbnpQYWdpbmF0aW9uOiBUZW1wbGF0ZVJlZjx2b2lkPjtcblxuICBASW5wdXQoKSBuelNpemU6IExpc3RTaXplID0gJ2RlZmF1bHQnO1xuXG4gIEBJbnB1dCgpIEBJbnB1dEJvb2xlYW4oKSBuelNwbGl0ID0gdHJ1ZTtcblxuICAvLyAjZW5kcmVnaW9uXG5cbiAgLy8gI3JlZ2lvbiBzdHlsZXNcblxuICBwcml2YXRlIHByZWZpeENscyA9ICdhbnQtbGlzdCc7XG5cbiAgcHJpdmF0ZSBfc2V0Q2xhc3NNYXAoKTogdm9pZCB7XG4gICAgY29uc3QgY2xhc3NNYXAgPSB7XG4gICAgICBbIHRoaXMucHJlZml4Q2xzIF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0cnVlLFxuICAgICAgWyBgJHt0aGlzLnByZWZpeENsc30tdmVydGljYWxgIF0gICAgICAgICAgICAgICAgIDogdGhpcy5uekl0ZW1MYXlvdXQgPT09ICd2ZXJ0aWNhbCcsXG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xzfS1sZ2AgXSAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLm56U2l6ZSA9PT0gJ2xhcmdlJyxcbiAgICAgIFsgYCR7dGhpcy5wcmVmaXhDbHN9LXNtYCBdICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMubnpTaXplID09PSAnc21hbGwnLFxuICAgICAgWyBgJHt0aGlzLnByZWZpeENsc30tc3BsaXRgIF0gICAgICAgICAgICAgICAgICAgIDogdGhpcy5uelNwbGl0LFxuICAgICAgWyBgJHt0aGlzLnByZWZpeENsc30tYm9yZGVyZWRgIF0gICAgICAgICAgICAgICAgIDogdGhpcy5uekJvcmRlcmVkLFxuICAgICAgWyBgJHt0aGlzLnByZWZpeENsc30tbG9hZGluZ2AgXSAgICAgICAgICAgICAgICAgIDogdGhpcy5uekxvYWRpbmcsXG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xzfS1ncmlkYCBdICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLm56R3JpZCxcbiAgICAgIFsgYCR7dGhpcy5wcmVmaXhDbHN9LXNvbWV0aGluZy1hZnRlci1sYXN0LWl0ZW1gIF06ICEhKHRoaXMubnpMb2FkTW9yZSB8fCB0aGlzLm56UGFnaW5hdGlvbiB8fCB0aGlzLl9pc0Zvb3RlcilcbiAgICB9O1xuICAgIHRoaXMudXBkYXRlSG9zdENsYXNzU2VydmljZS51cGRhdGVIb3N0Q2xhc3ModGhpcy5lbC5uYXRpdmVFbGVtZW50LCBjbGFzc01hcCk7XG4gIH1cblxuICAvLyAjZW5kcmVnaW9uXG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsIHByaXZhdGUgdXBkYXRlSG9zdENsYXNzU2VydmljZTogTnpVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlLCBwcml2YXRlIGkxOG46IE56STE4blNlcnZpY2UpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuaTE4biQgPSB0aGlzLmkxOG4ubG9jYWxlQ2hhbmdlLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLmxvY2FsZSA9IHRoaXMuaTE4bi5nZXRMb2NhbGVEYXRhKCdUYWJsZScpO1xuICAgICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgfSk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcygpOiB2b2lkIHtcbiAgICB0aGlzLl9zZXRDbGFzc01hcCgpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5pMThuJC51bnN1YnNjcmliZSgpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgTnpBdmF0YXJNb2R1bGUgfSBmcm9tICcuLi9hdmF0YXIvbnotYXZhdGFyLm1vZHVsZSc7XG5pbXBvcnQgeyBOekdyaWRNb2R1bGUgfSBmcm9tICcuLi9ncmlkL256LWdyaWQubW9kdWxlJztcbmltcG9ydCB7IE56STE4bk1vZHVsZSB9IGZyb20gJy4uL2kxOG4vbnotaTE4bi5tb2R1bGUnO1xuaW1wb3J0IHsgTnpTcGluTW9kdWxlIH0gZnJvbSAnLi4vc3Bpbi9uei1zcGluLm1vZHVsZSc7XG5cbmltcG9ydCB7IE56TGlzdEl0ZW1NZXRhQ29tcG9uZW50IH0gZnJvbSAnLi9uei1saXN0LWl0ZW0tbWV0YS5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpMaXN0SXRlbUNvbXBvbmVudCB9IGZyb20gJy4vbnotbGlzdC1pdGVtLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOekxpc3RDb21wb25lbnQgfSBmcm9tICcuL256LWxpc3QuY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgICBpbXBvcnRzOiAgICAgICAgWyBDb21tb25Nb2R1bGUsIE56U3Bpbk1vZHVsZSwgTnpHcmlkTW9kdWxlLCBOekF2YXRhck1vZHVsZSwgTnpJMThuTW9kdWxlIF0sXG4gICAgZGVjbGFyYXRpb25zOiAgIFsgTnpMaXN0Q29tcG9uZW50LCBOekxpc3RJdGVtQ29tcG9uZW50LCBOekxpc3RJdGVtTWV0YUNvbXBvbmVudCBdLFxuICAgIGV4cG9ydHM6ICAgICAgICBbIE56TGlzdENvbXBvbmVudCwgTnpMaXN0SXRlbUNvbXBvbmVudCwgTnpMaXN0SXRlbU1ldGFDb21wb25lbnQgXVxufSlcbmV4cG9ydCBjbGFzcyBOekxpc3RNb2R1bGUge1xufVxuIiwiaW1wb3J0IHsgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tuek1lbnRpb25TdWdnZXN0aW9uXSdcbn0pXG5leHBvcnQgY2xhc3MgTnpNZW50aW9uU3VnZ2VzdGlvbkRpcmVjdGl2ZSB7IH1cbiIsImltcG9ydCB7IGZvcndhcmRSZWYsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBFeGlzdGluZ1Byb3ZpZGVyLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBOR19WQUxVRV9BQ0NFU1NPUiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgTWVudGlvbiB9IGZyb20gJy4vbWVudGlvbi5jb21wb25lbnQnO1xuXG5leHBvcnQgY29uc3QgTlpfTUVOVElPTl9UUklHR0VSX0FDQ0VTU09SOiBFeGlzdGluZ1Byb3ZpZGVyID0ge1xuICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTnpNZW50aW9uVHJpZ2dlckRpcmVjdGl2ZSksXG4gIG11bHRpOiB0cnVlXG59O1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdpbnB1dFtuek1lbnRpb25UcmlnZ2VyXSwgdGV4dGFyZWFbbnpNZW50aW9uVHJpZ2dlcl0nLFxuICBwcm92aWRlcnM6IFtOWl9NRU5USU9OX1RSSUdHRVJfQUNDRVNTT1JdLFxuICBob3N0OiB7XG4gICAgJ2F1dG9jb21wbGV0ZSc6ICdvZmYnLFxuICAgICcoZm9jdXNpbiknICAgOiAnb25Gb2N1c2luLmVtaXQoKScsXG4gICAgJyhibHVyKScgICAgICA6ICdvbkJsdXIuZW1pdCgpJyxcbiAgICAnKGlucHV0KScgICAgIDogJ29uSW5wdXQuZW1pdCgkZXZlbnQpJyxcbiAgICAnKGtleWRvd24pJyAgIDogJ29uS2V5ZG93bi5lbWl0KCRldmVudCknLFxuICAgICcoY2xpY2spJyAgICAgOiAnb25DbGljay5lbWl0KCRldmVudCknXG4gIH1cbn0pXG5cbmV4cG9ydCBjbGFzcyBOek1lbnRpb25UcmlnZ2VyRGlyZWN0aXZlIGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE9uRGVzdHJveSB7XG5cbiAgb25DaGFuZ2U6ICh2YWx1ZTogc3RyaW5nKSA9PiB2b2lkO1xuICBvblRvdWNoZWQ6ICgpID0+IHZvaWQ7XG5cbiAgcmVhZG9ubHkgb25Gb2N1c2luOiBFdmVudEVtaXR0ZXI8dm9pZD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIHJlYWRvbmx5IG9uQmx1cjogRXZlbnRFbWl0dGVyPHZvaWQ+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICByZWFkb25seSBvbklucHV0OiBFdmVudEVtaXR0ZXI8S2V5Ym9hcmRFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIHJlYWRvbmx5IG9uS2V5ZG93bjogRXZlbnRFbWl0dGVyPEtleWJvYXJkRXZlbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICByZWFkb25seSBvbkNsaWNrOiBFdmVudEVtaXR0ZXI8TW91c2VFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIHZhbHVlOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocHVibGljIGVsOiBFbGVtZW50UmVmKSB7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLmNvbXBsZXRlRXZlbnRzKCk7XG4gIH1cblxuICBjb21wbGV0ZUV2ZW50cygpOiB2b2lkIHtcbiAgICB0aGlzLm9uRm9jdXNpbi5jb21wbGV0ZSgpO1xuICAgIHRoaXMub25CbHVyLmNvbXBsZXRlKCk7XG4gICAgdGhpcy5vbklucHV0LmNvbXBsZXRlKCk7XG4gICAgdGhpcy5vbktleWRvd24uY29tcGxldGUoKTtcbiAgICB0aGlzLm9uQ2xpY2suY29tcGxldGUoKTtcbiAgfVxuXG4gIGZvY3VzKGNhcmV0UG9zPzogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG4gICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LnNldFNlbGVjdGlvblJhbmdlKGNhcmV0UG9zLCBjYXJldFBvcyk7XG4gIH1cblxuICBpbnNlcnRNZW50aW9uKG1lbnRpb246IE1lbnRpb24pOiB2b2lkIHtcbiAgICBjb25zdCB2YWx1ZTogc3RyaW5nID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnZhbHVlO1xuICAgIGNvbnN0IGluc2VydFZhbHVlID0gbWVudGlvbi5tZW50aW9uLnRyaW0oKSArICcgJztcbiAgICBjb25zdCBuZXdWYWx1ZSA9IFtcbiAgICAgIHZhbHVlLnNsaWNlKDAsIG1lbnRpb24uc3RhcnRQb3MgKyAxKSxcbiAgICAgIGluc2VydFZhbHVlLFxuICAgICAgdmFsdWUuc2xpY2UobWVudGlvbi5lbmRQb3MsIHZhbHVlLmxlbmd0aClcbiAgICBdLmpvaW4oJycpO1xuICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgIHRoaXMuZm9jdXMobWVudGlvbi5zdGFydFBvcyArIGluc2VydFZhbHVlLmxlbmd0aCArIDEpO1xuICAgIHRoaXMub25DaGFuZ2UobmV3VmFsdWUpO1xuICAgIHRoaXMudmFsdWUgPSBuZXdWYWx1ZTtcbiAgfVxuXG4gIHdyaXRlVmFsdWUodmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LnZhbHVlID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC52YWx1ZSA9ICcnO1xuICAgIH1cbiAgfVxuXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46ICh2YWx1ZTogc3RyaW5nKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5vbkNoYW5nZSA9IGZuO1xuICB9XG5cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0aGlzLm9uVG91Y2hlZCA9IGZuO1xuICB9XG5cbn1cbiIsIlxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlZ0V4cChwcmVmaXg6IHN0cmluZyB8IHN0cmluZ1tdKTogUmVnRXhwIHtcbiAgY29uc3QgcHJlZml4QXJyYXkgPSBBcnJheS5pc0FycmF5KHByZWZpeCkgPyBwcmVmaXggOiBbcHJlZml4XTtcbiAgbGV0IHByZWZpeFRva2VuID0gcHJlZml4QXJyYXkuam9pbignJykucmVwbGFjZSgvKFxcJHxcXF4pL2csICdcXFxcJDEnKTtcblxuICBpZiAocHJlZml4QXJyYXkubGVuZ3RoID4gMSkge1xuICAgIHByZWZpeFRva2VuID0gYFske3ByZWZpeFRva2VufV1gO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBSZWdFeHAoYChcXFxcc3xeKSgke3ByZWZpeFRva2VufSlbXlxcXFxzXSpgLCAnZycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWVudGlvbnModmFsdWU6IHN0cmluZywgcHJlZml4OiBzdHJpbmcgfCBzdHJpbmdbXSA9ICdAJyk6IHN0cmluZ1tdIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgY29uc3QgcmVnZXggPSBnZXRSZWdFeHAocHJlZml4KTtcbiAgY29uc3QgbWVudGlvbnMgPSB2YWx1ZS5tYXRjaChyZWdleCk7XG4gIHJldHVybiBtZW50aW9ucyAhPT0gbnVsbCA/IG1lbnRpb25zLm1hcChlID0+IGUudHJpbSgpKSA6IFtdO1xufVxuIiwiLy8gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vY29tcG9uZW50L3RleHRhcmVhLWNhcmV0LXBvc2l0aW9uXG5cbi8vIFdlJ2xsIGNvcHkgdGhlIHByb3BlcnRpZXMgYmVsb3cgaW50byB0aGUgbWlycm9yIGRpdi5cbi8vIE5vdGUgdGhhdCBzb21lIGJyb3dzZXJzLCBzdWNoIGFzIEZpcmVmb3gsIGRvIG5vdCBjb25jYXRlbmF0ZSBwcm9wZXJ0aWVzXG4vLyBpbnRvIHRoZWlyIHNob3J0aGFuZCAoZS5nLiBwYWRkaW5nLXRvcCwgcGFkZGluZy1ib3R0b20gZXRjLiAtPiBwYWRkaW5nKSxcbi8vIHNvIHdlIGhhdmUgdG8gbGlzdCBldmVyeSBzaW5nbGUgcHJvcGVydHkgZXhwbGljaXRseS5cbmV4cG9ydCBjb25zdCBwcm9wZXJ0aWVzID0gW1xuICAnZGlyZWN0aW9uJywgIC8vIFJUTCBzdXBwb3J0XG4gICdib3hTaXppbmcnLFxuICAnd2lkdGgnLCAgLy8gb24gQ2hyb21lIGFuZCBJRSwgZXhjbHVkZSB0aGUgc2Nyb2xsYmFyLCBzbyB0aGUgbWlycm9yIGRpdiB3cmFwcyBleGFjdGx5IGFzIHRoZSB0ZXh0YXJlYSBkb2VzXG4gICdoZWlnaHQnLFxuICAnb3ZlcmZsb3dYJyxcbiAgJ292ZXJmbG93WScsICAvLyBjb3B5IHRoZSBzY3JvbGxiYXIgZm9yIElFXG5cbiAgJ2JvcmRlclRvcFdpZHRoJyxcbiAgJ2JvcmRlclJpZ2h0V2lkdGgnLFxuICAnYm9yZGVyQm90dG9tV2lkdGgnLFxuICAnYm9yZGVyTGVmdFdpZHRoJyxcbiAgJ2JvcmRlclN0eWxlJyxcblxuICAncGFkZGluZ1RvcCcsXG4gICdwYWRkaW5nUmlnaHQnLFxuICAncGFkZGluZ0JvdHRvbScsXG4gICdwYWRkaW5nTGVmdCcsXG5cbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2ZvbnRcbiAgJ2ZvbnRTdHlsZScsXG4gICdmb250VmFyaWFudCcsXG4gICdmb250V2VpZ2h0JyxcbiAgJ2ZvbnRTdHJldGNoJyxcbiAgJ2ZvbnRTaXplJyxcbiAgJ2ZvbnRTaXplQWRqdXN0JyxcbiAgJ2xpbmVIZWlnaHQnLFxuICAnZm9udEZhbWlseScsXG5cbiAgJ3RleHRBbGlnbicsXG4gICd0ZXh0VHJhbnNmb3JtJyxcbiAgJ3RleHRJbmRlbnQnLFxuICAndGV4dERlY29yYXRpb24nLCAgLy8gbWlnaHQgbm90IG1ha2UgYSBkaWZmZXJlbmNlLCBidXQgYmV0dGVyIGJlIHNhZmVcblxuICAnbGV0dGVyU3BhY2luZycsXG4gICd3b3JkU3BhY2luZycsXG5cbiAgJ3RhYlNpemUnLFxuICAnTW96VGFiU2l6ZSdcblxuXTtcblxuY29uc3QgaXNCcm93c2VyID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKTtcblxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuY29uc3QgaXNGaXJlZm94ID0gKGlzQnJvd3NlciAmJiAod2luZG93IGFzIGFueSkubW96SW5uZXJTY3JlZW5YICE9IG51bGwpO1xuXG5jb25zdCBfcGFyc2VJbnQgPSAoc3RyOiBzdHJpbmcpID0+IHBhcnNlSW50KHN0ciwgMTApO1xuXG5leHBvcnQgaW50ZXJmYWNlIENvb3JkaW5hdGVzIHtcbiAgdG9wOiBudW1iZXI7XG4gIGxlZnQ6IG51bWJlcjtcbiAgaGVpZ2h0OiBudW1iZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDYXJldENvb3JkaW5hdGVzKGVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQgfCBIVE1MVGV4dEFyZWFFbGVtZW50LCBwb3NpdGlvbjogbnVtYmVyLCBvcHRpb25zPzogeyBkZWJ1Zz86IGJvb2xlYW4gfSk6IENvb3JkaW5hdGVzIHtcbiAgaWYgKCFpc0Jyb3dzZXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3RleHRhcmVhLWNhcmV0LXBvc2l0aW9uI2dldENhcmV0Q29vcmRpbmF0ZXMgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIGluIGEgYnJvd3NlcicpO1xuICB9XG5cbiAgY29uc3QgZGVidWcgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVidWcgfHwgZmFsc2U7XG4gIGlmIChkZWJ1Zykge1xuICAgIGNvbnN0IGVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2lucHV0LXRleHRhcmVhLWNhcmV0LXBvc2l0aW9uLW1pcnJvci1kaXYnKTtcbiAgICBpZiAoZWwpIHsgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7IH1cbiAgfVxuXG4gIC8vIFRoZSBtaXJyb3IgZGl2IHdpbGwgcmVwbGljYXRlIHRoZSB0ZXh0YXJlYSdzIHN0eWxlXG4gIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkaXYuaWQgPSAnaW5wdXQtdGV4dGFyZWEtY2FyZXQtcG9zaXRpb24tbWlycm9yLWRpdic7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZGl2KTtcblxuICBjb25zdCBzdHlsZSA9IGRpdi5zdHlsZTtcblxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gIGNvbnN0IGNvbXB1dGVkID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUgPyB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSA6IChlbGVtZW50IGFzIGFueSkuY3VycmVudFN0eWxlOyAgLy8gY3VycmVudFN0eWxlIGZvciBJRSA8IDlcbiAgY29uc3QgaXNJbnB1dCA9IGVsZW1lbnQubm9kZU5hbWUgPT09ICdJTlBVVCc7XG5cbiAgLy8gRGVmYXVsdCB0ZXh0YXJlYSBzdHlsZXNcbiAgc3R5bGUud2hpdGVTcGFjZSA9ICdwcmUtd3JhcCc7XG4gIGlmICghaXNJbnB1dCkge1xuICAgIHN0eWxlLndvcmRXcmFwID0gJ2JyZWFrLXdvcmQnOyAvLyBvbmx5IGZvciB0ZXh0YXJlYS1zXG4gIH1cblxuICAvLyBQb3NpdGlvbiBvZmYtc2NyZWVuXG4gIHN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJzsgIC8vIHJlcXVpcmVkIHRvIHJldHVybiBjb29yZGluYXRlcyBwcm9wZXJseVxuICBpZiAoIWRlYnVnKSB7XG4gICAgc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICB9ICAvLyBub3QgJ2Rpc3BsYXk6IG5vbmUnIGJlY2F1c2Ugd2Ugd2FudCByZW5kZXJpbmdcblxuICAvLyBUcmFuc2ZlciB0aGUgZWxlbWVudCdzIHByb3BlcnRpZXMgdG8gdGhlIGRpdlxuICBwcm9wZXJ0aWVzLmZvckVhY2goKHByb3A6IHN0cmluZykgPT4ge1xuICAgIGlmIChpc0lucHV0ICYmIHByb3AgPT09ICdsaW5lSGVpZ2h0Jykge1xuICAgICAgLy8gU3BlY2lhbCBjYXNlIGZvciA8aW5wdXQ+cyBiZWNhdXNlIHRleHQgaXMgcmVuZGVyZWQgY2VudGVyZWQgYW5kIGxpbmUgaGVpZ2h0IG1heSBiZSAhPSBoZWlnaHRcbiAgICAgIHN0eWxlLmxpbmVIZWlnaHQgPSBjb21wdXRlZC5oZWlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlW3Byb3BdID0gY29tcHV0ZWRbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICBpZiAoaXNGaXJlZm94KSB7XG4gICAgLy8gRmlyZWZveCBsaWVzIGFib3V0IHRoZSBvdmVyZmxvdyBwcm9wZXJ0eSBmb3IgdGV4dGFyZWFzOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD05ODQyNzVcbiAgICBpZiAoZWxlbWVudC5zY3JvbGxIZWlnaHQgPiBfcGFyc2VJbnQoY29tcHV0ZWQuaGVpZ2h0KSkge1xuICAgICAgc3R5bGUub3ZlcmZsb3dZID0gJ3Njcm9sbCc7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7ICAvLyBmb3IgQ2hyb21lIHRvIG5vdCByZW5kZXIgYSBzY3JvbGxiYXI7IElFIGtlZXBzIG92ZXJmbG93WSA9ICdzY3JvbGwnXG4gIH1cblxuICBkaXYudGV4dENvbnRlbnQgPSBlbGVtZW50LnZhbHVlLnN1YnN0cmluZygwLCBwb3NpdGlvbik7XG4gIC8vIFRoZSBzZWNvbmQgc3BlY2lhbCBoYW5kbGluZyBmb3IgaW5wdXQgdHlwZT1cInRleHRcIiB2cyB0ZXh0YXJlYTpcbiAgLy8gc3BhY2VzIG5lZWQgdG8gYmUgcmVwbGFjZWQgd2l0aCBub24tYnJlYWtpbmcgc3BhY2VzIC0gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTM0MDIwMzUvMTI2OTAzN1xuICBpZiAoaXNJbnB1dCkge1xuICAgIGRpdi50ZXh0Q29udGVudCA9IGRpdi50ZXh0Q29udGVudC5yZXBsYWNlKC9cXHMvZywgJ1xcdTAwYTAnKTtcbiAgfVxuXG4gIGNvbnN0IHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gIC8vIFdyYXBwaW5nIG11c3QgYmUgcmVwbGljYXRlZCAqZXhhY3RseSosIGluY2x1ZGluZyB3aGVuIGEgbG9uZyB3b3JkIGdldHNcbiAgLy8gb250byB0aGUgbmV4dCBsaW5lLCB3aXRoIHdoaXRlc3BhY2UgYXQgdGhlIGVuZCBvZiB0aGUgbGluZSBiZWZvcmUgKCM3KS5cbiAgLy8gVGhlICAqb25seSogcmVsaWFibGUgd2F5IHRvIGRvIHRoYXQgaXMgdG8gY29weSB0aGUgKmVudGlyZSogcmVzdCBvZiB0aGVcbiAgLy8gdGV4dGFyZWEncyBjb250ZW50IGludG8gdGhlIDxzcGFuPiBjcmVhdGVkIGF0IHRoZSBjYXJldCBwb3NpdGlvbi5cbiAgLy8gRm9yIGlucHV0cywganVzdCAnLicgd291bGQgYmUgZW5vdWdoLCBidXQgbm8gbmVlZCB0byBib3RoZXIuXG4gIHNwYW4udGV4dENvbnRlbnQgPSBlbGVtZW50LnZhbHVlLnN1YnN0cmluZyhwb3NpdGlvbikgfHwgJy4nOyAgLy8gfHwgYmVjYXVzZSBhIGNvbXBsZXRlbHkgZW1wdHkgZmF1eCBzcGFuIGRvZXNuJ3QgcmVuZGVyIGF0IGFsbFxuICBkaXYuYXBwZW5kQ2hpbGQoc3Bhbik7XG5cbiAgY29uc3QgY29vcmRpbmF0ZXMgPSB7XG4gICAgdG9wOiBzcGFuLm9mZnNldFRvcCArIF9wYXJzZUludChjb21wdXRlZC5ib3JkZXJUb3BXaWR0aCksXG4gICAgbGVmdDogc3Bhbi5vZmZzZXRMZWZ0ICsgX3BhcnNlSW50KGNvbXB1dGVkLmJvcmRlckxlZnRXaWR0aCksXG4gICAgaGVpZ2h0OiBfcGFyc2VJbnQoY29tcHV0ZWQubGluZUhlaWdodClcbiAgfTtcblxuICBpZiAoZGVidWcpIHtcbiAgICBzcGFuLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcjZWVlJztcbiAgICBjcmVhdGVEZWJ1Z0VsZShlbGVtZW50LCBjb29yZGluYXRlcyk7XG4gIH0gZWxzZSB7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChkaXYpO1xuICB9XG5cbiAgcmV0dXJuIGNvb3JkaW5hdGVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRGVidWdFbGUoZWxlbWVudDogSFRNTElucHV0RWxlbWVudCB8IEhUTUxUZXh0QXJlYUVsZW1lbnQsIGNvb3JkaW5hdGVzOiBDb29yZGluYXRlcyk6IHZvaWQge1xuICBjb25zdCBmb250U2l6ZSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkuZ2V0UHJvcGVydHlWYWx1ZSgnZm9udC1zaXplJyk7XG4gIGNvbnN0IHJlY3Q6IEhUTUxTcGFuRWxlbWVudCA9IChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjREVCVUcnKSBhcyBIVE1MU3BhbkVsZW1lbnQpXG4gICAgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocmVjdCk7XG4gIHJlY3QuaWQgPSAnREVCVUcnO1xuICByZWN0LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgcmVjdC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAncmVkJztcbiAgcmVjdC5zdHlsZS5oZWlnaHQgPSBmb250U2l6ZTtcbiAgcmVjdC5zdHlsZS53aWR0aCA9ICcxcHgnO1xuICByZWN0LnN0eWxlLnRvcCA9IGAke2VsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wIC0gZWxlbWVudC5zY3JvbGxUb3AgKyB3aW5kb3cucGFnZVlPZmZzZXQgKyBjb29yZGluYXRlcy50b3B9cHhgO1xuICByZWN0LnN0eWxlLmxlZnQgPSBgJHtlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLSBlbGVtZW50LnNjcm9sbExlZnQgKyB3aW5kb3cucGFnZVhPZmZzZXQgKyBjb29yZGluYXRlcy5sZWZ0fXB4YDtcbiAgY29uc29sZS5sb2cocmVjdC5zdHlsZS50b3ApO1xuICBjb25zb2xlLmxvZyhyZWN0LnN0eWxlLmxlZnQpO1xufVxuIiwiaW1wb3J0IHsgRE9XTl9BUlJPVywgRU5URVIsIEVTQ0FQRSwgTEVGVF9BUlJPVywgUklHSFRfQVJST1csIFRBQiwgVVBfQVJST1cgfSBmcm9tICdAYW5ndWxhci9jZGsva2V5Y29kZXMnO1xuaW1wb3J0IHtcbiAgQ29ubmVjdGlvblBvc2l0aW9uUGFpcixcbiAgRmxleGlibGVDb25uZWN0ZWRQb3NpdGlvblN0cmF0ZWd5LFxuICBPdmVybGF5LFxuICBPdmVybGF5Q29uZmlnLFxuICBPdmVybGF5UmVmLFxuICBQb3NpdGlvblN0cmF0ZWd5XG59IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcbmltcG9ydCB7IFRlbXBsYXRlUG9ydGFsIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BvcnRhbCc7XG5pbXBvcnQge1xuICBBZnRlckNvbnRlbnRJbml0LFxuICBDb21wb25lbnQsXG4gIENvbnRlbnRDaGlsZCxcbiAgRXZlbnRFbWl0dGVyLFxuICBJbmplY3QsXG4gIElucHV0LFxuICBOZ1pvbmUsXG4gIE9uRGVzdHJveSxcbiAgT3B0aW9uYWwsXG4gIE91dHB1dCxcbiAgVGVtcGxhdGVSZWYsXG4gIFZpZXdDaGlsZCxcbiAgVmlld0NvbnRhaW5lclJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgZnJvbUV2ZW50LCBtZXJnZSwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IERFRkFVTFRfTUVOVElPTl9QT1NJVElPTlMgfSBmcm9tICcuLi9jb3JlL292ZXJsYXkvb3ZlcmxheS1wb3NpdGlvbi1tYXAnO1xuaW1wb3J0IHsgZ2V0TWVudGlvbnMgfSBmcm9tICcuLi9jb3JlL3V0aWwvZ2V0TWVudGlvbnMnO1xuaW1wb3J0IHsgZ2V0Q2FyZXRDb29yZGluYXRlcyB9IGZyb20gJy4uL2NvcmUvdXRpbC90ZXh0YXJlYS1jYXJldC1wb3NpdGlvbic7XG5cbmltcG9ydCB7IE56TWVudGlvblN1Z2dlc3Rpb25EaXJlY3RpdmUgfSBmcm9tICcuL21lbnRpb24tc3VnZ2VzdGlvbnMnO1xuaW1wb3J0IHsgTnpNZW50aW9uVHJpZ2dlckRpcmVjdGl2ZSB9IGZyb20gJy4vbWVudGlvbi10cmlnZ2VyJztcblxuZXhwb3J0IGludGVyZmFjZSBNZW50aW9uT25TZWFyY2hUeXBlcyB7XG4gIHZhbHVlOiBzdHJpbmc7XG4gIHByZWZpeDogc3RyaW5nO1xufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICAgICAgICAgIDogJ256LW1lbnRpb24nLFxuICB0ZW1wbGF0ZVVybCAgICAgICAgOiAnLi9tZW50aW9uLmNvbXBvbmVudC5odG1sJyxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG4gIHN0eWxlcyAgICAgICAgICAgICA6IFsgYFxuICAgIC5hbnQtbWVudGlvbi1kcm9wZG93biB7XG4gICAgICB0b3A6IDEwMCU7XG4gICAgICBsZWZ0OiAwO1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBtYXJnaW4tdG9wOiA0cHg7XG4gICAgICBtYXJnaW4tYm90dG9tOiA0cHg7XG4gICAgfVxuICBgIF1cbn0pXG5cbmV4cG9ydCBjbGFzcyBOek1lbnRpb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIEFmdGVyQ29udGVudEluaXQge1xuXG4gIEBPdXRwdXQoKSBuek9uU2VsZWN0OiBFdmVudEVtaXR0ZXI8c3RyaW5nIHwge30+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgbnpPblNlYXJjaENoYW5nZTogRXZlbnRFbWl0dGVyPE1lbnRpb25PblNlYXJjaFR5cGVzPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBASW5wdXQoKSBuelZhbHVlV2l0aDogKHZhbHVlOiBhbnkpID0+IHN0cmluZyA9IHZhbHVlID0+IHZhbHVlOyAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOm5vLWFueVxuICBASW5wdXQoKSBuelByZWZpeDogc3RyaW5nIHwgc3RyaW5nW10gPSAnQCc7XG4gIEBJbnB1dCgpIG56TG9hZGluZzogYm9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoKSBuek5vdEZvdW5kQ29udGVudDogc3RyaW5nID0gJ8OmwpfCoMOlwozCucOpwoXCjcOnwrvCk8Omwp7CnMOvwrzCjMOowr3Cu8OmwpXCssOnwqnCusOmwqDCvMOlwq7CjMOmwojCkMOowr7Ck8OlwoXCpSc7XG5cbiAgQElucHV0KClcbiAgc2V0IG56U3VnZ2VzdGlvbnModmFsdWU6IHN0cmluZ1tdKSB7XG4gICAgdGhpcy5fc3VnZ2VzdGlvbnMgPSB2YWx1ZTtcbiAgICBpZiAodGhpcy5pc09wZW4pIHtcbiAgICAgIHRoaXMucHJldmlvdXNWYWx1ZSA9IG51bGw7XG4gICAgICB0aGlzLmFjdGl2ZUluZGV4ID0gLTE7XG4gICAgICB0aGlzLnJlc2V0RHJvcGRvd24oZmFsc2UpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBuelN1Z2dlc3Rpb25zKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gdGhpcy5fc3VnZ2VzdGlvbnM7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpQbGFjZW1lbnQodmFsdWU6IE1lbnRpb25QbGFjZW1lbnQpIHtcbiAgICB0aGlzLl9wbGFjZW1lbnQgPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBuelBsYWNlbWVudCgpOiBNZW50aW9uUGxhY2VtZW50IHtcbiAgICByZXR1cm4gdGhpcy5fcGxhY2VtZW50O1xuICB9XG5cbiAgQENvbnRlbnRDaGlsZChOek1lbnRpb25UcmlnZ2VyRGlyZWN0aXZlKSB0cmlnZ2VyO1xuICBAVmlld0NoaWxkKFRlbXBsYXRlUmVmKSBzdWdnZXN0aW9uc1RlbXA7XG5cbiAgQENvbnRlbnRDaGlsZChOek1lbnRpb25TdWdnZXN0aW9uRGlyZWN0aXZlLCB7IHJlYWQ6IFRlbXBsYXRlUmVmIH0pXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgc2V0IHN1Z2dlc3Rpb25DaGlsZCh2YWx1ZTogVGVtcGxhdGVSZWY8eyAkaW1wbGljaXQ6IGFueSB9Pikge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdGhpcy5zdWdnZXN0aW9uVGVtcGxhdGUgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICBpc09wZW46IGJvb2xlYW4gPSBmYWxzZTtcbiAgZmlsdGVyZWRTdWdnZXN0aW9uczogc3RyaW5nW107XG4gIHN1Z2dlc3Rpb25UZW1wbGF0ZTogVGVtcGxhdGVSZWY8eyAkaW1wbGljaXQ6IGFueSB9PiB8IG51bGwgPSBudWxsOyAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOm5vLWFueVxuICBhY3RpdmVJbmRleDogbnVtYmVyID0gLTE7XG5cbiAgcHJpdmF0ZSBfc3VnZ2VzdGlvbnM6IHN0cmluZ1tdO1xuICBwcml2YXRlIF9wbGFjZW1lbnQ6IE1lbnRpb25QbGFjZW1lbnQgPSAnYm90dG9tJztcbiAgcHJpdmF0ZSBwcmV2aW91c1ZhbHVlOiBzdHJpbmc7XG4gIHByaXZhdGUgY3Vyc29yTWVudGlvbjogc3RyaW5nO1xuICBwcml2YXRlIGN1cnNvck1lbnRpb25TdGFydDogbnVtYmVyO1xuICBwcml2YXRlIGN1cnNvck1lbnRpb25FbmQ6IG51bWJlcjtcbiAgcHJpdmF0ZSBvdmVybGF5UmVmOiBPdmVybGF5UmVmIHwgbnVsbDtcbiAgcHJpdmF0ZSBwb3J0YWw6IFRlbXBsYXRlUG9ydGFsPHt9PjtcbiAgcHJpdmF0ZSBwb3NpdGlvblN0cmF0ZWd5OiBGbGV4aWJsZUNvbm5lY3RlZFBvc2l0aW9uU3RyYXRlZ3k7XG4gIHByaXZhdGUgb3ZlcmxheUJhY2tkcm9wQ2xpY2tTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcblxuICBwcml2YXRlIGdldCB0cmlnZ2VyTmF0aXZlRWxlbWVudCgpOiBIVE1MVGV4dEFyZWFFbGVtZW50IHwgSFRNTElucHV0RWxlbWVudCB7XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlci5lbC5uYXRpdmVFbGVtZW50O1xuICB9XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudDogYW55LCAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOm5vLWFueVxuICAgICAgICAgICAgICBwcml2YXRlIG5nWm9uZTogTmdab25lLFxuICAgICAgICAgICAgICBwcml2YXRlIG92ZXJsYXk6IE92ZXJsYXksXG4gICAgICAgICAgICAgIHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZikge1xuICB9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xuICAgIHRoaXMuYmluZFRyaWdnZXJFdmVudHMoKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuY2xvc2VEcm9wZG93bigpO1xuICB9XG5cbiAgY2xvc2VEcm9wZG93bigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5vdmVybGF5UmVmICYmIHRoaXMub3ZlcmxheVJlZi5oYXNBdHRhY2hlZCgpKSB7XG4gICAgICB0aGlzLm92ZXJsYXlSZWYuZGV0YWNoKCk7XG4gICAgICB0aGlzLm92ZXJsYXlCYWNrZHJvcENsaWNrU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLmlzT3BlbiA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIG9wZW5Ecm9wZG93bigpOiB2b2lkIHtcbiAgICB0aGlzLmF0dGFjaE92ZXJsYXkoKTtcbiAgICB0aGlzLmlzT3BlbiA9IHRydWU7XG4gIH1cblxuICBnZXRNZW50aW9ucygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIGdldE1lbnRpb25zKHRoaXMudHJpZ2dlci52YWx1ZSwgdGhpcy5uelByZWZpeCk7XG4gIH1cblxuICBzZWxlY3RTdWdnZXN0aW9uKHN1Z2dlc3Rpb246IHN0cmluZyB8IHt9KTogdm9pZCB7XG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLm56VmFsdWVXaXRoKHN1Z2dlc3Rpb24pO1xuICAgIHRoaXMudHJpZ2dlci5pbnNlcnRNZW50aW9uKHtcbiAgICAgIG1lbnRpb24gOiB2YWx1ZSxcbiAgICAgIHN0YXJ0UG9zOiB0aGlzLmN1cnNvck1lbnRpb25TdGFydCxcbiAgICAgIGVuZFBvcyAgOiB0aGlzLmN1cnNvck1lbnRpb25FbmRcbiAgICB9KTtcbiAgICB0aGlzLm56T25TZWxlY3QuZW1pdChzdWdnZXN0aW9uKTtcbiAgICB0aGlzLmNsb3NlRHJvcGRvd24oKTtcbiAgICB0aGlzLmFjdGl2ZUluZGV4ID0gLTE7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZUlucHV0KGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZCB7XG4gICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQgfCBIVE1MVGV4dEFyZWFFbGVtZW50O1xuICAgIHRoaXMudHJpZ2dlci5vbkNoYW5nZSh0YXJnZXQudmFsdWUpO1xuICAgIHRoaXMudHJpZ2dlci52YWx1ZSA9IHRhcmdldC52YWx1ZTtcbiAgICB0aGlzLnJlc2V0RHJvcGRvd24oKTtcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlS2V5ZG93bihldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgIGNvbnN0IGtleUNvZGUgPSBldmVudC5rZXlDb2RlO1xuICAgIGlmICh0aGlzLmlzT3BlbiAmJiBrZXlDb2RlID09PSBFTlRFUiAmJiB0aGlzLmFjdGl2ZUluZGV4ICE9PSAtMSAmJiB0aGlzLmZpbHRlcmVkU3VnZ2VzdGlvbnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLnNlbGVjdFN1Z2dlc3Rpb24odGhpcy5maWx0ZXJlZFN1Z2dlc3Rpb25zWyB0aGlzLmFjdGl2ZUluZGV4IF0pO1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9IGVsc2UgaWYgKGtleUNvZGUgPT09IExFRlRfQVJST1cgfHwga2V5Q29kZSA9PT0gUklHSFRfQVJST1cpIHtcbiAgICAgIHRoaXMucmVzZXREcm9wZG93bigpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfSBlbHNlIHtcblxuICAgICAgaWYgKHRoaXMuaXNPcGVuICYmIChrZXlDb2RlID09PSBUQUIgfHwga2V5Q29kZSA9PT0gRVNDQVBFKSkge1xuICAgICAgICB0aGlzLmNsb3NlRHJvcGRvd24oKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5pc09wZW4gJiYgKGtleUNvZGUgPT09IFVQX0FSUk9XKSkge1xuICAgICAgICB0aGlzLnNldFByZXZpb3VzSXRlbUFjdGl2ZSgpO1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuaXNPcGVuICYmIChrZXlDb2RlID09PSBET1dOX0FSUk9XKSkge1xuICAgICAgICB0aGlzLnNldE5leHRJdGVtQWN0aXZlKCk7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlQ2xpY2soKTogdm9pZCB7XG4gICAgdGhpcy5yZXNldERyb3Bkb3duKCk7XG4gIH1cblxuICBwcml2YXRlIGJpbmRUcmlnZ2VyRXZlbnRzKCk6IHZvaWQge1xuICAgIHRoaXMudHJpZ2dlci5vbklucHV0LnN1YnNjcmliZSgoZSkgPT4gdGhpcy5oYW5kbGVJbnB1dChlKSk7XG4gICAgdGhpcy50cmlnZ2VyLm9uS2V5ZG93bi5zdWJzY3JpYmUoKGUpID0+IHRoaXMuaGFuZGxlS2V5ZG93bihlKSk7XG4gICAgdGhpcy50cmlnZ2VyLm9uQ2xpY2suc3Vic2NyaWJlKCgpID0+IHRoaXMuaGFuZGxlQ2xpY2soKSk7XG4gIH1cblxuICBwcml2YXRlIHN1Z2dlc3Rpb25zRmlsdGVyKHZhbHVlOiBzdHJpbmcsIGVtaXQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBjb25zdCBzdWdnZXN0aW9ucyA9IHZhbHVlLnN1YnN0cmluZygxKTtcbiAgICBpZiAodGhpcy5wcmV2aW91c1ZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnByZXZpb3VzVmFsdWUgPSB2YWx1ZTtcbiAgICBpZiAoZW1pdCkge1xuICAgICAgdGhpcy5uek9uU2VhcmNoQ2hhbmdlLmVtaXQoe1xuICAgICAgICB2YWx1ZSA6IHRoaXMuY3Vyc29yTWVudGlvbi5zdWJzdHJpbmcoMSksXG4gICAgICAgIHByZWZpeDogdGhpcy5jdXJzb3JNZW50aW9uWyAwIF1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBzZWFyY2hWYWx1ZSA9IHN1Z2dlc3Rpb25zLnRvTG93ZXJDYXNlKCk7XG4gICAgdGhpcy5maWx0ZXJlZFN1Z2dlc3Rpb25zID0gdGhpcy5uelN1Z2dlc3Rpb25zXG4gICAgLmZpbHRlcihzdWdnZXN0aW9uID0+IHRoaXMubnpWYWx1ZVdpdGgoc3VnZ2VzdGlvbikudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhzZWFyY2hWYWx1ZSkpO1xuICB9XG5cbiAgcHJpdmF0ZSByZXNldERyb3Bkb3duKGVtaXQ6IGJvb2xlYW4gPSB0cnVlKTogdm9pZCB7XG4gICAgdGhpcy5yZXNldEN1cnNvck1lbnRpb24oKTtcbiAgICBpZiAodHlwZW9mIHRoaXMuY3Vyc29yTWVudGlvbiAhPT0gJ3N0cmluZycgfHwgIXRoaXMuY2FuT3BlbigpKSB7XG4gICAgICB0aGlzLmNsb3NlRHJvcGRvd24oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5zdWdnZXN0aW9uc0ZpbHRlcih0aGlzLmN1cnNvck1lbnRpb24sIGVtaXQpO1xuICAgIGNvbnN0IGFjdGl2ZUluZGV4ID0gdGhpcy5maWx0ZXJlZFN1Z2dlc3Rpb25zLmluZGV4T2YodGhpcy5jdXJzb3JNZW50aW9uLnN1YnN0cmluZygxKSk7XG4gICAgdGhpcy5hY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4ID49IDAgPyBhY3RpdmVJbmRleCA6IDA7XG4gICAgdGhpcy5vcGVuRHJvcGRvd24oKTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0TmV4dEl0ZW1BY3RpdmUoKTogdm9pZCB7XG4gICAgdGhpcy5hY3RpdmVJbmRleCA9IHRoaXMuYWN0aXZlSW5kZXggKyAxIDw9IHRoaXMuZmlsdGVyZWRTdWdnZXN0aW9ucy5sZW5ndGggLSAxXG4gICAgICA/IHRoaXMuYWN0aXZlSW5kZXggKyAxXG4gICAgICA6IDA7XG4gIH1cblxuICBwcml2YXRlIHNldFByZXZpb3VzSXRlbUFjdGl2ZSgpOiB2b2lkIHtcbiAgICB0aGlzLmFjdGl2ZUluZGV4ID0gdGhpcy5hY3RpdmVJbmRleCAtIDEgPCAwXG4gICAgICA/IHRoaXMuZmlsdGVyZWRTdWdnZXN0aW9ucy5sZW5ndGggLSAxXG4gICAgICA6IHRoaXMuYWN0aXZlSW5kZXggLSAxO1xuICB9XG5cbiAgcHJpdmF0ZSBjYW5PcGVuKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQgfCBIVE1MVGV4dEFyZWFFbGVtZW50ID0gdGhpcy50cmlnZ2VyTmF0aXZlRWxlbWVudDtcbiAgICByZXR1cm4gIWVsZW1lbnQucmVhZE9ubHkgJiYgIWVsZW1lbnQuZGlzYWJsZWQ7XG4gIH1cblxuICBwcml2YXRlIHJlc2V0Q3Vyc29yTWVudGlvbigpOiB2b2lkIHtcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMudHJpZ2dlck5hdGl2ZUVsZW1lbnQudmFsdWUucmVwbGFjZSgvW1xcclxcbl0vZywgJyAnKSB8fCAnJztcbiAgICBjb25zdCBzZWxlY3Rpb25TdGFydCA9IHRoaXMudHJpZ2dlck5hdGl2ZUVsZW1lbnQuc2VsZWN0aW9uU3RhcnQ7XG4gICAgY29uc3QgcHJlZml4ID0gdHlwZW9mIHRoaXMubnpQcmVmaXggPT09ICdzdHJpbmcnID8gWyB0aGlzLm56UHJlZml4IF0gOiB0aGlzLm56UHJlZml4O1xuICAgIGxldCBpID0gcHJlZml4Lmxlbmd0aDtcbiAgICB3aGlsZSAoaSA+PSAwKSB7XG4gICAgICBjb25zdCBzdGFydFBvcyA9IHZhbHVlLmxhc3RJbmRleE9mKHByZWZpeFsgaSBdLCBzZWxlY3Rpb25TdGFydCk7XG4gICAgICBjb25zdCBlbmRQb3MgPSB2YWx1ZS5pbmRleE9mKCcgJywgc2VsZWN0aW9uU3RhcnQpID4gLTEgPyB2YWx1ZS5pbmRleE9mKCcgJywgc2VsZWN0aW9uU3RhcnQpIDogdmFsdWUubGVuZ3RoO1xuICAgICAgY29uc3QgbWVudGlvbiA9IHZhbHVlLnN1YnN0cmluZyhzdGFydFBvcywgZW5kUG9zKTtcbiAgICAgIGlmICgoc3RhcnRQb3MgPiAwICYmIHZhbHVlWyBzdGFydFBvcyAtIDEgXSAhPT0gJyAnKVxuICAgICAgICB8fCBzdGFydFBvcyA8IDBcbiAgICAgICAgfHwgbWVudGlvbi5pbmNsdWRlcyhwcmVmaXhbIGkgXSwgMSlcbiAgICAgICAgfHwgbWVudGlvbi5pbmNsdWRlcygnICcpKSB7XG4gICAgICAgIHRoaXMuY3Vyc29yTWVudGlvbiA9IG51bGw7XG4gICAgICAgIHRoaXMuY3Vyc29yTWVudGlvblN0YXJ0ID0gLTE7XG4gICAgICAgIHRoaXMuY3Vyc29yTWVudGlvbkVuZCA9IC0xO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jdXJzb3JNZW50aW9uID0gbWVudGlvbjtcbiAgICAgICAgdGhpcy5jdXJzb3JNZW50aW9uU3RhcnQgPSBzdGFydFBvcztcbiAgICAgICAgdGhpcy5jdXJzb3JNZW50aW9uRW5kID0gZW5kUG9zO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpLS07XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVQb3NpdGlvbnMoKTogdm9pZCB7XG4gICAgY29uc3QgY29vcmRpbmF0ZXMgPSBnZXRDYXJldENvb3JkaW5hdGVzKHRoaXMudHJpZ2dlck5hdGl2ZUVsZW1lbnQsIHRoaXMuY3Vyc29yTWVudGlvblN0YXJ0KTtcbiAgICBjb25zdCB0b3AgPSBjb29yZGluYXRlcy50b3BcbiAgICAgIC0gdGhpcy50cmlnZ2VyTmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHRcbiAgICAgIC0gdGhpcy50cmlnZ2VyTmF0aXZlRWxlbWVudC5zY3JvbGxUb3BcbiAgICAgICsgKHRoaXMubnpQbGFjZW1lbnQgPT09ICdib3R0b20nID8gY29vcmRpbmF0ZXMuaGVpZ2h0IDogMCk7XG4gICAgY29uc3QgbGVmdCA9IGNvb3JkaW5hdGVzLmxlZnQgLSB0aGlzLnRyaWdnZXJOYXRpdmVFbGVtZW50LnNjcm9sbExlZnQ7XG4gICAgdGhpcy5wb3NpdGlvblN0cmF0ZWd5LndpdGhEZWZhdWx0T2Zmc2V0WChsZWZ0KS53aXRoRGVmYXVsdE9mZnNldFkodG9wKTtcbiAgICBpZiAodGhpcy5uelBsYWNlbWVudCA9PT0gJ2JvdHRvbScpIHtcbiAgICAgIHRoaXMucG9zaXRpb25TdHJhdGVneS53aXRoUG9zaXRpb25zKFsgREVGQVVMVF9NRU5USU9OX1BPU0lUSU9OU1sgMCBdIF0pO1xuICAgIH1cbiAgICBpZiAodGhpcy5uelBsYWNlbWVudCA9PT0gJ3RvcCcpIHtcbiAgICAgIHRoaXMucG9zaXRpb25TdHJhdGVneS53aXRoUG9zaXRpb25zKFsgREVGQVVMVF9NRU5USU9OX1BPU0lUSU9OU1sgMSBdIF0pO1xuICAgIH1cbiAgICB0aGlzLnBvc2l0aW9uU3RyYXRlZ3kuYXBwbHkoKTtcbiAgfVxuXG4gIHByaXZhdGUgc3Vic2NyaWJlT3ZlcmxheUJhY2tkcm9wQ2xpY2soKTogU3Vic2NyaXB0aW9uIHtcbiAgICByZXR1cm4gbWVyZ2UoXG4gICAgICBmcm9tRXZlbnQodGhpcy5kb2N1bWVudCwgJ2NsaWNrJyksXG4gICAgICBmcm9tRXZlbnQodGhpcy5kb2N1bWVudCwgJ3RvdWNoZW5kJylcbiAgICApXG4gICAgLnN1YnNjcmliZSgoZXZlbnQ6IE1vdXNlRXZlbnQgfCBUb3VjaEV2ZW50KSA9PiB7XG4gICAgICBjb25zdCBjbGlja1RhcmdldCA9IGV2ZW50LnRhcmdldCBhcyBIVE1MRWxlbWVudDtcbiAgICAgIGlmIChjbGlja1RhcmdldCAhPT0gdGhpcy50cmlnZ2VyLmVsLm5hdGl2ZUVsZW1lbnQgJiYgdGhpcy5pc09wZW4pIHtcbiAgICAgICAgdGhpcy5jbG9zZURyb3Bkb3duKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGF0dGFjaE92ZXJsYXkoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLm92ZXJsYXlSZWYpIHtcbiAgICAgIHRoaXMucG9ydGFsID0gbmV3IFRlbXBsYXRlUG9ydGFsKHRoaXMuc3VnZ2VzdGlvbnNUZW1wLCB0aGlzLnZpZXdDb250YWluZXJSZWYpO1xuICAgICAgdGhpcy5vdmVybGF5UmVmID0gdGhpcy5vdmVybGF5LmNyZWF0ZSh0aGlzLmdldE92ZXJsYXlDb25maWcoKSk7XG4gICAgfVxuICAgIGlmICh0aGlzLm92ZXJsYXlSZWYgJiYgIXRoaXMub3ZlcmxheVJlZi5oYXNBdHRhY2hlZCgpKSB7XG4gICAgICB0aGlzLm92ZXJsYXlSZWYuYXR0YWNoKHRoaXMucG9ydGFsKTtcbiAgICAgIHRoaXMub3ZlcmxheUJhY2tkcm9wQ2xpY2tTdWJzY3JpcHRpb24gPSB0aGlzLnN1YnNjcmliZU92ZXJsYXlCYWNrZHJvcENsaWNrKCk7XG4gICAgfVxuICAgIHRoaXMudXBkYXRlUG9zaXRpb25zKCk7XG4gIH1cblxuICBwcml2YXRlIGdldE92ZXJsYXlDb25maWcoKTogT3ZlcmxheUNvbmZpZyB7XG4gICAgcmV0dXJuIG5ldyBPdmVybGF5Q29uZmlnKHtcbiAgICAgIHBvc2l0aW9uU3RyYXRlZ3k6IHRoaXMuZ2V0T3ZlcmxheVBvc2l0aW9uKCksXG4gICAgICBzY3JvbGxTdHJhdGVneSAgOiB0aGlzLm92ZXJsYXkuc2Nyb2xsU3RyYXRlZ2llcy5yZXBvc2l0aW9uKClcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0T3ZlcmxheVBvc2l0aW9uKCk6IFBvc2l0aW9uU3RyYXRlZ3kge1xuICAgIGNvbnN0IHBvc2l0aW9ucyA9IFtcbiAgICAgIG5ldyBDb25uZWN0aW9uUG9zaXRpb25QYWlyKHsgb3JpZ2luWDogJ3N0YXJ0Jywgb3JpZ2luWTogJ2JvdHRvbScgfSwgeyBvdmVybGF5WDogJ3N0YXJ0Jywgb3ZlcmxheVk6ICd0b3AnIH0pLFxuICAgICAgbmV3IENvbm5lY3Rpb25Qb3NpdGlvblBhaXIoeyBvcmlnaW5YOiAnc3RhcnQnLCBvcmlnaW5ZOiAndG9wJyB9LCB7IG92ZXJsYXlYOiAnc3RhcnQnLCBvdmVybGF5WTogJ2JvdHRvbScgfSlcbiAgICBdO1xuICAgIHRoaXMucG9zaXRpb25TdHJhdGVneSA9IHRoaXMub3ZlcmxheS5wb3NpdGlvbigpXG4gICAgLmZsZXhpYmxlQ29ubmVjdGVkVG8odGhpcy50cmlnZ2VyLmVsKVxuICAgIC53aXRoUG9zaXRpb25zKHBvc2l0aW9ucylcbiAgICAud2l0aEZsZXhpYmxlRGltZW5zaW9ucyhmYWxzZSlcbiAgICAud2l0aFB1c2goZmFsc2UpO1xuICAgIHJldHVybiB0aGlzLnBvc2l0aW9uU3RyYXRlZ3k7XG4gIH1cblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1lbnRpb24ge1xuICBzdGFydFBvczogbnVtYmVyO1xuICBlbmRQb3M6IG51bWJlcjtcbiAgbWVudGlvbjogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBNZW50aW9uUGxhY2VtZW50ID0gJ3RvcCcgfCAnYm90dG9tJztcbiIsImltcG9ydCB7IE92ZXJsYXlNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jZGsvb3ZlcmxheSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgTnpJY29uTW9kdWxlIH0gZnJvbSAnLi4vaWNvbi9uei1pY29uLm1vZHVsZSc7XG5pbXBvcnQgeyBOek1lbnRpb25TdWdnZXN0aW9uRGlyZWN0aXZlIH0gZnJvbSAnLi9tZW50aW9uLXN1Z2dlc3Rpb25zJztcbmltcG9ydCB7IE56TWVudGlvblRyaWdnZXJEaXJlY3RpdmUgfSBmcm9tICcuL21lbnRpb24tdHJpZ2dlcic7XG5pbXBvcnQgeyBOek1lbnRpb25Db21wb25lbnQgfSBmcm9tICcuL21lbnRpb24uY29tcG9uZW50JztcblxuY29uc3QgQ09NUE9ORU5UUyA9IFtOek1lbnRpb25Db21wb25lbnQsIE56TWVudGlvblRyaWdnZXJEaXJlY3RpdmUsIE56TWVudGlvblN1Z2dlc3Rpb25EaXJlY3RpdmVdO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzICAgICA6IFsgQ29tbW9uTW9kdWxlLCBGb3Jtc01vZHVsZSwgT3ZlcmxheU1vZHVsZSwgTnpJY29uTW9kdWxlIF0sXG4gIGRlY2xhcmF0aW9uczogWyAuLi5DT01QT05FTlRTIF0sXG4gIGV4cG9ydHMgICAgIDogWyAuLi5DT01QT05FTlRTIF1cbn0pXG5leHBvcnQgY2xhc3MgTnpNZW50aW9uTW9kdWxlIHtcbn1cbiIsImltcG9ydCB7IEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTnpNZXNzYWdlQ29uZmlnIHtcbiAgLy8gRm9yIGFsbCBtZXNzYWdlcyBhcyBkZWZhdWx0IGNvbmZpZyAoY2FuIG92ZXJyaWRlIHdoZW4gZHluYW1pY2FsbHkgY3JlYXRlZClcbiAgbnpEdXJhdGlvbj86IG51bWJlcjtcbiAgbnpQYXVzZU9uSG92ZXI/OiBib29sZWFuO1xuICBuekFuaW1hdGU/OiBib29sZWFuO1xuICAvLyBGb3IgbWVzc2FnZSBjb250YWluZXIgb25seVxuICBuek1heFN0YWNrPzogbnVtYmVyO1xuICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55ICovXG4gIFtpbmRleDogc3RyaW5nXTogYW55O1xufVxuXG5leHBvcnQgY29uc3QgTlpfTUVTU0FHRV9ERUZBVUxUX0NPTkZJRyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxOek1lc3NhZ2VDb25maWc+KCdOWl9NRVNTQUdFX0RFRkFVTFRfQ09ORklHJyk7XG5cbmV4cG9ydCBjb25zdCBOWl9NRVNTQUdFX0NPTkZJRyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxOek1lc3NhZ2VDb25maWc+KCdOWl9NRVNTQUdFX0NPTkZJRycpO1xuXG5leHBvcnQgY29uc3QgTlpfTUVTU0FHRV9ERUZBVUxUX0NPTkZJR19QUk9WSURFUiA9IHtcbiAgcHJvdmlkZSA6IE5aX01FU1NBR0VfREVGQVVMVF9DT05GSUcsXG4gIHVzZVZhbHVlOiB7XG4gICAgbnpEdXJhdGlvbiAgICA6IDMwMDAsXG4gICAgbnpBbmltYXRlICAgICA6IHRydWUsXG4gICAgbnpQYXVzZU9uSG92ZXI6IHRydWUsXG4gICAgbnpNYXhTdGFjayAgICA6IDdcbiAgfVxufTtcbiIsImltcG9ydCB7IENvbXBvbmVudCwgSW5qZWN0LCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBOek1lc3NhZ2VDb25maWcsIE5aX01FU1NBR0VfQ09ORklHLCBOWl9NRVNTQUdFX0RFRkFVTFRfQ09ORklHIH0gZnJvbSAnLi9uei1tZXNzYWdlLWNvbmZpZyc7XG5pbXBvcnQgeyBOek1lc3NhZ2VEYXRhRmlsbGVkLCBOek1lc3NhZ2VEYXRhT3B0aW9ucyB9IGZyb20gJy4vbnotbWVzc2FnZS5kZWZpbml0aW9ucyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICAgICAgOiAnbnotbWVzc2FnZS1jb250YWluZXInLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgdGVtcGxhdGVVcmwgICAgICAgIDogJy4vbnotbWVzc2FnZS1jb250YWluZXIuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIE56TWVzc2FnZUNvbnRhaW5lckNvbXBvbmVudCB7XG4gIG1lc3NhZ2VzOiBOek1lc3NhZ2VEYXRhRmlsbGVkW10gPSBbXTtcbiAgY29uZmlnOiBOek1lc3NhZ2VDb25maWcgPSB7fTtcblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBASW5qZWN0KE5aX01FU1NBR0VfREVGQVVMVF9DT05GSUcpIGRlZmF1bHRDb25maWc6IE56TWVzc2FnZUNvbmZpZyxcbiAgICAgICAgICAgICAgQE9wdGlvbmFsKCkgQEluamVjdChOWl9NRVNTQUdFX0NPTkZJRykgY29uZmlnOiBOek1lc3NhZ2VDb25maWcpIHtcbiAgICB0aGlzLnNldENvbmZpZyh7IC4uLmRlZmF1bHRDb25maWcsIC4uLmNvbmZpZyB9KTtcbiAgfVxuXG4gIHNldENvbmZpZyhjb25maWc6IE56TWVzc2FnZUNvbmZpZyk6IHZvaWQge1xuICAgIHRoaXMuY29uZmlnID0geyAuLi50aGlzLmNvbmZpZywgLi4uY29uZmlnIH07XG4gIH1cblxuICAvLyBDcmVhdGUgYSBuZXcgbWVzc2FnZVxuICBjcmVhdGVNZXNzYWdlKG1lc3NhZ2U6IE56TWVzc2FnZURhdGFGaWxsZWQpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5tZXNzYWdlcy5sZW5ndGggPj0gdGhpcy5jb25maWcubnpNYXhTdGFjaykge1xuICAgICAgdGhpcy5tZXNzYWdlcy5zcGxpY2UoMCwgMSk7XG4gICAgfVxuICAgIG1lc3NhZ2Uub3B0aW9ucyA9IHRoaXMuX21lcmdlTWVzc2FnZU9wdGlvbnMobWVzc2FnZS5vcHRpb25zKTtcbiAgICB0aGlzLm1lc3NhZ2VzLnB1c2gobWVzc2FnZSk7XG4gIH1cblxuICAvLyBSZW1vdmUgYSBtZXNzYWdlIGJ5IG1lc3NhZ2VJZFxuICByZW1vdmVNZXNzYWdlKG1lc3NhZ2VJZDogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5tZXNzYWdlcy5zb21lKChtZXNzYWdlLCBpbmRleCkgPT4ge1xuICAgICAgaWYgKG1lc3NhZ2UubWVzc2FnZUlkID09PSBtZXNzYWdlSWQpIHtcbiAgICAgICAgdGhpcy5tZXNzYWdlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8vIFJlbW92ZSBhbGwgbWVzc2FnZXNcbiAgcmVtb3ZlTWVzc2FnZUFsbCgpOiB2b2lkIHtcbiAgICB0aGlzLm1lc3NhZ2VzID0gW107XG4gIH1cblxuICAvLyBNZXJnZSBkZWZhdWx0IG9wdGlvbnMgYW5kIGN1dG9tIG1lc3NhZ2Ugb3B0aW9uc1xuICBwcm90ZWN0ZWQgX21lcmdlTWVzc2FnZU9wdGlvbnMob3B0aW9uczogTnpNZXNzYWdlRGF0YU9wdGlvbnMpOiBOek1lc3NhZ2VEYXRhT3B0aW9ucyB7XG4gICAgY29uc3QgZGVmYXVsdE9wdGlvbnM6IE56TWVzc2FnZURhdGFPcHRpb25zID0ge1xuICAgICAgbnpEdXJhdGlvbiAgICA6IHRoaXMuY29uZmlnLm56RHVyYXRpb24sXG4gICAgICBuekFuaW1hdGUgICAgIDogdGhpcy5jb25maWcubnpBbmltYXRlLFxuICAgICAgbnpQYXVzZU9uSG92ZXI6IHRoaXMuY29uZmlnLm56UGF1c2VPbkhvdmVyXG4gICAgfTtcbiAgICByZXR1cm4geyAuLi5kZWZhdWx0T3B0aW9ucywgLi4ub3B0aW9ucyB9O1xuICB9XG59XG4iLCJpbXBvcnQge1xuICBhbmltYXRlLFxuICBzdGF0ZSxcbiAgc3R5bGUsXG4gIHRyYW5zaXRpb24sXG4gIHRyaWdnZXJcbn0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQge1xuICBDb21wb25lbnQsXG4gIElucHV0LFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgTnpNZXNzYWdlQ29udGFpbmVyQ29tcG9uZW50IH0gZnJvbSAnLi9uei1tZXNzYWdlLWNvbnRhaW5lci5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpNZXNzYWdlRGF0YUZpbGxlZCwgTnpNZXNzYWdlRGF0YU9wdGlvbnMgfSBmcm9tICcuL256LW1lc3NhZ2UuZGVmaW5pdGlvbnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICAgICAgICAgIDogJ256LW1lc3NhZ2UnLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgYW5pbWF0aW9ucyAgICAgICAgIDogW1xuICAgIHRyaWdnZXIoJ2VudGVyTGVhdmUnLCBbXG4gICAgICBzdGF0ZSgnZW50ZXInLCBzdHlsZSh7IG9wYWNpdHk6IDEsIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoMCknIH0pKSxcbiAgICAgIHRyYW5zaXRpb24oJyogPT4gZW50ZXInLCBbXG4gICAgICAgIHN0eWxlKHsgb3BhY2l0eTogMCwgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtNTAlKScgfSksXG4gICAgICAgIGFuaW1hdGUoJzEwMG1zIGxpbmVhcicpXG4gICAgICBdKSxcbiAgICAgIHN0YXRlKCdsZWF2ZScsIHN0eWxlKHsgb3BhY2l0eTogMCwgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtNTAlKScgfSkpLFxuICAgICAgdHJhbnNpdGlvbignKiA9PiBsZWF2ZScsIFtcbiAgICAgICAgc3R5bGUoeyBvcGFjaXR5OiAxLCB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKDApJyB9KSxcbiAgICAgICAgYW5pbWF0ZSgnMTAwbXMgbGluZWFyJylcbiAgICAgIF0pXG4gICAgXSlcbiAgXSxcbiAgdGVtcGxhdGVVcmwgICAgICAgICA6ICcuL256LW1lc3NhZ2UuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIE56TWVzc2FnZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcblxuICBASW5wdXQoKSBuek1lc3NhZ2U6IE56TWVzc2FnZURhdGFGaWxsZWQ7XG4gIEBJbnB1dCgpIG56SW5kZXg6IG51bWJlcjtcblxuICBwcm90ZWN0ZWQgX29wdGlvbnM6IE56TWVzc2FnZURhdGFPcHRpb25zOyAvLyBTaG9ydGN1dCByZWZlcmVuY2UgdG8gbnpNZXNzYWdlLm9wdGlvbnNcblxuICAvLyBGb3IgYXV0byBlcmFzaW5nKGRlc3Ryb3kpIHNlbGZcbiAgcHJpdmF0ZSBfYXV0b0VyYXNlOiBib29sZWFuOyAvLyBXaGV0aGVyIHJlY29yZCB0aW1lb3V0IHRvIGF1dG8gZGVzdHJveSBzZWxmXG4gIHByaXZhdGUgX2VyYXNlVGltZXI6IG51bWJlciA9IG51bGw7XG4gIHByaXZhdGUgX2VyYXNlVGltaW5nU3RhcnQ6IG51bWJlcjtcbiAgcHJpdmF0ZSBfZXJhc2VUVEw6IG51bWJlcjsgLy8gVGltZSB0byBsaXZlXG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfbWVzc2FnZUNvbnRhaW5lcjogTnpNZXNzYWdlQ29udGFpbmVyQ29tcG9uZW50KSB7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLl9vcHRpb25zID0gdGhpcy5uek1lc3NhZ2Uub3B0aW9ucztcblxuICAgIGlmICh0aGlzLl9vcHRpb25zLm56QW5pbWF0ZSkge1xuICAgICAgdGhpcy5uek1lc3NhZ2Uuc3RhdGUgPSAnZW50ZXInO1xuICAgIH1cblxuICAgIHRoaXMuX2F1dG9FcmFzZSA9IHRoaXMuX29wdGlvbnMubnpEdXJhdGlvbiA+IDA7XG5cbiAgICBpZiAodGhpcy5fYXV0b0VyYXNlKSB7XG4gICAgICB0aGlzLl9pbml0RXJhc2UoKTtcbiAgICAgIHRoaXMuX3N0YXJ0RXJhc2VUaW1lb3V0KCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX2F1dG9FcmFzZSkge1xuICAgICAgdGhpcy5fY2xlYXJFcmFzZVRpbWVvdXQoKTtcbiAgICB9XG4gIH1cblxuICBvbkVudGVyKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9hdXRvRXJhc2UgJiYgdGhpcy5fb3B0aW9ucy5uelBhdXNlT25Ib3Zlcikge1xuICAgICAgdGhpcy5fY2xlYXJFcmFzZVRpbWVvdXQoKTtcbiAgICAgIHRoaXMuX3VwZGF0ZVRUTCgpO1xuICAgIH1cbiAgfVxuXG4gIG9uTGVhdmUoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX2F1dG9FcmFzZSAmJiB0aGlzLl9vcHRpb25zLm56UGF1c2VPbkhvdmVyKSB7XG4gICAgICB0aGlzLl9zdGFydEVyYXNlVGltZW91dCgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFJlbW92ZSBzZWxmXG4gIHByb3RlY3RlZCBfZGVzdHJveSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fb3B0aW9ucy5uekFuaW1hdGUpIHtcbiAgICAgIHRoaXMubnpNZXNzYWdlLnN0YXRlID0gJ2xlYXZlJztcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5fbWVzc2FnZUNvbnRhaW5lci5yZW1vdmVNZXNzYWdlKHRoaXMubnpNZXNzYWdlLm1lc3NhZ2VJZCksIDIwMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX21lc3NhZ2VDb250YWluZXIucmVtb3ZlTWVzc2FnZSh0aGlzLm56TWVzc2FnZS5tZXNzYWdlSWQpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX2luaXRFcmFzZSgpOiB2b2lkIHtcbiAgICB0aGlzLl9lcmFzZVRUTCA9IHRoaXMuX29wdGlvbnMubnpEdXJhdGlvbjtcbiAgICB0aGlzLl9lcmFzZVRpbWluZ1N0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgfVxuXG4gIHByaXZhdGUgX3VwZGF0ZVRUTCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fYXV0b0VyYXNlKSB7XG4gICAgICB0aGlzLl9lcmFzZVRUTCAtPSBEYXRlLm5vdygpIC0gdGhpcy5fZXJhc2VUaW1pbmdTdGFydDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9zdGFydEVyYXNlVGltZW91dCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fZXJhc2VUVEwgPiAwKSB7XG4gICAgICB0aGlzLl9jbGVhckVyYXNlVGltZW91dCgpOyAvLyBUbyBwcmV2ZW50IGNhbGxpbmcgX3N0YXJ0RXJhc2VUaW1lb3V0KCkgbW9yZSB0aW1lcyB0byBjcmVhdGUgbW9yZSB0aW1lclxuICAgICAgdGhpcy5fZXJhc2VUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHRoaXMuX2Rlc3Ryb3koKSwgdGhpcy5fZXJhc2VUVEwpO1xuICAgICAgdGhpcy5fZXJhc2VUaW1pbmdTdGFydCA9IERhdGUubm93KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2Rlc3Ryb3koKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9jbGVhckVyYXNlVGltZW91dCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fZXJhc2VUaW1lciAhPT0gbnVsbCkge1xuICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLl9lcmFzZVRpbWVyKTtcbiAgICAgIHRoaXMuX2VyYXNlVGltZXIgPSBudWxsO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgT3ZlcmxheSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcbmltcG9ydCB7IENvbXBvbmVudFBvcnRhbCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9wb3J0YWwnO1xuaW1wb3J0IHsgQXBwbGljYXRpb25SZWYsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgRW1iZWRkZWRWaWV3UmVmLCBJbmplY3RhYmxlLCBJbmplY3RvciwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBOek1lc3NhZ2VDb25maWcgfSBmcm9tICcuL256LW1lc3NhZ2UtY29uZmlnJztcbmltcG9ydCB7IE56TWVzc2FnZUNvbnRhaW5lckNvbXBvbmVudCB9IGZyb20gJy4vbnotbWVzc2FnZS1jb250YWluZXIuY29tcG9uZW50JztcbmltcG9ydCB7IE56TWVzc2FnZURhdGEsIE56TWVzc2FnZURhdGFGaWxsZWQsIE56TWVzc2FnZURhdGFPcHRpb25zIH0gZnJvbSAnLi9uei1tZXNzYWdlLmRlZmluaXRpb25zJztcblxubGV0IGdsb2JhbENvdW50ZXIgPSAwOyAvLyBnbG9iYWwgSUQgY291bnRlciBmb3IgbWVzc2FnZXNcblxuZXhwb3J0IGNsYXNzIE56TWVzc2FnZUJhc2VTZXJ2aWNlPENvbnRhaW5lckNsYXNzIGV4dGVuZHMgTnpNZXNzYWdlQ29udGFpbmVyQ29tcG9uZW50LCBNZXNzYWdlRGF0YSwgTWVzc2FnZUNvbmZpZyBleHRlbmRzIE56TWVzc2FnZUNvbmZpZz4ge1xuICBwcm90ZWN0ZWQgX2NvbnRhaW5lcjogQ29udGFpbmVyQ2xhc3M7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBvdmVybGF5OiBPdmVybGF5LFxuICAgIHByaXZhdGUgY29udGFpbmVyQ2xhc3M6IFR5cGU8Q29udGFpbmVyQ2xhc3M+LFxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxuICAgIHByaXZhdGUgY2ZyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gICAgcHJpdmF0ZSBhcHBSZWY6IEFwcGxpY2F0aW9uUmVmLFxuICAgIHByaXZhdGUgX2lkUHJlZml4OiBzdHJpbmcgPSAnJykge1xuXG4gICAgLy8gdGhpcy5fY29udGFpbmVyID0gb3ZlcmxheS5jcmVhdGUoKS5hdHRhY2gobmV3IENvbXBvbmVudFBvcnRhbChjb250YWluZXJDbGFzcykpLmluc3RhbmNlO1xuICAgIHRoaXMuX2NvbnRhaW5lciA9IHRoaXMuY3JlYXRlQ29udGFpbmVyKCk7XG4gIH1cblxuICByZW1vdmUobWVzc2FnZUlkPzogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKG1lc3NhZ2VJZCkge1xuICAgICAgdGhpcy5fY29udGFpbmVyLnJlbW92ZU1lc3NhZ2UobWVzc2FnZUlkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fY29udGFpbmVyLnJlbW92ZU1lc3NhZ2VBbGwoKTtcbiAgICB9XG4gIH1cblxuICBjcmVhdGVNZXNzYWdlKG1lc3NhZ2U6IE1lc3NhZ2VEYXRhLCBvcHRpb25zPzogTnpNZXNzYWdlRGF0YU9wdGlvbnMpOiBOek1lc3NhZ2VEYXRhRmlsbGVkIHtcbiAgICAvLyBUT0RPOiBzcHJlYWQgb24gbGl0ZXJhbCBoYXMgYmVlbiBkaXNhbGxvdyBvbiBsYXRlc3QgcHJvcG9zYWxcbiAgICBjb25zdCByZXN1bHRNZXNzYWdlOiBOek1lc3NhZ2VEYXRhRmlsbGVkID0ge1xuICAgICAgLi4uKG1lc3NhZ2UgYXMge30pLCAuLi57XG4gICAgICAgIG1lc3NhZ2VJZDogdGhpcy5fZ2VuZXJhdGVNZXNzYWdlSWQoKSxcbiAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpXG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLl9jb250YWluZXIuY3JlYXRlTWVzc2FnZShyZXN1bHRNZXNzYWdlKTtcblxuICAgIHJldHVybiByZXN1bHRNZXNzYWdlO1xuICB9XG5cbiAgY29uZmlnKGNvbmZpZzogTWVzc2FnZUNvbmZpZyk6IHZvaWQge1xuICAgIHRoaXMuX2NvbnRhaW5lci5zZXRDb25maWcoY29uZmlnKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBfZ2VuZXJhdGVNZXNzYWdlSWQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5faWRQcmVmaXggKyBnbG9iYWxDb3VudGVyKys7XG4gIH1cblxuICAvLyBNYW51YWxseSBjcmVhdGluZyBjb250YWluZXIgZm9yIG92ZXJsYXkgdG8gYXZvaWQgbXVsdGktY2hlY2tpbmcgZXJyb3IsIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvaXNzdWVzLzM5MVxuICAvLyBOT1RFOiB3ZSBuZXZlciBjbGVhbiB1cCB0aGUgY29udGFpbmVyIGNvbXBvbmVudCBhbmQgaXQncyBvdmVybGF5IHJlc291cmNlcywgaWYgd2Ugc2hvdWxkLCB3ZSBuZWVkIHRvIGRvIGl0IGJ5IG91ciBvd24gY29kZXMuXG4gIHByaXZhdGUgY3JlYXRlQ29udGFpbmVyKCk6IENvbnRhaW5lckNsYXNzIHtcbiAgICBjb25zdCBmYWN0b3J5ID0gdGhpcy5jZnIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkodGhpcy5jb250YWluZXJDbGFzcyk7XG4gICAgY29uc3QgY29tcG9uZW50UmVmID0gZmFjdG9yeS5jcmVhdGUodGhpcy5pbmplY3Rvcik7IC8vIFVzZSByb290IGluamVjdG9yXG4gICAgY29tcG9uZW50UmVmLmNoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTsgLy8gSW1tZWRpYXRlbHkgY2hhbmdlIGRldGVjdGlvbiB0byBhdm9pZCBtdWx0aS1jaGVja2luZyBlcnJvclxuICAgIHRoaXMuYXBwUmVmLmF0dGFjaFZpZXcoY29tcG9uZW50UmVmLmhvc3RWaWV3KTsgLy8gTG9hZCB2aWV3IGludG8gYXBwIHJvb3RcbiAgICBjb25zdCBvdmVybGF5UGFuZSA9IHRoaXMub3ZlcmxheS5jcmVhdGUoKS5vdmVybGF5RWxlbWVudDtcbiAgICBvdmVybGF5UGFuZS5zdHlsZS56SW5kZXggPSAnMTAxMCc7IC8vIFBhdGNoaW5nOiBhc3NpZ24gdGhlIHNhbWUgekluZGV4IG9mIGFudC1tZXNzYWdlIHRvIGl0J3MgcGFyZW50IG92ZXJsYXkgcGFuZWwsIHRvIHRoZSBhbnQtbWVzc2FnZSdzIHppbmRleCB3b3JrLlxuICAgIG92ZXJsYXlQYW5lLmFwcGVuZENoaWxkKChjb21wb25lbnRSZWYuaG9zdFZpZXcgYXMgRW1iZWRkZWRWaWV3UmVmPHt9Pikucm9vdE5vZGVzWyAwIF0gYXMgSFRNTEVsZW1lbnQpO1xuXG4gICAgcmV0dXJuIGNvbXBvbmVudFJlZi5pbnN0YW5jZTtcbiAgfVxufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBOek1lc3NhZ2VTZXJ2aWNlIGV4dGVuZHMgTnpNZXNzYWdlQmFzZVNlcnZpY2U8TnpNZXNzYWdlQ29udGFpbmVyQ29tcG9uZW50LCBOek1lc3NhZ2VEYXRhLCBOek1lc3NhZ2VDb25maWc+IHtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBvdmVybGF5OiBPdmVybGF5LFxuICAgIGluamVjdG9yOiBJbmplY3RvcixcbiAgICBjZnI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICBhcHBSZWY6IEFwcGxpY2F0aW9uUmVmKSB7XG5cbiAgICBzdXBlcihvdmVybGF5LCBOek1lc3NhZ2VDb250YWluZXJDb21wb25lbnQsIGluamVjdG9yLCBjZnIsIGFwcFJlZiwgJ21lc3NhZ2UtJyk7XG4gIH1cblxuICAvLyBTaG9ydGN1dCBtZXRob2RzXG4gIHN1Y2Nlc3MoY29udGVudDogc3RyaW5nLCBvcHRpb25zPzogTnpNZXNzYWdlRGF0YU9wdGlvbnMpOiBOek1lc3NhZ2VEYXRhRmlsbGVkIHtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVNZXNzYWdlKHsgdHlwZTogJ3N1Y2Nlc3MnLCBjb250ZW50IH0sIG9wdGlvbnMpO1xuICB9XG5cbiAgZXJyb3IoY29udGVudDogc3RyaW5nLCBvcHRpb25zPzogTnpNZXNzYWdlRGF0YU9wdGlvbnMpOiBOek1lc3NhZ2VEYXRhRmlsbGVkIHtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVNZXNzYWdlKHsgdHlwZTogJ2Vycm9yJywgY29udGVudCB9LCBvcHRpb25zKTtcbiAgfVxuXG4gIGluZm8oY29udGVudDogc3RyaW5nLCBvcHRpb25zPzogTnpNZXNzYWdlRGF0YU9wdGlvbnMpOiBOek1lc3NhZ2VEYXRhRmlsbGVkIHtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVNZXNzYWdlKHsgdHlwZTogJ2luZm8nLCBjb250ZW50IH0sIG9wdGlvbnMpO1xuICB9XG5cbiAgd2FybmluZyhjb250ZW50OiBzdHJpbmcsIG9wdGlvbnM/OiBOek1lc3NhZ2VEYXRhT3B0aW9ucyk6IE56TWVzc2FnZURhdGFGaWxsZWQge1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZU1lc3NhZ2UoeyB0eXBlOiAnd2FybmluZycsIGNvbnRlbnQgfSwgb3B0aW9ucyk7XG4gIH1cblxuICBsb2FkaW5nKGNvbnRlbnQ6IHN0cmluZywgb3B0aW9ucz86IE56TWVzc2FnZURhdGFPcHRpb25zKTogTnpNZXNzYWdlRGF0YUZpbGxlZCB7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlTWVzc2FnZSh7IHR5cGU6ICdsb2FkaW5nJywgY29udGVudCB9LCBvcHRpb25zKTtcbiAgfVxuXG4gIGNyZWF0ZSh0eXBlOiAnc3VjY2VzcycgfCAnaW5mbycgfCAnd2FybmluZycgfCAnZXJyb3InIHwgJ2xvYWRpbmcnIHwgc3RyaW5nLCBjb250ZW50OiBzdHJpbmcsIG9wdGlvbnM/OiBOek1lc3NhZ2VEYXRhT3B0aW9ucyk6IE56TWVzc2FnZURhdGFGaWxsZWQge1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZU1lc3NhZ2UoeyB0eXBlLCBjb250ZW50IH0sIG9wdGlvbnMpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBPdmVybGF5TW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOekljb25Nb2R1bGUgfSBmcm9tICcuLi9pY29uL256LWljb24ubW9kdWxlJztcblxuaW1wb3J0IHsgTlpfTUVTU0FHRV9ERUZBVUxUX0NPTkZJR19QUk9WSURFUiB9IGZyb20gJy4vbnotbWVzc2FnZS1jb25maWcnO1xuaW1wb3J0IHsgTnpNZXNzYWdlQ29udGFpbmVyQ29tcG9uZW50IH0gZnJvbSAnLi9uei1tZXNzYWdlLWNvbnRhaW5lci5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpNZXNzYWdlQ29tcG9uZW50IH0gZnJvbSAnLi9uei1tZXNzYWdlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOek1lc3NhZ2VTZXJ2aWNlIH0gZnJvbSAnLi9uei1tZXNzYWdlLnNlcnZpY2UnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzICAgICAgICA6IFsgQ29tbW9uTW9kdWxlLCBPdmVybGF5TW9kdWxlLCBOekljb25Nb2R1bGUgXSxcbiAgZGVjbGFyYXRpb25zICAgOiBbIE56TWVzc2FnZUNvbnRhaW5lckNvbXBvbmVudCwgTnpNZXNzYWdlQ29tcG9uZW50IF0sXG4gIHByb3ZpZGVycyAgICAgIDogWyBOWl9NRVNTQUdFX0RFRkFVTFRfQ09ORklHX1BST1ZJREVSLCBOek1lc3NhZ2VTZXJ2aWNlIF0sXG4gIGVudHJ5Q29tcG9uZW50czogWyBOek1lc3NhZ2VDb250YWluZXJDb21wb25lbnQgXVxufSlcbmV4cG9ydCBjbGFzcyBOek1lc3NhZ2VNb2R1bGUge1xufVxuIiwiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AUGlwZSh7XG4gIG5hbWU6ICd0b0Nzc1VuaXQnXG59KVxuXG5leHBvcnQgY2xhc3MgQ3NzVW5pdFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKHZhbHVlOiBudW1iZXIgfCBzdHJpbmcsIGRlZmF1bHRVbml0OiBzdHJpbmcgPSAncHgnKTogc3RyaW5nIHtcbiAgICBjb25zdCBmb3JtYXR0ZWQgPSArdmFsdWU7IC8vIGZvcmNlIGNvbnZlcnRcbiAgICByZXR1cm4gaXNOYU4oZm9ybWF0dGVkKSA/IGAke3ZhbHVlfWAgOiBgJHtmb3JtYXR0ZWR9JHtkZWZhdWx0VW5pdH1gO1xuICB9XG59XG4iLCJpbXBvcnQgeyBJbmplY3RhYmxlLCBPcHRpb25hbCwgU2tpcFNlbGYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBOek1vZGFsUmVmIH0gZnJvbSAnLi9uei1tb2RhbC1yZWYuY2xhc3MnO1xuXG5pbnRlcmZhY2UgUmVnaXN0ZXJlZE1ldGEge1xuICBtb2RhbFJlZjogTnpNb2RhbFJlZjtcbiAgYWZ0ZXJPcGVuU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG4gIGFmdGVyQ2xvc2VTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE56TW9kYWxDb250cm9sU2VydmljZSB7XG4gIC8vIFRyYWNrIHNpbmdsZXRvbiBhZnRlckFsbENsb3NlIHRocm91Z2ggb3ZlciB0aGUgaW5qZWN0aW9uIHRyZWVcbiAgZ2V0IGFmdGVyQWxsQ2xvc2UoKTogU3ViamVjdDx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMucGFyZW50U2VydmljZSA/IHRoaXMucGFyZW50U2VydmljZS5hZnRlckFsbENsb3NlIDogdGhpcy5yb290QWZ0ZXJBbGxDbG9zZTtcbiAgfVxuXG4gIC8vIFRyYWNrIHNpbmdsZXRvbiBvcGVuTW9kYWxzIGFycmF5IHRocm91Z2ggb3ZlciB0aGUgaW5qZWN0aW9uIHRyZWVcbiAgZ2V0IG9wZW5Nb2RhbHMoKTogTnpNb2RhbFJlZltdIHtcbiAgICByZXR1cm4gdGhpcy5wYXJlbnRTZXJ2aWNlID8gdGhpcy5wYXJlbnRTZXJ2aWNlLm9wZW5Nb2RhbHMgOiB0aGlzLnJvb3RPcGVuTW9kYWxzO1xuICB9XG5cbiAgcHJpdmF0ZSByb290T3Blbk1vZGFsczogTnpNb2RhbFJlZltdID0gdGhpcy5wYXJlbnRTZXJ2aWNlID8gbnVsbCA6IFtdO1xuICBwcml2YXRlIHJvb3RBZnRlckFsbENsb3NlOiBTdWJqZWN0PHZvaWQ+ID0gdGhpcy5wYXJlbnRTZXJ2aWNlID8gbnVsbCA6IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cbiAgcHJpdmF0ZSByb290UmVnaXN0ZXJlZE1ldGFNYXA6IE1hcDxOek1vZGFsUmVmLCBSZWdpc3RlcmVkTWV0YT4gPSB0aGlzLnBhcmVudFNlcnZpY2UgPyBudWxsIDogbmV3IE1hcCgpO1xuXG4gIHByaXZhdGUgZ2V0IHJlZ2lzdGVyZWRNZXRhTWFwKCk6IE1hcDxOek1vZGFsUmVmLCBSZWdpc3RlcmVkTWV0YT4geyAvLyBSZWdpc3RlcmVkIG1vZGFsIGZvciBsYXRlciB1c2FnZVxuICAgIHJldHVybiB0aGlzLnBhcmVudFNlcnZpY2UgPyB0aGlzLnBhcmVudFNlcnZpY2UucmVnaXN0ZXJlZE1ldGFNYXAgOiB0aGlzLnJvb3RSZWdpc3RlcmVkTWV0YU1hcDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBPcHRpb25hbCgpIEBTa2lwU2VsZigpIHByaXZhdGUgcGFyZW50U2VydmljZTogTnpNb2RhbENvbnRyb2xTZXJ2aWNlKSB7XG4gIH1cblxuICAvLyBSZWdpc3RlciBhIG1vZGFsIHRvIGxpc3RlbiBpdHMgb3Blbi9jbG9zZVxuICByZWdpc3Rlck1vZGFsKG1vZGFsUmVmOiBOek1vZGFsUmVmKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmhhc1JlZ2lzdGVyZWQobW9kYWxSZWYpKSB7XG4gICAgICBjb25zdCBhZnRlck9wZW5TdWJzY3JpcHRpb24gPSBtb2RhbFJlZi5hZnRlck9wZW4uc3Vic2NyaWJlKCgpID0+IHRoaXMub3Blbk1vZGFscy5wdXNoKG1vZGFsUmVmKSk7XG4gICAgICBjb25zdCBhZnRlckNsb3NlU3Vic2NyaXB0aW9uID0gbW9kYWxSZWYuYWZ0ZXJDbG9zZS5zdWJzY3JpYmUoKCkgPT4gdGhpcy5yZW1vdmVPcGVuTW9kYWwobW9kYWxSZWYpKTtcblxuICAgICAgdGhpcy5yZWdpc3RlcmVkTWV0YU1hcC5zZXQobW9kYWxSZWYsIHsgbW9kYWxSZWYsIGFmdGVyT3BlblN1YnNjcmlwdGlvbiwgYWZ0ZXJDbG9zZVN1YnNjcmlwdGlvbiB9KTtcbiAgICB9XG4gIH1cblxuICAvLyBkZXJlZ2lzdGVyIG1vZGFsc1xuICBkZXJlZ2lzdGVyTW9kYWwobW9kYWxSZWY6IE56TW9kYWxSZWYpOiB2b2lkIHtcbiAgICBjb25zdCByZWdpc3RlcmVkTWV0YSA9IHRoaXMucmVnaXN0ZXJlZE1ldGFNYXAuZ2V0KG1vZGFsUmVmKTtcbiAgICBpZiAocmVnaXN0ZXJlZE1ldGEpIHtcbiAgICAgIC8vIFJlbW92ZSB0aGlzIG1vZGFsIGlmIGl0IGlzIHN0aWxsIGluIHRoZSBvcGVuZWQgbW9kYWwgbGlzdCAoTk9URTogaXQgbWF5IHRyaWdnZXIgXCJhZnRlckFsbENsb3NlXCIpXG4gICAgICB0aGlzLnJlbW92ZU9wZW5Nb2RhbChyZWdpc3RlcmVkTWV0YS5tb2RhbFJlZik7XG4gICAgICByZWdpc3RlcmVkTWV0YS5hZnRlck9wZW5TdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgIHJlZ2lzdGVyZWRNZXRhLmFmdGVyQ2xvc2VTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgIHRoaXMucmVnaXN0ZXJlZE1ldGFNYXAuZGVsZXRlKG1vZGFsUmVmKTtcbiAgICB9XG4gIH1cblxuICBoYXNSZWdpc3RlcmVkKG1vZGFsUmVmOiBOek1vZGFsUmVmKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMucmVnaXN0ZXJlZE1ldGFNYXAuaGFzKG1vZGFsUmVmKTtcbiAgfVxuXG4gIC8vIENsb3NlIGFsbCByZWdpc3RlcmVkIG9wZW5lZCBtb2RhbHNcbiAgY2xvc2VBbGwoKTogdm9pZCB7XG4gICAgbGV0IGkgPSB0aGlzLm9wZW5Nb2RhbHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdGhpcy5vcGVuTW9kYWxzWyBpIF0uY2xvc2UoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHJlbW92ZU9wZW5Nb2RhbChtb2RhbFJlZjogTnpNb2RhbFJlZik6IHZvaWQge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5vcGVuTW9kYWxzLmluZGV4T2YobW9kYWxSZWYpO1xuXG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHRoaXMub3Blbk1vZGFscy5zcGxpY2UoaW5kZXgsIDEpO1xuXG4gICAgICBpZiAoIXRoaXMub3Blbk1vZGFscy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5hZnRlckFsbENsb3NlLm5leHQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsImV4cG9ydCBpbnRlcmZhY2UgQ2xpY2tQb3NpdGlvbiB7XG4gIHg6IG51bWJlcjtcbiAgeTogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgTW9kYWxVdGlsIHtcbiAgcHJpdmF0ZSBsYXN0UG9zaXRpb246IENsaWNrUG9zaXRpb24gPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZG9jdW1lbnQ6IERvY3VtZW50KSB7XG4gICAgdGhpcy5saXN0ZW5Eb2N1bWVudENsaWNrKCk7XG4gIH1cblxuICBnZXRMYXN0Q2xpY2tQb3NpdGlvbigpOiBDbGlja1Bvc2l0aW9uIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMubGFzdFBvc2l0aW9uO1xuICB9XG5cbiAgbGlzdGVuRG9jdW1lbnRDbGljaygpOiB2b2lkIHtcbiAgICB0aGlzLmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICB0aGlzLmxhc3RQb3NpdGlvbiA9IHsgeDogZXZlbnQuY2xpZW50WCwgeTogZXZlbnQuY2xpZW50WSB9O1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBNb2RhbFV0aWwoZG9jdW1lbnQpO1xuIiwiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZXhwb3J0IGNvbnN0IE5aX01PREFMX0RFRkFVTFRfQ09ORklHOiBOek1vZGFsQ29uZmlnID0ge1xuICBhdXRvQm9keVBhZGRpbmc6IHRydWVcbn07XG5cbmV4cG9ydCBjb25zdCBOWl9NT0RBTF9DT05GSUcgPSBuZXcgSW5qZWN0aW9uVG9rZW48TnpNb2RhbENvbmZpZz4oJ056TW9kYWxDb25maWcnLCB7XG4gIHByb3ZpZGVkSW46ICdyb290JyxcbiAgZmFjdG9yeTogKCkgPT4gTlpfTU9EQUxfREVGQVVMVF9DT05GSUcgLy8gRGVmYXVsdCBjb25maWdcbn0pO1xuXG4vLy8vLy8vLy8vLy9cblxuZXhwb3J0IGludGVyZmFjZSBOek1vZGFsQ29uZmlnIHtcbiAgYXV0b0JvZHlQYWRkaW5nOiBib29sZWFuOyAvLyBXaGV0aGVyIGFkZCB0aGUgcGFkZGluZy1yaWdodCBhbmQgb3ZlcmZsb3cgdG8gYm9keSBhdXRvbWF0aWNhbGx5IHRvIHBsYXkgc21vb3RobHlcbn1cbiIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgTnpNb2RhbENvbXBvbmVudCB9IGZyb20gJy4vbnotbW9kYWwuY29tcG9uZW50JztcblxuLyoqXG4gKiBBUEkgY2xhc3MgdGhhdCBwdWJsaWMgdG8gdXNlcnMgdG8gaGFuZGxlIHRoZSBtb2RhbCBpbnN0YW5jZS5cbiAqIE56TW9kYWxSZWYgaXMgYWltIHRvIGF2b2lkIGFjY2Vzc2luZyB0byB0aGUgbW9kYWwgaW5zdGFuY2UgZGlyZWN0bHkgYnkgdXNlcnMuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBOek1vZGFsUmVmPFQgPSBhbnksIFIgPSBhbnk+IHsgLy8gdHNsaW50OmRpc2FibGUtbGluZTpuby1hbnlcbiAgYWJzdHJhY3QgYWZ0ZXJPcGVuOiBPYnNlcnZhYmxlPHZvaWQ+O1xuICBhYnN0cmFjdCBhZnRlckNsb3NlOiBPYnNlcnZhYmxlPFI+O1xuXG4gIGFic3RyYWN0IG9wZW4oKTogdm9pZDtcbiAgYWJzdHJhY3QgY2xvc2UocmVzdWx0PzogUik6IHZvaWQ7XG4gIGFic3RyYWN0IGRlc3Ryb3kocmVzdWx0PzogUik6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFRyaWdnZXIgdGhlIG56T25Pay9uek9uQ2FuY2VsIGJ5IG1hbnVhbFxuICAgKi9cbiAgYWJzdHJhY3QgdHJpZ2dlck9rKCk6IHZvaWQ7XG4gIGFic3RyYWN0IHRyaWdnZXJDYW5jZWwoKTogdm9pZDtcblxuICAvLyAvKipcbiAgLy8gICogUmV0dXJuIHRoZSBDb21wb25lbnRSZWYgb2YgbnpDb250ZW50IHdoZW4gc3BlY2lmeSBuekNvbnRlbnQgYXMgYSBDb21wb25lbnRcbiAgLy8gICogTm90ZTogdGhpcyBtZXRob2QgbWF5IHJldHVybiB1bmRlZmluZWQgaWYgdGhlIENvbXBvbmVudCBoYXMgbm90IHJlYWR5IHlldC4gKGl0IG9ubHkgYXZhaWxhYmxlIGFmdGVyIE1vZGFsJ3MgbmdPbkluaXQpXG4gIC8vICAqL1xuICAvLyBhYnN0cmFjdCBnZXRDb250ZW50Q29tcG9uZW50UmVmKCk6IENvbXBvbmVudFJlZjx7fT47XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgY29tcG9uZW50IGluc3RhbmNlIG9mIG56Q29udGVudCB3aGVuIHNwZWNpZnkgbnpDb250ZW50IGFzIGEgQ29tcG9uZW50XG4gICAqIE5vdGU6IHRoaXMgbWV0aG9kIG1heSByZXR1cm4gdW5kZWZpbmVkIGlmIHRoZSBDb21wb25lbnQgaGFzIG5vdCByZWFkeSB5ZXQuIChpdCBvbmx5IGF2YWlsYWJsZSBhZnRlciBNb2RhbCdzIG5nT25Jbml0KVxuICAgKi9cbiAgYWJzdHJhY3QgZ2V0Q29udGVudENvbXBvbmVudCgpOiBUO1xuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGRvbSBlbGVtZW50IG9mIHRoaXMgTW9kYWxcbiAgICovXG4gIGFic3RyYWN0IGdldEVsZW1lbnQoKTogSFRNTEVsZW1lbnQ7XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgaW5zdGFuY2Ugb2YgdGhlIE1vZGFsIGl0c2VsZlxuICAgKi9cbiAgYWJzdHJhY3QgZ2V0SW5zdGFuY2UoKTogTnpNb2RhbENvbXBvbmVudDtcbn1cbiIsImltcG9ydCB7IEZvY3VzVHJhcCwgRm9jdXNUcmFwRmFjdG9yeSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9hMTF5JztcbmltcG9ydCB7IE92ZXJsYXksIE92ZXJsYXlSZWYgfSBmcm9tICdAYW5ndWxhci9jZGsvb3ZlcmxheSc7XG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDb21wb25lbnQsXG4gIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgQ29tcG9uZW50UmVmLFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIEluamVjdCxcbiAgSW5qZWN0b3IsXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBPdXRwdXQsXG4gIFJlbmRlcmVyMixcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgVGVtcGxhdGVSZWYsXG4gIFR5cGUsXG4gIFZpZXdDaGlsZCxcbiAgVmlld0NvbnRhaW5lclJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBOek1lYXN1cmVTY3JvbGxiYXJTZXJ2aWNlIH0gZnJvbSAnLi4vY29yZS9zZXJ2aWNlcy9uei1tZWFzdXJlLXNjcm9sbGJhci5zZXJ2aWNlJztcblxuaW1wb3J0IHsgSW5wdXRCb29sZWFuIH0gZnJvbSAnLi4vY29yZS91dGlsL2NvbnZlcnQnO1xuaW1wb3J0IHsgTnpJMThuU2VydmljZSB9IGZyb20gJy4uL2kxOG4vbnotaTE4bi5zZXJ2aWNlJztcblxuaW1wb3J0IE1vZGFsVXRpbCBmcm9tICcuL21vZGFsLXV0aWwnO1xuaW1wb3J0IHsgTnpNb2RhbENvbmZpZywgTlpfTU9EQUxfQ09ORklHLCBOWl9NT0RBTF9ERUZBVUxUX0NPTkZJRyB9IGZyb20gJy4vbnotbW9kYWwtY29uZmlnJztcbmltcG9ydCB7IE56TW9kYWxDb250cm9sU2VydmljZSB9IGZyb20gJy4vbnotbW9kYWwtY29udHJvbC5zZXJ2aWNlJztcbmltcG9ydCB7IE56TW9kYWxSZWYgfSBmcm9tICcuL256LW1vZGFsLXJlZi5jbGFzcyc7XG5pbXBvcnQgeyBNb2RhbEJ1dHRvbk9wdGlvbnMsIE1vZGFsT3B0aW9ucywgTW9kYWxUeXBlLCBPbkNsaWNrQ2FsbGJhY2sgfSBmcm9tICcuL256LW1vZGFsLnR5cGUnO1xuXG5leHBvcnQgY29uc3QgTU9EQUxfQU5JTUFURV9EVVJBVElPTiA9IDIwMDsgLy8gRHVyYXRpb24gd2hlbiBwZXJmb3JtIGFuaW1hdGlvbnMgKG1zKVxuXG50eXBlIEFuaW1hdGlvblN0YXRlID0gJ2VudGVyJyB8ICdsZWF2ZScgfCBudWxsO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICA6ICduei1tb2RhbCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9uei1tb2RhbC5jb21wb25lbnQuaHRtbCdcbn0pXG5cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbmV4cG9ydCBjbGFzcyBOek1vZGFsQ29tcG9uZW50PFQgPSBhbnksIFIgPSBhbnk+IGV4dGVuZHMgTnpNb2RhbFJlZjxULCBSPiBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3ksIE1vZGFsT3B0aW9uczxUPiB7XG4gIHByaXZhdGUgdW5zdWJzY3JpYmUkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcbiAgcHJpdmF0ZSBwcmV2aW91c2x5Rm9jdXNlZEVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuICBwcml2YXRlIGZvY3VzVHJhcDogRm9jdXNUcmFwO1xuXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgbG9jYWxlOiBhbnkgPSB7fTtcbiAgQElucHV0KCkgbnpNb2RhbFR5cGU6IE1vZGFsVHlwZSA9ICdkZWZhdWx0JztcbiAgQElucHV0KCkgbnpDb250ZW50OiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx7fT4gfCBUeXBlPFQ+OyAvLyBbU1RBVElDXSBJZiBub3Qgc3BlY2lmaWVkLCB3aWxsIHVzZSA8bmctY29udGVudD5cbiAgQElucHV0KCkgbnpDb21wb25lbnRQYXJhbXM6IFQ7IC8vIFtTVEFUSUNdIE9OTFkgYXZhbGlhYmxlIHdoZW4gbnpDb250ZW50IGlzIGEgY29tcG9uZW50XG4gIEBJbnB1dCgpIG56Rm9vdGVyOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx7fT4gfCBBcnJheTxNb2RhbEJ1dHRvbk9wdGlvbnM8VD4+OyAvLyBbU1RBVElDXSBEZWZhdWx0IE1vZGFsIE9OTFlcbiAgQElucHV0KCkgbnpHZXRDb250YWluZXI6IEhUTUxFbGVtZW50IHwgT3ZlcmxheVJlZiB8ICgoKSA9PiBIVE1MRWxlbWVudCB8IE92ZXJsYXlSZWYpID0gKCkgPT4gdGhpcy5vdmVybGF5LmNyZWF0ZSgpOyAvLyBbU1RBVElDXVxuXG4gIEBJbnB1dCgpIEBJbnB1dEJvb2xlYW4oKSBuelZpc2libGU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgQE91dHB1dCgpIG56VmlzaWJsZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuICBASW5wdXQoKSBuelpJbmRleDogbnVtYmVyID0gMTAwMDtcbiAgQElucHV0KCkgbnpXaWR0aDogbnVtYmVyIHwgc3RyaW5nID0gNTIwO1xuICBASW5wdXQoKSBueldyYXBDbGFzc05hbWU6IHN0cmluZztcbiAgQElucHV0KCkgbnpDbGFzc05hbWU6IHN0cmluZztcbiAgQElucHV0KCkgbnpTdHlsZTogb2JqZWN0O1xuICBASW5wdXQoKSBuekljb25UeXBlOiBzdHJpbmcgPSAncXVlc3Rpb24tY2lyY2xlJzsgLy8gQ29uZmlybSBNb2RhbCBPTkxZXG4gIEBJbnB1dCgpIG56VGl0bGU6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHt9PjtcbiAgQElucHV0KCkgQElucHV0Qm9vbGVhbigpIG56Q2xvc2FibGU6IGJvb2xlYW4gPSB0cnVlO1xuICBASW5wdXQoKSBASW5wdXRCb29sZWFuKCkgbnpNYXNrOiBib29sZWFuID0gdHJ1ZTtcbiAgQElucHV0KCkgQElucHV0Qm9vbGVhbigpIG56TWFza0Nsb3NhYmxlOiBib29sZWFuID0gdHJ1ZTtcbiAgQElucHV0KCkgbnpNYXNrU3R5bGU6IG9iamVjdDtcbiAgQElucHV0KCkgbnpCb2R5U3R5bGU6IG9iamVjdDtcblxuICBAT3V0cHV0KCkgbnpBZnRlck9wZW4gPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7IC8vIFRyaWdnZXIgd2hlbiBtb2RhbCBvcGVuKHZpc2libGUpIGFmdGVyIGFuaW1hdGlvbnNcbiAgQE91dHB1dCgpIG56QWZ0ZXJDbG9zZSA9IG5ldyBFdmVudEVtaXR0ZXI8Uj4oKTsgLy8gVHJpZ2dlciB3aGVuIG1vZGFsIGxlYXZlLWFuaW1hdGlvbiBvdmVyXG4gIGdldCBhZnRlck9wZW4oKTogT2JzZXJ2YWJsZTx2b2lkPiB7IC8vIE9ic2VydmFibGUgYWxpYXMgZm9yIG56QWZ0ZXJPcGVuXG4gICAgcmV0dXJuIHRoaXMubnpBZnRlck9wZW4uYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICBnZXQgYWZ0ZXJDbG9zZSgpOiBPYnNlcnZhYmxlPFI+IHsgLy8gT2JzZXJ2YWJsZSBhbGlhcyBmb3IgbnpBZnRlckNsb3NlXG4gICAgcmV0dXJuIHRoaXMubnpBZnRlckNsb3NlLmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgLy8gLS0tIFByZWRlZmluZWQgT0sgJiBDYW5jZWwgYnV0dG9uc1xuICBASW5wdXQoKSBuek9rVGV4dDogc3RyaW5nO1xuXG4gIGdldCBva1RleHQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5uek9rVGV4dCB8fCB0aGlzLmxvY2FsZS5va1RleHQ7XG4gIH1cblxuICBASW5wdXQoKSBuek9rVHlwZSA9ICdwcmltYXJ5JztcbiAgQElucHV0KCkgQElucHV0Qm9vbGVhbigpIG56T2tMb2FkaW5nOiBib29sZWFuID0gZmFsc2U7XG4gIEBJbnB1dCgpIEBPdXRwdXQoKSBuek9uT2s6IEV2ZW50RW1pdHRlcjxUPiB8IE9uQ2xpY2tDYWxsYmFjazxUPiA9IG5ldyBFdmVudEVtaXR0ZXI8VD4oKTtcbiAgQFZpZXdDaGlsZCgnYXV0b0ZvY3VzQnV0dG9uT2snLCB7IHJlYWQ6IEVsZW1lbnRSZWYgfSkgYXV0b0ZvY3VzQnV0dG9uT2s6IEVsZW1lbnRSZWY7IC8vIE9ubHkgYWltIHRvIGZvY3VzIHRoZSBvayBidXR0b24gdGhhdCBuZWVkcyB0byBiZSBhdXRvIGZvY3VzZWRcbiAgQElucHV0KCkgbnpDYW5jZWxUZXh0OiBzdHJpbmc7XG5cbiAgZ2V0IGNhbmNlbFRleHQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5uekNhbmNlbFRleHQgfHwgdGhpcy5sb2NhbGUuY2FuY2VsVGV4dDtcbiAgfVxuXG4gIEBJbnB1dCgpIEBJbnB1dEJvb2xlYW4oKSBuekNhbmNlbExvYWRpbmc6IGJvb2xlYW4gPSBmYWxzZTtcbiAgQElucHV0KCkgQE91dHB1dCgpIG56T25DYW5jZWw6IEV2ZW50RW1pdHRlcjxUPiB8IE9uQ2xpY2tDYWxsYmFjazxUPiA9IG5ldyBFdmVudEVtaXR0ZXI8VD4oKTtcbiAgQFZpZXdDaGlsZCgnbW9kYWxDb250YWluZXInKSBtb2RhbENvbnRhaW5lcjogRWxlbWVudFJlZjtcbiAgQFZpZXdDaGlsZCgnYm9keUNvbnRhaW5lcicsIHsgcmVhZDogVmlld0NvbnRhaW5lclJlZiB9KSBib2R5Q29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmO1xuXG4gIGdldCBoaWRkZW4oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICF0aGlzLm56VmlzaWJsZSAmJiAhdGhpcy5hbmltYXRpb25TdGF0ZTtcbiAgfSAvLyBJbmRpY2F0ZSB3aGV0aGVyIHRoaXMgZGlhbG9nIHNob3VsZCBoaWRkZW5cbiAgbWFza0FuaW1hdGlvbkNsYXNzTWFwOiBvYmplY3Q7XG4gIG1vZGFsQW5pbWF0aW9uQ2xhc3NNYXA6IG9iamVjdDtcbiAgdHJhbnNmb3JtT3JpZ2luID0gJzBweCAwcHggMHB4JzsgLy8gVGhlIG9yaWdpbiBwb2ludCB0aGF0IGFuaW1hdGlvbiBiYXNlZCBvblxuXG4gIHByaXZhdGUgY29udGVudENvbXBvbmVudFJlZjogQ29tcG9uZW50UmVmPFQ+OyAvLyBIYW5kbGUgdGhlIHJlZmVyZW5jZSB3aGVuIHVzaW5nIG56Q29udGVudCBhcyBDb21wb25lbnRcbiAgcHJpdmF0ZSBhbmltYXRpb25TdGF0ZTogQW5pbWF0aW9uU3RhdGU7IC8vIEN1cnJlbnQgYW5pbWF0aW9uIHN0YXRlXG4gIHByaXZhdGUgY29udGFpbmVyOiBIVE1MRWxlbWVudCB8IE92ZXJsYXlSZWY7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBvdmVybGF5OiBPdmVybGF5LFxuICAgIHByaXZhdGUgaTE4bjogTnpJMThuU2VydmljZSxcbiAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgcHJpdmF0ZSBjZnI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgIHByaXZhdGUgbnpNZWFzdXJlU2Nyb2xsYmFyU2VydmljZTogTnpNZWFzdXJlU2Nyb2xsYmFyU2VydmljZSxcbiAgICBwcml2YXRlIG1vZGFsQ29udHJvbDogTnpNb2RhbENvbnRyb2xTZXJ2aWNlLFxuICAgIHByaXZhdGUgZm9jdXNUcmFwRmFjdG9yeTogRm9jdXNUcmFwRmFjdG9yeSxcbiAgICBASW5qZWN0KE5aX01PREFMX0NPTkZJRykgcHJpdmF0ZSBjb25maWc6IE56TW9kYWxDb25maWcsXG4gICAgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudDogYW55KSB7IC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8tYW55XG5cbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlRGVmYXVsdENvbmZpZyh0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmkxOG4ubG9jYWxlQ2hhbmdlLnBpcGUodGFrZVVudGlsKHRoaXMudW5zdWJzY3JpYmUkKSkuc3Vic2NyaWJlKCgpID0+IHRoaXMubG9jYWxlID0gdGhpcy5pMThuLmdldExvY2FsZURhdGEoJ01vZGFsJykpO1xuXG4gICAgaWYgKHRoaXMuaXNDb21wb25lbnQodGhpcy5uekNvbnRlbnQpKSB7XG4gICAgICB0aGlzLmNyZWF0ZUR5bmFtaWNDb21wb25lbnQodGhpcy5uekNvbnRlbnQgYXMgVHlwZTxUPik7IC8vIENyZWF0ZSBjb21wb25lbnQgYWxvbmcgd2l0aG91dCBWaWV3XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNNb2RhbEJ1dHRvbnModGhpcy5uekZvb3RlcikpIHsgLy8gU2V0dXAgZGVmYXVsdCBidXR0b24gb3B0aW9uc1xuICAgICAgdGhpcy5uekZvb3RlciA9IHRoaXMuZm9ybWF0TW9kYWxCdXR0b25zKHRoaXMubnpGb290ZXIgYXMgQXJyYXk8TW9kYWxCdXR0b25PcHRpb25zPFQ+Pik7XG4gICAgfVxuXG4gICAgLy8gUGxhY2UgdGhlIG1vZGFsIGRvbSB0byBlbHNld2hlcmVcbiAgICB0aGlzLmNvbnRhaW5lciA9IHR5cGVvZiB0aGlzLm56R2V0Q29udGFpbmVyID09PSAnZnVuY3Rpb24nID8gdGhpcy5uekdldENvbnRhaW5lcigpIDogdGhpcy5uekdldENvbnRhaW5lcjtcbiAgICBpZiAodGhpcy5jb250YWluZXIgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5jb250YWluZXIgaW5zdGFuY2VvZiBPdmVybGF5UmVmKSB7IC8vIE5PVEU6IG9ubHkgYXR0YWNoIHRoZSBkb20gdG8gb3ZlcmxheSwgdGhlIHZpZXcgY29udGFpbmVyIGlzIG5vdCBjaGFuZ2VkIGFjdHVhbGx5XG4gICAgICB0aGlzLmNvbnRhaW5lci5vdmVybGF5RWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCk7XG4gICAgfVxuXG4gICAgLy8gUmVnaXN0ZXIgbW9kYWwgd2hlbiBhZnRlck9wZW4vYWZ0ZXJDbG9zZSBpcyBzdGFibGVcbiAgICB0aGlzLm1vZGFsQ29udHJvbC5yZWdpc3Rlck1vZGFsKHRoaXMpO1xuICB9XG5cbiAgLy8gW05PVEVdIE5PVCBhdmFpbGFibGUgd2hlbiB1c2luZyBieSBzZXJ2aWNlIVxuICAvLyBCZWNhdXNlIG5nT25DaGFuZ2VzIG5ldmVyIGJlIGNhbGxlZCB3aGVuIHVzaW5nIGJ5IHNlcnZpY2UsXG4gIC8vIGhlcmUgd2UgY2FuJ3Qgc3VwcG9ydCBcIm56Q29udGVudFwiKENvbXBvbmVudCkgZXRjLiBhcyBpbnB1dHMgdGhhdCBpbml0aWFsaXplZCBkeW5hbWljYWxseS5cbiAgLy8gQlVUOiBVc2VyIGFsc28gY2FuIGNoYW5nZSBcIm56Q29udGVudFwiIGR5bmFtaWNhbGx5IHRvIHRyaWdnZXIgVUkgY2hhbmdlcyAocHJvdmlkZWQgeW91IGRvbid0IHVzZSBcYkNvbXBvbmVudCB0aGF0IG5lZWRzIGluaXRpYWxpemF0aW9ucylcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmIChjaGFuZ2VzLm56VmlzaWJsZSkge1xuICAgICAgdGhpcy5oYW5kbGVWaXNpYmxlU3RhdGVDaGFuZ2UodGhpcy5uelZpc2libGUsICFjaGFuZ2VzLm56VmlzaWJsZS5maXJzdENoYW5nZSk7IC8vIERvIG5vdCB0cmlnZ2VyIGFuaW1hdGlvbiB3aGlsZSBpbml0aWFsaXppbmdcbiAgICB9XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgLy8gSWYgdXNpbmcgQ29tcG9uZW50LCBpdCBpcyB0aGUgdGltZSB0byBhdHRhY2ggVmlldyB3aGlsZSBib2R5Q29udGFpbmVyIGlzIHJlYWR5XG4gICAgaWYgKHRoaXMuY29udGVudENvbXBvbmVudFJlZikge1xuICAgICAgdGhpcy5ib2R5Q29udGFpbmVyLmluc2VydCh0aGlzLmNvbnRlbnRDb21wb25lbnRSZWYuaG9zdFZpZXcpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmF1dG9Gb2N1c0J1dHRvbk9rKSB7XG4gICAgICAodGhpcy5hdXRvRm9jdXNCdXR0b25Pay5uYXRpdmVFbGVtZW50IGFzIEhUTUxCdXR0b25FbGVtZW50KS5mb2N1cygpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIC8vIENsb3NlIHNlbGYgYmVmb3JlIGRlc3RydWN0aW5nXG4gICAgdGhpcy5jaGFuZ2VWaXNpYmxlRnJvbUluc2lkZShmYWxzZSkudGhlbigoKSA9PiB7XG4gICAgICB0aGlzLm1vZGFsQ29udHJvbC5kZXJlZ2lzdGVyTW9kYWwodGhpcyk7XG5cbiAgICAgIGlmICh0aGlzLmNvbnRhaW5lciBpbnN0YW5jZW9mIE92ZXJsYXlSZWYpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXIuZGlzcG9zZSgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnVuc3Vic2NyaWJlJC5uZXh0KCk7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlJC5jb21wbGV0ZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgb3BlbigpOiB2b2lkIHtcbiAgICB0aGlzLmNoYW5nZVZpc2libGVGcm9tSW5zaWRlKHRydWUpO1xuICB9XG5cbiAgY2xvc2UocmVzdWx0PzogUik6IHZvaWQge1xuICAgIHRoaXMuY2hhbmdlVmlzaWJsZUZyb21JbnNpZGUoZmFsc2UsIHJlc3VsdCk7XG4gIH1cblxuICBkZXN0cm95KHJlc3VsdD86IFIpOiB2b2lkIHsgLy8gRGVzdHJveSBlcXVhbHMgQ2xvc2VcbiAgICB0aGlzLmNsb3NlKHJlc3VsdCk7XG4gIH1cblxuICB0cmlnZ2VyT2soKTogdm9pZCB7XG4gICAgdGhpcy5vbkNsaWNrT2tDYW5jZWwoJ29rJyk7XG4gIH1cblxuICB0cmlnZ2VyQ2FuY2VsKCk6IHZvaWQge1xuICAgIHRoaXMub25DbGlja09rQ2FuY2VsKCdjYW5jZWwnKTtcbiAgfVxuXG4gIGdldEluc3RhbmNlKCk6IE56TW9kYWxDb21wb25lbnQge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZ2V0Q29udGVudENvbXBvbmVudFJlZigpOiBDb21wb25lbnRSZWY8VD4ge1xuICAgIHJldHVybiB0aGlzLmNvbnRlbnRDb21wb25lbnRSZWY7XG4gIH1cblxuICBnZXRDb250ZW50Q29tcG9uZW50KCk6IFQge1xuICAgIHJldHVybiB0aGlzLmNvbnRlbnRDb21wb25lbnRSZWYgJiYgdGhpcy5jb250ZW50Q29tcG9uZW50UmVmLmluc3RhbmNlO1xuICB9XG5cbiAgZ2V0RWxlbWVudCgpOiBIVE1MRWxlbWVudCB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudFJlZiAmJiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcbiAgfVxuXG4gIG9uQ2xpY2tNYXNrKCRldmVudDogTW91c2VFdmVudCk6IHZvaWQge1xuICAgIGlmIChcbiAgICAgIHRoaXMubnpNYXNrICYmXG4gICAgICB0aGlzLm56TWFza0Nsb3NhYmxlICYmXG4gICAgICAoJGV2ZW50LnRhcmdldCBhcyBIVE1MRWxlbWVudCkuY2xhc3NMaXN0LmNvbnRhaW5zKCdhbnQtbW9kYWwtd3JhcCcpICYmXG4gICAgICB0aGlzLm56VmlzaWJsZVxuICAgICkge1xuICAgICAgdGhpcy5vbkNsaWNrT2tDYW5jZWwoJ2NhbmNlbCcpO1xuICAgIH1cbiAgfVxuXG4gIGlzTW9kYWxUeXBlKHR5cGU6IE1vZGFsVHlwZSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLm56TW9kYWxUeXBlID09PSB0eXBlO1xuICB9XG5cbiAgcHVibGljIG9uQ2xpY2tDbG9zZUJ0bigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5uelZpc2libGUpIHtcbiAgICAgIHRoaXMub25DbGlja09rQ2FuY2VsKCdjYW5jZWwnKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgb25DbGlja09rQ2FuY2VsKHR5cGU6ICdvaycgfCAnY2FuY2VsJyk6IHZvaWQge1xuICAgIGNvbnN0IHRyaWdnZXIgPSB7ICdvayc6IHRoaXMubnpPbk9rLCAnY2FuY2VsJzogdGhpcy5uek9uQ2FuY2VsIH1bIHR5cGUgXTtcbiAgICBjb25zdCBsb2FkaW5nS2V5ID0geyAnb2snOiAnbnpPa0xvYWRpbmcnLCAnY2FuY2VsJzogJ256Q2FuY2VsTG9hZGluZycgfVsgdHlwZSBdO1xuICAgIGlmICh0cmlnZ2VyIGluc3RhbmNlb2YgRXZlbnRFbWl0dGVyKSB7XG4gICAgICB0cmlnZ2VyLmVtaXQodGhpcy5nZXRDb250ZW50Q29tcG9uZW50KCkpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHRyaWdnZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHRyaWdnZXIodGhpcy5nZXRDb250ZW50Q29tcG9uZW50KCkpO1xuICAgICAgY29uc3QgY2FzZUNsb3NlID0gKGRvQ2xvc2U6IGJvb2xlYW4gfCB2b2lkIHwge30pID0+IChkb0Nsb3NlICE9PSBmYWxzZSkgJiYgdGhpcy5jbG9zZShkb0Nsb3NlIGFzIFIpOyAvLyBVc2VycyBjYW4gcmV0dXJuIFwiZmFsc2VcIiB0byBwcmV2ZW50IGNsb3NpbmcgYnkgZGVmYXVsdFxuICAgICAgaWYgKGlzUHJvbWlzZShyZXN1bHQpKSB7XG4gICAgICAgIHRoaXNbIGxvYWRpbmdLZXkgXSA9IHRydWU7XG4gICAgICAgIGNvbnN0IGhhbmRsZVRoZW4gPSAoZG9DbG9zZSkgPT4ge1xuICAgICAgICAgIHRoaXNbIGxvYWRpbmdLZXkgXSA9IGZhbHNlO1xuICAgICAgICAgIGNhc2VDbG9zZShkb0Nsb3NlKTtcbiAgICAgICAgfTtcbiAgICAgICAgKHJlc3VsdCBhcyBQcm9taXNlPHZvaWQ+KS50aGVuKGhhbmRsZVRoZW4pLmNhdGNoKGhhbmRsZVRoZW4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FzZUNsb3NlKHJlc3VsdCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGlzTm9uRW1wdHlTdHJpbmcodmFsdWU6IHt9KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUgIT09ICcnO1xuICB9XG5cbiAgcHVibGljIGlzVGVtcGxhdGVSZWYodmFsdWU6IHt9KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgVGVtcGxhdGVSZWY7XG4gIH1cblxuICBwdWJsaWMgaXNDb21wb25lbnQodmFsdWU6IHt9KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgVHlwZTtcbiAgfVxuXG4gIHB1YmxpYyBpc01vZGFsQnV0dG9ucyh2YWx1ZToge30pOiBib29sZWFuIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID4gMDtcbiAgfVxuXG4gIC8vIERvIHJlc3QgdGhpbmdzIHdoZW4gdmlzaWJsZSBzdGF0ZSBjaGFuZ2VkXG4gIHByaXZhdGUgaGFuZGxlVmlzaWJsZVN0YXRlQ2hhbmdlKHZpc2libGU6IGJvb2xlYW4sIGFuaW1hdGlvbjogYm9vbGVhbiA9IHRydWUsIGNsb3NlUmVzdWx0PzogUik6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICh2aXNpYmxlKSB7IC8vIEhpZGUgc2Nyb2xsYmFyIGF0IHRoZSBmaXJzdCB0aW1lIHdoZW4gc2hvd24gdXBcbiAgICAgIHRoaXMuY2hhbmdlQm9keU92ZXJmbG93KDEpO1xuICAgICAgdGhpcy5zYXZlUHJldmlvdXNseUZvY3VzZWRFbGVtZW50KCk7XG4gICAgICB0aGlzLnRyYXBGb2N1cygpO1xuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlXG4gICAgLnJlc29sdmUoYW5pbWF0aW9uICYmIHRoaXMuYW5pbWF0ZVRvKHZpc2libGUpKVxuICAgIC50aGVuKCgpID0+IHsgLy8gRW1pdCBvcGVuL2Nsb3NlIGV2ZW50IGFmdGVyIGFuaW1hdGlvbnMgb3ZlclxuICAgICAgaWYgKHZpc2libGUpIHtcbiAgICAgICAgdGhpcy5uekFmdGVyT3Blbi5lbWl0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm56QWZ0ZXJDbG9zZS5lbWl0KGNsb3NlUmVzdWx0KTtcbiAgICAgICAgdGhpcy5yZXN0b3JlRm9jdXMoKTtcbiAgICAgICAgdGhpcy5jaGFuZ2VCb2R5T3ZlcmZsb3coKTsgLy8gU2hvdy9oaWRlIHNjcm9sbGJhciB3aGVuIGFuaW1hdGlvbiBpcyBvdmVyXG4gICAgICB9XG4gICAgfSk7XG4gICAgLy8gLnRoZW4oKCkgPT4gdGhpcy5jaGFuZ2VCb2R5T3ZlcmZsb3coKSk7XG4gIH1cblxuICAvLyBMb29rdXAgYSBidXR0b24ncyBwcm9wZXJ0eSwgaWYgdGhlIHByb3AgaXMgYSBmdW5jdGlvbiwgY2FsbCAmIHRoZW4gcmV0dXJuIHRoZSByZXN1bHQsIG90aGVyd2lzZSwgcmV0dXJuIGl0c2VsZi5cbiAgcHVibGljIGdldEJ1dHRvbkNhbGxhYmxlUHJvcChvcHRpb25zOiBNb2RhbEJ1dHRvbk9wdGlvbnM8VD4sIHByb3A6IHN0cmluZyk6IHt9IHtcbiAgICBjb25zdCB2YWx1ZSA9IG9wdGlvbnNbIHByb3AgXTtcbiAgICBjb25zdCBhcmdzID0gW107XG4gICAgaWYgKHRoaXMuY29udGVudENvbXBvbmVudFJlZikge1xuICAgICAgYXJncy5wdXNoKHRoaXMuY29udGVudENvbXBvbmVudFJlZi5pbnN0YW5jZSk7XG4gICAgfVxuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgPyB2YWx1ZS5hcHBseShvcHRpb25zLCBhcmdzKSA6IHZhbHVlO1xuICB9XG5cbiAgLy8gT24gbnpGb290ZXIncyBtb2RhbCBidXR0b24gY2xpY2tcbiAgcHVibGljIG9uQnV0dG9uQ2xpY2soYnV0dG9uOiBNb2RhbEJ1dHRvbk9wdGlvbnM8VD4pOiB2b2lkIHtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLmdldEJ1dHRvbkNhbGxhYmxlUHJvcChidXR0b24sICdvbkNsaWNrJyk7IC8vIENhbGwgb25DbGljayBkaXJlY3RseVxuICAgIGlmIChpc1Byb21pc2UocmVzdWx0KSkge1xuICAgICAgYnV0dG9uLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgKHJlc3VsdCBhcyBQcm9taXNlPHt9PikudGhlbigoKSA9PiBidXR0b24ubG9hZGluZyA9IGZhbHNlKS5jYXRjaCgoKSA9PiBidXR0b24ubG9hZGluZyA9IGZhbHNlKTtcbiAgICB9XG4gIH1cblxuICAvLyBDaGFuZ2UgbnpWaXNpYmxlIGZyb20gaW5zaWRlXG4gIHByaXZhdGUgY2hhbmdlVmlzaWJsZUZyb21JbnNpZGUodmlzaWJsZTogYm9vbGVhbiwgY2xvc2VSZXN1bHQ/OiBSKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKHRoaXMubnpWaXNpYmxlICE9PSB2aXNpYmxlKSB7XG4gICAgICAvLyBDaGFuZ2UgbnpWaXNpYmxlIHZhbHVlIGltbWVkaWF0ZWx5XG4gICAgICB0aGlzLm56VmlzaWJsZSA9IHZpc2libGU7XG4gICAgICB0aGlzLm56VmlzaWJsZUNoYW5nZS5lbWl0KHZpc2libGUpO1xuICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlVmlzaWJsZVN0YXRlQ2hhbmdlKHZpc2libGUsIHRydWUsIGNsb3NlUmVzdWx0KTtcbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBjaGFuZ2VBbmltYXRpb25TdGF0ZShzdGF0ZTogQW5pbWF0aW9uU3RhdGUpOiB2b2lkIHtcbiAgICB0aGlzLmFuaW1hdGlvblN0YXRlID0gc3RhdGU7XG4gICAgaWYgKHN0YXRlKSB7XG4gICAgICB0aGlzLm1hc2tBbmltYXRpb25DbGFzc01hcCA9IHtcbiAgICAgICAgWyBgZmFkZS0ke3N0YXRlfWAgXSAgICAgICA6IHRydWUsXG4gICAgICAgIFsgYGZhZGUtJHtzdGF0ZX0tYWN0aXZlYCBdOiB0cnVlXG4gICAgICB9O1xuICAgICAgdGhpcy5tb2RhbEFuaW1hdGlvbkNsYXNzTWFwID0ge1xuICAgICAgICBbIGB6b29tLSR7c3RhdGV9YCBdICAgICAgIDogdHJ1ZSxcbiAgICAgICAgWyBgem9vbS0ke3N0YXRlfS1hY3RpdmVgIF06IHRydWVcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubWFza0FuaW1hdGlvbkNsYXNzTWFwID0gdGhpcy5tb2RhbEFuaW1hdGlvbkNsYXNzTWFwID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFuaW1hdGVUbyhpc1Zpc2libGU6IGJvb2xlYW4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAoaXNWaXNpYmxlKSB7IC8vIEZpZ3VyZSBvdXQgdGhlIGxhc3Rlc3QgY2xpY2sgcG9zaXRpb24gd2hlbiBzaG93cyB1cFxuICAgICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4gdGhpcy51cGRhdGVUcmFuc2Zvcm1PcmlnaW4oKSk7IC8vIFtOT1RFXSBVc2luZyB0aW1lb3V0IGR1ZSB0byB0aGUgZG9jdW1lbnQuY2xpY2sgZXZlbnQgaXMgZmlyZWQgbGF0ZXIgdGhhbiB2aXNpYmxlIGNoYW5nZSwgc28gaWYgbm90IHBvc3Rwb25lZCB0byBuZXh0IGV2ZW50LWxvb3AsIHdlIGNhbid0IGdldCB0aGUgbGFzdGVzdCBjbGljayBwb3NpdGlvblxuICAgIH1cblxuICAgIHRoaXMuY2hhbmdlQW5pbWF0aW9uU3RhdGUoaXNWaXNpYmxlID8gJ2VudGVyJyA6ICdsZWF2ZScpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gd2luZG93LnNldFRpbWVvdXQoKCkgPT4geyAvLyBSZXR1cm4gd2hlbiBhbmltYXRpb24gaXMgb3ZlclxuICAgICAgdGhpcy5jaGFuZ2VBbmltYXRpb25TdGF0ZShudWxsKTtcbiAgICAgIHJlc29sdmUoKTtcbiAgICB9LCBNT0RBTF9BTklNQVRFX0RVUkFUSU9OKSk7XG4gIH1cblxuICBwcml2YXRlIGZvcm1hdE1vZGFsQnV0dG9ucyhidXR0b25zOiBBcnJheTxNb2RhbEJ1dHRvbk9wdGlvbnM8VD4+KTogQXJyYXk8TW9kYWxCdXR0b25PcHRpb25zPFQ+PiB7XG4gICAgcmV0dXJuIGJ1dHRvbnMubWFwKChidXR0b24pID0+IHtcbiAgICAgIGNvbnN0IG1peGVkQnV0dG9uID0ge1xuICAgICAgICAuLi57XG4gICAgICAgICAgdHlwZSAgICAgICA6ICdkZWZhdWx0JyxcbiAgICAgICAgICBzaXplICAgICAgIDogJ2RlZmF1bHQnLFxuICAgICAgICAgIGF1dG9Mb2FkaW5nOiB0cnVlLFxuICAgICAgICAgIHNob3cgICAgICAgOiB0cnVlLFxuICAgICAgICAgIGxvYWRpbmcgICAgOiBmYWxzZSxcbiAgICAgICAgICBkaXNhYmxlZCAgIDogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgLi4uYnV0dG9uXG4gICAgICB9O1xuXG4gICAgICAvLyBpZiAobWl4ZWRCdXR0b24uYXV0b0xvYWRpbmcpIHsgbWl4ZWRCdXR0b24ubG9hZGluZyA9IGZhbHNlOyB9IC8vIEZvcmNlIGxvYWRpbmcgdG8gZmFsc2Ugd2hlbiBhdXRvTG9hZGluZz10cnVlXG5cbiAgICAgIHJldHVybiBtaXhlZEJ1dHRvbjtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBjb21wb25lbnQgZHluYW1pY2FsbHkgYnV0IG5vdCBhdHRhY2ggdG8gYW55IFZpZXcgKHRoaXMgYWN0aW9uIHdpbGwgYmUgZXhlY3V0ZWQgd2hlbiBib2R5Q29udGFpbmVyIGlzIHJlYWR5KVxuICAgKiBAcGFyYW0gY29tcG9uZW50IENvbXBvbmVudCBjbGFzc1xuICAgKi9cbiAgcHJpdmF0ZSBjcmVhdGVEeW5hbWljQ29tcG9uZW50KGNvbXBvbmVudDogVHlwZTxUPik6IHZvaWQge1xuICAgIGNvbnN0IGZhY3RvcnkgPSB0aGlzLmNmci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShjb21wb25lbnQpO1xuICAgIGNvbnN0IGNoaWxkSW5qZWN0b3IgPSBJbmplY3Rvci5jcmVhdGUoe1xuICAgICAgcHJvdmlkZXJzOiBbIHsgcHJvdmlkZTogTnpNb2RhbFJlZiwgdXNlVmFsdWU6IHRoaXMgfSBdLFxuICAgICAgcGFyZW50ICAgOiB0aGlzLnZpZXdDb250YWluZXIucGFyZW50SW5qZWN0b3JcbiAgICB9KTtcbiAgICB0aGlzLmNvbnRlbnRDb21wb25lbnRSZWYgPSBmYWN0b3J5LmNyZWF0ZShjaGlsZEluamVjdG9yKTtcbiAgICBpZiAodGhpcy5uekNvbXBvbmVudFBhcmFtcykge1xuICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLmNvbnRlbnRDb21wb25lbnRSZWYuaW5zdGFuY2UsIHRoaXMubnpDb21wb25lbnRQYXJhbXMpO1xuICAgIH1cbiAgICAvLyBEbyB0aGUgZmlyc3QgY2hhbmdlIGRldGVjdGlvbiBpbW1lZGlhdGVseSAob3Igd2UgZG8gZGV0ZWN0aW9uIGF0IG5nQWZ0ZXJWaWV3SW5pdCwgbXVsdGktY2hhbmdlcyBlcnJvciB3aWxsIGJlIHRocm93bilcbiAgICB0aGlzLmNvbnRlbnRDb21wb25lbnRSZWYuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICB9XG5cbiAgLy8gVXBkYXRlIHRyYW5zZm9ybS1vcmlnaW4gdG8gdGhlIGxhc3QgY2xpY2sgcG9zaXRpb24gb24gZG9jdW1lbnRcbiAgcHJpdmF0ZSB1cGRhdGVUcmFuc2Zvcm1PcmlnaW4oKTogdm9pZCB7XG4gICAgY29uc3QgbW9kYWxFbGVtZW50ID0gdGhpcy5tb2RhbENvbnRhaW5lci5uYXRpdmVFbGVtZW50IGFzIEhUTUxFbGVtZW50O1xuICAgIGNvbnN0IGxhc3RQb3NpdGlvbiA9IE1vZGFsVXRpbC5nZXRMYXN0Q2xpY2tQb3NpdGlvbigpO1xuICAgIGlmIChsYXN0UG9zaXRpb24pIHtcbiAgICAgIHRoaXMudHJhbnNmb3JtT3JpZ2luID0gYCR7bGFzdFBvc2l0aW9uLnggLSBtb2RhbEVsZW1lbnQub2Zmc2V0TGVmdH1weCAke2xhc3RQb3NpdGlvbi55IC0gbW9kYWxFbGVtZW50Lm9mZnNldFRvcH1weCAwcHhgO1xuICAgIH1cbiAgICAvLyBlbHNlIHtcbiAgICAvLyAgIHRoaXMudHJhbnNmb3JtT3JpZ2luID0gJzBweCAwcHggMHB4JztcbiAgICAvLyB9XG4gIH1cblxuICAvKipcbiAgICogVGFrZSBjYXJlIG9mIHRoZSBib2R5J3Mgb3ZlcmZsb3cgdG8gZGVjaWRlIHRoZSBleGlzdGVuc2Ugb2Ygc2Nyb2xsYmFyXG4gICAqIEBwYXJhbSBwbHVzTnVtIFRoZSBudW1iZXIgdGhhdCB0aGUgb3Blbk1vZGFscy5sZW5ndGggd2lsbCBpbmNyZWFzZSBzb29uXG4gICAqL1xuICBwcml2YXRlIGNoYW5nZUJvZHlPdmVyZmxvdyhwbHVzTnVtOiBudW1iZXIgPSAwKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuY29uZmlnLmF1dG9Cb2R5UGFkZGluZykge1xuICAgICAgY29uc3Qgb3Blbk1vZGFscyA9IHRoaXMubW9kYWxDb250cm9sLm9wZW5Nb2RhbHM7XG5cbiAgICAgIGlmIChvcGVuTW9kYWxzLmxlbmd0aCArIHBsdXNOdW0gPiAwKSB7XG4gICAgICAgIGlmICh0aGlzLmhhc0JvZHlTY3JvbGxCYXIoKSkgeyAvLyBBZGRpbmcgcGFkZGluZy1yaWdodCBvbmx5IHdoZW4gYm9keSdzIHNjcm9sbGJhciBpcyBhYmxlIHRvIHNob3duIHVwXG4gICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmRvY3VtZW50LmJvZHksICdwYWRkaW5nLXJpZ2h0JywgYCR7dGhpcy5uek1lYXN1cmVTY3JvbGxiYXJTZXJ2aWNlLnNjcm9sbEJhcldpZHRofXB4YCk7XG4gICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmRvY3VtZW50LmJvZHksICdvdmVyZmxvdycsICdoaWRkZW4nKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHsgLy8gTk9URTogd2UgbmVlZCB0byBhbHdheXMgcmVtb3ZlIHRoZSBwYWRkaW5nIGR1ZSB0byB0aGUgc2Nyb2xsIGJhciBtYXkgYmUgZGlzYXBwZWFyIGJ5IHdpbmRvdyByZXNpemluZyBiZWZvcmUgbW9kYWwgY2xvc2VkXG4gICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlU3R5bGUodGhpcy5kb2N1bWVudC5ib2R5LCAncGFkZGluZy1yaWdodCcpO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZVN0eWxlKHRoaXMuZG9jdW1lbnQuYm9keSwgJ292ZXJmbG93Jyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIHdoZXRoZXIgdGhlIGJvZHkgZWxlbWVudCBpcyBhYmxlIHRvIGhhcyB0aGUgc2Nyb2xsIGJhciAoaWYgdGhlIGJvZHkgY29udGVudCBoZWlnaHQgZXhjZWVkcyB0aGUgd2luZG93J3MgaGVpZ2h0KVxuICAgKiBFeGNlcHRpb25hbCBDYXNlczogdXNlcnMgY2FuIHNob3cgdGhlIHNjcm9sbCBiYXIgYnkgdGhlaXIgb3duIHBlcm1hbmVudGx5IChlZy4gb3ZlcmZsb3c6IHNjcm9sbClcbiAgICovXG4gIHByaXZhdGUgaGFzQm9keVNjcm9sbEJhcigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5kb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCA+ICh3aW5kb3cuaW5uZXJIZWlnaHQgfHwgdGhpcy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0KTtcbiAgfVxuXG4gIHByaXZhdGUgbWVyZ2VEZWZhdWx0Q29uZmlnKGNvbmZpZzogTnpNb2RhbENvbmZpZyk6IE56TW9kYWxDb25maWcge1xuICAgIHJldHVybiB7IC4uLk5aX01PREFMX0RFRkFVTFRfQ09ORklHLCAuLi5jb25maWcgfTtcbiAgfVxuXG4gIHByaXZhdGUgc2F2ZVByZXZpb3VzbHlGb2N1c2VkRWxlbWVudCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5kb2N1bWVudCkge1xuICAgICAgdGhpcy5wcmV2aW91c2x5Rm9jdXNlZEVsZW1lbnQgPSB0aGlzLmRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICB0aGlzLnByZXZpb3VzbHlGb2N1c2VkRWxlbWVudC5ibHVyKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB0cmFwRm9jdXMoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmZvY3VzVHJhcCkge1xuICAgICAgdGhpcy5mb2N1c1RyYXAgPSB0aGlzLmZvY3VzVHJhcEZhY3RvcnkuY3JlYXRlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KTtcbiAgICB9XG4gICAgdGhpcy5mb2N1c1RyYXAuZm9jdXNJbml0aWFsRWxlbWVudFdoZW5SZWFkeSgpO1xuICB9XG5cbiAgcHJpdmF0ZSByZXN0b3JlRm9jdXMoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMucHJldmlvdXNseUZvY3VzZWRFbGVtZW50KSB7XG4gICAgICB0aGlzLnByZXZpb3VzbHlGb2N1c2VkRWxlbWVudC5mb2N1cygpO1xuICAgIH1cbiAgICBpZiAodGhpcy5mb2N1c1RyYXApIHtcbiAgICAgIHRoaXMuZm9jdXNUcmFwLmRlc3Ryb3koKTtcbiAgICB9XG4gIH1cbn1cblxuLy8vLy8vLy8vLy8vXG5cbmZ1bmN0aW9uIGlzUHJvbWlzZShvYmo6IHt9IHwgdm9pZCk6IGJvb2xlYW4ge1xuICByZXR1cm4gISFvYmogJiYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnIHx8IHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpICYmIHR5cGVvZiAob2JqIGFzIFByb21pc2U8e30+KS50aGVuID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiAob2JqIGFzIFByb21pc2U8e30+KS5jYXRjaCA9PT0gJ2Z1bmN0aW9uJztcbn1cbiIsImltcG9ydCB7IE92ZXJsYXksIE92ZXJsYXlSZWYgfSBmcm9tICdAYW5ndWxhci9jZGsvb3ZlcmxheSc7XG5pbXBvcnQgeyBDb21wb25lbnRQb3J0YWwgfSBmcm9tICdAYW5ndWxhci9jZGsvcG9ydGFsJztcbmltcG9ydCB7IENvbXBvbmVudFJlZiwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBMb2dnZXJTZXJ2aWNlIH0gZnJvbSAnLi4vY29yZS91dGlsL2xvZ2dlci9sb2dnZXIuc2VydmljZSc7XG5cbmltcG9ydCB7IE56TW9kYWxDb250cm9sU2VydmljZSB9IGZyb20gJy4vbnotbW9kYWwtY29udHJvbC5zZXJ2aWNlJztcbmltcG9ydCB7IE56TW9kYWxSZWYgfSBmcm9tICcuL256LW1vZGFsLXJlZi5jbGFzcyc7XG5pbXBvcnQgeyBOek1vZGFsQ29tcG9uZW50IH0gZnJvbSAnLi9uei1tb2RhbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29uZmlybVR5cGUsIE1vZGFsT3B0aW9ucywgTW9kYWxPcHRpb25zRm9yU2VydmljZSB9IGZyb20gJy4vbnotbW9kYWwudHlwZSc7XG5cbi8vIEEgYnVpbGRlciB1c2VkIGZvciBtYW5hZ2luZyBzZXJ2aWNlIGNyZWF0aW5nIG1vZGFsc1xuZXhwb3J0IGNsYXNzIE1vZGFsQnVpbGRlckZvclNlcnZpY2Uge1xuICBwcml2YXRlIG1vZGFsUmVmOiBDb21wb25lbnRSZWY8TnpNb2RhbENvbXBvbmVudD47IC8vIE1vZGFsIENvbXBvbmVudFJlZiwgXCJudWxsXCIgbWVhbnMgaXQgaGFzIGJlZW4gZGVzdHJveWVkXG4gIHByaXZhdGUgb3ZlcmxheVJlZjogT3ZlcmxheVJlZjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG92ZXJsYXk6IE92ZXJsYXksIG9wdGlvbnM6IE1vZGFsT3B0aW9uc0ZvclNlcnZpY2UgPSB7fSkge1xuICAgIHRoaXMuY3JlYXRlTW9kYWwoKTtcblxuICAgIGlmICghKCduekdldENvbnRhaW5lcicgaW4gb3B0aW9ucykpIHsgLy8gQXMgd2UgdXNlIENESyB0byBjcmVhdGUgbW9kYWwgaW4gc2VydmljZSBieSBmb3JjZSwgdGhlcmUgaXMgbm8gbmVlZCB0byB1c2UgbnpHZXRDb250YWluZXJcbiAgICAgIG9wdGlvbnMubnpHZXRDb250YWluZXIgPSBudWxsOyAvLyBPdmVycmlkZSBuekdldENvbnRhaW5lcidzIGRlZmF1bHQgdmFsdWUgdG8gcHJldmVudCBjcmVhdGluZyBhbm90aGVyIG92ZXJsYXlcbiAgICB9XG5cbiAgICB0aGlzLmNoYW5nZVByb3BzKG9wdGlvbnMpO1xuICAgIHRoaXMubW9kYWxSZWYuaW5zdGFuY2Uub3BlbigpO1xuICAgIHRoaXMubW9kYWxSZWYuaW5zdGFuY2UubnpBZnRlckNsb3NlLnN1YnNjcmliZSgoKSA9PiB0aGlzLmRlc3Ryb3lNb2RhbCgpKTsgLy8gW05PVEVdIEJ5IGRlZmF1bHQsIGNsb3NlIGVxdWFscyBkZXN0cm95IHdoZW4gdXNpbmcgYXMgU2VydmljZVxuICB9XG5cbiAgZ2V0SW5zdGFuY2UoKTogTnpNb2RhbENvbXBvbmVudCB7XG4gICAgcmV0dXJuIHRoaXMubW9kYWxSZWYgJiYgdGhpcy5tb2RhbFJlZi5pbnN0YW5jZTtcbiAgfVxuXG4gIGRlc3Ryb3lNb2RhbCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5tb2RhbFJlZikge1xuICAgICAgdGhpcy5vdmVybGF5UmVmLmRpc3Bvc2UoKTtcbiAgICAgIHRoaXMubW9kYWxSZWYgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY2hhbmdlUHJvcHMob3B0aW9uczogTW9kYWxPcHRpb25zKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubW9kYWxSZWYpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5tb2RhbFJlZi5pbnN0YW5jZSwgb3B0aW9ucyk7IC8vIERBTkdFUjogaGVyZSBub3QgbGltaXQgdXNlcidzIGlucHV0cyBhdCBydW50aW1lXG4gICAgfVxuICB9XG5cbiAgLy8gQ3JlYXRlIGNvbXBvbmVudCB0byBBcHBsaWNhdGlvblJlZlxuICBwcml2YXRlIGNyZWF0ZU1vZGFsKCk6IHZvaWQge1xuICAgIHRoaXMub3ZlcmxheVJlZiA9IHRoaXMub3ZlcmxheS5jcmVhdGUoKTtcbiAgICB0aGlzLm1vZGFsUmVmID0gdGhpcy5vdmVybGF5UmVmLmF0dGFjaChuZXcgQ29tcG9uZW50UG9ydGFsKE56TW9kYWxDb21wb25lbnQpKTtcbiAgfVxufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTnpNb2RhbFNlcnZpY2Uge1xuICAvLyBUcmFjayBvZiB0aGUgY3VycmVudCBjbG9zZSBtb2RhbHMgKHdlIGFzc3VtZSBpbnZpc2libGUgaXMgY2xvc2UgdGhpcyB0aW1lKVxuICBnZXQgb3Blbk1vZGFscygpOiBOek1vZGFsUmVmW10ge1xuICAgIHJldHVybiB0aGlzLm1vZGFsQ29udHJvbC5vcGVuTW9kYWxzO1xuICB9XG5cbiAgZ2V0IGFmdGVyQWxsQ2xvc2UoKTogT2JzZXJ2YWJsZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMubW9kYWxDb250cm9sLmFmdGVyQWxsQ2xvc2UuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIG92ZXJsYXk6IE92ZXJsYXksXG4gICAgcHJpdmF0ZSBsb2dnZXI6IExvZ2dlclNlcnZpY2UsXG4gICAgcHJpdmF0ZSBtb2RhbENvbnRyb2w6IE56TW9kYWxDb250cm9sU2VydmljZSkge1xuICB9XG5cbiAgLy8gQ2xvc2VzIGFsbCBvZiB0aGUgY3VycmVudGx5LW9wZW4gZGlhbG9nc1xuICBjbG9zZUFsbCgpOiB2b2lkIHtcbiAgICB0aGlzLm1vZGFsQ29udHJvbC5jbG9zZUFsbCgpO1xuICB9XG5cbiAgY3JlYXRlPFQ+KG9wdGlvbnM6IE1vZGFsT3B0aW9uc0ZvclNlcnZpY2U8VD4gPSB7fSk6IE56TW9kYWxSZWY8VD4ge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5uek9uQ2FuY2VsICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvcHRpb25zLm56T25DYW5jZWwgPSAoKSA9PiB7XG4gICAgICB9OyAvLyBMZWF2ZSBhIGVtcHR5IGZ1bmN0aW9uIHRvIGNsb3NlIHRoaXMgbW9kYWwgYnkgZGVmYXVsdFxuICAgIH1cblxuICAgIGNvbnN0IG1vZGFsUmVmID0gbmV3IE1vZGFsQnVpbGRlckZvclNlcnZpY2UodGhpcy5vdmVybGF5LCBvcHRpb25zKS5nZXRJbnN0YW5jZSgpOyAvLyBOT1RFOiB1c2UgTnpNb2RhbENvbXBvbmVudCBhcyB0aGUgTnpNb2RhbFJlZiBieSBub3csIHdlIG1heSBuZWVkIGFyY2hpdmUgdGhlIHJlYWwgTnpNb2RhbFJlZiBvYmplY3QgaW4gdGhlIGZ1dHVyZVxuXG4gICAgcmV0dXJuIG1vZGFsUmVmO1xuICB9XG5cbiAgY29uZmlybTxUPihvcHRpb25zOiBNb2RhbE9wdGlvbnNGb3JTZXJ2aWNlPFQ+ID0ge30sIGNvbmZpcm1UeXBlOiBDb25maXJtVHlwZSA9ICdjb25maXJtJyk6IE56TW9kYWxSZWY8VD4ge1xuICAgIGlmICgnbnpGb290ZXInIGluIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMubG9nZ2VyLndhcm4oYFRoZSBDb25maXJtLU1vZGFsIGRvZXNuJ3Qgc3VwcG9ydCBcIm56Rm9vdGVyXCIsIHRoaXMgcHJvcGVydHkgd2lsbCBiZSBpZ25vcmVkLmApO1xuICAgIH1cbiAgICBpZiAoISgnbnpXaWR0aCcgaW4gb3B0aW9ucykpIHtcbiAgICAgIG9wdGlvbnMubnpXaWR0aCA9IDQxNjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLm56T25PayAhPT0gJ2Z1bmN0aW9uJykgeyAvLyBOT1RFOiBvbmx5IHN1cHBvcnQgZnVuY3Rpb24gY3VycmVudGx5IGJ5IGNhbGxpbmcgY29uZmlybSgpXG4gICAgICBvcHRpb25zLm56T25PayA9ICgpID0+IHtcbiAgICAgIH07IC8vIExlYXZlIGEgZW1wdHkgZnVuY3Rpb24gdG8gY2xvc2UgdGhpcyBtb2RhbCBieSBkZWZhdWx0XG4gICAgfVxuXG4gICAgb3B0aW9ucy5uek1vZGFsVHlwZSA9ICdjb25maXJtJztcbiAgICBvcHRpb25zLm56Q2xhc3NOYW1lID0gYGFudC1tb2RhbC1jb25maXJtIGFudC1tb2RhbC1jb25maXJtLSR7Y29uZmlybVR5cGV9ICR7b3B0aW9ucy5uekNsYXNzTmFtZSB8fCAnJ31gO1xuICAgIG9wdGlvbnMubnpNYXNrQ2xvc2FibGUgPSBmYWxzZTtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGUob3B0aW9ucyk7XG4gIH1cblxuICBpbmZvPFQ+KG9wdGlvbnM6IE1vZGFsT3B0aW9uc0ZvclNlcnZpY2U8VD4gPSB7fSk6IE56TW9kYWxSZWY8VD4ge1xuICAgIHJldHVybiB0aGlzLnNpbXBsZUNvbmZpcm0ob3B0aW9ucywgJ2luZm8nKTtcbiAgfVxuXG4gIHN1Y2Nlc3M8VD4ob3B0aW9uczogTW9kYWxPcHRpb25zRm9yU2VydmljZTxUPiA9IHt9KTogTnpNb2RhbFJlZjxUPiB7XG4gICAgcmV0dXJuIHRoaXMuc2ltcGxlQ29uZmlybShvcHRpb25zLCAnc3VjY2VzcycpO1xuICB9XG5cbiAgZXJyb3I8VD4ob3B0aW9uczogTW9kYWxPcHRpb25zRm9yU2VydmljZTxUPiA9IHt9KTogTnpNb2RhbFJlZjxUPiB7XG4gICAgcmV0dXJuIHRoaXMuc2ltcGxlQ29uZmlybShvcHRpb25zLCAnZXJyb3InKTtcbiAgfVxuXG4gIHdhcm5pbmc8VD4ob3B0aW9uczogTW9kYWxPcHRpb25zRm9yU2VydmljZTxUPiA9IHt9KTogTnpNb2RhbFJlZjxUPiB7XG4gICAgcmV0dXJuIHRoaXMuc2ltcGxlQ29uZmlybShvcHRpb25zLCAnd2FybmluZycpO1xuICB9XG5cbiAgcHJpdmF0ZSBzaW1wbGVDb25maXJtPFQ+KG9wdGlvbnM6IE1vZGFsT3B0aW9uc0ZvclNlcnZpY2U8VD4gPSB7fSwgY29uZmlybVR5cGU6IENvbmZpcm1UeXBlKTogTnpNb2RhbFJlZjxUPiB7XG4gICAgaWYgKCEoJ256SWNvblR5cGUnIGluIG9wdGlvbnMpKSB7XG4gICAgICBvcHRpb25zLm56SWNvblR5cGUgPSB7XG4gICAgICAgICdpbmZvJyAgIDogJ2luZm8tY2lyY2xlJyxcbiAgICAgICAgJ3N1Y2Nlc3MnOiAnY2hlY2stY2lyY2xlJyxcbiAgICAgICAgJ2Vycm9yJyAgOiAnY2xvc2UtY2lyY2xlJyxcbiAgICAgICAgJ3dhcm5pbmcnOiAnZXhjbGFtYXRpb24tY2lyY2xlJ1xuICAgICAgfVsgY29uZmlybVR5cGUgXTtcbiAgICB9XG4gICAgaWYgKCEoJ256Q2FuY2VsVGV4dCcgaW4gb3B0aW9ucykpIHsgLy8gUmVtb3ZlIHRoZSBDYW5jZWwgYnV0dG9uIGlmIHRoZSB1c2VyIG5vdCBzcGVjaWZ5IGEgQ2FuY2VsIGJ1dHRvblxuICAgICAgb3B0aW9ucy5uekNhbmNlbFRleHQgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jb25maXJtKG9wdGlvbnMsIGNvbmZpcm1UeXBlKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgT3ZlcmxheU1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBOekJ1dHRvbk1vZHVsZSB9IGZyb20gJy4uL2J1dHRvbi9uei1idXR0b24ubW9kdWxlJztcbmltcG9ydCB7IExvZ2dlck1vZHVsZSB9IGZyb20gJy4uL2NvcmUvdXRpbC9sb2dnZXIvbG9nZ2VyLm1vZHVsZSc7XG5pbXBvcnQgeyBOekkxOG5Nb2R1bGUgfSBmcm9tICcuLi9pMThuL256LWkxOG4ubW9kdWxlJztcbmltcG9ydCB7IE56SWNvbk1vZHVsZSB9IGZyb20gJy4uL2ljb24vbnotaWNvbi5tb2R1bGUnO1xuXG5pbXBvcnQgeyBDc3NVbml0UGlwZSB9IGZyb20gJy4vY3NzLXVuaXQucGlwZSc7XG5pbXBvcnQgeyBOek1vZGFsQ29udHJvbFNlcnZpY2UgfSBmcm9tICcuL256LW1vZGFsLWNvbnRyb2wuc2VydmljZSc7XG5pbXBvcnQgeyBOek1vZGFsQ29tcG9uZW50IH0gZnJvbSAnLi9uei1tb2RhbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpNb2RhbFNlcnZpY2UgfSBmcm9tICcuL256LW1vZGFsLnNlcnZpY2UnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzICAgICAgICA6IFsgQ29tbW9uTW9kdWxlLCBPdmVybGF5TW9kdWxlLCBOekkxOG5Nb2R1bGUsIE56QnV0dG9uTW9kdWxlLCBMb2dnZXJNb2R1bGUsIE56SWNvbk1vZHVsZSBdLFxuICBleHBvcnRzICAgICAgICA6IFsgTnpNb2RhbENvbXBvbmVudCBdLFxuICBkZWNsYXJhdGlvbnMgICA6IFsgTnpNb2RhbENvbXBvbmVudCwgQ3NzVW5pdFBpcGUgXSxcbiAgZW50cnlDb21wb25lbnRzOiBbIE56TW9kYWxDb21wb25lbnQgXSxcbiAgcHJvdmlkZXJzICAgICAgOiBbIE56TW9kYWxDb250cm9sU2VydmljZSwgTnpNb2RhbFNlcnZpY2UgXVxufSlcbmV4cG9ydCBjbGFzcyBOek1vZGFsTW9kdWxlIHtcbn1cbiIsImltcG9ydCB7IEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE56TWVzc2FnZUNvbmZpZyB9IGZyb20gJy4uL21lc3NhZ2UvbnotbWVzc2FnZS1jb25maWcnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE56Tm90aWZpY2F0aW9uQ29uZmlnIGV4dGVuZHMgTnpNZXNzYWdlQ29uZmlnIHtcbiAgbnpUb3A/OiBzdHJpbmc7XG4gIG56Qm90dG9tPzogc3RyaW5nO1xuICBuelBsYWNlbWVudD86ICd0b3BMZWZ0JyB8ICd0b3BSaWdodCcgfCAnYm90dG9tTGVmdCcgfCAnYm90dG9tUmlnaHQnIHwgc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgTlpfTk9USUZJQ0FUSU9OX0RFRkFVTFRfQ09ORklHID0gbmV3IEluamVjdGlvblRva2VuPE56Tm90aWZpY2F0aW9uQ29uZmlnPignTlpfTk9USUZJQ0FUSU9OX0RFRkFVTFRfQ09ORklHJyk7XG5cbmV4cG9ydCBjb25zdCBOWl9OT1RJRklDQVRJT05fQ09ORklHID0gbmV3IEluamVjdGlvblRva2VuPE56Tm90aWZpY2F0aW9uQ29uZmlnPignTlpfTk9USUZJQ0FUSU9OX0NPTkZJRycpO1xuXG5leHBvcnQgY29uc3QgTlpfTk9USUZJQ0FUSU9OX0RFRkFVTFRfQ09ORklHX1BST1ZJREVSID0ge1xuICBwcm92aWRlIDogTlpfTk9USUZJQ0FUSU9OX0RFRkFVTFRfQ09ORklHLFxuICB1c2VWYWx1ZToge1xuICAgIG56VG9wICAgICAgICAgOiAnMjRweCcsXG4gICAgbnpCb3R0b20gICAgICA6ICcyNHB4JyxcbiAgICBuelBsYWNlbWVudCAgIDogJ3RvcFJpZ2h0JyxcbiAgICBuekR1cmF0aW9uICAgIDogNDUwMCxcbiAgICBuek1heFN0YWNrICAgIDogNyxcbiAgICBuelBhdXNlT25Ib3ZlcjogdHJ1ZSxcbiAgICBuekFuaW1hdGUgICAgIDogdHJ1ZVxuICB9XG59O1xuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbmplY3QsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE56TWVzc2FnZUNvbnRhaW5lckNvbXBvbmVudCB9IGZyb20gJy4uL21lc3NhZ2UvbnotbWVzc2FnZS1jb250YWluZXIuY29tcG9uZW50JztcblxuaW1wb3J0IHsgTnpOb3RpZmljYXRpb25Db25maWcsIE5aX05PVElGSUNBVElPTl9DT05GSUcsIE5aX05PVElGSUNBVElPTl9ERUZBVUxUX0NPTkZJRyB9IGZyb20gJy4vbnotbm90aWZpY2F0aW9uLWNvbmZpZyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICAgICAgOiAnbnotbm90aWZpY2F0aW9uLWNvbnRhaW5lcicsXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxuICB0ZW1wbGF0ZVVybCAgICAgICAgOiAnLi9uei1ub3RpZmljYXRpb24tY29udGFpbmVyLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBOek5vdGlmaWNhdGlvbkNvbnRhaW5lckNvbXBvbmVudCBleHRlbmRzIE56TWVzc2FnZUNvbnRhaW5lckNvbXBvbmVudCB7XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEluamVjdChOWl9OT1RJRklDQVRJT05fREVGQVVMVF9DT05GSUcpIGRlZmF1bHRDb25maWc6IE56Tm90aWZpY2F0aW9uQ29uZmlnLFxuICAgICAgICAgICAgICBAT3B0aW9uYWwoKSBASW5qZWN0KE5aX05PVElGSUNBVElPTl9DT05GSUcpIGNvbmZpZzogTnpOb3RpZmljYXRpb25Db25maWcpIHtcbiAgICBzdXBlcihkZWZhdWx0Q29uZmlnLCBjb25maWcpO1xuICB9XG5cbn1cbiIsImltcG9ydCB7XG4gIGFuaW1hdGUsXG4gIHN0YXRlLFxuICBzdHlsZSxcbiAgdHJhbnNpdGlvbixcbiAgdHJpZ2dlclxufSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgTnpNZXNzYWdlQ29tcG9uZW50IH0gZnJvbSAnLi4vbWVzc2FnZS9uei1tZXNzYWdlLmNvbXBvbmVudCc7XG5cbmltcG9ydCB7IE56Tm90aWZpY2F0aW9uQ29udGFpbmVyQ29tcG9uZW50IH0gZnJvbSAnLi9uei1ub3RpZmljYXRpb24tY29udGFpbmVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOek5vdGlmaWNhdGlvbkRhdGFGaWxsZWQgfSBmcm9tICcuL256LW5vdGlmaWNhdGlvbi5kZWZpbml0aW9ucyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICAgICAgOiAnbnotbm90aWZpY2F0aW9uJyxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG4gIGFuaW1hdGlvbnMgICAgICAgICA6IFtcbiAgICB0cmlnZ2VyKCdlbnRlckxlYXZlJywgW1xuICAgICAgc3RhdGUoJ2VudGVyUmlnaHQnLCBzdHlsZSh7IG9wYWNpdHk6IDEsIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoMCknIH0pKSxcbiAgICAgIHRyYW5zaXRpb24oJyogPT4gZW50ZXJSaWdodCcsIFtcbiAgICAgICAgc3R5bGUoeyBvcGFjaXR5OiAwLCB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDUlKScgfSksXG4gICAgICAgIGFuaW1hdGUoJzEwMG1zIGxpbmVhcicpXG4gICAgICBdKSxcbiAgICAgIHN0YXRlKCdlbnRlckxlZnQnLCBzdHlsZSh7IG9wYWNpdHk6IDEsIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoMCknIH0pKSxcbiAgICAgIHRyYW5zaXRpb24oJyogPT4gZW50ZXJMZWZ0JywgW1xuICAgICAgICBzdHlsZSh7IG9wYWNpdHk6IDAsIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoLTUlKScgfSksXG4gICAgICAgIGFuaW1hdGUoJzEwMG1zIGxpbmVhcicpXG4gICAgICBdKSxcbiAgICAgIHN0YXRlKCdsZWF2ZScsIHN0eWxlKHtcbiAgICAgICAgb3BhY2l0eSAgICAgICAgOiAwLFxuICAgICAgICB0cmFuc2Zvcm0gICAgICA6ICdzY2FsZVkoMC44KScsXG4gICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzAlIDAlJ1xuICAgICAgfSkpLFxuICAgICAgdHJhbnNpdGlvbignKiA9PiBsZWF2ZScsIFtcbiAgICAgICAgc3R5bGUoe1xuICAgICAgICAgIG9wYWNpdHkgICAgICAgIDogMSxcbiAgICAgICAgICB0cmFuc2Zvcm0gICAgICA6ICdzY2FsZVkoMSknLFxuICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzAlIDAlJ1xuICAgICAgICB9KSxcbiAgICAgICAgYW5pbWF0ZSgnMTAwbXMgbGluZWFyJylcbiAgICAgIF0pXG4gICAgXSlcbiAgXSxcbiAgdGVtcGxhdGVVcmwgICAgICAgICA6ICcuL256LW5vdGlmaWNhdGlvbi5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgTnpOb3RpZmljYXRpb25Db21wb25lbnQgZXh0ZW5kcyBOek1lc3NhZ2VDb21wb25lbnQge1xuICBASW5wdXQoKSBuek1lc3NhZ2U6IE56Tm90aWZpY2F0aW9uRGF0YUZpbGxlZDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbnRhaW5lcjogTnpOb3RpZmljYXRpb25Db250YWluZXJDb21wb25lbnQpIHtcbiAgICBzdXBlcihjb250YWluZXIpO1xuICB9XG5cbiAgY2xvc2UoKTogdm9pZCB7XG4gICAgdGhpcy5fZGVzdHJveSgpO1xuICB9XG5cbiAgZ2V0IHN0YXRlKCk6IHN0cmluZyB7XG4gICAgaWYgKHRoaXMubnpNZXNzYWdlLnN0YXRlID09PSAnZW50ZXInKSB7XG4gICAgICBpZiAoKHRoaXMuY29udGFpbmVyLmNvbmZpZy5uelBsYWNlbWVudCA9PT0gJ3RvcExlZnQnKSB8fCAodGhpcy5jb250YWluZXIuY29uZmlnLm56UGxhY2VtZW50ID09PSAnYm90dG9tTGVmdCcpKSB7XG4gICAgICAgIHJldHVybiAnZW50ZXJMZWZ0JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAnZW50ZXJSaWdodCc7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLm56TWVzc2FnZS5zdGF0ZTtcbiAgICB9XG5cbiAgfVxufVxuIiwiaW1wb3J0IHsgT3ZlcmxheSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcbmltcG9ydCB7IEFwcGxpY2F0aW9uUmVmLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIEluamVjdGFibGUsIEluamVjdG9yLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBOek1lc3NhZ2VCYXNlU2VydmljZSB9IGZyb20gJy4uL21lc3NhZ2UvbnotbWVzc2FnZS5zZXJ2aWNlJztcblxuaW1wb3J0IHsgTnpOb3RpZmljYXRpb25Db25maWcgfSBmcm9tICcuL256LW5vdGlmaWNhdGlvbi1jb25maWcnO1xuaW1wb3J0IHsgTnpOb3RpZmljYXRpb25Db250YWluZXJDb21wb25lbnQgfSBmcm9tICcuL256LW5vdGlmaWNhdGlvbi1jb250YWluZXIuY29tcG9uZW50JztcbmltcG9ydCB7IE56Tm90aWZpY2F0aW9uRGF0YSwgTnpOb3RpZmljYXRpb25EYXRhRmlsbGVkLCBOek5vdGlmaWNhdGlvbkRhdGFPcHRpb25zIH0gZnJvbSAnLi9uei1ub3RpZmljYXRpb24uZGVmaW5pdGlvbnMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBOek5vdGlmaWNhdGlvblNlcnZpY2UgZXh0ZW5kcyBOek1lc3NhZ2VCYXNlU2VydmljZTxOek5vdGlmaWNhdGlvbkNvbnRhaW5lckNvbXBvbmVudCwgTnpOb3RpZmljYXRpb25EYXRhLCBOek5vdGlmaWNhdGlvbkNvbmZpZz4ge1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIG92ZXJsYXk6IE92ZXJsYXksXG4gICAgaW5qZWN0b3I6IEluamVjdG9yLFxuICAgIGNmcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICAgIGFwcFJlZjogQXBwbGljYXRpb25SZWYpIHtcblxuICAgIHN1cGVyKG92ZXJsYXksIE56Tm90aWZpY2F0aW9uQ29udGFpbmVyQ29tcG9uZW50LCBpbmplY3RvciwgY2ZyLCBhcHBSZWYsICdub3RpZmljYXRpb24tJyk7XG4gIH1cblxuICAvLyBTaG9ydGN1dCBtZXRob2RzXG4gIHN1Y2Nlc3ModGl0bGU6IHN0cmluZywgY29udGVudDogc3RyaW5nLCBvcHRpb25zPzogTnpOb3RpZmljYXRpb25EYXRhT3B0aW9ucyk6IE56Tm90aWZpY2F0aW9uRGF0YUZpbGxlZCB7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlTWVzc2FnZSh7IHR5cGU6ICdzdWNjZXNzJywgdGl0bGUsIGNvbnRlbnQgfSwgb3B0aW9ucykgYXMgTnpOb3RpZmljYXRpb25EYXRhRmlsbGVkO1xuICB9XG5cbiAgZXJyb3IodGl0bGU6IHN0cmluZywgY29udGVudDogc3RyaW5nLCBvcHRpb25zPzogTnpOb3RpZmljYXRpb25EYXRhT3B0aW9ucyk6IE56Tm90aWZpY2F0aW9uRGF0YUZpbGxlZCB7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlTWVzc2FnZSh7IHR5cGU6ICdlcnJvcicsIHRpdGxlLCBjb250ZW50IH0sIG9wdGlvbnMpIGFzIE56Tm90aWZpY2F0aW9uRGF0YUZpbGxlZDtcbiAgfVxuXG4gIGluZm8odGl0bGU6IHN0cmluZywgY29udGVudDogc3RyaW5nLCBvcHRpb25zPzogTnpOb3RpZmljYXRpb25EYXRhT3B0aW9ucyk6IE56Tm90aWZpY2F0aW9uRGF0YUZpbGxlZCB7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlTWVzc2FnZSh7IHR5cGU6ICdpbmZvJywgdGl0bGUsIGNvbnRlbnQgfSwgb3B0aW9ucykgYXMgTnpOb3RpZmljYXRpb25EYXRhRmlsbGVkO1xuICB9XG5cbiAgd2FybmluZyh0aXRsZTogc3RyaW5nLCBjb250ZW50OiBzdHJpbmcsIG9wdGlvbnM/OiBOek5vdGlmaWNhdGlvbkRhdGFPcHRpb25zKTogTnpOb3RpZmljYXRpb25EYXRhRmlsbGVkIHtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVNZXNzYWdlKHsgdHlwZTogJ3dhcm5pbmcnLCB0aXRsZSwgY29udGVudCB9LCBvcHRpb25zKSBhcyBOek5vdGlmaWNhdGlvbkRhdGFGaWxsZWQ7XG4gIH1cblxuICBibGFuayh0aXRsZTogc3RyaW5nLCBjb250ZW50OiBzdHJpbmcsIG9wdGlvbnM/OiBOek5vdGlmaWNhdGlvbkRhdGFPcHRpb25zKTogTnpOb3RpZmljYXRpb25EYXRhRmlsbGVkIHtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVNZXNzYWdlKHsgdHlwZTogJ2JsYW5rJywgdGl0bGUsIGNvbnRlbnQgfSwgb3B0aW9ucykgYXMgTnpOb3RpZmljYXRpb25EYXRhRmlsbGVkO1xuICB9XG5cbiAgY3JlYXRlKHR5cGU6ICdzdWNjZXNzJyB8ICdpbmZvJyB8ICd3YXJuaW5nJyB8ICdlcnJvcicgfCAnYmxhbmsnIHwgc3RyaW5nLCB0aXRsZTogc3RyaW5nLCBjb250ZW50OiBzdHJpbmcsIG9wdGlvbnM/OiBOek5vdGlmaWNhdGlvbkRhdGFPcHRpb25zKTogTnpOb3RpZmljYXRpb25EYXRhRmlsbGVkIHtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVNZXNzYWdlKHsgdHlwZSwgdGl0bGUsIGNvbnRlbnQgfSwgb3B0aW9ucykgYXMgTnpOb3RpZmljYXRpb25EYXRhRmlsbGVkO1xuICB9XG5cbiAgLy8gRm9yIGNvbnRlbnQgd2l0aCB0ZW1wbGF0ZVxuICB0ZW1wbGF0ZSh0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8e30+LCBvcHRpb25zPzogTnpOb3RpZmljYXRpb25EYXRhT3B0aW9ucyk6IE56Tm90aWZpY2F0aW9uRGF0YUZpbGxlZCB7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlTWVzc2FnZSh7IHRlbXBsYXRlIH0sIG9wdGlvbnMpIGFzIE56Tm90aWZpY2F0aW9uRGF0YUZpbGxlZDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgT3ZlcmxheU1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTnpJY29uTW9kdWxlIH0gZnJvbSAnLi4vaWNvbi9uei1pY29uLm1vZHVsZSc7XG5cbmltcG9ydCB7IE5aX05PVElGSUNBVElPTl9ERUZBVUxUX0NPTkZJR19QUk9WSURFUiB9IGZyb20gJy4vbnotbm90aWZpY2F0aW9uLWNvbmZpZyc7XG5pbXBvcnQgeyBOek5vdGlmaWNhdGlvbkNvbnRhaW5lckNvbXBvbmVudCB9IGZyb20gJy4vbnotbm90aWZpY2F0aW9uLWNvbnRhaW5lci5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpOb3RpZmljYXRpb25Db21wb25lbnQgfSBmcm9tICcuL256LW5vdGlmaWNhdGlvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpOb3RpZmljYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9uei1ub3RpZmljYXRpb24uc2VydmljZSc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHMgICAgICAgIDogWyBDb21tb25Nb2R1bGUsIE92ZXJsYXlNb2R1bGUsIE56SWNvbk1vZHVsZSBdLFxuICBkZWNsYXJhdGlvbnMgICA6IFsgTnpOb3RpZmljYXRpb25Db21wb25lbnQsIE56Tm90aWZpY2F0aW9uQ29udGFpbmVyQ29tcG9uZW50IF0sXG4gIHByb3ZpZGVycyAgICAgIDogWyBOWl9OT1RJRklDQVRJT05fREVGQVVMVF9DT05GSUdfUFJPVklERVIsIE56Tm90aWZpY2F0aW9uU2VydmljZSBdLFxuICBlbnRyeUNvbXBvbmVudHM6IFsgTnpOb3RpZmljYXRpb25Db250YWluZXJDb21wb25lbnQgXVxufSlcbmV4cG9ydCBjbGFzcyBOek5vdGlmaWNhdGlvbk1vZHVsZSB7XG59XG4iLCJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5wdXQsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBPdXRwdXQsXG4gIFRlbXBsYXRlUmVmLFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgaXNJbnRlZ2VyIH0gZnJvbSAnLi4vY29yZS91dGlsL2NoZWNrJztcbmltcG9ydCB7IHRvQm9vbGVhbiB9IGZyb20gJy4uL2NvcmUvdXRpbC9jb252ZXJ0JztcbmltcG9ydCB7IE56STE4blNlcnZpY2UgfSBmcm9tICcuLi9pMThuL256LWkxOG4uc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICAgICAgOiAnbnotcGFnaW5hdGlvbicsXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxuICB0ZW1wbGF0ZVVybCAgICAgICAgOiAnLi9uei1wYWdpbmF0aW9uLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBOelBhZ2luYXRpb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgdW5zdWJzY3JpYmUkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICBsb2NhbGU6IGFueSA9IHt9O1xuICBAVmlld0NoaWxkKCdyZW5kZXJJdGVtVGVtcGxhdGUnKSBwcml2YXRlIF9pdGVtUmVuZGVyOiBUZW1wbGF0ZVJlZjx7ICRpbXBsaWNpdDogJ3BhZ2UnIHwgJ3ByZXYnIHwgJ25leHQnLCBwYWdlOiBudW1iZXIgfT47XG4gIHByaXZhdGUgX3Nob3dTaXplQ2hhbmdlciA9IGZhbHNlO1xuICBwcml2YXRlIF9zaG93UXVpY2tKdW1wZXIgPSBmYWxzZTtcbiAgcHJpdmF0ZSBfc2ltcGxlID0gZmFsc2U7XG4gIHByaXZhdGUgX2hpZGVPblNpbmdsZVBhZ2UgPSBmYWxzZTtcbiAgcHJpdmF0ZSBfcGFnZVNpemUgPSAxMDtcbiAgcHJpdmF0ZSBfcGFnZVNpemVPcHRpb25zID0gWyAxMCwgMjAsIDMwLCA0MCBdO1xuICBwcml2YXRlIF90b3RhbDogbnVtYmVyO1xuICBwcml2YXRlIF9wYWdlSW5kZXggPSAxO1xuICBmaXJzdEluZGV4ID0gMTtcbiAgcGFnZXMgPSBbXTtcbiAgQElucHV0KCkgbnpTaG93VG90YWw6IFRlbXBsYXRlUmVmPHsgJGltcGxpY2l0OiBudW1iZXIsIHJhbmdlOiBbIG51bWJlciwgbnVtYmVyIF0gfT47XG4gIEBJbnB1dCgpIG56SW5UYWJsZSA9IGZhbHNlO1xuICBASW5wdXQoKSBuelNpemU6IHN0cmluZztcbiAgQE91dHB1dCgpIG56UGFnZVNpemVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxudW1iZXI+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgbnpQYWdlSW5kZXhDaGFuZ2U6IEV2ZW50RW1pdHRlcjxudW1iZXI+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIEBJbnB1dCgpXG4gIHNldCBuekl0ZW1SZW5kZXIodmFsdWU6IFRlbXBsYXRlUmVmPHsgJGltcGxpY2l0OiAncGFnZScgfCAncHJldicgfCAnbmV4dCcsIHBhZ2U6IG51bWJlciB9Pikge1xuICAgIHRoaXMuX2l0ZW1SZW5kZXIgPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBuekl0ZW1SZW5kZXIoKTogVGVtcGxhdGVSZWY8eyAkaW1wbGljaXQ6ICdwYWdlJyB8ICdwcmV2JyB8ICduZXh0JywgcGFnZTogbnVtYmVyIH0+IHtcbiAgICByZXR1cm4gdGhpcy5faXRlbVJlbmRlcjtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuelNob3dTaXplQ2hhbmdlcih2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX3Nob3dTaXplQ2hhbmdlciA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBnZXQgbnpTaG93U2l6ZUNoYW5nZXIoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3Nob3dTaXplQ2hhbmdlcjtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekhpZGVPblNpbmdsZVBhZ2UodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9oaWRlT25TaW5nbGVQYWdlID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuekhpZGVPblNpbmdsZVBhZ2UoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2hpZGVPblNpbmdsZVBhZ2U7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpTaG93UXVpY2tKdW1wZXIodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9zaG93UXVpY2tKdW1wZXIgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56U2hvd1F1aWNrSnVtcGVyKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9zaG93UXVpY2tKdW1wZXI7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpTaW1wbGUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9zaW1wbGUgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56U2ltcGxlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9zaW1wbGU7XG4gIH1cblxuICAvKiogcGFnZSBzaXplIGNoYW5nZXIgc2VsZWN0IHZhbHVlcyAqL1xuICBASW5wdXQoKVxuICBzZXQgbnpQYWdlU2l6ZU9wdGlvbnModmFsdWU6IG51bWJlcltdKSB7XG4gICAgaWYgKHZhbHVlICYmIHZhbHVlLmxlbmd0aCkge1xuICAgICAgdGhpcy5fcGFnZVNpemVPcHRpb25zID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgZ2V0IG56UGFnZVNpemVPcHRpb25zKCk6IG51bWJlcltdIHtcbiAgICByZXR1cm4gdGhpcy5fcGFnZVNpemVPcHRpb25zO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56UGFnZUluZGV4KHZhbHVlOiBudW1iZXIpIHtcbiAgICBpZiAodGhpcy5fcGFnZUluZGV4ID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPiB0aGlzLmxhc3RJbmRleCkge1xuICAgICAgdGhpcy5fcGFnZUluZGV4ID0gdGhpcy5sYXN0SW5kZXg7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA8IHRoaXMuZmlyc3RJbmRleCkge1xuICAgICAgdGhpcy5fcGFnZUluZGV4ID0gdGhpcy5maXJzdEluZGV4O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9wYWdlSW5kZXggPSBOdW1iZXIodmFsdWUpO1xuICAgIH1cbiAgICB0aGlzLmJ1aWxkSW5kZXhlcygpO1xuICB9XG5cbiAgZ2V0IG56UGFnZUluZGV4KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3BhZ2VJbmRleDtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuelBhZ2VTaXplKHZhbHVlOiBudW1iZXIpIHtcbiAgICBpZiAodmFsdWUgPT09IHRoaXMuX3BhZ2VTaXplKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX3BhZ2VTaXplID0gdmFsdWU7XG4gICAgY29uc3QgcGFnZUluZGV4T3ZlcmZsb3cgPSB0aGlzLmNoZWNrTGFzdEluZGV4T3ZlcmZsb3coKTtcbiAgICBpZiAocGFnZUluZGV4T3ZlcmZsb3cpIHtcbiAgICAgIHRoaXMubnpQYWdlSW5kZXggPSB0aGlzLmxhc3RJbmRleDtcbiAgICAgIHRoaXMubnpQYWdlSW5kZXhDaGFuZ2UuZW1pdCh0aGlzLmxhc3RJbmRleCk7XG4gICAgfVxuICAgIHRoaXMuYnVpbGRJbmRleGVzKCk7XG4gIH1cblxuICBnZXQgbnpQYWdlU2l6ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9wYWdlU2l6ZTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuelRvdGFsKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl90b3RhbCA9IHZhbHVlO1xuICAgIHRoaXMuYnVpbGRJbmRleGVzKCk7XG4gIH1cblxuICBnZXQgbnpUb3RhbCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl90b3RhbDtcbiAgfVxuXG4gIGp1bXBQYWdlKGluZGV4OiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAoaW5kZXggPT09IHRoaXMubnpQYWdlSW5kZXgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaW5kZXggPCB0aGlzLmZpcnN0SW5kZXgpIHtcbiAgICAgIHRoaXMubnpQYWdlSW5kZXggPSB0aGlzLmZpcnN0SW5kZXg7XG4gICAgfSBlbHNlIGlmIChpbmRleCA+IHRoaXMubGFzdEluZGV4KSB7XG4gICAgICB0aGlzLm56UGFnZUluZGV4ID0gdGhpcy5sYXN0SW5kZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubnpQYWdlSW5kZXggPSBpbmRleDtcbiAgICB9XG4gICAgdGhpcy5uelBhZ2VJbmRleENoYW5nZS5lbWl0KHRoaXMubnpQYWdlSW5kZXgpO1xuICB9XG5cbiAganVtcFByZUZpdmUoKTogdm9pZCB7XG4gICAgdGhpcy5qdW1wUGFnZSh0aGlzLm56UGFnZUluZGV4IC0gNSk7XG4gIH1cblxuICBqdW1wTmV4dEZpdmUoKTogdm9pZCB7XG4gICAgdGhpcy5qdW1wUGFnZSh0aGlzLm56UGFnZUluZGV4ICsgNSk7XG4gIH1cblxuICBqdW1wUHJlT25lKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzRmlyc3RJbmRleCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmp1bXBQYWdlKHRoaXMubnpQYWdlSW5kZXggLSAxKTtcbiAgfVxuXG4gIGp1bXBOZXh0T25lKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzTGFzdEluZGV4KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuanVtcFBhZ2UodGhpcy5uelBhZ2VJbmRleCArIDEpO1xuICB9XG5cbiAgb25QYWdlU2l6ZUNoYW5nZSgkZXZlbnQ6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMubnpQYWdlU2l6ZSA9ICRldmVudDtcbiAgICB0aGlzLm56UGFnZVNpemVDaGFuZ2UuZW1pdCgkZXZlbnQpO1xuICB9XG5cbiAgaGFuZGxlS2V5RG93bihlOiBLZXlib2FyZEV2ZW50LCBpbnB1dDogSFRNTElucHV0RWxlbWVudCwgY2xlYXJJbnB1dFZhbHVlOiBib29sZWFuKTogdm9pZCB7XG4gICAgY29uc3QgdGFyZ2V0ID0gaW5wdXQ7XG4gICAgY29uc3QgaW5wdXRWYWx1ZSA9IHRhcmdldC52YWx1ZTtcbiAgICBjb25zdCBjdXJyZW50SW5wdXRWYWx1ZSA9IHRoaXMubnpQYWdlSW5kZXg7XG4gICAgbGV0IHZhbHVlO1xuXG4gICAgaWYgKGlucHV0VmFsdWUgPT09ICcnKSB7XG4gICAgICB2YWx1ZSA9IGlucHV0VmFsdWU7XG4gICAgfSBlbHNlIGlmIChpc05hTihOdW1iZXIoaW5wdXRWYWx1ZSkpKSB7XG4gICAgICB2YWx1ZSA9IGN1cnJlbnRJbnB1dFZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSA9IE51bWJlcihpbnB1dFZhbHVlKTtcbiAgICB9XG4gICAgdGhpcy5oYW5kbGVDaGFuZ2UodmFsdWUsIHRhcmdldCwgY2xlYXJJbnB1dFZhbHVlKTtcbiAgfVxuXG4gIGlzVmFsaWQocGFnZTogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGlzSW50ZWdlcihwYWdlKSAmJiAocGFnZSA+PSAxKSAmJiAocGFnZSAhPT0gdGhpcy5uelBhZ2VJbmRleCkgJiYgKHBhZ2UgPD0gdGhpcy5sYXN0SW5kZXgpO1xuICB9XG5cbiAgaGFuZGxlQ2hhbmdlKHZhbHVlOiBudW1iZXIsIHRhcmdldDogSFRNTElucHV0RWxlbWVudCwgY2xlYXJJbnB1dFZhbHVlOiBib29sZWFuKTogdm9pZCB7XG4gICAgY29uc3QgcGFnZSA9IHZhbHVlO1xuICAgIGlmICh0aGlzLmlzVmFsaWQocGFnZSkpIHtcbiAgICAgIHRoaXMubnpQYWdlSW5kZXggPSBwYWdlO1xuICAgICAgdGhpcy5uelBhZ2VJbmRleENoYW5nZS5lbWl0KHRoaXMubnpQYWdlSW5kZXgpO1xuICAgIH1cbiAgICBpZiAoY2xlYXJJbnB1dFZhbHVlKSB7XG4gICAgICB0YXJnZXQudmFsdWUgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXQudmFsdWUgPSBgJHt0aGlzLm56UGFnZUluZGV4fWA7XG4gICAgfVxuICB9XG5cbiAgY2hlY2tMYXN0SW5kZXhPdmVyZmxvdygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5uelBhZ2VJbmRleCA+IHRoaXMubGFzdEluZGV4O1xuICB9XG5cbiAgZ2V0IGxhc3RJbmRleCgpOiBudW1iZXIge1xuICAgIHJldHVybiBNYXRoLmNlaWwodGhpcy5uelRvdGFsIC8gdGhpcy5uelBhZ2VTaXplKTtcbiAgfVxuXG4gIC8qKiBnZW5lcmF0ZSBpbmRleGVzIGxpc3QgKi9cbiAgYnVpbGRJbmRleGVzKCk6IHZvaWQge1xuICAgIGNvbnN0IHRtcFBhZ2VzID0gW107XG4gICAgaWYgKHRoaXMubGFzdEluZGV4IDw9IDkpIHtcbiAgICAgIGZvciAobGV0IGkgPSAyOyBpIDw9IHRoaXMubGFzdEluZGV4IC0gMTsgaSsrKSB7XG4gICAgICAgIHRtcFBhZ2VzLnB1c2goeyBpbmRleDogaSB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgY3VycmVudCA9ICt0aGlzLm56UGFnZUluZGV4O1xuICAgICAgbGV0IGxlZnQgPSBNYXRoLm1heCgyLCBjdXJyZW50IC0gMik7XG4gICAgICBsZXQgcmlnaHQgPSBNYXRoLm1pbihjdXJyZW50ICsgMiwgdGhpcy5sYXN0SW5kZXggLSAxKTtcblxuICAgICAgaWYgKGN1cnJlbnQgLSAxIDw9IDIpIHtcbiAgICAgICAgcmlnaHQgPSA1O1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5sYXN0SW5kZXggLSBjdXJyZW50IDw9IDIpIHtcbiAgICAgICAgbGVmdCA9IHRoaXMubGFzdEluZGV4IC0gNDtcbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQgaSA9IGxlZnQ7IGkgPD0gcmlnaHQ7IGkrKykge1xuICAgICAgICB0bXBQYWdlcy5wdXNoKHsgaW5kZXg6IGkgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMucGFnZXMgPSB0bXBQYWdlcztcbiAgfVxuXG4gIGdldCBpc0xhc3RJbmRleCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5uelBhZ2VJbmRleCA9PT0gdGhpcy5sYXN0SW5kZXg7XG4gIH1cblxuICBnZXQgaXNGaXJzdEluZGV4KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLm56UGFnZUluZGV4ID09PSB0aGlzLmZpcnN0SW5kZXg7XG4gIH1cblxuICBtaW4odmFsMTogbnVtYmVyLCB2YWwyOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiBNYXRoLm1pbih2YWwxLCB2YWwyKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaTE4bjogTnpJMThuU2VydmljZSkge1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5pMThuLmxvY2FsZUNoYW5nZS5waXBlKHRha2VVbnRpbCh0aGlzLnVuc3Vic2NyaWJlJCkpLnN1YnNjcmliZSgoKSA9PiB0aGlzLmxvY2FsZSA9IHRoaXMuaTE4bi5nZXRMb2NhbGVEYXRhKCdQYWdpbmF0aW9uJykpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy51bnN1YnNjcmliZSQubmV4dCgpO1xuICAgIHRoaXMudW5zdWJzY3JpYmUkLmNvbXBsZXRlKCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IE56STE4bk1vZHVsZSB9IGZyb20gJy4uL2kxOG4vbnotaTE4bi5tb2R1bGUnO1xuaW1wb3J0IHsgTnpJY29uTW9kdWxlIH0gZnJvbSAnLi4vaWNvbi9uei1pY29uLm1vZHVsZSc7XG5pbXBvcnQgeyBOelNlbGVjdE1vZHVsZSB9IGZyb20gJy4uL3NlbGVjdC9uei1zZWxlY3QubW9kdWxlJztcblxuaW1wb3J0IHsgTnpQYWdpbmF0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi9uei1wYWdpbmF0aW9uLmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogWyBOelBhZ2luYXRpb25Db21wb25lbnQgXSxcbiAgZXhwb3J0cyAgICAgOiBbIE56UGFnaW5hdGlvbkNvbXBvbmVudCBdLFxuICBpbXBvcnRzICAgICA6IFsgQ29tbW9uTW9kdWxlLCBGb3Jtc01vZHVsZSwgTnpTZWxlY3RNb2R1bGUsIE56STE4bk1vZHVsZSwgTnpJY29uTW9kdWxlIF1cbn0pXG5cbmV4cG9ydCBjbGFzcyBOelBhZ2luYXRpb25Nb2R1bGUge1xufVxuIiwiaW1wb3J0IHtcbiAgQW5pbWF0aW9uRXZlbnRcbn0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQge1xuICBDZGtDb25uZWN0ZWRPdmVybGF5LFxuICBDZGtPdmVybGF5T3JpZ2luLFxuICBDb25uZWN0ZWRPdmVybGF5UG9zaXRpb25DaGFuZ2UsXG4gIENvbm5lY3Rpb25Qb3NpdGlvblBhaXJcbn0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgQ29udGVudENoaWxkLFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LFxuICBPdXRwdXQsXG4gIFRlbXBsYXRlUmVmLFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgZmFkZUFuaW1hdGlvbiB9IGZyb20gJy4uL2NvcmUvYW5pbWF0aW9uL2ZhZGUtYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBERUZBVUxUXzRfUE9TSVRJT05TLCBQT1NJVElPTl9NQVAgfSBmcm9tICcuLi9jb3JlL292ZXJsYXkvb3ZlcmxheS1wb3NpdGlvbi1tYXAnO1xuaW1wb3J0IHsgaXNOb3ROaWwgfSBmcm9tICcuLi9jb3JlL3V0aWwvY2hlY2snO1xuaW1wb3J0IHsgdG9Cb29sZWFuIH0gZnJvbSAnLi4vY29yZS91dGlsL2NvbnZlcnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICAgICAgICAgIDogJ256LXRvb2x0aXAnLFxuICBhbmltYXRpb25zICAgICAgICAgOiBbIGZhZGVBbmltYXRpb24gXSxcbiAgdGVtcGxhdGVVcmwgICAgICAgIDogJy4vbnotdG9vbHRpcC5jb21wb25lbnQuaHRtbCcsXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxuICBzdHlsZXMgICAgICAgICAgICAgOiBbIGBcbiAgICAuYW50LXRvb2x0aXAge1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIH1cbiAgYCBdXG59KVxuZXhwb3J0IGNsYXNzIE56VG9vbFRpcENvbXBvbmVudCB7XG4gIF9oYXNCYWNrZHJvcCA9IGZhbHNlO1xuICBfcHJlZml4ID0gJ2FudC10b29sdGlwLXBsYWNlbWVudCc7XG4gIF9wb3NpdGlvbnM6IENvbm5lY3Rpb25Qb3NpdGlvblBhaXJbXSA9IFsgLi4uREVGQVVMVF80X1BPU0lUSU9OUyBdO1xuICBfY2xhc3NNYXAgPSB7fTtcbiAgX3BsYWNlbWVudCA9ICd0b3AnO1xuICBfdHJpZ2dlciA9ICdob3Zlcic7XG4gIF9jb250ZW50OiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPjtcbiAgb3ZlcmxheU9yaWdpbjogQ2RrT3ZlcmxheU9yaWdpbjtcbiAgaXNDb250ZW50U3RyaW5nOiBib29sZWFuO1xuICBpc1RpdGxlU3RyaW5nOiBib29sZWFuO1xuICB2aXNpYmxlU291cmNlID0gbmV3IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPihmYWxzZSk7XG4gIHZpc2libGUkOiBPYnNlcnZhYmxlPGJvb2xlYW4+ID0gdGhpcy52aXNpYmxlU291cmNlLmFzT2JzZXJ2YWJsZSgpO1xuICBAQ29udGVudENoaWxkKCduelRlbXBsYXRlJykgX3RpdGxlOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPjtcbiAgQFZpZXdDaGlsZCgnb3ZlcmxheScpIG92ZXJsYXk6IENka0Nvbm5lY3RlZE92ZXJsYXk7XG4gIEBPdXRwdXQoKSBuelZpc2libGVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBASW5wdXQoKSBuek92ZXJsYXlDbGFzc05hbWUgPSAnJztcbiAgQElucHV0KCkgbnpPdmVybGF5U3R5bGU6IHsgWyBrZXk6IHN0cmluZyBdOiBzdHJpbmcgfSA9IHt9O1xuICBASW5wdXQoKSBuek1vdXNlRW50ZXJEZWxheSA9IDAuMTU7IC8vIFVuaXQ6IHNlY29uZFxuICBASW5wdXQoKSBuek1vdXNlTGVhdmVEZWxheSA9IDAuMTsgLy8gVW5pdDogc2Vjb25kXG4gIEBJbnB1dCgpXG4gIHNldCBuekNvbnRlbnQodmFsdWU6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+KSB7XG4gICAgdGhpcy5pc0NvbnRlbnRTdHJpbmcgPSAhKHZhbHVlIGluc3RhbmNlb2YgVGVtcGxhdGVSZWYpO1xuICAgIHRoaXMuX2NvbnRlbnQgPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBuekNvbnRlbnQoKTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLl9jb250ZW50O1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56VGl0bGUodmFsdWU6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+KSB7XG4gICAgdGhpcy5pc1RpdGxlU3RyaW5nID0gISh2YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmKTtcbiAgICB0aGlzLl90aXRsZSA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IG56VGl0bGUoKTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLl90aXRsZTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuelZpc2libGUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICBjb25zdCB2aXNpYmxlID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgICBpZiAodGhpcy52aXNpYmxlU291cmNlLnZhbHVlICE9PSB2aXNpYmxlKSB7XG4gICAgICB0aGlzLnZpc2libGVTb3VyY2UubmV4dCh2aXNpYmxlKTtcbiAgICAgIHRoaXMubnpWaXNpYmxlQ2hhbmdlLmVtaXQodmlzaWJsZSk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IG56VmlzaWJsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy52aXNpYmxlU291cmNlLnZhbHVlO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56VHJpZ2dlcih2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fdHJpZ2dlciA9IHZhbHVlO1xuICAgIHRoaXMuX2hhc0JhY2tkcm9wID0gdGhpcy5fdHJpZ2dlciA9PT0gJ2NsaWNrJztcbiAgfVxuXG4gIGdldCBuelRyaWdnZXIoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fdHJpZ2dlcjtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuelBsYWNlbWVudCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgaWYgKHZhbHVlICE9PSB0aGlzLl9wbGFjZW1lbnQpIHtcbiAgICAgIHRoaXMuX3BsYWNlbWVudCA9IHZhbHVlO1xuICAgICAgdGhpcy5fcG9zaXRpb25zLnVuc2hpZnQoUE9TSVRJT05fTUFQWyB0aGlzLm56UGxhY2VtZW50IF0gYXMgQ29ubmVjdGlvblBvc2l0aW9uUGFpcik7XG4gICAgfVxuICB9XG5cbiAgZ2V0IG56UGxhY2VtZW50KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3BsYWNlbWVudDtcbiAgfVxuXG4gIC8vIE1hbnVhbGx5IGZvcmNlIHVwZGF0aW5nIGN1cnJlbnQgb3ZlcmxheSdzIHBvc2l0aW9uXG4gIHVwZGF0ZVBvc2l0aW9uKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLm92ZXJsYXkgJiYgdGhpcy5vdmVybGF5Lm92ZXJsYXlSZWYpIHtcbiAgICAgIHRoaXMub3ZlcmxheS5vdmVybGF5UmVmLnVwZGF0ZVBvc2l0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgb25Qb3NpdGlvbkNoYW5nZSgkZXZlbnQ6IENvbm5lY3RlZE92ZXJsYXlQb3NpdGlvbkNoYW5nZSk6IHZvaWQge1xuICAgIGZvciAoY29uc3Qga2V5IGluIFBPU0lUSU9OX01BUCkge1xuICAgICAgaWYgKEpTT04uc3RyaW5naWZ5KCRldmVudC5jb25uZWN0aW9uUGFpcikgPT09IEpTT04uc3RyaW5naWZ5KFBPU0lUSU9OX01BUFsga2V5IF0pKSB7XG4gICAgICAgIHRoaXMubnpQbGFjZW1lbnQgPSBrZXk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnNldENsYXNzTWFwKCk7XG4gICAgLyoqIFRPRE8gbWF5IGNhdXNlIHBlcmZvcm1hbmNlIHByb2JsZW0gKi9cbiAgICB0aGlzLmNkci5kZXRlY3RDaGFuZ2VzKCk7XG4gIH1cblxuICBzaG93KCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5pc0NvbnRlbnRFbXB0eSgpKSB7XG4gICAgICB0aGlzLm56VmlzaWJsZSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgaGlkZSgpOiB2b2lkIHtcbiAgICB0aGlzLm56VmlzaWJsZSA9IGZhbHNlO1xuICB9XG5cbiAgX2FmdGVyVmlzaWJpbGl0eUFuaW1hdGlvbihlOiBBbmltYXRpb25FdmVudCk6IHZvaWQge1xuICAgIGlmIChlLnRvU3RhdGUgPT09ICdmYWxzZScgJiYgIXRoaXMubnpWaXNpYmxlKSB7XG4gICAgICB0aGlzLm56VmlzaWJsZUNoYW5nZS5lbWl0KGZhbHNlKTtcbiAgICB9XG4gICAgaWYgKGUudG9TdGF0ZSA9PT0gJ3RydWUnICYmIHRoaXMubnpWaXNpYmxlKSB7XG4gICAgICB0aGlzLm56VmlzaWJsZUNoYW5nZS5lbWl0KHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIHNldENsYXNzTWFwKCk6IHZvaWQge1xuICAgIHRoaXMuX2NsYXNzTWFwID0ge1xuICAgICAgWyB0aGlzLm56T3ZlcmxheUNsYXNzTmFtZSBdICAgICAgICAgICAgIDogdHJ1ZSxcbiAgICAgIFsgYCR7dGhpcy5fcHJlZml4fS0ke3RoaXMuX3BsYWNlbWVudH1gIF06IHRydWVcbiAgICB9O1xuICB9XG5cbiAgc2V0T3ZlcmxheU9yaWdpbihvcmlnaW46IENka092ZXJsYXlPcmlnaW4pOiB2b2lkIHtcbiAgICB0aGlzLm92ZXJsYXlPcmlnaW4gPSBvcmlnaW47XG4gIH1cblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZikge1xuICB9XG5cbiAgaXNDb250ZW50RW1wdHkoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaXNUaXRsZVN0cmluZyA/ICh0aGlzLm56VGl0bGUgPT09ICcnIHx8ICFpc05vdE5pbCh0aGlzLm56VGl0bGUpKSA6IGZhbHNlOyAvLyBQaXR5LCBjYW4ndCBkZXRlY3Qgd2hldGhlciBuelRlbXBsYXRlIGlzIGVtcHR5IGR1ZSB0byBjYW4ndCBnZXQgaXQncyBjb250ZW50IGJlZm9yZSBzaG93biB1cFxuICB9XG59XG4iLCJpbXBvcnQge1xuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgQ29tcG9uZW50LFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LFxuICBPdXRwdXRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBmYWRlQW5pbWF0aW9uIH0gZnJvbSAnLi4vY29yZS9hbmltYXRpb24vZmFkZS1hbmltYXRpb25zJztcbmltcG9ydCB7IHRvQm9vbGVhbiB9IGZyb20gJy4uL2NvcmUvdXRpbC9jb252ZXJ0JztcbmltcG9ydCB7IE56VG9vbFRpcENvbXBvbmVudCB9IGZyb20gJy4uL3Rvb2x0aXAvbnotdG9vbHRpcC5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICAgICAgICAgIDogJ256LXBvcGNvbmZpcm0nLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgYW5pbWF0aW9ucyAgICAgICAgIDogWyBmYWRlQW5pbWF0aW9uIF0sXG4gIHRlbXBsYXRlVXJsICAgICAgICA6ICcuL256LXBvcGNvbmZpcm0uY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZXMgICAgICAgICAgICAgOiBbIGBcbiAgICAuYW50LXBvcG92ZXIge1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIH1cbiAgYCBdXG59KVxuZXhwb3J0IGNsYXNzIE56UG9wY29uZmlybUNvbXBvbmVudCBleHRlbmRzIE56VG9vbFRpcENvbXBvbmVudCB7XG4gIF9jb25kaXRpb24gPSBmYWxzZTtcbiAgX3ByZWZpeCA9ICdhbnQtcG9wb3Zlci1wbGFjZW1lbnQnO1xuICBfdHJpZ2dlciA9ICdjbGljayc7XG4gIF9oYXNCYWNrZHJvcCA9IHRydWU7XG4gIEBPdXRwdXQoKSBuek9uQ2FuY2VsOiBFdmVudEVtaXR0ZXI8dm9pZD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSBuek9uQ29uZmlybTogRXZlbnRFbWl0dGVyPHZvaWQ+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIEBJbnB1dCgpIG56T2tUZXh0OiBzdHJpbmc7XG4gIEBJbnB1dCgpIG56T2tUeXBlOiBzdHJpbmcgPSAncHJpbWFyeSc7XG4gIEBJbnB1dCgpIG56Q2FuY2VsVGV4dDogc3RyaW5nO1xuXG4gIEBJbnB1dCgpXG4gIHNldCBuekNvbmRpdGlvbih2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2NvbmRpdGlvbiA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBnZXQgbnpDb25kaXRpb24oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmRpdGlvbjtcbiAgfVxuXG4gIHNob3coKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLm56Q29uZGl0aW9uKSB7XG4gICAgICB0aGlzLm56VmlzaWJsZSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub25Db25maXJtKCk7XG4gICAgfVxuICB9XG5cbiAgb25DYW5jZWwoKTogdm9pZCB7XG4gICAgdGhpcy5uek9uQ2FuY2VsLmVtaXQoKTtcbiAgICB0aGlzLm56VmlzaWJsZSA9IGZhbHNlO1xuICB9XG5cbiAgb25Db25maXJtKCk6IHZvaWQge1xuICAgIHRoaXMubnpPbkNvbmZpcm0uZW1pdCgpO1xuICAgIHRoaXMubnpWaXNpYmxlID0gZmFsc2U7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihjZHI6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gICAgc3VwZXIoY2RyKTtcbiAgfVxuXG59XG4iLCJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDb21wb25lbnRGYWN0b3J5LFxuICBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBIb3N0QmluZGluZyxcbiAgSW5wdXQsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBPcHRpb25hbCxcbiAgT3V0cHV0LFxuICBSZW5kZXJlcjIsXG4gIFRlbXBsYXRlUmVmLFxuICBWaWV3Q29udGFpbmVyUmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBpc05vdE5pbCB9IGZyb20gJy4uL2NvcmUvdXRpbC9jaGVjayc7XG5pbXBvcnQgeyBOelRvb2xUaXBDb21wb25lbnQgfSBmcm9tICcuL256LXRvb2x0aXAuY29tcG9uZW50JztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW256LXRvb2x0aXBdJ1xufSlcbmV4cG9ydCBjbGFzcyBOelRvb2x0aXBEaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkluaXQsIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgdW5zdWJzY3JpYmUkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICAvLyBbTk9URV0gSGVyZSBoYXJkIGNvZGVkLCBhbmQgbnpUaXRsZSB1c2VkIG9ubHkgdW5kZXIgTnpUb29sdGlwRGlyZWN0aXZlIGN1cnJlbnRseS5cbiAgaXNUb29sdGlwT3BlbjogYm9vbGVhbiA9IGZhbHNlO1xuICBpc0R5bmFtaWNUb29sdGlwID0gZmFsc2U7IC8vIEluZGljYXRlIHdoZXRoZXIgY3VycmVudCB0b29sdGlwIGlzIGR5bmFtaWMgY3JlYXRlZFxuICBkZWxheVRpbWVyOyAvLyBUaW1lciBmb3IgZGVsYXkgZW50ZXIvbGVhdmVcbiAgX3RpdGxlOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPjtcbiAgX2NvbnRlbnQ6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+O1xuICBfb3ZlcmxheUNsYXNzTmFtZTogc3RyaW5nO1xuICBfb3ZlcmxheVN0eWxlOiB7IFsga2V5OiBzdHJpbmcgXTogc3RyaW5nIH07XG4gIF9tb3VzZUVudGVyRGVsYXk6IG51bWJlcjtcbiAgX21vdXNlTGVhdmVEZWxheTogbnVtYmVyO1xuICBfdmlzaWJsZTogYm9vbGVhbjtcbiAgX3RyaWdnZXI6IHN0cmluZztcbiAgX3BsYWNlbWVudDogc3RyaW5nO1xuICBmYWN0b3J5OiBDb21wb25lbnRGYWN0b3J5PE56VG9vbFRpcENvbXBvbmVudD4gPSB0aGlzLnJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KE56VG9vbFRpcENvbXBvbmVudCk7XG4gIEBPdXRwdXQoKSBuelZpc2libGVDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG5cbiAgQElucHV0KCduei10b29sdGlwJylcbiAgc2V0IG56VGl0bGUodGl0bGU6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+KSB7XG4gICAgdGhpcy5fdGl0bGUgPSB0aXRsZTtcbiAgICB0aGlzLnVwZGF0ZUNvbXBWYWx1ZSgnbnpUaXRsZScsIHRpdGxlKTtcbiAgfVxuXG4gIGdldCBuelRpdGxlKCk6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5fdGl0bGU7XG4gIH1cblxuICBASW5wdXQoJ256VGl0bGUnKVxuICBzZXQgc2V0VGl0bGUodGl0bGU6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+KSB7XG4gICAgdGhpcy5uelRpdGxlID0gdGl0bGU7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpDb250ZW50KHZhbHVlOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPikge1xuICAgIHRoaXMuX2NvbnRlbnQgPSB2YWx1ZTtcbiAgICB0aGlzLnVwZGF0ZUNvbXBWYWx1ZSgnbnpDb250ZW50JywgdmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56Q29udGVudCgpOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRlbnQ7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpPdmVybGF5Q2xhc3NOYW1lKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9vdmVybGF5Q2xhc3NOYW1lID0gdmFsdWU7XG4gICAgdGhpcy51cGRhdGVDb21wVmFsdWUoJ256T3ZlcmxheUNsYXNzTmFtZScsIHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuek92ZXJsYXlDbGFzc05hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fb3ZlcmxheUNsYXNzTmFtZTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuek92ZXJsYXlTdHlsZSh2YWx1ZTogeyBbIGtleTogc3RyaW5nIF06IHN0cmluZyB9KSB7XG4gICAgdGhpcy5fb3ZlcmxheVN0eWxlID0gdmFsdWU7XG4gICAgdGhpcy51cGRhdGVDb21wVmFsdWUoJ256T3ZlcmxheVN0eWxlJywgdmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56T3ZlcmxheVN0eWxlKCk6IHsgWyBrZXk6IHN0cmluZyBdOiBzdHJpbmcgfSB7XG4gICAgcmV0dXJuIHRoaXMuX292ZXJsYXlTdHlsZTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuek1vdXNlRW50ZXJEZWxheSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fbW91c2VFbnRlckRlbGF5ID0gdmFsdWU7XG4gICAgdGhpcy51cGRhdGVDb21wVmFsdWUoJ256TW91c2VFbnRlckRlbGF5JywgdmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56TW91c2VFbnRlckRlbGF5KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX21vdXNlRW50ZXJEZWxheTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuek1vdXNlTGVhdmVEZWxheSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fbW91c2VMZWF2ZURlbGF5ID0gdmFsdWU7XG4gICAgdGhpcy51cGRhdGVDb21wVmFsdWUoJ256TW91c2VMZWF2ZURlbGF5JywgdmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56TW91c2VMZWF2ZURlbGF5KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX21vdXNlRW50ZXJEZWxheTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuelZpc2libGUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl92aXNpYmxlID0gdmFsdWU7XG4gICAgdGhpcy51cGRhdGVDb21wVmFsdWUoJ256VmlzaWJsZScsIHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuelZpc2libGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3Zpc2libGU7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpUcmlnZ2VyKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl90cmlnZ2VyID0gdmFsdWU7XG4gICAgdGhpcy51cGRhdGVDb21wVmFsdWUoJ256VHJpZ2dlcicsIHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuelRyaWdnZXIoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fdHJpZ2dlcjtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuelBsYWNlbWVudCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fcGxhY2VtZW50ID0gdmFsdWU7XG4gICAgdGhpcy51cGRhdGVDb21wVmFsdWUoJ256UGxhY2VtZW50JywgdmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56UGxhY2VtZW50KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3BsYWNlbWVudDtcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW50LXRvb2x0aXAtb3BlbicpXG4gIGdldCBpc09wZW4oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaXNUb29sdGlwT3BlbjtcbiAgfVxuXG4gIHByaXZhdGUgc2hvdygpOiB2b2lkIHtcbiAgICB0aGlzLnRvb2x0aXAuc2hvdygpO1xuICAgIHRoaXMuaXNUb29sdGlwT3BlbiA9IHRydWU7XG4gIH1cblxuICBwcml2YXRlIGhpZGUoKTogdm9pZCB7XG4gICAgdGhpcy50b29sdGlwLmhpZGUoKTtcbiAgICB0aGlzLmlzVG9vbHRpcE9wZW4gPSBmYWxzZTtcbiAgfVxuXG4gIHByaXZhdGUgZGVsYXlFbnRlckxlYXZlKGlzT3JpZ2luOiBib29sZWFuLCBpc0VudGVyOiBib29sZWFuLCBkZWxheTogbnVtYmVyID0gLTEpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5kZWxheVRpbWVyKSB7IC8vIENsZWFyIHRpbWVyIGR1cmluZyB0aGUgZGVsYXkgdGltZVxuICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLmRlbGF5VGltZXIpO1xuICAgICAgdGhpcy5kZWxheVRpbWVyID0gbnVsbDtcbiAgICB9IGVsc2UgaWYgKGRlbGF5ID4gMCkge1xuICAgICAgdGhpcy5kZWxheVRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmRlbGF5VGltZXIgPSBudWxsO1xuICAgICAgICBpc0VudGVyID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcbiAgICAgIH0sIGRlbGF5ICogMTAwMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlzRW50ZXIgJiYgaXNPcmlnaW4gPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpOyAvLyBbQ29tcGF0aWJsZV0gVGhlIFwiaXNPcmlnaW5cIiBpcyB1c2VkIGR1ZSB0byB0aGUgdG9vbHRpcCB3aWxsIG5vdCBoaWRlIGltbWVkaWF0ZWx5IChtYXkgY2F1c2VkIGJ5IHRoZSBmYWRlLW91dCBhbmltYXRpb24pXG4gICAgfVxuICB9XG5cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICB1cGRhdGVDb21wVmFsdWUoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pc0R5bmFtaWNUb29sdGlwICYmIGlzTm90TmlsKHZhbHVlKSkge1xuICAgICAgdGhpcy50b29sdGlwWyBrZXkgXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgIHB1YmxpYyBob3N0VmlldzogVmlld0NvbnRhaW5lclJlZixcbiAgICBwdWJsaWMgcmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICBwdWJsaWMgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBAT3B0aW9uYWwoKSBwdWJsaWMgdG9vbHRpcDogTnpUb29sVGlwQ29tcG9uZW50KSB7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAvLyBTdXBwb3J0IGZhc3RlciB0b29sdGlwIG1vZGU6IDxhIG56LXRvb2x0aXA9XCJ4eHhcIj48L2E+LiBbTk9URV0gVXNlZCBvbmx5IHVuZGVyIE56VG9vbHRpcERpcmVjdGl2ZSBjdXJyZW50bHkuXG4gICAgaWYgKCF0aGlzLnRvb2x0aXApIHtcbiAgICAgIGNvbnN0IHRvb2x0aXBDb21wb25lbnQgPSB0aGlzLmhvc3RWaWV3LmNyZWF0ZUNvbXBvbmVudCh0aGlzLmZhY3RvcnkpO1xuICAgICAgdGhpcy50b29sdGlwID0gdG9vbHRpcENvbXBvbmVudC5pbnN0YW5jZTtcbiAgICAgIC8vIFJlbW92ZSBlbGVtZW50IHdoZW4gdXNlIGRpcmVjdGl2ZSBodHRwczovL2dpdGh1Yi5jb20vTkctWk9SUk8vbmctem9ycm8tYW50ZC9pc3N1ZXMvMTk2N1xuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDaGlsZCh0aGlzLnJlbmRlcmVyLnBhcmVudE5vZGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpLCB0b29sdGlwQ29tcG9uZW50LmxvY2F0aW9uLm5hdGl2ZUVsZW1lbnQpO1xuICAgICAgdGhpcy5pc0R5bmFtaWNUb29sdGlwID0gdHJ1ZTtcbiAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSBbICduelRpdGxlJywgJ256Q29udGVudCcsICduek92ZXJsYXlDbGFzc05hbWUnLCAnbnpPdmVybGF5U3R5bGUnLCAnbnpNb3VzZUVudGVyRGVsYXknLCAnbnpNb3VzZUxlYXZlRGVsYXknLCAnbnpWaXNpYmxlJywgJ256VHJpZ2dlcicsICduelBsYWNlbWVudCcgXTtcbiAgICAgIHByb3BlcnRpZXMuZm9yRWFjaChwcm9wZXJ0eSA9PiB0aGlzLnVwZGF0ZUNvbXBWYWx1ZShwcm9wZXJ0eSwgdGhpc1sgcHJvcGVydHkgXSkpO1xuICAgICAgdGhpcy50b29sdGlwLm56VmlzaWJsZUNoYW5nZS5waXBlKHRha2VVbnRpbCh0aGlzLnVuc3Vic2NyaWJlJCksIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCkpLnN1YnNjcmliZShkYXRhID0+IHtcbiAgICAgICAgdGhpcy5fdmlzaWJsZSA9IGRhdGE7XG4gICAgICAgIHRoaXMubnpWaXNpYmxlQ2hhbmdlLmVtaXQoZGF0YSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy50b29sdGlwLnNldE92ZXJsYXlPcmlnaW4odGhpcyk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMudG9vbHRpcC5uelRyaWdnZXIgPT09ICdob3ZlcicpIHtcbiAgICAgIGxldCBvdmVybGF5RWxlbWVudDtcbiAgICAgIHRoaXMucmVuZGVyZXIubGlzdGVuKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnbW91c2VlbnRlcicsICgpID0+IHRoaXMuZGVsYXlFbnRlckxlYXZlKHRydWUsIHRydWUsIHRoaXMudG9vbHRpcC5uek1vdXNlRW50ZXJEZWxheSkpO1xuICAgICAgdGhpcy5yZW5kZXJlci5saXN0ZW4odGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdtb3VzZWxlYXZlJywgKCkgPT4ge1xuICAgICAgICB0aGlzLmRlbGF5RW50ZXJMZWF2ZSh0cnVlLCBmYWxzZSwgdGhpcy50b29sdGlwLm56TW91c2VMZWF2ZURlbGF5KTtcbiAgICAgICAgaWYgKHRoaXMudG9vbHRpcC5vdmVybGF5Lm92ZXJsYXlSZWYgJiYgIW92ZXJsYXlFbGVtZW50KSB7IC8vIE5PVEU6IHdlIGJpbmQgZXZlbnRzIHVuZGVyIFwibW91c2VsZWF2ZVwiIGR1ZSB0byB0aGUgb3ZlcmxheVJlZiBpcyBvbmx5IGNyZWF0ZWQgYWZ0ZXIgdGhlIG92ZXJsYXkgd2FzIGNvbXBsZXRlbHkgc2hvd24gdXBcbiAgICAgICAgICBvdmVybGF5RWxlbWVudCA9IHRoaXMudG9vbHRpcC5vdmVybGF5Lm92ZXJsYXlSZWYub3ZlcmxheUVsZW1lbnQ7XG4gICAgICAgICAgdGhpcy5yZW5kZXJlci5saXN0ZW4ob3ZlcmxheUVsZW1lbnQsICdtb3VzZWVudGVyJywgKCkgPT4gdGhpcy5kZWxheUVudGVyTGVhdmUoZmFsc2UsIHRydWUpKTtcbiAgICAgICAgICB0aGlzLnJlbmRlcmVyLmxpc3RlbihvdmVybGF5RWxlbWVudCwgJ21vdXNlbGVhdmUnLCAoKSA9PiB0aGlzLmRlbGF5RW50ZXJMZWF2ZShmYWxzZSwgZmFsc2UpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnRvb2x0aXAubnpUcmlnZ2VyID09PSAnZm9jdXMnKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLmxpc3Rlbih0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2ZvY3VzJywgKCkgPT4gdGhpcy5zaG93KCkpO1xuICAgICAgdGhpcy5yZW5kZXJlci5saXN0ZW4odGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdibHVyJywgKCkgPT4gdGhpcy5oaWRlKCkpO1xuICAgIH0gZWxzZSBpZiAodGhpcy50b29sdGlwLm56VHJpZ2dlciA9PT0gJ2NsaWNrJykge1xuICAgICAgdGhpcy5yZW5kZXJlci5saXN0ZW4odGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdjbGljaycsIChlKSA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLnVuc3Vic2NyaWJlJC5uZXh0KCk7XG4gICAgdGhpcy51bnN1YnNjcmliZSQuY29tcGxldGUoKTtcbiAgfVxuXG59XG4iLCJpbXBvcnQge1xuICBDb21wb25lbnRGYWN0b3J5LFxuICBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG4gIE9wdGlvbmFsLFxuICBPdXRwdXQsXG4gIFJlbmRlcmVyMixcbiAgVmlld0NvbnRhaW5lclJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGlzdGluY3RVbnRpbENoYW5nZWQsIHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgdG9Cb29sZWFuIH0gZnJvbSAnLi4vY29yZS91dGlsL2NvbnZlcnQnO1xuaW1wb3J0IHsgTnpUb29sdGlwRGlyZWN0aXZlIH0gZnJvbSAnLi4vdG9vbHRpcC9uei10b29sdGlwLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBOelBvcGNvbmZpcm1Db21wb25lbnQgfSBmcm9tICcuL256LXBvcGNvbmZpcm0uY29tcG9uZW50JztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW256LXBvcGNvbmZpcm1dJ1xufSlcbmV4cG9ydCBjbGFzcyBOelBvcGNvbmZpcm1EaXJlY3RpdmUgZXh0ZW5kcyBOelRvb2x0aXBEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgc3ViY2xhc3NVbnN1YnNjcmliZSQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIGZhY3Rvcnk6IENvbXBvbmVudEZhY3Rvcnk8TnpQb3Bjb25maXJtQ29tcG9uZW50PiA9IHRoaXMucmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoTnpQb3Bjb25maXJtQ29tcG9uZW50KTtcbiAgX2NvbmRpdGlvbjogYm9vbGVhbiA9IGZhbHNlO1xuICBfb2tUZXh0OiBzdHJpbmc7XG4gIF9va1R5cGU6IHN0cmluZyA9ICdwcmltYXJ5JztcbiAgX2NhbmNlbFRleHQ6IHN0cmluZztcblxuICBAT3V0cHV0KCkgbnpPbkNhbmNlbDogRXZlbnRFbWl0dGVyPHZvaWQ+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgbnpPbkNvbmZpcm06IEV2ZW50RW1pdHRlcjx2b2lkPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBASW5wdXQoKVxuICBzZXQgbnpPa1RleHQodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX29rVGV4dCA9IHZhbHVlO1xuICAgIHRoaXMudXBkYXRlQ29tcFZhbHVlKCduek9rVGV4dCcsIHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuek9rVGV4dCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9va1RleHQ7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpPa1R5cGUodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX29rVHlwZSA9IHZhbHVlO1xuICAgIHRoaXMudXBkYXRlQ29tcFZhbHVlKCduek9rVHlwZScsIHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuek9rVHlwZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9va1R5cGU7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpDYW5jZWxUZXh0KHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9jYW5jZWxUZXh0ID0gdmFsdWU7XG4gICAgdGhpcy51cGRhdGVDb21wVmFsdWUoJ256Q2FuY2VsVGV4dCcsIHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuekNhbmNlbFRleHQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fY2FuY2VsVGV4dDtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekNvbmRpdGlvbih2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2NvbmRpdGlvbiA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gICAgdGhpcy51cGRhdGVDb21wVmFsdWUoJ256Q29uZGl0aW9uJywgdmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56Q29uZGl0aW9uKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9jb25kaXRpb247XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgIGhvc3RWaWV3OiBWaWV3Q29udGFpbmVyUmVmLFxuICAgIHJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gICAgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBAT3B0aW9uYWwoKSB0b29sdGlwOiBOelBvcGNvbmZpcm1Db21wb25lbnQpIHtcbiAgICBzdXBlcihlbGVtZW50UmVmLCBob3N0VmlldywgcmVzb2x2ZXIsIHJlbmRlcmVyLCB0b29sdGlwKTtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIGlmICghdGhpcy50b29sdGlwKSB7XG4gICAgICBjb25zdCB0b29sdGlwQ29tcG9uZW50ID0gdGhpcy5ob3N0Vmlldy5jcmVhdGVDb21wb25lbnQodGhpcy5mYWN0b3J5KTtcbiAgICAgIHRoaXMudG9vbHRpcCA9IHRvb2x0aXBDb21wb25lbnQuaW5zdGFuY2U7XG4gICAgICAvLyBSZW1vdmUgZWxlbWVudCB3aGVuIHVzZSBkaXJlY3RpdmUgaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvaXNzdWVzLzE5NjdcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2hpbGQodGhpcy5yZW5kZXJlci5wYXJlbnROb2RlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KSwgdG9vbHRpcENvbXBvbmVudC5sb2NhdGlvbi5uYXRpdmVFbGVtZW50KTtcbiAgICAgIHRoaXMuaXNEeW5hbWljVG9vbHRpcCA9IHRydWU7XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0gW1xuICAgICAgICAnbnpUaXRsZScsXG4gICAgICAgICduekNvbnRlbnQnLFxuICAgICAgICAnbnpPdmVybGF5Q2xhc3NOYW1lJyxcbiAgICAgICAgJ256T3ZlcmxheVN0eWxlJyxcbiAgICAgICAgJ256TW91c2VFbnRlckRlbGF5JyxcbiAgICAgICAgJ256TW91c2VMZWF2ZURlbGF5JyxcbiAgICAgICAgJ256VmlzaWJsZScsXG4gICAgICAgICduelRyaWdnZXInLFxuICAgICAgICAnbnpQbGFjZW1lbnQnLFxuICAgICAgICAnbnpPa1RleHQnLFxuICAgICAgICAnbnpPa1R5cGUnLFxuICAgICAgICAnbnpDYW5jZWxUZXh0JyxcbiAgICAgICAgJ256Q29uZGl0aW9uJyBdO1xuICAgICAgcHJvcGVydGllcy5mb3JFYWNoKHByb3BlcnR5ID0+IHRoaXMudXBkYXRlQ29tcFZhbHVlKHByb3BlcnR5LCB0aGlzWyBwcm9wZXJ0eSBdKSk7XG4gICAgICB0aGlzLnRvb2x0aXAubnpWaXNpYmxlQ2hhbmdlLnBpcGUodGFrZVVudGlsKHRoaXMuc3ViY2xhc3NVbnN1YnNjcmliZSQpLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKS5zdWJzY3JpYmUoZGF0YSA9PiB7XG4gICAgICAgIHRoaXMuX3Zpc2libGUgPSBkYXRhO1xuICAgICAgICB0aGlzLm56VmlzaWJsZUNoYW5nZS5lbWl0KGRhdGEpO1xuICAgICAgfSk7XG4gICAgICAodGhpcy50b29sdGlwICBhcyBOelBvcGNvbmZpcm1Db21wb25lbnQpLm56T25DYW5jZWwucGlwZSh0YWtlVW50aWwodGhpcy5zdWJjbGFzc1Vuc3Vic2NyaWJlJCkpLnN1YnNjcmliZShkYXRhID0+IHtcbiAgICAgICAgdGhpcy5uek9uQ2FuY2VsLmVtaXQoKTtcbiAgICAgIH0pO1xuICAgICAgKHRoaXMudG9vbHRpcCAgYXMgTnpQb3Bjb25maXJtQ29tcG9uZW50KS5uek9uQ29uZmlybS5waXBlKHRha2VVbnRpbCh0aGlzLnN1YmNsYXNzVW5zdWJzY3JpYmUkKSkuc3Vic2NyaWJlKGRhdGEgPT4ge1xuICAgICAgICB0aGlzLm56T25Db25maXJtLmVtaXQoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLnRvb2x0aXAuc2V0T3ZlcmxheU9yaWdpbih0aGlzKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuc3ViY2xhc3NVbnN1YnNjcmliZSQubmV4dCgpO1xuICAgIHRoaXMuc3ViY2xhc3NVbnN1YnNjcmliZSQuY29tcGxldGUoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgT3ZlcmxheU1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBOekJ1dHRvbk1vZHVsZSB9IGZyb20gJy4uL2J1dHRvbi9uei1idXR0b24ubW9kdWxlJztcbmltcG9ydCB7IE56STE4bk1vZHVsZSB9IGZyb20gJy4uL2kxOG4vbnotaTE4bi5tb2R1bGUnO1xuaW1wb3J0IHsgTnpJY29uTW9kdWxlIH0gZnJvbSAnLi4vaWNvbi9uei1pY29uLm1vZHVsZSc7XG5cbmltcG9ydCB7IE56UG9wY29uZmlybUNvbXBvbmVudCB9IGZyb20gJy4vbnotcG9wY29uZmlybS5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpQb3Bjb25maXJtRGlyZWN0aXZlIH0gZnJvbSAnLi9uei1wb3Bjb25maXJtLmRpcmVjdGl2ZSc7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9ucyAgIDogWyBOelBvcGNvbmZpcm1Db21wb25lbnQsIE56UG9wY29uZmlybURpcmVjdGl2ZSBdLFxuICBleHBvcnRzICAgICAgICA6IFsgTnpQb3Bjb25maXJtQ29tcG9uZW50LCBOelBvcGNvbmZpcm1EaXJlY3RpdmUgXSxcbiAgaW1wb3J0cyAgICAgICAgOiBbIENvbW1vbk1vZHVsZSwgTnpCdXR0b25Nb2R1bGUsIE92ZXJsYXlNb2R1bGUsIE56STE4bk1vZHVsZSwgTnpJY29uTW9kdWxlIF0sXG4gIGVudHJ5Q29tcG9uZW50czogWyBOelBvcGNvbmZpcm1Db21wb25lbnQgXVxuXG59KVxuXG5leHBvcnQgY2xhc3MgTnpQb3Bjb25maXJtTW9kdWxlIHtcbn1cbiIsImltcG9ydCB7XG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIENvbnRlbnRDaGlsZCxcbiAgVGVtcGxhdGVSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBmYWRlQW5pbWF0aW9uIH0gZnJvbSAnLi4vY29yZS9hbmltYXRpb24vZmFkZS1hbmltYXRpb25zJztcbmltcG9ydCB7IE56VG9vbFRpcENvbXBvbmVudCB9IGZyb20gJy4uL3Rvb2x0aXAvbnotdG9vbHRpcC5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICAgICAgICAgIDogJ256LXBvcG92ZXInLFxuICBhbmltYXRpb25zICAgICAgICAgOiBbIGZhZGVBbmltYXRpb24gXSxcbiAgdGVtcGxhdGVVcmwgICAgICAgIDogJy4vbnotcG9wb3Zlci5jb21wb25lbnQuaHRtbCcsXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxuICBzdHlsZXMgICAgICAgICAgICAgOiBbIGBcbiAgICAuYW50LXBvcG92ZXIge1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIH1cbiAgYCBdXG59KVxuZXhwb3J0IGNsYXNzIE56UG9wb3ZlckNvbXBvbmVudCBleHRlbmRzIE56VG9vbFRpcENvbXBvbmVudCB7XG4gIF9wcmVmaXggPSAnYW50LXBvcG92ZXItcGxhY2VtZW50JztcbiAgQENvbnRlbnRDaGlsZCgnbmV2ZXJVc2VkVGVtcGxhdGUnKSBfdGl0bGU6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+OyAvLyB1c2VkIHRvIHJlbW92ZSBOelRvb2xUaXBDb21wb25lbnQgQENvbnRlbnRDaGlsZCgnbnpUZW1wbGF0ZScpXG4gIEBDb250ZW50Q2hpbGQoJ256VGVtcGxhdGUnKSBfY29udGVudDogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD47XG4gIGNvbnN0cnVjdG9yKGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcbiAgICBzdXBlcihjZHIpO1xuICB9XG59XG4iLCJpbXBvcnQge1xuICBDb21wb25lbnRGYWN0b3J5LFxuICBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgT3B0aW9uYWwsXG4gIFJlbmRlcmVyMixcbiAgVmlld0NvbnRhaW5lclJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE56VG9vbHRpcERpcmVjdGl2ZSB9IGZyb20gJy4uL3Rvb2x0aXAvbnotdG9vbHRpcC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgTnpQb3BvdmVyQ29tcG9uZW50IH0gZnJvbSAnLi9uei1wb3BvdmVyLmNvbXBvbmVudCc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tuei1wb3BvdmVyXSdcbn0pXG5leHBvcnQgY2xhc3MgTnpQb3BvdmVyRGlyZWN0aXZlIGV4dGVuZHMgTnpUb29sdGlwRGlyZWN0aXZlIHtcbiAgZmFjdG9yeTogQ29tcG9uZW50RmFjdG9yeTxOelBvcG92ZXJDb21wb25lbnQ+ID0gdGhpcy5yZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShOelBvcG92ZXJDb21wb25lbnQpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgaG9zdFZpZXc6IFZpZXdDb250YWluZXJSZWYsXG4gICAgcmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgIEBPcHRpb25hbCgpIHRvb2x0aXA6IE56UG9wb3ZlckNvbXBvbmVudCkge1xuICAgIHN1cGVyKGVsZW1lbnRSZWYsIGhvc3RWaWV3LCByZXNvbHZlciwgcmVuZGVyZXIsIHRvb2x0aXApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBPdmVybGF5TW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE56UG9wb3ZlckNvbXBvbmVudCB9IGZyb20gJy4vbnotcG9wb3Zlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpQb3BvdmVyRGlyZWN0aXZlIH0gZnJvbSAnLi9uei1wb3BvdmVyLmRpcmVjdGl2ZSc7XG5cbkBOZ01vZHVsZSh7XG4gIGVudHJ5Q29tcG9uZW50czogWyBOelBvcG92ZXJDb21wb25lbnQgXSxcbiAgZXhwb3J0cyAgICAgICAgOiBbIE56UG9wb3ZlckRpcmVjdGl2ZSwgTnpQb3BvdmVyQ29tcG9uZW50IF0sXG4gIGRlY2xhcmF0aW9ucyAgIDogWyBOelBvcG92ZXJEaXJlY3RpdmUsIE56UG9wb3ZlckNvbXBvbmVudCBdLFxuICBpbXBvcnRzICAgICAgICA6IFsgQ29tbW9uTW9kdWxlLCBPdmVybGF5TW9kdWxlIF1cbn0pXG5cbmV4cG9ydCBjbGFzcyBOelBvcG92ZXJNb2R1bGUge1xufVxuIiwiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBJbnB1dCxcbiAgT25Jbml0XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgdHlwZSBOelByb2dyZXNzR2FwUG9zaXRpb25UeXBlID0gJ3RvcCcgfCAnYm90dG9tJyB8ICdsZWZ0JyB8ICdyaWdodCc7XG5leHBvcnQgdHlwZSBOelByb2dyZXNzU3RhdHVzVHlwZSA9ICdzdWNjZXNzJyB8ICdleGNlcHRpb24nIHwgJ2FjdGl2ZScgfCAnbm9ybWFsJztcbmV4cG9ydCB0eXBlIE56UHJvZ3Jlc3NUeXBlVHlwZSA9ICdsaW5lJyB8ICdjaXJjbGUnIHwgJ2Rhc2hib2FyZCc7XG5pbXBvcnQgeyBpc05vdE5pbCB9IGZyb20gJy4uL2NvcmUvdXRpbC9jaGVjayc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICAgICAgOiAnbnotcHJvZ3Jlc3MnLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgdGVtcGxhdGVVcmwgICAgICAgIDogJy4vbnotcHJvZ3Jlc3MuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIE56UHJvZ3Jlc3NDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBwcml2YXRlIF9nYXBEZWdyZWUgPSAwO1xuICBwcml2YXRlIF9nYXBQb3NpdGlvbjogTnpQcm9ncmVzc0dhcFBvc2l0aW9uVHlwZSA9ICd0b3AnO1xuICBwcml2YXRlIF9wZXJjZW50ID0gMDtcbiAgcHJpdmF0ZSBfc3RhdHVzOiBOelByb2dyZXNzU3RhdHVzVHlwZSA9ICdub3JtYWwnO1xuICBwcml2YXRlIF9jYWNoZVN0YXR1czogTnpQcm9ncmVzc1N0YXR1c1R5cGUgPSAnbm9ybWFsJztcbiAgcHJpdmF0ZSBfc3Ryb2tlV2lkdGggPSA4O1xuICBwcml2YXRlIF9zaXplID0gJ2RlZmF1bHQnO1xuICBwcml2YXRlIF90eXBlOiBOelByb2dyZXNzVHlwZVR5cGUgPSAnbGluZSc7XG4gIHByaXZhdGUgX2Zvcm1hdCA9IChwZXJjZW50OiBudW1iZXIpOiBzdHJpbmcgPT4gYCR7cGVyY2VudH0lYDtcbiAgdHJhaWxQYXRoU3R5bGU6IHsgWyBrZXk6IHN0cmluZyBdOiBzdHJpbmcgfTtcbiAgc3Ryb2tlUGF0aFN0eWxlOiB7IFsga2V5OiBzdHJpbmcgXTogc3RyaW5nIH07XG4gIHBhdGhTdHJpbmc6IHN0cmluZztcbiAgaWNvbjtcbiAgaWNvblRoZW1lO1xuICBpc1N0YXR1c1NldCA9IGZhbHNlO1xuICBpc1N0cm9rZVdpZHRoU2V0ID0gZmFsc2U7XG4gIGlzRm9ybWF0U2V0ID0gZmFsc2U7XG4gIGlzR2FwRGVncmVlU2V0ID0gZmFsc2U7XG4gIGlzR2FwUG9zaXRpb25TZXQgPSBmYWxzZTtcbiAgc3RhdHVzQ29sb3JNYXAgPSB7XG4gICAgbm9ybWFsICAgOiAnIzEwOGVlOScsXG4gICAgZXhjZXB0aW9uOiAnI2ZmNTUwMCcsXG4gICAgc3VjY2VzcyAgOiAnIzg3ZDA2OCdcbiAgfTtcbiAgQElucHV0KCkgbnpTaG93SW5mbyA9IHRydWU7XG4gIEBJbnB1dCgpIG56V2lkdGggPSAxMzI7XG4gIEBJbnB1dCgpIG56U3VjY2Vzc1BlcmNlbnQgPSAwO1xuXG4gIEBJbnB1dCgpXG4gIHNldCBuelNpemUodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX3NpemUgPSB2YWx1ZTtcbiAgICBpZiAodGhpcy5uelNpemUgPT09ICdzbWFsbCcgJiYgIXRoaXMuaXNTdHJva2VXaWR0aFNldCkge1xuICAgICAgdGhpcy5fc3Ryb2tlV2lkdGggPSA2O1xuICAgIH1cbiAgfVxuXG4gIGdldCBuelNpemUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fc2l6ZTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekZvcm1hdCh2YWx1ZTogKHBlcmNlbnQ6IG51bWJlcikgPT4gc3RyaW5nKSB7XG4gICAgaWYgKGlzTm90TmlsKHZhbHVlKSkge1xuICAgICAgdGhpcy5fZm9ybWF0ID0gdmFsdWU7XG4gICAgICB0aGlzLmlzRm9ybWF0U2V0ID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBnZXQgbnpGb3JtYXQoKTogKHBlcmNlbnQ6IG51bWJlcikgPT4gc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fZm9ybWF0O1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56UGVyY2VudCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fcGVyY2VudCA9IHZhbHVlO1xuICAgIGlmIChpc05vdE5pbCh2YWx1ZSkpIHtcbiAgICAgIGNvbnN0IGZpbGxBbGwgPSBwYXJzZUludCh2YWx1ZS50b1N0cmluZygpLCAxMCkgPj0gMTAwO1xuICAgICAgaWYgKGZpbGxBbGwgJiYgIXRoaXMuaXNTdGF0dXNTZXQpIHtcbiAgICAgICAgdGhpcy5fc3RhdHVzID0gJ3N1Y2Nlc3MnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc3RhdHVzID0gdGhpcy5fY2FjaGVTdGF0dXM7XG4gICAgICB9XG4gICAgICB0aGlzLnVwZGF0ZVBhdGhTdHlsZXMoKTtcbiAgICAgIHRoaXMudXBkYXRlSWNvbigpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBuelBlcmNlbnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fcGVyY2VudDtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuelN0cm9rZVdpZHRoKHZhbHVlOiBudW1iZXIpIHtcbiAgICBpZiAoaXNOb3ROaWwodmFsdWUpKSB7XG4gICAgICB0aGlzLl9zdHJva2VXaWR0aCA9IHZhbHVlO1xuICAgICAgdGhpcy5pc1N0cm9rZVdpZHRoU2V0ID0gdHJ1ZTtcbiAgICAgIHRoaXMudXBkYXRlUGF0aFN0eWxlcygpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBuelN0cm9rZVdpZHRoKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3N0cm9rZVdpZHRoO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56U3RhdHVzKHZhbHVlOiBOelByb2dyZXNzU3RhdHVzVHlwZSkge1xuICAgIGlmIChpc05vdE5pbCh2YWx1ZSkpIHtcbiAgICAgIHRoaXMuX3N0YXR1cyA9IHZhbHVlO1xuICAgICAgdGhpcy5fY2FjaGVTdGF0dXMgPSB2YWx1ZTtcbiAgICAgIHRoaXMuaXNTdGF0dXNTZXQgPSB0cnVlO1xuICAgICAgdGhpcy51cGRhdGVJY29uKCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IG56U3RhdHVzKCk6IE56UHJvZ3Jlc3NTdGF0dXNUeXBlIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhdHVzO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56VHlwZSh2YWx1ZTogTnpQcm9ncmVzc1R5cGVUeXBlKSB7XG4gICAgdGhpcy5fdHlwZSA9IHZhbHVlO1xuICAgIGlmICghdGhpcy5pc1N0cm9rZVdpZHRoU2V0KSB7XG4gICAgICBpZiAodGhpcy5uelR5cGUgIT09ICdsaW5lJykge1xuICAgICAgICB0aGlzLl9zdHJva2VXaWR0aCA9IDY7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aGlzLm56VHlwZSA9PT0gJ2Rhc2hib2FyZCcpIHtcbiAgICAgIGlmICghdGhpcy5pc0dhcFBvc2l0aW9uU2V0KSB7XG4gICAgICAgIHRoaXMuX2dhcFBvc2l0aW9uID0gJ2JvdHRvbSc7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMuaXNHYXBEZWdyZWVTZXQpIHtcbiAgICAgICAgdGhpcy5fZ2FwRGVncmVlID0gNzU7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMudXBkYXRlSWNvbigpO1xuICAgIHRoaXMudXBkYXRlUGF0aFN0eWxlcygpO1xuICB9XG5cbiAgZ2V0IG56VHlwZSgpOiBOelByb2dyZXNzVHlwZVR5cGUge1xuICAgIHJldHVybiB0aGlzLl90eXBlO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56R2FwRGVncmVlKHZhbHVlOiBudW1iZXIpIHtcbiAgICBpZiAoaXNOb3ROaWwodmFsdWUpKSB7XG4gICAgICB0aGlzLl9nYXBEZWdyZWUgPSB2YWx1ZTtcbiAgICAgIHRoaXMuaXNHYXBEZWdyZWVTZXQgPSB0cnVlO1xuICAgICAgdGhpcy51cGRhdGVQYXRoU3R5bGVzKCk7XG4gICAgfVxuXG4gIH1cblxuICBnZXQgbnpHYXBEZWdyZWUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fZ2FwRGVncmVlO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56R2FwUG9zaXRpb24odmFsdWU6IE56UHJvZ3Jlc3NHYXBQb3NpdGlvblR5cGUpIHtcbiAgICBpZiAoaXNOb3ROaWwodmFsdWUpKSB7XG4gICAgICB0aGlzLl9nYXBQb3NpdGlvbiA9IHZhbHVlO1xuICAgICAgdGhpcy5pc0dhcFBvc2l0aW9uU2V0ID0gdHJ1ZTtcbiAgICAgIHRoaXMudXBkYXRlUGF0aFN0eWxlcygpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBuekdhcFBvc2l0aW9uKCk6IE56UHJvZ3Jlc3NHYXBQb3NpdGlvblR5cGUge1xuICAgIHJldHVybiB0aGlzLl9nYXBQb3NpdGlvbjtcbiAgfVxuXG4gIGdldCBpc0NpckNsZVN0eWxlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLm56VHlwZSA9PT0gJ2NpcmNsZScgfHwgdGhpcy5uelR5cGUgPT09ICdkYXNoYm9hcmQnO1xuICB9XG5cbiAgdXBkYXRlUGF0aFN0eWxlcygpOiB2b2lkIHtcbiAgICBjb25zdCByYWRpdXMgPSA1MCAtICh0aGlzLm56U3Ryb2tlV2lkdGggLyAyKTtcbiAgICBsZXQgYmVnaW5Qb3NpdGlvblggPSAwO1xuICAgIGxldCBiZWdpblBvc2l0aW9uWSA9IC1yYWRpdXM7XG4gICAgbGV0IGVuZFBvc2l0aW9uWCA9IDA7XG4gICAgbGV0IGVuZFBvc2l0aW9uWSA9IHJhZGl1cyAqIC0yO1xuICAgIHN3aXRjaCAodGhpcy5uekdhcFBvc2l0aW9uKSB7XG4gICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgYmVnaW5Qb3NpdGlvblggPSAtcmFkaXVzO1xuICAgICAgICBiZWdpblBvc2l0aW9uWSA9IDA7XG4gICAgICAgIGVuZFBvc2l0aW9uWCA9IHJhZGl1cyAqIDI7XG4gICAgICAgIGVuZFBvc2l0aW9uWSA9IDA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICBiZWdpblBvc2l0aW9uWCA9IHJhZGl1cztcbiAgICAgICAgYmVnaW5Qb3NpdGlvblkgPSAwO1xuICAgICAgICBlbmRQb3NpdGlvblggPSByYWRpdXMgKiAtMjtcbiAgICAgICAgZW5kUG9zaXRpb25ZID0gMDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdib3R0b20nOlxuICAgICAgICBiZWdpblBvc2l0aW9uWSA9IHJhZGl1cztcbiAgICAgICAgZW5kUG9zaXRpb25ZID0gcmFkaXVzICogMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgIH1cbiAgICB0aGlzLnBhdGhTdHJpbmcgPSBgTSA1MCw1MCBtICR7YmVnaW5Qb3NpdGlvblh9LCR7YmVnaW5Qb3NpdGlvbll9XG4gICAgIGEgJHtyYWRpdXN9LCR7cmFkaXVzfSAwIDEgMSAke2VuZFBvc2l0aW9uWH0sJHstZW5kUG9zaXRpb25ZfVxuICAgICBhICR7cmFkaXVzfSwke3JhZGl1c30gMCAxIDEgJHstZW5kUG9zaXRpb25YfSwke2VuZFBvc2l0aW9uWX1gO1xuICAgIGNvbnN0IGxlbiA9IE1hdGguUEkgKiAyICogcmFkaXVzO1xuICAgIHRoaXMudHJhaWxQYXRoU3R5bGUgPSB7XG4gICAgICBzdHJva2VEYXNoYXJyYXkgOiBgJHtsZW4gLSB0aGlzLm56R2FwRGVncmVlfXB4ICR7bGVufXB4YCxcbiAgICAgIHN0cm9rZURhc2hvZmZzZXQ6IGAtJHt0aGlzLm56R2FwRGVncmVlIC8gMn1weGAsXG4gICAgICB0cmFuc2l0aW9uICAgICAgOiAnc3Ryb2tlLWRhc2hvZmZzZXQgLjNzIGVhc2UgMHMsIHN0cm9rZS1kYXNoYXJyYXkgLjNzIGVhc2UgMHMsIHN0cm9rZSAuM3MnXG4gICAgfTtcbiAgICB0aGlzLnN0cm9rZVBhdGhTdHlsZSA9IHtcbiAgICAgIHN0cm9rZURhc2hhcnJheSA6IGAkeyh0aGlzLm56UGVyY2VudCAvIDEwMCkgKiAobGVuIC0gdGhpcy5uekdhcERlZ3JlZSl9cHggJHtsZW59cHhgLFxuICAgICAgc3Ryb2tlRGFzaG9mZnNldDogYC0ke3RoaXMubnpHYXBEZWdyZWUgLyAyfXB4YCxcbiAgICAgIHRyYW5zaXRpb24gICAgICA6ICdzdHJva2UtZGFzaG9mZnNldCAuM3MgZWFzZSAwcywgc3Ryb2tlLWRhc2hhcnJheSAuM3MgZWFzZSAwcywgc3Ryb2tlIC4zcywgc3Ryb2tlLXdpZHRoIC4wNnMgZWFzZSAuM3MnIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlSWNvbigpOiB2b2lkIHtcbiAgICBjb25zdCBpc0NpcmNsZSA9ICh0aGlzLm56VHlwZSA9PT0gJ2NpcmNsZScgfHwgdGhpcy5uelR5cGUgPT09ICdkYXNoYm9hcmQnKTtcbiAgICBsZXQgcmV0ID0gJyc7XG4gICAgaWYgKHRoaXMubnpTdGF0dXMgPT09ICdzdWNjZXNzJykgeyByZXQgPSAnY2hlY2snOyB9XG4gICAgaWYgKHRoaXMubnpTdGF0dXMgPT09ICdleGNlcHRpb24nKSB7IHJldCA9ICdjbG9zZSc7IH1cbiAgICBpZiAocmV0KSB7XG4gICAgICBpZiAoIWlzQ2lyY2xlKSB7XG4gICAgICAgIHJldCArPSAnLWNpcmNsZSc7XG4gICAgICAgIHRoaXMuaWNvblRoZW1lID0gJ2ZpbGwnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5pY29uVGhlbWUgPSAnb3V0bGluZSc7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuaWNvbiA9IHJldDtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMudXBkYXRlUGF0aFN0eWxlcygpO1xuICAgIHRoaXMudXBkYXRlSWNvbigpO1xuICB9XG5cbn1cbiIsImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTnpJY29uTW9kdWxlIH0gZnJvbSAnLi4vaWNvbi9uei1pY29uLm1vZHVsZSc7XG5cbmltcG9ydCB7IE56UHJvZ3Jlc3NDb21wb25lbnQgfSBmcm9tICcuL256LXByb2dyZXNzLmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGV4cG9ydHMgICAgIDogWyBOelByb2dyZXNzQ29tcG9uZW50IF0sXG4gIGRlY2xhcmF0aW9uczogWyBOelByb2dyZXNzQ29tcG9uZW50IF0sXG4gIGltcG9ydHMgICAgIDogWyBDb21tb25Nb2R1bGUsIE56SWNvbk1vZHVsZSBdXG59KVxuZXhwb3J0IGNsYXNzIE56UHJvZ3Jlc3NNb2R1bGUge1xufVxuIiwiaW1wb3J0IHsgTEVGVF9BUlJPVywgUklHSFRfQVJST1cgfSBmcm9tICdAYW5ndWxhci9jZGsva2V5Y29kZXMnO1xuaW1wb3J0IHtcbiAgZm9yd2FyZFJlZixcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LFxuICBPbkluaXQsXG4gIE91dHB1dCxcbiAgUmVuZGVyZXIyLFxuICBUZW1wbGF0ZVJlZixcbiAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyB0b0Jvb2xlYW4gfSBmcm9tICcuLi9jb3JlL3V0aWwvY29udmVydCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICAgICAgOiAnbnotcmF0ZScsXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxuICB0ZW1wbGF0ZVVybCAgICAgICAgOiAnLi9uei1yYXRlLmNvbXBvbmVudC5odG1sJyxcbiAgcHJvdmlkZXJzICAgICAgICAgIDogW1xuICAgIHtcbiAgICAgIHByb3ZpZGUgICAgOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IE56UmF0ZUNvbXBvbmVudCksXG4gICAgICBtdWx0aSAgICAgIDogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBOelJhdGVDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBBZnRlclZpZXdJbml0IHtcbiAgcHJpdmF0ZSBfYWxsb3dDbGVhciA9IHRydWU7XG4gIHByaXZhdGUgX2FsbG93SGFsZiA9IGZhbHNlO1xuICBwcml2YXRlIF9kaXNhYmxlZCA9IGZhbHNlO1xuICBwcml2YXRlIF9jb3VudCA9IDU7XG4gIHByaXZhdGUgX3ZhbHVlID0gMDtcbiAgcHJpdmF0ZSBfYXV0b0ZvY3VzID0gZmFsc2U7XG4gIEBJbnB1dCgpIG56Q2hhcmFjdGVyOiBUZW1wbGF0ZVJlZjx2b2lkPjtcbiAgQE91dHB1dCgpIG56T25CbHVyID0gbmV3IEV2ZW50RW1pdHRlcjxGb2N1c0V2ZW50PigpO1xuICBAT3V0cHV0KCkgbnpPbkZvY3VzID0gbmV3IEV2ZW50RW1pdHRlcjxGb2N1c0V2ZW50PigpO1xuICBAT3V0cHV0KCkgbnpPbktleURvd24gPSBuZXcgRXZlbnRFbWl0dGVyPEtleWJvYXJkRXZlbnQ+KCk7XG4gIEBPdXRwdXQoKSBuek9uSG92ZXJDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPG51bWJlcj4oKTtcbiAgQFZpZXdDaGlsZCgndWxFbGVtZW50JykgcHJpdmF0ZSB1bEVsZW1lbnQ6IEVsZW1lbnRSZWY7XG4gIHByZWZpeENscyA9ICdhbnQtcmF0ZSc7XG4gIGlzSW5pdCA9IGZhbHNlO1xuICBoYXNIYWxmID0gZmFsc2U7XG4gIGlubmVyUHJlZml4Q2xzID0gYCR7dGhpcy5wcmVmaXhDbHN9LXN0YXJgO1xuICBjbGFzc01hcDtcbiAgc3RhckFycmF5OiBudW1iZXJbXSA9IFtdO1xuICBob3ZlclZhbHVlID0gMDtcbiAgaXNGb2N1c2VkID0gZmFsc2U7XG4gIGZsb2F0UmVnOiBSZWdFeHAgPSAvXlxcZCsoXFwuXFxkKyk/JC87XG5cbiAgb25DaGFuZ2U6ICh2YWx1ZTogbnVtYmVyKSA9PiB2b2lkID0gKCkgPT4gbnVsbDtcbiAgb25Ub3VjaGVkOiAoKSA9PiB2b2lkID0gKCkgPT4gbnVsbDtcblxuICBASW5wdXQoKVxuICBzZXQgbnpBdXRvRm9jdXModmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9hdXRvRm9jdXMgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICAgIHRoaXMudXBkYXRlQXV0b0ZvY3VzKCk7XG4gIH1cblxuICBnZXQgbnpBdXRvRm9jdXMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2F1dG9Gb2N1cztcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekNvdW50KHZhbHVlOiBudW1iZXIpIHtcbiAgICBpZiAodGhpcy5fY291bnQgPT09IHZhbHVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX2NvdW50ID0gdmFsdWU7XG4gICAgdGhpcy51cGRhdGVTdGFyQXJyYXkoKTtcbiAgfVxuXG4gIGdldCBuekNvdW50KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2NvdW50O1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56QWxsb3dIYWxmKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fYWxsb3dIYWxmID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuekFsbG93SGFsZigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fYWxsb3dIYWxmO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56QWxsb3dDbGVhcih2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2FsbG93Q2xlYXIgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56QWxsb3dDbGVhcigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fYWxsb3dDbGVhcjtcbiAgfVxuXG4gIGdldCBuelZhbHVlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgc2V0IG56VmFsdWUoaW5wdXQ6IG51bWJlcikge1xuICAgIGxldCB2YWx1ZSA9IGlucHV0O1xuICAgIGlmICh0aGlzLl92YWx1ZSA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcbiAgICBpZiAodGhpcy5mbG9hdFJlZy50ZXN0KHZhbHVlLnRvU3RyaW5nKCkpKSB7XG4gICAgICB2YWx1ZSArPSAwLjU7XG4gICAgICB0aGlzLmhhc0hhbGYgPSB0cnVlO1xuICAgIH1cbiAgICB0aGlzLmhvdmVyVmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekRpc2FibGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fZGlzYWJsZWQgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICAgIHRoaXMuc2V0Q2xhc3NNYXAoKTtcbiAgfVxuXG4gIGdldCBuekRpc2FibGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9kaXNhYmxlZDtcbiAgfVxuXG4gIHNldENsYXNzTWFwKCk6IHZvaWQge1xuICAgIHRoaXMuY2xhc3NNYXAgPSB7XG4gICAgICBbIHRoaXMucHJlZml4Q2xzIF0gICAgICAgICAgICAgIDogdHJ1ZSxcbiAgICAgIFsgYCR7dGhpcy5wcmVmaXhDbHN9LWRpc2FibGVkYCBdOiB0aGlzLm56RGlzYWJsZWRcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlQXV0b0ZvY3VzKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzSW5pdCAmJiAhdGhpcy5uekRpc2FibGVkKSB7XG4gICAgICBpZiAodGhpcy5uekF1dG9Gb2N1cykge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLnVsRWxlbWVudC5uYXRpdmVFbGVtZW50LCAnYXV0b2ZvY3VzJywgJ2F1dG9mb2N1cycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVBdHRyaWJ1dGUodGhpcy51bEVsZW1lbnQubmF0aXZlRWxlbWVudCwgJ2F1dG9mb2N1cycpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNsaWNrUmF0ZShlOiBNb3VzZUV2ZW50LCBpbmRleDogbnVtYmVyLCBpc0Z1bGw6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGlmICh0aGlzLm56RGlzYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5oYXNIYWxmID0gIWlzRnVsbCAmJiB0aGlzLm56QWxsb3dIYWxmO1xuXG4gICAgbGV0IGFjdHVhbFZhbHVlID0gaW5kZXggKyAxO1xuICAgIHRoaXMuaG92ZXJWYWx1ZSA9IGFjdHVhbFZhbHVlO1xuXG4gICAgaWYgKHRoaXMuaGFzSGFsZikge1xuICAgICAgYWN0dWFsVmFsdWUgLT0gMC41O1xuICAgIH1cblxuICAgIGlmICh0aGlzLm56VmFsdWUgPT09IGFjdHVhbFZhbHVlKSB7XG4gICAgICBpZiAodGhpcy5uekFsbG93Q2xlYXIpIHtcbiAgICAgICAgdGhpcy5uelZhbHVlID0gMDtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSh0aGlzLm56VmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm56VmFsdWUgPSBhY3R1YWxWYWx1ZTtcbiAgICAgIHRoaXMub25DaGFuZ2UodGhpcy5uelZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBob3ZlclJhdGUoZTogTW91c2VFdmVudCwgaW5kZXg6IG51bWJlciwgaXNGdWxsOiBib29sZWFuKTogdm9pZCB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBpZiAodGhpcy5uekRpc2FibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGlzSGFsZjogYm9vbGVhbiA9ICFpc0Z1bGwgJiYgdGhpcy5uekFsbG93SGFsZjtcbiAgICBpZiAodGhpcy5ob3ZlclZhbHVlID09PSBpbmRleCArIDEgJiYgaXNIYWxmID09PSB0aGlzLmhhc0hhbGYpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmhvdmVyVmFsdWUgPSBpbmRleCArIDE7XG4gICAgdGhpcy5uek9uSG92ZXJDaGFuZ2UuZW1pdCh0aGlzLmhvdmVyVmFsdWUpO1xuICAgIHRoaXMuaGFzSGFsZiA9IGlzSGFsZjtcbiAgfVxuXG4gIGxlYXZlUmF0ZShlOiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBsZXQgb2xkVmFsID0gdGhpcy5uelZhbHVlO1xuICAgIGlmICh0aGlzLmZsb2F0UmVnLnRlc3Qob2xkVmFsLnRvU3RyaW5nKCkpKSB7XG4gICAgICBvbGRWYWwgKz0gMC41O1xuICAgICAgdGhpcy5oYXNIYWxmID0gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcy5ob3ZlclZhbHVlID0gb2xkVmFsO1xuICB9XG5cbiAgb25Gb2N1cyhlOiBGb2N1c0V2ZW50KTogdm9pZCB7XG4gICAgdGhpcy5pc0ZvY3VzZWQgPSB0cnVlO1xuICAgIHRoaXMubnpPbkZvY3VzLmVtaXQoZSk7XG4gIH1cblxuICBvbkJsdXIoZTogRm9jdXNFdmVudCk6IHZvaWQge1xuICAgIHRoaXMuaXNGb2N1c2VkID0gZmFsc2U7XG4gICAgdGhpcy5uek9uQmx1ci5lbWl0KGUpO1xuICB9XG5cbiAgZm9jdXMoKTogdm9pZCB7XG4gICAgdGhpcy51bEVsZW1lbnQubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICB9XG5cbiAgYmx1cigpOiB2b2lkIHtcbiAgICB0aGlzLnVsRWxlbWVudC5uYXRpdmVFbGVtZW50LmJsdXIoKTtcbiAgfVxuXG4gIG9uS2V5RG93bihlOiBLZXlib2FyZEV2ZW50KTogdm9pZCB7XG4gICAgY29uc3QgY29kZSA9IGUuY29kZTtcbiAgICBpZiAoKGNvZGUgPT09ICdBcnJvd1JpZ2h0JyB8fCBlLmtleUNvZGUgPT09IFJJR0hUX0FSUk9XKSAmJiAodGhpcy5uelZhbHVlIDwgdGhpcy5uekNvdW50KSkge1xuICAgICAgaWYgKHRoaXMubnpBbGxvd0hhbGYpIHtcbiAgICAgICAgdGhpcy5uelZhbHVlICs9IDAuNTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubnpWYWx1ZSArPSAxO1xuICAgICAgfVxuICAgICAgdGhpcy5vbkNoYW5nZSh0aGlzLm56VmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoKGNvZGUgPT09ICdBcnJvd0xlZnQnIHx8IGUua2V5Q29kZSA9PT0gTEVGVF9BUlJPVykgJiYgKHRoaXMubnpWYWx1ZSA+IDApKSB7XG4gICAgICBpZiAodGhpcy5uekFsbG93SGFsZikge1xuICAgICAgICB0aGlzLm56VmFsdWUgLT0gMC41O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5uelZhbHVlIC09IDE7XG4gICAgICB9XG4gICAgICB0aGlzLm9uQ2hhbmdlKHRoaXMubnpWYWx1ZSk7XG4gICAgfVxuICAgIHRoaXMubnpPbktleURvd24uZW1pdChlKTtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH1cblxuICBzZXRDbGFzc2VzKGk6IG51bWJlcik6IG9iamVjdCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFsgdGhpcy5pbm5lclByZWZpeENscyBdICAgICAgICAgICAgIDogdHJ1ZSxcbiAgICAgIFsgYCR7dGhpcy5pbm5lclByZWZpeENsc30tZnVsbGAgXSAgIDogKGkgKyAxIDwgdGhpcy5ob3ZlclZhbHVlKSB8fCAoIXRoaXMuaGFzSGFsZikgJiYgKGkgKyAxID09PSB0aGlzLmhvdmVyVmFsdWUpLFxuICAgICAgWyBgJHt0aGlzLmlubmVyUHJlZml4Q2xzfS1oYWxmYCBdICAgOiAodGhpcy5oYXNIYWxmKSAmJiAoaSArIDEgPT09IHRoaXMuaG92ZXJWYWx1ZSksXG4gICAgICBbIGAke3RoaXMuaW5uZXJQcmVmaXhDbHN9LWFjdGl2ZWAgXSA6ICh0aGlzLmhhc0hhbGYpICYmIChpICsgMSA9PT0gdGhpcy5ob3ZlclZhbHVlKSxcbiAgICAgIFsgYCR7dGhpcy5pbm5lclByZWZpeENsc30temVyb2AgXSAgIDogKGkgKyAxID4gdGhpcy5ob3ZlclZhbHVlKSxcbiAgICAgIFsgYCR7dGhpcy5pbm5lclByZWZpeENsc30tZm9jdXNlZGAgXTogKHRoaXMuaGFzSGFsZikgJiYgKGkgKyAxID09PSB0aGlzLmhvdmVyVmFsdWUpICYmIHRoaXMuaXNGb2N1c2VkXG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZVN0YXJBcnJheSgpOiB2b2lkIHtcbiAgICBsZXQgaW5kZXggPSAwO1xuICAgIHRoaXMuc3RhckFycmF5ID0gW107XG4gICAgd2hpbGUgKGluZGV4IDwgdGhpcy5uekNvdW50KSB7XG4gICAgICB0aGlzLnN0YXJBcnJheS5wdXNoKGluZGV4KyspO1xuICAgIH1cbiAgfVxuXG4gIHdyaXRlVmFsdWUodmFsdWU6IG51bWJlciB8IG51bGwpOiB2b2lkIHtcbiAgICB0aGlzLm56VmFsdWUgPSB2YWx1ZSB8fCAwO1xuICB9XG5cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKF86IG51bWJlcikgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMub25DaGFuZ2UgPSBmbjtcbiAgfVxuXG4gIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiAoKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5vblRvdWNoZWQgPSBmbjtcbiAgfVxuXG4gIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMubnpEaXNhYmxlZCA9IGlzRGlzYWJsZWQ7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuc2V0Q2xhc3NNYXAoKTtcbiAgICB0aGlzLnVwZGF0ZVN0YXJBcnJheSgpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIHRoaXMuaXNJbml0ID0gdHJ1ZTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE56SWNvbk1vZHVsZSB9IGZyb20gJy4uL2ljb24vbnotaWNvbi5tb2R1bGUnO1xuaW1wb3J0IHsgTnpSYXRlQ29tcG9uZW50IH0gZnJvbSAnLi9uei1yYXRlLmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGV4cG9ydHMgICAgIDogWyBOelJhdGVDb21wb25lbnQgXSxcbiAgZGVjbGFyYXRpb25zOiBbIE56UmF0ZUNvbXBvbmVudCBdLFxuICBpbXBvcnRzICAgICA6IFsgQ29tbW9uTW9kdWxlLCBOekljb25Nb2R1bGUgXVxufSlcbmV4cG9ydCBjbGFzcyBOelJhdGVNb2R1bGUge1xufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25DaGFuZ2VzLCBPbkluaXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEF2YXRhclNoYXBlLCBBdmF0YXJTaXplLCBOelNrZWxldG9uQXZhdGFyLCBOelNrZWxldG9uUGFyYWdyYXBoLCBOelNrZWxldG9uVGl0bGUgfSBmcm9tICcuL256LXNrZWxldG9uLnR5cGUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduei1za2VsZXRvbicsXG4gIHRlbXBsYXRlVXJsOiAnLi9uei1za2VsZXRvbi5jb21wb25lbnQuaHRtbCcsXG4gIGhvc3Q6IHtcbiAgICAnW2NsYXNzLmFudC1za2VsZXRvbl0nOiAndHJ1ZScsXG4gICAgJ1tjbGFzcy5hbnQtc2tlbGV0b24td2l0aC1hdmF0YXJdJzogJyEhbnpBdmF0YXInLFxuICAgICdbY2xhc3MuYW50LXNrZWxldG9uLWFjdGl2ZV0nOiAnbnpBY3RpdmUnXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgTnpTa2VsZXRvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgdGl0bGU6IE56U2tlbGV0b25UaXRsZTtcbiAgYXZhdGFyOiBOelNrZWxldG9uQXZhdGFyO1xuICBwYXJhZ3JhcGg6IE56U2tlbGV0b25QYXJhZ3JhcGg7XG4gIGF2YXRhckNsYXNzTWFwO1xuICByb3dzTGlzdDogbnVtYmVyW10gPSBbXTtcbiAgd2lkdGhMaXN0OiBBcnJheTxudW1iZXIgfCBzdHJpbmc+ID0gW107XG5cbiAgQElucHV0KCkgbnpBY3RpdmUgPSBmYWxzZTtcbiAgQElucHV0KCkgbnpMb2FkaW5nID0gdHJ1ZTtcbiAgQElucHV0KCkgbnpUaXRsZTogTnpTa2VsZXRvblRpdGxlIHwgYm9vbGVhbiA9IHRydWU7XG4gIEBJbnB1dCgpIG56QXZhdGFyOiBOelNrZWxldG9uQXZhdGFyIHwgYm9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoKSBuelBhcmFncmFwaDogTnpTa2VsZXRvblBhcmFncmFwaCB8IGJvb2xlYW4gPSB0cnVlO1xuXG4gIHByaXZhdGUgZ2V0VGl0bGVQcm9wcygpOiBOelNrZWxldG9uVGl0bGUge1xuICAgIGNvbnN0IGhhc0F2YXRhcjogYm9vbGVhbiA9ICEhdGhpcy5uekF2YXRhcjtcbiAgICBjb25zdCBoYXNQYXJhZ3JhcGg6IGJvb2xlYW4gPSAhIXRoaXMubnpQYXJhZ3JhcGg7XG4gICAgbGV0IHdpZHRoOiBzdHJpbmc7XG4gICAgaWYgKCFoYXNBdmF0YXIgJiYgaGFzUGFyYWdyYXBoKSB7XG4gICAgICB3aWR0aCA9ICczOCUnO1xuICAgIH0gZWxzZSBpZiAoaGFzQXZhdGFyICYmIGhhc1BhcmFncmFwaCkge1xuICAgICAgd2lkdGggPSAnNTAlJztcbiAgICB9XG4gICAgcmV0dXJuIHsgd2lkdGgsIC4uLnRoaXMuZ2V0UHJvcHModGhpcy5uelRpdGxlKSB9O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRBdmF0YXJQcm9wcygpOiBOelNrZWxldG9uQXZhdGFyIHtcbiAgICBjb25zdCBzaGFwZTogQXZhdGFyU2hhcGUgPSAoISF0aGlzLm56VGl0bGUgJiYgIXRoaXMubnpQYXJhZ3JhcGgpID8gJ3NxdWFyZScgOiAnY2lyY2xlJztcbiAgICBjb25zdCBzaXplOiBBdmF0YXJTaXplID0gJ2xhcmdlJztcbiAgICByZXR1cm4geyBzaGFwZSwgc2l6ZSwgLi4udGhpcy5nZXRQcm9wcyh0aGlzLm56QXZhdGFyKSB9O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRQYXJhZ3JhcGhQcm9wcygpOiBOelNrZWxldG9uUGFyYWdyYXBoIHtcbiAgICBjb25zdCBoYXNBdmF0YXI6IGJvb2xlYW4gPSAhIXRoaXMubnpBdmF0YXI7XG4gICAgY29uc3QgaGFzVGl0bGU6IGJvb2xlYW4gPSAhIXRoaXMubnpUaXRsZTtcbiAgICBjb25zdCBiYXNpY1Byb3BzOiBOelNrZWxldG9uUGFyYWdyYXBoID0ge307XG4gICAgLy8gV2lkdGhcbiAgICBpZiAoIWhhc0F2YXRhciB8fCAhaGFzVGl0bGUpIHtcbiAgICAgIGJhc2ljUHJvcHMud2lkdGggPSAnNjElJztcbiAgICB9XG4gICAgLy8gUm93c1xuICAgIGlmICghaGFzQXZhdGFyICYmIGhhc1RpdGxlKSB7XG4gICAgICBiYXNpY1Byb3BzLnJvd3MgPSAzO1xuICAgIH0gZWxzZSB7XG4gICAgICBiYXNpY1Byb3BzLnJvd3MgPSAyO1xuICAgIH1cbiAgICByZXR1cm4geyAuLi5iYXNpY1Byb3BzLCAuLi50aGlzLmdldFByb3BzKHRoaXMubnpQYXJhZ3JhcGgpIH07XG4gIH1cblxuICBwcml2YXRlIGdldFByb3BzPFQ+KHByb3A6IFQgfCBib29sZWFuIHwgdW5kZWZpbmVkKTogVCB8IHt9ICB7XG4gICAgaWYgKHByb3AgJiYgdHlwZW9mIHByb3AgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gcHJvcDtcbiAgICB9XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgdG9DU1NVbml0KHZhbHVlOiBudW1iZXIgfCBzdHJpbmcgPSAnJyk6IHN0cmluZyB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiBgJHt2YWx1ZX1weGA7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRXaWR0aExpc3QoKTogQXJyYXk8bnVtYmVyIHwgc3RyaW5nPiB7XG4gICAgY29uc3QgeyB3aWR0aCwgcm93cyB9ID0gdGhpcy5wYXJhZ3JhcGg7XG4gICAgbGV0IHdpZHRoTGlzdCA9IFtdO1xuICAgIGlmICh3aWR0aCAmJiBBcnJheS5pc0FycmF5KHdpZHRoKSkge1xuICAgICAgd2lkdGhMaXN0ID0gd2lkdGg7XG4gICAgfSBlbHNlIGlmICh3aWR0aCAmJiAhQXJyYXkuaXNBcnJheSh3aWR0aCkpIHtcbiAgICAgIHdpZHRoTGlzdCA9IFtdO1xuICAgICAgd2lkdGhMaXN0W3Jvd3MgLSAxXSA9IHdpZHRoO1xuICAgIH1cbiAgICByZXR1cm4gd2lkdGhMaXN0O1xuICB9XG5cbiAgdXBkYXRlQ2xhc3NNYXAoKTogdm9pZCB7XG4gICAgdGhpcy5hdmF0YXJDbGFzc01hcCA9IHtcbiAgICAgIFsgYGFudC1za2VsZXRvbi1hdmF0YXItbGdgIF0gICAgIDogdGhpcy5hdmF0YXIuc2l6ZSA9PT0gJ2xhcmdlJyxcbiAgICAgIFsgYGFudC1za2VsZXRvbi1hdmF0YXItc20gYCBdICAgIDogdGhpcy5hdmF0YXIuc2l6ZSA9PT0gJ3NtYWxsJyxcbiAgICAgIFsgYGFudC1za2VsZXRvbi1hdmF0YXItY2lyY2xlYCBdIDogdGhpcy5hdmF0YXIuc2hhcGUgPT09ICdjaXJjbGUnLFxuICAgICAgWyBgYW50LXNrZWxldG9uLWF2YXRhci1zcXVhcmUgYCBdOiB0aGlzLmF2YXRhci5zaGFwZSA9PT0gJ3NxdWFyZSdcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlUHJvcHMoKTogdm9pZCB7XG4gICAgdGhpcy50aXRsZSAgICAgPSB0aGlzLmdldFRpdGxlUHJvcHMoKTtcbiAgICB0aGlzLmF2YXRhciAgICA9IHRoaXMuZ2V0QXZhdGFyUHJvcHMoKTtcbiAgICB0aGlzLnBhcmFncmFwaCA9IHRoaXMuZ2V0UGFyYWdyYXBoUHJvcHMoKTtcbiAgICB0aGlzLnJvd3NMaXN0ICA9IFsuLi5BcnJheSh0aGlzLnBhcmFncmFwaC5yb3dzKV07XG4gICAgdGhpcy53aWR0aExpc3QgPSB0aGlzLmdldFdpZHRoTGlzdCgpO1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy51cGRhdGVQcm9wcygpO1xuICAgIHRoaXMudXBkYXRlQ2xhc3NNYXAoKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBpZiAoY2hhbmdlcy5uelRpdGxlIHx8IGNoYW5nZXMubnpBdmF0YXIgfHwgY2hhbmdlcy5uelBhcmFncmFwaCkge1xuICAgICAgdGhpcy51cGRhdGVQcm9wcygpO1xuICAgICAgdGhpcy51cGRhdGVDbGFzc01hcCgpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOelNrZWxldG9uQ29tcG9uZW50IH0gZnJvbSAnLi9uei1za2VsZXRvbi5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICAgIGRlY2xhcmF0aW9uczogWyBOelNrZWxldG9uQ29tcG9uZW50IF0sXG4gICAgaW1wb3J0czogWyBDb21tb25Nb2R1bGUgXSxcbiAgICBleHBvcnRzOiBbIE56U2tlbGV0b25Db21wb25lbnQgXVxufSlcbmV4cG9ydCBjbGFzcyBOelNrZWxldG9uTW9kdWxlIHt9XG4iLCJpbXBvcnQgeyBPdmVybGF5TW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE56VG9vbFRpcENvbXBvbmVudCB9IGZyb20gJy4vbnotdG9vbHRpcC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpUb29sdGlwRGlyZWN0aXZlIH0gZnJvbSAnLi9uei10b29sdGlwLmRpcmVjdGl2ZSc7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9ucyAgIDogWyBOelRvb2xUaXBDb21wb25lbnQsIE56VG9vbHRpcERpcmVjdGl2ZSBdLFxuICBleHBvcnRzICAgICAgICA6IFsgTnpUb29sVGlwQ29tcG9uZW50LCBOelRvb2x0aXBEaXJlY3RpdmUgXSxcbiAgaW1wb3J0cyAgICAgICAgOiBbIENvbW1vbk1vZHVsZSwgT3ZlcmxheU1vZHVsZSBdLFxuICBlbnRyeUNvbXBvbmVudHM6IFsgTnpUb29sVGlwQ29tcG9uZW50IF1cbn0pXG5leHBvcnQgY2xhc3MgTnpUb29sVGlwTW9kdWxlIHtcbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyB0b0Jvb2xlYW4gfSBmcm9tICcuLi9jb3JlL3V0aWwvY29udmVydCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICAgICAgOiAnbnotc2xpZGVyLW1hcmtzJyxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG4gIHRlbXBsYXRlVXJsICAgICAgICA6ICcuL256LXNsaWRlci1tYXJrcy5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgTnpTbGlkZXJNYXJrc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gIHByaXZhdGUgX3ZlcnRpY2FsID0gZmFsc2U7XG4gIHByaXZhdGUgX2luY2x1ZGVkID0gZmFsc2U7XG5cbiAgLy8gRHluYW1pYyBwcm9wZXJ0aWVzXG4gIEBJbnB1dCgpIG56TG93ZXJCb3VuZDogbnVtYmVyID0gbnVsbDtcbiAgQElucHV0KCkgbnpVcHBlckJvdW5kOiBudW1iZXIgPSBudWxsO1xuICBASW5wdXQoKSBuek1hcmtzQXJyYXk6IE1hcmtzQXJyYXk7XG5cbiAgLy8gU3RhdGljIHByb3BlcnRpZXNcbiAgQElucHV0KCkgbnpDbGFzc05hbWU6IHN0cmluZztcbiAgQElucHV0KCkgbnpNaW46IG51bWJlcjsgLy8gUmVxdWlyZWRcbiAgQElucHV0KCkgbnpNYXg6IG51bWJlcjsgLy8gUmVxdWlyZWRcblxuICBASW5wdXQoKVxuICBzZXQgbnpWZXJ0aWNhbCh2YWx1ZTogYm9vbGVhbikgeyAvLyBSZXF1aXJlZFxuICAgIHRoaXMuX3ZlcnRpY2FsID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuelZlcnRpY2FsKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl92ZXJ0aWNhbDtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekluY2x1ZGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5faW5jbHVkZWQgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56SW5jbHVkZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2luY2x1ZGVkO1xuICB9XG5cbiAgLy8gVE9ETzogdXNpbmcgbmFtZWQgaW50ZXJmYWNlXG4gIGF0dHJzOiBBcnJheTx7IGlkOiBudW1iZXIsIHZhbHVlOiBudW1iZXIsIG9mZnNldDogbnVtYmVyLCBjbGFzc2VzOiB7IFsga2V5OiBzdHJpbmcgXTogYm9vbGVhbiB9LCBzdHlsZTogb2JqZWN0LCBsYWJlbDogTWFyayB9PjsgLy8gcG9pbnRzIGZvciBpbm5lciB1c2VcblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKGNoYW5nZXMubnpNYXJrc0FycmF5KSB7XG4gICAgICB0aGlzLmJ1aWxkQXR0cnMoKTtcbiAgICB9XG4gICAgaWYgKGNoYW5nZXMubnpNYXJrc0FycmF5IHx8IGNoYW5nZXMubnpMb3dlckJvdW5kIHx8IGNoYW5nZXMubnpVcHBlckJvdW5kKSB7XG4gICAgICB0aGlzLnRvZ2dsZVBvaW50QWN0aXZlKCk7XG4gICAgfVxuICB9XG5cbiAgdHJhY2tCeUlkKGluZGV4OiBudW1iZXIsIGF0dHI6IHsgaWQ6IG51bWJlciwgdmFsdWU6IG51bWJlciwgb2Zmc2V0OiBudW1iZXIsIGNsYXNzZXM6IHsgWyBrZXk6IHN0cmluZyBdOiBib29sZWFuIH0sIHN0eWxlOiBvYmplY3QsIGxhYmVsOiBNYXJrIH0pOiBudW1iZXIge1xuICAgIHJldHVybiBhdHRyLmlkO1xuICB9XG5cbiAgYnVpbGRBdHRycygpOiB2b2lkIHtcbiAgICBjb25zdCByYW5nZSA9IHRoaXMubnpNYXggLSB0aGlzLm56TWluO1xuICAgIHRoaXMuYXR0cnMgPSB0aGlzLm56TWFya3NBcnJheS5tYXAobWFyayA9PiB7XG4gICAgICBjb25zdCB7IHZhbHVlLCBvZmZzZXQsIGNvbmZpZyB9ID0gbWFyaztcbiAgICAgIC8vIGNhbGMgc3R5bGVzXG4gICAgICBsZXQgbGFiZWwgPSBjb25maWc7XG4gICAgICBsZXQgc3R5bGU6IG9iamVjdDtcbiAgICAgIGlmICh0aGlzLm56VmVydGljYWwpIHtcbiAgICAgICAgc3R5bGUgPSB7XG4gICAgICAgICAgbWFyZ2luQm90dG9tOiAnLTUwJScsXG4gICAgICAgICAgYm90dG9tICAgICAgOiBgJHsodmFsdWUgLSB0aGlzLm56TWluKSAvIHJhbmdlICogMTAwfSVgXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBtYXJrc0NvdW50ID0gdGhpcy5uek1hcmtzQXJyYXkubGVuZ3RoO1xuICAgICAgICBjb25zdCB1bml0ID0gMTAwIC8gKG1hcmtzQ291bnQgLSAxKTtcbiAgICAgICAgY29uc3QgbWFya1dpZHRoID0gdW5pdCAqIDAuOTtcbiAgICAgICAgc3R5bGUgPSB7XG4gICAgICAgICAgd2lkdGggICAgIDogYCR7bWFya1dpZHRofSVgLFxuICAgICAgICAgIG1hcmdpbkxlZnQ6IGAkey1tYXJrV2lkdGggLyAyfSVgLFxuICAgICAgICAgIGxlZnQgICAgICA6IGAkeyh2YWx1ZSAtIHRoaXMubnpNaW4pIC8gcmFuZ2UgKiAxMDB9JWBcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIC8vIGN1c3RvbSBjb25maWd1cmF0aW9uXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgbGFiZWwgPSBjb25maWcubGFiZWw7XG4gICAgICAgIGlmIChjb25maWcuc3R5bGUpIHtcbiAgICAgICAgICBzdHlsZSA9IHsgLi4uc3R5bGUsIC4uLmNvbmZpZy5zdHlsZSB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpZCAgICAgOiB2YWx1ZSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIG9mZnNldCxcbiAgICAgICAgY2xhc3Nlczoge1xuICAgICAgICAgIFsgYCR7dGhpcy5uekNsYXNzTmFtZX0tdGV4dGAgXTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBzdHlsZSxcbiAgICAgICAgbGFiZWxcbiAgICAgIH07XG4gICAgfSk7IC8vIEVORCAtIG1hcFxuICB9XG5cbiAgdG9nZ2xlUG9pbnRBY3RpdmUoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuYXR0cnMgJiYgdGhpcy5uekxvd2VyQm91bmQgIT09IG51bGwgJiYgdGhpcy5uelVwcGVyQm91bmQgIT09IG51bGwpIHtcbiAgICAgIHRoaXMuYXR0cnMuZm9yRWFjaChhdHRyID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBhdHRyLnZhbHVlO1xuICAgICAgICBjb25zdCBpc0FjdGl2ZSA9ICghdGhpcy5uekluY2x1ZGVkICYmIHZhbHVlID09PSB0aGlzLm56VXBwZXJCb3VuZCkgfHxcbiAgICAgICAgICAodGhpcy5uekluY2x1ZGVkICYmIHZhbHVlIDw9IHRoaXMubnpVcHBlckJvdW5kICYmIHZhbHVlID49IHRoaXMubnpMb3dlckJvdW5kKTtcbiAgICAgICAgYXR0ci5jbGFzc2VzWyBgJHt0aGlzLm56Q2xhc3NOYW1lfS10ZXh0LWFjdGl2ZWAgXSA9IGlzQWN0aXZlO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbn1cblxuLy8gREVGSU5JVElPTlNcblxuZXhwb3J0IHR5cGUgTWFyayA9IHN0cmluZyB8IHtcbiAgc3R5bGU6IG9iamVjdDtcbiAgbGFiZWw6IHN0cmluZztcbn07XG5cbmV4cG9ydCBjbGFzcyBNYXJrcyB7XG4gIG51bWJlcjogTWFyaztcbn1cblxuLy8gVE9ETzogZXh0ZW5kcyBBcnJheSBjb3VsZCBjYXVzZSB1bmV4cGVjdGVkIGJlaGF2aW9yIHdoZW4gdGFyZ2V0aW5nIGVzNSBvciBiZWxvd1xuZXhwb3J0IGNsYXNzIE1hcmtzQXJyYXkgZXh0ZW5kcyBBcnJheTx7IHZhbHVlOiBudW1iZXIsIG9mZnNldDogbnVtYmVyLCBjb25maWc6IE1hcmsgfT4ge1xuICBbIGluZGV4OiBudW1iZXIgXToge1xuICAgIHZhbHVlOiBudW1iZXI7XG4gICAgb2Zmc2V0OiBudW1iZXI7XG4gICAgY29uZmlnOiBNYXJrO1xuICB9XG59XG4iLCJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOelNsaWRlclNlcnZpY2Uge1xuXG4gIHBhdXNlRXZlbnQoZTogRXZlbnQpOiB2b2lkIHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfVxuXG4gIGdldFByZWNpc2lvbihudW06IG51bWJlcik6IG51bWJlciB7XG4gICAgY29uc3QgbnVtU3RyID0gbnVtLnRvU3RyaW5nKCk7XG4gICAgY29uc3QgZG90SW5kZXggPSBudW1TdHIuaW5kZXhPZignLicpO1xuICAgIHJldHVybiBkb3RJbmRleCA+PSAwID8gbnVtU3RyLmxlbmd0aCAtIGRvdEluZGV4IC0gMSA6IDA7XG4gIH1cblxuICBjbG9uZUFycmF5PFQ+KGFycjogVFtdKTogVFtdIHtcbiAgICByZXR1cm4gYXJyLnNsaWNlKCk7XG4gIH1cblxuICBpc05vdFRvdWNoRXZlbnQoZTogVG91Y2hFdmVudCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhZS50b3VjaGVzIHx8IGUudG91Y2hlcy5sZW5ndGggPiAxIHx8XG4gICAgICAoZS50eXBlLnRvTG93ZXJDYXNlKCkgPT09ICd0b3VjaGVuZCcgJiYgZS50b3VjaGVzLmxlbmd0aCA+IDApO1xuICB9XG5cbiAgLy8gY29udmVydCB2YWx1ZSB0byBvZmZzZXQgaW4gcGVyY2VudFxuICB2YWx1ZVRvT2Zmc2V0KG1pbjogbnVtYmVyLCBtYXg6IG51bWJlciwgdmFsdWU6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuICh2YWx1ZSAtIG1pbikgLyAobWF4IC0gbWluKSAqIDEwMDtcbiAgfVxuXG4gIGNvcnJlY3ROdW1MaW1pdChudW06IG51bWJlciwgbWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBsZXQgcmVzID0gK251bTtcbiAgICBpZiAoaXNOYU4ocmVzKSkgeyByZXR1cm4gbWluOyB9XG4gICAgaWYgKG51bSA8IG1pbikgeyByZXMgPSBtaW47IH0gZWxzZSBpZiAobnVtID4gbWF4KSB7IHJlcyA9IG1heDsgfVxuICAgIHJldHVybiByZXM7XG4gIH1cblxuICAvKipcbiAgICogZ2V0IHRoZSBvZmZzZXQgb2YgYW4gZWxlbWVudCByZWxhdGl2ZSB0byB0aGUgZG9jdW1lbnQgKFJlZmVyZW5jZSBmcm9tIGpxdWVyeSdzIG9mZnNldCgpKVxuICAgKiBAcGFyYW0gZWxlbSBIVE1MRWxlbWVudCByZWZcbiAgICovXG4gIGdldEVsZW1lbnRPZmZzZXQoZWxlbTogSFRNTEVsZW1lbnQpOiB7IHRvcDogbnVtYmVyLCBsZWZ0OiBudW1iZXIgfSB7XG4gICAgLy8gUmV0dXJuIHplcm9zIGZvciBkaXNjb25uZWN0ZWQgYW5kIGhpZGRlbiAoZGlzcGxheTogbm9uZSkgZWxlbWVudHMgKGdoLTIzMTApXG4gICAgLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4gICAgLy8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYVxuICAgIC8vIGRpc2Nvbm5lY3RlZCBub2RlIGluIElFIHRocm93cyBhbiBlcnJvclxuICAgIGlmICghZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG4gICAgfVxuICAgIC8vIEdldCBkb2N1bWVudC1yZWxhdGl2ZSBwb3NpdGlvbiBieSBhZGRpbmcgdmlld3BvcnQgc2Nyb2xsIHRvIHZpZXdwb3J0LXJlbGF0aXZlIGdCQ1JcbiAgICBjb25zdCByZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjb25zdCB3aW4gPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQsXG4gICAgICBsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXRcbiAgICB9O1xuICB9XG5cbn1cbiIsIi8qIHRzbGludDpkaXNhYmxlOnZhcmlhYmxlLW5hbWUgKi9cbmltcG9ydCB7XG4gIGZvcndhcmRSZWYsXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT25DaGFuZ2VzLFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgT3V0cHV0LFxuICBTaW1wbGVDaGFuZ2VzLFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBmcm9tRXZlbnQsIG1lcmdlLCBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkLCBmaWx0ZXIsIG1hcCwgcGx1Y2ssIHRha2VVbnRpbCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyB0b0Jvb2xlYW4gfSBmcm9tICcuLi9jb3JlL3V0aWwvY29udmVydCc7XG5cbmltcG9ydCB7IE1hcmtzLCBNYXJrc0FycmF5IH0gZnJvbSAnLi9uei1zbGlkZXItbWFya3MuY29tcG9uZW50JztcbmltcG9ydCB7IE56U2xpZGVyU2VydmljZSB9IGZyb20gJy4vbnotc2xpZGVyLnNlcnZpY2UnO1xuXG5leHBvcnQgdHlwZSBTbGlkZXJWYWx1ZSA9IG51bWJlcltdIHwgbnVtYmVyO1xuXG5leHBvcnQgY2xhc3MgU2xpZGVySGFuZGxlIHtcbiAgb2Zmc2V0OiBudW1iZXI7XG4gIHZhbHVlOiBudW1iZXI7XG4gIGFjdGl2ZTogYm9vbGVhbjtcbn1cblxuaW50ZXJmYWNlIE1vdXNlVG91Y2hPYnNlcnZlckNvbmZpZyB7XG4gIHN0YXJ0OiBzdHJpbmc7XG4gIG1vdmU6IHN0cmluZztcbiAgZW5kOiBzdHJpbmc7XG4gIHBsdWNrS2V5OiBzdHJpbmdbXTtcblxuICBmaWx0ZXI/KGU6IEV2ZW50KTogYm9vbGVhbjtcblxuICBzdGFydFBsdWNrZWQkPzogT2JzZXJ2YWJsZTxudW1iZXI+O1xuICBlbmQkPzogT2JzZXJ2YWJsZTxFdmVudD47XG4gIG1vdmVSZXNvbHZlZCQ/OiBPYnNlcnZhYmxlPG51bWJlcj47XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICAgICAgOiAnbnotc2xpZGVyJyxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG4gIHByb3ZpZGVycyAgICAgICAgICA6IFsge1xuICAgIHByb3ZpZGUgICAgOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBOelNsaWRlckNvbXBvbmVudCksXG4gICAgbXVsdGkgICAgICA6IHRydWVcbiAgfSBdLFxuICB0ZW1wbGF0ZVVybCAgICAgICAgOiAnLi9uei1zbGlkZXIuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIE56U2xpZGVyQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuXG4gIC8vIERlYnVnZ2luZ1xuICBASW5wdXQoKSBuekRlYnVnSWQ6IG51bWJlciB8IHN0cmluZyA9IG51bGw7IC8vIHNldCB0aGlzIGlkIHdpbGwgcHJpbnQgZGVidWcgaW5mb3JtYXRpb25zIHRvIGNvbnNvbGVcblxuICAvLyBEeW5hbWljIHByb3BlcnR5IHNldHRpbmdzXG4gIEBJbnB1dCgpXG4gIHNldCBuekRpc2FibGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fZGlzYWJsZWQgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56RGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVkO1xuICB9XG5cbiAgLy8gU3RhdGljIGNvbmZpZ3VyYXRpb25zIChwcm9wZXJ0aWVzIHRoYXQgY2FuIG9ubHkgc3BlY2lmeSBvbmNlKVxuICBASW5wdXQoKSBuelN0ZXAgPSAxO1xuICBASW5wdXQoKSBuek1hcmtzOiBNYXJrcyA9IG51bGw7XG4gIEBJbnB1dCgpIG56TWluID0gMDtcbiAgQElucHV0KCkgbnpNYXggPSAxMDA7XG4gIEBJbnB1dCgpIG56RGVmYXVsdFZhbHVlOiBTbGlkZXJWYWx1ZSA9IG51bGw7XG4gIEBJbnB1dCgpIG56VGlwRm9ybWF0dGVyOiAodmFsdWU6IG51bWJlcikgPT4gc3RyaW5nO1xuICBAT3V0cHV0KCkgbnpPbkFmdGVyQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxTbGlkZXJWYWx1ZT4oKTtcblxuICBASW5wdXQoKVxuICBzZXQgbnpWZXJ0aWNhbCh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX3ZlcnRpY2FsID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuelZlcnRpY2FsKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl92ZXJ0aWNhbDtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuelJhbmdlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fcmFuZ2UgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56UmFuZ2UoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3JhbmdlO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56RG90cyh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2RvdHMgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56RG90cygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fZG90cztcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekluY2x1ZGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5faW5jbHVkZWQgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56SW5jbHVkZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2luY2x1ZGVkO1xuICB9XG5cbiAgLy8gSW5zaWRlIHByb3BlcnRpZXNcbiAgcHJpdmF0ZSBfZGlzYWJsZWQgPSBmYWxzZTtcbiAgcHJpdmF0ZSBfZG90cyA9IGZhbHNlO1xuICBwcml2YXRlIF9pbmNsdWRlZCA9IHRydWU7XG4gIHByaXZhdGUgX3JhbmdlID0gZmFsc2U7XG4gIHByaXZhdGUgX3ZlcnRpY2FsID0gZmFsc2U7XG5cbiAgdmFsdWU6IFNsaWRlclZhbHVlID0gbnVsbDsgLy8gQ09SRSB2YWx1ZSBzdGF0ZVxuICBAVmlld0NoaWxkKCdzbGlkZXInKSBzbGlkZXI6IEVsZW1lbnRSZWY7XG4gIHNsaWRlckRPTTogSFRNTERpdkVsZW1lbnQ7XG4gIGNhY2hlU2xpZGVyU3RhcnQ6IG51bWJlciA9IG51bGw7XG4gIGNhY2hlU2xpZGVyTGVuZ3RoOiBudW1iZXIgPSBudWxsO1xuICBwcmVmaXhDbHMgPSAnYW50LXNsaWRlcic7XG4gIGNsYXNzTWFwOiBvYmplY3Q7XG4gIGFjdGl2ZVZhbHVlSW5kZXg6IG51bWJlciA9IG51bGw7IC8vIEN1cnJlbnQgYWN0aXZhdGVkIGhhbmRsZSdzIGluZGV4IE9OTFkgZm9yIHJhbmdlPXRydWVcbiAgdHJhY2sgPSB7IG9mZnNldDogbnVsbCwgbGVuZ3RoOiBudWxsIH07IC8vIFRyYWNrJ3Mgb2Zmc2V0IGFuZCBsZW5ndGhcbiAgaGFuZGxlczogU2xpZGVySGFuZGxlW107IC8vIEhhbmRsZXMnIG9mZnNldFxuICBtYXJrc0FycmF5OiBNYXJrc1tdOyAvLyBcIm1hcmtzXCIgaW4gYXJyYXkgdHlwZSB3aXRoIG1vcmUgZGF0YSAmIEZJTFRFUiBvdXQgdGhlIGludmFsaWQgbWFya1xuICBib3VuZHMgPSB7IGxvd2VyOiBudWxsLCB1cHBlcjogbnVsbCB9OyAvLyBub3cgZm9yIG56LXNsaWRlci1zdGVwXG4gIG9uVmFsdWVDaGFuZ2U6ICh2YWx1ZTogU2xpZGVyVmFsdWUpID0+IHZvaWQ7IC8vIFVzZWQgYnkgbmdNb2RlbC4gQlVHOiBvblZhbHVlQ2hhbmdlKCkgd2lsbCBub3Qgc3VjY2VzcyB0byBlZmZlY3QgdGhlIFwidmFsdWVcIiB2YXJpYWJsZSAoIFsobmdNb2RlbCldPVwidmFsdWVcIiApIHdoZW4gdGhlIGZpcnN0IGluaXRpYWxpemluZywgZXhjZXB0IHVzaW5nIFwibmV4dFRpY2tcIiBmdW5jdGlvbmFsaXR5IChNQVkgYW5ndWxhcjIncyBwcm9ibGVtID8pXG4gIG9uVG91Y2hlZDogKCkgPT4gdm9pZCA9ICgpID0+IHtcbiAgfSAvLyBvblRvdWNoIGZ1bmN0aW9uIHJlZ2lzdGVyZWQgdmlhIHJlZ2lzdGVyT25Ub3VjaCAoQ29udHJvbFZhbHVlQWNjZXNzb3IpLlxuICBpc0RyYWdnaW5nID0gZmFsc2U7IC8vIEN1cnJlbnQgZHJhZ2dpbmcgc3RhdGVcblxuICAvLyBFdmVudHMgb2JzZXJ2YWJsZXMgJiBzdWJzY3JpcHRpb25zXG4gIGRyYWdzdGFydCQ6IE9ic2VydmFibGU8bnVtYmVyPjtcbiAgZHJhZ21vdmUkOiBPYnNlcnZhYmxlPG51bWJlcj47XG4gIGRyYWdlbmQkOiBPYnNlcnZhYmxlPEV2ZW50PjtcbiAgZHJhZ3N0YXJ0XzogU3Vic2NyaXB0aW9uO1xuICBkcmFnbW92ZV86IFN1YnNjcmlwdGlvbjtcbiAgZHJhZ2VuZF86IFN1YnNjcmlwdGlvbjtcblxuICAvLyB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCB2YWx1ZSBhY2Nlc3NvcnMgJiBuZ01vZGVsIGFjY2Vzc29yc1xuICAvLyB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICBzZXRWYWx1ZSh2YWw6IFNsaWRlclZhbHVlLCBpc1dyaXRlVmFsdWU6IGJvb2xlYW4gPSBmYWxzZSk6IHZvaWQge1xuICAgIGlmIChpc1dyaXRlVmFsdWUpIHsgLy8gW25nTW9kZWwtd3JpdGVWYWx1ZV06IEZvcm1hdHRpbmcgYmVmb3JlIHNldHRpbmcgdmFsdWUsIGFsd2F5cyB1cGRhdGUgY3VycmVudCB2YWx1ZSwgYnV0IHRyaWdnZXIgb25WYWx1ZUNoYW5nZSBPTkxZIHdoZW4gdGhlIFwiZm9ybWF0dGVkIHZhbHVlXCIgbm90IGVxdWFscyBcImlucHV0IHZhbHVlXCJcbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLmZvcm1hdFZhbHVlKHZhbCk7XG4gICAgICB0aGlzLmxvZyhgW25nTW9kZWw6c2V0VmFsdWUvd3JpdGVWYWx1ZV1VcGRhdGUgdHJhY2sgJiBoYW5kbGVzYCk7XG4gICAgICB0aGlzLnVwZGF0ZVRyYWNrQW5kSGFuZGxlcygpO1xuICAgICAgLy8gaWYgKCF0aGlzLmlzVmFsdWVFcXVhbCh0aGlzLnZhbHVlLCB2YWwpKSB7XG4gICAgICAvLyAgIHRoaXMubG9nKGBbbmdNb2RlbDpzZXRWYWx1ZS93cml0ZVZhbHVlXW9uVmFsdWVDaGFuZ2VgLCB2YWwpO1xuICAgICAgLy8gICBpZiAodGhpcy5vblZhbHVlQ2hhbmdlKSB7IC8vIE5PVEU6IG9uVmFsdWVDaGFuZ2Ugd2lsbCBiZSB1bmF2YWlsYWJsZSB3aGVuIHdyaXRlVmFsdWUoKSBjYWxsZWQgYXQgdGhlIGZpcnN0IHRpbWVcbiAgICAgIC8vICAgICB0aGlzLm9uVmFsdWVDaGFuZ2UodGhpcy52YWx1ZSk7XG4gICAgICAvLyAgIH1cbiAgICAgIC8vIH1cbiAgICB9IGVsc2UgeyAvLyBbTm9ybWFsXTogc2V0dGluZyB2YWx1ZSwgT05MWSBjaGVjayBjaGFuZ2VkLCB0aGVuIHVwZGF0ZSBhbmQgdHJpZ2dlciBvblZhbHVlQ2hhbmdlXG4gICAgICBpZiAoIXRoaXMuaXNWYWx1ZUVxdWFsKHRoaXMudmFsdWUsIHZhbCkpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbDtcbiAgICAgICAgdGhpcy5sb2coYFtOb3JtYWw6c2V0VmFsdWVdVXBkYXRlIHRyYWNrICYgaGFuZGxlc2ApO1xuICAgICAgICB0aGlzLnVwZGF0ZVRyYWNrQW5kSGFuZGxlcygpO1xuICAgICAgICB0aGlzLmxvZyhgW05vcm1hbDpzZXRWYWx1ZV1vblZhbHVlQ2hhbmdlYCwgdmFsKTtcbiAgICAgICAgaWYgKHRoaXMub25WYWx1ZUNoYW5nZSkgeyAvLyBOT1RFOiBvblZhbHVlQ2hhbmdlIHdpbGwgYmUgdW5hdmFpbGFibGUgd2hlbiB3cml0ZVZhbHVlKCkgY2FsbGVkIGF0IHRoZSBmaXJzdCB0aW1lXG4gICAgICAgICAgdGhpcy5vblZhbHVlQ2hhbmdlKHRoaXMudmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0VmFsdWUoY2xvbmVBbmRTb3J0OiBib29sZWFuID0gZmFsc2UpOiBTbGlkZXJWYWx1ZSB7XG4gICAgLy8gVE9ETzogdXNpbmcgdHlwZSBndWFyZCwgcmVtb3ZlIHR5cGUgY2FzdFxuICAgIGlmIChjbG9uZUFuZFNvcnQgJiYgdGhpcy5uelJhbmdlKSB7IC8vIGNsb25lICYgc29ydCByYW5nZSB2YWx1ZXNcbiAgICAgIHJldHVybiB0aGlzLnV0aWxzLmNsb25lQXJyYXkodGhpcy52YWx1ZSBhcyBudW1iZXJbXSkuc29ydCgoYSwgYikgPT4gYSAtIGIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgfVxuXG4gIC8vIGNsb25lICYgc29ydCBjdXJyZW50IHZhbHVlIGFuZCBjb252ZXJ0IHRoZW0gdG8gb2Zmc2V0cywgdGhlbiByZXR1cm4gdGhlIG5ldyBvbmVcbiAgZ2V0VmFsdWVUb09mZnNldCh2YWx1ZT86IFNsaWRlclZhbHVlKTogU2xpZGVyVmFsdWUge1xuICAgIGxldCBub3JtYWxpemVkVmFsdWUgPSB2YWx1ZTtcbiAgICBpZiAodHlwZW9mIG5vcm1hbGl6ZWRWYWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIG5vcm1hbGl6ZWRWYWx1ZSA9IHRoaXMuZ2V0VmFsdWUodHJ1ZSk7XG4gICAgfVxuICAgIC8vIFRPRE86IHVzaW5nIHR5cGUgZ3VhcmQsIHJlbW92ZSB0eXBlIGNhc3RcbiAgICByZXR1cm4gdGhpcy5uelJhbmdlID9cbiAgICAgIChub3JtYWxpemVkVmFsdWUgYXMgbnVtYmVyW10pLm1hcCh2YWwgPT4gdGhpcy52YWx1ZVRvT2Zmc2V0KHZhbCkpIDpcbiAgICAgIHRoaXMudmFsdWVUb09mZnNldChub3JtYWxpemVkVmFsdWUgYXMgbnVtYmVyKTtcbiAgfVxuXG4gIHdyaXRlVmFsdWUodmFsOiBTbGlkZXJWYWx1ZSk6IHZvaWQge1xuICAgIHRoaXMubG9nKGBbbmdNb2RlbC93cml0ZVZhbHVlXWN1cnJlbnQgd3JpdGluZyB2YWx1ZSA9IGAsIHZhbCk7XG4gICAgdGhpcy5zZXRWYWx1ZSh2YWwsIHRydWUpO1xuICB9XG5cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKHZhbHVlOiBTbGlkZXJWYWx1ZSkgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMub25WYWx1ZUNoYW5nZSA9IGZuO1xuICB9XG5cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0aGlzLm9uVG91Y2hlZCA9IGZuO1xuICB9XG5cbiAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5uekRpc2FibGVkID0gaXNEaXNhYmxlZDtcbiAgICB0aGlzLnRvZ2dsZURyYWdEaXNhYmxlZChpc0Rpc2FibGVkKTtcbiAgICB0aGlzLnNldENsYXNzTWFwKCk7XG4gIH1cblxuICAvLyB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBMaWZlY3ljbGUgaG9va3NcbiAgLy8gfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB1dGlsczogTnpTbGlkZXJTZXJ2aWNlKSB7XG4gIH1cblxuICAvLyBpbml0aWFsaXplIGV2ZW50IGJpbmRpbmcsIGNsYXNzIGluaXQsIGV0Yy4gKGNhbGxlZCBvbmx5IG9uY2UpXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIC8vIGluaXRpYWwgY2hlY2tpbmdcbiAgICB0aGlzLmNoZWNrVmFsaWRWYWx1ZSh0aGlzLm56RGVmYXVsdFZhbHVlKTsgLy8gY2hlY2sgbnpEZWZhdWx0VmFsdWVcbiAgICAvLyBkZWZhdWx0IGhhbmRsZXNcbiAgICB0aGlzLmhhbmRsZXMgPSB0aGlzLl9nZW5lcmF0ZUhhbmRsZXModGhpcy5uelJhbmdlID8gMiA6IDEpO1xuICAgIC8vIGluaXRpYWxpemVcbiAgICB0aGlzLnNsaWRlckRPTSA9IHRoaXMuc2xpZGVyLm5hdGl2ZUVsZW1lbnQ7XG4gICAgaWYgKHRoaXMuZ2V0VmFsdWUoKSA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLmZvcm1hdFZhbHVlKG51bGwpKTtcbiAgICB9IC8vIGluaXQgd2l0aCBkZWZhdWx0IHZhbHVlXG4gICAgdGhpcy5tYXJrc0FycmF5ID0gdGhpcy5uek1hcmtzID09PSBudWxsID8gbnVsbCA6IHRoaXMudG9NYXJrc0FycmF5KHRoaXMubnpNYXJrcyk7XG4gICAgLy8gZXZlbnQgYmluZGluZ3NcbiAgICB0aGlzLmNyZWF0ZURyYWcoKTtcbiAgICAvLyBpbml0aWFsaXplIGRyYWcncyBkaXNhYmxlZCBzdGF0dXNcbiAgICB0aGlzLnRvZ2dsZURyYWdEaXNhYmxlZCh0aGlzLm56RGlzYWJsZWQpO1xuICAgIC8vIHRoZSBmaXJzdCB0aW1lIHRvIGluaXQgY2xhc3Nlc1xuICAgIHRoaXMuc2V0Q2xhc3NNYXAoKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBjb25zdCB7IG56RGlzYWJsZWQsIG56TWFya3MsIG56UmFuZ2UgfSA9IGNoYW5nZXM7XG4gICAgaWYgKG56RGlzYWJsZWQgJiYgIW56RGlzYWJsZWQuZmlyc3RDaGFuZ2UpIHtcbiAgICAgIHRoaXMudG9nZ2xlRHJhZ0Rpc2FibGVkKG56RGlzYWJsZWQuY3VycmVudFZhbHVlKTtcbiAgICAgIHRoaXMuc2V0Q2xhc3NNYXAoKTtcbiAgICB9IGVsc2UgaWYgKG56TWFya3MgJiYgIW56TWFya3MuZmlyc3RDaGFuZ2UpIHtcbiAgICAgIHRoaXMubWFya3NBcnJheSA9IHRoaXMubnpNYXJrcyA/IHRoaXMudG9NYXJrc0FycmF5KHRoaXMubnpNYXJrcykgOiBudWxsO1xuICAgIH0gZWxzZSBpZiAobnpSYW5nZSAmJiAhbnpSYW5nZS5maXJzdENoYW5nZSkge1xuICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLmZvcm1hdFZhbHVlKG51bGwpKTsgLy8gQ2hhbmdlIHRvIGRlZmF1bHQgdmFsdWUgd2hlbiBuelJhbmdlIGNoYW5nZWRcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLnVuc3Vic2NyaWJlRHJhZygpO1xuICB9XG5cbiAgLy8gfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgQmFzaWMgZmxvdyBmdW5jdGlvbnNcbiAgLy8gfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgc2V0Q2xhc3NNYXAoKTogdm9pZCB7XG4gICAgdGhpcy5jbGFzc01hcCA9IHtcbiAgICAgIFsgdGhpcy5wcmVmaXhDbHMgXSAgICAgICAgICAgICAgICA6IHRydWUsXG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xzfS1kaXNhYmxlZGAgXSAgOiB0aGlzLm56RGlzYWJsZWQsXG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xzfS12ZXJ0aWNhbGAgXSAgOiB0aGlzLm56VmVydGljYWwsXG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xzfS13aXRoLW1hcmtzYCBdOiB0aGlzLm1hcmtzQXJyYXkgPyB0aGlzLm1hcmtzQXJyYXkubGVuZ3RoIDogMFxuICAgIH07XG4gIH1cblxuICAvLyBmaW5kIHRoZSBjbG9lc3QgdmFsdWUgdG8gYmUgYWN0aXZhdGVkIChvbmx5IGZvciByYW5nZSA9IHRydWUpXG4gIHNldEFjdGl2ZVZhbHVlSW5kZXgocG9pbnRlclZhbHVlOiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5uelJhbmdlKSB7XG4gICAgICBsZXQgbWluaW1hbCA9IG51bGw7XG4gICAgICBsZXQgZ2FwO1xuICAgICAgbGV0IGFjdGl2ZUluZGV4O1xuICAgICAgLy8gVE9ETzogdXNpbmcgdHlwZSBndWFyZCwgcmVtb3ZlIHR5cGUgY2FzdFxuICAgICAgKHRoaXMuZ2V0VmFsdWUoKSBhcyBudW1iZXJbXSkuZm9yRWFjaCgodmFsLCBpbmRleCkgPT4ge1xuICAgICAgICBnYXAgPSBNYXRoLmFicyhwb2ludGVyVmFsdWUgLSB2YWwpO1xuICAgICAgICBpZiAobWluaW1hbCA9PT0gbnVsbCB8fCBnYXAgPCBtaW5pbWFsKSB7XG4gICAgICAgICAgbWluaW1hbCA9IGdhcDtcbiAgICAgICAgICBhY3RpdmVJbmRleCA9IGluZGV4O1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRoaXMuYWN0aXZlVmFsdWVJbmRleCA9IGFjdGl2ZUluZGV4O1xuICAgIH1cbiAgfVxuXG4gIHNldEFjdGl2ZVZhbHVlKHBvaW50ZXJWYWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubnpSYW5nZSkge1xuICAgICAgLy8gVE9ETzogdXNpbmcgdHlwZSBndWFyZCwgcmVtb3ZlIHR5cGUgY2FzdFxuICAgICAgY29uc3QgbmV3VmFsdWUgPSB0aGlzLnV0aWxzLmNsb25lQXJyYXkodGhpcy52YWx1ZSBhcyBudW1iZXJbXSk7XG4gICAgICBuZXdWYWx1ZVsgdGhpcy5hY3RpdmVWYWx1ZUluZGV4IF0gPSBwb2ludGVyVmFsdWU7XG4gICAgICB0aGlzLnNldFZhbHVlKG5ld1ZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRWYWx1ZShwb2ludGVyVmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZVRyYWNrQW5kSGFuZGxlcygpOiB2b2lkIHtcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZ2V0VmFsdWUoKTtcbiAgICBjb25zdCBvZmZzZXQgPSB0aGlzLmdldFZhbHVlVG9PZmZzZXQodmFsdWUpO1xuICAgIGNvbnN0IHZhbHVlU29ydGVkID0gdGhpcy5nZXRWYWx1ZSh0cnVlKTtcbiAgICBjb25zdCBvZmZzZXRTb3J0ZWQgPSB0aGlzLmdldFZhbHVlVG9PZmZzZXQodmFsdWVTb3J0ZWQpO1xuICAgIGNvbnN0IGJvdW5kUGFydHMgPSB0aGlzLm56UmFuZ2UgPyB2YWx1ZVNvcnRlZCBhcyBudW1iZXJbXSA6IFsgMCwgdmFsdWVTb3J0ZWQgXTtcbiAgICBjb25zdCB0cmFja1BhcnRzID0gdGhpcy5uelJhbmdlID8gWyBvZmZzZXRTb3J0ZWRbIDAgXSwgb2Zmc2V0U29ydGVkWyAxIF0gLSBvZmZzZXRTb3J0ZWRbIDAgXSBdIDogWyAwLCBvZmZzZXRTb3J0ZWQgXTtcblxuICAgIHRoaXMuaGFuZGxlcy5mb3JFYWNoKChoYW5kbGUsIGluZGV4KSA9PiB7XG4gICAgICBoYW5kbGUub2Zmc2V0ID0gdGhpcy5uelJhbmdlID8gb2Zmc2V0WyBpbmRleCBdIDogb2Zmc2V0O1xuICAgICAgaGFuZGxlLnZhbHVlID0gdGhpcy5uelJhbmdlID8gdmFsdWVbIGluZGV4IF0gOiB2YWx1ZTtcbiAgICB9KTtcbiAgICBbIHRoaXMuYm91bmRzLmxvd2VyLCB0aGlzLmJvdW5kcy51cHBlciBdID0gYm91bmRQYXJ0cztcbiAgICBbIHRoaXMudHJhY2sub2Zmc2V0LCB0aGlzLnRyYWNrLmxlbmd0aCBdID0gdHJhY2tQYXJ0cztcbiAgfVxuXG4gIHRvTWFya3NBcnJheShtYXJrczogTWFya3MpOiBNYXJrc1tdIHtcbiAgICBjb25zdCBtYXJrc0FycmF5ID0gW107XG4gICAgZm9yIChjb25zdCBrZXkgaW4gbWFya3MpIHtcbiAgICAgIGNvbnN0IG1hcmsgPSBtYXJrc1sga2V5IF07XG4gICAgICBjb25zdCB2YWwgPSB0eXBlb2Yga2V5ID09PSAnbnVtYmVyJyA/IGtleSA6IHBhcnNlRmxvYXQoa2V5KTtcbiAgICAgIGlmICh2YWwgPCB0aGlzLm56TWluIHx8IHZhbCA+IHRoaXMubnpNYXgpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBtYXJrc0FycmF5LnB1c2goeyB2YWx1ZTogdmFsLCBvZmZzZXQ6IHRoaXMudmFsdWVUb09mZnNldCh2YWwpLCBjb25maWc6IG1hcmsgfSk7XG4gICAgfVxuICAgIHJldHVybiBtYXJrc0FycmF5O1xuICB9XG5cbiAgLy8gfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgRXZlbnQgbGlzdGVuZXJzICYgYmluZGluZ3NcbiAgLy8gfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgb25EcmFnU3RhcnQodmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMubG9nKCdbb25EcmFnU3RhcnRdZHJhZ2dpbmcgdmFsdWUgPSAnLCB2YWx1ZSk7XG4gICAgdGhpcy50b2dnbGVEcmFnTW92aW5nKHRydWUpO1xuICAgIC8vIGNhY2hlIERPTSBsYXlvdXQvcmVmbG93IG9wZXJhdGlvbnNcbiAgICB0aGlzLmNhY2hlU2xpZGVyUHJvcGVydHkoKTtcbiAgICAvLyB0cmlnZ2VyIGRyYWcgc3RhcnRcbiAgICB0aGlzLnNldEFjdGl2ZVZhbHVlSW5kZXgodmFsdWUpO1xuICAgIHRoaXMuc2V0QWN0aXZlVmFsdWUodmFsdWUpO1xuICAgIC8vIFRvb2x0aXAgdmlzaWJpbGl0eSBvZiBoYW5kbGVzXG4gICAgdGhpcy5fc2hvd0hhbmRsZVRvb2x0aXAodGhpcy5uelJhbmdlID8gdGhpcy5hY3RpdmVWYWx1ZUluZGV4IDogMCk7XG4gIH1cblxuICBvbkRyYWdNb3ZlKHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLmxvZygnW29uRHJhZ01vdmVdZHJhZ2dpbmcgdmFsdWUgPSAnLCB2YWx1ZSk7XG4gICAgLy8gdHJpZ2dlciBkcmFnIG1vdmluZ1xuICAgIHRoaXMuc2V0QWN0aXZlVmFsdWUodmFsdWUpO1xuICB9XG5cbiAgb25EcmFnRW5kKCk6IHZvaWQge1xuICAgIHRoaXMubG9nKCdbb25EcmFnRW5kXScpO1xuICAgIHRoaXMudG9nZ2xlRHJhZ01vdmluZyhmYWxzZSk7XG4gICAgdGhpcy5uek9uQWZ0ZXJDaGFuZ2UuZW1pdCh0aGlzLmdldFZhbHVlKHRydWUpKTtcbiAgICAvLyByZW1vdmUgY2FjaGUgRE9NIGxheW91dC9yZWZsb3cgb3BlcmF0aW9uc1xuICAgIHRoaXMuY2FjaGVTbGlkZXJQcm9wZXJ0eSh0cnVlKTtcbiAgICAvLyBIaWRlIGFsbCB0b29sdGlwXG4gICAgdGhpcy5faGlkZUFsbEhhbmRsZVRvb2x0aXAoKTtcbiAgfVxuXG4gIGNyZWF0ZURyYWcoKTogdm9pZCB7XG4gICAgY29uc3Qgc2xpZGVyRE9NID0gdGhpcy5zbGlkZXJET007XG4gICAgY29uc3Qgb3JpZW50RmllbGQgPSB0aGlzLm56VmVydGljYWwgPyAncGFnZVknIDogJ3BhZ2VYJztcbiAgICBjb25zdCBtb3VzZTogTW91c2VUb3VjaE9ic2VydmVyQ29uZmlnID0ge1xuICAgICAgc3RhcnQgICA6ICdtb3VzZWRvd24nLCBtb3ZlOiAnbW91c2Vtb3ZlJywgZW5kOiAnbW91c2V1cCcsXG4gICAgICBwbHVja0tleTogWyBvcmllbnRGaWVsZCBdXG4gICAgfTtcbiAgICBjb25zdCB0b3VjaDogTW91c2VUb3VjaE9ic2VydmVyQ29uZmlnID0ge1xuICAgICAgc3RhcnQgICA6ICd0b3VjaHN0YXJ0JywgbW92ZTogJ3RvdWNobW92ZScsIGVuZDogJ3RvdWNoZW5kJyxcbiAgICAgIHBsdWNrS2V5OiBbICd0b3VjaGVzJywgJzAnLCBvcmllbnRGaWVsZCBdLFxuICAgICAgZmlsdGVyICA6IChlOiBNb3VzZUV2ZW50IHwgVG91Y2hFdmVudCkgPT4gIXRoaXMudXRpbHMuaXNOb3RUb3VjaEV2ZW50KGUgYXMgVG91Y2hFdmVudClcbiAgICB9O1xuICAgIC8vIG1ha2Ugb2JzZXJ2YWJsZXNcbiAgICBbIG1vdXNlLCB0b3VjaCBdLmZvckVhY2goc291cmNlID0+IHtcbiAgICAgIGNvbnN0IHsgc3RhcnQsIG1vdmUsIGVuZCwgcGx1Y2tLZXksIGZpbHRlcjogZmlsdGVyRnVuYyA9ICgoKSA9PiB0cnVlKSB9ID0gc291cmNlO1xuICAgICAgLy8gc3RhcnRcbiAgICAgIHNvdXJjZS5zdGFydFBsdWNrZWQkID0gZnJvbUV2ZW50KHNsaWRlckRPTSwgc3RhcnQpLnBpcGUoXG4gICAgICAgIGZpbHRlcihmaWx0ZXJGdW5jKSxcbiAgICAgICAgdGFwKHRoaXMudXRpbHMucGF1c2VFdmVudCksXG4gICAgICAgIHBsdWNrKC4uLnBsdWNrS2V5KSxcbiAgICAgICAgbWFwKChwb3NpdGlvbjogbnVtYmVyKSA9PiB0aGlzLmZpbmRDbG9zZXN0VmFsdWUocG9zaXRpb24pKVxuICAgICAgKTtcbiAgICAgIC8vIGVuZFxuICAgICAgc291cmNlLmVuZCQgPSBmcm9tRXZlbnQoZG9jdW1lbnQsIGVuZCk7XG4gICAgICAvLyByZXNvbHZlIG1vdmVcbiAgICAgIHNvdXJjZS5tb3ZlUmVzb2x2ZWQkID0gZnJvbUV2ZW50KGRvY3VtZW50LCBtb3ZlKS5waXBlKFxuICAgICAgICBmaWx0ZXIoZmlsdGVyRnVuYyksXG4gICAgICAgIHRhcCh0aGlzLnV0aWxzLnBhdXNlRXZlbnQpLFxuICAgICAgICBwbHVjayguLi5wbHVja0tleSksXG4gICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgICAgIG1hcCgocG9zaXRpb246IG51bWJlcikgPT4gdGhpcy5maW5kQ2xvc2VzdFZhbHVlKHBvc2l0aW9uKSksXG4gICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgICAgIHRha2VVbnRpbChzb3VyY2UuZW5kJClcbiAgICAgICk7XG4gICAgICAvLyBtZXJnZSB0byBiZWNvbWUgbW92aW5nXG4gICAgICAvLyBzb3VyY2UubW92ZSQgPSBzb3VyY2Uuc3RhcnRQbHVja2VkJC5tZXJnZU1hcFRvKHNvdXJjZS5tb3ZlUmVzb2x2ZWQkKTtcbiAgICB9KTtcbiAgICAvLyBtZXJnZSBtb3VzZSBhbmQgdG91Y2ggb2JzZXJ2YWJsZXNcbiAgICB0aGlzLmRyYWdzdGFydCQgPSBtZXJnZShtb3VzZS5zdGFydFBsdWNrZWQkLCB0b3VjaC5zdGFydFBsdWNrZWQkKTtcbiAgICAvLyB0aGlzLmRyYWdtb3ZlJCA9IE9ic2VydmFibGUubWVyZ2UobW91c2UubW92ZSQsIHRvdWNoLm1vdmUkKTtcbiAgICB0aGlzLmRyYWdtb3ZlJCA9IG1lcmdlKG1vdXNlLm1vdmVSZXNvbHZlZCQsIHRvdWNoLm1vdmVSZXNvbHZlZCQpO1xuICAgIHRoaXMuZHJhZ2VuZCQgPSBtZXJnZShtb3VzZS5lbmQkLCB0b3VjaC5lbmQkKTtcbiAgfVxuXG4gIHN1YnNjcmliZURyYWcocGVyaW9kczogc3RyaW5nW10gPSBbICdzdGFydCcsICdtb3ZlJywgJ2VuZCcgXSk6IHZvaWQge1xuICAgIHRoaXMubG9nKCdbc3Vic2NyaWJlRHJhZ110aGlzLmRyYWdzdGFydCQgPSAnLCB0aGlzLmRyYWdzdGFydCQpO1xuICAgIGlmIChwZXJpb2RzLmluZGV4T2YoJ3N0YXJ0JykgIT09IC0xICYmIHRoaXMuZHJhZ3N0YXJ0JCAmJiAhdGhpcy5kcmFnc3RhcnRfKSB7XG4gICAgICB0aGlzLmRyYWdzdGFydF8gPSB0aGlzLmRyYWdzdGFydCQuc3Vic2NyaWJlKHRoaXMub25EcmFnU3RhcnQuYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgaWYgKHBlcmlvZHMuaW5kZXhPZignbW92ZScpICE9PSAtMSAmJiB0aGlzLmRyYWdtb3ZlJCAmJiAhdGhpcy5kcmFnbW92ZV8pIHtcbiAgICAgIHRoaXMuZHJhZ21vdmVfID0gdGhpcy5kcmFnbW92ZSQuc3Vic2NyaWJlKHRoaXMub25EcmFnTW92ZS5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICBpZiAocGVyaW9kcy5pbmRleE9mKCdlbmQnKSAhPT0gLTEgJiYgdGhpcy5kcmFnZW5kJCAmJiAhdGhpcy5kcmFnZW5kXykge1xuICAgICAgdGhpcy5kcmFnZW5kXyA9IHRoaXMuZHJhZ2VuZCQuc3Vic2NyaWJlKHRoaXMub25EcmFnRW5kLmJpbmQodGhpcykpO1xuICAgIH1cbiAgfVxuXG4gIHVuc3Vic2NyaWJlRHJhZyhwZXJpb2RzOiBzdHJpbmdbXSA9IFsgJ3N0YXJ0JywgJ21vdmUnLCAnZW5kJyBdKTogdm9pZCB7XG4gICAgdGhpcy5sb2coJ1t1bnN1YnNjcmliZURyYWdddGhpcy5kcmFnc3RhcnRfID0gJywgdGhpcy5kcmFnc3RhcnRfKTtcbiAgICBpZiAocGVyaW9kcy5pbmRleE9mKCdzdGFydCcpICE9PSAtMSAmJiB0aGlzLmRyYWdzdGFydF8pIHtcbiAgICAgIHRoaXMuZHJhZ3N0YXJ0Xy51bnN1YnNjcmliZSgpO1xuICAgICAgdGhpcy5kcmFnc3RhcnRfID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAocGVyaW9kcy5pbmRleE9mKCdtb3ZlJykgIT09IC0xICYmIHRoaXMuZHJhZ21vdmVfKSB7XG4gICAgICB0aGlzLmRyYWdtb3ZlXy51bnN1YnNjcmliZSgpO1xuICAgICAgdGhpcy5kcmFnbW92ZV8gPSBudWxsO1xuICAgIH1cblxuICAgIGlmIChwZXJpb2RzLmluZGV4T2YoJ2VuZCcpICE9PSAtMSAmJiB0aGlzLmRyYWdlbmRfKSB7XG4gICAgICB0aGlzLmRyYWdlbmRfLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLmRyYWdlbmRfID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICB0b2dnbGVEcmFnTW92aW5nKG1vdmFibGU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBjb25zdCBwZXJpb2RzID0gWyAnbW92ZScsICdlbmQnIF07XG4gICAgaWYgKG1vdmFibGUpIHtcbiAgICAgIHRoaXMuaXNEcmFnZ2luZyA9IHRydWU7XG4gICAgICB0aGlzLnN1YnNjcmliZURyYWcocGVyaW9kcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgdGhpcy51bnN1YnNjcmliZURyYWcocGVyaW9kcyk7XG4gICAgfVxuICB9XG5cbiAgdG9nZ2xlRHJhZ0Rpc2FibGVkKGRpc2FibGVkOiBib29sZWFuKTogdm9pZCB7XG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlRHJhZygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN1YnNjcmliZURyYWcoWyAnc3RhcnQnIF0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFV0aWwgZnVuY3Rpb25zICh0b29scylcbiAgLy8gfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gZmluZCB0aGUgY2xvc2VzdCB2YWx1ZSBkZXBlbmQgb24gcG9pbnRlcidzIHBvc2l0aW9uXG4gIGZpbmRDbG9zZXN0VmFsdWUocG9zaXRpb246IG51bWJlcik6IG51bWJlciB7XG4gICAgY29uc3Qgc2xpZGVyU3RhcnQgPSB0aGlzLmdldFNsaWRlclN0YXJ0UG9zaXRpb24oKTtcbiAgICBjb25zdCBzbGlkZXJMZW5ndGggPSB0aGlzLmdldFNsaWRlckxlbmd0aCgpO1xuICAgIGNvbnN0IHJhdGlvID0gdGhpcy51dGlscy5jb3JyZWN0TnVtTGltaXQoKHBvc2l0aW9uIC0gc2xpZGVyU3RhcnQpIC8gc2xpZGVyTGVuZ3RoLCAwLCAxKTtcbiAgICBjb25zdCB2YWwgPSAodGhpcy5uek1heCAtIHRoaXMubnpNaW4pICogKHRoaXMubnpWZXJ0aWNhbCA/IDEgLSByYXRpbyA6IHJhdGlvKSArIHRoaXMubnpNaW47XG4gICAgY29uc3QgcG9pbnRzID0gKHRoaXMubnpNYXJrcyA9PT0gbnVsbCA/IFtdIDogT2JqZWN0LmtleXModGhpcy5uek1hcmtzKS5tYXAocGFyc2VGbG9hdCkpO1xuICAgIC8vIHB1c2ggY2xvc2VzdCBzdGVwXG4gICAgaWYgKHRoaXMubnpTdGVwICE9PSBudWxsICYmICF0aGlzLm56RG90cykge1xuICAgICAgY29uc3QgY2xvc2VzdE9uZSA9IE1hdGgucm91bmQodmFsIC8gdGhpcy5uelN0ZXApICogdGhpcy5uelN0ZXA7XG4gICAgICBwb2ludHMucHVzaChjbG9zZXN0T25lKTtcbiAgICB9XG4gICAgLy8gY2FsY3VsYXRlIGdhcHNcbiAgICBjb25zdCBnYXBzID0gcG9pbnRzLm1hcChwb2ludCA9PiBNYXRoLmFicyh2YWwgLSBwb2ludCkpO1xuICAgIGNvbnN0IGNsb3Nlc3QgPSBwb2ludHNbIGdhcHMuaW5kZXhPZihNYXRoLm1pbiguLi5nYXBzKSkgXTtcbiAgICAvLyByZXR1cm4gdGhlIGZpeGVkXG4gICAgcmV0dXJuIHRoaXMubnpTdGVwID09PSBudWxsID8gY2xvc2VzdCA6XG4gICAgICBwYXJzZUZsb2F0KGNsb3Nlc3QudG9GaXhlZCh0aGlzLnV0aWxzLmdldFByZWNpc2lvbih0aGlzLm56U3RlcCkpKTtcbiAgfVxuXG4gIHZhbHVlVG9PZmZzZXQodmFsdWU6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMudXRpbHMudmFsdWVUb09mZnNldCh0aGlzLm56TWluLCB0aGlzLm56TWF4LCB2YWx1ZSk7XG4gIH1cblxuICBnZXRTbGlkZXJTdGFydFBvc2l0aW9uKCk6IG51bWJlciB7XG4gICAgaWYgKHRoaXMuY2FjaGVTbGlkZXJTdGFydCAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRoaXMuY2FjaGVTbGlkZXJTdGFydDtcbiAgICB9XG4gICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy51dGlscy5nZXRFbGVtZW50T2Zmc2V0KHRoaXMuc2xpZGVyRE9NKTtcbiAgICByZXR1cm4gdGhpcy5uelZlcnRpY2FsID8gb2Zmc2V0LnRvcCA6IG9mZnNldC5sZWZ0O1xuICB9XG5cbiAgZ2V0U2xpZGVyTGVuZ3RoKCk6IG51bWJlciB7XG4gICAgaWYgKHRoaXMuY2FjaGVTbGlkZXJMZW5ndGggIT09IG51bGwpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlU2xpZGVyTGVuZ3RoO1xuICAgIH1cbiAgICBjb25zdCBzbGlkZXJET00gPSB0aGlzLnNsaWRlckRPTTtcbiAgICByZXR1cm4gdGhpcy5uelZlcnRpY2FsID9cbiAgICAgIHNsaWRlckRPTS5jbGllbnRIZWlnaHQgOiBzbGlkZXJET00uY2xpZW50V2lkdGg7XG4gIH1cblxuICAvLyBjYWNoZSBET00gbGF5b3V0L3JlZmxvdyBvcGVyYXRpb25zIGZvciBwZXJmb3JtYW5jZSAobWF5IG5vdCBuZWNlc3Nhcnk/KVxuICBjYWNoZVNsaWRlclByb3BlcnR5KHJlbW92ZTogYm9vbGVhbiA9IGZhbHNlKTogdm9pZCB7XG4gICAgdGhpcy5jYWNoZVNsaWRlclN0YXJ0ID0gcmVtb3ZlID8gbnVsbCA6IHRoaXMuZ2V0U2xpZGVyU3RhcnRQb3NpdGlvbigpO1xuICAgIHRoaXMuY2FjaGVTbGlkZXJMZW5ndGggPSByZW1vdmUgPyBudWxsIDogdGhpcy5nZXRTbGlkZXJMZW5ndGgoKTtcbiAgfVxuXG4gIGZvcm1hdFZhbHVlKHZhbHVlOiBTbGlkZXJWYWx1ZSk6IFNsaWRlclZhbHVlIHsgLy8gTk9URTogd2lsbCByZXR1cm4gbmV3IHZhbHVlXG4gICAgbGV0IHJlcyA9IHZhbHVlO1xuICAgIGlmICghdGhpcy5jaGVja1ZhbGlkVmFsdWUodmFsdWUpKSB7IC8vIGlmIGVtcHR5LCB1c2UgZGVmYXVsdCB2YWx1ZVxuICAgICAgcmVzID0gdGhpcy5uekRlZmF1bHRWYWx1ZSA9PT0gbnVsbCA/XG4gICAgICAgICh0aGlzLm56UmFuZ2UgPyBbIHRoaXMubnpNaW4sIHRoaXMubnpNYXggXSA6IHRoaXMubnpNaW4pIDogdGhpcy5uekRlZmF1bHRWYWx1ZTtcbiAgICB9IGVsc2UgeyAvLyBmb3JtYXRcbiAgICAgIC8vIFRPRE86IHVzaW5nIHR5cGUgZ3VhcmQsIHJlbW92ZSB0eXBlIGNhc3RcbiAgICAgIHJlcyA9IHRoaXMubnpSYW5nZSA/XG4gICAgICAgICh2YWx1ZSBhcyBudW1iZXJbXSkubWFwKHZhbCA9PiB0aGlzLnV0aWxzLmNvcnJlY3ROdW1MaW1pdCh2YWwsIHRoaXMubnpNaW4sIHRoaXMubnpNYXgpKSA6XG4gICAgICAgIHRoaXMudXRpbHMuY29ycmVjdE51bUxpbWl0KHZhbHVlIGFzIG51bWJlciwgdGhpcy5uek1pbiwgdGhpcy5uek1heCk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH1cblxuICAvLyBjaGVjayBpZiB2YWx1ZSBpcyB2YWxpZCBhbmQgdGhyb3cgZXJyb3IgaWYgdmFsdWUtdHlwZS9yYW5nZSBub3QgbWF0Y2hcbiAgY2hlY2tWYWxpZFZhbHVlKHZhbHVlOiBTbGlkZXJWYWx1ZSk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHJhbmdlID0gdGhpcy5uelJhbmdlO1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSAvLyBpdCdzIGFuIGludmFsaWQgdmFsdWUsIGp1c3QgcmV0dXJuXG4gICAgY29uc3QgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkodmFsdWUpO1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIGxldCBwYXJzZWRWYWx1ZTogbnVtYmVyID0gdmFsdWU7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xuICAgICAgICBwYXJzZWRWYWx1ZSA9IHBhcnNlRmxvYXQodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKGlzTmFOKHBhcnNlZFZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IC8vIGl0J3MgYW4gaW52YWxpZCB2YWx1ZSwganVzdCByZXR1cm5cbiAgICB9XG4gICAgaWYgKGlzQXJyYXkgIT09ICEhcmFuZ2UpIHsgLy8gdmFsdWUgdHlwZSBub3QgbWF0Y2hcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIFwibnpSYW5nZVwiIGNhbid0IG1hdGNoIHRoZSBcIm56VmFsdWVcIidzIHR5cGUsIHBsZWFzZSBjaGVjayB0aGVzZSBwcm9wZXJ0aWVzOiBcIm56UmFuZ2VcIiwgXCJuelZhbHVlXCIsIFwibnpEZWZhdWx0VmFsdWVcIi5gKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpc1ZhbHVlRXF1YWwodmFsdWU6IFNsaWRlclZhbHVlLCB2YWw6IFNsaWRlclZhbHVlKTogYm9vbGVhbiB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gdHlwZW9mIHZhbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIGNvbnN0IGxlbiA9IHZhbHVlLmxlbmd0aDtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKHZhbHVlWyBpIF0gIT09IHZhbFsgaSBdKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWw7XG4gICAgfVxuICB9XG5cbiAgLy8gcHJpbnQgZGVidWcgaW5mb1xuICAvLyBUT0RPOiBzaG91bGQgbm90IGtlcHQgaW4gY29tcG9uZW50XG4gIC8qIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnkgKi9cbiAgbG9nKC4uLm1lc3NhZ2VzOiBhbnlbXSk6IHZvaWQge1xuICAgIGlmICh0aGlzLm56RGVidWdJZCAhPT0gbnVsbCkge1xuICAgICAgY29uc3QgYXJncyA9IFsgYFtuei1zbGlkZXJdWyMke3RoaXMubnpEZWJ1Z0lkfV0gYCBdLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICAgIGNvbnNvbGUubG9nLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFNob3cgb25lIGhhbmRsZSdzIHRvb2x0aXAgYW5kIGhpZGUgb3RoZXJzJ1xuICBwcml2YXRlIF9zaG93SGFuZGxlVG9vbHRpcChoYW5kbGVJbmRleDogbnVtYmVyID0gMCk6IHZvaWQge1xuICAgIHRoaXMuaGFuZGxlcy5mb3JFYWNoKChoYW5kbGUsIGluZGV4KSA9PiB7XG4gICAgICB0aGlzLmhhbmRsZXNbIGluZGV4IF0uYWN0aXZlID0gaW5kZXggPT09IGhhbmRsZUluZGV4O1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBfaGlkZUFsbEhhbmRsZVRvb2x0aXAoKTogdm9pZCB7XG4gICAgdGhpcy5oYW5kbGVzLmZvckVhY2goaGFuZGxlID0+IGhhbmRsZS5hY3RpdmUgPSBmYWxzZSk7XG4gIH1cblxuICBwcml2YXRlIF9nZW5lcmF0ZUhhbmRsZXMoYW1vdW50OiBudW1iZXIpOiBTbGlkZXJIYW5kbGVbXSB7XG4gICAgY29uc3QgaGFuZGxlczogU2xpZGVySGFuZGxlW10gPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFtb3VudDsgaSsrKSB7XG4gICAgICBoYW5kbGVzLnB1c2goeyBvZmZzZXQ6IG51bGwsIHZhbHVlOiBudWxsLCBhY3RpdmU6IGZhbHNlIH0pO1xuICAgIH1cbiAgICByZXR1cm4gaGFuZGxlcztcbiAgfVxuXG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIEhvc3RMaXN0ZW5lciwgSW5wdXQsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcywgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IHRvQm9vbGVhbiB9IGZyb20gJy4uL2NvcmUvdXRpbC9jb252ZXJ0JztcbmltcG9ydCB7IE56VG9vbFRpcENvbXBvbmVudCB9IGZyb20gJy4uL3Rvb2x0aXAvbnotdG9vbHRpcC5jb21wb25lbnQnO1xuXG5pbXBvcnQgeyBOelNsaWRlckNvbXBvbmVudCB9IGZyb20gJy4vbnotc2xpZGVyLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICAgICAgOiAnbnotc2xpZGVyLWhhbmRsZScsXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxuICB0ZW1wbGF0ZVVybCAgICAgICAgOiAnLi9uei1zbGlkZXItaGFuZGxlLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBOelNsaWRlckhhbmRsZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG5cbiAgLy8gU3RhdGljIHByb3BlcnRpZXNcbiAgQElucHV0KCkgbnpDbGFzc05hbWU6IHN0cmluZztcbiAgQElucHV0KCkgbnpWZXJ0aWNhbDogc3RyaW5nO1xuICBASW5wdXQoKSBuek9mZnNldDogbnVtYmVyO1xuICBASW5wdXQoKSBuelZhbHVlOiBudW1iZXI7IC8vIFtGb3IgdG9vbHRpcF1cbiAgQElucHV0KCkgbnpUaXBGb3JtYXR0ZXI6ICh2YWx1ZTogbnVtYmVyKSA9PiBzdHJpbmc7IC8vIFtGb3IgdG9vbHRpcF1cbiAgQElucHV0KCkgc2V0IG56QWN0aXZlKHZhbHVlOiBib29sZWFuKSB7IC8vIFtGb3IgdG9vbHRpcF1cbiAgICBjb25zdCBzaG93ID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgICBpZiAodGhpcy50b29sdGlwKSB7XG4gICAgICBpZiAoc2hvdykge1xuICAgICAgICB0aGlzLnRvb2x0aXAuc2hvdygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50b29sdGlwLmhpZGUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBMb2NhbHNcbiAgQFZpZXdDaGlsZCgndG9vbHRpcCcpIHRvb2x0aXA6IE56VG9vbFRpcENvbXBvbmVudDsgLy8gW0ZvciB0b29sdGlwXVxuICB0b29sdGlwVGl0bGU6IHN0cmluZzsgLy8gW0ZvciB0b29sdGlwXVxuICBzdHlsZTogb2JqZWN0ID0ge307XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfc2xpZGVyOiBOelNsaWRlckNvbXBvbmVudCkge1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmIChjaGFuZ2VzLm56T2Zmc2V0KSB7XG4gICAgICB0aGlzLl91cGRhdGVTdHlsZSgpO1xuICAgIH1cbiAgICBpZiAoY2hhbmdlcy5uelZhbHVlKSB7XG4gICAgICB0aGlzLl91cGRhdGVUb29sdGlwVGl0bGUoKTsgLy8gW0ZvciB0b29sdGlwXVxuICAgICAgdGhpcy5fdXBkYXRlVG9vbHRpcFBvc2l0aW9uKCk7IC8vIFtGb3IgdG9vbHRpcF1cbiAgICB9XG4gIH1cblxuICAvLyBIb3ZlciB0byB0b2dnbGUgdG9vbHRpcCB3aGVuIG5vdCBkcmFnZ2luZ1xuICBASG9zdExpc3RlbmVyKCdtb3VzZWVudGVyJywgWyAnJGV2ZW50JyBdKVxuICBvbk1vdXNlRW50ZXIoJGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLl9zbGlkZXIuaXNEcmFnZ2luZykge1xuICAgICAgdGhpcy5uekFjdGl2ZSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignbW91c2VsZWF2ZScsIFsgJyRldmVudCcgXSlcbiAgb25Nb3VzZUxlYXZlKCRldmVudDogTW91c2VFdmVudCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5fc2xpZGVyLmlzRHJhZ2dpbmcpIHtcbiAgICAgIHRoaXMubnpBY3RpdmUgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF91cGRhdGVUb29sdGlwVGl0bGUoKTogdm9pZCB7IC8vIFtGb3IgdG9vbHRpcF1cbiAgICB0aGlzLnRvb2x0aXBUaXRsZSA9IHRoaXMubnpUaXBGb3JtYXR0ZXIgPyB0aGlzLm56VGlwRm9ybWF0dGVyKHRoaXMubnpWYWx1ZSkgOiBgJHt0aGlzLm56VmFsdWV9YDtcbiAgfVxuXG4gIHByaXZhdGUgX3VwZGF0ZVRvb2x0aXBQb3NpdGlvbigpOiB2b2lkIHsgLy8gW0ZvciB0b29sdGlwXVxuICAgIGlmICh0aGlzLnRvb2x0aXApIHtcbiAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHRoaXMudG9vbHRpcC51cGRhdGVQb3NpdGlvbigpLCAwKTsgLy8gTUFZIHVzZSBuZ0FmdGVyVmlld0NoZWNrZWQ/IGJ1dCB0aGlzIHdpbGwgYmUgY2FsbGVkIHNvIG1hbnkgdGltZXMuXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfdXBkYXRlU3R5bGUoKTogdm9pZCB7XG4gICAgdGhpcy5zdHlsZVsgdGhpcy5uelZlcnRpY2FsID8gJ2JvdHRvbScgOiAnbGVmdCcgXSA9IGAke3RoaXMubnpPZmZzZXR9JWA7XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyB0b0Jvb2xlYW4gfSBmcm9tICcuLi9jb3JlL3V0aWwvY29udmVydCc7XG5cbmltcG9ydCB7IE1hcmtzQXJyYXkgfSBmcm9tICcuL256LXNsaWRlci1tYXJrcy5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICAgICAgICAgIDogJ256LXNsaWRlci1zdGVwJyxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG4gIHRlbXBsYXRlVXJsICAgICAgICA6ICcuL256LXNsaWRlci1zdGVwLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBOelNsaWRlclN0ZXBDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICBwcml2YXRlIF92ZXJ0aWNhbCA9IGZhbHNlO1xuICBwcml2YXRlIF9pbmNsdWRlZCA9IGZhbHNlO1xuXG4gIC8vIER5bmFtaWMgcHJvcGVydGllc1xuICBASW5wdXQoKSBuekxvd2VyQm91bmQ6IG51bWJlciA9IG51bGw7XG4gIEBJbnB1dCgpIG56VXBwZXJCb3VuZDogbnVtYmVyID0gbnVsbDtcbiAgQElucHV0KCkgbnpNYXJrc0FycmF5OiBNYXJrc0FycmF5O1xuXG4gIC8vIFN0YXRpYyBwcm9wZXJ0aWVzXG4gIEBJbnB1dCgpIG56UHJlZml4Q2xzOiBzdHJpbmc7XG5cbiAgQElucHV0KClcbiAgc2V0IG56VmVydGljYWwodmFsdWU6IGJvb2xlYW4pIHsgLy8gUmVxdWlyZWRcbiAgICB0aGlzLl92ZXJ0aWNhbCA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBnZXQgbnpWZXJ0aWNhbCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fdmVydGljYWw7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpJbmNsdWRlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2luY2x1ZGVkID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuekluY2x1ZGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9pbmNsdWRlZDtcbiAgfVxuXG4gIC8vIFRPRE86IHVzaW5nIG5hbWVkIGludGVyZmFjZVxuICBhdHRyczogQXJyYXk8eyBpZDogbnVtYmVyLCB2YWx1ZTogbnVtYmVyLCBvZmZzZXQ6IG51bWJlciwgY2xhc3NlczogeyBbIGtleTogc3RyaW5nIF06IGJvb2xlYW4gfSwgc3R5bGU6IG9iamVjdCB9PjtcblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKGNoYW5nZXMubnpNYXJrc0FycmF5KSB7XG4gICAgICB0aGlzLmJ1aWxkQXR0cnMoKTtcbiAgICB9XG4gICAgaWYgKGNoYW5nZXMubnpNYXJrc0FycmF5IHx8IGNoYW5nZXMubnpMb3dlckJvdW5kIHx8IGNoYW5nZXMubnpVcHBlckJvdW5kKSB7XG4gICAgICB0aGlzLnRvZ2dsZVBvaW50QWN0aXZlKCk7XG4gICAgfVxuICB9XG5cbiAgdHJhY2tCeUlkKGluZGV4OiBudW1iZXIsIGF0dHI6IHsgaWQ6IG51bWJlciwgdmFsdWU6IG51bWJlciwgb2Zmc2V0OiBudW1iZXIsIGNsYXNzZXM6IHsgWyBrZXk6IHN0cmluZyBdOiBib29sZWFuIH0sIHN0eWxlOiBvYmplY3QgfSk6IG51bWJlciB7XG4gICAgcmV0dXJuIGF0dHIuaWQ7XG4gIH1cblxuICBidWlsZEF0dHJzKCk6IHZvaWQge1xuICAgIGNvbnN0IG9yaWVudCA9IHRoaXMubnpWZXJ0aWNhbCA/ICdib3R0b20nIDogJ2xlZnQnO1xuICAgIGNvbnN0IHByZWZpeENscyA9IHRoaXMubnpQcmVmaXhDbHM7XG4gICAgdGhpcy5hdHRycyA9IHRoaXMubnpNYXJrc0FycmF5Lm1hcChtYXJrID0+IHtcbiAgICAgIGNvbnN0IHsgdmFsdWUsIG9mZnNldCB9ID0gbWFyaztcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlkICAgICA6IHZhbHVlLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgb2Zmc2V0LFxuICAgICAgICBzdHlsZSAgOiB7XG4gICAgICAgICAgWyBvcmllbnQgXTogYCR7b2Zmc2V0fSVgXG4gICAgICAgIH0sXG4gICAgICAgIGNsYXNzZXM6IHtcbiAgICAgICAgICBbIGAke3ByZWZpeENsc30tZG90YCBdICAgICAgIDogdHJ1ZSxcbiAgICAgICAgICBbIGAke3ByZWZpeENsc30tZG90LWFjdGl2ZWAgXTogZmFsc2VcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIHRvZ2dsZVBvaW50QWN0aXZlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmF0dHJzICYmIHRoaXMubnpMb3dlckJvdW5kICE9PSBudWxsICYmIHRoaXMubnpVcHBlckJvdW5kICE9PSBudWxsKSB7XG4gICAgICB0aGlzLmF0dHJzLmZvckVhY2goYXR0ciA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gYXR0ci52YWx1ZTtcbiAgICAgICAgY29uc3QgaXNBY3RpdmUgPSAoIXRoaXMubnpJbmNsdWRlZCAmJiB2YWx1ZSA9PT0gdGhpcy5uelVwcGVyQm91bmQpIHx8XG4gICAgICAgICAgKHRoaXMubnpJbmNsdWRlZCAmJiB2YWx1ZSA8PSB0aGlzLm56VXBwZXJCb3VuZCAmJiB2YWx1ZSA+PSB0aGlzLm56TG93ZXJCb3VuZCk7XG4gICAgICAgIGF0dHIuY2xhc3Nlc1sgYCR7dGhpcy5uelByZWZpeENsc30tZG90LWFjdGl2ZWAgXSA9IGlzQWN0aXZlO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyB0b0Jvb2xlYW4gfSBmcm9tICcuLi9jb3JlL3V0aWwvY29udmVydCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICAgICAgOiAnbnotc2xpZGVyLXRyYWNrJyxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG4gIHRlbXBsYXRlVXJsICAgICAgICA6ICcuL256LXNsaWRlci10cmFjay5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgTnpTbGlkZXJUcmFja0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gIHByaXZhdGUgX3ZlcnRpY2FsID0gZmFsc2U7XG4gIHByaXZhdGUgX2luY2x1ZGVkID0gZmFsc2U7XG5cbiAgLy8gRHluYW1pYyBwcm9wZXJ0aWVzXG4gIEBJbnB1dCgpIG56T2Zmc2V0O1xuICBASW5wdXQoKSBuekxlbmd0aDtcblxuICAvLyBTdGF0aWMgcHJvcGVydGllc1xuICBASW5wdXQoKSBuekNsYXNzTmFtZTtcblxuICBASW5wdXQoKVxuICBzZXQgbnpWZXJ0aWNhbCh2YWx1ZTogYm9vbGVhbikgeyAvLyBSZXF1aXJlZFxuICAgIHRoaXMuX3ZlcnRpY2FsID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuelZlcnRpY2FsKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl92ZXJ0aWNhbDtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekluY2x1ZGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5faW5jbHVkZWQgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56SW5jbHVkZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2luY2x1ZGVkO1xuICB9XG5cbiAgc3R5bGU6IHsgYm90dG9tPzogc3RyaW5nLCBoZWlnaHQ/OiBzdHJpbmcsIGxlZnQ/OiBzdHJpbmcsIHdpZHRoPzogc3RyaW5nLCB2aXNpYmlsaXR5Pzogc3RyaW5nIH0gPSB7fTtcblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKGNoYW5nZXMubnpJbmNsdWRlZCkge1xuICAgICAgdGhpcy5zdHlsZS52aXNpYmlsaXR5ID0gdGhpcy5uekluY2x1ZGVkID8gJ3Zpc2libGUnIDogJ2hpZGRlbic7XG4gICAgfVxuICAgIGlmIChjaGFuZ2VzLm56VmVydGljYWwgfHwgY2hhbmdlcy5uek9mZnNldCB8fCBjaGFuZ2VzLm56TGVuZ3RoKSB7XG4gICAgICBpZiAodGhpcy5uelZlcnRpY2FsKSB7XG4gICAgICAgIHRoaXMuc3R5bGUuYm90dG9tID0gYCR7dGhpcy5uek9mZnNldH0lYDtcbiAgICAgICAgdGhpcy5zdHlsZS5oZWlnaHQgPSBgJHt0aGlzLm56TGVuZ3RofSVgO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zdHlsZS5sZWZ0ID0gYCR7dGhpcy5uek9mZnNldH0lYDtcbiAgICAgICAgdGhpcy5zdHlsZS53aWR0aCA9IGAke3RoaXMubnpMZW5ndGh9JWA7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbn1cbiIsImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBOelRvb2xUaXBNb2R1bGUgfSBmcm9tICcuLi90b29sdGlwL256LXRvb2x0aXAubW9kdWxlJztcblxuaW1wb3J0IHsgTnpTbGlkZXJIYW5kbGVDb21wb25lbnQgfSBmcm9tICcuL256LXNsaWRlci1oYW5kbGUuY29tcG9uZW50JztcbmltcG9ydCB7IE56U2xpZGVyTWFya3NDb21wb25lbnQgfSBmcm9tICcuL256LXNsaWRlci1tYXJrcy5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpTbGlkZXJTdGVwQ29tcG9uZW50IH0gZnJvbSAnLi9uei1zbGlkZXItc3RlcC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpTbGlkZXJUcmFja0NvbXBvbmVudCB9IGZyb20gJy4vbnotc2xpZGVyLXRyYWNrLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOelNsaWRlckNvbXBvbmVudCB9IGZyb20gJy4vbnotc2xpZGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOelNsaWRlclNlcnZpY2UgfSBmcm9tICcuL256LXNsaWRlci5zZXJ2aWNlJztcblxuQE5nTW9kdWxlKHtcbiAgZXhwb3J0czogWyBOelNsaWRlckNvbXBvbmVudCwgTnpTbGlkZXJUcmFja0NvbXBvbmVudCwgTnpTbGlkZXJIYW5kbGVDb21wb25lbnQsIE56U2xpZGVyU3RlcENvbXBvbmVudCwgTnpTbGlkZXJNYXJrc0NvbXBvbmVudCBdLFxuICBkZWNsYXJhdGlvbnM6IFsgTnpTbGlkZXJDb21wb25lbnQsIE56U2xpZGVyVHJhY2tDb21wb25lbnQsIE56U2xpZGVySGFuZGxlQ29tcG9uZW50LCBOelNsaWRlclN0ZXBDb21wb25lbnQsIE56U2xpZGVyTWFya3NDb21wb25lbnQgXSxcbiAgaW1wb3J0czogWyBDb21tb25Nb2R1bGUsIE56VG9vbFRpcE1vZHVsZSBdLFxuICBwcm92aWRlcnM6IFsgTnpTbGlkZXJTZXJ2aWNlIF1cbn0pXG5leHBvcnQgY2xhc3MgTnpTbGlkZXJNb2R1bGUgeyB9XG4iLCJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIElucHV0LFxuICBUZW1wbGF0ZVJlZixcbiAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBOelVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UgfSBmcm9tICcuLi9jb3JlL3NlcnZpY2VzL3VwZGF0ZS1ob3N0LWNsYXNzLnNlcnZpY2UnO1xuXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG5leHBvcnQgdHlwZSBTdGVwTmdDbGFzc1R5cGUgPSBzdHJpbmcgfCBzdHJpbmdbXSB8IFNldDxzdHJpbmc+IHwgeyBbIGtsYXNzOiBzdHJpbmcgXTogYW55OyB9O1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICAgICAgICAgIDogJ256LXN0ZXAnLFxuICBwcm92aWRlcnMgICAgICAgICAgOiBbIE56VXBkYXRlSG9zdENsYXNzU2VydmljZSBdLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgdGVtcGxhdGVVcmwgICAgICAgIDogJy4vbnotc3RlcC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgTnpTdGVwQ29tcG9uZW50IHtcbiAgcHJpdmF0ZSBfc3RhdHVzID0gJ3dhaXQnO1xuICBwcml2YXRlIF9jdXJyZW50SW5kZXggPSAwO1xuICBwcml2YXRlIF9kZXNjcmlwdGlvbjogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD47XG4gIHByaXZhdGUgX2ljb246IFN0ZXBOZ0NsYXNzVHlwZSB8IFRlbXBsYXRlUmVmPHZvaWQ+O1xuICBwcml2YXRlIF90aXRsZTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD47XG4gIHByaXZhdGUgZWw6IEhUTUxFbGVtZW50ID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG4gIG9sZEFQSUljb24gPSB0cnVlOyAvLyBNYWtlIHRoZSB1c2VyIGRlZmluZWQgaWNvbiBjb21wYXRpYmxlIHRvIG9sZCBBUEkuIFNob3VsZCBiZSByZW1vdmVkIGluIDIuMC5cbiAgaXNDdXN0b21TdGF0dXMgPSBmYWxzZTtcbiAgaXNEZXNjcmlwdGlvblN0cmluZyA9IHRydWU7XG4gIGlzVGl0bGVTdHJpbmcgPSB0cnVlO1xuICBpc0ljb25TdHJpbmcgPSB0cnVlO1xuICBsYXN0ID0gZmFsc2U7XG4gIHNob3dQcm9jZXNzRG90ID0gZmFsc2U7XG4gIGRpcmVjdGlvbiA9ICdob3Jpem9udGFsJztcbiAgb3V0U3RhdHVzID0gJ3Byb2Nlc3MnO1xuICBpbmRleCA9IDA7XG4gIEBWaWV3Q2hpbGQoJ3Byb2Nlc3NEb3RUZW1wbGF0ZScpIHByb2Nlc3NEb3RUZW1wbGF0ZTogVGVtcGxhdGVSZWY8dm9pZD47XG4gIGN1c3RvbVByb2Nlc3NUZW1wbGF0ZTogVGVtcGxhdGVSZWY8eyAkaW1wbGljaXQ6IFRlbXBsYXRlUmVmPHZvaWQ+LCBzdGF0dXM6IHN0cmluZywgaW5kZXg6IG51bWJlciB9PjtcblxuICBASW5wdXQoKVxuICBzZXQgbnpUaXRsZSh2YWx1ZTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD4pIHtcbiAgICB0aGlzLmlzVGl0bGVTdHJpbmcgPSAhKHZhbHVlIGluc3RhbmNlb2YgVGVtcGxhdGVSZWYpO1xuICAgIHRoaXMuX3RpdGxlID0gdmFsdWU7XG4gIH1cblxuICBnZXQgbnpUaXRsZSgpOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMuX3RpdGxlO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56SWNvbih2YWx1ZTogU3RlcE5nQ2xhc3NUeXBlIHwgVGVtcGxhdGVSZWY8dm9pZD4pIHtcbiAgICBpZiAoISh2YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmKSkge1xuICAgICAgdGhpcy5pc0ljb25TdHJpbmcgPSB0cnVlO1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uc3Qgc3RyID0gdmFsdWUgYXMgc3RyaW5nO1xuICAgICAgICB0aGlzLm9sZEFQSUljb24gPSBzdHIuaW5kZXhPZignYW50aWNvbicpID4gLTE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9sZEFQSUljb24gPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmlzSWNvblN0cmluZyA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLl9pY29uID0gdmFsdWU7XG4gIH1cblxuICBnZXQgbnpJY29uKCk6IFN0ZXBOZ0NsYXNzVHlwZSB8IFRlbXBsYXRlUmVmPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5faWNvbjtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuelN0YXR1cyhzdGF0dXM6IHN0cmluZykge1xuICAgIHRoaXMuX3N0YXR1cyA9IHN0YXR1cztcbiAgICB0aGlzLmlzQ3VzdG9tU3RhdHVzID0gdHJ1ZTtcbiAgICB0aGlzLnVwZGF0ZUNsYXNzTWFwKCk7XG4gIH1cblxuICBnZXQgbnpTdGF0dXMoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhdHVzO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56RGVzY3JpcHRpb24odmFsdWU6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+KSB7XG4gICAgdGhpcy5pc0Rlc2NyaXB0aW9uU3RyaW5nID0gISh2YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmKTtcbiAgICB0aGlzLl9kZXNjcmlwdGlvbiA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IG56RGVzY3JpcHRpb24oKTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLl9kZXNjcmlwdGlvbjtcbiAgfVxuXG4gIGdldCBjdXJyZW50SW5kZXgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fY3VycmVudEluZGV4O1xuICB9XG5cbiAgc2V0IGN1cnJlbnRJbmRleChjdXJyZW50OiBudW1iZXIpIHtcbiAgICB0aGlzLl9jdXJyZW50SW5kZXggPSBjdXJyZW50O1xuICAgIGlmICghdGhpcy5pc0N1c3RvbVN0YXR1cykge1xuICAgICAgaWYgKGN1cnJlbnQgPiB0aGlzLmluZGV4KSB7XG4gICAgICAgIHRoaXMuX3N0YXR1cyA9ICdmaW5pc2gnO1xuICAgICAgfSBlbHNlIGlmIChjdXJyZW50ID09PSB0aGlzLmluZGV4KSB7XG4gICAgICAgIGlmICh0aGlzLm91dFN0YXR1cykge1xuICAgICAgICAgIHRoaXMuX3N0YXR1cyA9IHRoaXMub3V0U3RhdHVzO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zdGF0dXMgPSAnd2FpdCc7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMudXBkYXRlQ2xhc3NNYXAoKTtcbiAgfVxuXG4gIHVwZGF0ZUNsYXNzTWFwKCk6IHZvaWQge1xuICAgIGNvbnN0IGNsYXNzTWFwID0ge1xuICAgICAgWyAnYW50LXN0ZXBzLWl0ZW0nIF0gICAgICAgIDogdHJ1ZSxcbiAgICAgIFsgYGFudC1zdGVwcy1pdGVtLXdhaXRgIF0gICA6IHRoaXMubnpTdGF0dXMgPT09ICd3YWl0JyxcbiAgICAgIFsgYGFudC1zdGVwcy1pdGVtLXByb2Nlc3NgIF06IHRoaXMubnpTdGF0dXMgPT09ICdwcm9jZXNzJyxcbiAgICAgIFsgYGFudC1zdGVwcy1pdGVtLWZpbmlzaGAgXSA6IHRoaXMubnpTdGF0dXMgPT09ICdmaW5pc2gnLFxuICAgICAgWyBgYW50LXN0ZXBzLWl0ZW0tZXJyb3JgIF0gIDogdGhpcy5uelN0YXR1cyA9PT0gJ2Vycm9yJyxcbiAgICAgIFsgJ2FudC1zdGVwcy1jdXN0b20nIF0gICAgICA6ICEhdGhpcy5uekljb24sXG4gICAgICBbICdhbnQtc3RlcHMtbmV4dC1lcnJvcicgXSAgOiAodGhpcy5vdXRTdGF0dXMgPT09ICdlcnJvcicpICYmICh0aGlzLmN1cnJlbnRJbmRleCA9PT0gdGhpcy5pbmRleCArIDEpXG4gICAgfTtcbiAgICB0aGlzLm56VXBkYXRlSG9zdENsYXNzU2VydmljZS51cGRhdGVIb3N0Q2xhc3ModGhpcy5lbCwgY2xhc3NNYXApO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwcml2YXRlIG56VXBkYXRlSG9zdENsYXNzU2VydmljZTogTnpVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlKSB7XG4gIH1cbn1cbiIsImltcG9ydCB7XG4gIEFmdGVyQ29udGVudEluaXQsXG4gIENvbXBvbmVudCxcbiAgQ29udGVudENoaWxkcmVuLFxuICBJbnB1dCxcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG4gIFF1ZXJ5TGlzdCxcbiAgVGVtcGxhdGVSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgdG9Cb29sZWFuIH0gZnJvbSAnLi4vY29yZS91dGlsL2NvbnZlcnQnO1xuXG5pbXBvcnQgeyBOelN0ZXBDb21wb25lbnQgfSBmcm9tICcuL256LXN0ZXAuY29tcG9uZW50JztcblxuZXhwb3J0IHR5cGUgTnpEaXJlY3Rpb25UeXBlID0gJ2hvcml6b250YWwnIHwgJ3ZlcnRpY2FsJztcbmV4cG9ydCB0eXBlIE56U3RhdHVzVHlwZSA9ICd3YWl0JyB8ICdwcm9jZXNzJyB8ICdmaW5pc2gnIHwgJ2Vycm9yJztcbmV4cG9ydCB0eXBlIE56U2l6ZVR5cGUgPSAnZGVmYXVsdCcgfCAnc21hbGwnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICAgICAgICAgIDogJ256LXN0ZXBzJyxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG4gIHRlbXBsYXRlVXJsICAgICAgICA6ICcuL256LXN0ZXBzLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBOelN0ZXBzQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIEFmdGVyQ29udGVudEluaXQge1xuICBwcml2YXRlIF9zdGF0dXM6IE56U3RhdHVzVHlwZSA9ICdwcm9jZXNzJztcbiAgcHJpdmF0ZSBfY3VycmVudCA9IDA7XG4gIHByaXZhdGUgX3NpemU6IE56U2l6ZVR5cGUgPSAnZGVmYXVsdCc7XG4gIHByaXZhdGUgX2RpcmVjdGlvbjogTnpEaXJlY3Rpb25UeXBlID0gJ2hvcml6b250YWwnO1xuICBwcml2YXRlIF9zdGFydEluZGV4ID0gMDtcbiAgcHJpdmF0ZSB1bnN1YnNjcmliZSQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIHN0ZXBzQ2xhc3NNYXA6IG9iamVjdDtcbiAgc2hvd1Byb2Nlc3NEb3QgPSBmYWxzZTtcbiAgY3VzdG9tUHJvY2Vzc0RvdFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjx7ICRpbXBsaWNpdDogVGVtcGxhdGVSZWY8dm9pZD4sIHN0YXR1czogc3RyaW5nLCBpbmRleDogbnVtYmVyIH0+O1xuICBAQ29udGVudENoaWxkcmVuKE56U3RlcENvbXBvbmVudCkgc3RlcHM6IFF1ZXJ5TGlzdDxOelN0ZXBDb21wb25lbnQ+O1xuXG4gIEBJbnB1dCgpIHNldCBuelNpemUodmFsdWU6IE56U2l6ZVR5cGUpIHtcbiAgICB0aGlzLl9zaXplID0gdmFsdWU7XG4gICAgdGhpcy51cGRhdGVDbGFzc01hcCgpO1xuICB9XG5cbiAgZ2V0IG56U2l6ZSgpOiBOelNpemVUeXBlIHtcbiAgICByZXR1cm4gdGhpcy5fc2l6ZTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuelN0YXJ0SW5kZXgodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX3N0YXJ0SW5kZXggPSB2YWx1ZTtcbiAgICB0aGlzLnVwZGF0ZUNoaWxkcmVuU3RlcHMoKTtcbiAgfVxuXG4gIGdldCBuelN0YXJ0SW5kZXgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhcnRJbmRleDtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekRpcmVjdGlvbih2YWx1ZTogTnpEaXJlY3Rpb25UeXBlKSB7XG4gICAgdGhpcy5fZGlyZWN0aW9uID0gdmFsdWU7XG4gICAgdGhpcy51cGRhdGVDbGFzc01hcCgpO1xuICAgIHRoaXMudXBkYXRlQ2hpbGRyZW5TdGVwcygpO1xuICB9XG5cbiAgZ2V0IG56RGlyZWN0aW9uKCk6IE56RGlyZWN0aW9uVHlwZSB7XG4gICAgcmV0dXJuIHRoaXMuX2RpcmVjdGlvbjtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuelByb2dyZXNzRG90KHZhbHVlOiBib29sZWFuIHwgVGVtcGxhdGVSZWY8eyAkaW1wbGljaXQ6IFRlbXBsYXRlUmVmPHZvaWQ+LCBzdGF0dXM6IHN0cmluZywgaW5kZXg6IG51bWJlciB9Pikge1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmKSB7XG4gICAgICB0aGlzLnNob3dQcm9jZXNzRG90ID0gdHJ1ZTtcbiAgICAgIHRoaXMuY3VzdG9tUHJvY2Vzc0RvdFRlbXBsYXRlID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2hvd1Byb2Nlc3NEb3QgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZUNoaWxkcmVuU3RlcHMoKTtcbiAgICB0aGlzLnVwZGF0ZUNsYXNzTWFwKCk7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpTdGF0dXMoc3RhdHVzOiBOelN0YXR1c1R5cGUpIHtcbiAgICB0aGlzLl9zdGF0dXMgPSBzdGF0dXM7XG4gICAgdGhpcy51cGRhdGVDaGlsZHJlblN0ZXBzKCk7XG4gIH1cblxuICBnZXQgbnpTdGF0dXMoKTogTnpTdGF0dXNUeXBlIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhdHVzO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56Q3VycmVudChjdXJyZW50OiBudW1iZXIpIHtcbiAgICB0aGlzLl9jdXJyZW50ID0gY3VycmVudDtcbiAgICB0aGlzLnVwZGF0ZUNoaWxkcmVuU3RlcHMoKTtcbiAgfVxuXG4gIGdldCBuekN1cnJlbnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fY3VycmVudDtcbiAgfVxuXG4gIHVwZGF0ZUNsYXNzTWFwKCk6IHZvaWQge1xuICAgIHRoaXMuc3RlcHNDbGFzc01hcCA9IHtcbiAgICAgIFsgYGFudC1zdGVwcy0ke3RoaXMubnpEaXJlY3Rpb259YCBdOiB0cnVlLFxuICAgICAgWyBgYW50LXN0ZXBzLWxhYmVsLWhvcml6b250YWxgIF0gICA6IHRoaXMubnpEaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyxcbiAgICAgIFsgYGFudC1zdGVwcy1sYWJlbC12ZXJ0aWNhbGAgXSAgICAgOiB0aGlzLnNob3dQcm9jZXNzRG90ICYmICh0aGlzLm56RGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcpLFxuICAgICAgWyBgYW50LXN0ZXBzLWRvdGAgXSAgICAgICAgICAgICAgICA6IHRoaXMuc2hvd1Byb2Nlc3NEb3QsXG4gICAgICBbICdhbnQtc3RlcHMtc21hbGwnIF0gICAgICAgICAgICAgIDogdGhpcy5uelNpemUgPT09ICdzbWFsbCdcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlQ2hpbGRyZW5TdGVwcyA9ICgpID0+IHtcbiAgICBpZiAodGhpcy5zdGVwcykge1xuICAgICAgdGhpcy5zdGVwcy50b0FycmF5KCkuZm9yRWFjaCgoc3RlcCwgaW5kZXgsIGFycikgPT4ge1xuICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICBzdGVwLm91dFN0YXR1cyA9IHRoaXMubnpTdGF0dXM7XG4gICAgICAgICAgc3RlcC5zaG93UHJvY2Vzc0RvdCA9IHRoaXMuc2hvd1Byb2Nlc3NEb3Q7XG4gICAgICAgICAgaWYgKHRoaXMuY3VzdG9tUHJvY2Vzc0RvdFRlbXBsYXRlKSB7XG4gICAgICAgICAgICBzdGVwLmN1c3RvbVByb2Nlc3NUZW1wbGF0ZSA9IHRoaXMuY3VzdG9tUHJvY2Vzc0RvdFRlbXBsYXRlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdGVwLmRpcmVjdGlvbiA9IHRoaXMubnpEaXJlY3Rpb247XG4gICAgICAgICAgc3RlcC5pbmRleCA9IGluZGV4ICsgdGhpcy5uelN0YXJ0SW5kZXg7XG4gICAgICAgICAgc3RlcC5jdXJyZW50SW5kZXggPSB0aGlzLm56Q3VycmVudDtcbiAgICAgICAgICBzdGVwLmxhc3QgPSBhcnIubGVuZ3RoID09PSBpbmRleCArIDE7XG4gICAgICAgICAgc3RlcC51cGRhdGVDbGFzc01hcCgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMudXBkYXRlQ2xhc3NNYXAoKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMudW5zdWJzY3JpYmUkLm5leHQoKTtcbiAgICB0aGlzLnVuc3Vic2NyaWJlJC5jb21wbGV0ZSgpO1xuICB9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xuICAgIHRoaXMudXBkYXRlQ2hpbGRyZW5TdGVwcygpO1xuICAgIGlmICh0aGlzLnN0ZXBzKSB7XG4gICAgICAgdGhpcy5zdGVwcy5jaGFuZ2VzLnBpcGUodGFrZVVudGlsKHRoaXMudW5zdWJzY3JpYmUkKSkuc3Vic2NyaWJlKHRoaXMudXBkYXRlQ2hpbGRyZW5TdGVwcyk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgTnpJY29uTW9kdWxlIH0gZnJvbSAnLi4vaWNvbi9uei1pY29uLm1vZHVsZSc7XG5pbXBvcnQgeyBOelN0ZXBDb21wb25lbnQgfSBmcm9tICcuL256LXN0ZXAuY29tcG9uZW50JztcbmltcG9ydCB7IE56U3RlcHNDb21wb25lbnQgfSBmcm9tICcuL256LXN0ZXBzLmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHMgICAgIDogWyBDb21tb25Nb2R1bGUsIE56SWNvbk1vZHVsZSBdLFxuICBleHBvcnRzICAgICA6IFsgTnpTdGVwc0NvbXBvbmVudCwgTnpTdGVwQ29tcG9uZW50IF0sXG4gIGRlY2xhcmF0aW9uczogWyBOelN0ZXBzQ29tcG9uZW50LCBOelN0ZXBDb21wb25lbnQgXVxufSlcbmV4cG9ydCBjbGFzcyBOelN0ZXBzTW9kdWxlIHtcbn1cbiIsImltcG9ydCB7IEVOVEVSLCBMRUZUX0FSUk9XLCBSSUdIVF9BUlJPVywgU1BBQ0UgfSBmcm9tICdAYW5ndWxhci9jZGsva2V5Y29kZXMnO1xuaW1wb3J0IHtcbiAgZm9yd2FyZFJlZixcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBIb3N0TGlzdGVuZXIsXG4gIElucHV0LFxuICBPbkluaXQsXG4gIFRlbXBsYXRlUmVmLFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IHRvQm9vbGVhbiB9IGZyb20gJy4uL2NvcmUvdXRpbC9jb252ZXJ0JztcblxuZXhwb3J0IHR5cGUgTnpTd2l0Y2hTaXplVHlwZSA9ICdkZWZhdWx0JyB8ICdzbWFsbCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICAgICAgOiAnbnotc3dpdGNoJyxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG4gIHRlbXBsYXRlVXJsICAgICAgICA6ICcuL256LXN3aXRjaC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlcyAgICAgICAgICAgICA6IFsgYFxuICAgIDpob3N0IHtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICB9XG4gIGAgXSxcbiAgcHJvdmlkZXJzICAgICAgICAgIDogW1xuICAgIHtcbiAgICAgIHByb3ZpZGUgICAgOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IE56U3dpdGNoQ29tcG9uZW50KSxcbiAgICAgIG11bHRpICAgICAgOiB0cnVlXG4gICAgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIE56U3dpdGNoQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gIHByaXZhdGUgX2Rpc2FibGVkID0gZmFsc2U7XG4gIHByaXZhdGUgX3NpemU6IE56U3dpdGNoU2l6ZVR5cGU7XG4gIHByaXZhdGUgX2xvYWRpbmcgPSBmYWxzZTtcbiAgcHJpdmF0ZSBfY29udHJvbCA9IGZhbHNlO1xuICBwcml2YXRlIF9jaGVja2VkQ2hpbGRyZW46IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+O1xuICBwcml2YXRlIF91bkNoZWNrZWRDaGlsZHJlbjogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD47XG4gIHByZWZpeENscyA9ICdhbnQtc3dpdGNoJztcbiAgY2xhc3NNYXA7XG4gIGNoZWNrZWQgPSBmYWxzZTtcbiAgaXNDaGVja2VkQ2hpbGRyZW5TdHJpbmc6IGJvb2xlYW47XG4gIGlzVW5DaGVja2VkQ2hpbGRyZW5TdHJpbmc6IGJvb2xlYW47XG4gIEBWaWV3Q2hpbGQoJ3N3aXRjaEVsZW1lbnQnKVxuICBwcml2YXRlIHN3aXRjaEVsZW1lbnQ6IEVsZW1lbnRSZWY7XG4gIG9uQ2hhbmdlOiAodmFsdWU6IGJvb2xlYW4pID0+IHZvaWQgPSAoKSA9PiBudWxsO1xuICBvblRvdWNoZWQ6ICgpID0+IHZvaWQgPSAoKSA9PiBudWxsO1xuXG4gIEBJbnB1dCgpXG4gIHNldCBuekNvbnRyb2wodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9jb250cm9sID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuekNvbnRyb2woKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRyb2w7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpDaGVja2VkQ2hpbGRyZW4odmFsdWU6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+KSB7XG4gICAgdGhpcy5pc0NoZWNrZWRDaGlsZHJlblN0cmluZyA9ICEodmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZik7XG4gICAgdGhpcy5fY2hlY2tlZENoaWxkcmVuID0gdmFsdWU7XG4gIH1cblxuICBnZXQgbnpDaGVja2VkQ2hpbGRyZW4oKTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLl9jaGVja2VkQ2hpbGRyZW47XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpVbkNoZWNrZWRDaGlsZHJlbih2YWx1ZTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD4pIHtcbiAgICB0aGlzLmlzVW5DaGVja2VkQ2hpbGRyZW5TdHJpbmcgPSAhKHZhbHVlIGluc3RhbmNlb2YgVGVtcGxhdGVSZWYpO1xuICAgIHRoaXMuX3VuQ2hlY2tlZENoaWxkcmVuID0gdmFsdWU7XG4gIH1cblxuICBnZXQgbnpVbkNoZWNrZWRDaGlsZHJlbigpOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMuX3VuQ2hlY2tlZENoaWxkcmVuO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56U2l6ZSh2YWx1ZTogTnpTd2l0Y2hTaXplVHlwZSkge1xuICAgIHRoaXMuX3NpemUgPSB2YWx1ZTtcbiAgICB0aGlzLnNldENsYXNzTWFwKCk7XG4gIH1cblxuICBnZXQgbnpTaXplKCk6IE56U3dpdGNoU2l6ZVR5cGUge1xuICAgIHJldHVybiB0aGlzLl9zaXplO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56TG9hZGluZyh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2xvYWRpbmcgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICAgIHRoaXMuc2V0Q2xhc3NNYXAoKTtcbiAgfVxuXG4gIGdldCBuekxvYWRpbmcoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2xvYWRpbmc7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpEaXNhYmxlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2Rpc2FibGVkID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgICB0aGlzLnNldENsYXNzTWFwKCk7XG4gIH1cblxuICBnZXQgbnpEaXNhYmxlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fZGlzYWJsZWQ7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsgJyRldmVudCcgXSlcbiAgb25DbGljayhlOiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmICgoIXRoaXMubnpEaXNhYmxlZCkgJiYgKCF0aGlzLm56TG9hZGluZykgJiYgKCF0aGlzLm56Q29udHJvbCkpIHtcbiAgICAgIHRoaXMudXBkYXRlVmFsdWUoIXRoaXMuY2hlY2tlZCwgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlVmFsdWUodmFsdWU6IGJvb2xlYW4sIGVtaXQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBpZiAodGhpcy5jaGVja2VkID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmNoZWNrZWQgPSB2YWx1ZTtcbiAgICB0aGlzLnNldENsYXNzTWFwKCk7XG4gICAgaWYgKGVtaXQpIHtcbiAgICAgIHRoaXMub25DaGFuZ2UodGhpcy5jaGVja2VkKTtcbiAgICB9XG4gIH1cblxuICBzZXRDbGFzc01hcCgpOiB2b2lkIHtcbiAgICB0aGlzLmNsYXNzTWFwID0ge1xuICAgICAgWyB0aGlzLnByZWZpeENscyBdICAgICAgICAgICAgICA6IHRydWUsXG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xzfS1jaGVja2VkYCBdIDogdGhpcy5jaGVja2VkLFxuICAgICAgWyBgJHt0aGlzLnByZWZpeENsc30tbG9hZGluZ2AgXSA6IHRoaXMubnpMb2FkaW5nLFxuICAgICAgWyBgJHt0aGlzLnByZWZpeENsc30tZGlzYWJsZWRgIF06IHRoaXMubnpEaXNhYmxlZCxcbiAgICAgIFsgYCR7dGhpcy5wcmVmaXhDbHN9LXNtYWxsYCBdICAgOiB0aGlzLm56U2l6ZSA9PT0gJ3NtYWxsJ1xuICAgIH07XG4gIH1cblxuICBvbktleURvd24oZTogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5uekNvbnRyb2wpIHtcbiAgICAgIGlmIChlLmtleUNvZGUgPT09IExFRlRfQVJST1cpIHsgLy8gTGVmdFxuICAgICAgICB0aGlzLnVwZGF0ZVZhbHVlKGZhbHNlLCB0cnVlKTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfSBlbHNlIGlmIChlLmtleUNvZGUgPT09IFJJR0hUX0FSUk9XKSB7IC8vIFJpZ2h0XG4gICAgICAgIHRoaXMudXBkYXRlVmFsdWUodHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSBTUEFDRSB8fCBlLmtleUNvZGUgPT09IEVOVEVSKSB7IC8vIFNwYWNlLCBFbnRlclxuICAgICAgICB0aGlzLnVwZGF0ZVZhbHVlKCF0aGlzLmNoZWNrZWQsIHRydWUpO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9jdXMoKTogdm9pZCB7XG4gICAgdGhpcy5zd2l0Y2hFbGVtZW50Lm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcbiAgfVxuXG4gIGJsdXIoKTogdm9pZCB7XG4gICAgdGhpcy5zd2l0Y2hFbGVtZW50Lm5hdGl2ZUVsZW1lbnQuYmx1cigpO1xuICB9XG5cbiAgd3JpdGVWYWx1ZSh2YWx1ZTogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMudXBkYXRlVmFsdWUodmFsdWUsIGZhbHNlKTtcbiAgfVxuXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46IChfOiBib29sZWFuKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5vbkNoYW5nZSA9IGZuO1xuICB9XG5cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0aGlzLm9uVG91Y2hlZCA9IGZuO1xuICB9XG5cbiAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5uekRpc2FibGVkID0gaXNEaXNhYmxlZDtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuc2V0Q2xhc3NNYXAoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOeldhdmVNb2R1bGUgfSBmcm9tICcuLi9jb3JlL3dhdmUvbnotd2F2ZS5tb2R1bGUnO1xuaW1wb3J0IHsgTnpJY29uTW9kdWxlIH0gZnJvbSAnLi4vaWNvbi9uei1pY29uLm1vZHVsZSc7XG5cbmltcG9ydCB7IE56U3dpdGNoQ29tcG9uZW50IH0gZnJvbSAnLi9uei1zd2l0Y2guY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgZXhwb3J0cyAgICAgOiBbIE56U3dpdGNoQ29tcG9uZW50IF0sXG4gIGRlY2xhcmF0aW9uczogWyBOelN3aXRjaENvbXBvbmVudCBdLFxuICBpbXBvcnRzICAgICA6IFsgQ29tbW9uTW9kdWxlLCBOeldhdmVNb2R1bGUsIE56SWNvbk1vZHVsZSBdXG59KVxuZXhwb3J0IGNsYXNzIE56U3dpdGNoTW9kdWxlIHtcbn1cbiIsImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBIb3N0QmluZGluZyxcbiAgSW5wdXQsXG4gIE91dHB1dCxcbiAgUmVuZGVyZXIyLFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc05vdE5pbCB9IGZyb20gJy4uL2NvcmUvdXRpbC9jaGVjayc7XG5cbmltcG9ydCB7IHRvQm9vbGVhbiB9IGZyb20gJy4uL2NvcmUvdXRpbC9jb252ZXJ0JztcblxuaW1wb3J0IHsgTnpEcm9wRG93bkNvbXBvbmVudCB9IGZyb20gJy4uL2Ryb3Bkb3duL256LWRyb3Bkb3duLmNvbXBvbmVudCc7XG5cbi8qIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnkgKi9cbmV4cG9ydCB0eXBlIE56VGhGaWx0ZXJUeXBlID0gQXJyYXk8eyB0ZXh0OiBzdHJpbmc7IHZhbHVlOiBhbnk7IGJ5RGVmYXVsdD86IGJvb2xlYW4gfT47XG5cbmV4cG9ydCBpbnRlcmZhY2UgTnpUaEl0ZW1JbnRlcmZhY2Uge1xuICB0ZXh0OiBzdHJpbmc7XG4gIC8qIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnkgKi9cbiAgdmFsdWU6IGFueTtcbiAgY2hlY2tlZDogYm9vbGVhbjtcbn1cblxuQENvbXBvbmVudCh7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjb21wb25lbnQtc2VsZWN0b3JcbiAgc2VsZWN0b3IgICAgICAgICAgIDogJ3RoOm5vdCgubnotZGlzYWJsZS10aCknLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgdGVtcGxhdGVVcmwgICAgICAgIDogJy4vbnotdGguY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIE56VGhDb21wb25lbnQge1xuICBwcml2YXRlIF9zb3J0ID0gbnVsbDtcbiAgcHJpdmF0ZSBfZmlsdGVyczogTnpUaEZpbHRlclR5cGUgPSBbXTtcbiAgcHJpdmF0ZSBfc2hvd1NvcnQgPSBmYWxzZTtcbiAgcHJpdmF0ZSBfc2hvd0ZpbHRlciA9IGZhbHNlO1xuICBwcml2YXRlIF9zaG93Q2hlY2tib3ggPSBmYWxzZTtcbiAgcHJpdmF0ZSBfc2hvd1Jvd1NlbGVjdGlvbiA9IGZhbHNlO1xuICBwcml2YXRlIF9oYXNEZWZhdWx0RmlsdGVyID0gZmFsc2U7XG4gIHByaXZhdGUgX2N1c3RvbUZpbHRlciA9IGZhbHNlO1xuICBlbDogSFRNTEVsZW1lbnQgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcbiAgaGFzRmlsdGVyVmFsdWUgPSBmYWxzZTtcbiAgZmlsdGVyVmlzaWJsZSA9IGZhbHNlO1xuICBtdWx0aXBsZUZpbHRlckxpc3Q6IE56VGhJdGVtSW50ZXJmYWNlW10gPSBbXTtcbiAgc2luZ2xlRmlsdGVyTGlzdDogTnpUaEl0ZW1JbnRlcmZhY2VbXSA9IFtdO1xuICBAVmlld0NoaWxkKE56RHJvcERvd25Db21wb25lbnQpIG56RHJvcERvd25Db21wb25lbnQ6IE56RHJvcERvd25Db21wb25lbnQ7XG4gIC8qIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnkgKi9cbiAgQElucHV0KCkgbnpTZWxlY3Rpb25zOiBBcnJheTx7IHRleHQ6IHN0cmluZywgb25TZWxlY3Q6IGFueSB9PiA9IFtdO1xuICBASW5wdXQoKSBuekNoZWNrZWQgPSBmYWxzZTtcbiAgQElucHV0KCkgbnpEaXNhYmxlZCA9IGZhbHNlO1xuICBASW5wdXQoKSBuekluZGV0ZXJtaW5hdGUgPSBmYWxzZTtcbiAgQElucHV0KCkgbnpTb3J0S2V5OiBzdHJpbmc7XG4gIEBJbnB1dCgpIG56RmlsdGVyTXVsdGlwbGUgPSB0cnVlO1xuICBASW5wdXQoKSBueldpZHRoOiBzdHJpbmc7XG4gIEBPdXRwdXQoKSBuekNoZWNrZWRDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG4gIEBPdXRwdXQoKSBuelNvcnRDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcbiAgQE91dHB1dCgpIG56U29ydENoYW5nZVdpdGhLZXkgPSBuZXcgRXZlbnRFbWl0dGVyPHsga2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcgfT4oKTtcbiAgLyogdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueSAqL1xuICBAT3V0cHV0KCkgbnpGaWx0ZXJDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGFueVtdIHwgYW55PigpO1xuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW50LXRhYmxlLWNvbHVtbi1oYXMtYWN0aW9ucycpXG4gIGdldCBoYXNBY3Rpb25zQ2xhc3MoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubnpTaG93RmlsdGVyIHx8IHRoaXMubnpTaG93U29ydCB8fCB0aGlzLm56Q3VzdG9tRmlsdGVyO1xuICB9XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hbnQtdGFibGUtY29sdW1uLWhhcy1maWx0ZXJzJylcbiAgZ2V0IGhhc0ZpbHRlcnNDbGFzcygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5uelNob3dGaWx0ZXIgfHwgdGhpcy5uekN1c3RvbUZpbHRlcjtcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW50LXRhYmxlLWNvbHVtbi1oYXMtc29ydGVycycpXG4gIGdldCBoYXNTb3J0ZXJzQ2xhc3MoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubnpTaG93U29ydDtcbiAgfVxuXG4gIHVwZGF0ZVNvcnRWYWx1ZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5uelNob3dTb3J0KSB7XG4gICAgICBpZiAodGhpcy5uelNvcnQgPT09ICdkZXNjZW5kJykge1xuICAgICAgICB0aGlzLnNldFNvcnRWYWx1ZSgnYXNjZW5kJyk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMubnpTb3J0ID09PSAnYXNjZW5kJykge1xuICAgICAgICB0aGlzLnNldFNvcnRWYWx1ZShudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2V0U29ydFZhbHVlKCdkZXNjZW5kJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56Q3VzdG9tRmlsdGVyKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fY3VzdG9tRmlsdGVyID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuekN1c3RvbUZpbHRlcigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fY3VzdG9tRmlsdGVyO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56U2hvd1NvcnQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9zaG93U29ydCA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBnZXQgbnpTaG93U29ydCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fc2hvd1NvcnQ7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpTaG93RmlsdGVyKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fc2hvd0ZpbHRlciA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBnZXQgbnpTaG93RmlsdGVyKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9zaG93RmlsdGVyO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56U2hvd1Jvd1NlbGVjdGlvbih2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX3Nob3dSb3dTZWxlY3Rpb24gPSB0b0Jvb2xlYW4odmFsdWUpO1xuICAgIGlmICh0aGlzLl9zaG93Um93U2VsZWN0aW9uKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWwsICdhbnQtdGFibGUtc2VsZWN0aW9uLWNvbHVtbi1jdXN0b20nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLmVsLCAnYW50LXRhYmxlLXNlbGVjdGlvbi1jb2x1bW4tY3VzdG9tJyk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IG56U2hvd1Jvd1NlbGVjdGlvbigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fc2hvd1Jvd1NlbGVjdGlvbjtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekxlZnQodmFsdWU6IHN0cmluZykge1xuICAgIGlmIChpc05vdE5pbCh2YWx1ZSkpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbCwgJ2FudC10YWJsZS10aC1sZWZ0LXN0aWNreScpO1xuICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmVsLCAnbGVmdCcsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLmVsLCAnYW50LXRhYmxlLXRoLWxlZnQtc3RpY2t5Jyk7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZVN0eWxlKHRoaXMuZWwsICdsZWZ0Jyk7XG4gICAgfVxuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56UmlnaHQodmFsdWU6IHN0cmluZykge1xuICAgIGlmIChpc05vdE5pbCh2YWx1ZSkpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbCwgJ2FudC10YWJsZS10aC1yaWdodC1zdGlja3knKTtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5lbCwgJ3JpZ2h0JywgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMuZWwsICdhbnQtdGFibGUtdGgtcmlnaHQtc3RpY2t5Jyk7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZVN0eWxlKHRoaXMuZWwsICdyaWdodCcpO1xuICAgIH1cbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekV4cGFuZCh2YWx1ZTogYm9vbGVhbikge1xuICAgIGNvbnN0IGlzRXhwYW5kID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgICBpZiAoaXNFeHBhbmQpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbCwgJ2FudC10YWJsZS1leHBhbmQtaWNvbi10aCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMuZWwsICdhbnQtdGFibGUtZXhwYW5kLWljb24tdGgnKTtcbiAgICB9XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpTaG93Q2hlY2tib3godmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9zaG93Q2hlY2tib3ggPSB0b0Jvb2xlYW4odmFsdWUpO1xuICAgIGlmICh0aGlzLl9zaG93Q2hlY2tib3gpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbCwgJ2FudC10YWJsZS1zZWxlY3Rpb24tY29sdW1uJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5lbCwgJ2FudC10YWJsZS1zZWxlY3Rpb24tY29sdW1uJyk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IG56U2hvd0NoZWNrYm94KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9zaG93Q2hlY2tib3g7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpTb3J0KHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9zb3J0ID0gdmFsdWU7XG4gICAgaWYgKCh2YWx1ZSAhPT0gJ2FzY2VuZCcpICYmICh2YWx1ZSAhPT0gJ2Rlc2NlbmQnKSkge1xuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLmVsLCAnYW50LXRhYmxlLWNvbHVtbi1zb3J0Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbCwgJ2FudC10YWJsZS1jb2x1bW4tc29ydCcpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBuelNvcnQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fc29ydDtcbiAgfVxuXG4gIHNldFNvcnRWYWx1ZSh2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5uelNvcnQgPSB2YWx1ZTtcbiAgICB0aGlzLm56U29ydENoYW5nZVdpdGhLZXkuZW1pdCh7IGtleTogdGhpcy5uelNvcnRLZXksIHZhbHVlOiB0aGlzLm56U29ydCB9KTtcbiAgICB0aGlzLm56U29ydENoYW5nZS5lbWl0KHRoaXMubnpTb3J0KTtcbiAgfVxuXG4gIGdldCBmaWx0ZXJMaXN0KCk6IE56VGhJdGVtSW50ZXJmYWNlW10ge1xuICAgIHJldHVybiB0aGlzLm11bHRpcGxlRmlsdGVyTGlzdC5maWx0ZXIoaXRlbSA9PiBpdGVtLmNoZWNrZWQpLm1hcChpdGVtID0+IGl0ZW0udmFsdWUpO1xuICB9XG5cbiAgLyogdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueSAqL1xuICBnZXQgZmlsdGVyVmFsdWUoKTogYW55IHtcbiAgICBjb25zdCBjaGVja2VkRmlsdGVyID0gdGhpcy5zaW5nbGVGaWx0ZXJMaXN0LmZpbmQoaXRlbSA9PiBpdGVtLmNoZWNrZWQpO1xuICAgIHJldHVybiBjaGVja2VkRmlsdGVyID8gY2hlY2tlZEZpbHRlci52YWx1ZSA6IG51bGw7XG4gIH1cblxuICB1cGRhdGVGaWx0ZXJTdGF0dXMoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubnpGaWx0ZXJNdWx0aXBsZSkge1xuICAgICAgdGhpcy5oYXNGaWx0ZXJWYWx1ZSA9IHRoaXMuZmlsdGVyTGlzdC5sZW5ndGggPiAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhhc0ZpbHRlclZhbHVlID0gaXNOb3ROaWwodGhpcy5maWx0ZXJWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgc2VhcmNoKCk6IHZvaWQge1xuICAgIHRoaXMudXBkYXRlRmlsdGVyU3RhdHVzKCk7XG4gICAgaWYgKHRoaXMubnpGaWx0ZXJNdWx0aXBsZSkge1xuICAgICAgdGhpcy5uekZpbHRlckNoYW5nZS5lbWl0KHRoaXMuZmlsdGVyTGlzdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubnpGaWx0ZXJDaGFuZ2UuZW1pdCh0aGlzLmZpbHRlclZhbHVlKTtcbiAgICB9XG4gICAgdGhpcy5oaWRlRHJvcERvd24oKTtcbiAgfVxuXG4gIHJlc2V0KCk6IHZvaWQge1xuICAgIHRoaXMuaW5pdE11bHRpcGxlRmlsdGVyTGlzdCh0cnVlKTtcbiAgICB0aGlzLmluaXRTaW5nbGVGaWx0ZXJMaXN0KHRydWUpO1xuICAgIHRoaXMuc2VhcmNoKCk7XG4gICAgdGhpcy5oaWRlRHJvcERvd24oKTtcbiAgICB0aGlzLmhhc0ZpbHRlclZhbHVlID0gZmFsc2U7XG4gIH1cblxuICBjaGVja011bHRpcGxlKGZpbHRlcjogTnpUaEl0ZW1JbnRlcmZhY2UpOiB2b2lkIHtcbiAgICBmaWx0ZXIuY2hlY2tlZCA9ICFmaWx0ZXIuY2hlY2tlZDtcbiAgfVxuXG4gIGNoZWNrU2luZ2xlKGZpbHRlcjogTnpUaEl0ZW1JbnRlcmZhY2UpOiB2b2lkIHtcbiAgICB0aGlzLnNpbmdsZUZpbHRlckxpc3QuZm9yRWFjaChpdGVtID0+IGl0ZW0uY2hlY2tlZCA9IGl0ZW0gPT09IGZpbHRlcik7XG4gIH1cblxuICBoaWRlRHJvcERvd24oKTogdm9pZCB7XG4gICAgdGhpcy5uekRyb3BEb3duQ29tcG9uZW50Lm56VmlzaWJsZSA9IGZhbHNlO1xuICAgIHRoaXMubnpEcm9wRG93bkNvbXBvbmVudC5oaWRlKCk7XG4gICAgdGhpcy5maWx0ZXJWaXNpYmxlID0gZmFsc2U7XG4gIH1cblxuICBkcm9wRG93blZpc2libGVDaGFuZ2UodmFsdWU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLmZpbHRlclZpc2libGUgPSB2YWx1ZTtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICB0aGlzLnNlYXJjaCgpO1xuICAgIH1cbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekZpbHRlcnModmFsdWU6IE56VGhGaWx0ZXJUeXBlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICB0aGlzLl9maWx0ZXJzID0gdmFsdWU7XG4gICAgICB0aGlzLmluaXRNdWx0aXBsZUZpbHRlckxpc3QoKTtcbiAgICAgIHRoaXMuaW5pdFNpbmdsZUZpbHRlckxpc3QoKTtcbiAgICAgIHRoaXMudXBkYXRlRmlsdGVyU3RhdHVzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2FybignbnpGaWx0ZXJzIG9ubHkgYWNjZXB0IHR5cGUgb2YgQXJyYXk8eyB0ZXh0OiBzdHJpbmc7IHZhbHVlOiBhbnkgfT4nKTtcbiAgICB9XG4gIH1cblxuICBnZXQgbnpGaWx0ZXJzKCk6IE56VGhGaWx0ZXJUeXBlIHtcbiAgICByZXR1cm4gdGhpcy5fZmlsdGVycztcbiAgfVxuXG4gIGluaXRNdWx0aXBsZUZpbHRlckxpc3QoZm9yY2U/OiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5tdWx0aXBsZUZpbHRlckxpc3QgPSB0aGlzLm56RmlsdGVycy5tYXAoaXRlbSA9PiB7XG4gICAgICBjb25zdCBjaGVja2VkID0gZm9yY2UgPyBmYWxzZSA6ICEhaXRlbS5ieURlZmF1bHQ7XG4gICAgICBpZiAoY2hlY2tlZCkge1xuICAgICAgICB0aGlzLl9oYXNEZWZhdWx0RmlsdGVyID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IHRleHQ6IGl0ZW0udGV4dCwgdmFsdWU6IGl0ZW0udmFsdWUsIGNoZWNrZWQgfTtcbiAgICB9KTtcbiAgICB0aGlzLmNoZWNrRGVmYXVsdEZpbHRlcnMoKTtcbiAgfVxuXG4gIGluaXRTaW5nbGVGaWx0ZXJMaXN0KGZvcmNlPzogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuc2luZ2xlRmlsdGVyTGlzdCA9IHRoaXMubnpGaWx0ZXJzLm1hcChpdGVtID0+IHtcbiAgICAgIGNvbnN0IGNoZWNrZWQgPSBmb3JjZSA/IGZhbHNlIDogISFpdGVtLmJ5RGVmYXVsdDtcbiAgICAgIGlmIChjaGVja2VkKSB7XG4gICAgICAgIHRoaXMuX2hhc0RlZmF1bHRGaWx0ZXIgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgdGV4dDogaXRlbS50ZXh0LCB2YWx1ZTogaXRlbS52YWx1ZSwgY2hlY2tlZCB9O1xuICAgIH0pO1xuICAgIHRoaXMuY2hlY2tEZWZhdWx0RmlsdGVycygpO1xuICB9XG5cbiAgY2hlY2tEZWZhdWx0RmlsdGVycygpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMubnpGaWx0ZXJzIHx8IHRoaXMubnpGaWx0ZXJzLmxlbmd0aCA9PT0gMCB8fCAhdGhpcy5faGFzRGVmYXVsdEZpbHRlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZUZpbHRlclN0YXR1cygpO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgfVxufVxuIiwiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgQ29udGVudENoaWxkcmVuLFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIEhvc3RMaXN0ZW5lcixcbiAgSW5wdXQsXG4gIE5nWm9uZSxcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG4gIE91dHB1dCxcbiAgUXVlcnlMaXN0LFxuICBSZW5kZXJlcjIsXG4gIFRlbXBsYXRlUmVmLFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGZyb21FdmVudCwgbWVyZ2UsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgTnpNZWFzdXJlU2Nyb2xsYmFyU2VydmljZSB9IGZyb20gJy4uL2NvcmUvc2VydmljZXMvbnotbWVhc3VyZS1zY3JvbGxiYXIuc2VydmljZSc7XG5pbXBvcnQgeyBpc05vdE5pbCB9IGZyb20gJy4uL2NvcmUvdXRpbC9jaGVjayc7XG5pbXBvcnQgeyB0b0Jvb2xlYW4gfSBmcm9tICcuLi9jb3JlL3V0aWwvY29udmVydCc7XG5pbXBvcnQgeyBOekkxOG5TZXJ2aWNlIH0gZnJvbSAnLi4vaTE4bi9uei1pMThuLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBOelRoQ29tcG9uZW50IH0gZnJvbSAnLi9uei10aC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpUaGVhZENvbXBvbmVudCB9IGZyb20gJy4vbnotdGhlYWQuY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yICAgICAgICAgICA6ICduei10YWJsZScsXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxuICB0ZW1wbGF0ZVVybCAgICAgICAgOiAnLi9uei10YWJsZS5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgTnpUYWJsZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSB1bnN1YnNjcmliZSQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuICBwcml2YXRlIF9ib3JkZXJlZCA9IGZhbHNlO1xuICBwcml2YXRlIF9zaG93UGFnaW5hdGlvbiA9IHRydWU7XG4gIHByaXZhdGUgX2xvYWRpbmcgPSBmYWxzZTtcbiAgcHJpdmF0ZSBfc2hvd1NpemVDaGFuZ2VyID0gZmFsc2U7XG4gIHByaXZhdGUgX3Nob3dRdWlja0p1bXBlciA9IGZhbHNlO1xuICBwcml2YXRlIF9oaWRlT25TaW5nbGVQYWdlID0gZmFsc2U7XG4gIHByaXZhdGUgX3Njcm9sbDogeyB4OiBzdHJpbmc7IHk6IHN0cmluZyB9ID0geyB4OiBudWxsLCB5OiBudWxsIH07XG4gIHByaXZhdGUgX2Zvb3Rlcjogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD47XG4gIHByaXZhdGUgX3RpdGxlOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPjtcbiAgcHJpdmF0ZSBfbm9SZXN1bHQ6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+O1xuICBwcml2YXRlIF9wYWdlSW5kZXggPSAxO1xuICBwcml2YXRlIF9wYWdlU2l6ZSA9IDEwO1xuICBwcml2YXRlIF93aWR0aENvbmZpZzogc3RyaW5nW10gPSBbXTtcbiAgcHJpdmF0ZSBfZnJvbnRQYWdpbmF0aW9uID0gdHJ1ZTtcbiAgcHJpdmF0ZSBfc2ltcGxlID0gZmFsc2U7XG4gIC8qIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnkgKi9cbiAgbG9jYWxlOiBhbnkgPSB7fTtcbiAgbnpUaGVhZENvbXBvbmVudDogTnpUaGVhZENvbXBvbmVudDtcbiAgaXNGb290ZXJTdHJpbmc6IGJvb2xlYW47XG4gIGlzVGl0bGVTdHJpbmc6IGJvb2xlYW47XG4gIGlzTm9SZXN1bHRTdHJpbmc6IGJvb2xlYW47XG4gIGVsOiBIVE1MRWxlbWVudCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICBsYXN0U2Nyb2xsTGVmdCA9IDA7XG4gIC8qIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnkgKi9cbiAgcmF3RGF0YTogYW55W10gPSBbXTtcbiAgLyogdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueSAqL1xuICBzeW5jRGF0YTogYW55W10gPSBbXTtcbiAgLyoqIHB1YmxpYyBkYXRhIGZvciBuZ0ZvciB0ciAqL1xuICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55ICovXG4gIGRhdGE6IGFueVtdID0gW107XG4gIGhlYWRlckJvdHRvbVN0eWxlO1xuICBpc1dpZHRoQ29uZmlnU2V0ID0gZmFsc2U7XG4gIEBWaWV3Q2hpbGQoJ3RhYmxlSGVhZGVyRWxlbWVudCcpIHRhYmxlSGVhZGVyRWxlbWVudDogRWxlbWVudFJlZjtcbiAgQFZpZXdDaGlsZCgndGFibGVCb2R5RWxlbWVudCcpIHRhYmxlQm9keUVsZW1lbnQ6IEVsZW1lbnRSZWY7XG4gIEBWaWV3Q2hpbGQoJ3RhYmxlTWFpbkVsZW1lbnQnKSB0YWJsZU1haW5FbGVtZW50OiBFbGVtZW50UmVmO1xuICBAQ29udGVudENoaWxkcmVuKE56VGhDb21wb25lbnQsIHsgZGVzY2VuZGFudHM6IHRydWUgfSkgbGlzdE9mTnpUaENvbXBvbmVudDogUXVlcnlMaXN0PE56VGhDb21wb25lbnQ+O1xuXG4gIEBPdXRwdXQoKSBuelBhZ2VTaXplQ2hhbmdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIG56UGFnZUluZGV4Q2hhbmdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQElucHV0KCkgbnpTaG93VG90YWw6IFRlbXBsYXRlUmVmPHsgJGltcGxpY2l0OiBudW1iZXIsIHJhbmdlOiBbIG51bWJlciwgbnVtYmVyIF0gfT47XG5cbiAgLyogdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueSAqL1xuICBAT3V0cHV0KCkgbnpDdXJyZW50UGFnZURhdGFDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnlbXT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBJbnB1dCgpIG56U2l6ZTogc3RyaW5nID0gJ2RlZmF1bHQnO1xuICAvKiogcGFnZSBzaXplIGNoYW5nZXIgc2VsZWN0IHZhbHVlcyAqL1xuICBASW5wdXQoKSBuelBhZ2VTaXplT3B0aW9ucyA9IFsgMTAsIDIwLCAzMCwgNDAsIDUwIF07XG4gIEBJbnB1dCgpIG56TG9hZGluZ0RlbGF5ID0gMDtcbiAgQElucHV0KCkgbnpUb3RhbDogbnVtYmVyO1xuXG4gIEBJbnB1dCgpXG4gIHNldCBuelNpbXBsZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX3NpbXBsZSA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBnZXQgbnpTaW1wbGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3NpbXBsZTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekZyb250UGFnaW5hdGlvbih2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2Zyb250UGFnaW5hdGlvbiA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gICAgdGhpcy5wYXJzZUlucHV0RGF0YSgpO1xuICB9XG5cbiAgZ2V0IG56RnJvbnRQYWdpbmF0aW9uKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9mcm9udFBhZ2luYXRpb247XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpXaWR0aENvbmZpZyh2YWx1ZTogc3RyaW5nW10pIHtcbiAgICB0aGlzLmlzV2lkdGhDb25maWdTZXQgPSB0cnVlO1xuICAgIHRoaXMuX3dpZHRoQ29uZmlnID0gdmFsdWU7XG4gIH1cblxuICBnZXQgbnpXaWR0aENvbmZpZygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIHRoaXMuX3dpZHRoQ29uZmlnO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56VGl0bGUodmFsdWU6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+KSB7XG4gICAgdGhpcy5pc1RpdGxlU3RyaW5nID0gISh2YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmKTtcbiAgICB0aGlzLl90aXRsZSA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IG56VGl0bGUoKTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLl90aXRsZTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekZvb3Rlcih2YWx1ZTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD4pIHtcbiAgICB0aGlzLmlzRm9vdGVyU3RyaW5nID0gISh2YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmKTtcbiAgICB0aGlzLl9mb290ZXIgPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBuekZvb3RlcigpOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMuX2Zvb3RlcjtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuek5vUmVzdWx0KHZhbHVlOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPikge1xuICAgIHRoaXMuaXNOb1Jlc3VsdFN0cmluZyA9ICEodmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZik7XG4gICAgdGhpcy5fbm9SZXN1bHQgPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBuek5vUmVzdWx0KCk6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5fbm9SZXN1bHQ7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpCb3JkZXJlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2JvcmRlcmVkID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuekJvcmRlcmVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9ib3JkZXJlZDtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuelNob3dQYWdpbmF0aW9uKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fc2hvd1BhZ2luYXRpb24gPSB0b0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56U2hvd1BhZ2luYXRpb24oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3Nob3dQYWdpbmF0aW9uO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56TG9hZGluZyh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2xvYWRpbmcgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56TG9hZGluZygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fbG9hZGluZztcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuelNob3dTaXplQ2hhbmdlcih2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX3Nob3dTaXplQ2hhbmdlciA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBnZXQgbnpTaG93U2l6ZUNoYW5nZXIoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3Nob3dTaXplQ2hhbmdlcjtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekhpZGVPblNpbmdsZVBhZ2UodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9oaWRlT25TaW5nbGVQYWdlID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuekhpZGVPblNpbmdsZVBhZ2UoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2hpZGVPblNpbmdsZVBhZ2U7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpTaG93UXVpY2tKdW1wZXIodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9zaG93UXVpY2tKdW1wZXIgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56U2hvd1F1aWNrSnVtcGVyKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9zaG93UXVpY2tKdW1wZXI7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpTY3JvbGwodmFsdWU6IHsgeDogc3RyaW5nOyB5OiBzdHJpbmcgfSkge1xuICAgIGlmIChpc05vdE5pbCh2YWx1ZSkpIHtcbiAgICAgIHRoaXMuX3Njcm9sbCA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9zY3JvbGwgPSB7IHg6IG51bGwsIHk6IG51bGwgfTtcbiAgICB9XG4gICAgdGhpcy5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIHRoaXMuc2V0U2Nyb2xsUG9zaXRpb25DbGFzc05hbWUoKTtcbiAgfVxuXG4gIGdldCBuelNjcm9sbCgpOiB7IHg6IHN0cmluZzsgeTogc3RyaW5nIH0ge1xuICAgIHJldHVybiB0aGlzLl9zY3JvbGw7XG4gIH1cblxuICBASW5wdXQoKVxuICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55ICovXG4gIHNldCBuekRhdGEoZGF0YTogYW55W10pIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgdGhpcy5yYXdEYXRhID0gZGF0YTtcbiAgICAgIHRoaXMucGFyc2VJbnB1dERhdGEoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS53YXJuKCduekRhdGEgb25seSBhY2NlcHQgYXJyYXknKTtcbiAgICB9XG4gIH1cblxuICBwYXJzZUlucHV0RGF0YSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5uekZyb250UGFnaW5hdGlvbikge1xuICAgICAgdGhpcy5zeW5jRGF0YSA9IHRoaXMucmF3RGF0YTtcbiAgICAgIHRoaXMubnpUb3RhbCA9IHRoaXMuc3luY0RhdGEubGVuZ3RoO1xuICAgICAgdGhpcy5jaGVja1BhZ2VJbmRleEJvdW5kaW5nKCk7XG4gICAgICB0aGlzLmdlbmVyYXRlU3luY0Rpc3BsYXlEYXRhKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGF0YSA9IHRoaXMucmF3RGF0YTtcbiAgICAgIHRoaXMubnpDdXJyZW50UGFnZURhdGFDaGFuZ2UuZW1pdCh0aGlzLmRhdGEpO1xuICAgIH1cbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuelBhZ2VJbmRleCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgaWYgKHRoaXMuX3BhZ2VJbmRleCA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fcGFnZUluZGV4ID0gdmFsdWU7XG4gICAgaWYgKHRoaXMubnpGcm9udFBhZ2luYXRpb24pIHtcbiAgICAgIHRoaXMuZ2VuZXJhdGVTeW5jRGlzcGxheURhdGEoKTtcbiAgICB9XG4gIH1cblxuICBnZXQgbnpQYWdlSW5kZXgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fcGFnZUluZGV4O1xuICB9XG5cbiAgZW1pdFBhZ2VJbmRleChpbmRleDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5uelBhZ2VJbmRleCA9IGluZGV4O1xuICAgIHRoaXMubnpQYWdlSW5kZXhDaGFuZ2UuZW1pdCh0aGlzLm56UGFnZUluZGV4KTtcbiAgfVxuXG4gIGVtaXRQYWdlU2l6ZShzaXplOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLm56UGFnZVNpemUgPSBzaXplO1xuICAgIHRoaXMubnpQYWdlU2l6ZUNoYW5nZS5lbWl0KHRoaXMubnpQYWdlU2l6ZSk7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpQYWdlU2l6ZSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgaWYgKHRoaXMuX3BhZ2VTaXplID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9wYWdlU2l6ZSA9IHZhbHVlO1xuICAgIGlmICh0aGlzLm56RnJvbnRQYWdpbmF0aW9uKSB7XG4gICAgICB0aGlzLmNoZWNrUGFnZUluZGV4Qm91bmRpbmcoKTtcbiAgICAgIHRoaXMuZ2VuZXJhdGVTeW5jRGlzcGxheURhdGEoKTtcbiAgICB9XG4gIH1cblxuICBnZXQgbnpQYWdlU2l6ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9wYWdlU2l6ZTtcbiAgfVxuXG4gIGNoZWNrUGFnZUluZGV4Qm91bmRpbmcoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubnpGcm9udFBhZ2luYXRpb24pIHtcbiAgICAgIGNvbnN0IG1heFBhZ2VJbmRleCA9IE1hdGguY2VpbCh0aGlzLnN5bmNEYXRhLmxlbmd0aCAvIHRoaXMubnpQYWdlU2l6ZSk7XG4gICAgICBjb25zdCBwYWdlSW5kZXggPSAhdGhpcy5uelBhZ2VJbmRleCA/IDEgOiAodGhpcy5uelBhZ2VJbmRleCA+IG1heFBhZ2VJbmRleCA/IG1heFBhZ2VJbmRleCA6IHRoaXMubnpQYWdlSW5kZXgpO1xuICAgICAgaWYgKHBhZ2VJbmRleCAhPT0gdGhpcy5uelBhZ2VJbmRleCkge1xuICAgICAgICB0aGlzLl9wYWdlSW5kZXggPSBwYWdlSW5kZXg7XG4gICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gdGhpcy5uelBhZ2VJbmRleENoYW5nZS5lbWl0KHBhZ2VJbmRleCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdlbmVyYXRlU3luY0Rpc3BsYXlEYXRhKCk6IHZvaWQge1xuICAgIHRoaXMuZGF0YSA9IHRoaXMuc3luY0RhdGEuc2xpY2UoKHRoaXMubnpQYWdlSW5kZXggLSAxKSAqIHRoaXMubnpQYWdlU2l6ZSwgdGhpcy5uelBhZ2VJbmRleCAqIHRoaXMubnpQYWdlU2l6ZSk7XG4gICAgdGhpcy5uekN1cnJlbnRQYWdlRGF0YUNoYW5nZS5lbWl0KHRoaXMuZGF0YSk7XG4gIH1cblxuICBzeW5jU2Nyb2xsVGFibGUoZTogTW91c2VFdmVudCk6IHZvaWQge1xuICAgIGlmIChlLmN1cnJlbnRUYXJnZXQgPT09IGUudGFyZ2V0KSB7XG4gICAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldCBhcyBIVE1MRWxlbWVudDtcbiAgICAgIGlmICh0YXJnZXQuc2Nyb2xsTGVmdCAhPT0gdGhpcy5sYXN0U2Nyb2xsTGVmdCAmJiB0aGlzLm56U2Nyb2xsICYmIHRoaXMubnpTY3JvbGwueCkge1xuICAgICAgICBpZiAodGFyZ2V0ID09PSB0aGlzLnRhYmxlQm9keUVsZW1lbnQubmF0aXZlRWxlbWVudCAmJiB0aGlzLnRhYmxlSGVhZGVyRWxlbWVudCkge1xuICAgICAgICAgIHRoaXMudGFibGVIZWFkZXJFbGVtZW50Lm5hdGl2ZUVsZW1lbnQuc2Nyb2xsTGVmdCA9IHRhcmdldC5zY3JvbGxMZWZ0O1xuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldCA9PT0gdGhpcy50YWJsZUhlYWRlckVsZW1lbnQubmF0aXZlRWxlbWVudCAmJiB0aGlzLnRhYmxlQm9keUVsZW1lbnQpIHtcbiAgICAgICAgICB0aGlzLnRhYmxlQm9keUVsZW1lbnQubmF0aXZlRWxlbWVudC5zY3JvbGxMZWZ0ID0gdGFyZ2V0LnNjcm9sbExlZnQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRTY3JvbGxQb3NpdGlvbkNsYXNzTmFtZSgpO1xuICAgICAgfVxuICAgICAgdGhpcy5sYXN0U2Nyb2xsTGVmdCA9IHRhcmdldC5zY3JvbGxMZWZ0O1xuICAgIH1cbiAgfVxuXG4gIHNldFNjcm9sbFBvc2l0aW9uQ2xhc3NOYW1lKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnRhYmxlQm9keUVsZW1lbnQgJiYgdGhpcy5uelNjcm9sbCAmJiB0aGlzLm56U2Nyb2xsLngpIHtcbiAgICAgIGlmICgodGhpcy50YWJsZUJvZHlFbGVtZW50Lm5hdGl2ZUVsZW1lbnQuc2Nyb2xsV2lkdGggPT09IHRoaXMudGFibGVCb2R5RWxlbWVudC5uYXRpdmVFbGVtZW50LmNsaWVudFdpZHRoKSAmJiAodGhpcy50YWJsZUJvZHlFbGVtZW50Lm5hdGl2ZUVsZW1lbnQuc2Nyb2xsV2lkdGggIT09IDApKSB7XG4gICAgICAgIHRoaXMuc2V0U2Nyb2xsTmFtZSgpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnRhYmxlQm9keUVsZW1lbnQubmF0aXZlRWxlbWVudC5zY3JvbGxMZWZ0ID09PSAwKSB7XG4gICAgICAgIHRoaXMuc2V0U2Nyb2xsTmFtZSgnbGVmdCcpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnRhYmxlQm9keUVsZW1lbnQubmF0aXZlRWxlbWVudC5zY3JvbGxXaWR0aCA9PT0gKHRoaXMudGFibGVCb2R5RWxlbWVudC5uYXRpdmVFbGVtZW50LnNjcm9sbExlZnQgKyB0aGlzLnRhYmxlQm9keUVsZW1lbnQubmF0aXZlRWxlbWVudC5jbGllbnRXaWR0aCkpIHtcbiAgICAgICAgdGhpcy5zZXRTY3JvbGxOYW1lKCdyaWdodCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zZXRTY3JvbGxOYW1lKCdtaWRkbGUnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzZXRTY3JvbGxOYW1lKHBvc2l0aW9uPzogc3RyaW5nKTogdm9pZCB7XG4gICAgY29uc3QgcHJlZml4ID0gJ2FudC10YWJsZS1zY3JvbGwtcG9zaXRpb24nO1xuICAgIGNvbnN0IGNsYXNzTGlzdCA9IFsgJ2xlZnQnLCAncmlnaHQnLCAnbWlkZGxlJyBdO1xuICAgIGNsYXNzTGlzdC5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLnRhYmxlTWFpbkVsZW1lbnQubmF0aXZlRWxlbWVudCwgYCR7cHJlZml4fS0ke25hbWV9YCk7XG4gICAgfSk7XG4gICAgaWYgKHBvc2l0aW9uKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMudGFibGVNYWluRWxlbWVudC5uYXRpdmVFbGVtZW50LCBgJHtwcmVmaXh9LSR7cG9zaXRpb259YCk7XG4gICAgfVxuICB9XG5cbiAgZml0U2Nyb2xsQmFyKCk6IHZvaWQge1xuICAgIGNvbnN0IHNjcm9sbGJhcldpZHRoID0gdGhpcy5uek1lYXN1cmVTY3JvbGxiYXJTZXJ2aWNlLnNjcm9sbEJhcldpZHRoO1xuICAgIGlmIChzY3JvbGxiYXJXaWR0aCkge1xuICAgICAgdGhpcy5oZWFkZXJCb3R0b21TdHlsZSA9IHtcbiAgICAgICAgbWFyZ2luQm90dG9tIDogYC0ke3Njcm9sbGJhcldpZHRofXB4YCxcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogYDBweGBcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignd2luZG93OnJlc2l6ZScpXG4gIG9uV2luZG93UmVzaXplKCk6IHZvaWQge1xuICAgIHRoaXMuZml0U2Nyb2xsQmFyKCk7XG4gICAgdGhpcy5zZXRTY3JvbGxQb3NpdGlvbkNsYXNzTmFtZSgpO1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5pMThuLmxvY2FsZUNoYW5nZS5waXBlKHRha2VVbnRpbCh0aGlzLnVuc3Vic2NyaWJlJCkpLnN1YnNjcmliZSgoKSA9PiB0aGlzLmxvY2FsZSA9IHRoaXMuaTE4bi5nZXRMb2NhbGVEYXRhKCdUYWJsZScpKTtcbiAgICB0aGlzLmZpdFNjcm9sbEJhcigpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zZXRTY3JvbGxQb3NpdGlvbkNsYXNzTmFtZSgpKTtcbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICBpZiAodGhpcy50YWJsZUhlYWRlckVsZW1lbnRcbiAgICAgICAgJiYgdGhpcy50YWJsZUhlYWRlckVsZW1lbnQubmF0aXZlRWxlbWVudFxuICAgICAgICAmJiB0aGlzLnRhYmxlQm9keUVsZW1lbnRcbiAgICAgICAgJiYgdGhpcy50YWJsZUJvZHlFbGVtZW50Lm5hdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgbWVyZ2UoXG4gICAgICAgICAgZnJvbUV2ZW50KHRoaXMudGFibGVIZWFkZXJFbGVtZW50Lm5hdGl2ZUVsZW1lbnQsICdzY3JvbGwnKSxcbiAgICAgICAgICBmcm9tRXZlbnQodGhpcy50YWJsZUJvZHlFbGVtZW50Lm5hdGl2ZUVsZW1lbnQsICdzY3JvbGwnKVxuICAgICAgICApLnBpcGUodGFrZVVudGlsKHRoaXMudW5zdWJzY3JpYmUkKSkuc3Vic2NyaWJlKChkYXRhOiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgdGhpcy5zeW5jU2Nyb2xsVGFibGUoZGF0YSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy51bnN1YnNjcmliZSQubmV4dCgpO1xuICAgIHRoaXMudW5zdWJzY3JpYmUkLmNvbXBsZXRlKCk7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgbmdab25lOiBOZ1pvbmUsIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSBjZHI6IENoYW5nZURldGVjdG9yUmVmLCBwcml2YXRlIG56TWVhc3VyZVNjcm9sbGJhclNlcnZpY2U6IE56TWVhc3VyZVNjcm9sbGJhclNlcnZpY2UsIHByaXZhdGUgaTE4bjogTnpJMThuU2VydmljZSkge1xuICB9XG59XG4iLCJpbXBvcnQgeyBEaXJlY3RpdmUsIEhvc3QsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOelRhYmxlQ29tcG9uZW50IH0gZnJvbSAnLi9uei10YWJsZS5jb21wb25lbnQnO1xuXG5ARGlyZWN0aXZlKHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxuICBzZWxlY3RvcjogJ3Rib2R5JyxcbiAgaG9zdCAgICA6IHtcbiAgICAnW2NsYXNzLmFudC10YWJsZS10Ym9keV0nOiAnbnpUYWJsZUNvbXBvbmVudCdcbiAgfVxufSlcblxuZXhwb3J0IGNsYXNzIE56VGJvZHlEaXJlY3RpdmUge1xuICBjb25zdHJ1Y3RvcihASG9zdCgpIEBPcHRpb25hbCgpIHB1YmxpYyBuelRhYmxlQ29tcG9uZW50OiBOelRhYmxlQ29tcG9uZW50KSB7XG4gIH1cbn1cbiIsImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBSZW5kZXJlcjJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGlzTm90TmlsIH0gZnJvbSAnLi4vY29yZS91dGlsL2NoZWNrJztcbmltcG9ydCB7IHRvQm9vbGVhbiB9IGZyb20gJy4uL2NvcmUvdXRpbC9jb252ZXJ0JztcblxuQENvbXBvbmVudCh7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjb21wb25lbnQtc2VsZWN0b3JcbiAgc2VsZWN0b3IgICA6ICd0ZDpub3QoLm56LWRpc2FibGUtdGQpJyxcbiAgdGVtcGxhdGVVcmw6ICcuL256LXRkLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBOelRkQ29tcG9uZW50IHtcbiAgcHJpdmF0ZSBfc2hvd0V4cGFuZCA9IGZhbHNlO1xuICBwcml2YXRlIF9pbmRlbnRTaXplOiBudW1iZXI7XG4gIHByaXZhdGUgX2V4cGFuZCA9IGZhbHNlO1xuICBwcml2YXRlIF9zaG93Q2hlY2tib3ggPSBmYWxzZTtcbiAgaXNJbmRlbnRTaXplU2V0ID0gZmFsc2U7XG4gIGVsOiBIVE1MRWxlbWVudCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICBASW5wdXQoKSBuekNoZWNrZWQgPSBmYWxzZTtcbiAgQElucHV0KCkgbnpEaXNhYmxlZCA9IGZhbHNlO1xuICBASW5wdXQoKSBuekluZGV0ZXJtaW5hdGUgPSBmYWxzZTtcbiAgQE91dHB1dCgpIG56Q2hlY2tlZENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcbiAgQE91dHB1dCgpIG56RXhwYW5kQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXG4gIEBJbnB1dCgpXG4gIHNldCBuekluZGVudFNpemUodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX2luZGVudFNpemUgPSB2YWx1ZTtcbiAgICB0aGlzLmlzSW5kZW50U2l6ZVNldCA9IGlzTm90TmlsKHZhbHVlKTtcbiAgICB0aGlzLnVwZGF0ZUV4cGFuZEljb25DbGFzcygpO1xuICB9XG5cbiAgZ2V0IG56SW5kZW50U2l6ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9pbmRlbnRTaXplO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56RXhwYW5kKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fZXhwYW5kID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuekV4cGFuZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fZXhwYW5kO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56U2hvd0V4cGFuZCh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX3Nob3dFeHBhbmQgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICAgIHRoaXMudXBkYXRlRXhwYW5kSWNvbkNsYXNzKCk7XG4gIH1cblxuICBnZXQgbnpTaG93RXhwYW5kKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9zaG93RXhwYW5kO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56U2hvd0NoZWNrYm94KHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fc2hvd0NoZWNrYm94ID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgICBpZiAodGhpcy5fc2hvd0NoZWNrYm94KSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWwsICdhbnQtdGFibGUtc2VsZWN0aW9uLWNvbHVtbicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMuZWwsICdhbnQtdGFibGUtc2VsZWN0aW9uLWNvbHVtbicpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBuelNob3dDaGVja2JveCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fc2hvd0NoZWNrYm94O1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56TGVmdCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgaWYgKGlzTm90TmlsKHZhbHVlKSkge1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVsLCAnYW50LXRhYmxlLXRkLWxlZnQtc3RpY2t5Jyk7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuZWwsICdsZWZ0JywgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMuZWwsICdhbnQtdGFibGUtdGQtbGVmdC1zdGlja3knKTtcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlU3R5bGUodGhpcy5lbCwgJ2xlZnQnKTtcbiAgICB9XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpSaWdodCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgaWYgKGlzTm90TmlsKHZhbHVlKSkge1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVsLCAnYW50LXRhYmxlLXRkLXJpZ2h0LXN0aWNreScpO1xuICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmVsLCAncmlnaHQnLCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5lbCwgJ2FudC10YWJsZS10ZC1yaWdodC1zdGlja3knKTtcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlU3R5bGUodGhpcy5lbCwgJ3JpZ2h0Jyk7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlRXhwYW5kSWNvbkNsYXNzKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLm56U2hvd0V4cGFuZCAmJiAhdGhpcy5pc0luZGVudFNpemVTZXQpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbCwgJ2FudC10YWJsZS1yb3ctZXhwYW5kLWljb24tY2VsbCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMuZWwsICdhbnQtdGFibGUtcm93LWV4cGFuZC1pY29uLWNlbGwnKTtcbiAgICB9XG4gIH1cblxuICBleHBhbmRDaGFuZ2UoKTogdm9pZCB7XG4gICAgdGhpcy5uekV4cGFuZCA9ICF0aGlzLm56RXhwYW5kO1xuICAgIHRoaXMubnpFeHBhbmRDaGFuZ2UuZW1pdCh0aGlzLm56RXhwYW5kKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7XG4gIH1cbn1cbiIsImltcG9ydCB7XG4gIEFmdGVyQ29udGVudEluaXQsXG4gIENvbXBvbmVudCxcbiAgQ29udGVudENoaWxkcmVuLFxuICBFdmVudEVtaXR0ZXIsXG4gIEhvc3QsXG4gIElucHV0LFxuICBPbkRlc3Ryb3ksXG4gIE9wdGlvbmFsLFxuICBPdXRwdXQsXG4gIFF1ZXJ5TGlzdCxcbiAgVGVtcGxhdGVSZWYsXG4gIFZpZXdDaGlsZFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgbWVyZ2UsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgdG9Cb29sZWFuIH0gZnJvbSAnLi4vY29yZS91dGlsL2NvbnZlcnQnO1xuaW1wb3J0IHsgTnpUaENvbXBvbmVudCB9IGZyb20gJy4vbnotdGguY29tcG9uZW50JztcblxuaW1wb3J0IHsgTnpUYWJsZUNvbXBvbmVudCB9IGZyb20gJy4vbnotdGFibGUuY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjb21wb25lbnQtc2VsZWN0b3JcbiAgc2VsZWN0b3IgICA6ICd0aGVhZDpub3QoLmFudC10YWJsZS10aGVhZCknLFxuICB0ZW1wbGF0ZVVybDogJy4vbnotdGhlYWQuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIE56VGhlYWRDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kge1xuICBwcml2YXRlIF9zaW5nbGVTb3J0ID0gZmFsc2U7XG4gIHByaXZhdGUgdW5zdWJzY3JpYmUkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICBAVmlld0NoaWxkKCdjb250ZW50VGVtcGxhdGUnKSB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8dm9pZD47XG4gIEBDb250ZW50Q2hpbGRyZW4oTnpUaENvbXBvbmVudCwgeyBkZXNjZW5kYW50czogdHJ1ZSB9KSBsaXN0T2ZOelRoQ29tcG9uZW50OiBRdWVyeUxpc3Q8TnpUaENvbXBvbmVudD47XG4gIEBPdXRwdXQoKSBuelNvcnRDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPHsga2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcgfT4oKTtcblxuICBASW5wdXQoKVxuICBzZXQgbnpTaW5nbGVTb3J0KHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fc2luZ2xlU29ydCA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBnZXQgbnpTaW5nbGVTb3J0KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9zaW5nbGVTb3J0O1xuICB9XG5cbiAgY29uc3RydWN0b3IoQEhvc3QoKSBAT3B0aW9uYWwoKSBwdWJsaWMgbnpUYWJsZUNvbXBvbmVudDogTnpUYWJsZUNvbXBvbmVudCkge1xuICAgIGlmICh0aGlzLm56VGFibGVDb21wb25lbnQpIHtcbiAgICAgIHRoaXMubnpUYWJsZUNvbXBvbmVudC5uelRoZWFkQ29tcG9uZW50ID0gdGhpcztcbiAgICB9XG4gIH1cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZCB7XG4gICAgbGV0IHNvcnRDaGFuZ2UgPSBuZXcgU3ViamVjdDx7IGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nIH0+KCkuYXNPYnNlcnZhYmxlKCk7XG4gICAgY29uc3QgbGlzdE9mVGggPSB0aGlzLmxpc3RPZk56VGhDb21wb25lbnQudG9BcnJheSgpO1xuICAgIGNvbnN0IHNvcnRDaGFuZ2VBcnJheSA9IGxpc3RPZlRoLm1hcCh0aCA9PiB0aC5uelNvcnRDaGFuZ2VXaXRoS2V5KTtcbiAgICBpZiAoc29ydENoYW5nZUFycmF5Lmxlbmd0aCkge1xuICAgICAgc29ydENoYW5nZUFycmF5LmZvckVhY2goc29ydCA9PiB7XG4gICAgICAgIHNvcnRDaGFuZ2UgPSBtZXJnZShzb3J0LmFzT2JzZXJ2YWJsZSgpLCBzb3J0Q2hhbmdlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBzb3J0Q2hhbmdlLnBpcGUodGFrZVVudGlsKHRoaXMudW5zdWJzY3JpYmUkKSkuc3Vic2NyaWJlKGRhdGEgPT4ge1xuICAgICAgdGhpcy5uelNvcnRDaGFuZ2UuZW1pdChkYXRhKTtcbiAgICAgIGlmICh0aGlzLm56U2luZ2xlU29ydCkge1xuICAgICAgICBsaXN0T2ZUaC5mb3JFYWNoKHRoID0+IHRoLm56U29ydCA9ICh0aC5uelNvcnRLZXkgPT09IGRhdGEua2V5ID8gdGgubnpTb3J0IDogbnVsbCkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy51bnN1YnNjcmliZSQubmV4dCgpO1xuICAgIHRoaXMudW5zdWJzY3JpYmUkLmNvbXBsZXRlKCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSG9zdCwgSW5wdXQsIE9wdGlvbmFsLCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHRvQm9vbGVhbiB9IGZyb20gJy4uL2NvcmUvdXRpbC9jb252ZXJ0JztcbmltcG9ydCB7IE56VGFibGVDb21wb25lbnQgfSBmcm9tICcuL256LXRhYmxlLmNvbXBvbmVudCc7XG5cbkBEaXJlY3RpdmUoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAndHInLFxuICBob3N0ICAgIDoge1xuICAgICdbY2xhc3MuYW50LXRhYmxlLXJvd10nOiAnbnpUYWJsZUNvbXBvbmVudCdcbiAgfVxufSlcblxuZXhwb3J0IGNsYXNzIE56VHJEaXJlY3RpdmUge1xuXG4gIEBJbnB1dCgpXG4gIHNldCBuekV4cGFuZCh2YWx1ZTogYm9vbGVhbikge1xuICAgIGlmICh0b0Jvb2xlYW4odmFsdWUpKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZVN0eWxlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnZGlzcGxheScpO1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2FudC10YWJsZS1leHBhbmRlZC1yb3cnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2FudC10YWJsZS1leHBhbmRlZC1yb3cnKTtcbiAgICB9XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMiwgQEhvc3QoKSBAT3B0aW9uYWwoKSBwdWJsaWMgbnpUYWJsZUNvbXBvbmVudDogTnpUYWJsZUNvbXBvbmVudCkge1xuXG4gIH1cbn1cbiIsImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IE56Q2hlY2tib3hNb2R1bGUgfSBmcm9tICcuLi9jaGVja2JveC9uei1jaGVja2JveC5tb2R1bGUnO1xuaW1wb3J0IHsgTnpEcm9wRG93bk1vZHVsZSB9IGZyb20gJy4uL2Ryb3Bkb3duL256LWRyb3Bkb3duLm1vZHVsZSc7XG5pbXBvcnQgeyBOekkxOG5Nb2R1bGUgfSBmcm9tICcuLi9pMThuL256LWkxOG4ubW9kdWxlJztcbmltcG9ydCB7IE56SWNvbk1vZHVsZSB9IGZyb20gJy4uL2ljb24vbnotaWNvbi5tb2R1bGUnO1xuaW1wb3J0IHsgTnpNZW51TW9kdWxlIH0gZnJvbSAnLi4vbWVudS9uei1tZW51Lm1vZHVsZSc7XG5pbXBvcnQgeyBOelBhZ2luYXRpb25Nb2R1bGUgfSBmcm9tICcuLi9wYWdpbmF0aW9uL256LXBhZ2luYXRpb24ubW9kdWxlJztcbmltcG9ydCB7IE56UmFkaW9Nb2R1bGUgfSBmcm9tICcuLi9yYWRpby9uei1yYWRpby5tb2R1bGUnO1xuaW1wb3J0IHsgTnpTcGluTW9kdWxlIH0gZnJvbSAnLi4vc3Bpbi9uei1zcGluLm1vZHVsZSc7XG5cbmltcG9ydCB7IE56VGFibGVDb21wb25lbnQgfSBmcm9tICcuL256LXRhYmxlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOelRib2R5RGlyZWN0aXZlIH0gZnJvbSAnLi9uei10Ym9keS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgTnpUZENvbXBvbmVudCB9IGZyb20gJy4vbnotdGQuY29tcG9uZW50JztcbmltcG9ydCB7IE56VGhDb21wb25lbnQgfSBmcm9tICcuL256LXRoLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOelRoZWFkQ29tcG9uZW50IH0gZnJvbSAnLi9uei10aGVhZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpUckRpcmVjdGl2ZSB9IGZyb20gJy4vbnotdHIuZGlyZWN0aXZlJztcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbIE56VGFibGVDb21wb25lbnQsIE56VGhDb21wb25lbnQsIE56VGRDb21wb25lbnQsIE56VGhlYWRDb21wb25lbnQsIE56VGJvZHlEaXJlY3RpdmUsIE56VHJEaXJlY3RpdmUgXSxcbiAgZXhwb3J0cyAgICAgOiBbIE56VGFibGVDb21wb25lbnQsIE56VGhDb21wb25lbnQsIE56VGRDb21wb25lbnQsIE56VGhlYWRDb21wb25lbnQsIE56VGJvZHlEaXJlY3RpdmUsIE56VHJEaXJlY3RpdmUgXSxcbiAgaW1wb3J0cyAgICAgOiBbXG4gICAgTnpNZW51TW9kdWxlLFxuICAgIEZvcm1zTW9kdWxlLFxuICAgIE56UmFkaW9Nb2R1bGUsXG4gICAgTnpDaGVja2JveE1vZHVsZSxcbiAgICBOekRyb3BEb3duTW9kdWxlLFxuICAgIENvbW1vbk1vZHVsZSxcbiAgICBOelBhZ2luYXRpb25Nb2R1bGUsXG4gICAgTnpTcGluTW9kdWxlLFxuICAgIE56STE4bk1vZHVsZSxcbiAgICBOekljb25Nb2R1bGVcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBOelRhYmxlTW9kdWxlIHtcbn1cbiIsImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgSW5wdXQsXG4gIFRlbXBsYXRlUmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICAgICAgICAgIDogJ1tuei10YWItYm9keV0nLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgdGVtcGxhdGVVcmwgICAgICAgIDogJy4vbnotdGFiLWJvZHkuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIE56VGFiQm9keUNvbXBvbmVudCB7XG4gIEBJbnB1dCgpIGNvbnRlbnQ6IFRlbXBsYXRlUmVmPHZvaWQ+O1xufVxuIiwiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBIb3N0QmluZGluZywgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgdG9Cb29sZWFuIH0gZnJvbSAnLi4vY29yZS91dGlsL2NvbnZlcnQnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbnotdGFiLWxhYmVsXScsXG4gIGhvc3QgICAgOiB7XG4gICAgJ1tjbGFzcy5hbnQtdGFicy10YWJdJzogJ3RydWUnXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgTnpUYWJMYWJlbERpcmVjdGl2ZSB7XG5cbiAgcHJpdmF0ZSBfZGlzYWJsZWQgPSBmYWxzZTtcblxuICBASW5wdXQoKVxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmFudC10YWJzLXRhYi1kaXNhYmxlZCcpXG4gIHNldCBkaXNhYmxlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2Rpc2FibGVkID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBkaXNhYmxlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fZGlzYWJsZWQ7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xuICB9XG5cbiAgZ2V0T2Zmc2V0TGVmdCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5vZmZzZXRMZWZ0O1xuICB9XG5cbiAgZ2V0T2Zmc2V0V2lkdGgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gIH1cblxuICBnZXRPZmZzZXRUb3AoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQub2Zmc2V0VG9wO1xuICB9XG5cbiAgZ2V0T2Zmc2V0SGVpZ2h0KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50Lm9mZnNldEhlaWdodDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgTmdab25lLCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgcmVxQW5pbUZyYW1lIH0gZnJvbSAnLi4vY29yZS9wb2x5ZmlsbC9yZXF1ZXN0LWFuaW1hdGlvbic7XG5pbXBvcnQgeyB0b0Jvb2xlYW4gfSBmcm9tICcuLi9jb3JlL3V0aWwvY29udmVydCc7XG5cbmltcG9ydCB7IE56VGFiUG9zaXRpb25Nb2RlIH0gZnJvbSAnLi9uei10YWJzZXQuY29tcG9uZW50JztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW256LXRhYnMtaW5rLWJhcl0nLFxuICBob3N0ICAgIDoge1xuICAgICdbY2xhc3MuYW50LXRhYnMtaW5rLWJhcl0nICAgICAgICAgICAgOiAndHJ1ZScsXG4gICAgJ1tjbGFzcy5hbnQtdGFicy1pbmstYmFyLWFuaW1hdGVkXScgICA6ICduekFuaW1hdGVkJyxcbiAgICAnW2NsYXNzLmFudC10YWJzLWluay1iYXItbm8tYW5pbWF0ZWRdJzogJyFuekFuaW1hdGVkJ1xuICB9XG59KVxuZXhwb3J0IGNsYXNzIE56VGFic0lua0JhckRpcmVjdGl2ZSB7XG4gIHByaXZhdGUgX2FuaW1hdGVkID0gZmFsc2U7XG5cbiAgQElucHV0KClcbiAgc2V0IG56QW5pbWF0ZWQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9hbmltYXRlZCA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBnZXQgbnpBbmltYXRlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fYW5pbWF0ZWQ7XG4gIH1cblxuICBASW5wdXQoKSBuelBvc2l0aW9uTW9kZTogTnpUYWJQb3NpdGlvbk1vZGUgPSAnaG9yaXpvbnRhbCc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgICAgICAgICAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgICAgICAgICAgIHByaXZhdGUgbmdab25lOiBOZ1pvbmUpIHtcbiAgfVxuXG4gIGFsaWduVG9FbGVtZW50KGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgdGhpcy5zaG93KCk7XG5cbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICByZXFBbmltRnJhbWUoKCkgPT4ge1xuICAgICAgICAvKiogd2hlbiBob3Jpem9udGFsIHJlbW92ZSBoZWlnaHQgc3R5bGUgYW5kIGFkZCB0cmFuc2Zvcm0gbGVmdCAqKi9cbiAgICAgICAgaWYgKHRoaXMubnpQb3NpdGlvbk1vZGUgPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlU3R5bGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdoZWlnaHQnKTtcbiAgICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAndHJhbnNmb3JtJyxcbiAgICAgICAgICAgIGB0cmFuc2xhdGUzZCgke3RoaXMuZ2V0TGVmdFBvc2l0aW9uKGVsZW1lbnQpfSwgMHB4LCAwcHgpYCk7XG4gICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ3dpZHRoJyxcbiAgICAgICAgICAgIHRoaXMuZ2V0RWxlbWVudFdpZHRoKGVsZW1lbnQpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvKiogd2hlbiB2ZXJ0aWNhbCByZW1vdmUgd2lkdGggc3R5bGUgYW5kIGFkZCB0cmFuc2Zvcm0gdG9wICoqL1xuICAgICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlU3R5bGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICd3aWR0aCcpO1xuICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICd0cmFuc2Zvcm0nLFxuICAgICAgICAgICAgYHRyYW5zbGF0ZTNkKDBweCwgJHt0aGlzLmdldFRvcFBvc2l0aW9uKGVsZW1lbnQpfSwgMHB4KWApO1xuICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdoZWlnaHQnLFxuICAgICAgICAgICAgdGhpcy5nZXRFbGVtZW50SGVpZ2h0KGVsZW1lbnQpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBzaG93KCk6IHZvaWQge1xuICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICd2aXNpYmlsaXR5JywgJ3Zpc2libGUnKTtcbiAgfVxuXG4gIHNldERpc3BsYXkodmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdkaXNwbGF5JywgdmFsdWUpO1xuICB9XG5cbiAgZ2V0TGVmdFBvc2l0aW9uKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogc3RyaW5nIHtcbiAgICByZXR1cm4gZWxlbWVudCA/IGVsZW1lbnQub2Zmc2V0TGVmdCArICdweCcgOiAnMCc7XG4gIH1cblxuICBnZXRFbGVtZW50V2lkdGgoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBzdHJpbmcge1xuICAgIHJldHVybiBlbGVtZW50ID8gZWxlbWVudC5vZmZzZXRXaWR0aCArICdweCcgOiAnMCc7XG4gIH1cblxuICBnZXRUb3BQb3NpdGlvbihlbGVtZW50OiBIVE1MRWxlbWVudCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGVsZW1lbnQgPyBlbGVtZW50Lm9mZnNldFRvcCArICdweCcgOiAnMCc7XG4gIH1cblxuICBnZXRFbGVtZW50SGVpZ2h0KGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogc3RyaW5nIHtcbiAgICByZXR1cm4gZWxlbWVudCA/IGVsZW1lbnQub2Zmc2V0SGVpZ2h0ICsgJ3B4JyA6ICcwJztcbiAgfVxufVxuIiwiLyoqIGNvZGUgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9tYXRlcmlhbDIgKi9cbmltcG9ydCB7IERpcmVjdGlvbiwgRGlyZWN0aW9uYWxpdHkgfSBmcm9tICdAYW5ndWxhci9jZGsvYmlkaSc7XG5pbXBvcnQge1xuICBBZnRlckNvbnRlbnRDaGVja2VkLFxuICBBZnRlckNvbnRlbnRJbml0LFxuICBDb21wb25lbnQsXG4gIENvbnRlbnRDaGlsZHJlbixcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgTmdab25lLFxuICBPcHRpb25hbCxcbiAgT3V0cHV0LFxuICBRdWVyeUxpc3QsXG4gIFJlbmRlcmVyMixcbiAgVGVtcGxhdGVSZWYsXG4gIFZpZXdDaGlsZFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGZyb21FdmVudCwgbWVyZ2UsIG9mIGFzIG9ic2VydmFibGVPZiwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBhdWRpdFRpbWUsIHN0YXJ0V2l0aCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgdG9Cb29sZWFuIH0gZnJvbSAnLi4vY29yZS91dGlsL2NvbnZlcnQnO1xuXG5pbXBvcnQgeyBOelRhYkxhYmVsRGlyZWN0aXZlIH0gZnJvbSAnLi9uei10YWItbGFiZWwuZGlyZWN0aXZlJztcbmltcG9ydCB7IE56VGFic0lua0JhckRpcmVjdGl2ZSB9IGZyb20gJy4vbnotdGFicy1pbmstYmFyLmRpcmVjdGl2ZSc7XG5cbmNvbnN0IEVYQUdHRVJBVEVEX09WRVJTQ1JPTEwgPSA2NDtcbmV4cG9ydCB0eXBlIFNjcm9sbERpcmVjdGlvbiA9ICdhZnRlcicgfCAnYmVmb3JlJztcblxuaW1wb3J0IHsgTnpUYWJQb3NpdGlvbk1vZGUgfSBmcm9tICcuL256LXRhYnNldC5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICAgICAgICAgIDogJ1tuei10YWJzLW5hdl0nLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgdGVtcGxhdGVVcmwgICAgICAgIDogJy4vbnotdGFicy1uYXYuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIE56VGFic05hdkNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudENoZWNrZWQsIEFmdGVyQ29udGVudEluaXQge1xuICBwcml2YXRlIF9hbmltYXRlZCA9IHRydWU7XG4gIHByaXZhdGUgX2hpZGVCYXIgPSBmYWxzZTtcbiAgcHJpdmF0ZSBfc2hvd1BhZ2luYXRpb24gPSB0cnVlO1xuICBwcml2YXRlIF90eXBlID0gJ2xpbmUnO1xuICBwcml2YXRlIF90YWJQb3NpdGlvbk1vZGU6IE56VGFiUG9zaXRpb25Nb2RlID0gJ2hvcml6b250YWwnO1xuICBwcml2YXRlIF9zY3JvbGxEaXN0YW5jZSA9IDA7XG4gIHByaXZhdGUgX3NlbGVjdGVkSW5kZXggPSAwO1xuICBzaG93UGFnaW5hdGlvbkNvbnRyb2xzID0gZmFsc2U7XG4gIGRpc2FibGVTY3JvbGxBZnRlciA9IHRydWU7XG4gIGRpc2FibGVTY3JvbGxCZWZvcmUgPSB0cnVlO1xuICBzZWxlY3RlZEluZGV4Q2hhbmdlZCA9IGZhbHNlO1xuICByZWFsaWduSW5rQmFyOiBTdWJzY3JpcHRpb24gfCBudWxsID0gbnVsbDtcbiAgdGFiTGFiZWxDb3VudDogbnVtYmVyO1xuICBzY3JvbGxEaXN0YW5jZUNoYW5nZWQ6IGJvb2xlYW47XG4gIEBDb250ZW50Q2hpbGRyZW4oTnpUYWJMYWJlbERpcmVjdGl2ZSkgbGlzdE9mTnpUYWJMYWJlbERpcmVjdGl2ZTogUXVlcnlMaXN0PE56VGFiTGFiZWxEaXJlY3RpdmU+O1xuICBAVmlld0NoaWxkKE56VGFic0lua0JhckRpcmVjdGl2ZSkgbnpUYWJzSW5rQmFyRGlyZWN0aXZlOiBOelRhYnNJbmtCYXJEaXJlY3RpdmU7XG4gIEBWaWV3Q2hpbGQoJ25hdkNvbnRhaW5lckVsZW1lbnQnKSBuYXZDb250YWluZXJFbGVtZW50OiBFbGVtZW50UmVmO1xuICBAVmlld0NoaWxkKCduYXZMaXN0RWxlbWVudCcpIG5hdkxpc3RFbGVtZW50OiBFbGVtZW50UmVmO1xuICBAT3V0cHV0KCkgbnpPbk5leHRDbGljayA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcbiAgQE91dHB1dCgpIG56T25QcmV2Q2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG4gIEBJbnB1dCgpIG56VGFiQmFyRXh0cmFDb250ZW50OiBUZW1wbGF0ZVJlZjx2b2lkPjtcblxuICBASW5wdXQoKVxuICBzZXQgbnpBbmltYXRlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2FuaW1hdGVkID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuekFuaW1hdGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9hbmltYXRlZDtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekhpZGVCYXIodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9oaWRlQmFyID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuekhpZGVCYXIoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2hpZGVCYXI7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpUeXBlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl90eXBlID0gdmFsdWU7XG4gICAgaWYgKHRoaXMuX3R5cGUgIT09ICdsaW5lJykge1xuICAgICAgdGhpcy5uelRhYnNJbmtCYXJEaXJlY3RpdmUuc2V0RGlzcGxheSgnbm9uZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm56VGFic0lua0JhckRpcmVjdGl2ZS5zZXREaXNwbGF5KCdibG9jaycpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBuelR5cGUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fdHlwZTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuelNob3dQYWdpbmF0aW9uKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fc2hvd1BhZ2luYXRpb24gPSB0b0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56U2hvd1BhZ2luYXRpb24oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3Nob3dQYWdpbmF0aW9uO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56UG9zaXRpb25Nb2RlKHZhbHVlOiBOelRhYlBvc2l0aW9uTW9kZSkge1xuICAgIHRoaXMuX3RhYlBvc2l0aW9uTW9kZSA9IHZhbHVlO1xuICAgIHRoaXMuYWxpZ25JbmtCYXJUb1NlbGVjdGVkVGFiKCk7XG4gICAgaWYgKHRoaXMubnpTaG93UGFnaW5hdGlvbikge1xuICAgICAgdGhpcy51cGRhdGVQYWdpbmF0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IG56UG9zaXRpb25Nb2RlKCk6IE56VGFiUG9zaXRpb25Nb2RlIHtcbiAgICByZXR1cm4gdGhpcy5fdGFiUG9zaXRpb25Nb2RlO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IHNlbGVjdGVkSW5kZXgodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuc2VsZWN0ZWRJbmRleENoYW5nZWQgPSB0aGlzLl9zZWxlY3RlZEluZGV4ICE9PSB2YWx1ZTtcblxuICAgIHRoaXMuX3NlbGVjdGVkSW5kZXggPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBzZWxlY3RlZEluZGV4KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3NlbGVjdGVkSW5kZXg7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICAgICAgICAgICAgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSxcbiAgICAgICAgICAgICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgICAgICAgICAgICBAT3B0aW9uYWwoKSBwcml2YXRlIGRpcjogRGlyZWN0aW9uYWxpdHkpIHtcbiAgfVxuXG4gIG9uQ29udGVudENoYW5nZXMoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubnpTaG93UGFnaW5hdGlvbikge1xuICAgICAgdGhpcy51cGRhdGVQYWdpbmF0aW9uKCk7XG4gICAgfVxuICAgIHRoaXMuYWxpZ25JbmtCYXJUb1NlbGVjdGVkVGFiKCk7XG4gIH1cblxuICBzY3JvbGxIZWFkZXIoc2Nyb2xsRGlyOiBTY3JvbGxEaXJlY3Rpb24pOiB2b2lkIHtcbiAgICBpZiAoc2Nyb2xsRGlyID09PSAnYmVmb3JlJyAmJiAhdGhpcy5kaXNhYmxlU2Nyb2xsQmVmb3JlKSB7XG4gICAgICB0aGlzLm56T25QcmV2Q2xpY2suZW1pdCgpO1xuICAgIH0gZWxzZSBpZiAoc2Nyb2xsRGlyID09PSAnYWZ0ZXInICYmICF0aGlzLmRpc2FibGVTY3JvbGxBZnRlcikge1xuICAgICAgdGhpcy5uek9uTmV4dENsaWNrLmVtaXQoKTtcbiAgICB9XG4gICAgLy8gTW92ZSB0aGUgc2Nyb2xsIGRpc3RhbmNlIG9uZS10aGlyZCB0aGUgbGVuZ3RoIG9mIHRoZSB0YWIgbGlzdCdzIHZpZXdwb3J0LlxuICAgIHRoaXMuc2Nyb2xsRGlzdGFuY2UgKz0gKHNjcm9sbERpciA9PT0gJ2JlZm9yZScgPyAtMSA6IDEpICogdGhpcy52aWV3V2lkdGhIZWlnaHRQaXggLyAzO1xuICB9XG5cbiAgbmdBZnRlckNvbnRlbnRDaGVja2VkKCk6IHZvaWQge1xuXG4gICAgaWYgKHRoaXMudGFiTGFiZWxDb3VudCAhPT0gdGhpcy5saXN0T2ZOelRhYkxhYmVsRGlyZWN0aXZlLmxlbmd0aCkge1xuICAgICAgaWYgKHRoaXMubnpTaG93UGFnaW5hdGlvbikge1xuICAgICAgICB0aGlzLnVwZGF0ZVBhZ2luYXRpb24oKTtcbiAgICAgIH1cbiAgICAgIHRoaXMudGFiTGFiZWxDb3VudCA9IHRoaXMubGlzdE9mTnpUYWJMYWJlbERpcmVjdGl2ZS5sZW5ndGg7XG4gICAgfVxuICAgIGlmICh0aGlzLnNlbGVjdGVkSW5kZXhDaGFuZ2VkKSB7XG4gICAgICB0aGlzLnNjcm9sbFRvTGFiZWwodGhpcy5fc2VsZWN0ZWRJbmRleCk7XG4gICAgICBpZiAodGhpcy5uelNob3dQYWdpbmF0aW9uKSB7XG4gICAgICAgIHRoaXMuY2hlY2tTY3JvbGxpbmdDb250cm9scygpO1xuICAgICAgfVxuICAgICAgdGhpcy5hbGlnbklua0JhclRvU2VsZWN0ZWRUYWIoKTtcbiAgICAgIHRoaXMuc2VsZWN0ZWRJbmRleENoYW5nZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc2Nyb2xsRGlzdGFuY2VDaGFuZ2VkKSB7XG4gICAgICBpZiAodGhpcy5uelNob3dQYWdpbmF0aW9uKSB7XG4gICAgICAgIHRoaXMudXBkYXRlVGFiU2Nyb2xsUG9zaXRpb24oKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2Nyb2xsRGlzdGFuY2VDaGFuZ2VkID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xuICAgIHRoaXMucmVhbGlnbklua0JhciA9IHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIGNvbnN0IGRpckNoYW5nZSA9IHRoaXMuZGlyID8gdGhpcy5kaXIuY2hhbmdlIDogb2JzZXJ2YWJsZU9mKG51bGwpO1xuICAgICAgY29uc3QgcmVzaXplID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgP1xuICAgICAgICBmcm9tRXZlbnQod2luZG93LCAncmVzaXplJykucGlwZShhdWRpdFRpbWUoMTApKSA6XG4gICAgICAgIG9ic2VydmFibGVPZihudWxsKTtcbiAgICAgIHJldHVybiBtZXJnZShkaXJDaGFuZ2UsIHJlc2l6ZSkucGlwZShzdGFydFdpdGgobnVsbCkpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLm56U2hvd1BhZ2luYXRpb24pIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZVBhZ2luYXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFsaWduSW5rQmFyVG9TZWxlY3RlZFRhYigpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICB1cGRhdGVUYWJTY3JvbGxQb3NpdGlvbigpOiB2b2lkIHtcbiAgICBjb25zdCBzY3JvbGxEaXN0YW5jZSA9IHRoaXMuc2Nyb2xsRGlzdGFuY2U7XG4gICAgaWYgKHRoaXMubnpQb3NpdGlvbk1vZGUgPT09ICdob3Jpem9udGFsJykge1xuICAgICAgY29uc3QgdHJhbnNsYXRlWCA9IHRoaXMuZ2V0TGF5b3V0RGlyZWN0aW9uKCkgPT09ICdsdHInID8gLXNjcm9sbERpc3RhbmNlIDogc2Nyb2xsRGlzdGFuY2U7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMubmF2TGlzdEVsZW1lbnQubmF0aXZlRWxlbWVudCwgJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUzZCgke3RyYW5zbGF0ZVh9cHgsIDAsIDApYCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5uYXZMaXN0RWxlbWVudC5uYXRpdmVFbGVtZW50LCAndHJhbnNmb3JtJywgYHRyYW5zbGF0ZTNkKDAsJHstc2Nyb2xsRGlzdGFuY2V9cHgsIDApYCk7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlUGFnaW5hdGlvbigpOiB2b2lkIHtcbiAgICB0aGlzLmNoZWNrUGFnaW5hdGlvbkVuYWJsZWQoKTtcbiAgICB0aGlzLmNoZWNrU2Nyb2xsaW5nQ29udHJvbHMoKTtcbiAgICB0aGlzLnVwZGF0ZVRhYlNjcm9sbFBvc2l0aW9uKCk7XG4gIH1cblxuICBjaGVja1BhZ2luYXRpb25FbmFibGVkKCk6IHZvaWQge1xuICAgIHRoaXMuc2hvd1BhZ2luYXRpb25Db250cm9scyA9XG4gICAgICB0aGlzLnRhYkxpc3RTY3JvbGxXaWR0aEhlaWdodFBpeCA+IHRoaXMuZWxlbWVudFJlZk9mZlNldFdpZHRoSGVpZ2h0O1xuXG4gICAgaWYgKCF0aGlzLnNob3dQYWdpbmF0aW9uQ29udHJvbHMpIHtcbiAgICAgIHRoaXMuc2Nyb2xsRGlzdGFuY2UgPSAwO1xuICAgIH1cbiAgfVxuXG4gIHNjcm9sbFRvTGFiZWwobGFiZWxJbmRleDogbnVtYmVyKTogdm9pZCB7XG4gICAgY29uc3Qgc2VsZWN0ZWRMYWJlbCA9IHRoaXMubGlzdE9mTnpUYWJMYWJlbERpcmVjdGl2ZVxuICAgICAgPyB0aGlzLmxpc3RPZk56VGFiTGFiZWxEaXJlY3RpdmUudG9BcnJheSgpWyBsYWJlbEluZGV4IF1cbiAgICAgIDogbnVsbDtcblxuICAgIGlmIChzZWxlY3RlZExhYmVsKSB7XG4gICAgICAvLyBUaGUgdmlldyBsZW5ndGggaXMgdGhlIHZpc2libGUgd2lkdGggb2YgdGhlIHRhYiBsYWJlbHMuXG5cbiAgICAgIGxldCBsYWJlbEJlZm9yZVBvczogbnVtYmVyO1xuICAgICAgbGV0IGxhYmVsQWZ0ZXJQb3M6IG51bWJlcjtcbiAgICAgIGlmICh0aGlzLm56UG9zaXRpb25Nb2RlID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgaWYgKHRoaXMuZ2V0TGF5b3V0RGlyZWN0aW9uKCkgPT09ICdsdHInKSB7XG4gICAgICAgICAgbGFiZWxCZWZvcmVQb3MgPSBzZWxlY3RlZExhYmVsLmdldE9mZnNldExlZnQoKTtcbiAgICAgICAgICBsYWJlbEFmdGVyUG9zID0gbGFiZWxCZWZvcmVQb3MgKyBzZWxlY3RlZExhYmVsLmdldE9mZnNldFdpZHRoKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGFiZWxBZnRlclBvcyA9IHRoaXMubmF2TGlzdEVsZW1lbnQubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aCAtIHNlbGVjdGVkTGFiZWwuZ2V0T2Zmc2V0TGVmdCgpO1xuICAgICAgICAgIGxhYmVsQmVmb3JlUG9zID0gbGFiZWxBZnRlclBvcyAtIHNlbGVjdGVkTGFiZWwuZ2V0T2Zmc2V0V2lkdGgoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGFiZWxCZWZvcmVQb3MgPSBzZWxlY3RlZExhYmVsLmdldE9mZnNldFRvcCgpO1xuICAgICAgICBsYWJlbEFmdGVyUG9zID0gbGFiZWxCZWZvcmVQb3MgKyBzZWxlY3RlZExhYmVsLmdldE9mZnNldEhlaWdodCgpO1xuICAgICAgfVxuICAgICAgY29uc3QgYmVmb3JlVmlzaWJsZVBvcyA9IHRoaXMuc2Nyb2xsRGlzdGFuY2U7XG4gICAgICBjb25zdCBhZnRlclZpc2libGVQb3MgPSB0aGlzLnNjcm9sbERpc3RhbmNlICsgdGhpcy52aWV3V2lkdGhIZWlnaHRQaXg7XG5cbiAgICAgIGlmIChsYWJlbEJlZm9yZVBvcyA8IGJlZm9yZVZpc2libGVQb3MpIHtcbiAgICAgICAgLy8gU2Nyb2xsIGhlYWRlciB0byBtb3ZlIGxhYmVsIHRvIHRoZSBiZWZvcmUgZGlyZWN0aW9uXG4gICAgICAgIHRoaXMuc2Nyb2xsRGlzdGFuY2UgLT0gYmVmb3JlVmlzaWJsZVBvcyAtIGxhYmVsQmVmb3JlUG9zICsgRVhBR0dFUkFURURfT1ZFUlNDUk9MTDtcbiAgICAgIH0gZWxzZSBpZiAobGFiZWxBZnRlclBvcyA+IGFmdGVyVmlzaWJsZVBvcykge1xuICAgICAgICAvLyBTY3JvbGwgaGVhZGVyIHRvIG1vdmUgbGFiZWwgdG8gdGhlIGFmdGVyIGRpcmVjdGlvblxuICAgICAgICB0aGlzLnNjcm9sbERpc3RhbmNlICs9IGxhYmVsQWZ0ZXJQb3MgLSBhZnRlclZpc2libGVQb3MgKyBFWEFHR0VSQVRFRF9PVkVSU0NST0xMO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNoZWNrU2Nyb2xsaW5nQ29udHJvbHMoKTogdm9pZCB7XG4gICAgLy8gQ2hlY2sgaWYgdGhlIHBhZ2luYXRpb24gYXJyb3dzIHNob3VsZCBiZSBhY3RpdmF0ZWQuXG4gICAgdGhpcy5kaXNhYmxlU2Nyb2xsQmVmb3JlID0gdGhpcy5zY3JvbGxEaXN0YW5jZSA9PT0gMDtcbiAgICB0aGlzLmRpc2FibGVTY3JvbGxBZnRlciA9IHRoaXMuc2Nyb2xsRGlzdGFuY2UgPT09IHRoaXMuZ2V0TWF4U2Nyb2xsRGlzdGFuY2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoYXQgaXMgdGhlIG1heGltdW0gbGVuZ3RoIGluIHBpeGVscyB0aGF0IGNhbiBiZSBzZXQgZm9yIHRoZSBzY3JvbGwgZGlzdGFuY2UuIFRoaXNcbiAgICogaXMgZXF1YWwgdG8gdGhlIGRpZmZlcmVuY2UgaW4gd2lkdGggYmV0d2VlbiB0aGUgdGFiIGxpc3QgY29udGFpbmVyIGFuZCB0YWIgaGVhZGVyIGNvbnRhaW5lci5cbiAgICpcbiAgICogVGhpcyBpcyBhbiBleHBlbnNpdmUgY2FsbCB0aGF0IGZvcmNlcyBhIGxheW91dCByZWZsb3cgdG8gY29tcHV0ZSBib3ggYW5kIHNjcm9sbCBtZXRyaWNzIGFuZFxuICAgKiBzaG91bGQgYmUgY2FsbGVkIHNwYXJpbmdseS5cbiAgICovXG4gIGdldE1heFNjcm9sbERpc3RhbmNlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuICh0aGlzLnRhYkxpc3RTY3JvbGxXaWR0aEhlaWdodFBpeCAtIHRoaXMudmlld1dpZHRoSGVpZ2h0UGl4KSB8fCAwO1xuICB9XG5cbiAgLyoqIFNldHMgdGhlIGRpc3RhbmNlIGluIHBpeGVscyB0aGF0IHRoZSB0YWIgaGVhZGVyIHNob3VsZCBiZSB0cmFuc2Zvcm1lZCBpbiB0aGUgWC1heGlzLiAqL1xuICBzZXQgc2Nyb2xsRGlzdGFuY2UodjogbnVtYmVyKSB7XG4gICAgdGhpcy5fc2Nyb2xsRGlzdGFuY2UgPSBNYXRoLm1heCgwLCBNYXRoLm1pbih0aGlzLmdldE1heFNjcm9sbERpc3RhbmNlKCksIHYpKTtcblxuICAgIC8vIE1hcmsgdGhhdCB0aGUgc2Nyb2xsIGRpc3RhbmNlIGhhcyBjaGFuZ2VkIHNvIHRoYXQgYWZ0ZXIgdGhlIHZpZXcgaXMgY2hlY2tlZCwgdGhlIENTU1xuICAgIC8vIHRyYW5zZm9ybWF0aW9uIGNhbiBtb3ZlIHRoZSBoZWFkZXIuXG4gICAgdGhpcy5zY3JvbGxEaXN0YW5jZUNoYW5nZWQgPSB0cnVlO1xuXG4gICAgdGhpcy5jaGVja1Njcm9sbGluZ0NvbnRyb2xzKCk7XG4gIH1cblxuICBnZXQgc2Nyb2xsRGlzdGFuY2UoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fc2Nyb2xsRGlzdGFuY2U7XG4gIH1cblxuICBnZXQgdmlld1dpZHRoSGVpZ2h0UGl4KCk6IG51bWJlciB7XG4gICAgbGV0IFBBR0lOQVRJT05fUElYID0gMDtcbiAgICBpZiAodGhpcy5zaG93UGFnaW5hdGlvbkNvbnRyb2xzKSB7XG4gICAgICBQQUdJTkFUSU9OX1BJWCA9IDY0O1xuICAgIH1cbiAgICBpZiAodGhpcy5uelBvc2l0aW9uTW9kZSA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICByZXR1cm4gdGhpcy5uYXZDb250YWluZXJFbGVtZW50Lm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGggLSBQQUdJTkFUSU9OX1BJWDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMubmF2Q29udGFpbmVyRWxlbWVudC5uYXRpdmVFbGVtZW50Lm9mZnNldEhlaWdodCAtIFBBR0lOQVRJT05fUElYO1xuICAgIH1cbiAgfVxuXG4gIGdldCB0YWJMaXN0U2Nyb2xsV2lkdGhIZWlnaHRQaXgoKTogbnVtYmVyIHtcbiAgICBpZiAodGhpcy5uelBvc2l0aW9uTW9kZSA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICByZXR1cm4gdGhpcy5uYXZMaXN0RWxlbWVudC5uYXRpdmVFbGVtZW50LnNjcm9sbFdpZHRoO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5uYXZMaXN0RWxlbWVudC5uYXRpdmVFbGVtZW50LnNjcm9sbEhlaWdodDtcbiAgICB9XG4gIH1cblxuICBnZXQgZWxlbWVudFJlZk9mZlNldFdpZHRoSGVpZ2h0KCk6IG51bWJlciB7XG4gICAgaWYgKHRoaXMubnpQb3NpdGlvbk1vZGUgPT09ICdob3Jpem9udGFsJykge1xuICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuICAgIH1cbiAgfVxuXG4gIGdldExheW91dERpcmVjdGlvbigpOiBEaXJlY3Rpb24ge1xuICAgIHJldHVybiB0aGlzLmRpciAmJiB0aGlzLmRpci52YWx1ZSA9PT0gJ3J0bCcgPyAncnRsJyA6ICdsdHInO1xuICB9XG5cbiAgYWxpZ25JbmtCYXJUb1NlbGVjdGVkVGFiKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLm56VHlwZSA9PT0gJ2xpbmUnKSB7XG4gICAgICBjb25zdCBzZWxlY3RlZExhYmVsV3JhcHBlciA9IHRoaXMubGlzdE9mTnpUYWJMYWJlbERpcmVjdGl2ZSAmJiB0aGlzLmxpc3RPZk56VGFiTGFiZWxEaXJlY3RpdmUubGVuZ3RoXG4gICAgICAgID8gdGhpcy5saXN0T2ZOelRhYkxhYmVsRGlyZWN0aXZlLnRvQXJyYXkoKVsgdGhpcy5zZWxlY3RlZEluZGV4IF0uZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50XG4gICAgICAgIDogbnVsbDtcbiAgICAgIGlmICh0aGlzLm56VGFic0lua0JhckRpcmVjdGl2ZSkge1xuICAgICAgICB0aGlzLm56VGFic0lua0JhckRpcmVjdGl2ZS5hbGlnblRvRWxlbWVudChzZWxlY3RlZExhYmVsV3JhcHBlcik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCIvKiogZ2V0IHNvbWUgY29kZSBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL21hdGVyaWFsMiAqL1xuXG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge1xuICBBZnRlckNvbnRlbnRDaGVja2VkLFxuICBBZnRlclZpZXdJbml0LFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5qZWN0LFxuICBJbnB1dCxcbiAgT25Jbml0LFxuICBPcHRpb25hbCxcbiAgT3V0cHV0LFxuICBSZW5kZXJlcjIsXG4gIFRlbXBsYXRlUmVmLFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IE56VXBkYXRlSG9zdENsYXNzU2VydmljZSB9IGZyb20gJy4uL2NvcmUvc2VydmljZXMvdXBkYXRlLWhvc3QtY2xhc3Muc2VydmljZSc7XG5pbXBvcnQgeyBpc05vdE5pbCB9IGZyb20gJy4uL2NvcmUvdXRpbC9jaGVjayc7XG5pbXBvcnQgeyB0b051bWJlciB9IGZyb20gJy4uL2NvcmUvdXRpbC9jb252ZXJ0JztcblxuaW1wb3J0IHsgTnpUYWJDb21wb25lbnQgfSBmcm9tICcuL256LXRhYi5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpUYWJzTmF2Q29tcG9uZW50IH0gZnJvbSAnLi9uei10YWJzLW5hdi5jb21wb25lbnQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE56QW5pbWF0ZWRJbnRlcmZhY2Uge1xuICBpbmtCYXI6IGJvb2xlYW47XG4gIHRhYlBhbmU6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjbGFzcyBOelRhYkNoYW5nZUV2ZW50IHtcbiAgaW5kZXg6IG51bWJlcjtcbiAgdGFiOiBOelRhYkNvbXBvbmVudDtcbn1cblxuZXhwb3J0IHR5cGUgTnpUYWJQb3NpdGlvbiA9ICd0b3AnIHwgJ2JvdHRvbScgfCAnbGVmdCcgfCAncmlnaHQnO1xuZXhwb3J0IHR5cGUgTnpUYWJQb3NpdGlvbk1vZGUgPSAnaG9yaXpvbnRhbCcgfCAndmVydGljYWwnO1xuZXhwb3J0IHR5cGUgTnpUYWJUeXBlID0gJ2xpbmUnIHwgJ2NhcmQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICAgICAgICAgIDogJ256LXRhYnNldCcsXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxuICBwcm92aWRlcnMgICAgICAgICAgOiBbIE56VXBkYXRlSG9zdENsYXNzU2VydmljZSBdLFxuICB0ZW1wbGF0ZVVybCAgICAgICAgOiAnLi9uei10YWJzZXQuY29tcG9uZW50Lmh0bWwnLFxuICBob3N0ICAgICAgICAgICAgICAgOiB7XG4gICAgJyhzY3JvbGwpJzogJ29uU2Nyb2xsKCRldmVudCknXG4gIH0sXG4gIHN0eWxlcyAgICAgICAgICAgICA6IFsgYFxuICAgIDpob3N0IHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIH1cbiAgYCBdXG59KVxuZXhwb3J0IGNsYXNzIE56VGFiU2V0Q29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50Q2hlY2tlZCwgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcbiAgcHJpdmF0ZSBfdGFiUG9zaXRpb246IE56VGFiUG9zaXRpb24gPSAndG9wJztcbiAgcHJpdmF0ZSBfaW5kZXhUb1NlbGVjdDogbnVtYmVyIHwgbnVsbCA9IDA7XG4gIHByaXZhdGUgX3NlbGVjdGVkSW5kZXg6IG51bWJlciB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIF90eXBlOiBOelRhYlR5cGUgPSAnbGluZSc7XG4gIHByaXZhdGUgX3NpemUgPSAnZGVmYXVsdCc7XG4gIHByaXZhdGUgX2FuaW1hdGVkOiBOekFuaW1hdGVkSW50ZXJmYWNlIHwgYm9vbGVhbiA9IHRydWU7XG4gIGVsOiBIVE1MRWxlbWVudCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICBwcmVmaXhDbHMgPSAnYW50LXRhYnMnO1xuICB0YWJQb3NpdGlvbk1vZGU6IE56VGFiUG9zaXRpb25Nb2RlID0gJ2hvcml6b250YWwnO1xuICBpbmtCYXJBbmltYXRlZCA9IHRydWU7XG4gIHRhYlBhbmVBbmltYXRlZCA9IHRydWU7XG4gIGlzVmlld0luaXQgPSBmYWxzZTtcbiAgbGlzdE9mTnpUYWJDb21wb25lbnQ6IE56VGFiQ29tcG9uZW50W10gPSBbXTtcbiAgQElucHV0KCkgbnpUYWJCYXJFeHRyYUNvbnRlbnQ6IFRlbXBsYXRlUmVmPHZvaWQ+O1xuICBAVmlld0NoaWxkKE56VGFic05hdkNvbXBvbmVudCkgbnpUYWJzTmF2Q29tcG9uZW50OiBOelRhYnNOYXZDb21wb25lbnQ7XG4gIEBWaWV3Q2hpbGQoJ3RhYkNvbnRlbnQnKSB0YWJDb250ZW50OiBFbGVtZW50UmVmO1xuICBASW5wdXQoKSBuelNob3dQYWdpbmF0aW9uID0gdHJ1ZTtcbiAgQElucHV0KCkgbnpIaWRlQWxsID0gZmFsc2U7XG4gIEBJbnB1dCgpIG56VGFiQmFyR3V0dGVyOiBudW1iZXI7XG4gIEBJbnB1dCgpIG56VGFiQmFyU3R5bGU6IHsgWyBrZXk6IHN0cmluZyBdOiBzdHJpbmcgfTtcbiAgQE91dHB1dCgpIG56T25OZXh0Q2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG4gIEBPdXRwdXQoKSBuek9uUHJldkNsaWNrID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuXG4gIEBJbnB1dCgpXG4gIHNldCBuekFuaW1hdGVkKHZhbHVlOiBOekFuaW1hdGVkSW50ZXJmYWNlIHwgYm9vbGVhbikge1xuICAgIHRoaXMuX2FuaW1hdGVkID0gdmFsdWU7XG4gICAgdGhpcy5zZXRDbGFzc01hcCgpO1xuICAgIHRoaXMuaW5rQmFyQW5pbWF0ZWQgPSAodGhpcy5uekFuaW1hdGVkID09PSB0cnVlKSB8fCAoKHRoaXMubnpBbmltYXRlZCBhcyBOekFuaW1hdGVkSW50ZXJmYWNlKS5pbmtCYXIgPT09IHRydWUpO1xuICAgIHRoaXMudGFiUGFuZUFuaW1hdGVkID0gKHRoaXMubnpBbmltYXRlZCA9PT0gdHJ1ZSkgfHwgKCh0aGlzLm56QW5pbWF0ZWQgYXMgTnpBbmltYXRlZEludGVyZmFjZSkudGFiUGFuZSA9PT0gdHJ1ZSk7XG4gIH1cblxuICBnZXQgbnpBbmltYXRlZCgpOiBOekFuaW1hdGVkSW50ZXJmYWNlIHwgYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2FuaW1hdGVkO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56U2VsZWN0ZWRJbmRleCh2YWx1ZTogbnVtYmVyIHwgbnVsbCkge1xuICAgIHRoaXMuX2luZGV4VG9TZWxlY3QgPSB0b051bWJlcih2YWx1ZSwgbnVsbCk7XG4gIH1cblxuICBnZXQgbnpTZWxlY3RlZEluZGV4KCk6IG51bWJlciB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLl9zZWxlY3RlZEluZGV4O1xuICB9XG5cbiAgQE91dHB1dCgpXG4gIGdldCBuelNlbGVjdGVkSW5kZXhDaGFuZ2UoKTogT2JzZXJ2YWJsZTxudW1iZXI+IHtcbiAgICByZXR1cm4gdGhpcy5uelNlbGVjdENoYW5nZS5waXBlKG1hcChldmVudCA9PiBldmVudC5pbmRleCkpO1xuICB9XG5cbiAgQE91dHB1dCgpIG56U2VsZWN0Q2hhbmdlOiBFdmVudEVtaXR0ZXI8TnpUYWJDaGFuZ2VFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyPE56VGFiQ2hhbmdlRXZlbnQ+KHRydWUpO1xuXG4gIEBJbnB1dCgpIHNldCBuelNpemUodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX3NpemUgPSB2YWx1ZTtcbiAgICB0aGlzLnNldENsYXNzTWFwKCk7XG4gIH1cblxuICBnZXQgbnpTaXplKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3NpemU7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpUYWJQb3NpdGlvbih2YWx1ZTogTnpUYWJQb3NpdGlvbikge1xuICAgIGlmICh0aGlzLl90YWJQb3NpdGlvbiA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fdGFiUG9zaXRpb24gPSB2YWx1ZTtcbiAgICBpZiAoKHRoaXMuX3RhYlBvc2l0aW9uID09PSAndG9wJykgfHwgKHRoaXMuX3RhYlBvc2l0aW9uID09PSAnYm90dG9tJykpIHtcbiAgICAgIHRoaXMudGFiUG9zaXRpb25Nb2RlID0gJ2hvcml6b250YWwnO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnRhYlBvc2l0aW9uTW9kZSA9ICd2ZXJ0aWNhbCc7XG4gICAgfVxuICAgIHRoaXMuc2V0UG9zaXRpb24odmFsdWUpO1xuICAgIHRoaXMuc2V0Q2xhc3NNYXAoKTtcbiAgfVxuXG4gIGdldCBuelRhYlBvc2l0aW9uKCk6IE56VGFiUG9zaXRpb24ge1xuICAgIHJldHVybiB0aGlzLl90YWJQb3NpdGlvbjtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuelR5cGUodmFsdWU6IE56VGFiVHlwZSkge1xuICAgIGlmICh0aGlzLl90eXBlID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl90eXBlID0gdmFsdWU7XG4gICAgaWYgKHRoaXMuX3R5cGUgPT09ICdjYXJkJykge1xuICAgICAgdGhpcy5uekFuaW1hdGVkID0gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuc2V0Q2xhc3NNYXAoKTtcbiAgfVxuXG4gIGdldCBuelR5cGUoKTogTnpUYWJUeXBlIHtcbiAgICByZXR1cm4gdGhpcy5fdHlwZTtcbiAgfVxuXG4gIHNldFBvc2l0aW9uKHZhbHVlOiBOelRhYlBvc2l0aW9uKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNWaWV3SW5pdCkge1xuICAgICAgaWYgKHZhbHVlID09PSAnYm90dG9tJykge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLmluc2VydEJlZm9yZSh0aGlzLmVsLCB0aGlzLnRhYkNvbnRlbnQubmF0aXZlRWxlbWVudCwgdGhpcy5uelRhYnNOYXZDb21wb25lbnQuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuaW5zZXJ0QmVmb3JlKHRoaXMuZWwsIHRoaXMubnpUYWJzTmF2Q29tcG9uZW50LmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgdGhpcy50YWJDb250ZW50Lm5hdGl2ZUVsZW1lbnQpO1xuICAgICAgfVxuICAgIH1cblxuICB9XG5cbiAgc2V0Q2xhc3NNYXAoKTogdm9pZCB7XG4gICAgY29uc3QgY2xhc3NNYXAgPSB7XG4gICAgICBbIHRoaXMucHJlZml4Q2xzIF0gICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRydWUsXG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xzfS12ZXJ0aWNhbGAgXSAgICAgICAgICAgICA6ICh0aGlzLm56VGFiUG9zaXRpb24gPT09ICdsZWZ0JykgfHwgKHRoaXMubnpUYWJQb3NpdGlvbiA9PT0gJ3JpZ2h0JyksXG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xzfS0ke3RoaXMubnpUYWJQb3NpdGlvbn1gIF06IHRoaXMubnpUYWJQb3NpdGlvbixcbiAgICAgIFsgYCR7dGhpcy5wcmVmaXhDbHN9LW5vLWFuaW1hdGlvbmAgXSAgICAgICAgIDogKHRoaXMubnpBbmltYXRlZCA9PT0gZmFsc2UpIHx8ICgodGhpcy5uekFuaW1hdGVkIGFzIE56QW5pbWF0ZWRJbnRlcmZhY2UpLnRhYlBhbmUgPT09IGZhbHNlKSxcbiAgICAgIFsgYCR7dGhpcy5wcmVmaXhDbHN9LSR7dGhpcy5uelR5cGV9YCBdICAgICAgIDogdGhpcy5uelR5cGUsXG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xzfS1sYXJnZWAgXSAgICAgICAgICAgICAgICA6IHRoaXMubnpTaXplID09PSAnbGFyZ2UnLFxuICAgICAgWyBgJHt0aGlzLnByZWZpeENsc30tc21hbGxgIF0gICAgICAgICAgICAgICAgOiB0aGlzLm56U2l6ZSA9PT0gJ3NtYWxsJ1xuICAgIH07XG4gICAgdGhpcy5uelVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UudXBkYXRlSG9zdENsYXNzKHRoaXMuZWwsIGNsYXNzTWFwKTtcbiAgfVxuXG4gIGNsaWNrTGFiZWwoaW5kZXg6IG51bWJlciwgZGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBpZiAoIWRpc2FibGVkKSB7XG4gICAgICB0aGlzLm56U2VsZWN0ZWRJbmRleCA9IGluZGV4O1xuICAgICAgdGhpcy5saXN0T2ZOelRhYkNvbXBvbmVudFsgaW5kZXggXS5uekNsaWNrLmVtaXQoKTtcbiAgICB9XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnNldENsYXNzTWFwKCk7XG4gIH1cblxuICBuZ0FmdGVyQ29udGVudENoZWNrZWQoKTogdm9pZCB7XG4gICAgLy8gQ2xhbXAgdGhlIG5leHQgc2VsZWN0ZWQgaW5kZXggdG8gdGhlIGJvdW5kcyBvZiAwIGFuZCB0aGUgdGFicyBsZW5ndGguIE5vdGUgdGhlIGB8fCAwYCwgd2hpY2hcbiAgICAvLyBlbnN1cmVzIHRoYXQgdmFsdWVzIGxpa2UgTmFOIGNhbid0IGdldCB0aHJvdWdoIGFuZCB3aGljaCB3b3VsZCBvdGhlcndpc2UgdGhyb3cgdGhlXG4gICAgLy8gY29tcG9uZW50IGludG8gYW4gaW5maW5pdGUgbG9vcCAoc2luY2UgTWF0aC5tYXgoTmFOLCAwKSA9PT0gTmFOKS5cbiAgICBjb25zdCBpbmRleFRvU2VsZWN0ID0gdGhpcy5faW5kZXhUb1NlbGVjdCA9XG4gICAgICBNYXRoLm1pbih0aGlzLmxpc3RPZk56VGFiQ29tcG9uZW50Lmxlbmd0aCAtIDEsIE1hdGgubWF4KHRoaXMuX2luZGV4VG9TZWxlY3QgfHwgMCwgMCkpO1xuXG4gICAgLy8gSWYgdGhlcmUgaXMgYSBjaGFuZ2UgaW4gc2VsZWN0ZWQgaW5kZXgsIGVtaXQgYSBjaGFuZ2UgZXZlbnQuIFNob3VsZCBub3QgdHJpZ2dlciBpZlxuICAgIC8vIHRoZSBzZWxlY3RlZCBpbmRleCBoYXMgbm90IHlldCBiZWVuIGluaXRpYWxpemVkLlxuICAgIGlmICh0aGlzLl9zZWxlY3RlZEluZGV4ICE9PSBpbmRleFRvU2VsZWN0ICYmIGlzTm90TmlsKHRoaXMuX3NlbGVjdGVkSW5kZXgpKSB7XG4gICAgICB0aGlzLm56U2VsZWN0Q2hhbmdlLmVtaXQodGhpcy5jcmVhdGVDaGFuZ2VFdmVudChpbmRleFRvU2VsZWN0KSk7XG4gICAgfVxuXG4gICAgLy8gU2V0dXAgdGhlIHBvc2l0aW9uIGZvciBlYWNoIHRhYiBhbmQgb3B0aW9uYWxseSBzZXR1cCBhbiBvcmlnaW4gb24gdGhlIG5leHQgc2VsZWN0ZWQgdGFiLlxuICAgIHRoaXMubGlzdE9mTnpUYWJDb21wb25lbnQuZm9yRWFjaCgodGFiOiBOelRhYkNvbXBvbmVudCwgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgdGFiLnBvc2l0aW9uID0gaW5kZXggLSBpbmRleFRvU2VsZWN0O1xuICAgICAgLy8gSWYgdGhlcmUgaXMgYWxyZWFkeSBhIHNlbGVjdGVkIHRhYiwgdGhlbiBzZXQgdXAgYW4gb3JpZ2luIGZvciB0aGUgbmV4dCBzZWxlY3RlZCB0YWJcbiAgICAgIC8vIGlmIGl0IGRvZXNuJ3QgaGF2ZSBvbmUgYWxyZWFkeS5cbiAgICAgIGlmIChpc05vdE5pbCh0aGlzLl9zZWxlY3RlZEluZGV4KSAmJiB0YWIucG9zaXRpb24gPT09IDAgJiYgIXRhYi5vcmlnaW4pIHtcbiAgICAgICAgdGFiLm9yaWdpbiA9IGluZGV4VG9TZWxlY3QgLSB0aGlzLl9zZWxlY3RlZEluZGV4O1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuX3NlbGVjdGVkSW5kZXggPSBpbmRleFRvU2VsZWN0O1xuICB9XG5cbiAgY3JlYXRlQ2hhbmdlRXZlbnQoaW5kZXg6IG51bWJlcik6IE56VGFiQ2hhbmdlRXZlbnQge1xuICAgIGNvbnN0IGV2ZW50ID0gbmV3IE56VGFiQ2hhbmdlRXZlbnQoKTtcbiAgICBldmVudC5pbmRleCA9IGluZGV4O1xuICAgIGlmICh0aGlzLmxpc3RPZk56VGFiQ29tcG9uZW50ICYmIHRoaXMubGlzdE9mTnpUYWJDb21wb25lbnQubGVuZ3RoKSB7XG4gICAgICBldmVudC50YWIgPSB0aGlzLmxpc3RPZk56VGFiQ29tcG9uZW50WyBpbmRleCBdO1xuICAgICAgdGhpcy5saXN0T2ZOelRhYkNvbXBvbmVudC5mb3JFYWNoKChpdGVtLCBpKSA9PiB7XG4gICAgICAgIGlmIChpICE9PSBpbmRleCkge1xuICAgICAgICAgIGl0ZW0ubnpEZXNlbGVjdC5lbWl0KCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgZXZlbnQudGFiLm56U2VsZWN0LmVtaXQoKTtcbiAgICB9XG4gICAgcmV0dXJuIGV2ZW50O1xuICB9XG5cbiAgYWRkVGFiKHZhbHVlOiBOelRhYkNvbXBvbmVudCk6IHZvaWQge1xuICAgIHRoaXMubGlzdE9mTnpUYWJDb21wb25lbnQucHVzaCh2YWx1ZSk7XG4gIH1cblxuICByZW1vdmVUYWIodmFsdWU6IE56VGFiQ29tcG9uZW50KTogdm9pZCB7XG4gICAgdGhpcy5saXN0T2ZOelRhYkNvbXBvbmVudC5zcGxpY2UodGhpcy5saXN0T2ZOelRhYkNvbXBvbmVudC5pbmRleE9mKHZhbHVlKSwgMSk7XG4gIH1cblxuICAvLyBGcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1jb21wb25lbnQvdGFicy9ibG9iL21hc3Rlci9zcmMvVGFicy5qc1xuICAvLyBQcmV2ZW50IGZvY3VzIHRvIG1ha2UgdGhlIFRhYnMgc2Nyb2xsIG9mZnNldFxuICBvblNjcm9sbCgkZXZlbnQ6IEV2ZW50KTogdm9pZCB7XG4gICAgY29uc3QgdGFyZ2V0OiBFbGVtZW50ID0gJGV2ZW50LnRhcmdldCBhcyBFbGVtZW50O1xuICAgIGlmICh0YXJnZXQuc2Nyb2xsTGVmdCA+IDApIHtcbiAgICAgIHRhcmdldC5zY3JvbGxMZWZ0ID0gMDtcbiAgICAgIGlmICh0aGlzLmRvY3VtZW50ICYmIHRoaXMuZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkge1xuICAgICAgICAodGhpcy5kb2N1bWVudC5hY3RpdmVFbGVtZW50IGFzIEhUTUxFbGVtZW50KS5ibHVyKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgbnpVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlOiBOelVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UsIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgQE9wdGlvbmFsKCkgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudDogYW55KSB7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgdGhpcy5pc1ZpZXdJbml0ID0gdHJ1ZTtcbiAgICB0aGlzLnNldFBvc2l0aW9uKHRoaXMubnpUYWJQb3NpdGlvbik7XG4gIH1cblxufVxuIiwiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgT3V0cHV0LFxuICBUZW1wbGF0ZVJlZixcbiAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyB0b0Jvb2xlYW4gfSBmcm9tICcuLi9jb3JlL3V0aWwvY29udmVydCc7XG5cbmltcG9ydCB7IE56VGFiU2V0Q29tcG9uZW50IH0gZnJvbSAnLi9uei10YWJzZXQuY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yICAgICAgICAgICA6ICduei10YWInLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgdGVtcGxhdGVVcmwgICAgICAgIDogJy4vbnotdGFiLmNvbXBvbmVudC5odG1sJyxcbiAgaG9zdCAgICAgICAgICAgICAgIDoge1xuICAgICdbY2xhc3MuYW50LXRhYnMtdGFicGFuZV0nOiAndHJ1ZSdcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBOelRhYkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSwgT25Jbml0IHtcbiAgcHJpdmF0ZSBfdGl0bGU6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+O1xuICBwcml2YXRlIF9kaXNhYmxlZCA9IGZhbHNlO1xuICBwb3NpdGlvbjogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG4gIG9yaWdpbjogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG4gIGlzVGl0bGVTdHJpbmc6IGJvb2xlYW47XG5cbiAgQElucHV0KClcbiAgc2V0IG56RGlzYWJsZWQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9kaXNhYmxlZCA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBnZXQgbnpEaXNhYmxlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fZGlzYWJsZWQ7XG4gIH1cblxuICBAT3V0cHV0KCkgbnpDbGljayA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcbiAgQE91dHB1dCgpIG56U2VsZWN0ID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuICBAT3V0cHV0KCkgbnpEZXNlbGVjdCA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcbiAgQFZpZXdDaGlsZChUZW1wbGF0ZVJlZikgY29udGVudDogVGVtcGxhdGVSZWY8dm9pZD47XG5cbiAgQElucHV0KClcbiAgc2V0IG56VGl0bGUodmFsdWU6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+KSB7XG4gICAgdGhpcy5pc1RpdGxlU3RyaW5nID0gISh2YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmKTtcbiAgICB0aGlzLl90aXRsZSA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IG56VGl0bGUoKTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLl90aXRsZTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbnpUYWJTZXRDb21wb25lbnQ6IE56VGFiU2V0Q29tcG9uZW50KSB7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLm56VGFiU2V0Q29tcG9uZW50LmFkZFRhYih0aGlzKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMubnpUYWJTZXRDb21wb25lbnQucmVtb3ZlVGFiKHRoaXMpO1xuICB9XG5cbn1cbiIsImltcG9ydCB7IE9ic2VydmVyc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vYnNlcnZlcnMnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOekljb25Nb2R1bGUgfSBmcm9tICcuLi9pY29uL256LWljb24ubW9kdWxlJztcblxuaW1wb3J0IHsgTnpUYWJCb2R5Q29tcG9uZW50IH0gZnJvbSAnLi9uei10YWItYm9keS5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpUYWJMYWJlbERpcmVjdGl2ZSB9IGZyb20gJy4vbnotdGFiLWxhYmVsLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBOelRhYkNvbXBvbmVudCB9IGZyb20gJy4vbnotdGFiLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOelRhYnNJbmtCYXJEaXJlY3RpdmUgfSBmcm9tICcuL256LXRhYnMtaW5rLWJhci5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgTnpUYWJzTmF2Q29tcG9uZW50IH0gZnJvbSAnLi9uei10YWJzLW5hdi5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpUYWJTZXRDb21wb25lbnQgfSBmcm9tICcuL256LXRhYnNldC5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFsgTnpUYWJDb21wb25lbnQsIE56VGFiU2V0Q29tcG9uZW50LCBOelRhYnNOYXZDb21wb25lbnQsIE56VGFiTGFiZWxEaXJlY3RpdmUsIE56VGFic0lua0JhckRpcmVjdGl2ZSwgTnpUYWJCb2R5Q29tcG9uZW50IF0sXG4gIGV4cG9ydHMgICAgIDogWyBOelRhYkNvbXBvbmVudCwgTnpUYWJTZXRDb21wb25lbnQsIE56VGFic05hdkNvbXBvbmVudCwgTnpUYWJMYWJlbERpcmVjdGl2ZSwgTnpUYWJzSW5rQmFyRGlyZWN0aXZlLCBOelRhYkJvZHlDb21wb25lbnQgXSxcbiAgaW1wb3J0cyAgICAgOiBbIENvbW1vbk1vZHVsZSwgT2JzZXJ2ZXJzTW9kdWxlLCBOekljb25Nb2R1bGUgXVxufSlcbmV4cG9ydCBjbGFzcyBOelRhYnNNb2R1bGUge1xufVxuIiwiaW1wb3J0IHtcbiAgYW5pbWF0ZSxcbiAgc3RhdGUsXG4gIHN0eWxlLFxuICB0cmFuc2l0aW9uLFxuICB0cmlnZ2VyLFxuICBBbmltYXRpb25FdmVudFxufSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmltcG9ydCB7XG4gIEFmdGVyVmlld0luaXQsXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT25Jbml0LFxuICBPdXRwdXQsXG4gIFJlbmRlcmVyMixcbiAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgdHlwZSBUYWdUeXBlID0gJ2RlZmF1bHQnIHwgJ2Nsb3NlYWJsZScgfCAnY2hlY2thYmxlJztcbmltcG9ydCB7IHRvQm9vbGVhbiB9IGZyb20gJy4uL2NvcmUvdXRpbC9jb252ZXJ0JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yICAgICAgICAgICA6ICduei10YWcnLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgYW5pbWF0aW9ucyAgICAgICAgIDogWyB0cmlnZ2VyKCd0YWdBbmltYXRpb24nLCBbXG4gICAgc3RhdGUoJyonLCBzdHlsZSh7IG9wYWNpdHk6IDEgfSkpLFxuICAgIHRyYW5zaXRpb24oJ3ZvaWQgPT4gKicsIFtcbiAgICAgIHN0eWxlKHsgb3BhY2l0eTogMCB9KSxcbiAgICAgIGFuaW1hdGUoJzMwMG1zIGN1YmljLWJlemllcigwLjc4LCAwLjE0LCAwLjE1LCAwLjg2KScpXG4gICAgXSksXG4gICAgc3RhdGUoJ3ZvaWQnLCBzdHlsZSh7IG9wYWNpdHk6IDAgfSkpLFxuICAgIHRyYW5zaXRpb24oJyogPT4gdm9pZCcsIFtcbiAgICAgIHN0eWxlKHsgb3BhY2l0eTogMSB9KSxcbiAgICAgIGFuaW1hdGUoJzMwMG1zIGN1YmljLWJlemllcigwLjc4LCAwLjE0LCAwLjE1LCAwLjg2KScpXG4gICAgXSlcbiAgXSkgXSxcbiAgdGVtcGxhdGVVcmwgICAgICAgIDogJy4vbnotdGFnLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBOelRhZ0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XG4gIHByaXZhdGUgX2NvbG9yOiBzdHJpbmc7XG4gIHByaXZhdGUgX2NoZWNrZWQgPSBmYWxzZTtcbiAgcHJpdmF0ZSBpc1ByZXNldDogYm9vbGVhbjtcbiAgcHJpdmF0ZSBfbW9kZTogVGFnVHlwZSA9ICdkZWZhdWx0JztcbiAgY2xhc3NNYXA7XG4gIGNsb3NlZCA9IGZhbHNlO1xuICBAVmlld0NoaWxkKCd3cmFwcGVyRWxlbWVudCcpIHdyYXBwZXJFbGVtZW50OiBFbGVtZW50UmVmO1xuICBAT3V0cHV0KCkgbnpBZnRlckNsb3NlID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuICBAT3V0cHV0KCkgbnpPbkNsb3NlID0gbmV3IEV2ZW50RW1pdHRlcjxNb3VzZUV2ZW50PigpO1xuICBAT3V0cHV0KCkgbnpDaGVja2VkQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXG4gIEBJbnB1dCgpXG4gIHNldCBuek1vZGUodmFsdWU6IFRhZ1R5cGUpIHtcbiAgICB0aGlzLl9tb2RlID0gdmFsdWU7XG4gICAgdGhpcy51cGRhdGVDbGFzc01hcCgpO1xuICB9XG5cbiAgZ2V0IG56TW9kZSgpOiBUYWdUeXBlIHtcbiAgICByZXR1cm4gdGhpcy5fbW9kZTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekNvbG9yKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9jb2xvciA9IHZhbHVlO1xuICAgIHRoaXMuaXNQcmVzZXQgPSB0aGlzLmlzUHJlc2V0Q29sb3IodmFsdWUpO1xuICAgIHRoaXMudXBkYXRlQ2xhc3NNYXAoKTtcbiAgICB0aGlzLnVwZGF0ZUNvbG9yU3RhdHVzKCk7XG4gIH1cblxuICBnZXQgbnpDb2xvcigpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9jb2xvcjtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekNoZWNrZWQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9jaGVja2VkID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgICB0aGlzLnVwZGF0ZUNsYXNzTWFwKCk7XG4gIH1cblxuICBnZXQgbnpDaGVja2VkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9jaGVja2VkO1xuICB9XG5cbiAgaXNQcmVzZXRDb2xvcihjb2xvcj86IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGlmICghY29sb3IpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIC9eKHBpbmt8cmVkfHllbGxvd3xvcmFuZ2V8Y3lhbnxncmVlbnxibHVlfHB1cnBsZXxnZWVrYmx1ZXxtYWdlbnRhfHZvbGNhbm98Z29sZHxsaW1lKSgtaW52ZXJzZSk/JC9cbiAgICAgIC50ZXN0KGNvbG9yKVxuICAgICk7XG4gIH1cblxuICB1cGRhdGVDaGVja2VkU3RhdHVzKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLm56TW9kZSA9PT0gJ2NoZWNrYWJsZScpIHtcbiAgICAgIHRoaXMubnpDaGVja2VkID0gIXRoaXMubnpDaGVja2VkO1xuICAgICAgdGhpcy5uekNoZWNrZWRDaGFuZ2UuZW1pdCh0aGlzLm56Q2hlY2tlZCk7XG4gICAgfVxuICB9XG5cbiAgY2xvc2VUYWcoZTogTW91c2VFdmVudCk6IHZvaWQge1xuICAgIHRoaXMubnpPbkNsb3NlLmVtaXQoZSk7XG4gICAgaWYgKCFlLmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBhZnRlckFuaW1hdGlvbihlOiBBbmltYXRpb25FdmVudCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmNsb3NlZCAmJiAhZS5mcm9tU3RhdGUpIHtcbiAgICAgIHRoaXMubnpBZnRlckNsb3NlLmVtaXQoKTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGVDbGFzc01hcCgpOiB2b2lkIHtcbiAgICBjb25zdCBpc1ByZXNldENvbG9yID0gdGhpcy5pc1ByZXNldENvbG9yKHRoaXMubnpDb2xvcik7XG4gICAgdGhpcy5jbGFzc01hcCA9IHtcbiAgICAgIFsgYGFudC10YWdgIF0gICAgICAgICAgICAgICAgICA6IHRydWUsXG4gICAgICBbIGBhbnQtdGFnLWhhcy1jb2xvcmAgXSAgICAgICAgOiB0aGlzLm56Q29sb3IgJiYgIWlzUHJlc2V0Q29sb3IsXG4gICAgICBbIGBhbnQtdGFnLSR7dGhpcy5uekNvbG9yfWAgXSAgOiBpc1ByZXNldENvbG9yLFxuICAgICAgWyBgYW50LXRhZy1jaGVja2FibGVgIF0gICAgICAgIDogdGhpcy5uek1vZGUgPT09ICdjaGVja2FibGUnLFxuICAgICAgWyBgYW50LXRhZy1jaGVja2FibGUtY2hlY2tlZGAgXTogdGhpcy5uekNoZWNrZWRcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlQ29sb3JTdGF0dXMoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMud3JhcHBlckVsZW1lbnQgJiYgdGhpcy5uekNvbG9yKSB7XG4gICAgICBpZiAodGhpcy5pc1ByZXNldCkge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZVN0eWxlKHRoaXMud3JhcHBlckVsZW1lbnQubmF0aXZlRWxlbWVudCwgJ2JhY2tncm91bmQtY29sb3InKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy53cmFwcGVyRWxlbWVudC5uYXRpdmVFbGVtZW50LCAnYmFja2dyb3VuZC1jb2xvcicsIHRoaXMubnpDb2xvcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7XG5cbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMudXBkYXRlQ2xhc3NNYXAoKTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnVwZGF0ZUNvbG9yU3RhdHVzKCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBOekljb25Nb2R1bGUgfSBmcm9tICcuLi9pY29uL256LWljb24ubW9kdWxlJztcblxuaW1wb3J0IHsgTnpUYWdDb21wb25lbnQgfSBmcm9tICcuL256LXRhZy5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzICAgICA6IFsgQ29tbW9uTW9kdWxlLCBGb3Jtc01vZHVsZSwgTnpJY29uTW9kdWxlIF0sXG4gIGRlY2xhcmF0aW9uczogW1xuICAgIE56VGFnQ29tcG9uZW50XG4gIF0sXG4gIGV4cG9ydHMgICAgIDogW1xuICAgIE56VGFnQ29tcG9uZW50XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgTnpUYWdNb2R1bGUge1xufVxuIiwiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBJbnB1dCxcbiAgT25Jbml0LFxuICBSZW5kZXJlcjIsXG4gIFRlbXBsYXRlUmVmLFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICAgICAgOiAnbnotdGltZWxpbmUtaXRlbScsXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxuICB0ZW1wbGF0ZVVybCAgICAgICAgOiAnLi9uei10aW1lbGluZS1pdGVtLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBOelRpbWVsaW5lSXRlbUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIHByaXZhdGUgX2RvdDogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD47XG4gIHByaXZhdGUgX2NvbG9yOiBzdHJpbmcgPSAnYmx1ZSc7XG4gIHByaXZhdGUgX2lzTGFzdCA9IGZhbHNlO1xuICBAVmlld0NoaWxkKCdsaVRlbXBsYXRlJykgbGlUZW1wbGF0ZTogRWxlbWVudFJlZjtcbiAgaXNEb3RTdHJpbmc6IGJvb2xlYW47XG4gIGNsYXNzTWFwO1xuXG4gIHNldCBpc0xhc3QodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9pc0xhc3QgPSB2YWx1ZTtcbiAgICBpZiAodGhpcy5pc0xhc3QpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5saVRlbXBsYXRlLm5hdGl2ZUVsZW1lbnQsICdhbnQtdGltZWxpbmUtaXRlbS1sYXN0Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5saVRlbXBsYXRlLm5hdGl2ZUVsZW1lbnQsICdhbnQtdGltZWxpbmUtaXRlbS1sYXN0Jyk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGlzTGFzdCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5faXNMYXN0O1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56RG90KHZhbHVlOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPikge1xuICAgIHRoaXMuaXNEb3RTdHJpbmcgPSAhKHZhbHVlIGluc3RhbmNlb2YgVGVtcGxhdGVSZWYpO1xuICAgIHRoaXMuX2RvdCA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IG56RG90KCk6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5fZG90O1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56Q29sb3IoY29sb3I6IHN0cmluZykge1xuICAgIHRoaXMuX2NvbG9yID0gY29sb3I7XG4gICAgdGhpcy51cGRhdGVDbGFzc01hcCgpO1xuICB9XG5cbiAgZ2V0IG56Q29sb3IoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fY29sb3I7XG4gIH1cblxuICB1cGRhdGVDbGFzc01hcCgpOiB2b2lkIHtcbiAgICAvLyBTdXBwb3J0IGN1c3RvbSBjb2xvclxuICAgIGNvbnN0IGRlZmF1bHRDb2xvcnMgPSBbICdibHVlJywgJ3JlZCcsICdncmVlbicgXTtcbiAgICBjb25zdCBjaXJjbGUgPSB0aGlzLmxpVGVtcGxhdGUubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuYW50LXRpbWVsaW5lLWl0ZW0taGVhZCcpO1xuICAgIGlmIChkZWZhdWx0Q29sb3JzLmluZGV4T2YodGhpcy5fY29sb3IpID09PSAtMSkge1xuICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShjaXJjbGUsICdib3JkZXItY29sb3InLCB0aGlzLl9jb2xvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlU3R5bGUoY2lyY2xlLCAnYm9yZGVyLWNvbG9yJyk7XG4gICAgfVxuXG4gICAgdGhpcy5jbGFzc01hcCA9IHtcbiAgICAgIFsgJ2FudC10aW1lbGluZS1pdGVtLWhlYWQtZ3JlZW4nIF06IHRoaXMubnpDb2xvciA9PT0gJ2dyZWVuJyxcbiAgICAgIFsgJ2FudC10aW1lbGluZS1pdGVtLWhlYWQtcmVkJyBdICA6IHRoaXMubnpDb2xvciA9PT0gJ3JlZCcsXG4gICAgICBbICdhbnQtdGltZWxpbmUtaXRlbS1oZWFkLWJsdWUnIF0gOiB0aGlzLm56Q29sb3IgPT09ICdibHVlJ1xuICAgIH07XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMudXBkYXRlQ2xhc3NNYXAoKTtcbiAgfVxuXG59XG4iLCJpbXBvcnQge1xuICBBZnRlckNvbnRlbnRJbml0LFxuICBDb21wb25lbnQsXG4gIENvbnRlbnRDaGlsZCxcbiAgQ29udGVudENoaWxkcmVuLFxuICBJbnB1dCxcbiAgT25EZXN0cm95LFxuICBRdWVyeUxpc3QsXG4gIFRlbXBsYXRlUmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IE56VGltZWxpbmVJdGVtQ29tcG9uZW50IH0gZnJvbSAnLi9uei10aW1lbGluZS1pdGVtLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICAgICAgOiAnbnotdGltZWxpbmUnLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgdGVtcGxhdGVVcmwgICAgICAgIDogJy4vbnotdGltZWxpbmUuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIE56VGltZWxpbmVDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kge1xuICBwcml2YXRlIF9wZW5kaW5nOiBzdHJpbmcgfCBib29sZWFuIHwgVGVtcGxhdGVSZWY8dm9pZD47XG4gIHByaXZhdGUgdW5zdWJzY3JpYmUkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcbiAgaXNQZW5kaW5nU3RyaW5nOiBib29sZWFuO1xuICBpc1BlbmRpbmdCb29sZWFuOiBib29sZWFuID0gZmFsc2U7XG5cbiAgQElucHV0KClcbiAgc2V0IG56UGVuZGluZyh2YWx1ZTogc3RyaW5nIHwgYm9vbGVhbiB8IFRlbXBsYXRlUmVmPHZvaWQ+KSB7XG4gICAgdGhpcy5pc1BlbmRpbmdTdHJpbmcgPSAhKHZhbHVlIGluc3RhbmNlb2YgVGVtcGxhdGVSZWYpO1xuICAgIHRoaXMuaXNQZW5kaW5nQm9vbGVhbiA9IHZhbHVlID09PSB0cnVlO1xuICAgIHRoaXMuX3BlbmRpbmcgPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBuelBlbmRpbmcoKTogc3RyaW5nIHwgYm9vbGVhbiB8IFRlbXBsYXRlUmVmPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5fcGVuZGluZztcbiAgfVxuXG4gIEBDb250ZW50Q2hpbGRyZW4oTnpUaW1lbGluZUl0ZW1Db21wb25lbnQpIGxpc3RPZlRpbWVMaW5lOiBRdWVyeUxpc3Q8TnpUaW1lbGluZUl0ZW1Db21wb25lbnQ+O1xuICBAQ29udGVudENoaWxkKCdwZW5kaW5nJykgX3BlbmRpbmdDb250ZW50OiBUZW1wbGF0ZVJlZjx2b2lkPjtcblxuICB1cGRhdGVDaGlsZHJlblRpbWVMaW5lKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmxpc3RPZlRpbWVMaW5lICYmIHRoaXMubGlzdE9mVGltZUxpbmUubGVuZ3RoKSB7XG4gICAgICB0aGlzLmxpc3RPZlRpbWVMaW5lLnRvQXJyYXkoKS5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4gaXRlbS5pc0xhc3QgPSBpbmRleCA9PT0gdGhpcy5saXN0T2ZUaW1lTGluZS5sZW5ndGggLSAxKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLnVuc3Vic2NyaWJlJC5uZXh0KCk7XG4gICAgdGhpcy51bnN1YnNjcmliZSQuY29tcGxldGUoKTtcbiAgfVxuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnVwZGF0ZUNoaWxkcmVuVGltZUxpbmUoKTtcbiAgICBpZiAodGhpcy5saXN0T2ZUaW1lTGluZSkge1xuICAgICAgdGhpcy5saXN0T2ZUaW1lTGluZS5jaGFuZ2VzLnBpcGUodGFrZVVudGlsKHRoaXMudW5zdWJzY3JpYmUkKSkuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgdGhpcy51cGRhdGVDaGlsZHJlblRpbWVMaW5lKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBOelRpbWVsaW5lSXRlbUNvbXBvbmVudCB9IGZyb20gJy4vbnotdGltZWxpbmUtaXRlbS5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpUaW1lbGluZUNvbXBvbmVudCB9IGZyb20gJy4vbnotdGltZWxpbmUuY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbIE56VGltZWxpbmVJdGVtQ29tcG9uZW50LCBOelRpbWVsaW5lQ29tcG9uZW50IF0sXG4gIGV4cG9ydHMgICAgIDogWyBOelRpbWVsaW5lSXRlbUNvbXBvbmVudCwgTnpUaW1lbGluZUNvbXBvbmVudCBdLFxuICBpbXBvcnRzICAgICA6IFsgQ29tbW9uTW9kdWxlIF1cbn0pXG5leHBvcnQgY2xhc3MgTnpUaW1lbGluZU1vZHVsZSB7XG59XG4iLCJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIERvQ2hlY2ssXG4gIEVsZW1lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5wdXQsXG4gIEl0ZXJhYmxlRGlmZmVyLFxuICBJdGVyYWJsZURpZmZlcnMsXG4gIE9uQ2hhbmdlcyxcbiAgT25Jbml0LFxuICBPdXRwdXQsXG4gIFNpbXBsZUNoYW5nZXMsXG4gIFRlbXBsYXRlUmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBOelVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UgfSBmcm9tICcuLi9jb3JlL3NlcnZpY2VzL3VwZGF0ZS1ob3N0LWNsYXNzLnNlcnZpY2UnO1xuaW1wb3J0IHsgdG9Cb29sZWFuIH0gZnJvbSAnLi4vY29yZS91dGlsL2NvbnZlcnQnO1xuXG5pbXBvcnQgeyBUcmFuc2Zlckl0ZW0gfSBmcm9tICcuL2ludGVyZmFjZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICAgICAgOiAnbnotdHJhbnNmZXItbGlzdCcsXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxuICBwcm92aWRlcnMgICAgICAgICAgOiBbIE56VXBkYXRlSG9zdENsYXNzU2VydmljZSBdLFxuICB0ZW1wbGF0ZVVybCAgICAgICAgOiAnLi9uei10cmFuc2Zlci1saXN0LmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBOelRyYW5zZmVyTGlzdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25Jbml0LCBEb0NoZWNrIHtcbiAgcHJpdmF0ZSBfc2hvd1NlYXJjaCA9IGZhbHNlO1xuXG4gIC8vIHJlZ2lvbjogZmllbGRzXG5cbiAgQElucHV0KCkgZGlyZWN0aW9uID0gJyc7XG4gIEBJbnB1dCgpIHRpdGxlVGV4dCA9ICcnO1xuXG4gIEBJbnB1dCgpIGRhdGFTb3VyY2U6IFRyYW5zZmVySXRlbVtdID0gW107XG5cbiAgQElucHV0KCkgaXRlbVVuaXQgPSAnJztcbiAgQElucHV0KCkgaXRlbXNVbml0ID0gJyc7XG4gIEBJbnB1dCgpIGZpbHRlciA9ICcnO1xuXG4gIC8vIHNlYXJjaFxuICBASW5wdXQoKVxuICBzZXQgc2hvd1NlYXJjaCh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX3Nob3dTZWFyY2ggPSB0b0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IHNob3dTZWFyY2goKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3Nob3dTZWFyY2g7XG4gIH1cblxuICBASW5wdXQoKSBzZWFyY2hQbGFjZWhvbGRlcjogc3RyaW5nO1xuICBASW5wdXQoKSBub3RGb3VuZENvbnRlbnQ6IHN0cmluZztcbiAgQElucHV0KCkgZmlsdGVyT3B0aW9uOiAoaW5wdXRWYWx1ZTogc3RyaW5nLCBpdGVtOiBUcmFuc2Zlckl0ZW0pID0+IGJvb2xlYW47XG5cbiAgQElucHV0KCkgcmVuZGVyOiBUZW1wbGF0ZVJlZjx2b2lkPjtcbiAgQElucHV0KCkgZm9vdGVyOiBUZW1wbGF0ZVJlZjx2b2lkPjtcblxuICAvLyBldmVudHNcbiAgQE91dHB1dCgpIGhhbmRsZVNlbGVjdEFsbDogRXZlbnRFbWl0dGVyPGJvb2xlYW4+ID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuICBAT3V0cHV0KCkgaGFuZGxlU2VsZWN0OiBFdmVudEVtaXR0ZXI8VHJhbnNmZXJJdGVtPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIGZpbHRlckNoYW5nZTogRXZlbnRFbWl0dGVyPHsgZGlyZWN0aW9uOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcgfT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgLy8gZW5kcmVnaW9uXG5cbiAgLy8gcmVnaW9uOiBzdHlsZXNcblxuICBwcmVmaXhDbHMgPSAnYW50LXRyYW5zZmVyLWxpc3QnO1xuXG4gIHNldENsYXNzTWFwKCk6IHZvaWQge1xuICAgIGNvbnN0IGNsYXNzTWFwID0ge1xuICAgICAgWyB0aGlzLnByZWZpeENscyBdICAgICAgICAgICAgICAgICA6IHRydWUsXG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xzfS13aXRoLWZvb3RlcmAgXTogISF0aGlzLmZvb3RlclxuICAgIH07XG4gICAgdGhpcy51cGRhdGVIb3N0Q2xhc3NTZXJ2aWNlLnVwZGF0ZUhvc3RDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIGNsYXNzTWFwKTtcbiAgfVxuXG4gIC8vIGVuZHJlZ2lvblxuXG4gIC8vIHJlZ2lvbjogc2VsZWN0IGFsbFxuXG4gIHN0YXQgPSB7XG4gICAgY2hlY2tBbGwgIDogZmFsc2UsXG4gICAgY2hlY2tIYWxmIDogZmFsc2UsXG4gICAgY2hlY2tDb3VudDogMCxcbiAgICBzaG93bkNvdW50OiAwXG4gIH07XG5cbiAgb25IYW5kbGVTZWxlY3RBbGwoc3RhdHVzOiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5kYXRhU291cmNlLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBpZiAoIWl0ZW0uZGlzYWJsZWQgJiYgIWl0ZW0uX2hpZGVuKSB7XG4gICAgICAgIGl0ZW0uY2hlY2tlZCA9IHN0YXR1cztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMudXBkYXRlQ2hlY2tTdGF0dXMoKTtcbiAgICB0aGlzLmhhbmRsZVNlbGVjdEFsbC5lbWl0KHN0YXR1cyk7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZUNoZWNrU3RhdHVzKCk6IHZvaWQge1xuICAgIGNvbnN0IHZhbGlkQ291bnQgPSB0aGlzLmRhdGFTb3VyY2UuZmlsdGVyKHcgPT4gIXcuZGlzYWJsZWQpLmxlbmd0aDtcbiAgICB0aGlzLnN0YXQuY2hlY2tDb3VudCA9IHRoaXMuZGF0YVNvdXJjZS5maWx0ZXIodyA9PiB3LmNoZWNrZWQgJiYgIXcuZGlzYWJsZWQpLmxlbmd0aDtcbiAgICB0aGlzLnN0YXQuc2hvd25Db3VudCA9IHRoaXMuZGF0YVNvdXJjZS5maWx0ZXIodyA9PiAhdy5faGlkZW4pLmxlbmd0aDtcbiAgICB0aGlzLnN0YXQuY2hlY2tBbGwgPSB2YWxpZENvdW50ID4gMCAmJiB2YWxpZENvdW50ID09PSB0aGlzLnN0YXQuY2hlY2tDb3VudDtcbiAgICB0aGlzLnN0YXQuY2hlY2tIYWxmID0gdGhpcy5zdGF0LmNoZWNrQ291bnQgPiAwICYmICF0aGlzLnN0YXQuY2hlY2tBbGw7XG4gIH1cblxuICAvLyBlbmRyZWdpb25cblxuICAvLyByZWdpb246IHNlYXJjaFxuXG4gIGhhbmRsZUZpbHRlcih2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5maWx0ZXIgPSB2YWx1ZTtcbiAgICB0aGlzLmRhdGFTb3VyY2UuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIGl0ZW0uX2hpZGVuID0gdmFsdWUubGVuZ3RoID4gMCAmJiAhdGhpcy5tYXRjaEZpbHRlcih2YWx1ZSwgaXRlbSk7XG4gICAgfSk7XG4gICAgdGhpcy5zdGF0LnNob3duQ291bnQgPSB0aGlzLmRhdGFTb3VyY2UuZmlsdGVyKHcgPT4gIXcuX2hpZGVuKS5sZW5ndGg7XG4gICAgdGhpcy5maWx0ZXJDaGFuZ2UuZW1pdCh7IGRpcmVjdGlvbjogdGhpcy5kaXJlY3Rpb24sIHZhbHVlIH0pO1xuICB9XG5cbiAgaGFuZGxlQ2xlYXIoKTogdm9pZCB7XG4gICAgdGhpcy5oYW5kbGVGaWx0ZXIoJycpO1xuICB9XG5cbiAgcHJpdmF0ZSBtYXRjaEZpbHRlcih0ZXh0OiBzdHJpbmcsIGl0ZW06IFRyYW5zZmVySXRlbSk6IGJvb2xlYW4ge1xuICAgIGlmICh0aGlzLmZpbHRlck9wdGlvbikge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyT3B0aW9uKHRleHQsIGl0ZW0pO1xuICAgIH1cbiAgICByZXR1cm4gaXRlbS50aXRsZS5pbmNsdWRlcyh0ZXh0KTtcbiAgfVxuXG4gIC8vIGVuZHJlZ2lvblxuXG4gIGxpc3REaWZmZXI6IEl0ZXJhYmxlRGlmZmVyPHt9PjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIHVwZGF0ZUhvc3RDbGFzc1NlcnZpY2U6IE56VXBkYXRlSG9zdENsYXNzU2VydmljZSwgZGlmZmVyczogSXRlcmFibGVEaWZmZXJzKSB7XG4gICAgdGhpcy5saXN0RGlmZmVyID0gZGlmZmVycy5maW5kKFtdKS5jcmVhdGUobnVsbCk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKCdmb290ZXInIGluIGNoYW5nZXMpIHtcbiAgICAgIHRoaXMuc2V0Q2xhc3NNYXAoKTtcbiAgICB9XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnNldENsYXNzTWFwKCk7XG4gIH1cblxuICBuZ0RvQ2hlY2soKTogdm9pZCB7XG4gICAgY29uc3QgY2hhbmdlID0gdGhpcy5saXN0RGlmZmVyLmRpZmYodGhpcy5kYXRhU291cmNlKTtcbiAgICBpZiAoY2hhbmdlKSB7XG4gICAgICB0aGlzLnVwZGF0ZUNoZWNrU3RhdHVzKCk7XG4gICAgfVxuICB9XG5cbiAgX2hhbmRsZVNlbGVjdChpdGVtOiBUcmFuc2Zlckl0ZW0pOiB2b2lkIHtcbiAgICBpZiAoaXRlbS5kaXNhYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpdGVtLmNoZWNrZWQgPSAhaXRlbS5jaGVja2VkO1xuICAgIHRoaXMudXBkYXRlQ2hlY2tTdGF0dXMoKTtcbiAgICB0aGlzLmhhbmRsZVNlbGVjdC5lbWl0KGl0ZW0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICAgICAgICAgIDogJ1tuei10cmFuc2Zlci1zZWFyY2hdJyxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG4gIHRlbXBsYXRlVXJsICAgICAgICA6ICcuL256LXRyYW5zZmVyLXNlYXJjaC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgTnpUcmFuc2ZlclNlYXJjaENvbXBvbmVudCB7XG5cbiAgLy8gcmVnaW9uOiBmaWVsZHNcblxuICBASW5wdXQoKSBwbGFjZWhvbGRlcjogc3RyaW5nO1xuICBASW5wdXQoKSB2YWx1ZTogc3RyaW5nO1xuXG4gIEBPdXRwdXQoKSB2YWx1ZUNoYW5nZWQgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcbiAgQE91dHB1dCgpIHZhbHVlQ2xlYXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgLy8gZW5kcmVnaW9uXG5cbiAgX2hhbmRsZSgpOiB2b2lkIHtcbiAgICB0aGlzLnZhbHVlQ2hhbmdlZC5lbWl0KHRoaXMudmFsdWUpO1xuICB9XG5cbiAgX2NsZWFyKCk6IHZvaWQge1xuICAgIHRoaXMudmFsdWUgPSAnJztcbiAgICB0aGlzLnZhbHVlQ2xlYXIuZW1pdCgpO1xuICB9XG5cbn1cbiIsImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT25DaGFuZ2VzLFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgT3V0cHV0LFxuICBTaW1wbGVDaGFuZ2VzLFxuICBUZW1wbGF0ZVJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgb2YsIE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgdG9Cb29sZWFuIH0gZnJvbSAnLi4vY29yZS91dGlsL2NvbnZlcnQnO1xuaW1wb3J0IHsgTnpJMThuU2VydmljZSB9IGZyb20gJy4uL2kxOG4vbnotaTE4bi5zZXJ2aWNlJztcblxuaW1wb3J0IHsgVHJhbnNmZXJDYW5Nb3ZlLCBUcmFuc2ZlckNoYW5nZSwgVHJhbnNmZXJJdGVtLCBUcmFuc2ZlclNlYXJjaENoYW5nZSwgVHJhbnNmZXJTZWxlY3RDaGFuZ2UgfSBmcm9tICcuL2ludGVyZmFjZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICAgICAgOiAnbnotdHJhbnNmZXInLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgdGVtcGxhdGVVcmwgICAgICAgIDogJy4vbnotdHJhbnNmZXIuY29tcG9uZW50Lmh0bWwnLFxuICBob3N0ICAgICAgICAgICAgICAgOiB7XG4gICAgJ1tjbGFzcy5hbnQtdHJhbnNmZXJdJzogJ3RydWUnXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgTnpUcmFuc2ZlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICBwcml2YXRlIHVuc3Vic2NyaWJlJCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgbG9jYWxlOiBhbnkgPSB7fTtcbiAgcHJpdmF0ZSBfc2hvd1NlYXJjaCA9IGZhbHNlO1xuXG4gIGxlZnRGaWx0ZXIgPSAnJztcbiAgcmlnaHRGaWx0ZXIgPSAnJztcblxuICAvLyByZWdpb246IGZpZWxkc1xuXG4gIEBJbnB1dCgpIG56RGF0YVNvdXJjZTogVHJhbnNmZXJJdGVtW10gPSBbXTtcbiAgQElucHV0KCkgbnpUaXRsZXM6IHN0cmluZ1tdID0gWyAnJywgJycgXTtcbiAgQElucHV0KCkgbnpPcGVyYXRpb25zOiBzdHJpbmdbXSA9IFtdO1xuICBASW5wdXQoKSBuekxpc3RTdHlsZTogb2JqZWN0O1xuICBASW5wdXQoKSBuekl0ZW1Vbml0OiBzdHJpbmc7XG4gIEBJbnB1dCgpIG56SXRlbXNVbml0OiBzdHJpbmc7XG4gIEBJbnB1dCgpIG56Q2FuTW92ZTogKGFyZzogVHJhbnNmZXJDYW5Nb3ZlKSA9PiBPYnNlcnZhYmxlPFRyYW5zZmVySXRlbVtdPiA9IChhcmc6IFRyYW5zZmVyQ2FuTW92ZSkgPT4gb2YoYXJnLmxpc3QpO1xuICBASW5wdXQoKSBuelJlbmRlcjogVGVtcGxhdGVSZWY8dm9pZD47XG4gIEBJbnB1dCgpIG56Rm9vdGVyOiBUZW1wbGF0ZVJlZjx2b2lkPjtcblxuICAvLyBzZWFyY2hcbiAgQElucHV0KClcbiAgc2V0IG56U2hvd1NlYXJjaCh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX3Nob3dTZWFyY2ggPSB0b0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56U2hvd1NlYXJjaCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fc2hvd1NlYXJjaDtcbiAgfVxuXG4gIEBJbnB1dCgpIG56RmlsdGVyT3B0aW9uOiAoaW5wdXRWYWx1ZTogc3RyaW5nLCBpdGVtOiBUcmFuc2Zlckl0ZW0pID0+IGJvb2xlYW47XG4gIEBJbnB1dCgpIG56U2VhcmNoUGxhY2Vob2xkZXI6IHN0cmluZztcbiAgQElucHV0KCkgbnpOb3RGb3VuZENvbnRlbnQ6IHN0cmluZztcblxuICAvLyBldmVudHNcbiAgQE91dHB1dCgpIG56Q2hhbmdlOiBFdmVudEVtaXR0ZXI8VHJhbnNmZXJDaGFuZ2U+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgbnpTZWFyY2hDaGFuZ2U6IEV2ZW50RW1pdHRlcjxUcmFuc2ZlclNlYXJjaENoYW5nZT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSBuelNlbGVjdENoYW5nZTogRXZlbnRFbWl0dGVyPFRyYW5zZmVyU2VsZWN0Q2hhbmdlPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAvLyBlbmRyZWdpb25cblxuICAvLyByZWdpb246IHByb2Nlc3MgZGF0YVxuXG4gIC8vIGxlZnRcbiAgbGVmdERhdGFTb3VyY2U6IFRyYW5zZmVySXRlbVtdID0gW107XG5cbiAgLy8gcmlnaHRcbiAgcmlnaHREYXRhU291cmNlOiBUcmFuc2Zlckl0ZW1bXSA9IFtdO1xuXG4gIHByaXZhdGUgc3BsaXREYXRhU291cmNlKCk6IHZvaWQge1xuICAgIHRoaXMubGVmdERhdGFTb3VyY2UgPSBbXTtcbiAgICB0aGlzLnJpZ2h0RGF0YVNvdXJjZSA9IFtdO1xuICAgIHRoaXMubnpEYXRhU291cmNlLmZvckVhY2gocmVjb3JkID0+IHtcbiAgICAgIGlmIChyZWNvcmQuZGlyZWN0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgIHRoaXMucmlnaHREYXRhU291cmNlLnB1c2gocmVjb3JkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubGVmdERhdGFTb3VyY2UucHVzaChyZWNvcmQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDaGVja2VkRGF0YShkaXJlY3Rpb246IHN0cmluZyk6IFRyYW5zZmVySXRlbVtdIHtcbiAgICByZXR1cm4gdGhpc1sgZGlyZWN0aW9uID09PSAnbGVmdCcgPyAnbGVmdERhdGFTb3VyY2UnIDogJ3JpZ2h0RGF0YVNvdXJjZScgXS5maWx0ZXIodyA9PiB3LmNoZWNrZWQpO1xuICB9XG5cbiAgaGFuZGxlTGVmdFNlbGVjdEFsbCA9IChjaGVja2VkOiBib29sZWFuKSA9PiB0aGlzLmhhbmRsZVNlbGVjdCgnbGVmdCcsIGNoZWNrZWQpO1xuICBoYW5kbGVSaWdodFNlbGVjdEFsbCA9IChjaGVja2VkOiBib29sZWFuKSA9PiB0aGlzLmhhbmRsZVNlbGVjdCgncmlnaHQnLCBjaGVja2VkKTtcblxuICBoYW5kbGVMZWZ0U2VsZWN0ID0gKGl0ZW06IFRyYW5zZmVySXRlbSkgPT4gdGhpcy5oYW5kbGVTZWxlY3QoJ2xlZnQnLCBpdGVtLmNoZWNrZWQsIGl0ZW0pO1xuICBoYW5kbGVSaWdodFNlbGVjdCA9IChpdGVtOiBUcmFuc2Zlckl0ZW0pID0+IHRoaXMuaGFuZGxlU2VsZWN0KCdyaWdodCcsIGl0ZW0uY2hlY2tlZCwgaXRlbSk7XG5cbiAgaGFuZGxlU2VsZWN0KGRpcmVjdGlvbjogJ2xlZnQnIHwgJ3JpZ2h0JywgY2hlY2tlZDogYm9vbGVhbiwgaXRlbT86IFRyYW5zZmVySXRlbSk6IHZvaWQge1xuICAgIGNvbnN0IGxpc3QgPSB0aGlzLmdldENoZWNrZWREYXRhKGRpcmVjdGlvbik7XG4gICAgdGhpcy51cGRhdGVPcGVyYXRpb25TdGF0dXMoZGlyZWN0aW9uLCBsaXN0Lmxlbmd0aCk7XG4gICAgdGhpcy5uelNlbGVjdENoYW5nZS5lbWl0KHsgZGlyZWN0aW9uLCBjaGVja2VkLCBsaXN0LCBpdGVtIH0pO1xuICB9XG5cbiAgaGFuZGxlRmlsdGVyQ2hhbmdlKHJldDogeyBkaXJlY3Rpb246IHN0cmluZywgdmFsdWU6IHN0cmluZyB9KTogdm9pZCB7XG4gICAgdGhpcy5uelNlYXJjaENoYW5nZS5lbWl0KHJldCk7XG4gIH1cblxuICAvLyBlbmRyZWdpb25cblxuICAvLyByZWdpb246IG9wZXJhdGlvblxuXG4gIGxlZnRBY3RpdmUgPSBmYWxzZTtcbiAgcmlnaHRBY3RpdmUgPSBmYWxzZTtcblxuICBwcml2YXRlIHVwZGF0ZU9wZXJhdGlvblN0YXR1cyhkaXJlY3Rpb246IHN0cmluZywgY291bnQ/OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzWyBkaXJlY3Rpb24gPT09ICdyaWdodCcgPyAnbGVmdEFjdGl2ZScgOiAncmlnaHRBY3RpdmUnIF0gPSAodHlwZW9mIGNvdW50ID09PSAndW5kZWZpbmVkJyA/IHRoaXMuZ2V0Q2hlY2tlZERhdGEoZGlyZWN0aW9uKS5maWx0ZXIodyA9PiAhdy5kaXNhYmxlZCkubGVuZ3RoIDogY291bnQpID4gMDtcbiAgfVxuXG4gIG1vdmVUb0xlZnQgPSAoKSA9PiB0aGlzLm1vdmVUbygnbGVmdCcpO1xuICBtb3ZlVG9SaWdodCA9ICgpID0+IHRoaXMubW92ZVRvKCdyaWdodCcpO1xuXG4gIG1vdmVUbyhkaXJlY3Rpb246IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IG9wcG9zaXRlRGlyZWN0aW9uID0gZGlyZWN0aW9uID09PSAnbGVmdCcgPyAncmlnaHQnIDogJ2xlZnQnO1xuICAgIHRoaXMudXBkYXRlT3BlcmF0aW9uU3RhdHVzKG9wcG9zaXRlRGlyZWN0aW9uLCAwKTtcbiAgICBjb25zdCBkYXRhc291cmNlID0gZGlyZWN0aW9uID09PSAnbGVmdCcgPyB0aGlzLnJpZ2h0RGF0YVNvdXJjZSA6IHRoaXMubGVmdERhdGFTb3VyY2U7XG4gICAgY29uc3QgbW92ZUxpc3QgPSBkYXRhc291cmNlLmZpbHRlcihpdGVtID0+IGl0ZW0uY2hlY2tlZCA9PT0gdHJ1ZSAmJiAhaXRlbS5kaXNhYmxlZCk7XG4gICAgdGhpcy5uekNhbk1vdmUoeyBkaXJlY3Rpb24sIGxpc3Q6IG1vdmVMaXN0IH0pXG4gICAgLnN1YnNjcmliZShcbiAgICAgIG5ld01vdmVMaXN0ID0+IHRoaXMudHJ1dGhNb3ZlVG8oZGlyZWN0aW9uLCBuZXdNb3ZlTGlzdC5maWx0ZXIoaSA9PiAhIWkpKSxcbiAgICAgICgpID0+IG1vdmVMaXN0LmZvckVhY2goaSA9PiBpLmNoZWNrZWQgPSBmYWxzZSlcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSB0cnV0aE1vdmVUbyhkaXJlY3Rpb246IHN0cmluZywgbGlzdDogVHJhbnNmZXJJdGVtW10pOiB2b2lkIHtcbiAgICBjb25zdCBvcHBvc2l0ZURpcmVjdGlvbiA9IGRpcmVjdGlvbiA9PT0gJ2xlZnQnID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgICBjb25zdCBkYXRhc291cmNlID0gZGlyZWN0aW9uID09PSAnbGVmdCcgPyB0aGlzLnJpZ2h0RGF0YVNvdXJjZSA6IHRoaXMubGVmdERhdGFTb3VyY2U7XG4gICAgY29uc3QgdGFyZ2V0RGF0YXNvdXJjZSA9IGRpcmVjdGlvbiA9PT0gJ2xlZnQnID8gdGhpcy5sZWZ0RGF0YVNvdXJjZSA6IHRoaXMucmlnaHREYXRhU291cmNlO1xuICAgIGZvciAoY29uc3QgaXRlbSBvZiBsaXN0KSB7XG4gICAgICBpdGVtLmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgIHRhcmdldERhdGFzb3VyY2UucHVzaChpdGVtKTtcbiAgICAgIGRhdGFzb3VyY2Uuc3BsaWNlKGRhdGFzb3VyY2UuaW5kZXhPZihpdGVtKSwgMSk7XG4gICAgfVxuICAgIHRoaXMudXBkYXRlT3BlcmF0aW9uU3RhdHVzKG9wcG9zaXRlRGlyZWN0aW9uKTtcbiAgICB0aGlzLm56Q2hhbmdlLmVtaXQoe1xuICAgICAgZnJvbTogb3Bwb3NpdGVEaXJlY3Rpb24sXG4gICAgICB0byAgOiBkaXJlY3Rpb24sXG4gICAgICBsaXN0XG4gICAgfSk7XG4gIH1cblxuICAvLyBlbmRyZWdpb25cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGkxOG46IE56STE4blNlcnZpY2UsIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuaTE4bi5sb2NhbGVDaGFuZ2UucGlwZSh0YWtlVW50aWwodGhpcy51bnN1YnNjcmliZSQpKS5zdWJzY3JpYmUoKCkgPT4gdGhpcy5sb2NhbGUgPSB0aGlzLmkxOG4uZ2V0TG9jYWxlRGF0YSgnVHJhbnNmZXInKSk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKCduekRhdGFTb3VyY2UnIGluIGNoYW5nZXMpIHtcbiAgICAgIHRoaXMuc3BsaXREYXRhU291cmNlKCk7XG4gICAgICB0aGlzLnVwZGF0ZU9wZXJhdGlvblN0YXR1cygnbGVmdCcpO1xuICAgICAgdGhpcy51cGRhdGVPcGVyYXRpb25TdGF0dXMoJ3JpZ2h0Jyk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy51bnN1YnNjcmliZSQubmV4dCgpO1xuICAgIHRoaXMudW5zdWJzY3JpYmUkLmNvbXBsZXRlKCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IE56QnV0dG9uTW9kdWxlIH0gZnJvbSAnLi4vYnV0dG9uL256LWJ1dHRvbi5tb2R1bGUnO1xuaW1wb3J0IHsgTnpDaGVja2JveE1vZHVsZSB9IGZyb20gJy4uL2NoZWNrYm94L256LWNoZWNrYm94Lm1vZHVsZSc7XG5pbXBvcnQgeyBOekkxOG5Nb2R1bGUgfSBmcm9tICcuLi9pMThuL256LWkxOG4ubW9kdWxlJztcbmltcG9ydCB7IE56SWNvbk1vZHVsZSB9IGZyb20gJy4uL2ljb24vbnotaWNvbi5tb2R1bGUnO1xuaW1wb3J0IHsgTnpJbnB1dE1vZHVsZSB9IGZyb20gJy4uL2lucHV0L256LWlucHV0Lm1vZHVsZSc7XG5cbmltcG9ydCB7IE56VHJhbnNmZXJMaXN0Q29tcG9uZW50IH0gZnJvbSAnLi9uei10cmFuc2Zlci1saXN0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOelRyYW5zZmVyU2VhcmNoQ29tcG9uZW50IH0gZnJvbSAnLi9uei10cmFuc2Zlci1zZWFyY2guY29tcG9uZW50JztcbmltcG9ydCB7IE56VHJhbnNmZXJDb21wb25lbnQgfSBmcm9tICcuL256LXRyYW5zZmVyLmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHMgICAgIDogWyBDb21tb25Nb2R1bGUsIEZvcm1zTW9kdWxlLCBOekNoZWNrYm94TW9kdWxlLCBOekJ1dHRvbk1vZHVsZSwgTnpJbnB1dE1vZHVsZSwgTnpJMThuTW9kdWxlLCBOekljb25Nb2R1bGUgXSxcbiAgZGVjbGFyYXRpb25zOiBbIE56VHJhbnNmZXJDb21wb25lbnQsIE56VHJhbnNmZXJMaXN0Q29tcG9uZW50LCBOelRyYW5zZmVyU2VhcmNoQ29tcG9uZW50IF0sXG4gIGV4cG9ydHMgICAgIDogWyBOelRyYW5zZmVyQ29tcG9uZW50IF1cbn0pXG5leHBvcnQgY2xhc3MgTnpUcmFuc2Zlck1vZHVsZSB7XG59XG4iLCJleHBvcnQgaW50ZXJmYWNlIE56VHJlZU5vZGVPcHRpb25zIHtcbiAgdGl0bGU6IHN0cmluZztcbiAga2V5OiBzdHJpbmc7XG4gIGljb24/OiBzdHJpbmc7XG4gIGlzTGVhZj86IGJvb2xlYW47XG4gIGNoZWNrZWQ/OiBib29sZWFuO1xuICBzZWxlY3RlZD86IGJvb2xlYW47XG4gIHNlbGVjdGFibGU/OiBib29sZWFuO1xuICBkaXNhYmxlZD86IGJvb2xlYW47XG4gIGRpc2FibGVDaGVja2JveD86IGJvb2xlYW47XG4gIGV4cGFuZGVkPzogYm9vbGVhbjtcbiAgY2hpbGRyZW4/OiBOelRyZWVOb2RlT3B0aW9uc1tdO1xuXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgWyBrZXk6IHN0cmluZyBdOiBhbnk7XG59XG5cbmV4cG9ydCBjbGFzcyBOelRyZWVOb2RlIHtcbiAgdGl0bGU/OiBzdHJpbmc7XG4gIGtleT86IHN0cmluZztcbiAgbGV2ZWw6IG51bWJlciA9IDA7XG4gIGNoaWxkcmVuOiBOelRyZWVOb2RlW107XG4gIGlzTGVhZjogYm9vbGVhbjtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICBvcmlnaW46IGFueTtcbiAgLy8gUGFyZW50IE5vZGVcbiAgcGFyZW50Tm9kZTogTnpUcmVlTm9kZTtcbiAgaXNDaGVja2VkOiBib29sZWFuO1xuICBpc1NlbGVjdGFibGU6IGJvb2xlYW47XG4gIGlzRGlzYWJsZWQ6IGJvb2xlYW47XG4gIGlzRGlzYWJsZUNoZWNrYm94OiBib29sZWFuO1xuICBpc0V4cGFuZGVkOiBib29sZWFuO1xuICBpc0hhbGZDaGVja2VkOiBib29sZWFuO1xuICBpc0FsbENoZWNrZWQ6IGJvb2xlYW47XG4gIGlzU2VsZWN0ZWQ6IGJvb2xlYW47XG4gIGlzTG9hZGluZzogYm9vbGVhbjtcbiAgaXNNYXRjaGVkOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbjogTnpUcmVlTm9kZU9wdGlvbnMsIHBhcmVudDogTnpUcmVlTm9kZSA9IG51bGwpIHtcbiAgICB0aGlzLnRpdGxlID0gb3B0aW9uLnRpdGxlIHx8ICctLS0nO1xuICAgIHRoaXMua2V5ID0gb3B0aW9uLmtleSB8fCBudWxsO1xuICAgIHRoaXMuaXNMZWFmID0gb3B0aW9uLmlzTGVhZiB8fCBmYWxzZTtcbiAgICB0aGlzLm9yaWdpbiA9IG9wdGlvbjtcbiAgICB0aGlzLmNoaWxkcmVuID0gW107XG4gICAgdGhpcy5wYXJlbnROb2RlID0gcGFyZW50O1xuICAgIC8vIG9wdGlvbiBwYXJhbXNcbiAgICB0aGlzLmlzQ2hlY2tlZCA9IG9wdGlvbi5jaGVja2VkIHx8IGZhbHNlO1xuICAgIHRoaXMuaXNTZWxlY3RhYmxlID0gb3B0aW9uLmRpc2FibGVkIHx8IChvcHRpb24uc2VsZWN0YWJsZSA9PT0gZmFsc2UgPyBmYWxzZSA6IHRydWUpO1xuICAgIHRoaXMuaXNEaXNhYmxlZCA9IG9wdGlvbi5kaXNhYmxlZCB8fCBmYWxzZTtcbiAgICB0aGlzLmlzRGlzYWJsZUNoZWNrYm94ID0gb3B0aW9uLmRpc2FibGVDaGVja2JveCB8fCBmYWxzZTtcbiAgICB0aGlzLmlzRXhwYW5kZWQgPSBvcHRpb24uaXNMZWFmID8gZmFsc2UgOiAob3B0aW9uLmV4cGFuZGVkIHx8IGZhbHNlKTtcbiAgICB0aGlzLmlzQWxsQ2hlY2tlZCA9IG9wdGlvbi5jaGVja2VkIHx8IGZhbHNlO1xuICAgIHRoaXMuaXNIYWxmQ2hlY2tlZCA9IGZhbHNlO1xuICAgIHRoaXMuaXNTZWxlY3RlZCA9ICghb3B0aW9uLmRpc2FibGVkICYmIG9wdGlvbi5zZWxlY3RlZCkgfHwgZmFsc2U7XG4gICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmlzTWF0Y2hlZCA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogcGFyZW50J3MgY2hlY2tlZCBzdGF0dXMgd2lsbCBhZmZlY3QgY2hpbGRyZW4gd2hpbGUgaW5pdGlhbGl6aW5nXG4gICAgICovXG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgdGhpcy5sZXZlbCA9IHBhcmVudC5sZXZlbCArIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubGV2ZWwgPSAwO1xuICAgIH1cbiAgICBpZiAodHlwZW9mKG9wdGlvbi5jaGlsZHJlbikgIT09ICd1bmRlZmluZWQnICYmIG9wdGlvbi5jaGlsZHJlbiAhPT0gbnVsbCkge1xuICAgICAgb3B0aW9uLmNoaWxkcmVuLmZvckVhY2goXG4gICAgICAgIChub2RlT3B0aW9ucykgPT4ge1xuICAgICAgICAgIGlmIChvcHRpb24uY2hlY2tlZCAmJiAhb3B0aW9uLmRpc2FibGVkICYmICFub2RlT3B0aW9ucy5kaXNhYmxlZCAmJiAhbm9kZU9wdGlvbnMuZGlzYWJsZUNoZWNrYm94KSB7XG4gICAgICAgICAgICBub2RlT3B0aW9ucy5jaGVja2VkID0gb3B0aW9uLmNoZWNrZWQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChuZXcgTnpUcmVlTm9kZShub2RlT3B0aW9ucywgdGhpcykpO1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzZXRDaGVja2VkKGNoZWNrZWQ6IGJvb2xlYW4gPSBmYWxzZSwgaGFsZkNoZWNrZWQ6IGJvb2xlYW4gPSBmYWxzZSk6IHZvaWQge1xuICAgIHRoaXMub3JpZ2luLmNoZWNrZWQgPSBjaGVja2VkO1xuICAgIHRoaXMuaXNDaGVja2VkID0gY2hlY2tlZDtcbiAgICB0aGlzLmlzQWxsQ2hlY2tlZCA9IGNoZWNrZWQ7XG4gICAgdGhpcy5pc0hhbGZDaGVja2VkID0gaGFsZkNoZWNrZWQ7XG4gIH1cblxuICBwdWJsaWMgc2V0RXhwYW5kZWQodmFsdWU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLm9yaWdpbi5leHBhbmRlZCA9IHZhbHVlO1xuICAgIHRoaXMuaXNFeHBhbmRlZCA9IHZhbHVlO1xuICB9XG5cbiAgcHVibGljIHNldFNlbGVjdGVkKHZhbHVlOiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5vcmlnaW4uc2VsZWN0ZWQgPSB2YWx1ZTtcbiAgICB0aGlzLmlzU2VsZWN0ZWQgPSB2YWx1ZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRQYXJlbnROb2RlKCk6IE56VHJlZU5vZGUge1xuICAgIHJldHVybiB0aGlzLnBhcmVudE5vZGU7XG4gIH1cblxuICBwdWJsaWMgZ2V0Q2hpbGRyZW4oKTogTnpUcmVlTm9kZVtdIHtcbiAgICByZXR1cm4gdGhpcy5jaGlsZHJlbjtcbiAgfVxuXG4gIC8qKlxuICAgKiDDpsKUwq/DpsKMwoHDpsKMwonDp8K0wqLDpcK8wpXDpMK9wo3Dp8K9wq7DpsKPwpLDpcKFwqUsw6XCj8K2w6XCrcKQw6jCisKCw6fCgsK5w6TCuMKNw6XCj8Kvw6bCt8K7w6XCisKgXG4gICAqL1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gIHB1YmxpYyBhZGRDaGlsZHJlbihjaGlsZHJlbjogYW55W10sIGNoaWxkUG9zOiBudW1iZXIgPSAtMSk6IHZvaWQge1xuICAgIGlmICghdGhpcy5pc0xlYWYpIHtcbiAgICAgIGNoaWxkcmVuLmZvckVhY2goXG4gICAgICAgIChub2RlKSA9PiB7XG4gICAgICAgICAgY29uc3QgcmVmcmVzaExldmVsID0gKG46IE56VHJlZU5vZGUpID0+IHtcbiAgICAgICAgICAgIG4uZ2V0Q2hpbGRyZW4oKS5mb3JFYWNoKGMgPT4ge1xuICAgICAgICAgICAgICBjLmxldmVsID0gYy5nZXRQYXJlbnROb2RlKCkubGV2ZWwgKyAxO1xuICAgICAgICAgICAgICAvLyBmbHVzaCBvcmlnaW5cbiAgICAgICAgICAgICAgYy5vcmlnaW4ubGV2ZWwgPSBjLmxldmVsO1xuICAgICAgICAgICAgICByZWZyZXNoTGV2ZWwoYyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGxldCBjaGlsZCA9IG5vZGU7XG4gICAgICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgTnpUcmVlTm9kZSkge1xuICAgICAgICAgICAgY2hpbGQucGFyZW50Tm9kZSA9IHRoaXM7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoaWxkID0gbmV3IE56VHJlZU5vZGUobm9kZSwgdGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNoaWxkLmxldmVsID0gdGhpcy5sZXZlbCArIDE7XG4gICAgICAgICAgY2hpbGQub3JpZ2luLmxldmVsID0gY2hpbGQubGV2ZWw7XG4gICAgICAgICAgcmVmcmVzaExldmVsKGNoaWxkKTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY2hpbGRQb3MgPT09IC0xID8gdGhpcy5jaGlsZHJlbi5wdXNoKGNoaWxkKSA6IHRoaXMuY2hpbGRyZW4uc3BsaWNlKGNoaWxkUG9zLCAwLCBjaGlsZCk7XG4gICAgICAgICAgICAvLyBmbHVzaCBvcmlnaW5cbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIHRoaXMub3JpZ2luLmNoaWxkcmVuID0gdGhpcy5nZXRDaGlsZHJlbigpLm1hcCh2ID0+IHYub3JpZ2luKTtcbiAgICAgIC8vIHJlbW92ZSBsb2FkaW5nIHN0YXRlXG4gICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBjbGVhckNoaWxkcmVuKCk6IHZvaWQge1xuICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTnpUcmVlTm9kZSB9IGZyb20gJy4vbnotdHJlZS1ub2RlJztcblxuZXhwb3J0IGZ1bmN0aW9uIGlzQ2hlY2tEaXNhYmxlZChub2RlOiBOelRyZWVOb2RlKTogYm9vbGVhbiB7XG4gIGNvbnN0IHsgaXNEaXNhYmxlZCwgaXNEaXNhYmxlQ2hlY2tib3ggfSA9IG5vZGU7XG4gIHJldHVybiAhIShpc0Rpc2FibGVkIHx8IGlzRGlzYWJsZUNoZWNrYm94KTtcbn1cblxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuZXhwb3J0IGZ1bmN0aW9uIGlzSW5BcnJheShuZWVkbGU6IGFueSwgaGF5c3RhY2s6IGFueVtdKTogYm9vbGVhbiB7XG4gIHJldHVybiAoaGF5c3RhY2subGVuZ3RoID4gMCAmJiBoYXlzdGFjay5pbmRleE9mKG5lZWRsZSkgPiAtMSk7XG59XG4iLCJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc05vdE5pbCB9IGZyb20gJy4uL2NvcmUvdXRpbC9jaGVjayc7XG5pbXBvcnQgeyBOekZvcm1hdEVtaXRFdmVudCB9IGZyb20gJy4vaW50ZXJmYWNlJztcbmltcG9ydCB7IE56VHJlZU5vZGUgfSBmcm9tICcuL256LXRyZWUtbm9kZSc7XG5pbXBvcnQgeyBpc0NoZWNrRGlzYWJsZWQsIGlzSW5BcnJheSB9IGZyb20gJy4vbnotdHJlZS11dGlsJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE56VHJlZVNlcnZpY2Uge1xuICBEUkFHX1NJREVfUkFOR0UgPSAwLjI1O1xuICBEUkFHX01JTl9HQVAgPSAyO1xuXG4gIGNvbmR1Y3RPcHRpb246IHtcbiAgICBpc0NoZWNrU3RyaWN0bHk6IGJvb2xlYW5cbiAgfSA9IHtcbiAgICBpc0NoZWNrU3RyaWN0bHk6IGZhbHNlXG4gIH07XG4gIHNlbGVjdGVkTm9kZTogTnpUcmVlTm9kZTtcbiAgdGFyZ2V0Tm9kZTogTnpUcmVlTm9kZTtcbiAgcm9vdE5vZGVzOiBOelRyZWVOb2RlW10gPSBbXTtcbiAgc2VsZWN0ZWROb2RlTGlzdDogTnpUcmVlTm9kZVtdID0gW107XG4gIGV4cGFuZGVkTm9kZUxpc3Q6IE56VHJlZU5vZGVbXSA9IFtdO1xuICBjaGVja2VkTm9kZUxpc3Q6IE56VHJlZU5vZGVbXSA9IFtdO1xuICBoYWxmQ2hlY2tlZE5vZGVMaXN0OiBOelRyZWVOb2RlW10gPSBbXTtcbiAgbWF0Y2hlZE5vZGVMaXN0OiBOelRyZWVOb2RlW10gPSBbXTtcblxuICAvKipcbiAgICogcmVzZXQgdHJlZSBub2RlcyB3aWxsIGNsZWFyIGRlZmF1bHQgbm9kZSBsaXN0XG4gICAqL1xuICBpbml0VHJlZShuek5vZGVzOiBOelRyZWVOb2RlW10pOiB2b2lkIHtcbiAgICB0aGlzLnJvb3ROb2RlcyA9IG56Tm9kZXM7XG4gICAgdGhpcy5leHBhbmRlZE5vZGVMaXN0ID0gW107XG4gICAgdGhpcy5zZWxlY3RlZE5vZGVMaXN0ID0gW107XG4gICAgdGhpcy5oYWxmQ2hlY2tlZE5vZGVMaXN0ID0gW107XG4gICAgdGhpcy5jaGVja2VkTm9kZUxpc3QgPSBbXTtcbiAgICB0aGlzLmV4cGFuZGVkTm9kZUxpc3QgPSBbXTtcbiAgICB0aGlzLm1hdGNoZWROb2RlTGlzdCA9IFtdO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5yZWZyZXNoQ2hlY2tTdGF0ZSh0aGlzLmNvbmR1Y3RPcHRpb24uaXNDaGVja1N0cmljdGx5KTtcbiAgICB9KTtcbiAgfVxuXG4gIGdldFNlbGVjdGVkTm9kZSgpOiBOelRyZWVOb2RlIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuc2VsZWN0ZWROb2RlO1xuICB9XG5cbiAgLyoqXG4gICAqIGdldCBzb21lIGxpc3RcbiAgICovXG4gIGdldFNlbGVjdGVkTm9kZUxpc3QoKTogTnpUcmVlTm9kZVtdIHtcbiAgICByZXR1cm4gdGhpcy5jb25kdWN0Tm9kZVN0YXRlKCdzZWxlY3QnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiByZXR1cm4gY2hlY2tlZCBub2Rlc1xuICAgKi9cbiAgZ2V0Q2hlY2tlZE5vZGVMaXN0KCk6IE56VHJlZU5vZGVbXSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZHVjdE5vZGVTdGF0ZSgnY2hlY2snKTtcbiAgfVxuXG4gIGdldEhhbGZDaGVja2VkTm9kZUxpc3QoKTogTnpUcmVlTm9kZVtdIHtcbiAgICByZXR1cm4gdGhpcy5jb25kdWN0Tm9kZVN0YXRlKCdoYWxmQ2hlY2snKTtcbiAgfVxuXG4gIC8qKlxuICAgKiByZXR1cm4gZXhwYW5kZWQgbm9kZXNcbiAgICovXG4gIGdldEV4cGFuZGVkTm9kZUxpc3QoKTogTnpUcmVlTm9kZVtdIHtcbiAgICByZXR1cm4gdGhpcy5jb25kdWN0Tm9kZVN0YXRlKCdleHBhbmQnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiByZXR1cm4gc2VhcmNoIG1hdGNoZWQgbm9kZXNcbiAgICovXG4gIGdldE1hdGNoZWROb2RlTGlzdCgpOiBOelRyZWVOb2RlW10ge1xuICAgIHJldHVybiB0aGlzLmNvbmR1Y3ROb2RlU3RhdGUoJ21hdGNoJyk7XG4gIH1cblxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gIGlzQXJyYXlPZk56VHJlZU5vZGUodmFsdWU6IGFueVtdKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHZhbHVlLmV2ZXJ5KGl0ZW0gPT4gaXRlbSBpbnN0YW5jZW9mIE56VHJlZU5vZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIHJlc2V0IHNlbGVjdGVkTm9kZUxpc3RcbiAgICovXG4gIGNhbGNTZWxlY3RlZEtleXMoc2VsZWN0ZWRLZXlzOiBzdHJpbmdbXSwgbnpOb2RlczogTnpUcmVlTm9kZVtdLCBpc011bHRpOiBib29sZWFuID0gZmFsc2UpOiB2b2lkIHtcbiAgICB0aGlzLnNlbGVjdGVkTm9kZUxpc3QgPSBbXTtcbiAgICBjb25zdCBjYWxjID0gKG5vZGVzOiBOelRyZWVOb2RlW10pID0+IHtcbiAgICAgIG5vZGVzLmZvckVhY2gobm9kZSA9PiB7XG4gICAgICAgIGlmIChpc0luQXJyYXkobm9kZS5rZXksIHNlbGVjdGVkS2V5cykpIHtcbiAgICAgICAgICBub2RlLnNldFNlbGVjdGVkKHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vZGUuc2V0U2VsZWN0ZWQoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0U2VsZWN0ZWROb2RlTGlzdChub2RlLCBpc011bHRpKTtcbiAgICAgICAgaWYgKG5vZGUuZ2V0Q2hpbGRyZW4oKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY2FsYyhub2RlLmdldENoaWxkcmVuKCkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuICAgIGNhbGMobnpOb2Rlcyk7XG4gIH1cblxuICAvKipcbiAgICogcmVzZXQgZXhwYW5kZWROb2RlTGlzdFxuICAgKi9cbiAgY2FsY0V4cGFuZGVkS2V5cyhleHBhbmRlZEtleXM6IHN0cmluZ1tdLCBuek5vZGVzOiBOelRyZWVOb2RlW10pOiB2b2lkIHtcbiAgICB0aGlzLmV4cGFuZGVkTm9kZUxpc3QgPSBbXTtcbiAgICBjb25zdCBjYWxjID0gKG5vZGVzOiBOelRyZWVOb2RlW10pID0+IHtcbiAgICAgIG5vZGVzLmZvckVhY2gobm9kZSA9PiB7XG4gICAgICAgIGlmIChpc0luQXJyYXkobm9kZS5rZXksIGV4cGFuZGVkS2V5cykpIHtcbiAgICAgICAgICBub2RlLnNldEV4cGFuZGVkKHRydWUpO1xuICAgICAgICAgIHRoaXMuc2V0RXhwYW5kZWROb2RlTGlzdChub2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub2RlLnNldEV4cGFuZGVkKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9kZS5nZXRDaGlsZHJlbigpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBjYWxjKG5vZGUuZ2V0Q2hpbGRyZW4oKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG4gICAgY2FsYyhuek5vZGVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiByZXNldCBjaGVja2VkTm9kZUxpc3RcbiAgICovXG4gIGNhbGNDaGVja2VkS2V5cyhjaGVja2VkS2V5czogc3RyaW5nW10sIG56Tm9kZXM6IE56VHJlZU5vZGVbXSwgaXNDaGVja1N0cmljdGx5OiBib29sZWFuID0gZmFsc2UpOiB2b2lkIHtcbiAgICB0aGlzLmNoZWNrZWROb2RlTGlzdCA9IFtdO1xuICAgIHRoaXMuaGFsZkNoZWNrZWROb2RlTGlzdCA9IFtdO1xuICAgIGNvbnN0IGNhbGMgPSAobm9kZXM6IE56VHJlZU5vZGVbXSkgPT4ge1xuICAgICAgbm9kZXMuZm9yRWFjaChub2RlID0+IHtcbiAgICAgICAgaWYgKGlzSW5BcnJheShub2RlLmtleSwgY2hlY2tlZEtleXMpKSB7XG4gICAgICAgICAgbm9kZS5zZXRDaGVja2VkKHRydWUpO1xuICAgICAgICAgIHRoaXMuc2V0Q2hlY2tlZE5vZGVMaXN0KG5vZGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vZGUuc2V0Q2hlY2tlZChmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGUuZ2V0Q2hpbGRyZW4oKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY2FsYyhub2RlLmdldENoaWxkcmVuKCkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuICAgIGNhbGMobnpOb2Rlcyk7XG4gICAgLy8gY29udHJvbGxlZCBzdGF0ZVxuICAgIHRoaXMucmVmcmVzaENoZWNrU3RhdGUoaXNDaGVja1N0cmljdGx5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBzZXQgZHJhZyBub2RlXG4gICAqL1xuICBzZXRTZWxlY3RlZE5vZGUobm9kZT86IE56VHJlZU5vZGUpOiB2b2lkIHtcbiAgICB0aGlzLnNlbGVjdGVkTm9kZSA9IG51bGw7XG4gICAgaWYgKG5vZGUpIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWROb2RlID0gbm9kZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogc2V0IG5vZGUgc2VsZWN0ZWQgc3RhdHVzXG4gICAqL1xuICBzZXROb2RlQWN0aXZlKG5vZGU6IE56VHJlZU5vZGUsIGlzTXVsdGlwbGU6IGJvb2xlYW4gPSBmYWxzZSk6IHZvaWQge1xuICAgIGNvbnN0IGlzU2VsZWN0ZWQgPSBub2RlLmlzU2VsZWN0ZWQ7XG4gICAgaWYgKG5vZGUuaXNEaXNhYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIWlzTXVsdGlwbGUpIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWROb2RlTGlzdC5mb3JFYWNoKG4gPT4ge1xuICAgICAgICBuLnNldFNlbGVjdGVkKGZhbHNlKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5zZWxlY3RlZE5vZGVMaXN0ID0gW107XG4gICAgfVxuICAgIG5vZGUuc2V0U2VsZWN0ZWQoIWlzU2VsZWN0ZWQpO1xuICAgIHRoaXMuc2V0U2VsZWN0ZWROb2RlTGlzdChub2RlLCBpc011bHRpcGxlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBhZGQgb3IgcmVtb3ZlIG5vZGUgdG8gc2VsZWN0ZWROb2RlTGlzdFxuICAgKi9cbiAgc2V0U2VsZWN0ZWROb2RlTGlzdChub2RlOiBOelRyZWVOb2RlLCBpc011bHRpcGxlOiBib29sZWFuID0gZmFsc2UpOiB2b2lkIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuc2VsZWN0ZWROb2RlTGlzdC5maW5kSW5kZXgobiA9PiBub2RlLmtleSA9PT0gbi5rZXkpO1xuICAgIGlmIChpc011bHRpcGxlKSB7XG4gICAgICBpZiAobm9kZS5pc1NlbGVjdGVkICYmIGluZGV4ID09PSAtMSkge1xuICAgICAgICB0aGlzLnNlbGVjdGVkTm9kZUxpc3QucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG5vZGUuaXNTZWxlY3RlZCAmJiBpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZE5vZGVMaXN0ID0gWyBub2RlIF07XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghbm9kZS5pc1NlbGVjdGVkICYmIGluZGV4ID4gLTEpIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWROb2RlTGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBtZXJnZSBjaGVja2VkIG5vZGVzXG4gICAqL1xuICBzZXRIYWxmQ2hlY2tlZE5vZGVMaXN0KG5vZGU6IE56VHJlZU5vZGUpOiB2b2lkIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuaGFsZkNoZWNrZWROb2RlTGlzdC5maW5kSW5kZXgobiA9PiBub2RlLmtleSA9PT0gbi5rZXkpO1xuICAgIGlmIChub2RlLmlzSGFsZkNoZWNrZWQgJiYgaW5kZXggPT09IC0xKSB7XG4gICAgICB0aGlzLmhhbGZDaGVja2VkTm9kZUxpc3QucHVzaChub2RlKTtcbiAgICB9IGVsc2UgaWYgKCFub2RlLmlzSGFsZkNoZWNrZWQgJiYgaW5kZXggPiAtMSkge1xuICAgICAgdGhpcy5oYWxmQ2hlY2tlZE5vZGVMaXN0LnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICB9XG5cbiAgc2V0Q2hlY2tlZE5vZGVMaXN0KG5vZGU6IE56VHJlZU5vZGUpOiB2b2lkIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuY2hlY2tlZE5vZGVMaXN0LmZpbmRJbmRleChuID0+IG5vZGUua2V5ID09PSBuLmtleSk7XG4gICAgaWYgKG5vZGUuaXNDaGVja2VkICYmIGluZGV4ID09PSAtMSkge1xuICAgICAgdGhpcy5jaGVja2VkTm9kZUxpc3QucHVzaChub2RlKTtcbiAgICB9IGVsc2UgaWYgKCFub2RlLmlzQ2hlY2tlZCAmJiBpbmRleCA+IC0xKSB7XG4gICAgICB0aGlzLmNoZWNrZWROb2RlTGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBjb25kdWN0IGNoZWNrZWQvc2VsZWN0ZWQvZXhwYW5kZWQga2V5c1xuICAgKi9cbiAgY29uZHVjdE5vZGVTdGF0ZSh0eXBlOiBzdHJpbmcgPSAnY2hlY2snKTogTnpUcmVlTm9kZVtdIHtcbiAgICBjb25zdCByZXN1bHROb2Rlc0xpc3QgPSBbXTtcbiAgICBjb25zdCBsb29wID0gKG5vZGU6IE56VHJlZU5vZGUpID0+IHtcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlICdjaGVjayc6XG4gICAgICAgICAgaWYgKG5vZGUuaXNDaGVja2VkKSB7XG4gICAgICAgICAgICByZXN1bHROb2Rlc0xpc3QucHVzaChub2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCF0aGlzLmNvbmR1Y3RPcHRpb24uaXNDaGVja1N0cmljdGx5KSB7XG4gICAgICAgICAgICBpZiAoIW5vZGUuaXNDaGVja2VkKSB7XG4gICAgICAgICAgICAgIG5vZGUuZ2V0Q2hpbGRyZW4oKS5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgICAgICAgICAgICBsb29wKGNoaWxkKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vZGUuZ2V0Q2hpbGRyZW4oKS5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgICAgICAgICAgbG9vcChjaGlsZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2hhbGZDaGVjayc6XG4gICAgICAgICAgaWYgKCF0aGlzLmNvbmR1Y3RPcHRpb24uaXNDaGVja1N0cmljdGx5KSB7XG4gICAgICAgICAgICBpZiAobm9kZS5pc0hhbGZDaGVja2VkKSB7XG4gICAgICAgICAgICAgIHJlc3VsdE5vZGVzTGlzdC5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICBub2RlLmdldENoaWxkcmVuKCkuZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICAgICAgICAgICAgbG9vcChjaGlsZCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgICAgICBpZiAobm9kZS5pc1NlbGVjdGVkKSB7XG4gICAgICAgICAgICByZXN1bHROb2Rlc0xpc3QucHVzaChub2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbm9kZS5nZXRDaGlsZHJlbigpLmZvckVhY2goY2hpbGQgPT4ge1xuICAgICAgICAgICAgbG9vcChjaGlsZCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2V4cGFuZCc6XG4gICAgICAgICAgaWYgKG5vZGUuaXNFeHBhbmRlZCkge1xuICAgICAgICAgICAgcmVzdWx0Tm9kZXNMaXN0LnB1c2gobm9kZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5vZGUuZ2V0Q2hpbGRyZW4oKS5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgICAgICAgIGxvb3AoY2hpbGQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdtYXRjaCc6XG4gICAgICAgICAgaWYgKG5vZGUuaXNNYXRjaGVkKSB7XG4gICAgICAgICAgICByZXN1bHROb2Rlc0xpc3QucHVzaChub2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbm9kZS5nZXRDaGlsZHJlbigpLmZvckVhY2goY2hpbGQgPT4ge1xuICAgICAgICAgICAgbG9vcChjaGlsZCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLnJvb3ROb2Rlcy5mb3JFYWNoKG5vZGUgPT4ge1xuICAgICAgbG9vcChub2RlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0Tm9kZXNMaXN0O1xuICB9XG5cbiAgLyoqXG4gICAqIHNldCBleHBhbmRlZCBub2Rlc1xuICAgKi9cbiAgc2V0RXhwYW5kZWROb2RlTGlzdChub2RlOiBOelRyZWVOb2RlKTogdm9pZCB7XG4gICAgaWYgKG5vZGUuaXNMZWFmKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5leHBhbmRlZE5vZGVMaXN0LmZpbmRJbmRleChuID0+IG5vZGUua2V5ID09PSBuLmtleSk7XG4gICAgaWYgKG5vZGUuaXNFeHBhbmRlZCAmJiBpbmRleCA9PT0gLTEpIHtcbiAgICAgIHRoaXMuZXhwYW5kZWROb2RlTGlzdC5wdXNoKG5vZGUpO1xuICAgIH0gZWxzZSBpZiAoIW5vZGUuaXNFeHBhbmRlZCAmJiBpbmRleCA+IC0xKSB7XG4gICAgICB0aGlzLmV4cGFuZGVkTm9kZUxpc3Quc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogY2hlY2sgc3RhdGVcbiAgICogQHBhcmFtIG5vZGVcbiAgICovXG4gIHJlZnJlc2hDaGVja1N0YXRlKGlzQ2hlY2tTdHJpY3RseTogYm9vbGVhbiA9IGZhbHNlKTogdm9pZCB7XG4gICAgaWYgKGlzQ2hlY2tTdHJpY3RseSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuY2hlY2tlZE5vZGVMaXN0LmZvckVhY2gobm9kZSA9PiB7XG4gICAgICB0aGlzLmNvbmR1Y3Qobm9kZSk7XG4gICAgfSk7XG4gIH1cblxuICBjb25kdWN0KG5vZGU6IE56VHJlZU5vZGUpOiB2b2lkIHtcbiAgICBjb25zdCBpc0NoZWNrZWQgPSBub2RlLmlzQ2hlY2tlZDtcbiAgICBpZiAobm9kZSkge1xuICAgICAgdGhpcy5jb25kdWN0VXAobm9kZSk7XG4gICAgICB0aGlzLmNvbmR1Y3REb3duKG5vZGUsIGlzQ2hlY2tlZCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIDHDo8KAwoFjaGlsZHJlbiBoYWxmIGNoZWNrZWRcbiAgICogMsOjwoDCgWNoaWxkcmVuIGFsbCBjaGVja2VkLCBwYXJlbnQgY2hlY2tlZFxuICAgKiAzw6PCgMKBbm8gY2hpbGRyZW4gY2hlY2tlZFxuICAgKi9cbiAgY29uZHVjdFVwKG5vZGU6IE56VHJlZU5vZGUpOiB2b2lkIHtcbiAgICBjb25zdCBwYXJlbnROb2RlID0gbm9kZS5nZXRQYXJlbnROb2RlKCk7XG4gICAgLy8gw6XChcKow6fCpsKBw6fClMKow6jCisKCw6fCgsK5w6TCuMKNw6nCgMKJw6TCuMKtXG4gICAgaWYgKHBhcmVudE5vZGUpIHtcbiAgICAgIGlmICghaXNDaGVja0Rpc2FibGVkKHBhcmVudE5vZGUpKSB7XG4gICAgICAgIGlmIChwYXJlbnROb2RlLmdldENoaWxkcmVuKCkuZXZlcnkoY2hpbGQgPT4gaXNDaGVja0Rpc2FibGVkKGNoaWxkKSB8fCAoIWNoaWxkLmlzSGFsZkNoZWNrZWQgJiYgY2hpbGQuaXNDaGVja2VkKSkpIHtcbiAgICAgICAgICBwYXJlbnROb2RlLnNldENoZWNrZWQodHJ1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAocGFyZW50Tm9kZS5nZXRDaGlsZHJlbigpLnNvbWUoY2hpbGQgPT4gY2hpbGQuaXNIYWxmQ2hlY2tlZCB8fCBjaGlsZC5pc0NoZWNrZWQpKSB7XG4gICAgICAgICAgcGFyZW50Tm9kZS5zZXRDaGVja2VkKGZhbHNlLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJlbnROb2RlLnNldENoZWNrZWQoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLnNldEhhbGZDaGVja2VkTm9kZUxpc3QocGFyZW50Tm9kZSk7XG4gICAgICB0aGlzLmNvbmR1Y3RVcChwYXJlbnROb2RlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogcmVzZXQgY2hpbGQgY2hlY2sgc3RhdGVcbiAgICovXG4gIGNvbmR1Y3REb3duKG5vZGU6IE56VHJlZU5vZGUsIHZhbHVlOiBib29sZWFuKTogdm9pZCB7XG4gICAgaWYgKCFpc0NoZWNrRGlzYWJsZWQobm9kZSkpIHtcbiAgICAgIG5vZGUuc2V0Q2hlY2tlZCh2YWx1ZSk7XG4gICAgICBub2RlLmNoaWxkcmVuLmZvckVhY2gobiA9PiB7XG4gICAgICAgIHRoaXMuY29uZHVjdERvd24obiwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIHNlYXJjaCB2YWx1ZSAmIGV4cGFuZCBub2RlXG4gICAqIHNob3VsZCBhZGQgZXhwYW5kbGlzdFxuICAgKi9cbiAgc2VhcmNoRXhwYW5kKHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLm1hdGNoZWROb2RlTGlzdCA9IFtdO1xuICAgIGlmICghaXNOb3ROaWwodmFsdWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIHRvIHJlc2V0IGV4cGFuZGVkTm9kZUxpc3RcbiAgICB0aGlzLmV4cGFuZGVkTm9kZUxpc3QgPSBbXTtcbiAgICBjb25zdCBleHBhbmRQYXJlbnQgPSAocDogTnpUcmVlTm9kZSkgPT4ge1xuICAgICAgLy8gZXhwYW5kIHBhcmVudCBub2RlXG4gICAgICBpZiAocC5nZXRQYXJlbnROb2RlKCkpIHtcbiAgICAgICAgcC5nZXRQYXJlbnROb2RlKCkuc2V0RXhwYW5kZWQodHJ1ZSk7XG4gICAgICAgIHRoaXMuc2V0RXhwYW5kZWROb2RlTGlzdChwLmdldFBhcmVudE5vZGUoKSk7XG4gICAgICAgIGV4cGFuZFBhcmVudChwLmdldFBhcmVudE5vZGUoKSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBzZWFyY2hDaGlsZCA9IChuOiBOelRyZWVOb2RlKSA9PiB7XG4gICAgICBpZiAodmFsdWUgJiYgbi50aXRsZS5pbmNsdWRlcyh2YWx1ZSkpIHtcbiAgICAgICAgLy8gbWF0Y2ggdGhlIG5vZGVcbiAgICAgICAgbi5pc01hdGNoZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLm1hdGNoZWROb2RlTGlzdC5wdXNoKG4pO1xuICAgICAgICAvLyBleHBhbmQgcGFyZW50Tm9kZVxuICAgICAgICBleHBhbmRQYXJlbnQobik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuLmlzTWF0Y2hlZCA9IGZhbHNlO1xuICAgICAgICBuLnNldEV4cGFuZGVkKGZhbHNlKTtcbiAgICAgICAgdGhpcy5zZXRFeHBhbmRlZE5vZGVMaXN0KG4pO1xuICAgICAgfVxuICAgICAgbi5jaGlsZHJlbi5mb3JFYWNoKGcgPT4ge1xuICAgICAgICBzZWFyY2hDaGlsZChnKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgdGhpcy5yb290Tm9kZXMuZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICBzZWFyY2hDaGlsZChjaGlsZCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogZHJhZyBldmVudFxuICAgKi9cbiAgcmVmcmVzaERyYWdOb2RlKG5vZGU6IE56VHJlZU5vZGUpOiB2b2lkIHtcbiAgICBpZiAobm9kZS5nZXRDaGlsZHJlbigpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgLy8gdW50aWwgcm9vdFxuICAgICAgdGhpcy5jb25kdWN0VXAobm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUuY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IHtcbiAgICAgICAgdGhpcy5yZWZyZXNoRHJhZ05vZGUoY2hpbGQpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLy8gcmVzZXQgbm9kZSBsZXZlbFxuICByZXNldE5vZGVMZXZlbChub2RlOiBOelRyZWVOb2RlKTogdm9pZCB7XG4gICAgaWYgKG5vZGUuZ2V0UGFyZW50Tm9kZSgpKSB7XG4gICAgICBub2RlLmxldmVsID0gbm9kZS5nZXRQYXJlbnROb2RlKCkubGV2ZWwgKyAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBub2RlLmxldmVsID0gMDtcbiAgICB9XG4gICAgZm9yIChjb25zdCBjaGlsZCBvZiBub2RlLmdldENoaWxkcmVuKCkpIHtcbiAgICAgIHRoaXMucmVzZXROb2RlTGV2ZWwoY2hpbGQpO1xuICAgIH1cbiAgfVxuXG4gIGNhbGNEcm9wUG9zaXRpb24oZXZlbnQ6IERyYWdFdmVudCk6IG51bWJlciB7XG4gICAgY29uc3QgeyBjbGllbnRZIH0gPSBldmVudDtcbiAgICAvLyB0byBmaXggZmlyZWZveCB1bmRlZmluZWRcbiAgICBjb25zdCB7IHRvcCwgYm90dG9tLCBoZWlnaHQgfSA9IGV2ZW50LnNyY0VsZW1lbnQgPyBldmVudC5zcmNFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIDogKGV2ZW50LnRhcmdldCBhcyBFbGVtZW50KS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjb25zdCBkZXMgPSBNYXRoLm1heChoZWlnaHQgKiB0aGlzLkRSQUdfU0lERV9SQU5HRSwgdGhpcy5EUkFHX01JTl9HQVApO1xuXG4gICAgaWYgKGNsaWVudFkgPD0gdG9wICsgZGVzKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfSBlbHNlIGlmIChjbGllbnRZID49IGJvdHRvbSAtIGRlcykge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICAvKipcbiAgICogZHJvcFxuICAgKiAwOiBpbm5lciAtMTogcHJlIDE6IG5leHRcbiAgICovXG4gIGRyb3BBbmRBcHBseSh0YXJnZXROb2RlOiBOelRyZWVOb2RlLCBkcmFnUG9zOiBudW1iZXIgPSAtMSk6IHZvaWQge1xuICAgIGlmICghdGFyZ2V0Tm9kZSB8fCBkcmFnUG9zID4gMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB0YXJnZXRQYXJlbnQgPSB0YXJnZXROb2RlLmdldFBhcmVudE5vZGUoKTtcbiAgICBjb25zdCBpc1NlbGVjdGVkUm9vdE5vZGUgPSB0aGlzLnNlbGVjdGVkTm9kZS5nZXRQYXJlbnROb2RlKCk7XG4gICAgLy8gcmVtb3ZlIHRoZSBkcmFnTm9kZVxuICAgIGlmIChpc1NlbGVjdGVkUm9vdE5vZGUpIHtcbiAgICAgIGlzU2VsZWN0ZWRSb290Tm9kZS5nZXRDaGlsZHJlbigpLnNwbGljZShpc1NlbGVjdGVkUm9vdE5vZGUuZ2V0Q2hpbGRyZW4oKS5pbmRleE9mKHRoaXMuc2VsZWN0ZWROb2RlKSwgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucm9vdE5vZGVzLnNwbGljZSh0aGlzLnJvb3ROb2Rlcy5pbmRleE9mKHRoaXMuc2VsZWN0ZWROb2RlKSwgMSk7XG4gICAgfVxuICAgIHN3aXRjaCAoZHJhZ1Bvcykge1xuICAgICAgY2FzZSAwOlxuICAgICAgICB0YXJnZXROb2RlLmFkZENoaWxkcmVuKFsgdGhpcy5zZWxlY3RlZE5vZGUgXSk7XG4gICAgICAgIHRoaXMucmVzZXROb2RlTGV2ZWwodGFyZ2V0Tm9kZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAtMTpcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgY29uc3QgdEluZGV4ID0gZHJhZ1BvcyA9PT0gMSA/IDEgOiAwO1xuICAgICAgICBpZiAodGFyZ2V0UGFyZW50KSB7XG4gICAgICAgICAgdGFyZ2V0UGFyZW50LmFkZENoaWxkcmVuKFsgdGhpcy5zZWxlY3RlZE5vZGUgXSwgdGFyZ2V0UGFyZW50LmNoaWxkcmVuLmluZGV4T2YodGFyZ2V0Tm9kZSkgKyB0SW5kZXgpO1xuICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkTm9kZS5nZXRQYXJlbnROb2RlKCkpIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXROb2RlTGV2ZWwodGhpcy5zZWxlY3RlZE5vZGUuZ2V0UGFyZW50Tm9kZSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgdGFyZ2V0SW5kZXggPSB0aGlzLnJvb3ROb2Rlcy5pbmRleE9mKHRhcmdldE5vZGUpICsgdEluZGV4O1xuICAgICAgICAgIC8vIMOmwqDCucOoworCgsOnwoLCucOmwo/CksOlwoXCpVxuICAgICAgICAgIHRoaXMucm9vdE5vZGVzLnNwbGljZSh0YXJnZXRJbmRleCwgMCwgdGhpcy5zZWxlY3RlZE5vZGUpO1xuICAgICAgICAgIHRoaXMucm9vdE5vZGVzWyB0YXJnZXRJbmRleCBdLnBhcmVudE5vZGUgPSBudWxsO1xuICAgICAgICAgIHRoaXMucm9vdE5vZGVzWyB0YXJnZXRJbmRleCBdLmxldmVsID0gMDtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgLy8gZmx1c2ggYWxsIG5vZGVzXG4gICAgdGhpcy5yb290Tm9kZXMuZm9yRWFjaCgoY2hpbGQpID0+IHtcbiAgICAgIHRoaXMucmVmcmVzaERyYWdOb2RlKGNoaWxkKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBlbWl0IFN0cnVjdHVyZVxuICAgKiBldmVudE5hbWVcbiAgICogbm9kZVxuICAgKiBldmVudDogTW91c2VFdmVudCAvIERyYWdFdmVudFxuICAgKiBkcmFnTm9kZVxuICAgKi9cbiAgZm9ybWF0RXZlbnQoZXZlbnROYW1lOiBzdHJpbmcsIG5vZGU6IE56VHJlZU5vZGUsIGV2ZW50OiBNb3VzZUV2ZW50IHwgRHJhZ0V2ZW50KTogTnpGb3JtYXRFbWl0RXZlbnQge1xuICAgIGNvbnN0IGVtaXRTdHJ1Y3R1cmUgPSB7XG4gICAgICAnZXZlbnROYW1lJzogZXZlbnROYW1lLFxuICAgICAgJ25vZGUnICAgICA6IG5vZGUsXG4gICAgICAnZXZlbnQnICAgIDogZXZlbnRcbiAgICB9O1xuICAgIHN3aXRjaCAoZXZlbnROYW1lKSB7XG4gICAgICBjYXNlICdkcmFnc3RhcnQnOlxuICAgICAgY2FzZSAnZHJhZ2VudGVyJzpcbiAgICAgIGNhc2UgJ2RyYWdvdmVyJzpcbiAgICAgIGNhc2UgJ2RyYWdsZWF2ZSc6XG4gICAgICBjYXNlICdkcm9wJzpcbiAgICAgIGNhc2UgJ2RyYWdlbmQnOlxuICAgICAgICBPYmplY3QuYXNzaWduKGVtaXRTdHJ1Y3R1cmUsIHsgJ2RyYWdOb2RlJzogdGhpcy5nZXRTZWxlY3RlZE5vZGUoKSB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdjbGljayc6XG4gICAgICBjYXNlICdkYmxjbGljayc6XG4gICAgICAgIE9iamVjdC5hc3NpZ24oZW1pdFN0cnVjdHVyZSwgeyAnc2VsZWN0ZWRLZXlzJzogdGhpcy5nZXRTZWxlY3RlZE5vZGVMaXN0KCkgfSk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oZW1pdFN0cnVjdHVyZSwgeyAnbm9kZXMnOiB0aGlzLmdldFNlbGVjdGVkTm9kZUxpc3QoKSB9KTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihlbWl0U3RydWN0dXJlLCB7ICdrZXlzJzogdGhpcy5nZXRTZWxlY3RlZE5vZGVMaXN0KCkubWFwKG4gPT4gbi5rZXkpIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2NoZWNrJzpcbiAgICAgICAgT2JqZWN0LmFzc2lnbihlbWl0U3RydWN0dXJlLCB7ICdjaGVja2VkS2V5cyc6IHRoaXMuZ2V0Q2hlY2tlZE5vZGVMaXN0KCkgfSk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oZW1pdFN0cnVjdHVyZSwgeyAnbm9kZXMnOiB0aGlzLmdldENoZWNrZWROb2RlTGlzdCgpIH0pO1xuICAgICAgICBPYmplY3QuYXNzaWduKGVtaXRTdHJ1Y3R1cmUsIHsgJ2tleXMnOiB0aGlzLmdldENoZWNrZWROb2RlTGlzdCgpLm1hcChuID0+IG4ua2V5KSB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdzZWFyY2gnOlxuICAgICAgICBPYmplY3QuYXNzaWduKGVtaXRTdHJ1Y3R1cmUsIHsgJ21hdGNoZWRLZXlzJzogdGhpcy5nZXRNYXRjaGVkTm9kZUxpc3QoKSB9KTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihlbWl0U3RydWN0dXJlLCB7ICdub2Rlcyc6IHRoaXMuZ2V0TWF0Y2hlZE5vZGVMaXN0KCkgfSk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oZW1pdFN0cnVjdHVyZSwgeyAna2V5cyc6IHRoaXMuZ2V0TWF0Y2hlZE5vZGVMaXN0KCkubWFwKG4gPT4gbi5rZXkpIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2V4cGFuZCc6XG4gICAgICAgIE9iamVjdC5hc3NpZ24oZW1pdFN0cnVjdHVyZSwgeyAnbm9kZXMnOiB0aGlzLmdldEV4cGFuZGVkTm9kZUxpc3QoKSB9KTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihlbWl0U3RydWN0dXJlLCB7ICdrZXlzJzogdGhpcy5nZXRFeHBhbmRlZE5vZGVMaXN0KCkubWFwKG4gPT4gbi5rZXkpIH0pO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIGVtaXRTdHJ1Y3R1cmU7XG4gIH1cblxufVxuIiwiaW1wb3J0IHsgYW5pbWF0ZSwgc3RhdGUsIHN0eWxlLCB0cmFuc2l0aW9uLCB0cmlnZ2VyIH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQge1xuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgSG9zdExpc3RlbmVyLFxuICBJbnB1dCxcbiAgTmdab25lLFxuICBPbkNoYW5nZXMsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBPdXRwdXQsXG4gIFJlbmRlcmVyMixcbiAgU2ltcGxlQ2hhbmdlLFxuICBUZW1wbGF0ZVJlZixcbiAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZnJvbUV2ZW50LCBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBJbnB1dEJvb2xlYW4gfSBmcm9tICcuLi9jb3JlL3V0aWwvY29udmVydCc7XG5pbXBvcnQgeyBOekZvcm1hdEJlZm9yZURyb3BFdmVudCwgTnpGb3JtYXRFbWl0RXZlbnQgfSBmcm9tICcuLi90cmVlL2ludGVyZmFjZSc7XG5pbXBvcnQgeyBOelRyZWVOb2RlIH0gZnJvbSAnLi9uei10cmVlLW5vZGUnO1xuaW1wb3J0IHsgaXNDaGVja0Rpc2FibGVkIH0gZnJvbSAnLi9uei10cmVlLXV0aWwnO1xuaW1wb3J0IHsgTnpUcmVlU2VydmljZSB9IGZyb20gJy4vbnotdHJlZS5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yICAgICAgICAgICA6ICduei10cmVlLW5vZGUnLFxuICB0ZW1wbGF0ZVVybCAgICAgICAgOiAnLi9uei10cmVlLW5vZGUuY29tcG9uZW50Lmh0bWwnLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgYW5pbWF0aW9ucyAgICAgICAgIDogW1xuICAgIHRyaWdnZXIoJ25vZGVTdGF0ZScsIFtcbiAgICAgIHN0YXRlKCdpbmFjdGl2ZScsIHN0eWxlKHtcbiAgICAgICAgb3BhY2l0eTogJzAnLFxuICAgICAgICBoZWlnaHQgOiAnMCcsXG4gICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgfSkpLFxuICAgICAgc3RhdGUoJ2FjdGl2ZScsIHN0eWxlKHtcbiAgICAgICAgb3BhY2l0eTogJzEnLFxuICAgICAgICBoZWlnaHQgOiAnKidcbiAgICAgIH0pKSxcbiAgICAgIHRyYW5zaXRpb24oJ2luYWN0aXZlID0+IGFjdGl2ZScsIGFuaW1hdGUoJzEwMG1zIGVhc2UtaW4nKSksXG4gICAgICB0cmFuc2l0aW9uKCdhY3RpdmUgPT4gaW5hY3RpdmUnLCBhbmltYXRlKCcxMDBtcyBlYXNlLW91dCcpKVxuICAgIF0pXG4gIF1cbn0pXG5cbmV4cG9ydCBjbGFzcyBOelRyZWVOb2RlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gIEBWaWV3Q2hpbGQoJ2RyYWdFbGVtZW50JykgZHJhZ0VsZW1lbnQ6IEVsZW1lbnRSZWY7XG5cbiAgQElucHV0KCkgQElucHV0Qm9vbGVhbigpIG56U2hvd0xpbmU6IGJvb2xlYW47XG4gIEBJbnB1dCgpIEBJbnB1dEJvb2xlYW4oKSBuelNob3dFeHBhbmQ6IGJvb2xlYW47XG4gIEBJbnB1dCgpIEBJbnB1dEJvb2xlYW4oKSBuek11bHRpcGxlOiBib29sZWFuO1xuICBASW5wdXQoKSBASW5wdXRCb29sZWFuKCkgbnpDaGVja2FibGU6IGJvb2xlYW47XG4gIEBJbnB1dCgpIEBJbnB1dEJvb2xlYW4oKSBuekFzeW5jRGF0YTogYm9vbGVhbjtcbiAgQElucHV0KCkgQElucHV0Qm9vbGVhbigpIG56Q2hlY2tTdHJpY3RseTogYm9vbGVhbjtcbiAgQElucHV0KCkgQElucHV0Qm9vbGVhbigpIG56SGlkZVVuTWF0Y2hlZCA9IGZhbHNlO1xuICBASW5wdXQoKSBuelRyZWVUZW1wbGF0ZTogVGVtcGxhdGVSZWY8dm9pZD47XG4gIEBJbnB1dCgpIG56QmVmb3JlRHJvcDogKGNvbmZpcm06IE56Rm9ybWF0QmVmb3JlRHJvcEV2ZW50KSA9PiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuXG4gIEBJbnB1dCgpXG4gIHNldCBuelRyZWVOb2RlKHZhbHVlOiBOelRyZWVOb2RlKSB7XG4gICAgLy8gYWRkIHRvIGNoZWNrZWQgbGlzdCAmIHNlbGVjdGVkIGxpc3RcbiAgICBpZiAodmFsdWUuaXNDaGVja2VkKSB7XG4gICAgICB0aGlzLm56VHJlZVNlcnZpY2Uuc2V0Q2hlY2tlZE5vZGVMaXN0KHZhbHVlKTtcbiAgICB9XG4gICAgLy8gYWRkIHNlbGVjdCBsaXN0XG4gICAgaWYgKHZhbHVlLmlzU2VsZWN0ZWQpIHtcbiAgICAgIHRoaXMubnpUcmVlU2VydmljZS5zZXRTZWxlY3RlZE5vZGVMaXN0KHZhbHVlLCB0aGlzLm56TXVsdGlwbGUpO1xuICAgIH1cbiAgICBpZiAoIXZhbHVlLmlzTGVhZikge1xuICAgICAgdGhpcy5uelRyZWVTZXJ2aWNlLnNldEV4cGFuZGVkTm9kZUxpc3QodmFsdWUpO1xuICAgIH1cbiAgICB0aGlzLl9uelRyZWVOb2RlID0gdmFsdWU7XG4gIH1cblxuICBnZXQgbnpUcmVlTm9kZSgpOiBOelRyZWVOb2RlIHtcbiAgICByZXR1cm4gdGhpcy5fbnpUcmVlTm9kZTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekRyYWdnYWJsZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX256RHJhZ2dhYmxlID0gdmFsdWU7XG4gICAgdGhpcy5oYW5kRHJhZ0V2ZW50KCk7XG4gIH1cblxuICBnZXQgbnpEcmFnZ2FibGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX256RHJhZ2dhYmxlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIHVzZVxuICAgKiBuekV4cGFuZEFsbCBpbnN0ZWFkXG4gICAqL1xuICBASW5wdXQoKVxuICBzZXQgbnpEZWZhdWx0RXhwYW5kQWxsKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fbnpFeHBhbmRBbGwgPSB2YWx1ZTtcbiAgICBpZiAodmFsdWUgJiYgdGhpcy5uelRyZWVOb2RlICYmICF0aGlzLm56VHJlZU5vZGUuaXNMZWFmKSB7XG4gICAgICB0aGlzLm56VHJlZU5vZGUuc2V0RXhwYW5kZWQodHJ1ZSk7XG4gICAgICB0aGlzLm56VHJlZVNlcnZpY2Uuc2V0RXhwYW5kZWROb2RlTGlzdCh0aGlzLm56VHJlZU5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBuekRlZmF1bHRFeHBhbmRBbGwoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX256RXhwYW5kQWxsO1xuICB9XG5cbiAgLy8gZGVmYXVsdCBzZXRcbiAgQElucHV0KClcbiAgc2V0IG56RXhwYW5kQWxsKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fbnpFeHBhbmRBbGwgPSB2YWx1ZTtcbiAgICBpZiAodmFsdWUgJiYgdGhpcy5uelRyZWVOb2RlICYmICF0aGlzLm56VHJlZU5vZGUuaXNMZWFmKSB7XG4gICAgICB0aGlzLm56VHJlZU5vZGUuc2V0RXhwYW5kZWQodHJ1ZSk7XG4gICAgICB0aGlzLm56VHJlZVNlcnZpY2Uuc2V0RXhwYW5kZWROb2RlTGlzdCh0aGlzLm56VHJlZU5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBuekV4cGFuZEFsbCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fbnpFeHBhbmRBbGw7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpTZWFyY2hWYWx1ZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5oaWdobGlnaHRLZXlzID0gW107XG4gICAgaWYgKHZhbHVlICYmIHRoaXMubnpUcmVlTm9kZS50aXRsZS5pbmNsdWRlcyh2YWx1ZSkpIHtcbiAgICAgIC8vIG1hdGNoIHRoZSBzZWFyY2ggdmFsdWVcbiAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5uelRyZWVOb2RlLnRpdGxlLmluZGV4T2YodmFsdWUpO1xuICAgICAgdGhpcy5oaWdobGlnaHRLZXlzLnB1c2godGhpcy5uelRyZWVOb2RlLnRpdGxlLnNsaWNlKDAsIGluZGV4KSk7XG4gICAgICB0aGlzLmhpZ2hsaWdodEtleXMucHVzaCh0aGlzLm56VHJlZU5vZGUudGl0bGUuc2xpY2UoaW5kZXggKyB2YWx1ZS5sZW5ndGgsIHRoaXMubnpUcmVlTm9kZS50aXRsZS5sZW5ndGgpKTtcbiAgICB9XG4gICAgdGhpcy5fc2VhcmNoVmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBuelNlYXJjaFZhbHVlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3NlYXJjaFZhbHVlO1xuICB9XG5cbiAgLy8gT3V0cHV0XG4gIEBPdXRwdXQoKSBjbGlja05vZGU6IEV2ZW50RW1pdHRlcjxOekZvcm1hdEVtaXRFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSBkYmxDbGljazogRXZlbnRFbWl0dGVyPE56Rm9ybWF0RW1pdEV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIGNvbnRleHRNZW51OiBFdmVudEVtaXR0ZXI8TnpGb3JtYXRFbWl0RXZlbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgY2xpY2tDaGVja0JveDogRXZlbnRFbWl0dGVyPE56Rm9ybWF0RW1pdEV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIGNsaWNrRXhwYW5kOiBFdmVudEVtaXR0ZXI8TnpGb3JtYXRFbWl0RXZlbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgbnpEcmFnU3RhcnQ6IEV2ZW50RW1pdHRlcjxOekZvcm1hdEVtaXRFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSBuekRyYWdFbnRlcjogRXZlbnRFbWl0dGVyPE56Rm9ybWF0RW1pdEV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIG56RHJhZ092ZXI6IEV2ZW50RW1pdHRlcjxOekZvcm1hdEVtaXRFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSBuekRyYWdMZWF2ZTogRXZlbnRFbWl0dGVyPE56Rm9ybWF0RW1pdEV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIG56RHJvcDogRXZlbnRFbWl0dGVyPE56Rm9ybWF0RW1pdEV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIG56RHJhZ0VuZDogRXZlbnRFbWl0dGVyPE56Rm9ybWF0RW1pdEV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAvLyBkZWZhdWx0IHZhclxuICBwcmVmaXhDbHMgPSAnYW50LXRyZWUnO1xuICBoaWdobGlnaHRLZXlzID0gW107XG4gIG56Tm9kZUNsYXNzID0ge307XG4gIG56Tm9kZVN3aXRjaGVyQ2xhc3MgPSB7fTtcbiAgbnpOb2RlQ29udGVudENsYXNzID0ge307XG4gIG56Tm9kZUNvbnRlbnRJY29uQ2xhc3MgPSB7fTtcbiAgbnpOb2RlQ29udGVudExvYWRpbmdDbGFzcyA9IHt9O1xuICBuek5vZGVDaGlsZHJlbkNsYXNzID0ge307XG5cbiAgLyoqXG4gICAqIGRyYWcgdmFyXG4gICAqL1xuICBkZXN0b3J5JCA9IG5ldyBTdWJqZWN0KCk7XG4gIGRyYWdQb3MgPSAyO1xuICBkcmFnUG9zQ2xhc3M6IG9iamVjdCA9IHtcbiAgICAnMCcgOiAnZHJhZy1vdmVyJyxcbiAgICAnMScgOiAnZHJhZy1vdmVyLWdhcC1ib3R0b20nLFxuICAgICctMSc6ICdkcmFnLW92ZXItZ2FwLXRvcCdcbiAgfTtcblxuICAvKipcbiAgICogZGVmYXVsdCBzZXRcbiAgICovXG4gIF9uelRyZWVOb2RlOiBOelRyZWVOb2RlO1xuICBfc2VhcmNoVmFsdWUgPSAnJztcbiAgX256RXhwYW5kQWxsID0gZmFsc2U7XG4gIF9uekRyYWdnYWJsZSA9IGZhbHNlO1xuICBvbGRBUElJY29uID0gdHJ1ZTtcblxuICBnZXQgbnpJY29uKCk6IHN0cmluZyB7XG4gICAgaWYgKHRoaXMubnpUcmVlTm9kZSAmJiB0aGlzLm56VHJlZU5vZGUub3JpZ2luLmljb24pIHtcbiAgICAgIHRoaXMub2xkQVBJSWNvbiA9IHRoaXMubnpUcmVlTm9kZS5vcmlnaW4uaWNvbi5pbmRleE9mKCdhbnRpY29uJykgPiAtMTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubnpUcmVlTm9kZSAmJiB0aGlzLm56VHJlZU5vZGUub3JpZ2luLmljb247XG4gIH1cblxuICBnZXQgY2FuRHJhZ2dhYmxlKCk6IGJvb2xlYW4gfCBudWxsIHtcbiAgICByZXR1cm4gKHRoaXMubnpEcmFnZ2FibGUgJiYgdGhpcy5uelRyZWVOb2RlICYmICF0aGlzLm56VHJlZU5vZGUuaXNEaXNhYmxlZCkgPyB0cnVlIDogbnVsbDtcbiAgfVxuXG4gIGdldCBpc1Nob3dMaW5lSWNvbigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gIXRoaXMubnpUcmVlTm9kZS5pc0xlYWYgJiYgdGhpcy5uelNob3dMaW5lO1xuICB9XG5cbiAgZ2V0IGlzU2hvd1N3aXRjaEljb24oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICF0aGlzLm56VHJlZU5vZGUuaXNMZWFmICYmICF0aGlzLm56U2hvd0xpbmU7XG4gIH1cblxuICBnZXQgaXNTd2l0Y2hlck9wZW4oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICh0aGlzLm56VHJlZU5vZGUuaXNFeHBhbmRlZCAmJiAhdGhpcy5uelRyZWVOb2RlLmlzTGVhZik7XG4gIH1cblxuICBnZXQgaXNTd2l0Y2hlckNsb3NlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoIXRoaXMubnpUcmVlTm9kZS5pc0V4cGFuZGVkICYmICF0aGlzLm56VHJlZU5vZGUuaXNMZWFmKTtcbiAgfVxuXG4gIGdldCBkaXNwbGF5U3R5bGUoKTogc3RyaW5nIHtcbiAgICAvLyBUT0RPXG4gICAgcmV0dXJuICh0aGlzLm56U2VhcmNoVmFsdWUgJiYgdGhpcy5uekhpZGVVbk1hdGNoZWQgJiYgIXRoaXMubnpUcmVlTm9kZS5pc01hdGNoZWQgJiYgIXRoaXMubnpUcmVlTm9kZS5pc0V4cGFuZGVkKSA/ICdub25lJyA6ICcnO1xuICB9XG5cbiAgLyoqXG4gICAqIHJlc2V0IG5vZGUgY2xhc3NcbiAgICovXG4gIHNldENsYXNzTWFwKCk6IHZvaWQge1xuICAgIHRoaXMubnpOb2RlQ2xhc3MgPSB7XG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xzfS10cmVlbm9kZS1kaXNhYmxlZGAgXTogdGhpcy5uelRyZWVOb2RlLmlzRGlzYWJsZWRcbiAgICB9O1xuICAgIHRoaXMubnpOb2RlU3dpdGNoZXJDbGFzcyA9IHtcbiAgICAgIFsgYCR7dGhpcy5wcmVmaXhDbHN9LXN3aXRjaGVyYCBdICAgICA6IHRydWUsXG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xzfS1zd2l0Y2hlci1ub29wYCBdOiB0aGlzLm56VHJlZU5vZGUuaXNMZWFmXG4gICAgfTtcbiAgICB0aGlzLm56Tm9kZUNvbnRlbnRDbGFzcyA9IHtcbiAgICAgIFsgYCR7dGhpcy5wcmVmaXhDbHN9LW5vZGUtY29udGVudC13cmFwcGVyYCBdOiB0cnVlXG4gICAgfTtcbiAgICB0aGlzLm56Tm9kZUNvbnRlbnRJY29uQ2xhc3MgPSB7XG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xzfS1pY29uRWxlYCBdICAgICAgICA6IHRydWUsXG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xzfS1pY29uX19jdXN0b21pemVgIF06IHRydWVcbiAgICB9O1xuICAgIHRoaXMubnpOb2RlQ29udGVudExvYWRpbmdDbGFzcyA9IHtcbiAgICAgIFsgYCR7dGhpcy5wcmVmaXhDbHN9LWljb25FbGVgIF06IHRydWVcbiAgICB9O1xuICAgIHRoaXMubnpOb2RlQ2hpbGRyZW5DbGFzcyA9IHtcbiAgICAgIFsgYCR7dGhpcy5wcmVmaXhDbHN9LWNoaWxkLXRyZWVgIF0gICAgIDogdHJ1ZSxcbiAgICAgIFsgYCR7dGhpcy5wcmVmaXhDbHN9LWNoaWxkLXRyZWUtb3BlbmAgXTogdHJ1ZVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogY2xpY2sgbm9kZSB0byBzZWxlY3QsIDIwMG1zIHRvIGRibCBjbGlja1xuICAgKi9cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbICckZXZlbnQnIF0pXG4gIG56Q2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGlmICh0aGlzLm56VHJlZU5vZGUuaXNTZWxlY3RhYmxlKSB7XG4gICAgICB0aGlzLm56VHJlZVNlcnZpY2Uuc2V0Tm9kZUFjdGl2ZSh0aGlzLm56VHJlZU5vZGUsIHRoaXMubnpNdWx0aXBsZSk7XG4gICAgfVxuICAgIHRoaXMuY2xpY2tOb2RlLmVtaXQodGhpcy5uelRyZWVTZXJ2aWNlLmZvcm1hdEV2ZW50KCdjbGljaycsIHRoaXMubnpUcmVlTm9kZSwgZXZlbnQpKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2RibGNsaWNrJywgWyAnJGV2ZW50JyBdKVxuICBuekRibENsaWNrKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB0aGlzLmRibENsaWNrLmVtaXQodGhpcy5uelRyZWVTZXJ2aWNlLmZvcm1hdEV2ZW50KCdkYmxjbGljaycsIHRoaXMubnpUcmVlTm9kZSwgZXZlbnQpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gZXZlbnRcbiAgICovXG4gIEBIb3N0TGlzdGVuZXIoJ2NvbnRleHRtZW51JywgWyAnJGV2ZW50JyBdKVxuICBuekNvbnRleHRNZW51KGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB0aGlzLmNvbnRleHRNZW51LmVtaXQodGhpcy5uelRyZWVTZXJ2aWNlLmZvcm1hdEV2ZW50KCdjb250ZXh0bWVudScsIHRoaXMubnpUcmVlTm9kZSwgZXZlbnQpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBjb2xsYXBzZSBub2RlXG4gICAqIEBwYXJhbSBldmVudFxuICAgKi9cbiAgX2NsaWNrRXhwYW5kKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBpZiAoIXRoaXMubnpUcmVlTm9kZS5pc0xvYWRpbmcgJiYgIXRoaXMubnpUcmVlTm9kZS5pc0xlYWYpIHtcbiAgICAgIC8vIHNldCBhc3luYyBzdGF0ZVxuICAgICAgaWYgKHRoaXMubnpBc3luY0RhdGEgJiYgdGhpcy5uelRyZWVOb2RlLmdldENoaWxkcmVuKCkubGVuZ3RoID09PSAwICYmICF0aGlzLm56VHJlZU5vZGUuaXNFeHBhbmRlZCkge1xuICAgICAgICB0aGlzLm56VHJlZU5vZGUuaXNMb2FkaW5nID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHRoaXMubnpUcmVlTm9kZS5zZXRFeHBhbmRlZCghdGhpcy5uelRyZWVOb2RlLmlzRXhwYW5kZWQpO1xuICAgICAgdGhpcy5uelRyZWVTZXJ2aWNlLnNldEV4cGFuZGVkTm9kZUxpc3QodGhpcy5uelRyZWVOb2RlKTtcbiAgICAgIHRoaXMuY2xpY2tFeHBhbmQuZW1pdCh0aGlzLm56VHJlZVNlcnZpY2UuZm9ybWF0RXZlbnQoJ2V4cGFuZCcsIHRoaXMubnpUcmVlTm9kZSwgZXZlbnQpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogY2hlY2sgbm9kZVxuICAgKiBAcGFyYW0gZXZlbnRcbiAgICovXG4gIF9jbGlja0NoZWNrQm94KGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAvLyByZXR1cm4gaWYgbm9kZSBpcyBkaXNhYmxlZFxuICAgIGlmIChpc0NoZWNrRGlzYWJsZWQodGhpcy5uelRyZWVOb2RlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLm56VHJlZU5vZGUuc2V0Q2hlY2tlZCghdGhpcy5uelRyZWVOb2RlLmlzQ2hlY2tlZCk7XG4gICAgdGhpcy5uelRyZWVTZXJ2aWNlLnNldENoZWNrZWROb2RlTGlzdCh0aGlzLm56VHJlZU5vZGUpO1xuICAgIGlmICghdGhpcy5uekNoZWNrU3RyaWN0bHkpIHtcbiAgICAgIHRoaXMubnpUcmVlU2VydmljZS5jb25kdWN0KHRoaXMubnpUcmVlTm9kZSk7XG4gICAgfVxuICAgIHRoaXMuY2xpY2tDaGVja0JveC5lbWl0KHRoaXMubnpUcmVlU2VydmljZS5mb3JtYXRFdmVudCgnY2hlY2snLCB0aGlzLm56VHJlZU5vZGUsIGV2ZW50KSk7XG4gIH1cblxuICAvKipcbiAgICogZHJhZyBldmVudFxuICAgKiBAcGFyYW0gZVxuICAgKi9cbiAgY2xlYXJEcmFnQ2xhc3MoKTogdm9pZCB7XG4gICAgY29uc3QgZHJhZ0NsYXNzID0gWyAnZHJhZy1vdmVyLWdhcC10b3AnLCAnZHJhZy1vdmVyLWdhcC1ib3R0b20nLCAnZHJhZy1vdmVyJyBdO1xuICAgIGRyYWdDbGFzcy5mb3JFYWNoKGUgPT4ge1xuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLmRyYWdFbGVtZW50Lm5hdGl2ZUVsZW1lbnQsIGUpO1xuICAgIH0pO1xuICB9XG5cbiAgaGFuZGxlRHJhZ1N0YXJ0KGU6IERyYWdFdmVudCk6IHZvaWQge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdHJ5IHtcbiAgICAgIC8vIGllIHRocm93IGVycm9yXG4gICAgICAvLyBmaXJlZm94LW5lZWQtaXRcbiAgICAgIGUuZGF0YVRyYW5zZmVyLnNldERhdGEoJ3RleHQvcGxhaW4nLCAnJyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIGVtcHR5XG4gICAgfVxuICAgIHRoaXMubnpUcmVlU2VydmljZS5zZXRTZWxlY3RlZE5vZGUodGhpcy5uelRyZWVOb2RlKTtcbiAgICB0aGlzLm56VHJlZU5vZGUuc2V0RXhwYW5kZWQoZmFsc2UpO1xuICAgIHRoaXMubnpEcmFnU3RhcnQuZW1pdCh0aGlzLm56VHJlZVNlcnZpY2UuZm9ybWF0RXZlbnQoJ2RyYWdzdGFydCcsIG51bGwsIGUpKTtcbiAgfVxuXG4gIGhhbmRsZURyYWdFbnRlcihlOiBEcmFnRXZlbnQpOiB2b2lkIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAvLyByZXNldCBwb3NpdGlvblxuICAgIHRoaXMuZHJhZ1BvcyA9IDI7XG4gICAgdGhpcy5uZ1pvbmUucnVuKCgpID0+IHtcbiAgICAgIGlmICgodGhpcy5uelRyZWVOb2RlICE9PSB0aGlzLm56VHJlZVNlcnZpY2UuZ2V0U2VsZWN0ZWROb2RlKCkpICYmICF0aGlzLm56VHJlZU5vZGUuaXNMZWFmKSB7XG4gICAgICAgIHRoaXMubnpUcmVlTm9kZS5zZXRFeHBhbmRlZCh0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLm56RHJhZ0VudGVyLmVtaXQodGhpcy5uelRyZWVTZXJ2aWNlLmZvcm1hdEV2ZW50KCdkcmFnZW50ZXInLCB0aGlzLm56VHJlZU5vZGUsIGUpKTtcbiAgfVxuXG4gIGhhbmRsZURyYWdPdmVyKGU6IERyYWdFdmVudCk6IHZvaWQge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGNvbnN0IGRyb3BQb3NpdGlvbiA9IHRoaXMubnpUcmVlU2VydmljZS5jYWxjRHJvcFBvc2l0aW9uKGUpO1xuICAgIGlmICh0aGlzLmRyYWdQb3MgIT09IGRyb3BQb3NpdGlvbikge1xuICAgICAgdGhpcy5jbGVhckRyYWdDbGFzcygpO1xuICAgICAgdGhpcy5kcmFnUG9zID0gZHJvcFBvc2l0aW9uO1xuICAgICAgLy8gbGVhZiBub2RlIHdpbGwgcGFzc1xuICAgICAgaWYgKCEodGhpcy5kcmFnUG9zID09PSAwICYmIHRoaXMubnpUcmVlTm9kZS5pc0xlYWYpKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5kcmFnRWxlbWVudC5uYXRpdmVFbGVtZW50LCB0aGlzLmRyYWdQb3NDbGFzc1sgdGhpcy5kcmFnUG9zIF0pO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLm56RHJhZ092ZXIuZW1pdCh0aGlzLm56VHJlZVNlcnZpY2UuZm9ybWF0RXZlbnQoJ2RyYWdvdmVyJywgdGhpcy5uelRyZWVOb2RlLCBlKSk7XG4gIH1cblxuICBoYW5kbGVEcmFnTGVhdmUoZTogRHJhZ0V2ZW50KTogdm9pZCB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB0aGlzLm5nWm9uZS5ydW4oKCkgPT4ge1xuICAgICAgdGhpcy5jbGVhckRyYWdDbGFzcygpO1xuICAgIH0pO1xuICAgIHRoaXMubnpEcmFnTGVhdmUuZW1pdCh0aGlzLm56VHJlZVNlcnZpY2UuZm9ybWF0RXZlbnQoJ2RyYWdsZWF2ZScsIHRoaXMubnpUcmVlTm9kZSwgZSkpO1xuICB9XG5cbiAgaGFuZGxlRHJhZ0Ryb3AoZTogRHJhZ0V2ZW50KTogdm9pZCB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdGhpcy5uZ1pvbmUucnVuKCgpID0+IHtcbiAgICAgIHRoaXMuY2xlYXJEcmFnQ2xhc3MoKTtcbiAgICAgIGlmICh0aGlzLm56VHJlZVNlcnZpY2UuZ2V0U2VsZWN0ZWROb2RlKCkgPT09IHRoaXMubnpUcmVlTm9kZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZHJhZ1BvcyA9PT0gMCAmJiB0aGlzLm56VHJlZU5vZGUuaXNMZWFmKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIHBhc3MgaWYgbm9kZSBpcyBsZWFmTm9cbiAgICAgIGlmICh0aGlzLm56QmVmb3JlRHJvcCkge1xuICAgICAgICB0aGlzLm56QmVmb3JlRHJvcCh7XG4gICAgICAgICAgZHJhZ05vZGU6IHRoaXMubnpUcmVlU2VydmljZS5nZXRTZWxlY3RlZE5vZGUoKSxcbiAgICAgICAgICBub2RlICAgIDogdGhpcy5uelRyZWVOb2RlLFxuICAgICAgICAgIHBvcyAgICAgOiB0aGlzLmRyYWdQb3NcbiAgICAgICAgfSkuc3Vic2NyaWJlKChjYW5Ecm9wOiBib29sZWFuKSA9PiB7XG4gICAgICAgICAgaWYgKGNhbkRyb3ApIHtcbiAgICAgICAgICAgIHRoaXMubnpUcmVlU2VydmljZS5kcm9wQW5kQXBwbHkodGhpcy5uelRyZWVOb2RlLCB0aGlzLmRyYWdQb3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLm56RHJvcC5lbWl0KHRoaXMubnpUcmVlU2VydmljZS5mb3JtYXRFdmVudCgnZHJvcCcsIHRoaXMubnpUcmVlTm9kZSwgZSkpO1xuICAgICAgICAgIHRoaXMubnpEcmFnRW5kLmVtaXQodGhpcy5uelRyZWVTZXJ2aWNlLmZvcm1hdEV2ZW50KCdkcmFnZW5kJywgdGhpcy5uelRyZWVOb2RlLCBlKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLm56VHJlZU5vZGUpIHtcbiAgICAgICAgdGhpcy5uelRyZWVTZXJ2aWNlLmRyb3BBbmRBcHBseSh0aGlzLm56VHJlZU5vZGUsIHRoaXMuZHJhZ1Bvcyk7XG4gICAgICAgIHRoaXMubnpEcm9wLmVtaXQodGhpcy5uelRyZWVTZXJ2aWNlLmZvcm1hdEV2ZW50KCdkcm9wJywgdGhpcy5uelRyZWVOb2RlLCBlKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBoYW5kbGVEcmFnRW5kKGU6IERyYWdFdmVudCk6IHZvaWQge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdGhpcy5uZ1pvbmUucnVuKCgpID0+IHtcbiAgICAgIC8vIGlmIHVzZXIgZG8gbm90IGN1c3RvbSBiZWZvcmVEcm9wXG4gICAgICBpZiAoIXRoaXMubnpCZWZvcmVEcm9wKSB7XG4gICAgICAgIHRoaXMubnpUcmVlU2VydmljZS5zZXRTZWxlY3RlZE5vZGUobnVsbCk7XG4gICAgICAgIHRoaXMubnpEcmFnRW5kLmVtaXQodGhpcy5uelRyZWVTZXJ2aWNlLmZvcm1hdEV2ZW50KCdkcmFnZW5kJywgdGhpcy5uelRyZWVOb2RlLCBlKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogw6fCm8KRw6XCkMKsw6bCi8KWw6bCi8K9w6TCusKLw6TCu8K2XG4gICAqL1xuICBoYW5kRHJhZ0V2ZW50KCk6IHZvaWQge1xuICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIGlmICh0aGlzLm56RHJhZ2dhYmxlKSB7XG4gICAgICAgIHRoaXMuZGVzdG9yeSQgPSBuZXcgU3ViamVjdCgpO1xuICAgICAgICBmcm9tRXZlbnQodGhpcy5lbFJlZi5uYXRpdmVFbGVtZW50LCAnZHJhZ3N0YXJ0JykucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0b3J5JCkpLnN1YnNjcmliZSgoZTogRHJhZ0V2ZW50KSA9PiB0aGlzLmhhbmRsZURyYWdTdGFydChlKSk7XG4gICAgICAgIGZyb21FdmVudCh0aGlzLmVsUmVmLm5hdGl2ZUVsZW1lbnQsICdkcmFnZW50ZXInKS5waXBlKHRha2VVbnRpbCh0aGlzLmRlc3RvcnkkKSkuc3Vic2NyaWJlKChlOiBEcmFnRXZlbnQpID0+IHRoaXMuaGFuZGxlRHJhZ0VudGVyKGUpKTtcbiAgICAgICAgZnJvbUV2ZW50KHRoaXMuZWxSZWYubmF0aXZlRWxlbWVudCwgJ2RyYWdvdmVyJykucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0b3J5JCkpLnN1YnNjcmliZSgoZTogRHJhZ0V2ZW50KSA9PiB0aGlzLmhhbmRsZURyYWdPdmVyKGUpKTtcbiAgICAgICAgZnJvbUV2ZW50KHRoaXMuZWxSZWYubmF0aXZlRWxlbWVudCwgJ2RyYWdsZWF2ZScpLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdG9yeSQpKS5zdWJzY3JpYmUoKGU6IERyYWdFdmVudCkgPT4gdGhpcy5oYW5kbGVEcmFnTGVhdmUoZSkpO1xuICAgICAgICBmcm9tRXZlbnQodGhpcy5lbFJlZi5uYXRpdmVFbGVtZW50LCAnZHJvcCcpLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdG9yeSQpKS5zdWJzY3JpYmUoKGU6IERyYWdFdmVudCkgPT4gdGhpcy5oYW5kbGVEcmFnRHJvcChlKSk7XG4gICAgICAgIGZyb21FdmVudCh0aGlzLmVsUmVmLm5hdGl2ZUVsZW1lbnQsICdkcmFnZW5kJykucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0b3J5JCkpLnN1YnNjcmliZSgoZTogRHJhZ0V2ZW50KSA9PiB0aGlzLmhhbmRsZURyYWdFbmQoZSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kZXN0b3J5JC5uZXh0KCk7XG4gICAgICAgIHRoaXMuZGVzdG9yeSQuY29tcGxldGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbnpUcmVlU2VydmljZTogTnpUcmVlU2VydmljZSwgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLCBwcml2YXRlIGVsUmVmOiBFbGVtZW50UmVmKSB7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnNldENsYXNzTWFwKCk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiB7IFsgcHJvcGVydHlOYW1lOiBzdHJpbmcgXTogU2ltcGxlQ2hhbmdlIH0pOiB2b2lkIHtcbiAgICB0aGlzLnNldENsYXNzTWFwKCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLmRlc3RvcnkkLm5leHQoKTtcbiAgICB0aGlzLmRlc3RvcnkkLmNvbXBsZXRlKCk7XG4gIH1cbn1cbiIsImltcG9ydCB7XG4gIGZvcndhcmRSZWYsXG4gIENvbXBvbmVudCxcbiAgQ29udGVudENoaWxkLFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBPdXRwdXQsXG4gIFNpbXBsZUNoYW5nZSxcbiAgVGVtcGxhdGVSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOR19WQUxVRV9BQ0NFU1NPUiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFJlcGxheVN1YmplY3QsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgaXNOb3ROaWwgfSBmcm9tICcuLi9jb3JlL3V0aWwvY2hlY2snO1xuaW1wb3J0IHsgSW5wdXRCb29sZWFuIH0gZnJvbSAnLi4vY29yZS91dGlsL2NvbnZlcnQnO1xuaW1wb3J0IHsgTnpGb3JtYXRCZWZvcmVEcm9wRXZlbnQsIE56Rm9ybWF0RW1pdEV2ZW50IH0gZnJvbSAnLi4vdHJlZS9pbnRlcmZhY2UnO1xuaW1wb3J0IHsgTnpUcmVlTm9kZSB9IGZyb20gJy4vbnotdHJlZS1ub2RlJztcbmltcG9ydCB7IE56VHJlZVNlcnZpY2UgfSBmcm9tICcuL256LXRyZWUuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgIDogJ256LXRyZWUnLFxuICB0ZW1wbGF0ZVVybDogJy4vbnotdHJlZS5jb21wb25lbnQuaHRtbCcsXG4gIHByb3ZpZGVycyAgOiBbXG4gICAgTnpUcmVlU2VydmljZSxcbiAgICB7XG4gICAgICBwcm92aWRlICAgIDogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBOelRyZWVDb21wb25lbnQpLFxuICAgICAgbXVsdGkgICAgICA6IHRydWVcbiAgICB9XG4gIF1cbn0pXG5cbmV4cG9ydCBjbGFzcyBOelRyZWVDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgQElucHV0KCkgQElucHV0Qm9vbGVhbigpIG56U2hvd0ljb24gPSBmYWxzZTtcbiAgQElucHV0KCkgQElucHV0Qm9vbGVhbigpIG56U2hvd0xpbmUgPSBmYWxzZTtcbiAgQElucHV0KCkgQElucHV0Qm9vbGVhbigpIG56Q2hlY2tTdHJpY3RseSA9IGZhbHNlO1xuICBASW5wdXQoKSBASW5wdXRCb29sZWFuKCkgbnpDaGVja2FibGUgPSBmYWxzZTtcbiAgQElucHV0KCkgQElucHV0Qm9vbGVhbigpIG56U2hvd0V4cGFuZCA9IHRydWU7XG4gIEBJbnB1dCgpIEBJbnB1dEJvb2xlYW4oKSBuekFzeW5jRGF0YSA9IGZhbHNlO1xuICBASW5wdXQoKSBASW5wdXRCb29sZWFuKCkgbnpEcmFnZ2FibGUgPSBmYWxzZTtcbiAgQElucHV0KCkgQElucHV0Qm9vbGVhbigpIG56TXVsdGlwbGUgPSBmYWxzZTtcbiAgQElucHV0KCkgQElucHV0Qm9vbGVhbigpIG56RXhwYW5kQWxsOiBib29sZWFuID0gZmFsc2U7XG4gIEBJbnB1dCgpIEBJbnB1dEJvb2xlYW4oKSBuekhpZGVVbk1hdGNoZWQgPSBmYWxzZTtcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIHVzZVxuICAgKiBuekV4cGFuZEFsbCBpbnN0ZWFkXG4gICAqL1xuICBASW5wdXQoKSBASW5wdXRCb29sZWFuKCkgbnpEZWZhdWx0RXhwYW5kQWxsOiBib29sZWFuID0gZmFsc2U7XG4gIEBJbnB1dCgpIG56QmVmb3JlRHJvcDogKGNvbmZpcm06IE56Rm9ybWF0QmVmb3JlRHJvcEV2ZW50KSA9PiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuXG4gIEBJbnB1dCgpXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgc2V0IG56RGF0YSh2YWx1ZTogYW55W10pIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIGlmICghdGhpcy5uelRyZWVTZXJ2aWNlLmlzQXJyYXlPZk56VHJlZU5vZGUodmFsdWUpKSB7XG4gICAgICAgIC8vIGhhcyBub3QgYmVlbiBuZXcgTnpUcmVlTm9kZVxuICAgICAgICB0aGlzLm56Tm9kZXMgPSB2YWx1ZS5tYXAoaXRlbSA9PiAobmV3IE56VHJlZU5vZGUoaXRlbSkpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubnpOb2RlcyA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgdGhpcy5uelRyZWVTZXJ2aWNlLmNvbmR1Y3RPcHRpb24uaXNDaGVja1N0cmljdGx5ID0gdGhpcy5uekNoZWNrU3RyaWN0bHk7XG4gICAgICB0aGlzLm56VHJlZVNlcnZpY2UuaW5pdFRyZWUodGhpcy5uek5vZGVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignbmdNb2RlbCBvbmx5IGFjY2VwdHMgYW4gYXJyYXkgYW5kIG11c3QgYmUgbm90IGVtcHR5Jyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIHVzZVxuICAgKiBuekV4cGFuZGVkS2V5cyBpbnN0ZWFkXG4gICAqL1xuICBASW5wdXQoKVxuICBzZXQgbnpEZWZhdWx0RXhwYW5kZWRLZXlzKHZhbHVlOiBzdHJpbmdbXSkge1xuICAgIHRoaXMubnpEZWZhdWx0U3ViamVjdC5uZXh0KHsgdHlwZTogJ256RXhwYW5kZWRLZXlzJywga2V5czogdmFsdWUgfSk7XG4gIH1cblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgdXNlXG4gICAqIG56U2VsZWN0ZWRLZXlzIGluc3RlYWRcbiAgICovXG4gIEBJbnB1dCgpXG4gIHNldCBuekRlZmF1bHRTZWxlY3RlZEtleXModmFsdWU6IHN0cmluZ1tdKSB7XG4gICAgdGhpcy5uekRlZmF1bHRTdWJqZWN0Lm5leHQoeyB0eXBlOiAnbnpTZWxlY3RlZEtleXMnLCBrZXlzOiB2YWx1ZSB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCB1c2VcbiAgICogbnpDaGVja2VkS2V5cyBpbnN0ZWFkXG4gICAqL1xuICBASW5wdXQoKVxuICBzZXQgbnpEZWZhdWx0Q2hlY2tlZEtleXModmFsdWU6IHN0cmluZ1tdKSB7XG4gICAgdGhpcy5uekRlZmF1bHRTdWJqZWN0Lm5leHQoeyB0eXBlOiAnbnpDaGVja2VkS2V5cycsIGtleXM6IHZhbHVlIH0pO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG56RXhwYW5kZWRLZXlzKHZhbHVlOiBzdHJpbmdbXSkge1xuICAgIHRoaXMubnpEZWZhdWx0U3ViamVjdC5uZXh0KHsgdHlwZTogJ256RXhwYW5kZWRLZXlzJywga2V5czogdmFsdWUgfSk7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgbnpTZWxlY3RlZEtleXModmFsdWU6IHN0cmluZ1tdKSB7XG4gICAgdGhpcy5uekRlZmF1bHRTdWJqZWN0Lm5leHQoeyB0eXBlOiAnbnpTZWxlY3RlZEtleXMnLCBrZXlzOiB2YWx1ZSB9KTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuekNoZWNrZWRLZXlzKHZhbHVlOiBzdHJpbmdbXSkge1xuICAgIHRoaXMubnpEZWZhdWx0U3ViamVjdC5uZXh0KHsgdHlwZTogJ256Q2hlY2tlZEtleXMnLCBrZXlzOiB2YWx1ZSB9KTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuelNlYXJjaFZhbHVlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9zZWFyY2hWYWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMubnpUcmVlU2VydmljZS5zZWFyY2hFeHBhbmQodmFsdWUpO1xuICAgIGlmIChpc05vdE5pbCh2YWx1ZSkpIHtcbiAgICAgIHRoaXMubnpTZWFyY2hWYWx1ZUNoYW5nZS5lbWl0KHRoaXMubnpUcmVlU2VydmljZS5mb3JtYXRFdmVudCgnc2VhcmNoJywgbnVsbCwgbnVsbCkpO1xuICAgICAgdGhpcy5uek9uU2VhcmNoTm9kZS5lbWl0KHRoaXMubnpUcmVlU2VydmljZS5mb3JtYXRFdmVudCgnc2VhcmNoJywgbnVsbCwgbnVsbCkpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBuelNlYXJjaFZhbHVlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3NlYXJjaFZhbHVlO1xuICB9XG5cbiAgLy8gbW9kZWwgYmluZFxuICBAT3V0cHV0KCkgbnpFeHBhbmRlZEtleXNDaGFuZ2U6IEV2ZW50RW1pdHRlcjxzdHJpbmdbXT4gPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZ1tdPigpO1xuICBAT3V0cHV0KCkgbnpTZWxlY3RlZEtleXNDaGFuZ2U6IEV2ZW50RW1pdHRlcjxzdHJpbmdbXT4gPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZ1tdPigpO1xuICBAT3V0cHV0KCkgbnpDaGVja2VkS2V5c0NoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZ1tdPiA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nW10+KCk7XG5cbiAgQE91dHB1dCgpIG56U2VhcmNoVmFsdWVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxOekZvcm1hdEVtaXRFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCB1c2VcbiAgICogbnpTZWFyY2hWYWx1ZUNoYW5nZSBpbnN0ZWFkXG4gICAqL1xuICBAT3V0cHV0KCkgbnpPblNlYXJjaE5vZGU6IEV2ZW50RW1pdHRlcjxOekZvcm1hdEVtaXRFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgQE91dHB1dCgpIG56Q2xpY2s6IEV2ZW50RW1pdHRlcjxOekZvcm1hdEVtaXRFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSBuekRibENsaWNrOiBFdmVudEVtaXR0ZXI8TnpGb3JtYXRFbWl0RXZlbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgbnpDb250ZXh0TWVudTogRXZlbnRFbWl0dGVyPE56Rm9ybWF0RW1pdEV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIG56Q2hlY2tCb3hDaGFuZ2U6IEV2ZW50RW1pdHRlcjxOekZvcm1hdEVtaXRFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSBuekV4cGFuZENoYW5nZTogRXZlbnRFbWl0dGVyPE56Rm9ybWF0RW1pdEV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBAT3V0cHV0KCkgbnpPbkRyYWdTdGFydDogRXZlbnRFbWl0dGVyPE56Rm9ybWF0RW1pdEV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIG56T25EcmFnRW50ZXI6IEV2ZW50RW1pdHRlcjxOekZvcm1hdEVtaXRFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSBuek9uRHJhZ092ZXI6IEV2ZW50RW1pdHRlcjxOekZvcm1hdEVtaXRFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSBuek9uRHJhZ0xlYXZlOiBFdmVudEVtaXR0ZXI8TnpGb3JtYXRFbWl0RXZlbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgbnpPbkRyb3A6IEV2ZW50RW1pdHRlcjxOekZvcm1hdEVtaXRFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSBuek9uRHJhZ0VuZDogRXZlbnRFbWl0dGVyPE56Rm9ybWF0RW1pdEV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gIEBDb250ZW50Q2hpbGQoJ256VHJlZVRlbXBsYXRlJykgbnpUcmVlVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gIF9zZWFyY2hWYWx1ZSA9IG51bGw7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgbnpEZWZhdWx0U3ViamVjdCA9IG5ldyBSZXBsYXlTdWJqZWN0KDYpO1xuICBuekRlZmF1bHRTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgbnpOb2RlczogTnpUcmVlTm9kZVtdID0gW107XG4gIHByZWZpeENscyA9ICdhbnQtdHJlZSc7XG4gIG56VHJlZUNsYXNzID0ge307XG5cbiAgb25DaGFuZ2U6ICh2YWx1ZTogTnpUcmVlTm9kZVtdKSA9PiB2b2lkID0gKCkgPT4gbnVsbDtcbiAgb25Ub3VjaGVkOiAoKSA9PiB2b2lkID0gKCkgPT4gbnVsbDtcblxuICBnZXRUcmVlTm9kZXMoKTogTnpUcmVlTm9kZVtdIHtcbiAgICByZXR1cm4gdGhpcy5uek5vZGVzO1xuICB9XG5cbiAgLyoqXG4gICAqIHB1YmxpYyBmdW5jdGlvblxuICAgKi9cbiAgZ2V0Q2hlY2tlZE5vZGVMaXN0KCk6IE56VHJlZU5vZGVbXSB7XG4gICAgcmV0dXJuIHRoaXMubnpUcmVlU2VydmljZS5nZXRDaGVja2VkTm9kZUxpc3QoKTtcbiAgfVxuXG4gIGdldFNlbGVjdGVkTm9kZUxpc3QoKTogTnpUcmVlTm9kZVtdIHtcbiAgICByZXR1cm4gdGhpcy5uelRyZWVTZXJ2aWNlLmdldFNlbGVjdGVkTm9kZUxpc3QoKTtcbiAgfVxuXG4gIGdldEhhbGZDaGVja2VkTm9kZUxpc3QoKTogTnpUcmVlTm9kZVtdIHtcbiAgICByZXR1cm4gdGhpcy5uelRyZWVTZXJ2aWNlLmdldEhhbGZDaGVja2VkTm9kZUxpc3QoKTtcbiAgfVxuXG4gIGdldEV4cGFuZGVkTm9kZUxpc3QoKTogTnpUcmVlTm9kZVtdIHtcbiAgICByZXR1cm4gdGhpcy5uelRyZWVTZXJ2aWNlLmdldEV4cGFuZGVkTm9kZUxpc3QoKTtcbiAgfVxuXG4gIGdldE1hdGNoZWROb2RlTGlzdCgpOiBOelRyZWVOb2RlW10ge1xuICAgIHJldHVybiB0aGlzLm56VHJlZVNlcnZpY2UuZ2V0TWF0Y2hlZE5vZGVMaXN0KCk7XG4gIH1cblxuICBzZXRDbGFzc01hcCgpOiB2b2lkIHtcbiAgICB0aGlzLm56VHJlZUNsYXNzID0ge1xuICAgICAgWyB0aGlzLnByZWZpeENscyBdICAgICAgICAgICAgICAgOiB0cnVlLFxuICAgICAgWyB0aGlzLnByZWZpeENscyArICctc2hvdy1saW5lJyBdOiB0aGlzLm56U2hvd0xpbmUsXG4gICAgICBbIGAke3RoaXMucHJlZml4Q2xzfS1pY29uLWhpZGVgIF06ICF0aGlzLm56U2hvd0ljb24sXG4gICAgICBbICdkcmFnZ2FibGUtdHJlZScgXSAgICAgICAgICAgICA6IHRoaXMubnpEcmFnZ2FibGVcbiAgICB9O1xuICB9XG5cbiAgd3JpdGVWYWx1ZSh2YWx1ZTogTnpUcmVlTm9kZVtdKTogdm9pZCB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICB0aGlzLm56Tm9kZXMgPSB2YWx1ZTtcbiAgICAgIHRoaXMubnpUcmVlU2VydmljZS5jb25kdWN0T3B0aW9uLmlzQ2hlY2tTdHJpY3RseSA9IHRoaXMubnpDaGVja1N0cmljdGx5O1xuICAgICAgdGhpcy5uelRyZWVTZXJ2aWNlLmluaXRUcmVlKHRoaXMubnpOb2Rlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ25nTW9kZWwgb25seSBhY2NlcHRzIGFuIGFycmF5IGFuZCBzaG91bGQgYmUgbm90IGVtcHR5Jyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKF86IE56VHJlZU5vZGVbXSkgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMub25DaGFuZ2UgPSBmbjtcbiAgfVxuXG4gIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiAoKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5vblRvdWNoZWQgPSBmbjtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBuelRyZWVTZXJ2aWNlOiBOelRyZWVTZXJ2aWNlKSB7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnNldENsYXNzTWFwKCk7XG4gICAgdGhpcy5uekRlZmF1bHRTdWJzY3JpcHRpb24gPSB0aGlzLm56RGVmYXVsdFN1YmplY3Quc3Vic2NyaWJlKChkYXRhOiB7IHR5cGU6IHN0cmluZywga2V5czogc3RyaW5nW10gfSkgPT4ge1xuICAgICAgaWYgKCFkYXRhIHx8ICFkYXRhLmtleXMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc3dpdGNoIChkYXRhLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnbnpFeHBhbmRlZEtleXMnOlxuICAgICAgICAgIHRoaXMubnpUcmVlU2VydmljZS5jYWxjRXhwYW5kZWRLZXlzKGRhdGEua2V5cywgdGhpcy5uek5vZGVzKTtcbiAgICAgICAgICB0aGlzLm56RXhwYW5kZWRLZXlzQ2hhbmdlLmVtaXQoZGF0YS5rZXlzKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbnpTZWxlY3RlZEtleXMnOlxuICAgICAgICAgIHRoaXMubnpUcmVlU2VydmljZS5jYWxjU2VsZWN0ZWRLZXlzKGRhdGEua2V5cywgdGhpcy5uek5vZGVzLCB0aGlzLm56TXVsdGlwbGUpO1xuICAgICAgICAgIHRoaXMubnpTZWxlY3RlZEtleXNDaGFuZ2UuZW1pdChkYXRhLmtleXMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICduekNoZWNrZWRLZXlzJzpcbiAgICAgICAgICB0aGlzLm56VHJlZVNlcnZpY2UuY2FsY0NoZWNrZWRLZXlzKGRhdGEua2V5cywgdGhpcy5uek5vZGVzLCB0aGlzLm56Q2hlY2tTdHJpY3RseSk7XG4gICAgICAgICAgdGhpcy5uekNoZWNrZWRLZXlzQ2hhbmdlLmVtaXQoZGF0YS5rZXlzKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IHsgWyBwcm9wZXJ0eU5hbWU6IHN0cmluZyBdOiBTaW1wbGVDaGFuZ2UgfSk6IHZvaWQge1xuICAgIGlmIChjaGFuZ2VzLm56Q2hlY2tTdHJpY3RseSkge1xuICAgICAgdGhpcy5uelRyZWVTZXJ2aWNlLmNvbmR1Y3RPcHRpb24uaXNDaGVja1N0cmljdGx5ID0gY2hhbmdlcy5uekNoZWNrU3RyaWN0bHkuY3VycmVudFZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLm56RGVmYXVsdFN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5uekRlZmF1bHRTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgIHRoaXMubnpEZWZhdWx0U3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTnpJY29uTW9kdWxlIH0gZnJvbSAnLi4vaWNvbi9uei1pY29uLm1vZHVsZSc7XG5pbXBvcnQgeyBOelRyZWVOb2RlQ29tcG9uZW50IH0gZnJvbSAnLi9uei10cmVlLW5vZGUuY29tcG9uZW50JztcbmltcG9ydCB7IE56VHJlZUNvbXBvbmVudCB9IGZyb20gJy4vbnotdHJlZS5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzICAgICA6IFtcbiAgICBDb21tb25Nb2R1bGUsXG4gICAgTnpJY29uTW9kdWxlXG4gIF0sXG4gIGRlY2xhcmF0aW9uczogW1xuICAgIE56VHJlZUNvbXBvbmVudCxcbiAgICBOelRyZWVOb2RlQ29tcG9uZW50XG4gIF0sXG4gIGV4cG9ydHMgICAgIDogW1xuICAgIE56VHJlZUNvbXBvbmVudCxcbiAgICBOelRyZWVOb2RlQ29tcG9uZW50XG4gIF1cbn0pXG5cbmV4cG9ydCBjbGFzcyBOelRyZWVNb2R1bGUge1xuXG59XG4iLCJpbXBvcnQge1xuICBhbmltYXRlLFxuICBzdGF0ZSxcbiAgc3R5bGUsXG4gIHRyYW5zaXRpb24sXG4gIHRyaWdnZXIsXG4gIEFuaW1hdGlvblRyaWdnZXJNZXRhZGF0YVxufSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcblxuZXhwb3J0IGNvbnN0IHNlbGVjdERyb3BEb3duQW5pbWF0aW9uOiBBbmltYXRpb25UcmlnZ2VyTWV0YWRhdGEgPSB0cmlnZ2VyKCdzZWxlY3REcm9wRG93bkFuaW1hdGlvbicsIFtcbiAgc3RhdGUoJ2hpZGRlbicsIHN0eWxlKHtcbiAgICBvcGFjaXR5OiAwLFxuICAgIGRpc3BsYXk6ICdub25lJ1xuICB9KSksXG4gIHN0YXRlKCdib3R0b20nLCBzdHlsZSh7XG4gICAgb3BhY2l0eSAgICAgICAgOiAxLFxuICAgIHRyYW5zZm9ybSAgICAgIDogJ3NjYWxlWSgxKScsXG4gICAgdHJhbnNmb3JtT3JpZ2luOiAnMCUgMCUnXG4gIH0pKSxcbiAgc3RhdGUoJ3RvcCcsIHN0eWxlKHtcbiAgICBvcGFjaXR5ICAgICAgICA6IDEsXG4gICAgdHJhbnNmb3JtICAgICAgOiAnc2NhbGVZKDEpJyxcbiAgICB0cmFuc2Zvcm1PcmlnaW46ICcwJSAxMDAlJ1xuICB9KSksXG4gIHRyYW5zaXRpb24oJ2hpZGRlbiA9PiBib3R0b20nLCBbXG4gICAgc3R5bGUoe1xuICAgICAgb3BhY2l0eSAgICAgICAgOiAwLFxuICAgICAgdHJhbnNmb3JtICAgICAgOiAnc2NhbGVZKDAuOCknLFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnMCUgMCUnXG4gICAgfSksXG4gICAgYW5pbWF0ZSgnMTAwbXMgY3ViaWMtYmV6aWVyKDAuNzU1LCAwLjA1LCAwLjg1NSwgMC4wNiknKVxuICBdKSxcbiAgdHJhbnNpdGlvbignYm90dG9tID0+IGhpZGRlbicsIFtcbiAgICBhbmltYXRlKCcxMDBtcyBjdWJpYy1iZXppZXIoMC43NTUsIDAuMDUsIDAuODU1LCAwLjA2KScsIHN0eWxlKHtcbiAgICAgIG9wYWNpdHkgICAgICAgIDogMCxcbiAgICAgIHRyYW5zZm9ybSAgICAgIDogJ3NjYWxlWSgwLjgpJyxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzAlIDAlJ1xuICAgIH0pKVxuICBdKSxcbiAgdHJhbnNpdGlvbignaGlkZGVuID0+IHRvcCcsIFtcbiAgICBzdHlsZSh7XG4gICAgICBvcGFjaXR5ICAgICAgICA6IDAsXG4gICAgICB0cmFuc2Zvcm0gICAgICA6ICdzY2FsZVkoMC44KScsXG4gICAgICB0cmFuc2Zvcm1PcmlnaW46ICcwJSAxMDAlJ1xuICAgIH0pLFxuICAgIGFuaW1hdGUoJzEwMG1zIGN1YmljLWJlemllcigwLjc1NSwgMC4wNSwgMC44NTUsIDAuMDYpJylcbiAgXSksXG4gIHRyYW5zaXRpb24oJ3RvcCA9PiBoaWRkZW4nLCBbXG4gICAgYW5pbWF0ZSgnMTAwbXMgY3ViaWMtYmV6aWVyKDAuNzU1LCAwLjA1LCAwLjg1NSwgMC4wNiknLCBzdHlsZSh7XG4gICAgICBvcGFjaXR5ICAgICAgICA6IDAsXG4gICAgICB0cmFuc2Zvcm0gICAgICA6ICdzY2FsZVkoMC44KScsXG4gICAgICB0cmFuc2Zvcm1PcmlnaW46ICcwJSAxMDAlJ1xuICAgIH0pKVxuICBdKVxuXSk7XG4iLCJpbXBvcnQge1xuICBhbmltYXRlLFxuICBzdGF0ZSxcbiAgc3R5bGUsXG4gIHRyYW5zaXRpb24sXG4gIHRyaWdnZXIsXG4gIEFuaW1hdGlvblRyaWdnZXJNZXRhZGF0YVxufSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcblxuZXhwb3J0IGNvbnN0IHNlbGVjdFRhZ0FuaW1hdGlvbjogQW5pbWF0aW9uVHJpZ2dlck1ldGFkYXRhID0gdHJpZ2dlcignc2VsZWN0VGFnQW5pbWF0aW9uJywgW1xuICBzdGF0ZSgnKicsIHN0eWxlKHsgb3BhY2l0eTogMSwgdHJhbnNmb3JtOiAnc2NhbGUoMSknIH0pKSxcbiAgdHJhbnNpdGlvbigndm9pZCA9PiAqJywgW1xuICAgIHN0eWxlKHsgb3BhY2l0eTogMCwgdHJhbnNmb3JtOiAnc2NhbGUoMCknIH0pLFxuICAgIGFuaW1hdGUoJzE1MG1zIGxpbmVhcicpXG4gIF0pLFxuICBzdGF0ZSgndm9pZCcsIHN0eWxlKHsgb3BhY2l0eTogMCwgdHJhbnNmb3JtOiAnc2NhbGUoMCknIH0pKSxcbiAgdHJhbnNpdGlvbignKiA9PiB2b2lkJywgW1xuICAgIHN0eWxlKHsgb3BhY2l0eTogMSwgdHJhbnNmb3JtOiAnc2NhbGUoMSknIH0pLFxuICAgIGFuaW1hdGUoJzE1MG1zIGxpbmVhcicpXG4gIF0pXG5dKTtcbiIsImltcG9ydCB7IEJBQ0tTUEFDRSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9rZXljb2Rlcyc7XG5pbXBvcnQge1xuICBDb25uZWN0aW9uUG9zaXRpb25QYWlyLFxuICBGbGV4aWJsZUNvbm5lY3RlZFBvc2l0aW9uU3RyYXRlZ3ksXG4gIE92ZXJsYXksXG4gIE92ZXJsYXlDb25maWcsXG4gIE92ZXJsYXlSZWYsXG4gIFBvc2l0aW9uU3RyYXRlZ3lcbn0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgVGVtcGxhdGVQb3J0YWwgfSBmcm9tICdAYW5ndWxhci9jZGsvcG9ydGFsJztcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7XG4gIGZvcndhcmRSZWYsXG4gIEFmdGVyVmlld0luaXQsXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgSG9zdExpc3RlbmVyLFxuICBJbmplY3QsXG4gIElucHV0LFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgT3B0aW9uYWwsXG4gIE91dHB1dCxcbiAgUmVuZGVyZXIyLFxuICBUZW1wbGF0ZVJlZixcbiAgVmlld0NoaWxkLFxuICBWaWV3Q29udGFpbmVyUmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQge1xuICBtZXJnZSxcbiAgb2YgYXMgb2JzZXJ2YWJsZU9mLFxuICBTdWJzY3JpcHRpb25cbn0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgc2VsZWN0RHJvcERvd25BbmltYXRpb24gfSBmcm9tICcuLi9jb3JlL2FuaW1hdGlvbi9zZWxlY3QtZHJvcGRvd24tYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBzZWxlY3RUYWdBbmltYXRpb24gfSBmcm9tICcuLi9jb3JlL2FuaW1hdGlvbi9zZWxlY3QtdGFnLWFuaW1hdGlvbnMnO1xuaW1wb3J0IHsgSW5wdXRCb29sZWFuIH0gZnJvbSAnLi4vY29yZS91dGlsL2NvbnZlcnQnO1xuaW1wb3J0IHsgTnpGb3JtYXRFbWl0RXZlbnQgfSBmcm9tICcuLi90cmVlL2ludGVyZmFjZSc7XG5pbXBvcnQgeyBOelRyZWVOb2RlIH0gZnJvbSAnLi4vdHJlZS9uei10cmVlLW5vZGUnO1xuaW1wb3J0IHsgTnpUcmVlQ29tcG9uZW50IH0gZnJvbSAnLi4vdHJlZS9uei10cmVlLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgIDogJ256LXRyZWUtc2VsZWN0JyxcbiAgYW5pbWF0aW9ucyA6IFsgc2VsZWN0RHJvcERvd25BbmltYXRpb24sIHNlbGVjdFRhZ0FuaW1hdGlvbiBdLFxuICB0ZW1wbGF0ZVVybDogJy4vbnotdHJlZS1zZWxlY3QuY29tcG9uZW50Lmh0bWwnLFxuICBwcm92aWRlcnMgIDogW1xuICAgIHtcbiAgICAgIHByb3ZpZGUgICAgOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IE56VHJlZVNlbGVjdENvbXBvbmVudCksXG4gICAgICBtdWx0aSAgICAgIDogdHJ1ZVxuICAgIH1cbiAgXSxcbiAgaG9zdCAgICAgICA6IHtcbiAgICAnW2NsYXNzLmFudC1zZWxlY3RdJyAgICAgICAgICAgIDogJ3RydWUnLFxuICAgICdbY2xhc3MuYW50LXNlbGVjdC1sZ10nICAgICAgICAgOiAnbnpTaXplPT09XCJsYXJnZVwiJyxcbiAgICAnW2NsYXNzLmFudC1zZWxlY3Qtc21dJyAgICAgICAgIDogJ256U2l6ZT09PVwic21hbGxcIicsXG4gICAgJ1tjbGFzcy5hbnQtc2VsZWN0LWVuYWJsZWRdJyAgICA6ICchbnpEaXNhYmxlZCcsXG4gICAgJ1tjbGFzcy5hbnQtc2VsZWN0LWRpc2FibGVkXScgICA6ICduekRpc2FibGVkJyxcbiAgICAnW2NsYXNzLmFudC1zZWxlY3QtYWxsb3ctY2xlYXJdJzogJ256QWxsb3dDbGVhcicsXG4gICAgJ1tjbGFzcy5hbnQtc2VsZWN0LW9wZW5dJyAgICAgICA6ICduek9wZW4nXG4gIH0sXG4gIHN0eWxlcyAgICAgOiBbIGBcbiAgICAuYW50LXNlbGVjdC1kcm9wZG93biB7XG4gICAgICB0b3A6IDEwMCU7XG4gICAgICBsZWZ0OiAwO1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBtYXJnaW4tdG9wOiA0cHg7XG4gICAgICBtYXJnaW4tYm90dG9tOiA0cHg7XG4gICAgICBvdmVyZmxvdzogYXV0bztcbiAgICB9XG4gIGAgXVxufSlcbmV4cG9ydCBjbGFzcyBOelRyZWVTZWxlY3RDb21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciwgT25Jbml0LCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuXG4gIHByaXZhdGUgbm9kZXMgPSBbXTtcbiAgaXNDb21wb3NpbmcgPSBmYWxzZTtcbiAgaXNEZXN0cm95ID0gdHJ1ZTtcbiAgaW5wdXRWYWx1ZSA9ICcnO1xuICBkcm9wRG93bkNsYXNzTWFwOiB7IFsgY2xhc3NOYW1lOiBzdHJpbmcgXTogYm9vbGVhbiB9O1xuICBkcm9wRG93blBvc2l0aW9uOiAndG9wJyB8ICdjZW50ZXInIHwgJ2JvdHRvbScgPSAnYm90dG9tJztcbiAgb3ZlcmxheVJlZjogT3ZlcmxheVJlZjtcbiAgcG9ydGFsOiBUZW1wbGF0ZVBvcnRhbDx7fT47XG4gIHBvc2l0aW9uU3RyYXRlZ3k6IEZsZXhpYmxlQ29ubmVjdGVkUG9zaXRpb25TdHJhdGVneTtcbiAgb3ZlcmxheUJhY2tkcm9wQ2xpY2tTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgc2VsZWN0aW9uQ2hhbmdlU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgc2VsZWN0ZWROb2RlczogTnpUcmVlTm9kZVtdID0gW107XG4gIHZhbHVlOiBzdHJpbmdbXSA9IFtdO1xuXG4gIEBJbnB1dCgpIEBJbnB1dEJvb2xlYW4oKSBuekFsbG93Q2xlYXIgPSB0cnVlO1xuICBASW5wdXQoKSBASW5wdXRCb29sZWFuKCkgbnpTaG93RXhwYW5kID0gdHJ1ZTtcbiAgQElucHV0KCkgQElucHV0Qm9vbGVhbigpIG56RHJvcGRvd25NYXRjaFNlbGVjdFdpZHRoID0gdHJ1ZTtcbiAgQElucHV0KCkgQElucHV0Qm9vbGVhbigpIG56Q2hlY2thYmxlID0gZmFsc2U7XG4gIEBJbnB1dCgpIEBJbnB1dEJvb2xlYW4oKSBuelNob3dTZWFyY2ggPSBmYWxzZTtcbiAgQElucHV0KCkgQElucHV0Qm9vbGVhbigpIG56RGlzYWJsZWQgPSBmYWxzZTtcbiAgQElucHV0KCkgQElucHV0Qm9vbGVhbigpIG56U2hvd0xpbmUgPSBmYWxzZTtcbiAgQElucHV0KCkgQElucHV0Qm9vbGVhbigpIG56QXN5bmNEYXRhID0gZmFsc2U7XG4gIEBJbnB1dCgpIEBJbnB1dEJvb2xlYW4oKSBuek11bHRpcGxlID0gZmFsc2U7XG4gIEBJbnB1dCgpIEBJbnB1dEJvb2xlYW4oKSBuekRlZmF1bHRFeHBhbmRBbGwgPSBmYWxzZTtcbiAgQElucHV0KCkgbnpPcGVuID0gZmFsc2U7XG4gIEBJbnB1dCgpIG56U2l6ZSA9ICdkZWZhdWx0JztcbiAgQElucHV0KCkgbnpQbGFjZUhvbGRlciA9ICcnO1xuICBASW5wdXQoKSBuekRyb3Bkb3duU3R5bGU6IHsgWyBrZXk6IHN0cmluZyBdOiBzdHJpbmc7IH07XG4gIEBJbnB1dCgpIG56RGVmYXVsdEV4cGFuZGVkS2V5czogc3RyaW5nW10gPSBbXTtcbiAgQElucHV0KCkgbnpEaXNwbGF5V2l0aDogKG5vZGU6IE56VHJlZU5vZGUpID0+IHN0cmluZyA9IChub2RlOiBOelRyZWVOb2RlKSA9PiBub2RlLnRpdGxlO1xuICBAT3V0cHV0KCkgbnpPcGVuQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuICBAT3V0cHV0KCkgbnpDbGVhcmVkID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuICBAT3V0cHV0KCkgbnpSZW1vdmVkID0gbmV3IEV2ZW50RW1pdHRlcjxOelRyZWVOb2RlPigpO1xuICBAT3V0cHV0KCkgbnpFeHBhbmRDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPE56Rm9ybWF0RW1pdEV2ZW50PigpO1xuICBAT3V0cHV0KCkgbnpUcmVlQ2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyPE56Rm9ybWF0RW1pdEV2ZW50PigpO1xuICBAT3V0cHV0KCkgbnpUcmVlQ2hlY2tCb3hDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPE56Rm9ybWF0RW1pdEV2ZW50PigpO1xuXG4gIEBJbnB1dCgpXG4gIHNldCBuek5vZGVzKHZhbHVlOiBOelRyZWVOb2RlW10pIHtcbiAgICB0aGlzLm5vZGVzID0gdmFsdWU7XG4gICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnVwZGF0ZVNlbGVjdGVkTm9kZXMoKSwgMCk7XG4gIH1cblxuICBnZXQgbnpOb2RlcygpOiBOelRyZWVOb2RlW10ge1xuICAgIHJldHVybiB0aGlzLm5vZGVzO1xuICB9XG5cbiAgQFZpZXdDaGlsZCgnaW5wdXRFbGVtZW50JykgaW5wdXRFbGVtZW50OiBFbGVtZW50UmVmO1xuICBAVmlld0NoaWxkKCd0cmVlU2VsZWN0JykgdHJlZVNlbGVjdDogRWxlbWVudFJlZjtcbiAgQFZpZXdDaGlsZCgnZHJvcGRvd25UZW1wbGF0ZScsIHsgcmVhZDogVGVtcGxhdGVSZWYgfSkgZHJvcGRvd25UZW1wbGF0ZTtcbiAgQFZpZXdDaGlsZCgndHJlZVJlZicpIHRyZWVSZWY6IE56VHJlZUNvbXBvbmVudDtcblxuICBvbkNoYW5nZTogKHZhbHVlOiBzdHJpbmdbXSB8IHN0cmluZykgPT4gdm9pZDtcbiAgb25Ub3VjaGVkOiAoKSA9PiB2b2lkID0gKCkgPT4gbnVsbDtcblxuICBnZXQgcGxhY2VIb2xkZXJEaXNwbGF5KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuaW5wdXRWYWx1ZSB8fCB0aGlzLmlzQ29tcG9zaW5nIHx8IHRoaXMuc2VsZWN0ZWROb2Rlcy5sZW5ndGggPyAnbm9uZScgOiAnYmxvY2snO1xuICB9XG5cbiAgZ2V0IHNlYXJjaERpc3BsYXkoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5uek9wZW4gPyAnYmxvY2snIDogJ25vbmUnO1xuICB9XG5cbiAgZ2V0IGlzTXVsdGlwbGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubnpNdWx0aXBsZSB8fCB0aGlzLm56Q2hlY2thYmxlO1xuICB9XG5cbiAgZ2V0IHNlbGVjdGVkVmFsdWVEaXNwbGF5KCk6IHsgWyBrZXk6IHN0cmluZyBdOiBzdHJpbmcgfSB7XG4gICAgbGV0IHNob3dTZWxlY3RlZFZhbHVlID0gZmFsc2U7XG4gICAgbGV0IG9wYWNpdHkgPSAxO1xuICAgIGlmICghdGhpcy5uelNob3dTZWFyY2gpIHtcbiAgICAgIHNob3dTZWxlY3RlZFZhbHVlID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMubnpPcGVuKSB7XG4gICAgICAgIHNob3dTZWxlY3RlZFZhbHVlID0gISh0aGlzLmlucHV0VmFsdWUgfHwgdGhpcy5pc0NvbXBvc2luZyk7XG4gICAgICAgIGlmIChzaG93U2VsZWN0ZWRWYWx1ZSkge1xuICAgICAgICAgIG9wYWNpdHkgPSAwLjQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNob3dTZWxlY3RlZFZhbHVlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3BsYXk6IHNob3dTZWxlY3RlZFZhbHVlID8gJ2Jsb2NrJyA6ICdub25lJyxcbiAgICAgIG9wYWNpdHk6IGAke29wYWNpdHl9YFxuICAgIH07XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBAT3B0aW9uYWwoKSBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIGRvY3VtZW50OiBhbnksIC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8tYW55XG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgcHJpdmF0ZSBvdmVybGF5OiBPdmVybGF5LFxuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZikge1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxuICB0cmlnZ2VyKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLm56RGlzYWJsZWQgfHwgKCF0aGlzLm56RGlzYWJsZWQgJiYgdGhpcy5uek9wZW4pKSB7XG4gICAgICB0aGlzLmNsb3NlRHJvcERvd24oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vcGVuRHJvcGRvd24oKTtcbiAgICAgIGlmICh0aGlzLm56U2hvd1NlYXJjaCkge1xuICAgICAgICB0aGlzLmZvY3VzT25JbnB1dCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG9wZW5Ecm9wZG93bigpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMubnpEaXNhYmxlZCkge1xuICAgICAgdGhpcy5uek9wZW4gPSB0cnVlO1xuICAgICAgdGhpcy5uek9wZW5DaGFuZ2UuZW1pdCh0aGlzLm56T3Blbik7XG4gICAgICB0aGlzLnVwZGF0ZUNka0Nvbm5lY3RlZE92ZXJsYXlTdGF0dXMoKTtcbiAgICAgIHRoaXMudXBkYXRlUG9zaXRpb24oKTtcbiAgICAgIHRoaXMudXBkYXRlRHJvcERvd25DbGFzc01hcCgpO1xuICAgIH1cbiAgfVxuXG4gIGNsb3NlRHJvcERvd24oKTogdm9pZCB7XG4gICAgdGhpcy5vblRvdWNoZWQoKTtcbiAgICB0aGlzLm56T3BlbiA9IGZhbHNlO1xuICAgIHRoaXMubnpPcGVuQ2hhbmdlLmVtaXQodGhpcy5uek9wZW4pO1xuICAgIHRoaXMudXBkYXRlQ2RrQ29ubmVjdGVkT3ZlcmxheVN0YXR1cygpO1xuICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xuICB9XG5cbiAgb25LZXlEb3duSW5wdXQoZTogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgIGNvbnN0IGtleUNvZGUgPSBlLmtleUNvZGU7XG4gICAgY29uc3QgZXZlbnRUYXJnZXQgPSBlLnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgIGlmIChcbiAgICAgIHRoaXMuaXNNdWx0aXBsZSAmJlxuICAgICAgIWV2ZW50VGFyZ2V0LnZhbHVlICYmXG4gICAgICBrZXlDb2RlID09PSBCQUNLU1BBQ0VcbiAgICApIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGlmICh0aGlzLnNlbGVjdGVkTm9kZXMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlU2VsZWN0ZWQodGhpcy5zZWxlY3RlZE5vZGVzWyB0aGlzLnNlbGVjdGVkTm9kZXMubGVuZ3RoIC0gMSBdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzZXRJbnB1dFZhbHVlKHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmlucHV0VmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLnVwZGF0ZUlucHV0V2lkdGgoKTtcbiAgICB0aGlzLnVwZGF0ZVBvc2l0aW9uKCk7XG4gIH1cblxuICBkZXRhY2hPdmVybGF5KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLm92ZXJsYXlSZWYgJiYgdGhpcy5vdmVybGF5UmVmLmhhc0F0dGFjaGVkKCkpIHtcbiAgICAgIHRoaXMub3ZlcmxheVJlZi5kZXRhY2goKTtcbiAgICAgIHRoaXMub3ZlcmxheUJhY2tkcm9wQ2xpY2tTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgIHRoaXMub25Ub3VjaGVkKCk7XG4gICAgICB0aGlzLm56T3BlbiA9IGZhbHNlO1xuICAgICAgdGhpcy5uek9wZW5DaGFuZ2UuZW1pdCh0aGlzLm56T3Blbik7XG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlU2VsZWN0ZWQobm9kZTogTnpUcmVlTm9kZSwgZW1pdDogYm9vbGVhbiA9IHRydWUsIGV2ZW50PzogTW91c2VFdmVudCk6IHZvaWQge1xuICAgIG5vZGUuaXNTZWxlY3RlZCA9IGZhbHNlO1xuICAgIG5vZGUuaXNDaGVja2VkID0gZmFsc2U7XG4gICAgaWYgKHRoaXMubnpDaGVja2FibGUpIHtcbiAgICAgIHRoaXMudHJlZVJlZi5uelRyZWVTZXJ2aWNlLmNvbmR1Y3Qobm9kZSk7XG4gICAgICB0aGlzLnRyZWVSZWYubnpUcmVlU2VydmljZS5zZXRDaGVja2VkTm9kZUxpc3Qobm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudHJlZVJlZi5uelRyZWVTZXJ2aWNlLnNldFNlbGVjdGVkTm9kZUxpc3Qobm9kZSwgdGhpcy5uek11bHRpcGxlKTtcbiAgICB9XG4gICAgaWYgKGVtaXQpIHtcbiAgICAgIHRoaXMubnpSZW1vdmVkLmVtaXQobm9kZSk7XG4gICAgfVxuXG4gICAgLy8gRG8gbm90IHRyaWdnZXIgdGhlIHBvcHVwXG4gICAgaWYgKGV2ZW50ICYmIGV2ZW50LnN0b3BQcm9wYWdhdGlvbikge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgZm9jdXNPbklucHV0KCk6IHZvaWQge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuaW5wdXRFbGVtZW50KSB7XG4gICAgICAgIHRoaXMuaW5wdXRFbGVtZW50Lm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGF0dGFjaE92ZXJsYXkoKTogdm9pZCB7XG4gICAgdGhpcy5wb3J0YWwgPSBuZXcgVGVtcGxhdGVQb3J0YWwodGhpcy5kcm9wZG93blRlbXBsYXRlLCB0aGlzLnZpZXdDb250YWluZXJSZWYpO1xuICAgIHRoaXMub3ZlcmxheVJlZiA9IHRoaXMub3ZlcmxheS5jcmVhdGUodGhpcy5nZXRPdmVybGF5Q29uZmlnKCkpO1xuICAgIHRoaXMub3ZlcmxheVJlZi5hdHRhY2godGhpcy5wb3J0YWwpO1xuICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcbiAgICB0aGlzLm92ZXJsYXlCYWNrZHJvcENsaWNrU3Vic2NyaXB0aW9uID0gdGhpcy5zdWJzY3JpYmVPdmVybGF5QmFja2Ryb3BDbGljaygpO1xuICB9XG5cbiAgZ2V0T3ZlcmxheUNvbmZpZygpOiBPdmVybGF5Q29uZmlnIHtcbiAgICBjb25zdCBvdmVybGF5V2lkdGggPSB0aGlzLnRyZWVTZWxlY3QubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcbiAgICByZXR1cm4gbmV3IE92ZXJsYXlDb25maWcoe1xuICAgICAgcG9zaXRpb25TdHJhdGVneSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5nZXRPdmVybGF5UG9zaXRpb24oKSxcbiAgICAgIHNjcm9sbFN0cmF0ZWd5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMub3ZlcmxheS5zY3JvbGxTdHJhdGVnaWVzLnJlcG9zaXRpb24oKSxcbiAgICAgIFsgdGhpcy5uekRyb3Bkb3duTWF0Y2hTZWxlY3RXaWR0aCA/ICd3aWR0aCcgOiAnbWluV2lkdGgnIF06IG92ZXJsYXlXaWR0aCxcbiAgICAgIGhhc0JhY2tkcm9wICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRydWVcbiAgICB9KTtcbiAgfVxuXG4gIGdldE92ZXJsYXlQb3NpdGlvbigpOiBQb3NpdGlvblN0cmF0ZWd5IHtcbiAgICBjb25zdCBwb3NpdGlvbnMgPSBbXG4gICAgICBuZXcgQ29ubmVjdGlvblBvc2l0aW9uUGFpcih7IG9yaWdpblg6ICdzdGFydCcsIG9yaWdpblk6ICdib3R0b20nIH0sIHsgb3ZlcmxheVg6ICdzdGFydCcsIG92ZXJsYXlZOiAndG9wJyB9KSxcbiAgICAgIG5ldyBDb25uZWN0aW9uUG9zaXRpb25QYWlyKHsgb3JpZ2luWDogJ3N0YXJ0Jywgb3JpZ2luWTogJ3RvcCcgfSwgeyBvdmVybGF5WDogJ3N0YXJ0Jywgb3ZlcmxheVk6ICdib3R0b20nIH0pXG4gICAgXTtcbiAgICB0aGlzLnBvc2l0aW9uU3RyYXRlZ3kgPSB0aGlzLm92ZXJsYXkucG9zaXRpb24oKVxuICAgIC5mbGV4aWJsZUNvbm5lY3RlZFRvKHRoaXMudHJlZVNlbGVjdClcbiAgICAud2l0aFBvc2l0aW9ucyhwb3NpdGlvbnMpXG4gICAgLndpdGhGbGV4aWJsZURpbWVuc2lvbnMoZmFsc2UpXG4gICAgLndpdGhQdXNoKGZhbHNlKTtcbiAgICByZXR1cm4gdGhpcy5wb3NpdGlvblN0cmF0ZWd5O1xuICB9XG5cbiAgc3Vic2NyaWJlT3ZlcmxheUJhY2tkcm9wQ2xpY2soKTogU3Vic2NyaXB0aW9uIHtcbiAgICByZXR1cm4gdGhpcy5vdmVybGF5UmVmLmJhY2tkcm9wQ2xpY2soKVxuICAgIC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy5jbG9zZURyb3BEb3duKCk7XG4gICAgfSk7XG4gIH1cblxuICBzdWJzY3JpYmVTZWxlY3Rpb25DaGFuZ2UoKTogU3Vic2NyaXB0aW9uIHtcbiAgICByZXR1cm4gbWVyZ2UoXG4gICAgICB0aGlzLm56VHJlZUNsaWNrLnBpcGUoXG4gICAgICAgIHRhcCgoZXZlbnQ6IE56Rm9ybWF0RW1pdEV2ZW50KSA9PiB7XG4gICAgICAgICAgY29uc3Qgbm9kZSA9IGV2ZW50Lm5vZGU7XG4gICAgICAgICAgaWYgKHRoaXMubnpDaGVja2FibGUgJiYgIW5vZGUuaXNEaXNhYmxlZCAmJiAhbm9kZS5pc0Rpc2FibGVDaGVja2JveCkge1xuICAgICAgICAgICAgbm9kZS5pc0NoZWNrZWQgPSAhbm9kZS5pc0NoZWNrZWQ7XG4gICAgICAgICAgICB0aGlzLnRyZWVSZWYubnpUcmVlU2VydmljZS5jb25kdWN0KG5vZGUpO1xuICAgICAgICAgICAgdGhpcy50cmVlUmVmLm56VHJlZVNlcnZpY2Uuc2V0Q2hlY2tlZE5vZGVMaXN0KG5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGhpcy5uekNoZWNrYWJsZSkge1xuICAgICAgICAgICAgbm9kZS5pc1NlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICAgZmlsdGVyKChldmVudDogTnpGb3JtYXRFbWl0RXZlbnQpID0+IHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5uekNoZWNrYWJsZSA/ICghZXZlbnQubm9kZS5pc0Rpc2FibGVkICYmICFldmVudC5ub2RlLmlzRGlzYWJsZUNoZWNrYm94KSA6ICFldmVudC5ub2RlLmlzRGlzYWJsZWQ7XG4gICAgICAgIH0pXG4gICAgICApLFxuICAgICAgdGhpcy5uekNoZWNrYWJsZSA/IHRoaXMubnpUcmVlQ2hlY2tCb3hDaGFuZ2UgOiBvYnNlcnZhYmxlT2YoKSxcbiAgICAgIHRoaXMubnpDbGVhcmVkLFxuICAgICAgdGhpcy5uelJlbW92ZWRcbiAgICApLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLnVwZGF0ZVNlbGVjdGVkTm9kZXMoKTtcbiAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5zZWxlY3RlZE5vZGVzLm1hcChub2RlID0+IG5vZGUua2V5KTtcbiAgICAgIHRoaXMudmFsdWUgPSBbIC4uLnZhbHVlIF07XG4gICAgICBpZiAodGhpcy5uelNob3dTZWFyY2gpIHtcbiAgICAgICAgdGhpcy5pbnB1dFZhbHVlID0gJyc7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pc011bHRpcGxlKSB7XG4gICAgICAgIHRoaXMub25DaGFuZ2UodmFsdWUpO1xuICAgICAgICBpZiAodGhpcy5uelNob3dTZWFyY2gpIHtcbiAgICAgICAgICB0aGlzLmZvY3VzT25JbnB1dCgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNsb3NlRHJvcERvd24oKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSh2YWx1ZS5sZW5ndGggPyB2YWx1ZVsgMCBdIDogbnVsbCk7XG4gICAgICB9XG5cbiAgICB9KTtcbiAgfVxuXG4gIHVwZGF0ZVNlbGVjdGVkTm9kZXMoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMudHJlZVJlZikge1xuICAgICAgdGhpcy5zZWxlY3RlZE5vZGVzID0gWyAuLi4odGhpcy5uekNoZWNrYWJsZSA/IHRoaXMudHJlZVJlZi5nZXRDaGVja2VkTm9kZUxpc3QoKSA6IHRoaXMudHJlZVJlZi5nZXRTZWxlY3RlZE5vZGVMaXN0KCkpIF07XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlUG9zaXRpb24oKTogdm9pZCB7XG4gICAgdGhpcy5vdmVybGF5UmVmLnVwZGF0ZVBvc2l0aW9uKCk7XG4gIH1cblxuICB1cGRhdGVJbnB1dFdpZHRoKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzTXVsdGlwbGUgJiYgdGhpcy5pbnB1dEVsZW1lbnQpIHtcbiAgICAgIGlmICh0aGlzLmlucHV0VmFsdWUgfHwgdGhpcy5pc0NvbXBvc2luZykge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuaW5wdXRFbGVtZW50Lm5hdGl2ZUVsZW1lbnQsICd3aWR0aCcsIGAke3RoaXMuaW5wdXRFbGVtZW50Lm5hdGl2ZUVsZW1lbnQuc2Nyb2xsV2lkdGh9cHhgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlU3R5bGUodGhpcy5pbnB1dEVsZW1lbnQubmF0aXZlRWxlbWVudCwgJ3dpZHRoJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgb25DbGVhclNlbGVjdGlvbigpOiB2b2lkIHtcbiAgICB0aGlzLnNlbGVjdGVkTm9kZXMuZm9yRWFjaChub2RlID0+IHtcbiAgICAgIHRoaXMucmVtb3ZlU2VsZWN0ZWQobm9kZSwgZmFsc2UpO1xuICAgIH0pO1xuICAgIHRoaXMubnpDbGVhcmVkLmVtaXQoKTtcbiAgICB0aGlzLmNsb3NlRHJvcERvd24oKTtcbiAgfVxuXG4gIHVwZGF0ZURyb3BEb3duQ2xhc3NNYXAoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMudHJlZVJlZiAmJiAhdGhpcy50cmVlUmVmLm56VHJlZUNsYXNzWyAnYW50LXNlbGVjdC10cmVlJyBdKSB7XG4gICAgICB0aGlzLnRyZWVSZWYubnpUcmVlQ2xhc3MgPSB7IC4uLnRoaXMudHJlZVJlZi5uelRyZWVDbGFzcywgWyAnYW50LXNlbGVjdC10cmVlJyBdOiB0cnVlIH07XG4gICAgfVxuICAgIHRoaXMuZHJvcERvd25DbGFzc01hcCA9IHtcbiAgICAgIFsgJ2FudC1zZWxlY3QtZHJvcGRvd24nIF0gICAgICAgICAgICAgICAgICAgICA6IHRydWUsXG4gICAgICBbICdhbnQtc2VsZWN0LXRyZWUtZHJvcGRvd24nIF0gICAgICAgICAgICAgICAgOiB0cnVlLFxuICAgICAgWyBgYW50LXNlbGVjdC1kcm9wZG93bi0tc2luZ2xlYCBdICAgICAgICAgICAgIDogIXRoaXMubnpNdWx0aXBsZSxcbiAgICAgIFsgYGFudC1zZWxlY3QtZHJvcGRvd24tLW11bHRpcGxlYCBdICAgICAgICAgICA6IHRoaXMubnpNdWx0aXBsZSxcbiAgICAgIFsgYGFudC1zZWxlY3QtZHJvcGRvd24tcGxhY2VtZW50LWJvdHRvbUxlZnRgIF06IHRoaXMuZHJvcERvd25Qb3NpdGlvbiA9PT0gJ2JvdHRvbScsXG4gICAgICBbIGBhbnQtc2VsZWN0LWRyb3Bkb3duLXBsYWNlbWVudC10b3BMZWZ0YCBdICAgOiB0aGlzLmRyb3BEb3duUG9zaXRpb24gPT09ICd0b3AnXG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZUNka0Nvbm5lY3RlZE92ZXJsYXlTdGF0dXMoKTogdm9pZCB7XG4gICAgY29uc3Qgb3ZlcmxheVdpZHRoID0gdGhpcy50cmVlU2VsZWN0Lm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG4gICAgaWYgKHRoaXMubnpEcm9wZG93bk1hdGNoU2VsZWN0V2lkdGgpIHtcbiAgICAgIHRoaXMub3ZlcmxheVJlZi51cGRhdGVTaXplKHsgd2lkdGg6IG92ZXJsYXlXaWR0aCB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vdmVybGF5UmVmLnVwZGF0ZVNpemUoeyBtaW5XaWR0aDogb3ZlcmxheVdpZHRoIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm56T3Blbikge1xuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVTdHlsZSh0aGlzLm92ZXJsYXlSZWYuYmFja2Ryb3BFbGVtZW50LCAnZGlzcGxheScpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMub3ZlcmxheVJlZi5iYWNrZHJvcEVsZW1lbnQsICdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICB9XG4gIH1cblxuICB3cml0ZVZhbHVlKHZhbHVlOiBzdHJpbmdbXSB8IHN0cmluZyk6IHZvaWQge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMuaXNNdWx0aXBsZSAmJiBBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnZhbHVlID0gWyAodmFsdWUgYXMgc3RyaW5nKSBdO1xuICAgICAgfVxuICAgICAgdGhpcy51cGRhdGVTZWxlY3RlZE5vZGVzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudmFsdWUgPSBbXTtcbiAgICAgIHRoaXMuc2VsZWN0ZWROb2Rlcy5mb3JFYWNoKG5vZGUgPT4ge1xuICAgICAgICB0aGlzLnJlbW92ZVNlbGVjdGVkKG5vZGUsIGZhbHNlKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5zZWxlY3RlZE5vZGVzID0gW107XG4gICAgfVxuICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xuICB9XG5cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKF86IHN0cmluZ1tdIHwgc3RyaW5nKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5vbkNoYW5nZSA9IGZuO1xuICB9XG5cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHZvaWQpOiB2b2lkIHtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuaXNEZXN0cm95ID0gZmFsc2U7XG4gICAgdGhpcy5zZWxlY3Rpb25DaGFuZ2VTdWJzY3JpcHRpb24gPSB0aGlzLnN1YnNjcmliZVNlbGVjdGlvbkNoYW5nZSgpO1xuICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgdGhpcy51cGRhdGVEcm9wRG93bkNsYXNzTWFwKCk7XG4gICAgICB0aGlzLnVwZGF0ZUNka0Nvbm5lY3RlZE92ZXJsYXlTdGF0dXMoKTtcbiAgICB9KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuaXNEZXN0cm95ID0gdHJ1ZTtcbiAgICB0aGlzLmRldGFjaE92ZXJsYXkoKTtcbiAgICB0aGlzLnNlbGVjdGlvbkNoYW5nZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIHRoaXMub3ZlcmxheUJhY2tkcm9wQ2xpY2tTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmF0dGFjaE92ZXJsYXkoKTtcbiAgfVxuXG4gIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMubnpEaXNhYmxlZCA9IGlzRGlzYWJsZWQ7XG4gICAgdGhpcy5jbG9zZURyb3BEb3duKCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IE92ZXJsYXlNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jZGsvb3ZlcmxheSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgTnpJY29uTW9kdWxlIH0gZnJvbSAnLi4vaWNvbi9uei1pY29uLm1vZHVsZSc7XG5pbXBvcnQgeyBOelRyZWVNb2R1bGUgfSBmcm9tICcuLi90cmVlL256LXRyZWUubW9kdWxlJztcbmltcG9ydCB7IE56VHJlZVNlbGVjdENvbXBvbmVudCB9IGZyb20gJy4vbnotdHJlZS1zZWxlY3QuY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0cyAgICAgOiBbIENvbW1vbk1vZHVsZSwgT3ZlcmxheU1vZHVsZSwgRm9ybXNNb2R1bGUsIE56VHJlZU1vZHVsZSwgTnpJY29uTW9kdWxlIF0sXG4gIGRlY2xhcmF0aW9uczogWyBOelRyZWVTZWxlY3RDb21wb25lbnQgXSxcbiAgZXhwb3J0cyAgICAgOiBbIE56VHJlZVNlbGVjdENvbXBvbmVudCBdXG59KVxuZXhwb3J0IGNsYXNzIE56VHJlZVNlbGVjdE1vZHVsZSB7XG59XG4iLCJpbXBvcnQgeyBFTlRFUiB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9rZXljb2Rlcyc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwRXZlbnQsIEh0dHBFdmVudFR5cGUsIEh0dHBIZWFkZXJzLCBIdHRwUmVxdWVzdCwgSHR0cFJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgSG9zdExpc3RlbmVyLFxuICBJbnB1dCxcbiAgT25DaGFuZ2VzLFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgT3B0aW9uYWwsXG4gIFZpZXdDaGlsZFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBOelVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UgfSBmcm9tICcuLi9jb3JlL3NlcnZpY2VzL3VwZGF0ZS1ob3N0LWNsYXNzLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBVcGxvYWRGaWxlLCBVcGxvYWRYSFJBcmdzLCBaaXBCdXR0b25PcHRpb25zIH0gZnJvbSAnLi9pbnRlcmZhY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3IgICAgICAgICAgIDogJ1tuei11cGxvYWQtYnRuXScsXG4gIHRlbXBsYXRlVXJsICAgICAgICA6ICcuL256LXVwbG9hZC1idG4uY29tcG9uZW50Lmh0bWwnLFxuICBob3N0ICAgICAgICAgICAgICAgOiB7XG4gICAgJ1thdHRyLnRhYmluZGV4XSc6ICdcIjBcIicsXG4gICAgJ1thdHRyLnJvbGVdJyAgICA6ICdcImJ1dHRvblwiJ1xuICB9LFxuICBwcm92aWRlcnMgICAgICAgICAgOiBbIE56VXBkYXRlSG9zdENsYXNzU2VydmljZSBdLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZVxufSlcbmV4cG9ydCBjbGFzcyBOelVwbG9hZEJ0bkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICByZXFzOiB7IFsga2V5OiBzdHJpbmcgXTogU3Vic2NyaXB0aW9uIH0gPSB7fTtcbiAgcHJpdmF0ZSBpbml0ZWQgPSBmYWxzZTtcbiAgcHJpdmF0ZSBkZXN0cm95ID0gZmFsc2U7XG5cbiAgQFZpZXdDaGlsZCgnZmlsZScpIGZpbGU6IEVsZW1lbnRSZWY7XG5cbiAgLy8gcmVnaW9uOiBmaWVsZHNcbiAgQElucHV0KCkgY2xhc3Nlczoge30gPSB7fTtcbiAgQElucHV0KCkgb3B0aW9uczogWmlwQnV0dG9uT3B0aW9ucztcblxuICAvLyBlbmRyZWdpb25cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxuICBvbkNsaWNrKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZGlzYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgKHRoaXMuZmlsZS5uYXRpdmVFbGVtZW50IGFzIEhUTUxJbnB1dEVsZW1lbnQpLmNsaWNrKCk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdrZXlkb3duJywgWyAnJGV2ZW50JyBdKVxuICBvbktleURvd24oZTogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZGlzYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGUua2V5ID09PSAnRW50ZXInIHx8IGUua2V5Q29kZSA9PT0gRU5URVIpIHtcbiAgICAgIHRoaXMub25DbGljaygpO1xuICAgIH1cbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2Ryb3AnLCBbICckZXZlbnQnIF0pXG4gIEBIb3N0TGlzdGVuZXIoJ2RyYWdvdmVyJywgWyAnJGV2ZW50JyBdKVxuICBvbkZpbGVEcm9wKGU6IERyYWdFdmVudCk6IHZvaWQge1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZGlzYWJsZWQgfHwgZS50eXBlID09PSAnZHJhZ292ZXInKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdGlvbnMuZGlyZWN0b3J5KSB7XG4gICAgICB0aGlzLnRyYXZlcnNlRmlsZVRyZWUoZS5kYXRhVHJhbnNmZXIuaXRlbXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBmaWxlczogRmlsZVtdID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZS5kYXRhVHJhbnNmZXIuZmlsZXMpLmZpbHRlcihcbiAgICAgICAgKGZpbGU6IEZpbGUpID0+IHRoaXMuYXR0ckFjY2VwdChmaWxlLCB0aGlzLm9wdGlvbnMuYWNjZXB0KVxuICAgICAgKTtcbiAgICAgIGlmIChmaWxlcy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy51cGxvYWRGaWxlcyhmaWxlcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbiAgb25DaGFuZ2UoZTogRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLmRpc2FibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGhpZSA9IGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgdGhpcy51cGxvYWRGaWxlcyhoaWUuZmlsZXMpO1xuICAgIGhpZS52YWx1ZSA9ICcnO1xuICB9XG5cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICBwcml2YXRlIHRyYXZlcnNlRmlsZVRyZWUoZmlsZXM6IGFueSk6IHZvaWQge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgICBjb25zdCBfdHJhdmVyc2VGaWxlVHJlZSA9IChpdGVtOiBhbnksIHBhdGg6IHN0cmluZykgPT4ge1xuICAgICAgaWYgKGl0ZW0uaXNGaWxlKSB7XG4gICAgICAgIGl0ZW0uZmlsZSgoZmlsZSkgPT4ge1xuICAgICAgICAgIGlmICh0aGlzLmF0dHJBY2NlcHQoZmlsZSwgdGhpcy5vcHRpb25zLmFjY2VwdCkpIHtcbiAgICAgICAgICAgIHRoaXMudXBsb2FkRmlsZXMoW2ZpbGVdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChpdGVtLmlzRGlyZWN0b3J5KSB7XG4gICAgICAgIGNvbnN0IGRpclJlYWRlciA9IGl0ZW0uY3JlYXRlUmVhZGVyKCk7XG5cbiAgICAgICAgZGlyUmVhZGVyLnJlYWRFbnRyaWVzKChlbnRyaWVzKSA9PiB7XG4gICAgICAgICAgZm9yIChjb25zdCBlbnRyaWVJdGVtIG9mIGVudHJpZXMpIHtcbiAgICAgICAgICAgIF90cmF2ZXJzZUZpbGVUcmVlKGVudHJpZUl0ZW0sIGAke3BhdGh9JHtpdGVtLm5hbWV9L2ApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBmb3IgKGNvbnN0IGZpbGUgb2YgZmlsZXMpIHtcbiAgICAgIF90cmF2ZXJzZUZpbGVUcmVlKGZpbGUud2Via2l0R2V0QXNFbnRyeSgpLCAnJyk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhdHRyQWNjZXB0KGZpbGU6IEZpbGUsIGFjY2VwdGVkRmlsZXM6IHN0cmluZyB8IHN0cmluZ1tdKTogYm9vbGVhbiB7XG4gICAgaWYgKGZpbGUgJiYgYWNjZXB0ZWRGaWxlcykge1xuICAgICAgY29uc3QgYWNjZXB0ZWRGaWxlc0FycmF5ID0gQXJyYXkuaXNBcnJheShhY2NlcHRlZEZpbGVzKSA/IGFjY2VwdGVkRmlsZXMgOiBhY2NlcHRlZEZpbGVzLnNwbGl0KCcsJyk7XG4gICAgICBjb25zdCBmaWxlTmFtZSA9ICcnICsgZmlsZS5uYW1lO1xuICAgICAgY29uc3QgbWltZVR5cGUgPSAnJyArIGZpbGUudHlwZTtcbiAgICAgIGNvbnN0IGJhc2VNaW1lVHlwZSA9IG1pbWVUeXBlLnJlcGxhY2UoL1xcLy4qJC8sICcnKTtcblxuICAgICAgcmV0dXJuIGFjY2VwdGVkRmlsZXNBcnJheS5zb21lKHR5cGUgPT4ge1xuICAgICAgICBjb25zdCB2YWxpZFR5cGUgPSB0eXBlLnRyaW0oKTtcbiAgICAgICAgaWYgKHZhbGlkVHlwZS5jaGFyQXQoMCkgPT09ICcuJykge1xuICAgICAgICAgIHJldHVybiBmaWxlTmFtZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YodmFsaWRUeXBlLnRvTG93ZXJDYXNlKCksIGZpbGVOYW1lLnRvTG93ZXJDYXNlKCkubGVuZ3RoIC0gdmFsaWRUeXBlLnRvTG93ZXJDYXNlKCkubGVuZ3RoKSAhPT0gLTE7XG4gICAgICAgIH0gZWxzZSBpZiAoL1xcL1xcKiQvLnRlc3QodmFsaWRUeXBlKSkge1xuICAgICAgICAgIC8vIFRoaXMgaXMgc29tZXRoaW5nIGxpa2UgYSBpbWFnZS8qIG1pbWUgdHlwZVxuICAgICAgICAgIHJldHVybiBiYXNlTWltZVR5cGUgPT09IHZhbGlkVHlwZS5yZXBsYWNlKC9cXC8uKiQvLCAnJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1pbWVUeXBlID09PSB2YWxpZFR5cGU7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBwcml2YXRlIGF0dGFjaFVpZChmaWxlOiBVcGxvYWRGaWxlKTogVXBsb2FkRmlsZSB7XG4gICAgaWYgKCFmaWxlLnVpZCkge1xuICAgICAgZmlsZS51aWQgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMik7XG4gICAgfVxuICAgIHJldHVybiBmaWxlO1xuICB9XG5cbiAgdXBsb2FkRmlsZXMoZmlsZUxpc3Q6IEZpbGVMaXN0IHwgRmlsZVtdKTogdm9pZCB7XG4gICAgbGV0IHBvc3RGaWxlczogVXBsb2FkRmlsZVtdID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZmlsZUxpc3QpO1xuICAgIHRoaXMub3B0aW9ucy5maWx0ZXJzLmZvckVhY2goZiA9PiBwb3N0RmlsZXMgPSBmLmZuKHBvc3RGaWxlcykpO1xuICAgIHBvc3RGaWxlcy5mb3JFYWNoKChmaWxlOiBVcGxvYWRGaWxlKSA9PiB7XG4gICAgICB0aGlzLmF0dGFjaFVpZChmaWxlKTtcbiAgICAgIHRoaXMudXBsb2FkKGZpbGUsIHBvc3RGaWxlcyk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHVwbG9hZChmaWxlOiBVcGxvYWRGaWxlLCBmaWxlTGlzdDogVXBsb2FkRmlsZVtdKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuYmVmb3JlVXBsb2FkKSB7XG4gICAgICByZXR1cm4gdGhpcy5wb3N0KGZpbGUpO1xuICAgIH1cbiAgICBjb25zdCBiZWZvcmUgPSB0aGlzLm9wdGlvbnMuYmVmb3JlVXBsb2FkKGZpbGUsIGZpbGVMaXN0KTtcbiAgICBpZiAoYmVmb3JlIGluc3RhbmNlb2YgT2JzZXJ2YWJsZSkge1xuICAgICAgYmVmb3JlLnN1YnNjcmliZSgocHJvY2Vzc2VkRmlsZTogVXBsb2FkRmlsZSkgPT4ge1xuICAgICAgICBjb25zdCBwcm9jZXNzZWRGaWxlVHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9jZXNzZWRGaWxlKTtcbiAgICAgICAgaWYgKHByb2Nlc3NlZEZpbGVUeXBlID09PSAnW29iamVjdCBGaWxlXScgfHwgcHJvY2Vzc2VkRmlsZVR5cGUgPT09ICdbb2JqZWN0IEJsb2JdJykge1xuICAgICAgICAgIHRoaXMuYXR0YWNoVWlkKHByb2Nlc3NlZEZpbGUpO1xuICAgICAgICAgIHRoaXMucG9zdChwcm9jZXNzZWRGaWxlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2Vzc2VkRmlsZSA9PT0gJ2Jvb2xlYW4nICYmIHByb2Nlc3NlZEZpbGUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgdGhpcy5wb3N0KGZpbGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGJlZm9yZSAhPT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiB0aGlzLnBvc3QoZmlsZSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBwb3N0KGZpbGU6IFVwbG9hZEZpbGUpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5kZXN0cm95KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG9wdCA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCB7IHVpZCB9ID0gZmlsZTtcbiAgICBsZXQgeyBkYXRhLCBoZWFkZXJzIH0gPSBvcHQ7XG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBkYXRhID0gKGRhdGEgYXMgKGZpbGU6IFVwbG9hZEZpbGUpID0+IHt9KShmaWxlKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBoZWFkZXJzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBoZWFkZXJzID0gKGhlYWRlcnMgYXMgKGZpbGU6IFVwbG9hZEZpbGUpID0+IHt9KShmaWxlKTtcbiAgICB9XG4gICAgY29uc3QgYXJnczogVXBsb2FkWEhSQXJncyA9IHtcbiAgICAgIGFjdGlvbiAgICAgICAgIDogb3B0LmFjdGlvbixcbiAgICAgIG5hbWUgICAgICAgICAgIDogb3B0Lm5hbWUsXG4gICAgICBoZWFkZXJzLFxuICAgICAgZmlsZSxcbiAgICAgIGRhdGEsXG4gICAgICB3aXRoQ3JlZGVudGlhbHM6IG9wdC53aXRoQ3JlZGVudGlhbHMsXG4gICAgICBvblByb2dyZXNzICAgICA6IG9wdC5vblByb2dyZXNzID8gZSA9PiB7XG4gICAgICAgIG9wdC5vblByb2dyZXNzKGUsIGZpbGUpO1xuICAgICAgfSA6IG51bGwsXG4gICAgICBvblN1Y2Nlc3MgICAgICA6IChyZXQsIHhocikgPT4ge1xuICAgICAgICB0aGlzLmNsZWFuKHVpZCk7XG4gICAgICAgIG9wdC5vblN1Y2Nlc3MocmV0LCBmaWxlLCB4aHIpO1xuICAgICAgfSxcbiAgICAgIG9uRXJyb3IgICAgICAgIDogKHhocikgPT4ge1xuICAgICAgICB0aGlzLmNsZWFuKHVpZCk7XG4gICAgICAgIG9wdC5vbkVycm9yKHhociwgZmlsZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCByZXEkID0gKG9wdC5jdXN0b21SZXF1ZXN0IHx8IHRoaXMueGhyKS5jYWxsKHRoaXMsIGFyZ3MpO1xuICAgIGlmICghKHJlcSQgaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24pKSB7XG4gICAgICBjb25zb2xlLndhcm4oYE11c3QgcmV0dXJuIFN1YnNjcmlwdGlvbiB0eXBlIGluICdbbnpDdXN0b21SZXF1ZXN0XScgcHJvcGVydHlgKTtcbiAgICB9XG4gICAgdGhpcy5yZXFzWyB1aWQgXSA9IHJlcSQ7XG4gICAgb3B0Lm9uU3RhcnQoZmlsZSk7XG4gIH1cblxuICBwcml2YXRlIHhocihhcmdzOiBVcGxvYWRYSFJBcmdzKTogU3Vic2NyaXB0aW9uIHtcbiAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgICBmb3JtRGF0YS5hcHBlbmQoYXJncy5uYW1lLCBhcmdzLmZpbGUgYXMgYW55KTtcbiAgICBpZiAoYXJncy5kYXRhKSB7XG4gICAgICBPYmplY3Qua2V5cyhhcmdzLmRhdGEpLm1hcChrZXkgPT4ge1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQoa2V5LCBhcmdzLmRhdGFbIGtleSBdKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoIWFyZ3MuaGVhZGVycykge1xuICAgICAgYXJncy5oZWFkZXJzID0ge307XG4gICAgfVxuICAgIGlmIChhcmdzLmhlYWRlcnNbICdYLVJlcXVlc3RlZC1XaXRoJyBdICE9PSBudWxsKSB7XG4gICAgICBhcmdzLmhlYWRlcnNbICdYLVJlcXVlc3RlZC1XaXRoJyBdID0gYFhNTEh0dHBSZXF1ZXN0YDtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIGFyZ3MuaGVhZGVyc1sgJ1gtUmVxdWVzdGVkLVdpdGgnIF07XG4gICAgfVxuICAgIGNvbnN0IHJlcSA9IG5ldyBIdHRwUmVxdWVzdCgnUE9TVCcsIGFyZ3MuYWN0aW9uLCBmb3JtRGF0YSwge1xuICAgICAgcmVwb3J0UHJvZ3Jlc3MgOiB0cnVlLFxuICAgICAgd2l0aENyZWRlbnRpYWxzOiBhcmdzLndpdGhDcmVkZW50aWFscyxcbiAgICAgIGhlYWRlcnMgICAgICAgIDogbmV3IEh0dHBIZWFkZXJzKGFyZ3MuaGVhZGVycylcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5odHRwLnJlcXVlc3QocmVxKS5zdWJzY3JpYmUoKGV2ZW50OiBIdHRwRXZlbnQ8e30+KSA9PiB7XG4gICAgICBpZiAoZXZlbnQudHlwZSA9PT0gSHR0cEV2ZW50VHlwZS5VcGxvYWRQcm9ncmVzcykge1xuICAgICAgICBpZiAoZXZlbnQudG90YWwgPiAwKSB7XG4gICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICAgICAgICAgIChldmVudCBhcyBhbnkpLnBlcmNlbnQgPSBldmVudC5sb2FkZWQgLyBldmVudC50b3RhbCAqIDEwMDtcbiAgICAgICAgfVxuICAgICAgICBhcmdzLm9uUHJvZ3Jlc3MoZXZlbnQsIGFyZ3MuZmlsZSk7XG4gICAgICB9IGVsc2UgaWYgKGV2ZW50IGluc3RhbmNlb2YgSHR0cFJlc3BvbnNlKSB7XG4gICAgICAgIGFyZ3Mub25TdWNjZXNzKGV2ZW50LmJvZHksIGFyZ3MuZmlsZSwgZXZlbnQpO1xuICAgICAgfVxuICAgIH0sIChlcnIpID0+IHtcbiAgICAgIHRoaXMuYWJvcnQoYXJncy5maWxlKTtcbiAgICAgIGFyZ3Mub25FcnJvcihlcnIsIGFyZ3MuZmlsZSk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGNsZWFuKHVpZDogc3RyaW5nKTogdm9pZCB7XG4gICAgY29uc3QgcmVxJCA9IHRoaXMucmVxc1sgdWlkIF07XG4gICAgaWYgKHJlcSQgaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24pIHtcbiAgICAgIHJlcSQudW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gICAgZGVsZXRlIHRoaXMucmVxc1sgdWlkIF07XG4gIH1cblxuICBhYm9ydChmaWxlPzogVXBsb2FkRmlsZSk6IHZvaWQge1xuICAgIGlmIChmaWxlKSB7XG4gICAgICB0aGlzLmNsZWFuKGZpbGUgJiYgZmlsZS51aWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBPYmplY3Qua2V5cyh0aGlzLnJlcXMpLmZvckVhY2goKHVpZCkgPT4gdGhpcy5jbGVhbih1aWQpKTtcbiAgICB9XG4gIH1cblxuICAvLyByZWdpb246IHN0eWxlc1xuICBwcml2YXRlIHByZWZpeENscyA9ICdhbnQtdXBsb2FkJztcblxuICBzZXRDbGFzc01hcCgpOiB2b2lkIHtcbiAgICBjb25zdCBjbGFzc01hcCA9IHtcbiAgICAgIFsgdGhpcy5wcmVmaXhDbHMgXSAgICAgICAgICAgICAgOiB0cnVlLFxuICAgICAgWyBgJHt0aGlzLnByZWZpeENsc30tZGlzYWJsZWRgIF06IHRoaXMub3B0aW9ucy5kaXNhYmxlZCxcbiAgICAgIC4uLnRoaXMuY2xhc3Nlc1xuICAgIH07XG4gICAgdGhpcy51cGRhdGVIb3N0Q2xhc3NTZXJ2aWNlLnVwZGF0ZUhvc3RDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIGNsYXNzTWFwKTtcbiAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcbiAgfVxuXG4gIC8vIGVuZHJlZ2lvblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgdXBkYXRlSG9zdENsYXNzU2VydmljZTogTnpVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlLCBwcml2YXRlIGNkOiBDaGFuZ2VEZXRlY3RvclJlZikge1xuICAgIGlmICghaHR0cCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBOb3QgZm91bmQgJ0h0dHBDbGllbnQnLCBZb3UgY2FuIGltcG9ydCAnSHR0cENsaWVudE1vZHVsZScgaW4geW91ciByb290IG1vZHVsZS5gKTtcbiAgICB9XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmluaXRlZCA9IHRydWU7XG4gICAgdGhpcy5zZXRDbGFzc01hcCgpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaW5pdGVkKSB7XG4gICAgICB0aGlzLnNldENsYXNzTWFwKCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5kZXN0cm95ID0gdHJ1ZTtcbiAgICB0aGlzLmFib3J0KCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IGFuaW1hdGUsIHN0eWxlLCB0cmFuc2l0aW9uLCB0cmlnZ2VyIH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIElucHV0LCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZSwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBOelVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UgfSBmcm9tICcuLi9jb3JlL3NlcnZpY2VzL3VwZGF0ZS1ob3N0LWNsYXNzLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBTaG93VXBsb2FkTGlzdEludGVyZmFjZSwgVXBsb2FkRmlsZSwgVXBsb2FkTGlzdFR5cGUgfSBmcm9tICcuL2ludGVyZmFjZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICAgICAgOiAnbnotdXBsb2FkLWxpc3QnLFxuICB0ZW1wbGF0ZVVybCAgICAgICAgOiAnLi9uei11cGxvYWQtbGlzdC5jb21wb25lbnQuaHRtbCcsXG4gIHByb3ZpZGVycyAgICAgICAgICA6IFsgTnpVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlIF0sXG4gIGFuaW1hdGlvbnMgICAgICAgICA6IFtcbiAgICB0cmlnZ2VyKCdpdGVtU3RhdGUnLCBbXG4gICAgICB0cmFuc2l0aW9uKCc6ZW50ZXInLCBbXG4gICAgICAgIHN0eWxlKHsgaGVpZ2h0OiAnMCcsIHdpZHRoOiAnMCcsIG9wYWNpdHk6IDAgfSksXG4gICAgICAgIGFuaW1hdGUoMTUwLCBzdHlsZSh7IGhlaWdodDogJyonLCB3aWR0aDogJyonLCBvcGFjaXR5OiAxIH0pKVxuICAgICAgXSksXG4gICAgICB0cmFuc2l0aW9uKCc6bGVhdmUnLCBbXG4gICAgICAgIGFuaW1hdGUoMTUwLCBzdHlsZSh7IGhlaWdodDogJzAnLCB3aWR0aDogJzAnLCBvcGFjaXR5OiAwIH0pKVxuICAgICAgXSlcbiAgICBdKVxuICBdLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZVxufSlcbmV4cG9ydCBjbGFzcyBOelVwbG9hZExpc3RDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICAvLyByZWdpb246IGZpZWxkc1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gIEBJbnB1dCgpIGxvY2FsZTogYW55ID0ge307XG4gIEBJbnB1dCgpIGxpc3RUeXBlOiBVcGxvYWRMaXN0VHlwZTtcbiAgQElucHV0KCkgaXRlbXM6IFVwbG9hZEZpbGVbXTtcbiAgQElucHV0KCkgaWNvbnM6IFNob3dVcGxvYWRMaXN0SW50ZXJmYWNlO1xuICBASW5wdXQoKSBvblByZXZpZXc6IChmaWxlOiBVcGxvYWRGaWxlKSA9PiB2b2lkO1xuICBASW5wdXQoKSBvblJlbW92ZTogKGZpbGU6IFVwbG9hZEZpbGUpID0+IHZvaWQ7XG5cbiAgLy8gZW5kcmVnaW9uXG4gIC8vIHJlZ2lvbjogc3R5bGVzXG4gIHByaXZhdGUgcHJlZml4Q2xzID0gJ2FudC11cGxvYWQtbGlzdCc7XG5cbiAgc2V0Q2xhc3NNYXAoKTogdm9pZCB7XG4gICAgY29uc3QgY2xhc3NNYXAgPSB7XG4gICAgICBbIHRoaXMucHJlZml4Q2xzIF0gICAgICAgICAgICAgICAgICAgICAgOiB0cnVlLFxuICAgICAgWyBgJHt0aGlzLnByZWZpeENsc30tJHt0aGlzLmxpc3RUeXBlfWAgXTogdHJ1ZVxuICAgIH07XG4gICAgdGhpcy51cGRhdGVIb3N0Q2xhc3NTZXJ2aWNlLnVwZGF0ZUhvc3RDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIGNsYXNzTWFwKTtcbiAgfVxuXG4gIC8vIGVuZHJlZ2lvblxuICAvLyByZWdpb246IHJlbmRlclxuXG4gIGhhbmRsZVByZXZpZXcoZmlsZTogVXBsb2FkRmlsZSwgZTogRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMub25QcmV2aWV3KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHJldHVybiB0aGlzLm9uUHJldmlldyhmaWxlKTtcbiAgfVxuXG4gIGhhbmRsZVJlbW92ZShmaWxlOiBVcGxvYWRGaWxlLCBlOiBFdmVudCk6IHZvaWQge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAodGhpcy5vblJlbW92ZSkge1xuICAgICAgdGhpcy5vblJlbW92ZShmaWxlKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gZW5kcmVnaW9uXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgdXBkYXRlSG9zdENsYXNzU2VydmljZTogTnpVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlKSB7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiB7IFtQIGluIGtleW9mIHRoaXNdPzogU2ltcGxlQ2hhbmdlIH0gJiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgdGhpcy5zZXRDbGFzc01hcCgpO1xuICB9XG59XG4iLCIvLyB0c2xpbnQ6ZGlzYWJsZTogbm8tYW55XG5pbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT25DaGFuZ2VzLFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgT3V0cHV0LFxuICBTaW1wbGVDaGFuZ2UsXG4gIFNpbXBsZUNoYW5nZXMsXG4gIFZpZXdDaGlsZFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IG9mLCBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgdG9Cb29sZWFuLCB0b051bWJlciwgSW5wdXRCb29sZWFuIH0gZnJvbSAnLi4vY29yZS91dGlsL2NvbnZlcnQnO1xuaW1wb3J0IHsgTnpJMThuU2VydmljZSB9IGZyb20gJy4uL2kxOG4vbnotaTE4bi5zZXJ2aWNlJztcblxuaW1wb3J0IHtcbiAgU2hvd1VwbG9hZExpc3RJbnRlcmZhY2UsXG4gIFVwbG9hZENoYW5nZVBhcmFtLFxuICBVcGxvYWRGaWxlLFxuICBVcGxvYWRGaWx0ZXIsXG4gIFVwbG9hZExpc3RUeXBlLFxuICBVcGxvYWRUeXBlLFxuICBaaXBCdXR0b25PcHRpb25zXG59IGZyb20gJy4vaW50ZXJmYWNlJztcbmltcG9ydCB7IE56VXBsb2FkQnRuQ29tcG9uZW50IH0gZnJvbSAnLi9uei11cGxvYWQtYnRuLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvciAgICAgICAgICAgOiAnbnotdXBsb2FkJyxcbiAgdGVtcGxhdGVVcmwgICAgICAgIDogJy4vbnotdXBsb2FkLmNvbXBvbmVudC5odG1sJyxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG4gIGNoYW5nZURldGVjdGlvbiAgICA6IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBOelVwbG9hZENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICBwcml2YXRlIGkxOG4kOiBTdWJzY3JpcHRpb247XG4gIGxvY2FsZTogYW55ID0ge307XG4gIEBWaWV3Q2hpbGQoJ3VwbG9hZCcpIHVwbG9hZDogTnpVcGxvYWRCdG5Db21wb25lbnQ7XG5cbiAgLy8gcmVnaW9uOiBmaWVsZHNcbiAgQElucHV0KCkgbnpUeXBlOiBVcGxvYWRUeXBlID0gJ3NlbGVjdCc7XG4gIHByaXZhdGUgX2xpbWl0OiBudW1iZXIgPSAwO1xuXG4gIEBJbnB1dCgpXG4gIHNldCBuekxpbWl0KHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9saW1pdCA9IHRvTnVtYmVyKHZhbHVlLCBudWxsKTtcbiAgfVxuXG4gIGdldCBuekxpbWl0KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2xpbWl0O1xuICB9XG5cbiAgcHJpdmF0ZSBfc2l6ZTogbnVtYmVyID0gMDtcblxuICBASW5wdXQoKVxuICBzZXQgbnpTaXplKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9zaXplID0gdG9OdW1iZXIodmFsdWUsIG51bGwpO1xuICB9XG5cbiAgZ2V0IG56U2l6ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9zaXplO1xuICB9XG5cbiAgQElucHV0KCkgbnpGaWxlVHlwZTogc3RyaW5nO1xuICBASW5wdXQoKSBuekFjY2VwdDogc3RyaW5nIHwgc3RyaW5nW107XG4gIEBJbnB1dCgpIG56QWN0aW9uOiBzdHJpbmc7XG4gIEBJbnB1dCgpIEBJbnB1dEJvb2xlYW4oKSBuekRpcmVjdG9yeTogYm9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoKSBuekJlZm9yZVVwbG9hZDogKGZpbGU6IFVwbG9hZEZpbGUsIGZpbGVMaXN0OiBVcGxvYWRGaWxlW10pID0+IGJvb2xlYW4gfCBPYnNlcnZhYmxlPGFueT47XG4gIEBJbnB1dCgpIG56Q3VzdG9tUmVxdWVzdDogKGl0ZW06IGFueSkgPT4gU3Vic2NyaXB0aW9uO1xuICBASW5wdXQoKSBuekRhdGE6IHt9IHwgKChmaWxlOiBVcGxvYWRGaWxlKSA9PiB7fSk7XG4gIEBJbnB1dCgpIG56RmlsdGVyOiBVcGxvYWRGaWx0ZXJbXSA9IFtdO1xuICBASW5wdXQoKSBuekZpbGVMaXN0OiBVcGxvYWRGaWxlW10gPSBbXTtcbiAgQE91dHB1dCgpIG56RmlsZUxpc3RDaGFuZ2U6IEV2ZW50RW1pdHRlcjxVcGxvYWRGaWxlW10+ID0gbmV3IEV2ZW50RW1pdHRlcjxVcGxvYWRGaWxlW10+KCk7XG5cbiAgcHJpdmF0ZSBfZGlzYWJsZWQgPSBmYWxzZTtcblxuICBASW5wdXQoKVxuICBzZXQgbnpEaXNhYmxlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2Rpc2FibGVkID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuekRpc2FibGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9kaXNhYmxlZDtcbiAgfVxuXG4gIEBJbnB1dCgpIG56SGVhZGVyczoge30gfCAoKGZpbGU6IFVwbG9hZEZpbGUpID0+IHt9KTtcbiAgQElucHV0KCkgbnpMaXN0VHlwZTogVXBsb2FkTGlzdFR5cGUgPSAndGV4dCc7XG5cbiAgcHJpdmF0ZSBfbXVsdGlwbGUgPSBmYWxzZTtcblxuICBASW5wdXQoKVxuICBzZXQgbnpNdWx0aXBsZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX211bHRpcGxlID0gdG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuek11bHRpcGxlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9tdWx0aXBsZTtcbiAgfVxuXG4gIEBJbnB1dCgpIG56TmFtZSA9ICdmaWxlJztcblxuICBwcml2YXRlIF9zaG93VXBsb2FkTGlzdDogYm9vbGVhbiB8IFNob3dVcGxvYWRMaXN0SW50ZXJmYWNlID0gdHJ1ZTtcblxuICBASW5wdXQoKVxuICBzZXQgbnpTaG93VXBsb2FkTGlzdCh2YWx1ZTogYm9vbGVhbiB8IFNob3dVcGxvYWRMaXN0SW50ZXJmYWNlKSB7XG4gICAgdGhpcy5fc2hvd1VwbG9hZExpc3QgPSB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyA/IHRvQm9vbGVhbih2YWx1ZSkgOiB2YWx1ZTtcbiAgfVxuXG4gIGdldCBuelNob3dVcGxvYWRMaXN0KCk6IGJvb2xlYW4gfCBTaG93VXBsb2FkTGlzdEludGVyZmFjZSB7XG4gICAgcmV0dXJuIHRoaXMuX3Nob3dVcGxvYWRMaXN0O1xuICB9XG5cbiAgcHJpdmF0ZSBfc2hvd0J0biA9IHRydWU7XG5cbiAgQElucHV0KClcbiAgc2V0IG56U2hvd0J1dHRvbih2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX3Nob3dCdG4gPSB0b0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IG56U2hvd0J1dHRvbigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fc2hvd0J0bjtcbiAgfVxuXG4gIHByaXZhdGUgX3dpdGhDcmVkZW50aWFscyA9IGZhbHNlO1xuXG4gIEBJbnB1dCgpXG4gIHNldCBueldpdGhDcmVkZW50aWFscyh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX3dpdGhDcmVkZW50aWFscyA9IHRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBnZXQgbnpXaXRoQ3JlZGVudGlhbHMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3dpdGhDcmVkZW50aWFscztcbiAgfVxuXG4gIEBJbnB1dCgpIG56UmVtb3ZlOiAoZmlsZTogVXBsb2FkRmlsZSkgPT4gYm9vbGVhbiB8IE9ic2VydmFibGU8Ym9vbGVhbj47XG4gIEBJbnB1dCgpIG56UHJldmlldzogKGZpbGU6IFVwbG9hZEZpbGUpID0+IHZvaWQ7XG5cbiAgQE91dHB1dCgpIG56Q2hhbmdlOiBFdmVudEVtaXR0ZXI8VXBsb2FkQ2hhbmdlUGFyYW0+ID0gbmV3IEV2ZW50RW1pdHRlcjxVcGxvYWRDaGFuZ2VQYXJhbT4oKTtcblxuICBfYnRuT3B0aW9uczogWmlwQnV0dG9uT3B0aW9ucztcblxuICBwcml2YXRlIHppcE9wdGlvbnMoKTogdGhpcyB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLm56U2hvd1VwbG9hZExpc3QgPT09ICdib29sZWFuJyAmJiB0aGlzLm56U2hvd1VwbG9hZExpc3QpIHtcbiAgICAgIHRoaXMubnpTaG93VXBsb2FkTGlzdCA9IHtcbiAgICAgICAgc2hvd1ByZXZpZXdJY29uOiB0cnVlLFxuICAgICAgICBzaG93UmVtb3ZlSWNvbiA6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICAgIC8vIGZpbHRlcnNcbiAgICBjb25zdCBmaWx0ZXJzOiBVcGxvYWRGaWx0ZXJbXSA9IHRoaXMubnpGaWx0ZXIuc2xpY2UoKTtcbiAgICBpZiAodGhpcy5uek11bHRpcGxlICYmIHRoaXMubnpMaW1pdCA+IDAgJiYgZmlsdGVycy5maW5kSW5kZXgodyA9PiB3Lm5hbWUgPT09ICdsaW1pdCcpID09PSAtMSkge1xuICAgICAgZmlsdGVycy5wdXNoKHtcbiAgICAgICAgbmFtZTogJ2xpbWl0JyxcbiAgICAgICAgZm4gIDogKGZpbGVMaXN0OiBVcGxvYWRGaWxlW10pID0+IGZpbGVMaXN0LnNsaWNlKC10aGlzLm56TGltaXQpXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHRoaXMubnpTaXplID4gMCAmJiBmaWx0ZXJzLmZpbmRJbmRleCh3ID0+IHcubmFtZSA9PT0gJ3NpemUnKSA9PT0gLTEpIHtcbiAgICAgIGZpbHRlcnMucHVzaCh7XG4gICAgICAgIG5hbWU6ICdzaXplJyxcbiAgICAgICAgZm4gIDogKGZpbGVMaXN0OiBVcGxvYWRGaWxlW10pID0+IGZpbGVMaXN0LmZpbHRlcih3ID0+ICh3LnNpemUgLyAxMDI0KSA8PSB0aGlzLm56U2l6ZSlcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAodGhpcy5uekZpbGVUeXBlICYmIHRoaXMubnpGaWxlVHlwZS5sZW5ndGggPiAwICYmIGZpbHRlcnMuZmluZEluZGV4KHcgPT4gdy5uYW1lID09PSAndHlwZScpID09PSAtMSkge1xuICAgICAgY29uc3QgdHlwZXMgPSB0aGlzLm56RmlsZVR5cGUuc3BsaXQoJywnKTtcbiAgICAgIGZpbHRlcnMucHVzaCh7XG4gICAgICAgIG5hbWU6ICd0eXBlJyxcbiAgICAgICAgZm4gIDogKGZpbGVMaXN0OiBVcGxvYWRGaWxlW10pID0+IGZpbGVMaXN0LmZpbHRlcih3ID0+IH50eXBlcy5pbmRleE9mKHcudHlwZSkpXG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5fYnRuT3B0aW9ucyA9IHtcbiAgICAgIGRpc2FibGVkICAgICAgIDogdGhpcy5uekRpc2FibGVkLFxuICAgICAgYWNjZXB0ICAgICAgICAgOiB0aGlzLm56QWNjZXB0LFxuICAgICAgYWN0aW9uICAgICAgICAgOiB0aGlzLm56QWN0aW9uLFxuICAgICAgZGlyZWN0b3J5ICAgICAgOiB0aGlzLm56RGlyZWN0b3J5LFxuICAgICAgYmVmb3JlVXBsb2FkICAgOiB0aGlzLm56QmVmb3JlVXBsb2FkLFxuICAgICAgY3VzdG9tUmVxdWVzdCAgOiB0aGlzLm56Q3VzdG9tUmVxdWVzdCxcbiAgICAgIGRhdGEgICAgICAgICAgIDogdGhpcy5uekRhdGEsXG4gICAgICBoZWFkZXJzICAgICAgICA6IHRoaXMubnpIZWFkZXJzLFxuICAgICAgbmFtZSAgICAgICAgICAgOiB0aGlzLm56TmFtZSxcbiAgICAgIG11bHRpcGxlICAgICAgIDogdGhpcy5uek11bHRpcGxlLFxuICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLm56V2l0aENyZWRlbnRpYWxzLFxuICAgICAgZmlsdGVycyxcbiAgICAgIG9uU3RhcnQgICAgICAgIDogdGhpcy5vblN0YXJ0LFxuICAgICAgb25Qcm9ncmVzcyAgICAgOiB0aGlzLm9uUHJvZ3Jlc3MsXG4gICAgICBvblN1Y2Nlc3MgICAgICA6IHRoaXMub25TdWNjZXNzLFxuICAgICAgb25FcnJvciAgICAgICAgOiB0aGlzLm9uRXJyb3JcbiAgICB9O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gZW5kcmVnaW9uXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmLCBwcml2YXRlIGkxOG46IE56STE4blNlcnZpY2UpIHtcbiAgfVxuXG4gIC8vIHJlZ2lvbjogdXBsb2FkXG4gIHByaXZhdGUgZmlsZVRvT2JqZWN0KGZpbGU6IFVwbG9hZEZpbGUpOiBVcGxvYWRGaWxlIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGFzdE1vZGlmaWVkICAgIDogZmlsZS5sYXN0TW9kaWZpZWQsXG4gICAgICBsYXN0TW9kaWZpZWREYXRlOiBmaWxlLmxhc3RNb2RpZmllZERhdGUsXG4gICAgICBuYW1lICAgICAgICAgICAgOiBmaWxlLmZpbGVuYW1lIHx8IGZpbGUubmFtZSxcbiAgICAgIHNpemUgICAgICAgICAgICA6IGZpbGUuc2l6ZSxcbiAgICAgIHR5cGUgICAgICAgICAgICA6IGZpbGUudHlwZSxcbiAgICAgIHVpZCAgICAgICAgICAgICA6IGZpbGUudWlkLFxuICAgICAgcmVzcG9uc2UgICAgICAgIDogZmlsZS5yZXNwb25zZSxcbiAgICAgIGVycm9yICAgICAgICAgICA6IGZpbGUuZXJyb3IsXG4gICAgICBwZXJjZW50ICAgICAgICAgOiAwLFxuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFuZ2xlLWJyYWNrZXQtdHlwZS1hc3NlcnRpb25cbiAgICAgIG9yaWdpbkZpbGVPYmogICA6IDxhbnk+IGZpbGVcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRGaWxlSXRlbShmaWxlOiBVcGxvYWRGaWxlLCBmaWxlTGlzdDogVXBsb2FkRmlsZVtdKTogVXBsb2FkRmlsZSB7XG4gICAgcmV0dXJuIGZpbGVMaXN0LmZpbHRlcihpdGVtID0+IGl0ZW0udWlkID09PSBmaWxlLnVpZClbIDAgXTtcbiAgfVxuXG4gIHByaXZhdGUgcmVtb3ZlRmlsZUl0ZW0oZmlsZTogVXBsb2FkRmlsZSwgZmlsZUxpc3Q6IFVwbG9hZEZpbGVbXSk6IFVwbG9hZEZpbGVbXSB7XG4gICAgcmV0dXJuIGZpbGVMaXN0LmZpbHRlcihpdGVtID0+IGl0ZW0udWlkICE9PSBmaWxlLnVpZCk7XG4gIH1cblxuICBwcml2YXRlIGdlbkVycihmaWxlOiBVcGxvYWRGaWxlKTogc3RyaW5nIHtcbiAgICByZXR1cm4gZmlsZS5yZXNwb25zZSAmJiB0eXBlb2YgZmlsZS5yZXNwb25zZSA9PT0gJ3N0cmluZycgP1xuICAgICAgZmlsZS5yZXNwb25zZSA6XG4gICAgICAoZmlsZS5lcnJvciAmJiBmaWxlLmVycm9yLnN0YXR1c1RleHQpIHx8IHRoaXMubG9jYWxlLnVwbG9hZEVycm9yO1xuICB9XG5cbiAgcHJpdmF0ZSBnZW5UaHVtYihmaWxlOiBVcGxvYWRGaWxlKTogdm9pZCB7XG4gICAgaWYgKFxuICAgICAgKHRoaXMubnpMaXN0VHlwZSAhPT0gJ3BpY3R1cmUnICYmIHRoaXMubnpMaXN0VHlwZSAhPT0gJ3BpY3R1cmUtY2FyZCcpIHx8XG4gICAgICB0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnIHx8XG4gICAgICB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyB8fFxuICAgICAgISh3aW5kb3cgYXMgYW55KS5GaWxlUmVhZGVyIHx8XG4gICAgICAhKHdpbmRvdyBhcyBhbnkpLkZpbGUgfHxcbiAgICAgICEoZmlsZS5vcmlnaW5GaWxlT2JqIGluc3RhbmNlb2YgRmlsZSkgfHxcbiAgICAgIGZpbGUudGh1bWJVcmwgIT0gbnVsbFxuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZpbGUudGh1bWJVcmwgPSAnJztcblxuICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgcmVhZGVyLm9ubG9hZGVuZCA9ICgpID0+IGZpbGUudGh1bWJVcmwgPSByZWFkZXIucmVzdWx0IGFzIHN0cmluZztcbiAgICByZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlLm9yaWdpbkZpbGVPYmopO1xuICB9XG5cbiAgcHJpdmF0ZSBvblN0YXJ0ID0gKGZpbGU6IGFueSk6IHZvaWQgPT4ge1xuICAgIGlmICghdGhpcy5uekZpbGVMaXN0KSB7XG4gICAgICB0aGlzLm56RmlsZUxpc3QgPSBbXTtcbiAgICB9XG4gICAgY29uc3QgdGFyZ2V0SXRlbSA9IHRoaXMuZmlsZVRvT2JqZWN0KGZpbGUpO1xuICAgIHRhcmdldEl0ZW0uc3RhdHVzID0gJ3VwbG9hZGluZyc7XG4gICAgdGhpcy5uekZpbGVMaXN0LnB1c2godGFyZ2V0SXRlbSk7XG4gICAgdGhpcy5nZW5UaHVtYih0YXJnZXRJdGVtKTtcbiAgICB0aGlzLm56RmlsZUxpc3RDaGFuZ2UuZW1pdCh0aGlzLm56RmlsZUxpc3QpO1xuICAgIHRoaXMubnpDaGFuZ2UuZW1pdCh7IGZpbGU6IHRhcmdldEl0ZW0sIGZpbGVMaXN0OiB0aGlzLm56RmlsZUxpc3QsIHR5cGU6ICdzdGFydCcgfSk7XG4gICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XG4gIH1cblxuICBwcml2YXRlIG9uUHJvZ3Jlc3MgPSAoZTogeyBwZXJjZW50OiBudW1iZXIgfSwgZmlsZTogVXBsb2FkRmlsZSk6IHZvaWQgPT4ge1xuICAgIGNvbnN0IGZpbGVMaXN0ID0gdGhpcy5uekZpbGVMaXN0O1xuICAgIGNvbnN0IHRhcmdldEl0ZW0gPSB0aGlzLmdldEZpbGVJdGVtKGZpbGUsIGZpbGVMaXN0KTtcbiAgICB0YXJnZXRJdGVtLnBlcmNlbnQgPSBlLnBlcmNlbnQ7XG4gICAgdGhpcy5uekNoYW5nZS5lbWl0KHtcbiAgICAgIGV2ZW50ICAgOiBlLFxuICAgICAgZmlsZSAgICA6IHsgLi4udGFyZ2V0SXRlbSB9LFxuICAgICAgZmlsZUxpc3Q6IHRoaXMubnpGaWxlTGlzdCxcbiAgICAgIHR5cGUgICAgOiAncHJvZ3Jlc3MnXG4gICAgfSk7XG4gICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XG4gIH1cblxuICBwcml2YXRlIG9uU3VjY2VzcyA9IChyZXM6IGFueSwgZmlsZTogYW55LCB4aHI/OiBhbnkpOiB2b2lkID0+IHtcbiAgICBjb25zdCBmaWxlTGlzdCA9IHRoaXMubnpGaWxlTGlzdDtcbiAgICBjb25zdCB0YXJnZXRJdGVtID0gdGhpcy5nZXRGaWxlSXRlbShmaWxlLCBmaWxlTGlzdCk7XG4gICAgdGFyZ2V0SXRlbS5zdGF0dXMgPSAnZG9uZSc7XG4gICAgdGFyZ2V0SXRlbS5yZXNwb25zZSA9IHJlcztcbiAgICB0aGlzLm56Q2hhbmdlLmVtaXQoe1xuICAgICAgZmlsZTogeyAuLi50YXJnZXRJdGVtIH0sXG4gICAgICBmaWxlTGlzdCxcbiAgICAgIHR5cGU6ICdzdWNjZXNzJ1xuICAgIH0pO1xuICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xuICB9XG5cbiAgcHJpdmF0ZSBvbkVycm9yID0gKGVycjogYW55LCBmaWxlOiBhbnkpOiB2b2lkID0+IHtcbiAgICBjb25zdCBmaWxlTGlzdCA9IHRoaXMubnpGaWxlTGlzdDtcbiAgICBjb25zdCB0YXJnZXRJdGVtID0gdGhpcy5nZXRGaWxlSXRlbShmaWxlLCBmaWxlTGlzdCk7XG4gICAgdGFyZ2V0SXRlbS5lcnJvciA9IGVycjtcbiAgICB0YXJnZXRJdGVtLnN0YXR1cyA9ICdlcnJvcic7XG4gICAgdGFyZ2V0SXRlbS5tZXNzYWdlID0gdGhpcy5nZW5FcnIodGFyZ2V0SXRlbSk7XG4gICAgdGhpcy5uekNoYW5nZS5lbWl0KHtcbiAgICAgIGZpbGU6IHsgLi4udGFyZ2V0SXRlbSB9LFxuICAgICAgZmlsZUxpc3QsXG4gICAgICB0eXBlOiAnZXJyb3InXG4gICAgfSk7XG4gICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XG4gIH1cblxuICAvLyBlbmRyZWdpb25cbiAgLy8gcmVnaW9uOiBkcmFnXG4gIHByaXZhdGUgZHJhZ1N0YXRlOiBzdHJpbmc7XG5cbiAgZmlsZURyb3AoZTogRHJhZ0V2ZW50KTogdm9pZCB7XG4gICAgaWYgKGUudHlwZSA9PT0gdGhpcy5kcmFnU3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5kcmFnU3RhdGUgPSBlLnR5cGU7XG4gICAgdGhpcy5zZXRDbGFzc01hcCgpO1xuICB9XG5cbiAgLy8gZW5kcmVnaW9uXG4gIC8vIHJlZ2lvbjogbGlzdFxuICBvblJlbW92ZSA9IChmaWxlOiBVcGxvYWRGaWxlKTogdm9pZCA9PiB7XG4gICAgdGhpcy51cGxvYWQuYWJvcnQoZmlsZSk7XG4gICAgZmlsZS5zdGF0dXMgPSAncmVtb3ZlZCc7XG4gICAgY29uc3QgZm5SZXMgPSB0eXBlb2YgdGhpcy5uelJlbW92ZSA9PT0gJ2Z1bmN0aW9uJyA/XG4gICAgICB0aGlzLm56UmVtb3ZlKGZpbGUpIDogdGhpcy5uelJlbW92ZSA9PSBudWxsID8gdHJ1ZSA6IHRoaXMubnpSZW1vdmU7XG4gICAgKGZuUmVzIGluc3RhbmNlb2YgT2JzZXJ2YWJsZSA/IGZuUmVzIDogb2YoZm5SZXMpKVxuICAgIC5waXBlKGZpbHRlcigocmVzOiBib29sZWFuKSA9PiByZXMpKVxuICAgIC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy5uekZpbGVMaXN0ID0gdGhpcy5yZW1vdmVGaWxlSXRlbShmaWxlLCB0aGlzLm56RmlsZUxpc3QpO1xuICAgICAgdGhpcy5uekNoYW5nZS5lbWl0KHtcbiAgICAgICAgZmlsZSxcbiAgICAgICAgZmlsZUxpc3Q6IHRoaXMubnpGaWxlTGlzdCxcbiAgICAgICAgdHlwZSAgICA6ICdyZW1vdmVkJ1xuICAgICAgfSk7XG4gICAgICB0aGlzLm56RmlsZUxpc3RDaGFuZ2UuZW1pdCh0aGlzLm56RmlsZUxpc3QpO1xuICAgICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgfSk7XG4gIH1cblxuICAvLyBlbmRyZWdpb25cbiAgLy8gcmVnaW9uOiBzdHlsZXNcbiAgcHJlZml4Q2xzID0gJ2FudC11cGxvYWQnO1xuICBjbGFzc0xpc3Q6IHN0cmluZ1tdID0gW107XG5cbiAgc2V0Q2xhc3NNYXAoKTogdm9pZCB7XG4gICAgY29uc3QgaXNEcmFnID0gdGhpcy5uelR5cGUgPT09ICdkcmFnJztcbiAgICBsZXQgc3ViQ2xzOiBzdHJpbmdbXSA9IFtdO1xuICAgIGlmICh0aGlzLm56VHlwZSA9PT0gJ2RyYWcnKSB7XG4gICAgICBzdWJDbHMgPSBbXG4gICAgICAgIHRoaXMubnpGaWxlTGlzdC5zb21lKGZpbGUgPT4gZmlsZS5zdGF0dXMgPT09ICd1cGxvYWRpbmcnKSAmJiBgJHt0aGlzLnByZWZpeENsc30tZHJhZy11cGxvYWRpbmdgLFxuICAgICAgICB0aGlzLmRyYWdTdGF0ZSA9PT0gJ2RyYWdvdmVyJyAmJiBgJHt0aGlzLnByZWZpeENsc30tZHJhZy1ob3ZlcmBcbiAgICAgIF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1YkNscyA9IFtcbiAgICAgICAgYCR7dGhpcy5wcmVmaXhDbHN9LXNlbGVjdC0ke3RoaXMubnpMaXN0VHlwZX1gXG4gICAgICBdO1xuICAgIH1cblxuICAgIHRoaXMuY2xhc3NMaXN0ID0gW1xuICAgICAgdGhpcy5wcmVmaXhDbHMsXG4gICAgICBgJHt0aGlzLnByZWZpeENsc30tJHt0aGlzLm56VHlwZX1gLFxuICAgICAgLi4uc3ViQ2xzLFxuICAgICAgdGhpcy5uekRpc2FibGVkICYmIGAke3RoaXMucHJlZml4Q2xzfS1kaXNhYmxlZGBcbiAgICBdLmZpbHRlcihpdGVtID0+ICEhaXRlbSk7XG5cbiAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcbiAgfVxuXG4gIC8vIGVuZHJlZ2lvblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmkxOG4kID0gdGhpcy5pMThuLmxvY2FsZUNoYW5nZS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy5sb2NhbGUgPSB0aGlzLmkxOG4uZ2V0TG9jYWxlRGF0YSgnVXBsb2FkJyk7XG4gICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcbiAgICB9KTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IHsgW1AgaW4ga2V5b2YgdGhpc10/OiBTaW1wbGVDaGFuZ2UgfSAmIFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBpZiAoY2hhbmdlcy5uekZpbGVMaXN0KSB7XG4gICAgICAodGhpcy5uekZpbGVMaXN0IHx8IFtdKS5mb3JFYWNoKGZpbGUgPT4gZmlsZS5tZXNzYWdlID0gdGhpcy5nZW5FcnIoZmlsZSkpO1xuICAgIH1cbiAgICB0aGlzLnppcE9wdGlvbnMoKS5zZXRDbGFzc01hcCgpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5pMThuJC51bnN1YnNjcmliZSgpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBOekkxOG5Nb2R1bGUgfSBmcm9tICcuLi9pMThuL256LWkxOG4ubW9kdWxlJztcbmltcG9ydCB7IE56SWNvbk1vZHVsZSB9IGZyb20gJy4uL2ljb24vbnotaWNvbi5tb2R1bGUnO1xuaW1wb3J0IHsgTnpUb29sVGlwTW9kdWxlIH0gZnJvbSAnLi4vdG9vbHRpcC9uei10b29sdGlwLm1vZHVsZSc7XG5cbmltcG9ydCB7IE56UHJvZ3Jlc3NNb2R1bGUgfSBmcm9tICcuLy4uL3Byb2dyZXNzL256LXByb2dyZXNzLm1vZHVsZSc7XG5pbXBvcnQgeyBOelVwbG9hZEJ0bkNvbXBvbmVudCB9IGZyb20gJy4vbnotdXBsb2FkLWJ0bi5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpVcGxvYWRMaXN0Q29tcG9uZW50IH0gZnJvbSAnLi9uei11cGxvYWQtbGlzdC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpVcGxvYWRDb21wb25lbnQgfSBmcm9tICcuL256LXVwbG9hZC5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiAgICAgIFtDb21tb25Nb2R1bGUsIEZvcm1zTW9kdWxlLCBOelRvb2xUaXBNb2R1bGUsIE56UHJvZ3Jlc3NNb2R1bGUsIE56STE4bk1vZHVsZSwgTnpJY29uTW9kdWxlXSxcbiAgZGVjbGFyYXRpb25zOiBbTnpVcGxvYWRDb21wb25lbnQsIE56VXBsb2FkQnRuQ29tcG9uZW50LCBOelVwbG9hZExpc3RDb21wb25lbnRdLFxuICBleHBvcnRzOiAgICAgIFtOelVwbG9hZENvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgTnpVcGxvYWRNb2R1bGUgeyB9XG4iLCJpbXBvcnQge1xuICBDb25uZWN0aW9uUG9zaXRpb25QYWlyLFxuICBGbGV4aWJsZUNvbm5lY3RlZFBvc2l0aW9uU3RyYXRlZ3ksXG4gIE92ZXJsYXksXG4gIE92ZXJsYXlDb25maWcsXG4gIE92ZXJsYXlSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgQ29tcG9uZW50UG9ydGFsIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BvcnRhbCc7XG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBFbGVtZW50UmVmLCBJbmplY3QsIEluamVjdGFibGUsIE5nWm9uZSwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBOekRyb3Bkb3duQ29udGV4dENvbXBvbmVudCB9IGZyb20gJy4vbnotZHJvcGRvd24tY29udGV4dC5jb21wb25lbnQnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBOekRyb3Bkb3duU2VydmljZSB7XG4gIHByb3RlY3RlZCBpbnN0YW5jZTogTnpEcm9wZG93bkNvbnRleHRDb21wb25lbnQ7XG4gIHByaXZhdGUgb3ZlcmxheVJlZjogT3ZlcmxheVJlZjtcbiAgcHJpdmF0ZSBsb2NhdGVQb2ludDogSFRNTEVsZW1lbnQ7XG4gIHByaXZhdGUgcG9zaXRpb25TdHJhdGVneTogRmxleGlibGVDb25uZWN0ZWRQb3NpdGlvblN0cmF0ZWd5O1xuICBwcml2YXRlIGJhY2tkcm9wQ2xpY2tTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgcHJpdmF0ZSBkZXRhY2htZW50c1N1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuICBwcml2YXRlIG9uUG9zaXRpb25DaGFuZ2VTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgcHJpdmF0ZSBwb3NpdGlvbnMgPSBbXG4gICAgbmV3IENvbm5lY3Rpb25Qb3NpdGlvblBhaXIoXG4gICAgICB7IG9yaWdpblg6ICdzdGFydCcsIG9yaWdpblk6ICd0b3AnIH0sXG4gICAgICB7IG92ZXJsYXlYOiAnc3RhcnQnLCBvdmVybGF5WTogJ3RvcCcgfSksXG4gICAgbmV3IENvbm5lY3Rpb25Qb3NpdGlvblBhaXIoXG4gICAgICB7IG9yaWdpblg6ICdzdGFydCcsIG9yaWdpblk6ICd0b3AnIH0sXG4gICAgICB7IG92ZXJsYXlYOiAnc3RhcnQnLCBvdmVybGF5WTogJ2JvdHRvbScgfSksXG4gICAgbmV3IENvbm5lY3Rpb25Qb3NpdGlvblBhaXIoXG4gICAgICB7IG9yaWdpblg6ICdzdGFydCcsIG9yaWdpblk6ICd0b3AnIH0sXG4gICAgICB7IG92ZXJsYXlYOiAnZW5kJywgb3ZlcmxheVk6ICdib3R0b20nIH0pLFxuICAgIG5ldyBDb25uZWN0aW9uUG9zaXRpb25QYWlyKFxuICAgICAgeyBvcmlnaW5YOiAnc3RhcnQnLCBvcmlnaW5ZOiAndG9wJyB9LFxuICAgICAgeyBvdmVybGF5WDogJ2VuZCcsIG92ZXJsYXlZOiAndG9wJyB9KVxuICBdO1xuXG4gIC8qIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnkgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBvdmVybGF5OiBPdmVybGF5LCBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIGRvY3VtZW50OiBhbnksIHByaXZhdGUgem9uZTogTmdab25lKSB7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZU92ZXJsYXkoJGV2ZW50OiBNb3VzZUV2ZW50KTogT3ZlcmxheVJlZiB7XG4gICAgdGhpcy5jcmVhdGVQb2ludCgkZXZlbnQpO1xuICAgIGNvbnN0IGZha2VFbGVtZW50UmVmID0gbmV3IEVsZW1lbnRSZWYodGhpcy5sb2NhdGVQb2ludCk7XG4gICAgdGhpcy5wb3NpdGlvblN0cmF0ZWd5ID0gdGhpcy5vdmVybGF5LnBvc2l0aW9uKCkuZmxleGlibGVDb25uZWN0ZWRUbyhmYWtlRWxlbWVudFJlZik7XG4gICAgdGhpcy5oYW5kbGVQb3NpdGlvbkNoYW5nZXModGhpcy5wb3NpdGlvblN0cmF0ZWd5KTtcbiAgICBjb25zdCBvdmVybGF5Q29uZmlnID0gbmV3IE92ZXJsYXlDb25maWcoe1xuICAgICAgaGFzQmFja2Ryb3AgICAgIDogdHJ1ZSxcbiAgICAgIHNjcm9sbFN0cmF0ZWd5ICA6IHRoaXMub3ZlcmxheS5zY3JvbGxTdHJhdGVnaWVzLmNsb3NlKCksXG4gICAgICBwb3NpdGlvblN0cmF0ZWd5OiB0aGlzLnBvc2l0aW9uU3RyYXRlZ3lcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5vdmVybGF5LmNyZWF0ZShvdmVybGF5Q29uZmlnKTtcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlUG9zaXRpb25DaGFuZ2VzKHN0cmF0ZWd5OiBGbGV4aWJsZUNvbm5lY3RlZFBvc2l0aW9uU3RyYXRlZ3kpOiB2b2lkIHtcbiAgICBzdHJhdGVneS53aXRoUG9zaXRpb25zKHRoaXMucG9zaXRpb25zKTtcbiAgICB0aGlzLm9uUG9zaXRpb25DaGFuZ2VTdWJzY3JpcHRpb24gPSB0aGlzLnBvc2l0aW9uU3RyYXRlZ3kucG9zaXRpb25DaGFuZ2VzLnN1YnNjcmliZShkYXRhID0+IHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gZGF0YS5jb25uZWN0aW9uUGFpci5vdmVybGF5WSA9PT0gJ2JvdHRvbScgPyAndG9wJyA6ICdib3R0b20nO1xuICAgICAgdGhpcy5pbnN0YW5jZS5zZXREcm9wRG93blBvc2l0aW9uKHBvc2l0aW9uKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlQ2xvc2VFdmVudChvdmVybGF5UmVmOiBPdmVybGF5UmVmKTogdm9pZCB7XG4gICAgdGhpcy5iYWNrZHJvcENsaWNrU3Vic2NyaXB0aW9uID0gb3ZlcmxheVJlZi5iYWNrZHJvcENsaWNrKCkuc3Vic2NyaWJlKF8gPT4gdGhpcy5pbnN0YW5jZS5jbG9zZSgpKTtcbiAgICB0aGlzLmRldGFjaG1lbnRzU3Vic2NyaXB0aW9uID0gb3ZlcmxheVJlZi5kZXRhY2htZW50cygpLnN1YnNjcmliZShfID0+IHRoaXMuY2xvc2UoKSk7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZVBvaW50KGU6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMubG9jYXRlUG9pbnQpIHtcbiAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgdGhpcy5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG4gICAgICB0aGlzLmxvY2F0ZVBvaW50ID0gY29udGFpbmVyO1xuICAgIH1cbiAgICB0aGlzLmxvY2F0ZVBvaW50LnN0eWxlLnBvc2l0aW9uID0gYGZpeGVkYDtcbiAgICB0aGlzLmxvY2F0ZVBvaW50LnN0eWxlLnRvcCA9IGAke2UuY2xpZW50WX1weGA7XG4gICAgdGhpcy5sb2NhdGVQb2ludC5zdHlsZS5sZWZ0ID0gYCR7ZS5jbGllbnRYfXB4YDtcbiAgfVxuXG4gIHByaXZhdGUgcmVtb3ZlUG9pbnQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubG9jYXRlUG9pbnQpIHtcbiAgICAgIHRoaXMuZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLmxvY2F0ZVBvaW50KTtcbiAgICAgIHRoaXMubG9jYXRlUG9pbnQgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2V0SW5zdGFuY2VWYWx1ZShpbnN0YW5jZTogTnpEcm9wZG93bkNvbnRleHRDb21wb25lbnQsIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjx2b2lkPik6IHZvaWQge1xuICAgIGluc3RhbmNlLm9wZW4gPSB0cnVlO1xuICAgIGluc3RhbmNlLnNldFRlbXBsYXRlUmVmKHRlbXBsYXRlKTtcbiAgICBpbnN0YW5jZS5zZXRDb250cm9sKHRoaXMpO1xuICB9XG5cbiAgY3JlYXRlKCRldmVudDogTW91c2VFdmVudCwgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPHZvaWQ+KTogTnpEcm9wZG93bkNvbnRleHRDb21wb25lbnQge1xuICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmICh0aGlzLm92ZXJsYXlSZWYgJiYgdGhpcy5vdmVybGF5UmVmLmhhc0F0dGFjaGVkKCkpIHtcbiAgICAgIHRoaXMub3ZlcmxheVJlZi5kaXNwb3NlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub3ZlcmxheVJlZiA9IHRoaXMuY3JlYXRlT3ZlcmxheSgkZXZlbnQpO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLm92ZXJsYXlSZWYuYmFja2Ryb3BFbGVtZW50KSB7XG4gICAgICAgICAgdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMub3ZlcmxheVJlZi5iYWNrZHJvcEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY29udGV4dG1lbnUnLCAoZTogTW91c2VFdmVudCkgPT4gZS5wcmV2ZW50RGVmYXVsdCgpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aGlzLmluc3RhbmNlID0gdGhpcy5vdmVybGF5UmVmLmF0dGFjaChuZXcgQ29tcG9uZW50UG9ydGFsKE56RHJvcGRvd25Db250ZXh0Q29tcG9uZW50KSkuaW5zdGFuY2U7XG4gICAgICB0aGlzLnNldEluc3RhbmNlVmFsdWUodGhpcy5pbnN0YW5jZSwgdGVtcGxhdGUpO1xuICAgICAgdGhpcy5oYW5kbGVDbG9zZUV2ZW50KHRoaXMub3ZlcmxheVJlZik7XG4gICAgICByZXR1cm4gdGhpcy5pbnN0YW5jZTtcbiAgICB9XG4gIH1cblxuICBjbG9zZSgpOiB2b2lkIHtcbiAgICB0aGlzLnJlbW92ZVBvaW50KCk7XG4gICAgdGhpcy5vdmVybGF5UmVmLmRpc3Bvc2UoKTtcbiAgICBpZiAodGhpcy5iYWNrZHJvcENsaWNrU3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLmJhY2tkcm9wQ2xpY2tTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgIHRoaXMuYmFja2Ryb3BDbGlja1N1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgfVxuICAgIGlmICh0aGlzLmRldGFjaG1lbnRzU3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLmRldGFjaG1lbnRzU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLmRldGFjaG1lbnRzU3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKHRoaXMub25Qb3NpdGlvbkNoYW5nZVN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5vblBvc2l0aW9uQ2hhbmdlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLm9uUG9zaXRpb25DaGFuZ2VTdWJzY3JpcHRpb24gPSBudWxsO1xuICAgIH1cbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQge1xuICB0b2RheTogJ8OYwqfDmcKEw5nCisOZwojDmcKFJyxcbiAgbm93OiAnw5jCp8OZwoTDmMKjw5nChicsXG4gIGJhY2tUb1RvZGF5OiAnw5jCp8OZwoTDmMK5w5nCiMOYwq/DmMKpIMOYwqXDmcKEw5nCiSDDmMKnw5nChMOZworDmcKIw5nChScsXG4gIG9rOiAnw5jCqsOYwqPDmcKDw5nCisOYwq8nLFxuICBjbGVhcjogJ8OZwoXDmMKzw5jCrScsXG4gIG1vbnRoOiAnw5jCp8OZwoTDmMK0w5nCh8OYwrEnLFxuICB5ZWFyOiAnw5jCp8OZwoTDmMKzw5nChsOYwqknLFxuICB0aW1lU2VsZWN0OiAnw5jCp8OYwq7DmMKqw5nCisOYwqfDmMKxIMOYwqfDmcKEw5nCiMOZwoLDmMKqJyxcbiAgZGF0ZVNlbGVjdDogJ8OYwqfDmMKuw5jCqsOZworDmMKnw5jCsSDDmMKnw5nChMOYwqrDmMKnw5jCscOZworDmMKuJyxcbiAgbW9udGhTZWxlY3Q6ICfDmMKnw5jCrsOYwqrDmcKKw5jCp8OYwrEgw5jCp8OZwoTDmMK0w5nCh8OYwrEnLFxuICB5ZWFyU2VsZWN0OiAnw5jCp8OYwq7DmMKqw5nCisOYwqfDmMKxIMOYwqfDmcKEw5jCs8OZwobDmMKpJyxcbiAgZGVjYWRlU2VsZWN0OiAnw5jCp8OYwq7DmMKqw5nCisOYwqfDmMKxIMOYwqfDmcKEw5jCucOZwoLDmMKvJyxcbiAgeWVhckZvcm1hdDogJ1lZWVknLFxuICBkYXRlRm9ybWF0OiAnTS9EL1lZWVknLFxuICBkYXlGb3JtYXQ6ICdEJyxcbiAgZGF0ZVRpbWVGb3JtYXQ6ICdNL0QvWVlZWSBISDptbTpzcycsXG4gIG1vbnRoQmVmb3JlWWVhcjogdHJ1ZSxcbiAgcHJldmlvdXNNb250aDogJ8OYwqfDmcKEw5jCtMOZwofDmMKxIMOYwqfDmcKEw5jCs8OYwqfDmMKow5nCgiAoUGFnZVVwKScsXG4gIG5leHRNb250aDogJ8OYwqfDmcKEw5jCtMOZwofDmMKxIMOYwqfDmcKEw5jCqsOYwqfDmcKEw5nCiShQYWdlRG93biknLFxuICBwcmV2aW91c1llYXI6ICfDmMKnw5nChMOYwrnDmMKnw5nChSDDmMKnw5nChMOYwrPDmMKnw5jCqMOZwoIgKENvbnRyb2wgKyBsZWZ0KScsXG4gIG5leHRZZWFyOiAnw5jCp8OZwoTDmMK5w5jCp8OZwoUgw5jCp8OZwoTDmMKqw5jCp8OZwoTDmcKJIChDb250cm9sICsgcmlnaHQpJyxcbiAgcHJldmlvdXNEZWNhZGU6ICfDmMKnw5nChMOYwrnDmcKCw5jCryDDmMKnw5nChMOYwrPDmMKnw5jCqMOZwoInLFxuICBuZXh0RGVjYWRlOiAnw5jCp8OZwoTDmMK5w5nCgsOYwq8gw5jCp8OZwoTDmMKqw5jCp8OZwoTDmcKJJyxcbiAgcHJldmlvdXNDZW50dXJ5OiAnw5jCp8OZwoTDmcKCw5jCscOZwoYgw5jCp8OZwoTDmMKzw5jCp8OYwqjDmcKCJyxcbiAgbmV4dENlbnR1cnk6ICfDmMKnw5nChMOZwoLDmMKxw5nChiDDmMKnw5nChMOYwqrDmMKnw5nChMOZwoknLFxufTtcbiIsImNvbnN0IGxvY2FsZSA9IHtcbiAgcGxhY2Vob2xkZXI6ICfDmMKnw5jCrsOYwqrDmcKKw5jCp8OYwrEgw5jCp8OZwoTDmcKIw5nCgsOYwqonLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgbG9jYWxlO1xuIiwiaW1wb3J0IENhbGVuZGFyTG9jYWxlIGZyb20gJy4uL2NhbGVuZGFyL2FyX0VHJztcbmltcG9ydCBUaW1lUGlja2VyTG9jYWxlIGZyb20gJy4uL3RpbWUtcGlja2VyL2FyX0VHJztcblxuLy8gTWVyZ2UgaW50byBhIGxvY2FsZSBvYmplY3RcbmNvbnN0IGxvY2FsZSA9IHtcbiAgbGFuZzoge1xuICAgIHBsYWNlaG9sZGVyOiAnw5jCp8OYwq7DmMKqw5nCisOYwqfDmMKxIMOYwqfDmcKEw5jCqsOYwqfDmMKxw5nCisOYwq4nLFxuICAgIHJhbmdlUGxhY2Vob2xkZXI6IFsnw5jCp8OZwoTDmMKow5jCr8OYwqfDmcKKw5jCqScsICfDmMKnw5nChMOZwobDmcKHw5jCp8OZworDmMKpJ10sXG4gICAgLi4uQ2FsZW5kYXJMb2NhbGUsXG4gIH0sXG4gIHRpbWVQaWNrZXJMb2NhbGU6IHtcbiAgICAuLi5UaW1lUGlja2VyTG9jYWxlLFxuICB9LFxufTtcblxuLy8gQWxsIHNldHRpbmdzIGF0OlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9ibG9iL21hc3Rlci9jb21wb25lbnRzL2RhdGUtcGlja2VyL2xvY2FsZS9leGFtcGxlLmpzb25cblxuZXhwb3J0IGRlZmF1bHQgbG9jYWxlO1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICAvLyBPcHRpb25zLmpzeFxuICBpdGVtc19wZXJfcGFnZTogJy8gw5jCp8OZwoTDmMK1w5nCgcOYwq3DmMKpJyxcbiAganVtcF90bzogJ8OYwqfDmcKEw5jCsMOZwofDmMKnw5jCqCDDmMKlw5nChMOZwoknLFxuICBqdW1wX3RvX2NvbmZpcm06ICfDmMKqw5jCo8OZwoPDmcKKw5jCrycsXG4gIHBhZ2U6ICcnLFxuXG4gIC8vIFBhZ2luYXRpb24uanN4XG4gIHByZXZfcGFnZTogJ8OYwqfDmcKEw5jCtcOZwoHDmMKtw5jCqSDDmMKnw5nChMOYwrPDmMKnw5jCqMOZwoLDmMKpJyxcbiAgbmV4dF9wYWdlOiAnw5jCp8OZwoTDmMK1w5nCgcOYwq3DmMKpIMOYwqfDmcKEw5jCqsOYwqfDmcKEw5nCisOYwqknLFxuICBwcmV2XzU6ICfDmMKuw5nChcOYwrMgw5jCtcOZwoHDmMKtw5jCp8OYwqogw5jCs8OYwqfDmMKow5nCgsOYwqknLFxuICBuZXh0XzU6ICfDmMKuw5nChcOYwrMgw5jCtcOZwoHDmMKtw5jCp8OYwqogw5jCqsOYwqfDmcKEw5nCisOYwqknLFxuICBwcmV2XzM6ICfDmMKrw5nChMOYwqfDmMKrIMOYwrXDmcKBw5jCrcOYwqfDmMKqIMOYwrPDmMKnw5jCqMOZwoLDmMKpJyxcbiAgbmV4dF8zOiAnw5jCq8OZwoTDmMKnw5jCqyDDmMK1w5nCgcOYwq3DmMKnw5jCqiDDmMKqw5jCp8OZwoTDmcKKw5jCqScsXG59O1xuIiwiaW1wb3J0IENhbGVuZGFyIGZyb20gJy4vY2FsZW5kYXIvYXJfRUcnO1xuaW1wb3J0IERhdGVQaWNrZXIgZnJvbSAnLi9kYXRlLXBpY2tlci9hcl9FRyc7XG5pbXBvcnQgUGFnaW5hdGlvbiBmcm9tICcuL3BhZ2luYXRpb24vYXJfRUcnO1xuaW1wb3J0IFRpbWVQaWNrZXIgZnJvbSAnLi90aW1lLXBpY2tlci9hcl9FRyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbG9jYWxlOiAnYXInLFxuICBQYWdpbmF0aW9uLFxuICBEYXRlUGlja2VyLFxuICBUaW1lUGlja2VyLFxuICBDYWxlbmRhcixcbiAgVGFibGU6IHtcbiAgICBmaWx0ZXJUaXRsZTogJ8OYwqfDmcKEw5nCgcOZwoTDmMKnw5jCqsOYwrEnLFxuICAgIGZpbHRlckNvbmZpcm06ICfDmMKqw5jCo8OZwoPDmcKKw5jCrycsXG4gICAgZmlsdGVyUmVzZXQ6ICfDmMKlw5jCucOYwqfDmMKvw5jCqSDDmMK2w5jCqMOYwrcnLFxuICAgIGVtcHR5VGV4dDogJ8OZwoTDmMKnIMOYwqrDmcKIw5jCrMOYwq8gw5jCqMOZworDmMKnw5nChsOYwqfDmMKqJyxcbiAgICBzZWxlY3RBbGw6ICfDmMKnw5jCrsOYwqrDmcKKw5jCp8OYwrEgw5jCp8OZwoTDmcKDw5nChCcsXG4gICAgc2VsZWN0SW52ZXJ0OiAnw5jCpcOZwoTDmMK6w5jCp8OYwqEgw5jCp8OZwoTDmMKnw5jCrsOYwqrDmcKKw5jCp8OYwrEnLFxuICB9LFxuICBNb2RhbDoge1xuICAgIG9rVGV4dDogJ8OYwqrDmMKjw5nCg8OZworDmMKvJyxcbiAgICBjYW5jZWxUZXh0OiAnw5jCpcOZwoTDmMK6w5jCp8OYwqEnLFxuICAgIGp1c3RPa1RleHQ6ICfDmMKqw5jCo8OZwoPDmcKKw5jCrycsXG4gIH0sXG4gIFBvcGNvbmZpcm06IHtcbiAgICBva1RleHQ6ICfDmMKqw5jCo8OZwoPDmcKKw5jCrycsXG4gICAgY2FuY2VsVGV4dDogJ8OYwqXDmcKEw5jCusOYwqfDmMKhJyxcbiAgfSxcbiAgVHJhbnNmZXI6IHtcbiAgICBub3RGb3VuZENvbnRlbnQ6ICfDmcKEw5jCpyDDmcKKw5nCiMOYwqzDmMKvIMOZwoXDmMKtw5jCqsOZwojDmcKJJyxcbiAgICBzZWFyY2hQbGFjZWhvbGRlcjogJ8OYwqfDmMKow5jCrcOYwqsgw5nCh8OZwobDmMKnJyxcbiAgICBpdGVtVW5pdDogJ8OYwrnDmcKGw5jCtcOYwrEnLFxuICAgIGl0ZW1zVW5pdDogJ8OYwrnDmcKGw5jCp8OYwrXDmMKxJyxcbiAgfSxcbiAgU2VsZWN0OiB7XG4gICAgbm90Rm91bmRDb250ZW50OiAnw5nChMOYwqfDmcKKw5nCiMOYwqzDmMKvIMOZwoXDmMKtw5jCqsOZwojDmcKJJyxcbiAgfSxcbiAgVXBsb2FkOiB7XG4gICAgdXBsb2FkaW5nOiAnw5jCrMOYwqfDmMKxw5nCiiDDmMKnw5nChMOYwrHDmcKBw5jCuS4uLicsXG4gICAgcmVtb3ZlRmlsZTogJ8OYwqfDmMKtw5jCsMOZwoEgw5jCp8OZwoTDmcKFw5nChMOZwoEnLFxuICAgIHVwbG9hZEVycm9yOiAnw5nChcOYwrTDmcKDw5nChMOYwqkgw5nCgcOZwokgw5jCp8OZwoTDmMKxw5nCgcOYwrknLFxuICAgIHByZXZpZXdGaWxlOiAnw5jCp8OYwrPDmMKqw5jCucOYwrHDmMK2IMOYwqfDmcKEw5nChcOZwoTDmcKBJyxcbiAgfSxcbn07XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIHRvZGF5OiAnw5DClMOQwr3DkMK1w5HCgScsXG4gIG5vdzogJ8OQwqHDkMK1w5DCs8OQwrAnLFxuICBiYWNrVG9Ub2RheTogJ8OQwprDkcKKw5DCvCDDkMK0w5DCvcOQwrXDkcKBJyxcbiAgb2s6ICfDkMKUw5DCvsOQwrHDkcKAw5DCtScsXG4gIGNsZWFyOiAnw5DCmMOQwrfDkcKHw5DCuMORwoHDkcKCw5DCssOQwrDDkMK9w5DCtScsXG4gIG1vbnRoOiAnw5DCnMOQwrXDkcKBw5DCtcORwoYnLFxuICB5ZWFyOiAnw5DCk8OQwr7DkMK0w5DCuMOQwr3DkMKwJyxcbiAgdGltZVNlbGVjdDogJ8OQwpjDkMK3w5DCscOQwr7DkcKAIMOQwr3DkMKwIMORwofDkMKww5HCgScsXG4gIGRhdGVTZWxlY3Q6ICfDkMKYw5DCt8OQwrHDkMK+w5HCgCDDkMK9w5DCsCDDkMK0w5DCsMORwoLDkMKwJyxcbiAgbW9udGhTZWxlY3Q6ICfDkMKYw5DCt8OQwrHDkMK+w5HCgCDDkMK9w5DCsCDDkMK8w5DCtcORwoHDkMK1w5HChicsXG4gIHllYXJTZWxlY3Q6ICfDkMKYw5DCt8OQwrHDkMK+w5HCgCDDkMK9w5DCsCDDkMKzw5DCvsOQwrTDkMK4w5DCvcOQwrAnLFxuICBkZWNhZGVTZWxlY3Q6ICfDkMKUw5DCtcORwoHDkMK1w5HCgsOQwrjDkMK7w5DCtcORwoLDkMK4w5DCtScsXG4gIHllYXJGb3JtYXQ6ICdZWVlZJyxcbiAgZGF0ZUZvcm1hdDogJ0QgTSBZWVlZJyxcbiAgZGF5Rm9ybWF0OiAnRCcsXG4gIGRhdGVUaW1lRm9ybWF0OiAnRCBNIFlZWVkgSEg6bW06c3MnLFxuICBtb250aEJlZm9yZVllYXI6IHRydWUsXG4gIHByZXZpb3VzTW9udGg6ICfDkMKfw5HCgMOQwrXDkMK0w5DCuMORwojDkMK1w5DCvSDDkMK8w5DCtcORwoHDkMK1w5HChiAoUGFnZVVwKScsXG4gIG5leHRNb250aDogJ8OQwqHDkMK7w5DCtcOQwrTDkMKyw5DCsMORwokgw5DCvMOQwrXDkcKBw5DCtcORwoYgKFBhZ2VEb3duKScsXG4gIHByZXZpb3VzWWVhcjogJ8OQwp/DkMK+w5HCgcOQwrvDkMK1w5DCtMOQwr3DkMKwIMOQwrPDkMK+w5DCtMOQwrjDkMK9w5DCsCAoQ29udHJvbCArIGxlZnQpJyxcbiAgbmV4dFllYXI6ICfDkMKhw5DCu8OQwrXDkMK0w5DCssOQwrDDkcKJw5DCsCDDkMKzw5DCvsOQwrTDkMK4w5DCvcOQwrAgKENvbnRyb2wgKyByaWdodCknLFxuICBwcmV2aW91c0RlY2FkZTogJ8OQwp/DkcKAw5DCtcOQwrTDkMK4w5HCiMOQwr3DkMK+IMOQwrTDkMK1w5HCgcOQwrXDkcKCw5DCuMOQwrvDkMK1w5HCgsOQwrjDkMK1JyxcbiAgbmV4dERlY2FkZTogJ8OQwqHDkMK7w5DCtcOQwrTDkMKyw5DCsMORwonDkMK+IMOQwrTDkMK1w5HCgcOQwrXDkcKCw5DCuMOQwrvDkMK1w5HCgsOQwrjDkMK1JyxcbiAgcHJldmlvdXNDZW50dXJ5OiAnw5DCn8OQwr7DkcKBw5DCu8OQwrXDkMK0w5DCtcOQwr0gw5DCssOQwrXDkMK6JyxcbiAgbmV4dENlbnR1cnk6ICfDkMKhw5DCu8OQwrXDkMK0w5DCssOQwrDDkcKJIMOQwrLDkMK1w5DCuicsXG59O1xuIiwiY29uc3QgbG9jYWxlID0ge1xuICBwbGFjZWhvbGRlcjogJ8OQwpjDkMK3w5DCscOQwr7DkcKAIMOQwr3DkMKwIMORwofDkMKww5HCgScsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7XG4iLCJpbXBvcnQgQ2FsZW5kYXJMb2NhbGUgZnJvbSAnLi4vY2FsZW5kYXIvYmdfQkcnO1xuaW1wb3J0IFRpbWVQaWNrZXJMb2NhbGUgZnJvbSAnLi4vdGltZS1waWNrZXIvYmdfQkcnO1xuXG4vLyBNZXJnZSBpbnRvIGEgbG9jYWxlIG9iamVjdFxuY29uc3QgbG9jYWxlID0ge1xuICBsYW5nOiB7XG4gICAgcGxhY2Vob2xkZXI6ICfDkMKYw5DCt8OQwrHDkMK+w5HCgCDDkMK9w5DCsCDDkMK0w5DCsMORwoLDkMKwJyxcbiAgICByYW5nZVBsYWNlaG9sZGVyOiBbJ8OQwp3DkMKww5HCh8OQwrDDkMK7w5DCvcOQwrAnLCAnw5DCmsORwoDDkMKww5DCucOQwr3DkMKwJ10sXG4gICAgLi4uQ2FsZW5kYXJMb2NhbGUsXG4gIH0sXG4gIHRpbWVQaWNrZXJMb2NhbGU6IHtcbiAgICAuLi5UaW1lUGlja2VyTG9jYWxlLFxuICB9LFxufTtcblxuLy8gQWxsIHNldHRpbmdzIGF0OlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9ibG9iL21hc3Rlci9jb21wb25lbnRzL2RhdGUtcGlja2VyL2xvY2FsZS9leGFtcGxlLmpzb25cblxuZXhwb3J0IGRlZmF1bHQgbG9jYWxlO1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICAvLyBPcHRpb25zLmpzeFxuICBpdGVtc19wZXJfcGFnZTogJy8gw5HCgcORwoLDkcKAw5DCsMOQwr3DkMK4w5HChsOQwrAnLFxuICBqdW1wX3RvOiAnw5DCmsORworDkMK8JyxcbiAganVtcF90b19jb25maXJtOiAnw5DCv8OQwr7DkcKCw5DCssORworDkcKAw5DCtsOQwrTDkMKww5DCssOQwrDDkMK8JyxcbiAgcGFnZTogJycsXG5cbiAgLy8gUGFnaW5hdGlvbi5qc3hcbiAgcHJldl9wYWdlOiAnw5DCn8ORwoDDkMK1w5DCtMOQwrjDkcKIw5DCvcOQwrAgw5HCgcORwoLDkcKAw5DCsMOQwr3DkMK4w5HChsOQwrAnLFxuICBuZXh0X3BhZ2U6ICfDkMKhw5DCu8OQwrXDkMK0w5DCssOQwrDDkcKJw5DCsCDDkcKBw5HCgsORwoDDkMKww5DCvcOQwrjDkcKGw5DCsCcsXG4gIHByZXZfNTogJ8OQwp/DkcKAw5DCtcOQwrTDkMK4w5HCiMOQwr3DkMK4IDUgw5HCgcORwoLDkcKAw5DCsMOQwr3DkMK4w5HChsOQwrgnLFxuICBuZXh0XzU6ICfDkMKhw5DCu8OQwrXDkMK0w5DCssOQwrDDkcKJw5DCuCA1IMORwoHDkcKCw5HCgMOQwrDDkMK9w5DCuMORwobDkMK4JyxcbiAgcHJldl8zOiAnw5DCn8ORwoDDkMK1w5DCtMOQwrjDkcKIw5DCvcOQwrggMyDDkcKBw5HCgsORwoDDkMKww5DCvcOQwrjDkcKGw5DCuCcsXG4gIG5leHRfMzogJ8OQwqHDkMK7w5DCtcOQwrTDkMKyw5DCsMORwonDkMK4IDMgw5HCgcORwoLDkcKAw5DCsMOQwr3DkMK4w5HChsOQwrgnLFxufTtcbiIsImltcG9ydCBDYWxlbmRhciBmcm9tICcuL2NhbGVuZGFyL2JnX0JHJztcbmltcG9ydCBEYXRlUGlja2VyIGZyb20gJy4vZGF0ZS1waWNrZXIvYmdfQkcnO1xuaW1wb3J0IFBhZ2luYXRpb24gZnJvbSAnLi9wYWdpbmF0aW9uL2JnX0JHJztcbmltcG9ydCBUaW1lUGlja2VyIGZyb20gJy4vdGltZS1waWNrZXIvYmdfQkcnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGxvY2FsZTogJ2JnJyxcbiAgUGFnaW5hdGlvbixcbiAgRGF0ZVBpY2tlcixcbiAgVGltZVBpY2tlcixcbiAgQ2FsZW5kYXIsXG4gIFRhYmxlOiB7XG4gICAgZmlsdGVyVGl0bGU6ICfDkMKkw5DCuMOQwrvDkcKCw5HCgMOQwrjDkcKAw5DCsMOQwr3DkMK1JyxcbiAgICBmaWx0ZXJDb25maXJtOiAnw5DClMOQwr7DkMKxw5HCgMOQwrUnLFxuICAgIGZpbHRlclJlc2V0OiAnw5DCncORwoPDkMK7w5HCgMOQwrjDkMKww5DCvcOQwrUnLFxuICAgIGVtcHR5VGV4dDogJ8OQwp3DkcKPw5DCvMOQwrAgw5DCtMOQwrDDkMK9w5DCvcOQwrgnLFxuICAgIHNlbGVjdEFsbDogJ8OQwpjDkMK3w5DCscOQwr7DkcKAIMOQwr3DkMKwIMORwoLDkMK1w5DCusORwoPDkcKJw5DCsCDDkcKBw5HCgsORwoDDkMKww5DCvcOQwrjDkcKGw5DCsCcsXG4gICAgc2VsZWN0SW52ZXJ0OiAnw5DCnsOQwrHDkcKAw5HCisORwonDkMKww5DCvcOQwrUnLFxuICB9LFxuICBNb2RhbDoge1xuICAgIG9rVGV4dDogJ8OQwpTDkMK+w5DCscORwoDDkMK1JyxcbiAgICBjYW5jZWxUZXh0OiAnw5DCnsORwoLDkMK6w5DCsMOQwrcnLFxuICAgIGp1c3RPa1RleHQ6ICfDkMKUw5DCvsOQwrHDkcKAw5DCtScsXG4gIH0sXG4gIFBvcGNvbmZpcm06IHtcbiAgICBva1RleHQ6ICfDkMKUw5DCvsOQwrHDkcKAw5DCtScsXG4gICAgY2FuY2VsVGV4dDogJ8OQwp7DkcKCw5DCusOQwrDDkMK3JyxcbiAgfSxcbiAgVHJhbnNmZXI6IHtcbiAgICBub3RGb3VuZENvbnRlbnQ6ICfDkMKdw5HCj8OQwrzDkMKwIMOQwr3DkMKww5DCvMOQwrXDkcKAw5DCtcOQwr3DkMK4JyxcbiAgICBzZWFyY2hQbGFjZWhvbGRlcjogJ8OQwqLDkcKKw5HCgMORwoHDkMK1w5DCvcOQwrUnLFxuICAgIGl0ZW1Vbml0OiAnw5DCuMOQwrfDkMKxw5DCvsORwoAnLFxuICAgIGl0ZW1zVW5pdDogJ8OQwrjDkMK3w5DCscOQwr7DkcKAw5DCuCcsXG4gIH0sXG4gIFNlbGVjdDoge1xuICAgIG5vdEZvdW5kQ29udGVudDogJ8OQwp3DkcKPw5DCvMOQwrAgw5DCvcOQwrDDkMK8w5DCtcORwoDDkMK1w5DCvcOQwrgnLFxuICB9LFxuICBVcGxvYWQ6IHtcbiAgICB1cGxvYWRpbmc6ICfDkMKaw5DCsMORwofDkMKyw5DCsMOQwr3DkMK1Li4uJyxcbiAgICByZW1vdmVGaWxlOiAnw5DCn8ORwoDDkMK1w5DCvMOQwrDDkcKFw5DCssOQwrDDkMK9w5DCtScsXG4gICAgdXBsb2FkRXJyb3I6ICfDkMKTw5HCgMOQwrXDkcKIw5DCusOQwrAgw5DCv8ORwoDDkMK4IMOQwrrDkMKww5HCh8OQwrLDkMKww5DCvcOQwrXDkcKCw5DCvicsXG4gICAgcHJldmlld0ZpbGU6ICfDkMKfw5HCgMOQwrXDkMKzw5DCu8OQwrXDkMK0JyxcbiAgfSxcbn07XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIHRvZGF5OiAnQXZ1aScsXG4gIG5vdzogJ0FyYScsXG4gIGJhY2tUb1RvZGF5OiAnVG9ybmFyIGEgYXZ1aScsXG4gIG9rOiAnQWNjZXB0YXInLFxuICBjbGVhcjogJ05ldGVqYXInLFxuICBtb250aDogJ01lcycsXG4gIHllYXI6ICdBbnknLFxuICB0aW1lU2VsZWN0OiAnU2VsZWNjaW9uYXIgaG9yYScsXG4gIGRhdGVTZWxlY3Q6ICdTZWxlY2Npb25hciBkYXRhJyxcbiAgbW9udGhTZWxlY3Q6ICdFc2NvbGxpciB1biBtZXMnLFxuICB5ZWFyU2VsZWN0OiAnRXNjb2xsaXIgdW4gYW55JyxcbiAgZGVjYWRlU2VsZWN0OiAnRXNjb2xsaXIgdW5hIGTDg8KoY2FkYScsXG4gIHllYXJGb3JtYXQ6ICdZWVlZJyxcbiAgZGF0ZUZvcm1hdDogJ0QvTS9ZWVlZJyxcbiAgZGF5Rm9ybWF0OiAnRCcsXG4gIGRhdGVUaW1lRm9ybWF0OiAnRC9NL1lZWVkgSEg6bW06c3MnLFxuICBtb250aEJlZm9yZVllYXI6IHRydWUsXG4gIHByZXZpb3VzTW9udGg6ICdNZXMgYW50ZXJpb3IgKFBhZ2VVcCknLFxuICBuZXh0TW9udGg6ICdNZXMgc2Vnw4PCvGVudCAoUGFnZURvd24pJyxcbiAgcHJldmlvdXNZZWFyOiAnQW55IGFudGVyaW9yIChDb250cm9sICsgbGVmdCknLFxuICBuZXh0WWVhcjogJ01lcyBzZWfDg8K8ZW50IChDb250cm9sICsgcmlnaHQpJyxcbiAgcHJldmlvdXNEZWNhZGU6ICdEw4PCqGNhZGEgYW50ZXJpb3InLFxuICBuZXh0RGVjYWRlOiAnRMODwqhjYWRhIHNlZ8ODwrxlbnQnLFxuICBwcmV2aW91c0NlbnR1cnk6ICdTZWdsZSBhbnRlcmlvcicsXG4gIG5leHRDZW50dXJ5OiAnU2VnbGUgc2Vnw4PCvGVudCcsXG59O1xuIiwiY29uc3QgbG9jYWxlID0ge1xuICBwbGFjZWhvbGRlcjogJ1NlbGVjY2lvbmFyIGhvcmEnLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgbG9jYWxlO1xuIiwiaW1wb3J0IENhbGVuZGFyTG9jYWxlIGZyb20gJy4uL2NhbGVuZGFyL2NhX0VTJztcbmltcG9ydCBUaW1lUGlja2VyTG9jYWxlIGZyb20gJy4uL3RpbWUtcGlja2VyL2NhX0VTJztcblxuLy8gTWVyZ2UgaW50byBhIGxvY2FsZSBvYmplY3RcbmNvbnN0IGxvY2FsZSA9IHtcbiAgbGFuZzoge1xuICAgIHBsYWNlaG9sZGVyOiAnU2VsZWNjaW9uYXIgZGF0YScsXG4gICAgcmFuZ2VQbGFjZWhvbGRlcjogWydEYXRhIGluaWNpYWwnLCAnRGF0YSBmaW5hbCddLFxuICAgIC4uLkNhbGVuZGFyTG9jYWxlLFxuICB9LFxuICB0aW1lUGlja2VyTG9jYWxlOiB7XG4gICAgLi4uVGltZVBpY2tlckxvY2FsZSxcbiAgfSxcbn07XG5cbi8vIEFsbCBzZXR0aW5ncyBhdDpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vYmxvYi9tYXN0ZXIvY29tcG9uZW50cy9kYXRlLXBpY2tlci9sb2NhbGUvZXhhbXBsZS5qc29uXG5cbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgLy8gT3B0aW9ucy5qc3hcbiAgaXRlbXNfcGVyX3BhZ2U6ICcvIHDDg8KgZ2luYScsXG4gIGp1bXBfdG86ICdBbmFyIGEnLFxuICBqdW1wX3RvX2NvbmZpcm06ICdDb25maXJtYScsXG4gIHBhZ2U6ICcnLFxuXG4gIC8vIFBhZ2luYXRpb24uanN4XG4gIHByZXZfcGFnZTogJ1DDg8KgZ2luYSBwcsODwqh2aWEnLFxuICBuZXh0X3BhZ2U6ICdQw4PCoGdpbmEgc2Vnw4PCvGVudCcsXG4gIHByZXZfNTogJzUgcMODwqBnaW5lcyBwcsODwqh2aWVzJyxcbiAgbmV4dF81OiAnNSBww4PCoGdpbmVzIHNlZ8ODwrxlbnRzJyxcbiAgcHJldl8zOiAnMyBww4PCoGdpbmVzIHByw4PCqHZpZXMnLFxuICBuZXh0XzM6ICczIHDDg8KgZ2luZXMgc2Vnw4PCvGVudHMnLFxufTtcbiIsImltcG9ydCBDYWxlbmRhciBmcm9tICcuL2NhbGVuZGFyL2NhX0VTJztcbmltcG9ydCBEYXRlUGlja2VyIGZyb20gJy4vZGF0ZS1waWNrZXIvY2FfRVMnO1xuaW1wb3J0IFBhZ2luYXRpb24gZnJvbSAnLi9wYWdpbmF0aW9uL2NhX0VTJztcbmltcG9ydCBUaW1lUGlja2VyIGZyb20gJy4vdGltZS1waWNrZXIvY2FfRVMnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGxvY2FsZTogJ2NhJyxcbiAgUGFnaW5hdGlvbixcbiAgRGF0ZVBpY2tlcixcbiAgVGltZVBpY2tlcixcbiAgQ2FsZW5kYXIsXG4gIFRhYmxlOiB7XG4gICAgZmlsdGVyVGl0bGU6ICdGaWx0cmFyIE1lbnUnLFxuICAgIGZpbHRlckNvbmZpcm06ICdPSycsXG4gICAgZmlsdGVyUmVzZXQ6ICdSZXN0YWJsaXInLFxuICAgIGVtcHR5VGV4dDogJ1NlbnNlIGRhZGVzJyxcbiAgfSxcbiAgTW9kYWw6IHtcbiAgICBva1RleHQ6ICdPSycsXG4gICAgY2FuY2VsVGV4dDogJ0NhbmNlbMOCwrdsYXInLFxuICAgIGp1c3RPa1RleHQ6ICdPSycsXG4gIH0sXG4gIFBvcGNvbmZpcm06IHtcbiAgICBva1RleHQ6ICdPSycsXG4gICAgY2FuY2VsVGV4dDogJ0NhbmNlbMOCwrdsYXInLFxuICB9LFxuICBUcmFuc2Zlcjoge1xuICAgIG5vdEZvdW5kQ29udGVudDogJ05vIHRyb2JhdCcsXG4gICAgc2VhcmNoUGxhY2Vob2xkZXI6ICdDZXJjYXIgYXF1w4PCrScsXG4gICAgaXRlbVVuaXQ6ICdpdGVtJyxcbiAgICBpdGVtc1VuaXQ6ICdpdGVtcycsXG4gIH0sXG4gIFNlbGVjdDoge1xuICAgIG5vdEZvdW5kQ29udGVudDogJ05vIHRyb2JhdCcsXG4gIH0sXG59O1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICB0b2RheTogJ0RuZXMnLFxuICBub3c6ICdOeW7Dg8KtJyxcbiAgYmFja1RvVG9kYXk6ICdacMOEwpt0IG5hIGRuZcOFwqFlaycsXG4gIG9rOiAnT2snLFxuICBjbGVhcjogJ1Z5bWF6YXQnLFxuICBtb250aDogJ03DhMKbc8ODwq1jJyxcbiAgeWVhcjogJ1JvaycsXG4gIHRpbWVTZWxlY3Q6ICdWeWJyYXQgw4TCjWFzJyxcbiAgZGF0ZVNlbGVjdDogJ1Z5YnJhdCBkYXR1bScsXG4gIG1vbnRoU2VsZWN0OiAnVnliZXJ0ZSBtw4TCm3PDg8KtYycsXG4gIHllYXJTZWxlY3Q6ICdWeWJlcnRlIHJvaycsXG4gIGRlY2FkZVNlbGVjdDogJ1Z5YmVydGUgZGVrw4PCoWR1JyxcbiAgeWVhckZvcm1hdDogJ1lZWVknLFxuICBkYXRlRm9ybWF0OiAnRC5NLllZWVknLFxuICBkYXlGb3JtYXQ6ICdEJyxcbiAgZGF0ZVRpbWVGb3JtYXQ6ICdELk0uWVlZWSBISDptbTpzcycsXG4gIG1vbnRoQmVmb3JlWWVhcjogdHJ1ZSxcbiAgcHJldmlvdXNNb250aDogJ1DDhcKZZWRjaG96w4PCrSBtw4TCm3PDg8KtYyAoUGFnZVVwKScsXG4gIG5leHRNb250aDogJ07Dg8Khc2xlZHVqw4PCrWPDg8KtIChQYWdlRG93biknLFxuICBwcmV2aW91c1llYXI6ICdQw4XCmWVkY2hvesODwq0gcm9rIChDb250cm9sICsgbGVmdCknLFxuICBuZXh0WWVhcjogJ07Dg8Khc2xlZHVqw4PCrWPDg8KtIHJvayAoQ29udHJvbCArIHJpZ2h0KScsXG4gIHByZXZpb3VzRGVjYWRlOiAnUMOFwpllZGNob3rDg8KtIGRla8ODwqFkYScsXG4gIG5leHREZWNhZGU6ICdOw4PCoXNsZWR1asODwq1jw4PCrSBkZWvDg8KhZGEnLFxuICBwcmV2aW91c0NlbnR1cnk6ICdQw4XCmWVkY2hvesODwq0gc3RvbGV0w4PCrScsXG4gIG5leHRDZW50dXJ5OiAnTsODwqFzbGVkdWrDg8KtY8ODwq0gc3RvbGV0w4PCrScsXG59O1xuIiwiY29uc3QgbG9jYWxlID0ge1xuICBwbGFjZWhvbGRlcjogJ1Z5YnJhdCDDhMKNYXMnLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgbG9jYWxlO1xuIiwiaW1wb3J0IENhbGVuZGFyTG9jYWxlIGZyb20gJy4uL2NhbGVuZGFyL2NzX0NaJztcbmltcG9ydCBUaW1lUGlja2VyTG9jYWxlIGZyb20gJy4uL3RpbWUtcGlja2VyL2NzX0NaJztcblxuLy8gTWVyZ2UgaW50byBhIGxvY2FsZSBvYmplY3RcbmNvbnN0IGxvY2FsZSA9IHtcbiAgbGFuZzoge1xuICAgIHBsYWNlaG9sZGVyOiAnVnlicmF0IGRhdHVtJyxcbiAgICByYW5nZVBsYWNlaG9sZGVyOiBbJ09kJywgJ0RvJ10sXG4gICAgLi4uQ2FsZW5kYXJMb2NhbGUsXG4gIH0sXG4gIHRpbWVQaWNrZXJMb2NhbGU6IHtcbiAgICAuLi5UaW1lUGlja2VyTG9jYWxlLFxuICB9LFxufTtcblxuLy8gQWxsIHNldHRpbmdzIGF0OlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9ibG9iL21hc3Rlci9jb21wb25lbnRzL2RhdGUtcGlja2VyL2xvY2FsZS9leGFtcGxlLmpzb25cblxuZXhwb3J0IGRlZmF1bHQgbG9jYWxlO1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICAvLyBPcHRpb25zLmpzeFxuICBpdGVtc19wZXJfcGFnZTogJy8gc3RyYW5hJyxcbiAganVtcF90bzogJ1DDhcKZZWrDg8KtdCcsXG4gIGp1bXBfdG9fY29uZmlybTogJ3BvdHZyZGl0JyxcbiAgcGFnZTogJycsXG5cbiAgLy8gUGFnaW5hdGlvbi5qc3hcbiAgcHJldl9wYWdlOiAnUMOFwpllZGNob3rDg8KtIHN0cmFuYScsXG4gIG5leHRfcGFnZTogJ07Dg8Khc2xlZHVqw4PCrWPDg8KtIHN0cmFuYScsXG4gIHByZXZfNTogJ1DDhcKZZWRjaG96w4PCrWNoIDUgc3RyYW4nLFxuICBuZXh0XzU6ICdOw4PCoXNsZWR1asODwq1jw4PCrWNoIDUgc3RyYW4nLFxuICBwcmV2XzM6ICdQw4XCmWVkY2hvesODwq0gMyBzdHJhbnknLFxuICBuZXh0XzM6ICdOw4PCoXNsZWR1asODwq1jw4PCrSAzIHN0cmFueScsXG59O1xuIiwiaW1wb3J0IENhbGVuZGFyIGZyb20gJy4vY2FsZW5kYXIvY3NfQ1onO1xuaW1wb3J0IERhdGVQaWNrZXIgZnJvbSAnLi9kYXRlLXBpY2tlci9jc19DWic7XG5pbXBvcnQgUGFnaW5hdGlvbiBmcm9tICcuL3BhZ2luYXRpb24vY3NfQ1onO1xuaW1wb3J0IFRpbWVQaWNrZXIgZnJvbSAnLi90aW1lLXBpY2tlci9jc19DWic7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbG9jYWxlOiAnY3MnLFxuICBQYWdpbmF0aW9uLFxuICBEYXRlUGlja2VyLFxuICBUaW1lUGlja2VyLFxuICBDYWxlbmRhcixcbiAgVGFibGU6IHtcbiAgICBmaWx0ZXJUaXRsZTogJ0ZpbHRyJyxcbiAgICBmaWx0ZXJDb25maXJtOiAnUG90dnJkaXQnLFxuICAgIGZpbHRlclJlc2V0OiAnT2Jub3ZpdCcsXG4gICAgZW1wdHlUZXh0OiAnw4XCvcODwqFkbsODwqEgZGF0YScsXG4gIH0sXG4gIE1vZGFsOiB7XG4gICAgb2tUZXh0OiAnT2snLFxuICAgIGNhbmNlbFRleHQ6ICdTdG9ybm8nLFxuICAgIGp1c3RPa1RleHQ6ICdPaycsXG4gIH0sXG4gIFBvcGNvbmZpcm06IHtcbiAgICBva1RleHQ6ICdPaycsXG4gICAgY2FuY2VsVGV4dDogJ1N0b3JubycsXG4gIH0sXG4gIFRyYW5zZmVyOiB7XG4gICAgbm90Rm91bmRDb250ZW50OiAnTmVuYWxlemVubycsXG4gICAgc2VhcmNoUGxhY2Vob2xkZXI6ICdWeWhsZWTDg8KhdsODwqFuw4PCrScsXG4gICAgaXRlbVVuaXQ6ICdwb2xvw4XCvmthJyxcbiAgICBpdGVtc1VuaXQ6ICdwb2xvw4XCvmVrJyxcbiAgfSxcbiAgU2VsZWN0OiB7XG4gICAgbm90Rm91bmRDb250ZW50OiAnTmVuYWxlemVubycsXG4gIH0sXG4gIFVwbG9hZDoge1xuICAgIHVwbG9hZGluZzogJ05haHLDg8KhdsODwqFuw4PCrS4uLicsXG4gICAgcmVtb3ZlRmlsZTogJ09kc3RyYW5pdCBzb3Vib3InLFxuICAgIHVwbG9hZEVycm9yOiAnQ2h5YmEgcMOFwplpIG5haHLDg8KhdsODwqFuw4PCrScsXG4gICAgcHJldmlld0ZpbGU6ICdab2JyYXppdCBzb3Vib3InLFxuICB9LFxufTtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgdG9kYXk6ICdIZXV0ZScsXG4gIG5vdzogJ0pldHp0JyxcbiAgYmFja1RvVG9kYXk6ICdadXLDg8K8Y2sgenUgSGV1dGUnLFxuICBvazogJ09LJyxcbiAgY2xlYXI6ICdadXLDg8K8Y2tzZXR6ZW4nLFxuICBtb250aDogJ01vbmF0JyxcbiAgeWVhcjogJ0phaHInLFxuICB0aW1lU2VsZWN0OiAnWmVpdCB3w4PCpGhsZW4nLFxuICBkYXRlU2VsZWN0OiAnRGF0dW0gd8ODwqRobGVuJyxcbiAgbW9udGhTZWxlY3Q6ICdXw4PCpGhsZSBlaW5lbiBNb25hdCcsXG4gIHllYXJTZWxlY3Q6ICdXw4PCpGhsZSBlaW4gSmFocicsXG4gIGRlY2FkZVNlbGVjdDogJ1fDg8KkaGxlIGVpbiBKYWhyemVobnQnLFxuICB5ZWFyRm9ybWF0OiAnWVlZWScsXG4gIGRhdGVGb3JtYXQ6ICdELk0uWVlZWScsXG4gIGRheUZvcm1hdDogJ0QnLFxuICBkYXRlVGltZUZvcm1hdDogJ0QuTS5ZWVlZIEhIOm1tOnNzJyxcbiAgbW9udGhCZWZvcmVZZWFyOiB0cnVlLFxuICBwcmV2aW91c01vbnRoOiAnVm9yaGVyaWdlciBNb25hdCAoUGFnZVVwKScsXG4gIG5leHRNb250aDogJ07Dg8KkY2hzdGVyIE1vbmF0IChQYWdlRG93biknLFxuICBwcmV2aW91c1llYXI6ICdWb3JoZXJpZ2VzIEphaHIgKEN0cmwgKyBsZWZ0KScsXG4gIG5leHRZZWFyOiAnTsODwqRjaHN0ZXMgSmFociAoQ3RybCArIHJpZ2h0KScsXG4gIHByZXZpb3VzRGVjYWRlOiAnVm9yaGVyaWdlcyBKYWhyemVobnQnLFxuICBuZXh0RGVjYWRlOiAnTsODwqRjaHN0ZXMgSmFocnplaG50JyxcbiAgcHJldmlvdXNDZW50dXJ5OiAnVm9yaGVyaWdlcyBKYWhyaHVuZGVydCcsXG4gIG5leHRDZW50dXJ5OiAnTsODwqRjaHN0ZXMgSmFocmh1bmRlcnQnLFxufTtcbiIsImNvbnN0IGxvY2FsZSA9IHtcbiAgcGxhY2Vob2xkZXI6ICdaZWl0IGF1c3fDg8KkaGxlbicsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7XG4iLCJpbXBvcnQgQ2FsZW5kYXJMb2NhbGUgZnJvbSAnLi4vY2FsZW5kYXIvZGVfREUnO1xuaW1wb3J0IFRpbWVQaWNrZXJMb2NhbGUgZnJvbSAnLi4vdGltZS1waWNrZXIvZGVfREUnO1xuXG4vLyBNZXJnZSBpbnRvIGEgbG9jYWxlIG9iamVjdFxuY29uc3QgbG9jYWxlID0ge1xuICBsYW5nOiB7XG4gICAgcGxhY2Vob2xkZXI6ICdEYXR1bSBhdXN3w4PCpGhsZW4nLFxuICAgIHJhbmdlUGxhY2Vob2xkZXI6IFsnU3RhcnRkYXR1bScsICdFbmRkYXR1bSddLFxuICAgIC4uLkNhbGVuZGFyTG9jYWxlLFxuICB9LFxuICB0aW1lUGlja2VyTG9jYWxlOiB7XG4gICAgLi4uVGltZVBpY2tlckxvY2FsZSxcbiAgfSxcbn07XG5cbi8vIEFsbCBzZXR0aW5ncyBhdDpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vaXNzdWVzLzQyNFxuXG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIC8vIE9wdGlvbnMuanN4XG4gIGl0ZW1zX3Blcl9wYWdlOiAnLyBTZWl0ZScsXG4gIGp1bXBfdG86ICdHZWhlIHp1JyxcbiAganVtcF90b19jb25maXJtOiAnYmVzdMODwqR0aWdlbicsXG4gIHBhZ2U6ICcnLFxuXG4gIC8vIFBhZ2luYXRpb24uanN4XG4gIHByZXZfcGFnZTogJ1ZvcmhlcmlnZSBTZWl0ZScsXG4gIG5leHRfcGFnZTogJ07Dg8KkY2hzdGUgU2VpdGUnLFxuICBwcmV2XzU6ICc1IFNlaXRlbiB6dXLDg8K8Y2snLFxuICBuZXh0XzU6ICc1IFNlaXRlbiB2b3InLFxuICBwcmV2XzM6ICczIFNlaXRlbiB6dXLDg8K8Y2snLFxuICBuZXh0XzM6ICczIFNlaXRlbiB2b3InLFxufTtcbiIsImltcG9ydCBDYWxlbmRhciBmcm9tICcuL2NhbGVuZGFyL2RlX0RFJztcbmltcG9ydCBEYXRlUGlja2VyIGZyb20gJy4vZGF0ZS1waWNrZXIvZGVfREUnO1xuaW1wb3J0IFBhZ2luYXRpb24gZnJvbSAnLi9wYWdpbmF0aW9uL2RlX0RFJztcbmltcG9ydCBUaW1lUGlja2VyIGZyb20gJy4vdGltZS1waWNrZXIvZGVfREUnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGxvY2FsZTogJ2RlJyxcbiAgUGFnaW5hdGlvbixcbiAgRGF0ZVBpY2tlcixcbiAgVGltZVBpY2tlcixcbiAgQ2FsZW5kYXIsXG4gIFRhYmxlOiB7XG4gICAgZmlsdGVyVGl0bGU6ICdGaWx0ZXItTWVuw4PCvCcsXG4gICAgZmlsdGVyQ29uZmlybTogJ09LJyxcbiAgICBmaWx0ZXJSZXNldDogJ1p1csODwrxja3NldHplbicsXG4gICAgZW1wdHlUZXh0OiAnS2VpbmUgRGF0ZW4nLFxuICAgIHNlbGVjdEFsbDogJ1NlbGVrdGllcmUgQWxsZScsXG4gICAgc2VsZWN0SW52ZXJ0OiAnU2VsZWt0aW9uIEludmVydGllcmVuJyxcbiAgfSxcbiAgTW9kYWw6IHtcbiAgICBva1RleHQ6ICdPSycsXG4gICAgY2FuY2VsVGV4dDogJ0FiYnJlY2hlbicsXG4gICAganVzdE9rVGV4dDogJ09LJyxcbiAgfSxcbiAgUG9wY29uZmlybToge1xuICAgIG9rVGV4dDogJ09LJyxcbiAgICBjYW5jZWxUZXh0OiAnQWJicmVjaGVuJyxcbiAgfSxcbiAgVHJhbnNmZXI6IHtcbiAgICBub3RGb3VuZENvbnRlbnQ6ICdOaWNodCBnZWZ1bmRlbicsXG4gICAgc2VhcmNoUGxhY2Vob2xkZXI6ICdTdWNoZW4nLFxuICAgIGl0ZW1Vbml0OiAnRWludHJhZycsXG4gICAgaXRlbXNVbml0OiAnRWludHLDg8KkZ2UnLFxuICB9LFxuICBTZWxlY3Q6IHtcbiAgICBub3RGb3VuZENvbnRlbnQ6ICdOaWNodCBnZWZ1bmRlbicsXG4gIH0sXG4gIFVwbG9hZDoge1xuICAgIHVwbG9hZGluZzogJ0hvY2hsYWRlbi4uLicsXG4gICAgcmVtb3ZlRmlsZTogJ0RhdGVpIGVudGZlcm5lbicsXG4gICAgdXBsb2FkRXJyb3I6ICdGZWhsZXIgYmVpbSBIb2NobGFkZW4nLFxuICAgIHByZXZpZXdGaWxlOiAnRGF0ZWl2b3JzY2hhdScsXG4gIH0sXG59O1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICB0b2RheTogJ8OOwqPDjsKuw47CvMOOwrXDj8KBw47CsScsXG4gIG5vdzogJ8OOwqTDj8KOw4/CgcOOwrEnLFxuICBiYWNrVG9Ub2RheTogJ8OOwqDDjsKvw4/Cg8OPwokgw4/Cg8OPwoTDjsK3IMOPwoPDjsK3w47CvMOOwrXDj8KBw47CucOOwr3DjsKuIMOOwrzDjsKtw4/CgcOOwrEnLFxuICBvazogJ09rJyxcbiAgY2xlYXI6ICfDjsKaw47CscOOwrjDjsKxw4/CgcOOwrnDj8KDw47CvMOPwozDj8KCJyxcbiAgbW9udGg6ICfDjsKcw47CrsOOwr3DjsKxw4/CgicsXG4gIHllYXI6ICfDjsKIw4/ChMOOwr/Dj8KCJyxcbiAgdGltZVNlbGVjdDogJ8OOwpXDj8KAw47CucOOwrvDjsK/w47Cs8OOwq4gw4/CjsOPwoHDjsKxw4/CgicsXG4gIGRhdGVTZWxlY3Q6ICfDjsKVw4/CgMOOwrnDjsK7w47Cv8OOwrPDjsKuIMOOwrfDjsK8w47CtcOPwoHDjsK/w47CvMOOwrfDjsK9w47Cr8OOwrHDj8KCJyxcbiAgbW9udGhTZWxlY3Q6ICfDjsKVw4/CgMOOwrnDjsK7w47Cv8OOwrPDjsKuIMOOwrzDjsKuw47CvcOOwrEnLFxuICB5ZWFyU2VsZWN0OiAnw47ClcOPwoDDjsK5w47Cu8OOwr/DjsKzw47CriDDjsKtw4/ChMOOwr/Dj8KFw4/CgicsXG4gIGRlY2FkZVNlbGVjdDogJ8OOwpXDj8KAw47CucOOwrvDjsK/w47Cs8OOwq4gw47CtMOOwrXDjsK6w47CscOOwrXDj8KEw47Cr8OOwrHDj8KCJyxcbiAgeWVhckZvcm1hdDogJ1lZWVknLFxuICBkYXRlRm9ybWF0OiAnRC9NL1lZWVknLFxuICBkYXlGb3JtYXQ6ICdEJyxcbiAgZGF0ZVRpbWVGb3JtYXQ6ICdEL00vWVlZWSBISDptbTpzcycsXG4gIG1vbnRoQmVmb3JlWWVhcjogdHJ1ZSxcbiAgcHJldmlvdXNNb250aDogJ8OOwqDDj8KBw47Cv8OOwrfDjsKzw47Cv8OPwo3DjsK8w47CtcOOwr3DjsK/w4/CgiDDjsK8w47CrsOOwr3DjsKxw4/CgiAoUGFnZVVwKScsXG4gIG5leHRNb250aDogJ8OOwpXDj8KAw4/CjMOOwrzDjsK1w47CvcOOwr/Dj8KCIMOOwrzDjsKuw47CvcOOwrHDj8KCIChQYWdlRG93biknLFxuICBwcmV2aW91c1llYXI6ICfDjsKgw4/CgcOOwr/DjsK3w47Cs8OOwr/Dj8KNw47CvMOOwrXDjsK9w47CvyDDjsKtw4/ChMOOwr/Dj8KCIChDb250cm9sICsgw47CscOPwoHDjsK5w4/Cg8OPwoTDjsK1w4/CgcOOwqwpJyxcbiAgbmV4dFllYXI6ICfDjsKVw4/CgMOPwozDjsK8w47CtcOOwr3DjsK/IMOOwq3Dj8KEw47Cv8OPwoIgKENvbnRyb2wgKyDDjsK0w47CtcOOwr7DjsK5w47CrCknLFxuICBwcmV2aW91c0RlY2FkZTogJ8OOwqDDj8KBw47Cv8OOwrfDjsKzw47Cv8OPwo3DjsK8w47CtcOOwr3DjsK3IMOOwrTDjsK1w47CusOOwrHDjsK1w4/ChMOOwq/DjsKxJyxcbiAgbmV4dERlY2FkZTogJ8OOwpXDj8KAw4/CjMOOwrzDjsK1w47CvcOOwrcgw47CtMOOwrXDjsK6w47CscOOwrXDj8KEw47Cr8OOwrEnLFxuICBwcmV2aW91c0NlbnR1cnk6ICfDjsKgw4/CgcOOwr/DjsK3w47Cs8OOwr/Dj8KNw47CvMOOwrXDjsK9w47Cv8OPwoIgw47CscOOwrnDj8KOw47CvcOOwrHDj8KCJyxcbiAgbmV4dENlbnR1cnk6ICfDjsKVw4/CgMOPwozDjsK8w47CtcOOwr3DjsK/w4/CgiDDjsKxw47CucOPwo7DjsK9w47CscOPwoInLFxufTtcbiIsImNvbnN0IGxvY2FsZSA9IHtcbiAgcGxhY2Vob2xkZXI6ICfDjsKVw4/CgMOOwrnDjsK7w47CrcOOwr7Dj8KEw47CtSDDj8KOw4/CgcOOwrEnLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgbG9jYWxlO1xuIiwiaW1wb3J0IENhbGVuZGFyTG9jYWxlIGZyb20gJy4uL2NhbGVuZGFyL2VsX0dSJztcbmltcG9ydCBUaW1lUGlja2VyTG9jYWxlIGZyb20gJy4uL3RpbWUtcGlja2VyL2VsX0dSJztcblxuLy8gTWVyZ2UgaW50byBhIGxvY2FsZSBvYmplY3RcbmNvbnN0IGxvY2FsZSA9IHtcbiAgbGFuZzoge1xuICAgIHBsYWNlaG9sZGVyOiAnw47ClcOPwoDDjsK5w47Cu8OOwq3DjsK+w4/ChMOOwrUgw47Ct8OOwrzDjsK1w4/CgcOOwr/DjsK8w47Ct8OOwr3DjsKvw47CsScsXG4gICAgcmFuZ2VQbGFjZWhvbGRlcjogWyfDjsKRw4/CgcOPwofDjsK5w47CusOOwq4gw47Ct8OOwrzDjsK1w4/CgcOOwr/DjsK8w47Ct8OOwr3DjsKvw47CsScsICfDjsKkw47CtcOOwrvDjsK5w47CusOOwq4gw47Ct8OOwrzDjsK1w4/CgcOOwr/DjsK8w47Ct8OOwr3DjsKvw47CsSddLFxuICAgIC4uLkNhbGVuZGFyTG9jYWxlLFxuICB9LFxuICB0aW1lUGlja2VyTG9jYWxlOiB7XG4gICAgLi4uVGltZVBpY2tlckxvY2FsZSxcbiAgfSxcbn07XG5cbi8vIEFsbCBzZXR0aW5ncyBhdDpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vaXNzdWVzLzQyNFxuXG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIC8vIE9wdGlvbnMuanN4XG4gIGl0ZW1zX3Blcl9wYWdlOiAnLyDDj8KDw47CtcOOwrvDjsKvw47CtMOOwrEnLFxuICBqdW1wX3RvOiAnw47CnMOOwrXDj8KEw47CrMOOwrLDjsKxw4/Cg8OOwrcnLFxuICBqdW1wX3RvX2NvbmZpcm06ICfDjsK1w4/CgMOOwrnDjsKyw47CtcOOwrLDjsKxw47CucOPwo7DjsK9w4/CiScsXG4gIHBhZ2U6ICcnLFxuXG4gIC8vIFBhZ2luYXRpb24uanN4XG4gIHByZXZfcGFnZTogJ8OOwqDDj8KBw47Cv8OOwrfDjsKzw47Cv8OPwo3DjsK8w47CtcOOwr3DjsK3IMOOwqPDjsK1w47Cu8OOwq/DjsK0w47CsScsXG4gIG5leHRfcGFnZTogJ8OOwpXDj8KAw4/CjMOOwrzDjsK1w47CvcOOwrcgw47Co8OOwrXDjsK7w47Cr8OOwrTDjsKxJyxcbiAgcHJldl81OiAnw47CoMOPwoHDjsK/w47Ct8OOwrPDjsK/w4/CjcOOwrzDjsK1w47CvcOOwrXDj8KCIDUgw47Co8OOwrXDjsK7w47Cr8OOwrTDjsK1w4/CgicsXG4gIG5leHRfNTogJ8OOwpXDj8KAw4/CjMOOwrzDjsK1w47CvcOOwrXDj8KCIDUgw4/Cg8OOwrXDjsK7w47Cr8OOwrTDjsK1w4/CgicsXG4gIHByZXZfMzogJ8OOwqDDj8KBw47Cv8OOwrfDjsKzw47Cv8OPwo3DjsK8w47CtcOOwr3DjsK1w4/CgiAzIMOOwqPDjsK1w47Cu8OOwq/DjsK0w47CtcOPwoInLFxuICBuZXh0XzM6ICfDjsKVw4/CgMOPwozDjsK8w47CtcOOwr3DjsK1w4/CgiAzIMOOwqPDjsK1w47Cu8OOwq/DjsK0w47CtcOPwoInLFxufTtcbiIsImltcG9ydCBDYWxlbmRhciBmcm9tICcuL2NhbGVuZGFyL2VsX0dSJztcbmltcG9ydCBEYXRlUGlja2VyIGZyb20gJy4vZGF0ZS1waWNrZXIvZWxfR1InO1xuaW1wb3J0IFBhZ2luYXRpb24gZnJvbSAnLi9wYWdpbmF0aW9uL2VsX0dSJztcbmltcG9ydCBUaW1lUGlja2VyIGZyb20gJy4vdGltZS1waWNrZXIvZWxfR1InO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGxvY2FsZTogJ2VsJyxcbiAgUGFnaW5hdGlvbixcbiAgRGF0ZVBpY2tlcixcbiAgVGltZVBpY2tlcixcbiAgQ2FsZW5kYXIsXG4gIFRhYmxlOiB7XG4gICAgZmlsdGVyVGl0bGU6ICfDjsKcw47CtcOOwr3DjsK/w4/CjSDDj8KGw47Cr8OOwrvDj8KEw4/CgcOPwonDjsK9JyxcbiAgICBmaWx0ZXJDb25maXJtOiAnw47Cn8OOwponLFxuICAgIGZpbHRlclJlc2V0OiAnw47ClcOPwoDDjsKxw47CvcOOwrHDj8KGw47Cv8OPwoHDjsKsJyxcbiAgICBlbXB0eVRleHQ6ICfDjsKUw47CtcOOwr0gw4/ChcOPwoDDjsKsw4/CgcOPwofDjsK/w4/ChcOOwr0gw47CtMOOwrXDjsK0w47Cv8OOwrzDjsKtw47CvcOOwrEnLFxuICAgIHNlbGVjdEFsbDogJ8OOwpXDj8KAw47CucOOwrvDjsK/w47Cs8OOwq4gw4/ChMOPwoHDjsKtw4/Ch8OOwr/Dj8KFw4/Cg8OOwrHDj8KCIMOPwoPDjsK1w47Cu8OOwq/DjsK0w47CscOPwoInLFxuICAgIHNlbGVjdEludmVydDogJ8OOwpHDjsK9w4/ChMOOwrnDj8KDw4/ChMOPwoHDjsK/w4/ChsOOwq4gw4/ChMOPwoHDjsKtw4/Ch8OOwr/Dj8KFw4/Cg8OOwrHDj8KCIMOPwoPDjsK1w47Cu8OOwq/DjsK0w47CscOPwoInLFxuICB9LFxuICBNb2RhbDoge1xuICAgIG9rVGV4dDogJ8OOwp/DjsKaJyxcbiAgICBjYW5jZWxUZXh0OiAnw47ChsOOwrrDj8KFw4/CgcOOwr8nLFxuICAgIGp1c3RPa1RleHQ6ICfDjsKfw47CmicsXG4gIH0sXG4gIFBvcGNvbmZpcm06IHtcbiAgICBva1RleHQ6ICfDjsKfw47CmicsXG4gICAgY2FuY2VsVGV4dDogJ8OOwobDjsK6w4/ChcOPwoHDjsK/JyxcbiAgfSxcbiAgVHJhbnNmZXI6IHtcbiAgICBub3RGb3VuZENvbnRlbnQ6ICfDjsKUw47CtcOOwr0gw47CssOPwoHDjsKtw47CuMOOwrfDjsK6w47CtScsXG4gICAgc2VhcmNoUGxhY2Vob2xkZXI6ICfDjsKRw47CvcOOwrHDjsK2w47CrsOPwoTDjsK3w4/Cg8OOwrcnLFxuICAgIGl0ZW1Vbml0OiAnw47CscOOwr3Dj8KEw47CucOOwrrDjsK1w47Cr8OOwrzDjsK1w47CvcOOwr8nLFxuICAgIGl0ZW1zVW5pdDogJ8OOwrHDjsK9w4/ChMOOwrnDjsK6w47CtcOOwq/DjsK8w47CtcOOwr3DjsKxJyxcbiAgfSxcbiAgU2VsZWN0OiB7XG4gICAgbm90Rm91bmRDb250ZW50OiAnw47ClMOOwrXDjsK9IMOOwrLDj8KBw47CrcOOwrjDjsK3w47CusOOwrUnLFxuICB9LFxuICBVcGxvYWQ6IHtcbiAgICB1cGxvYWRpbmc6ICfDjsKcw47CtcOPwoTDjsKxw4/ChsOPwozDj8KBw4/ChMOPwonDj8KDw47Cty4uLicsXG4gICAgcmVtb3ZlRmlsZTogJ8OOwpHDj8KGw47CscOOwq/Dj8KBw47CtcOPwoPDjsK3IMOOwrHDj8KBw4/Ch8OOwrXDjsKvw47Cv8OPwoUnLFxuICAgIHVwbG9hZEVycm9yOiAnw47Co8OPwobDjsKsw47Cu8OOwrzDjsKxIMOOwrzDjsK1w4/ChMOOwrHDj8KGw4/CjMOPwoHDj8KEw4/CicOPwoPDjsK3w4/CgicsXG4gICAgcHJldmlld0ZpbGU6ICfDjsKgw4/CgcOOwr/DjsK1w4/CgMOOwrnDj8KDw47CusOPwozDj8KAw47Ct8OPwoPDjsK3IMOOwrHDj8KBw4/Ch8OOwrXDjsKvw47Cv8OPwoUnLFxuICB9LFxufTtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgdG9kYXk6ICdUb2RheScsXG4gIG5vdzogJ05vdycsXG4gIGJhY2tUb1RvZGF5OiAnQmFjayB0byB0b2RheScsXG4gIG9rOiAnT2snLFxuICBjbGVhcjogJ0NsZWFyJyxcbiAgbW9udGg6ICdNb250aCcsXG4gIHllYXI6ICdZZWFyJyxcbiAgdGltZVNlbGVjdDogJ1NlbGVjdCB0aW1lJyxcbiAgZGF0ZVNlbGVjdDogJ1NlbGVjdCBkYXRlJyxcbiAgbW9udGhTZWxlY3Q6ICdDaG9vc2UgYSBtb250aCcsXG4gIHllYXJTZWxlY3Q6ICdDaG9vc2UgYSB5ZWFyJyxcbiAgZGVjYWRlU2VsZWN0OiAnQ2hvb3NlIGEgZGVjYWRlJyxcbiAgeWVhckZvcm1hdDogJ1lZWVknLFxuICBkYXRlRm9ybWF0OiAnRC9NL1lZWVknLFxuICBkYXlGb3JtYXQ6ICdEJyxcbiAgZGF0ZVRpbWVGb3JtYXQ6ICdEL00vWVlZWSBISDptbTpzcycsXG4gIG1vbnRoQmVmb3JlWWVhcjogdHJ1ZSxcbiAgcHJldmlvdXNNb250aDogJ1ByZXZpb3VzIG1vbnRoIChQYWdlVXApJyxcbiAgbmV4dE1vbnRoOiAnTmV4dCBtb250aCAoUGFnZURvd24pJyxcbiAgcHJldmlvdXNZZWFyOiAnTGFzdCB5ZWFyIChDb250cm9sICsgbGVmdCknLFxuICBuZXh0WWVhcjogJ05leHQgeWVhciAoQ29udHJvbCArIHJpZ2h0KScsXG4gIHByZXZpb3VzRGVjYWRlOiAnTGFzdCBkZWNhZGUnLFxuICBuZXh0RGVjYWRlOiAnTmV4dCBkZWNhZGUnLFxuICBwcmV2aW91c0NlbnR1cnk6ICdMYXN0IGNlbnR1cnknLFxuICBuZXh0Q2VudHVyeTogJ05leHQgY2VudHVyeScsXG59O1xuIiwiY29uc3QgbG9jYWxlID0ge1xuICBwbGFjZWhvbGRlcjogJ1NlbGVjdCB0aW1lJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTtcbiIsImltcG9ydCBDYWxlbmRhckxvY2FsZSBmcm9tICcuLi9jYWxlbmRhci9lbl9HQic7XG5pbXBvcnQgVGltZVBpY2tlckxvY2FsZSBmcm9tICcuLi90aW1lLXBpY2tlci9lbl9HQic7XG5cbi8vIE1lcmdlIGludG8gYSBsb2NhbGUgb2JqZWN0XG5jb25zdCBsb2NhbGUgPSB7XG4gIGxhbmc6IHtcbiAgICBwbGFjZWhvbGRlcjogJ1NlbGVjdCBkYXRlJyxcbiAgICByYW5nZVBsYWNlaG9sZGVyOiBbJ1N0YXJ0IGRhdGUnLCAnRW5kIGRhdGUnXSxcbiAgICAuLi5DYWxlbmRhckxvY2FsZSxcbiAgfSxcbiAgdGltZVBpY2tlckxvY2FsZToge1xuICAgIC4uLlRpbWVQaWNrZXJMb2NhbGUsXG4gIH0sXG59O1xuXG4vLyBBbGwgc2V0dGluZ3MgYXQ6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2Jsb2IvbWFzdGVyL2NvbXBvbmVudHMvZGF0ZS1waWNrZXIvbG9jYWxlL2V4YW1wbGUuanNvblxuXG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIC8vIE9wdGlvbnMuanN4XG4gIGl0ZW1zX3Blcl9wYWdlOiAnLyBwYWdlJyxcbiAganVtcF90bzogJ0dvdG8nLFxuICBqdW1wX3RvX2NvbmZpcm06ICdjb25maXJtJyxcbiAgcGFnZTogJycsXG5cbiAgLy8gUGFnaW5hdGlvbi5qc3hcbiAgcHJldl9wYWdlOiAnUHJldmlvdXMgUGFnZScsXG4gIG5leHRfcGFnZTogJ05leHQgUGFnZScsXG4gIHByZXZfNTogJ1ByZXZpb3VzIDUgUGFnZXMnLFxuICBuZXh0XzU6ICdOZXh0IDUgUGFnZXMnLFxuICBwcmV2XzM6ICdQcmV2aW91cyAzIFBhZ2VzJyxcbiAgbmV4dF8zOiAnTmV4dCAzIFBhZ2VzJyxcbn07XG4iLCJpbXBvcnQgQ2FsZW5kYXIgZnJvbSAnLi9jYWxlbmRhci9lbl9HQic7XG5pbXBvcnQgRGF0ZVBpY2tlciBmcm9tICcuL2RhdGUtcGlja2VyL2VuX0dCJztcbmltcG9ydCBQYWdpbmF0aW9uIGZyb20gJy4vcGFnaW5hdGlvbi9lbl9HQic7XG5pbXBvcnQgVGltZVBpY2tlciBmcm9tICcuL3RpbWUtcGlja2VyL2VuX0dCJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBsb2NhbGU6ICdlbi1nYicsXG4gIFBhZ2luYXRpb24sXG4gIERhdGVQaWNrZXIsXG4gIFRpbWVQaWNrZXIsXG4gIENhbGVuZGFyLFxuICBUYWJsZToge1xuICAgIGZpbHRlclRpdGxlOiAnRmlsdGVyIG1lbnUnLFxuICAgIGZpbHRlckNvbmZpcm06ICdPSycsXG4gICAgZmlsdGVyUmVzZXQ6ICdSZXNldCcsXG4gICAgZW1wdHlUZXh0OiAnTm8gZGF0YScsXG4gICAgc2VsZWN0QWxsOiAnU2VsZWN0IGN1cnJlbnQgcGFnZScsXG4gICAgc2VsZWN0SW52ZXJ0OiAnSW52ZXJ0IGN1cnJlbnQgcGFnZScsXG4gIH0sXG4gIE1vZGFsOiB7XG4gICAgb2tUZXh0OiAnT0snLFxuICAgIGNhbmNlbFRleHQ6ICdDYW5jZWwnLFxuICAgIGp1c3RPa1RleHQ6ICdPSycsXG4gIH0sXG4gIFBvcGNvbmZpcm06IHtcbiAgICBva1RleHQ6ICdPSycsXG4gICAgY2FuY2VsVGV4dDogJ0NhbmNlbCcsXG4gIH0sXG4gIFRyYW5zZmVyOiB7XG4gICAgbm90Rm91bmRDb250ZW50OiAnTm90IEZvdW5kJyxcbiAgICBzZWFyY2hQbGFjZWhvbGRlcjogJ1NlYXJjaCBoZXJlJyxcbiAgICBpdGVtVW5pdDogJ2l0ZW0nLFxuICAgIGl0ZW1zVW5pdDogJ2l0ZW1zJyxcbiAgfSxcbiAgU2VsZWN0OiB7XG4gICAgbm90Rm91bmRDb250ZW50OiAnTm90IEZvdW5kJyxcbiAgfSxcbiAgVXBsb2FkOiB7XG4gICAgdXBsb2FkaW5nOiAnVXBsb2FkaW5nLi4uJyxcbiAgICByZW1vdmVGaWxlOiAnUmVtb3ZlIGZpbGUnLFxuICAgIHVwbG9hZEVycm9yOiAnVXBsb2FkIGVycm9yJyxcbiAgICBwcmV2aWV3RmlsZTogJ1ByZXZpZXcgZmlsZScsXG4gIH0sXG59O1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICB0b2RheTogJ1RvZGF5JyxcbiAgbm93OiAnTm93JyxcbiAgYmFja1RvVG9kYXk6ICdCYWNrIHRvIHRvZGF5JyxcbiAgb2s6ICdPaycsXG4gIGNsZWFyOiAnQ2xlYXInLFxuICBtb250aDogJ01vbnRoJyxcbiAgeWVhcjogJ1llYXInLFxuICB0aW1lU2VsZWN0OiAnU2VsZWN0IHRpbWUnLFxuICBkYXRlU2VsZWN0OiAnU2VsZWN0IGRhdGUnLFxuICBtb250aFNlbGVjdDogJ0Nob29zZSBhIG1vbnRoJyxcbiAgeWVhclNlbGVjdDogJ0Nob29zZSBhIHllYXInLFxuICBkZWNhZGVTZWxlY3Q6ICdDaG9vc2UgYSBkZWNhZGUnLFxuICB5ZWFyRm9ybWF0OiAnWVlZWScsXG4gIGRhdGVGb3JtYXQ6ICdNL0QvWVlZWScsXG4gIGRheUZvcm1hdDogJ0QnLFxuICBkYXRlVGltZUZvcm1hdDogJ00vRC9ZWVlZIEhIOm1tOnNzJyxcbiAgbW9udGhCZWZvcmVZZWFyOiB0cnVlLFxuICBwcmV2aW91c01vbnRoOiAnUHJldmlvdXMgbW9udGggKFBhZ2VVcCknLFxuICBuZXh0TW9udGg6ICdOZXh0IG1vbnRoIChQYWdlRG93biknLFxuICBwcmV2aW91c1llYXI6ICdMYXN0IHllYXIgKENvbnRyb2wgKyBsZWZ0KScsXG4gIG5leHRZZWFyOiAnTmV4dCB5ZWFyIChDb250cm9sICsgcmlnaHQpJyxcbiAgcHJldmlvdXNEZWNhZGU6ICdMYXN0IGRlY2FkZScsXG4gIG5leHREZWNhZGU6ICdOZXh0IGRlY2FkZScsXG4gIHByZXZpb3VzQ2VudHVyeTogJ0xhc3QgY2VudHVyeScsXG4gIG5leHRDZW50dXJ5OiAnTmV4dCBjZW50dXJ5Jyxcbn07XG4iLCJjb25zdCBsb2NhbGUgPSB7XG4gIHBsYWNlaG9sZGVyOiAnU2VsZWN0IHRpbWUnLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgbG9jYWxlO1xuIiwiaW1wb3J0IENhbGVuZGFyTG9jYWxlIGZyb20gJy4uL2NhbGVuZGFyL2VuX1VTJztcbmltcG9ydCBUaW1lUGlja2VyTG9jYWxlIGZyb20gJy4uL3RpbWUtcGlja2VyL2VuX1VTJztcblxuLy8gTWVyZ2UgaW50byBhIGxvY2FsZSBvYmplY3RcbmNvbnN0IGxvY2FsZSA9IHtcbiAgbGFuZzoge1xuICAgIHBsYWNlaG9sZGVyOiAnU2VsZWN0IGRhdGUnLFxuICAgIHJhbmdlUGxhY2Vob2xkZXI6IFsnU3RhcnQgZGF0ZScsICdFbmQgZGF0ZSddLFxuICAgIC4uLkNhbGVuZGFyTG9jYWxlLFxuICB9LFxuICB0aW1lUGlja2VyTG9jYWxlOiB7XG4gICAgLi4uVGltZVBpY2tlckxvY2FsZSxcbiAgfSxcbn07XG5cbi8vIEFsbCBzZXR0aW5ncyBhdDpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vYmxvYi9tYXN0ZXIvY29tcG9uZW50cy9kYXRlLXBpY2tlci9sb2NhbGUvZXhhbXBsZS5qc29uXG5cbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgLy8gT3B0aW9ucy5qc3hcbiAgaXRlbXNfcGVyX3BhZ2U6ICcvIHBhZ2UnLFxuICBqdW1wX3RvOiAnR290bycsXG4gIGp1bXBfdG9fY29uZmlybTogJ2NvbmZpcm0nLFxuICBwYWdlOiAnJyxcblxuICAvLyBQYWdpbmF0aW9uLmpzeFxuICBwcmV2X3BhZ2U6ICdQcmV2aW91cyBQYWdlJyxcbiAgbmV4dF9wYWdlOiAnTmV4dCBQYWdlJyxcbiAgcHJldl81OiAnUHJldmlvdXMgNSBQYWdlcycsXG4gIG5leHRfNTogJ05leHQgNSBQYWdlcycsXG4gIHByZXZfMzogJ1ByZXZpb3VzIDMgUGFnZXMnLFxuICBuZXh0XzM6ICdOZXh0IDMgUGFnZXMnLFxufTtcbiIsImltcG9ydCBDYWxlbmRhciBmcm9tICcuL2NhbGVuZGFyL2VuX1VTJztcbmltcG9ydCBEYXRlUGlja2VyIGZyb20gJy4vZGF0ZS1waWNrZXIvZW5fVVMnO1xuaW1wb3J0IFBhZ2luYXRpb24gZnJvbSAnLi9wYWdpbmF0aW9uL2VuX1VTJztcbmltcG9ydCBUaW1lUGlja2VyIGZyb20gJy4vdGltZS1waWNrZXIvZW5fVVMnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGxvY2FsZTogJ2VuJyxcbiAgUGFnaW5hdGlvbixcbiAgRGF0ZVBpY2tlcixcbiAgVGltZVBpY2tlcixcbiAgQ2FsZW5kYXIsXG4gIFRhYmxlOiB7XG4gICAgZmlsdGVyVGl0bGU6ICdGaWx0ZXIgbWVudScsXG4gICAgZmlsdGVyQ29uZmlybTogJ09LJyxcbiAgICBmaWx0ZXJSZXNldDogJ1Jlc2V0JyxcbiAgICBlbXB0eVRleHQ6ICdObyBkYXRhJyxcbiAgICBzZWxlY3RBbGw6ICdTZWxlY3QgY3VycmVudCBwYWdlJyxcbiAgICBzZWxlY3RJbnZlcnQ6ICdJbnZlcnQgY3VycmVudCBwYWdlJyxcbiAgfSxcbiAgTW9kYWw6IHtcbiAgICBva1RleHQ6ICdPSycsXG4gICAgY2FuY2VsVGV4dDogJ0NhbmNlbCcsXG4gICAganVzdE9rVGV4dDogJ09LJyxcbiAgfSxcbiAgUG9wY29uZmlybToge1xuICAgIG9rVGV4dDogJ09LJyxcbiAgICBjYW5jZWxUZXh0OiAnQ2FuY2VsJyxcbiAgfSxcbiAgVHJhbnNmZXI6IHtcbiAgICB0aXRsZXM6IFsnJywgJyddLFxuICAgIG5vdEZvdW5kQ29udGVudDogJ05vdCBGb3VuZCcsXG4gICAgc2VhcmNoUGxhY2Vob2xkZXI6ICdTZWFyY2ggaGVyZScsXG4gICAgaXRlbVVuaXQ6ICdpdGVtJyxcbiAgICBpdGVtc1VuaXQ6ICdpdGVtcycsXG4gIH0sXG4gIFNlbGVjdDoge1xuICAgIG5vdEZvdW5kQ29udGVudDogJ05vdCBGb3VuZCcsXG4gIH0sXG4gIFVwbG9hZDoge1xuICAgIHVwbG9hZGluZzogJ1VwbG9hZGluZy4uLicsXG4gICAgcmVtb3ZlRmlsZTogJ1JlbW92ZSBmaWxlJyxcbiAgICB1cGxvYWRFcnJvcjogJ1VwbG9hZCBlcnJvcicsXG4gICAgcHJldmlld0ZpbGU6ICdQcmV2aWV3IGZpbGUnLFxuICB9LFxufTtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgdG9kYXk6ICdIb3knLFxuICBub3c6ICdBaG9yYScsXG4gIGJhY2tUb1RvZGF5OiAnVm9sdmVyIGEgaG95JyxcbiAgb2s6ICdBY2VwdGFyJyxcbiAgY2xlYXI6ICdMaW1waWFyJyxcbiAgbW9udGg6ICdNZXMnLFxuICB5ZWFyOiAnQcODwrFvJyxcbiAgdGltZVNlbGVjdDogJ1NlbGVjY2lvbmFyIGhvcmEnLFxuICBkYXRlU2VsZWN0OiAnU2VsZWNjaW9uYXIgZmVjaGEnLFxuICBtb250aFNlbGVjdDogJ0VsZWdpciB1biBtZXMnLFxuICB5ZWFyU2VsZWN0OiAnRWxlZ2lyIHVuIGHDg8KxbycsXG4gIGRlY2FkZVNlbGVjdDogJ0VsZWdpciB1bmEgZMODwqljYWRhJyxcbiAgeWVhckZvcm1hdDogJ1lZWVknLFxuICBkYXRlRm9ybWF0OiAnRC9NL1lZWVknLFxuICBkYXlGb3JtYXQ6ICdEJyxcbiAgZGF0ZVRpbWVGb3JtYXQ6ICdEL00vWVlZWSBISDptbTpzcycsXG4gIG1vbnRoQmVmb3JlWWVhcjogdHJ1ZSxcbiAgcHJldmlvdXNNb250aDogJ01lcyBhbnRlcmlvciAoUGFnZVVwKScsXG4gIG5leHRNb250aDogJ01lcyBzaWd1aWVudGUgKFBhZ2VEb3duKScsXG4gIHByZXZpb3VzWWVhcjogJ0HDg8KxbyBhbnRlcmlvciAoQ29udHJvbCArIGxlZnQpJyxcbiAgbmV4dFllYXI6ICdBw4PCsW8gc2lndWllbnRlIChDb250cm9sICsgcmlnaHQpJyxcbiAgcHJldmlvdXNEZWNhZGU6ICdEw4PCqWNhZGEgYW50ZXJpb3InLFxuICBuZXh0RGVjYWRlOiAnRMODwqljYWRhIHNpZ3VpZW50ZScsXG4gIHByZXZpb3VzQ2VudHVyeTogJ1NpZ2xvIGFudGVyaW9yJyxcbiAgbmV4dENlbnR1cnk6ICdTaWdsbyBzaWd1aWVudGUnLFxufTtcbiIsImNvbnN0IGxvY2FsZSA9IHtcbiAgcGxhY2Vob2xkZXI6ICdTZWxlY2Npb25hciBob3JhJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTtcbiIsImltcG9ydCBDYWxlbmRhckxvY2FsZSBmcm9tICcuLi9jYWxlbmRhci9lc19FUyc7XG5pbXBvcnQgVGltZVBpY2tlckxvY2FsZSBmcm9tICcuLi90aW1lLXBpY2tlci9lc19FUyc7XG5cbi8vIE1lcmdlIGludG8gYSBsb2NhbGUgb2JqZWN0XG5jb25zdCBsb2NhbGUgPSB7XG4gIGxhbmc6IHtcbiAgICBwbGFjZWhvbGRlcjogJ1NlbGVjY2lvbmFyIGZlY2hhJyxcbiAgICByYW5nZVBsYWNlaG9sZGVyOiBbJ0ZlY2hhIGluaWNpYWwnLCAnRmVjaGEgZmluYWwnXSxcbiAgICAuLi5DYWxlbmRhckxvY2FsZSxcbiAgfSxcbiAgdGltZVBpY2tlckxvY2FsZToge1xuICAgIC4uLlRpbWVQaWNrZXJMb2NhbGUsXG4gIH0sXG59O1xuXG4vLyBBbGwgc2V0dGluZ3MgYXQ6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2Jsb2IvbWFzdGVyL2NvbXBvbmVudHMvZGF0ZS1waWNrZXIvbG9jYWxlL2V4YW1wbGUuanNvblxuXG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIC8vIE9wdGlvbnMuanN4XG4gIGl0ZW1zX3Blcl9wYWdlOiAnLyBww4PCoWdpbmEnLFxuICBqdW1wX3RvOiAnSXIgYScsXG4gIGp1bXBfdG9fY29uZmlybTogJ2NvbmZpcm1hcicsXG4gIHBhZ2U6ICcnLFxuXG4gIC8vIFBhZ2luYXRpb24uanN4XG4gIHByZXZfcGFnZTogJ1DDg8KhZ2luYSBhbnRlcmlvcicsXG4gIG5leHRfcGFnZTogJ1DDg8KhZ2luYSBzaWd1aWVudGUnLFxuICBwcmV2XzU6ICc1IHDDg8KhZ2luYXMgcHJldmlhcycsXG4gIG5leHRfNTogJzUgcMODwqFnaW5hcyBzaWd1aWVudGVzJyxcbiAgcHJldl8zOiAnMyBww4PCoWdpbmFzIHByZXZpYXMnLFxuICBuZXh0XzM6ICczIHDDg8KhZ2luYXMgc2lndWllbnRlcycsXG59O1xuIiwiaW1wb3J0IENhbGVuZGFyIGZyb20gJy4vY2FsZW5kYXIvZXNfRVMnO1xuaW1wb3J0IERhdGVQaWNrZXIgZnJvbSAnLi9kYXRlLXBpY2tlci9lc19FUyc7XG5pbXBvcnQgUGFnaW5hdGlvbiBmcm9tICcuL3BhZ2luYXRpb24vZXNfRVMnO1xuaW1wb3J0IFRpbWVQaWNrZXIgZnJvbSAnLi90aW1lLXBpY2tlci9lc19FUyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbG9jYWxlOiAnZXMnLFxuICBQYWdpbmF0aW9uLFxuICBEYXRlUGlja2VyLFxuICBUaW1lUGlja2VyLFxuICBDYWxlbmRhcixcbiAgVGFibGU6IHtcbiAgICBmaWx0ZXJUaXRsZTogJ0ZpbHRyYXIgbWVuw4PCuicsXG4gICAgZmlsdGVyQ29uZmlybTogJ0FjZXB0YXInLFxuICAgIGZpbHRlclJlc2V0OiAnUmVpbmljaWFyJyxcbiAgICBlbXB0eVRleHQ6ICdObyBoYXkgZGF0b3MnLFxuICAgIHNlbGVjdEFsbDogJ1NlbGVjY2lvbmFyIHRvZG8nLFxuICAgIHNlbGVjdEludmVydDogJ0ludmVydGlyIHNlbGVjY2nDg8KzbicsXG4gIH0sXG4gIE1vZGFsOiB7XG4gICAgb2tUZXh0OiAnQWNlcHRhcicsXG4gICAgY2FuY2VsVGV4dDogJ0NhbmNlbGFyJyxcbiAgICBqdXN0T2tUZXh0OiAnQWNlcHRhcicsXG4gIH0sXG4gIFBvcGNvbmZpcm06IHtcbiAgICBva1RleHQ6ICdBY2VwdGFyJyxcbiAgICBjYW5jZWxUZXh0OiAnQ2FuY2VsYXInLFxuICB9LFxuICBUcmFuc2Zlcjoge1xuICAgIG5vdEZvdW5kQ29udGVudDogJ05vIGVuY29udHJhZG8nLFxuICAgIHNlYXJjaFBsYWNlaG9sZGVyOiAnQnVzY2FyIGFxdcODwq0nLFxuICAgIGl0ZW1Vbml0OiAnZWxlbWVudG8nLFxuICAgIGl0ZW1zVW5pdDogJ2VsZW1lbnRvcycsXG4gIH0sXG4gIFNlbGVjdDoge1xuICAgIG5vdEZvdW5kQ29udGVudDogJ05vIGVuY29udHJhZG8nLFxuICB9LFxuICBVcGxvYWQ6IHtcbiAgICB1cGxvYWRpbmc6ICdTdWJpZW5kby4uLicsXG4gICAgcmVtb3ZlRmlsZTogJ0VsaW1pbmFyIGFyY2hpdm8nLFxuICAgIHVwbG9hZEVycm9yOiAnRXJyb3IgYWwgc3ViaXIgZWwgYXJjaGl2bycsXG4gICAgcHJldmlld0ZpbGU6ICdWaXN0YSBwcmV2aWEnLFxuICB9LFxufTtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgdG9kYXk6ICdUw4PCpG5hJyxcbiAgbm93OiAnUHJhZWd1JyxcbiAgYmFja1RvVG9kYXk6ICdUYWdhc2kgdMODwqRuYXNlIGp1dXJkZScsXG4gIG9rOiAnT2snLFxuICBjbGVhcjogJ1TDg8K8aGlzdGEnLFxuICBtb250aDogJ0t1dScsXG4gIHllYXI6ICdBYXN0YScsXG4gIHRpbWVTZWxlY3Q6ICdWYWxpIGFlZycsXG4gIGRhdGVTZWxlY3Q6ICdWYWxpIGt1dXDDg8KkZXYnLFxuICBtb250aFNlbGVjdDogJ1ZhbGkga3V1JyxcbiAgeWVhclNlbGVjdDogJ1ZhbGkgYWFzdGEnLFxuICBkZWNhZGVTZWxlY3Q6ICdWYWxpIGRla2FhZCcsXG4gIHllYXJGb3JtYXQ6ICdZWVlZJyxcbiAgZGF0ZUZvcm1hdDogJ0QuTS5ZWVlZJyxcbiAgZGF5Rm9ybWF0OiAnRCcsXG4gIGRhdGVUaW1lRm9ybWF0OiAnRC5NLllZWVkgSEg6bW06c3MnLFxuICBtb250aEJlZm9yZVllYXI6IHRydWUsXG4gIHByZXZpb3VzTW9udGg6ICdFZWxtaW5lIGt1dSAoUGFnZVVwKScsXG4gIG5leHRNb250aDogJ0rDg8KkcmdtaW5lIGt1dSAoUGFnZURvd24pJyxcbiAgcHJldmlvdXNZZWFyOiAnRWVsbWluZSBhYXN0YSAoQ29udHJvbCArIGxlZnQpJyxcbiAgbmV4dFllYXI6ICdKw4PCpHJnbWluZSBhYXN0YSAoQ29udHJvbCArIHJpZ2h0KScsXG4gIHByZXZpb3VzRGVjYWRlOiAnRWVsbWluZSBkZWthYWQnLFxuICBuZXh0RGVjYWRlOiAnSsODwqRyZ21pbmUgZGVrYWFkJyxcbiAgcHJldmlvdXNDZW50dXJ5OiAnRWVsbWluZSBzYWphbmQnLFxuICBuZXh0Q2VudHVyeTogJ0rDg8KkcmdtaW5lIHNhamFuZCcsXG59O1xuIiwiY29uc3QgbG9jYWxlID0ge1xuICBwbGFjZWhvbGRlcjogJ1ZhbGkgYWVnJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTtcbiIsImltcG9ydCBDYWxlbmRhckxvY2FsZSBmcm9tICcuLi9jYWxlbmRhci9ldF9FRSc7XG5pbXBvcnQgVGltZVBpY2tlckxvY2FsZSBmcm9tICcuLi90aW1lLXBpY2tlci9ldF9FRSc7XG5cbi8vIMOnwrvCn8OkwrjCgMOlwpDCiMOlwrnCtsOkwrjCusOlwq7CjMOmwpXCtMOnwprChCBMb2NhbGVcbmNvbnN0IGxvY2FsZSA9IHtcbiAgbGFuZzoge1xuICAgIHBsYWNlaG9sZGVyOiAnVmFsaSBrdXVww4PCpGV2JyxcbiAgICByYW5nZVBsYWNlaG9sZGVyOiBbJ0FsZ3VzIGt1dXDDg8KkZXYnLCAnTMODwrVwdSBrdXVww4PCpGV2J10sXG4gICAgLi4uQ2FsZW5kYXJMb2NhbGUsXG4gIH0sXG4gIHRpbWVQaWNrZXJMb2NhbGU6IHtcbiAgICAuLi5UaW1lUGlja2VyTG9jYWxlLFxuICB9LFxufTtcblxuLy8gQWxsIHNldHRpbmdzIGF0OlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9ibG9iL21hc3Rlci9jb21wb25lbnRzL2RhdGUtcGlja2VyL2xvY2FsZS9leGFtcGxlLmpzb25cblxuZXhwb3J0IGRlZmF1bHQgbG9jYWxlO1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICAvLyBPcHRpb25zLmpzeFxuICBpdGVtc19wZXJfcGFnZTogJy8gbGVoZWvDg8K8bGplbCcsXG4gIGp1bXBfdG86ICdIw4PCvHBwYScsXG4gIGp1bXBfdG9fY29uZmlybTogJ0tpbm5pdGFnZScsXG4gIHBhZ2U6ICcnLFxuXG4gIC8vIFBhZ2luYXRpb24uanN4XG4gIHByZXZfcGFnZTogJ0VlbG1pbmUgbGVodCcsXG4gIG5leHRfcGFnZTogJ0rDg8KkcmdtaW5lIGxlaHQnLFxuICBwcmV2XzU6ICdFZWxtaXNlZCA1IGxlaGVrw4PCvGxnZScsXG4gIG5leHRfNTogJ0rDg8KkcmdtaXNlZCA1IGxlaGVrw4PCvGxnZScsXG4gIHByZXZfMzogJ0VlbG1pc2VkIDMgbGVoZWvDg8K8bGdlJyxcbiAgbmV4dF8zOiAnSsODwqRyZ21pc2VkIDMgbGVoZWvDg8K8bGdlJyxcbn07XG4iLCJpbXBvcnQgQ2FsZW5kYXIgZnJvbSAnLi9jYWxlbmRhci9ldF9FRSc7XG5pbXBvcnQgRGF0ZVBpY2tlciBmcm9tICcuL2RhdGUtcGlja2VyL2V0X0VFJztcbmltcG9ydCBQYWdpbmF0aW9uIGZyb20gJy4vcGFnaW5hdGlvbi9ldF9FRSc7XG5pbXBvcnQgVGltZVBpY2tlciBmcm9tICcuL3RpbWUtcGlja2VyL2V0X0VFJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBsb2NhbGU6ICdldCcsXG4gIFBhZ2luYXRpb24sXG4gIERhdGVQaWNrZXIsXG4gIFRpbWVQaWNrZXIsXG4gIENhbGVuZGFyLFxuICBUYWJsZToge1xuICAgIGZpbHRlclRpdGxlOiAnRmlsdHJpIG1lbsODwrzDg8K8JyxcbiAgICBmaWx0ZXJDb25maXJtOiAnT0snLFxuICAgIGZpbHRlclJlc2V0OiAnTnVsbGknLFxuICAgIGVtcHR5VGV4dDogJ0FuZG1lZCBwdXVkdXZhZCcsXG4gICAgc2VsZWN0QWxsOiAnVmFsaSBrw4PCtWlrJyxcbiAgICBzZWxlY3RJbnZlcnQ6ICdJbnZlcnRlZXJpIHZhbGlrJyxcbiAgfSxcbiAgTW9kYWw6IHtcbiAgICBva1RleHQ6ICdPSycsXG4gICAgY2FuY2VsVGV4dDogJ1TDg8K8aGlzdGEnLFxuICAgIGp1c3RPa1RleHQ6ICdPSycsXG4gIH0sXG4gIFBvcGNvbmZpcm06IHtcbiAgICBva1RleHQ6ICdPSycsXG4gICAgY2FuY2VsVGV4dDogJ1TDg8K8aGlzdGEnLFxuICB9LFxuICBUcmFuc2Zlcjoge1xuICAgIG5vdEZvdW5kQ29udGVudDogJ0VpIGxlaXR1ZCcsXG4gICAgc2VhcmNoUGxhY2Vob2xkZXI6ICdPdHNpIHNpaXQnLFxuICAgIGl0ZW1Vbml0OiAna29ndXMnLFxuICAgIGl0ZW1zVW5pdDogJ2tvZ3VzJyxcbiAgfSxcbiAgU2VsZWN0OiB7XG4gICAgbm90Rm91bmRDb250ZW50OiAnRWkgbGVpdHVkJyxcbiAgfSxcbiAgVXBsb2FkOiB7XG4gICAgdXBsb2FkaW5nOiAnw4PCnGxlc2xhYWRpbWluZS4uLicsXG4gICAgcmVtb3ZlRmlsZTogJ0VlbWFsZGEgZmFpbCcsXG4gICAgdXBsb2FkRXJyb3I6ICfDg8KcbGVzbGFhZGltaXNlIHTDg8K1cmdlJyxcbiAgICBwcmV2aWV3RmlsZTogJ0ZhaWxpIGVlbHZhYWRlJyxcbiAgfSxcbn07XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIHRvZGF5OiAnw5jCp8OZwoXDmMKxw5nCiMOYwrInLFxuICBub3c6ICfDmMKnw5rCqcOZwobDmcKIw5nChicsXG4gIGJhY2tUb1RvZGF5OiAnw5jCqMOYwqfDmMKyw5rCr8OYwrTDmMKqIMOYwqjDmcKHIMOYwrHDmcKIw5jCsicsXG4gIG9rOiAnw5jCqMOYwqfDmMK0w5nChycsXG4gIGNsZWFyOiAnw5nCvsOYwqfDmsKpIMOawqnDmMKxw5jCr8OZwoYnLFxuICBtb250aDogJ8OZwoXDmMKnw5nChycsXG4gIHllYXI6ICfDmMKzw5jCp8OZwoQnLFxuICB0aW1lU2VsZWN0OiAnw5jCp8OZwobDmMKqw5jCrsOYwqfDmMKoIMOYwrLDmcKFw5jCp8OZwoYnLFxuICBkYXRlU2VsZWN0OiAnw5jCp8OZwobDmMKqw5jCrsOYwqfDmMKoIMOYwqrDmMKnw5jCscObwozDmMKuJyxcbiAgbW9udGhTZWxlY3Q6ICfDm8KMw5rCqSDDmcKFw5jCp8OZwocgw5jCscOYwqcgw5jCp8OZwobDmMKqw5jCrsOYwqfDmMKoIMOawqnDmcKGw5vCjMOYwq8nLFxuICB5ZWFyU2VsZWN0OiAnw5vCjMOawqkgw5jCs8OYwqfDmcKEIMOYwrHDmMKnIMOYwqfDmcKGw5jCqsOYwq7DmMKnw5jCqCDDmsKpw5nChsObwozDmMKvJyxcbiAgZGVjYWRlU2VsZWN0OiAnw5vCjMOawqkgw5jCr8OZwofDmcKHIMOYwrHDmMKnIMOYwqfDmcKGw5jCqsOYwq7DmMKnw5jCqCDDmsKpw5nChsObwozDmMKvJyxcbiAgeWVhckZvcm1hdDogJ1lZWVknLFxuICBkYXRlRm9ybWF0OiAnTS9EL1lZWVknLFxuICBkYXlGb3JtYXQ6ICdEJyxcbiAgZGF0ZVRpbWVGb3JtYXQ6ICdNL0QvWVlZWSBISDptbTpzcycsXG4gIG1vbnRoQmVmb3JlWWVhcjogdHJ1ZSxcbiAgcHJldmlvdXNNb250aDogJ8OZwoXDmMKnw5nChyDDmcKCw5jCqMOZwoQgKFBhZ2VVcCknLFxuICBuZXh0TW9udGg6ICfDmcKFw5jCp8OZwocgw5jCqMOYwrnDmMKvIChQYWdlRG93biknLFxuICBwcmV2aW91c1llYXI6ICfDmMKzw5jCp8OZwoQgw5nCgsOYwqjDmcKEIChDb250cm9sICsgbGVmdCknLFxuICBuZXh0WWVhcjogJ8OYwrPDmMKnw5nChCDDmMKow5jCucOYwq8gKENvbnRyb2wgKyByaWdodCknLFxuICBwcmV2aW91c0RlY2FkZTogJ8OYwq/DmcKHw5nChyDDmcKCw5jCqMOZwoQnLFxuICBuZXh0RGVjYWRlOiAnw5jCr8OZwofDmcKHIMOYwqjDmMK5w5jCrycsXG4gIHByZXZpb3VzQ2VudHVyeTogJ8OZwoLDmMKxw5nChiDDmcKCw5jCqMOZwoQnLFxuICBuZXh0Q2VudHVyeTogJ8OZwoLDmMKxw5nChiDDmMKow5jCucOYwq8nLFxufTtcbiIsImNvbnN0IGxvY2FsZSA9IHtcbiAgcGxhY2Vob2xkZXI6ICfDmMKnw5nChsOYwqrDmMKuw5jCp8OYwqggw5jCssOZwoXDmMKnw5nChicsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7XG4iLCJpbXBvcnQgQ2FsZW5kYXJMb2NhbGUgZnJvbSAnLi4vY2FsZW5kYXIvZmFfSVInO1xuaW1wb3J0IFRpbWVQaWNrZXJMb2NhbGUgZnJvbSAnLi4vdGltZS1waWNrZXIvZmFfSVInO1xuXG4vLyBNZXJnZSBpbnRvIGEgbG9jYWxlIG9iamVjdFxuY29uc3QgbG9jYWxlID0ge1xuICBsYW5nOiB7XG4gICAgcGxhY2Vob2xkZXI6ICfDmMKnw5nChsOYwqrDmMKuw5jCp8OYwqggw5jCqsOYwqfDmMKxw5vCjMOYwq4nLFxuICAgIHJhbmdlUGxhY2Vob2xkZXI6IFsnw5jCqsOYwqfDmMKxw5vCjMOYwq4gw5jCtMOYwrHDmcKIw5jCuScsICfDmMKqw5jCp8OYwrHDm8KMw5jCriDDmcK+w5jCp8ObwozDmMKnw5nChiddLFxuICAgIC4uLkNhbGVuZGFyTG9jYWxlLFxuICB9LFxuICB0aW1lUGlja2VyTG9jYWxlOiB7XG4gICAgLi4uVGltZVBpY2tlckxvY2FsZSxcbiAgfSxcbn07XG5cbi8vIEFsbCBzZXR0aW5ncyBhdDpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vYmxvYi9tYXN0ZXIvY29tcG9uZW50cy9kYXRlLXBpY2tlci9sb2NhbGUvZXhhbXBsZS5qc29uXG5cbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgLy8gT3B0aW9ucy5qc3hcbiAgaXRlbXNfcGVyX3BhZ2U6ICcvIMOYwrXDmcKBw5jCrcOZwocnLFxuICBqdW1wX3RvOiAnw5jCqMOYwrHDmcKIIMOYwqjDmcKHJyxcbiAganVtcF90b19jb25maXJtOiAnw5jCqsOYwqfDm8KMw5vCjMOYwq8nLFxuICBwYWdlOiAnJyxcblxuICAvLyBQYWdpbmF0aW9uLmpzeFxuICBwcmV2X3BhZ2U6ICfDmMK1w5nCgcOYwq3DmcKHIMOZwoLDmMKow5nChMObwownLFxuICBuZXh0X3BhZ2U6ICfDmMK1w5nCgcOYwq3DmcKHIMOYwqjDmMK5w5jCr8ObwownLFxuICBwcmV2XzU6ICfDm8K1IMOYwrXDmcKBw5jCrcOZwocgw5nCgsOYwqjDmcKEw5vCjCcsXG4gIG5leHRfNTogJ8ObwrUgw5jCtcOZwoHDmMKtw5nChyDDmMKow5jCucOYwq/Dm8KMJyxcbiAgcHJldl8zOiAnw5vCsyDDmMK1w5nCgcOYwq3DmcKHIMOZwoLDmMKow5nChMObwownLFxuICBuZXh0XzM6ICfDm8KzIMOYwrXDmcKBw5jCrcOZwocgw5jCqMOYwrnDmMKvw5vCjCcsXG59O1xuIiwiaW1wb3J0IENhbGVuZGFyIGZyb20gJy4vY2FsZW5kYXIvZmFfSVInO1xuaW1wb3J0IERhdGVQaWNrZXIgZnJvbSAnLi9kYXRlLXBpY2tlci9mYV9JUic7XG5pbXBvcnQgUGFnaW5hdGlvbiBmcm9tICcuL3BhZ2luYXRpb24vZmFfSVInO1xuaW1wb3J0IFRpbWVQaWNrZXIgZnJvbSAnLi90aW1lLXBpY2tlci9mYV9JUic7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbG9jYWxlOiAnZmEnLFxuICBQYWdpbmF0aW9uLFxuICBEYXRlUGlja2VyLFxuICBUaW1lUGlja2VyLFxuICBDYWxlbmRhcixcbiAgVGFibGU6IHtcbiAgICBmaWx0ZXJUaXRsZTogJ8OZwoXDmcKGw5nCiMObwowgw5nCgcObwozDmcKEw5jCqsOYwrEnLFxuICAgIGZpbHRlckNvbmZpcm06ICfDmMKqw5jCp8ObwozDm8KMw5jCrycsXG4gICAgZmlsdGVyUmVzZXQ6ICfDmcK+w5jCp8Oawqkgw5rCqcOYwrHDmMKvw5nChicsXG4gICAgZW1wdHlUZXh0OiAnw5jCr8OYwqfDmMKvw5nCh8OiwoDCjMOYwqfDm8KMIMOZwoXDmcKIw5jCrMOZwojDmMKvIMOZwobDm8KMw5jCs8OYwqonLFxuICAgIHNlbGVjdEFsbDogJ8OYwqfDmcKGw5jCqsOYwq7DmMKnw5jCqCDDmMK1w5nCgcOYwq3DmcKHw6LCgMKMw5vCjCDDmsKpw5nChsOZwojDmcKGw5vCjCcsXG4gICAgc2VsZWN0SW52ZXJ0OiAnw5nChcOYwrnDmsKpw5nCiMOYwrMgw5rCqcOYwrHDmMKvw5nChiDDmMKnw5nChsOYwqrDmMKuw5jCp8OYwqjDosKAwozDmcKHw5jCpyDDmMKvw5jCsSDDmMK1w5nCgcOYwq3DmcKHIMObwowgw5rCqcOZwobDmcKIw5nChsObwownLFxuICB9LFxuICBNb2RhbDoge1xuICAgIG9rVGV4dDogJ8OYwqrDmMKnw5vCjMObwozDmMKvJyxcbiAgICBjYW5jZWxUZXh0OiAnw5nChMOYwrrDmcKIJyxcbiAgICBqdXN0T2tUZXh0OiAnw5jCqsOYwqfDm8KMw5vCjMOYwq8nLFxuICB9LFxuICBQb3Bjb25maXJtOiB7XG4gICAgb2tUZXh0OiAnw5jCqsOYwqfDm8KMw5vCjMOYwq8nLFxuICAgIGNhbmNlbFRleHQ6ICfDmcKEw5jCusOZwognLFxuICB9LFxuICBUcmFuc2Zlcjoge1xuICAgIG5vdEZvdW5kQ29udGVudDogJ8OYwq/DmMKnw5jCr8OZwofDosKAwozDmMKnw5vCjCDDmcKFw5nCiMOYwqzDmcKIw5jCryDDmcKGw5vCjMOYwrPDmMKqJyxcbiAgICBzZWFyY2hQbGFjZWhvbGRlcjogJ8OYwqzDmMKzw5jCqsOYwqzDmcKIJyxcbiAgICBpdGVtVW5pdDogJycsXG4gICAgaXRlbXNVbml0OiAnJyxcbiAgfSxcbiAgU2VsZWN0OiB7XG4gICAgbm90Rm91bmRDb250ZW50OiAnw5jCr8OYwqfDmMKvw5nCh8OiwoDCjMOYwqfDm8KMIMOZwoXDmcKIw5jCrMOZwojDmMKvIMOZwobDm8KMw5jCs8OYwqonLFxuICB9LFxuICBVcGxvYWQ6IHtcbiAgICB1cGxvYWRpbmc6ICfDmMKvw5jCsSDDmMKtw5jCp8OZwoQgw5jCosOZwr7DmcKEw5nCiMOYwq8uLi4nLFxuICAgIHJlbW92ZUZpbGU6ICfDmMKtw5jCsMOZwoEgw5nCgcOYwqfDm8KMw5nChCcsXG4gICAgdXBsb2FkRXJyb3I6ICfDmMKuw5jCt8OYwqcgw5jCr8OYwrEgw5jCosOZwr7DmcKEw5nCiMOYwq8nLFxuICAgIHByZXZpZXdGaWxlOiAnw5nChcOYwrTDmMKnw5nCh8OYwq/DmcKHw6LCgMKMw5vCjCDDmcKBw5jCp8ObwozDmcKEJyxcbiAgfSxcbn07XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIHRvZGF5OiAnVMODwqRuw4PCpMODwqRuJyxcbiAgbm93OiAnTnl0JyxcbiAgYmFja1RvVG9kYXk6ICdUw4PCpG3Dg8KkIHDDg8KkaXbDg8KkJyxcbiAgb2s6ICdPaycsXG4gIGNsZWFyOiAnVHloamVubsODwqQnLFxuICBtb250aDogJ0t1dWthdXNpJyxcbiAgeWVhcjogJ1Z1b3NpJyxcbiAgdGltZVNlbGVjdDogJ1ZhbGlzZSBhaWthJyxcbiAgZGF0ZVNlbGVjdDogJ1ZhbGl0c2UgcMODwqRpdsODwqQnLFxuICBtb250aFNlbGVjdDogJ1ZhbGl0c2Uga3V1a2F1c2knLFxuICB5ZWFyU2VsZWN0OiAnVmFsaXRzZSB2dW9zaScsXG4gIGRlY2FkZVNlbGVjdDogJ1ZhbGl0c2UgdnVvc2lreW1tZW4nLFxuICB5ZWFyRm9ybWF0OiAnWVlZWScsXG4gIGRhdGVGb3JtYXQ6ICdELk0uWVlZWScsXG4gIGRheUZvcm1hdDogJ0QnLFxuICBkYXRlVGltZUZvcm1hdDogJ0QuTS5ZWVlZIEhIOm1tOnNzJyxcbiAgbW9udGhCZWZvcmVZZWFyOiB0cnVlLFxuICBwcmV2aW91c01vbnRoOiAnRWRlbGxpbmVuIGt1dWthdXNpIChQYWdlVXApJyxcbiAgbmV4dE1vbnRoOiAnU2V1cmFhdmEga3V1a2F1c2kgKFBhZ2VEb3duKScsXG4gIHByZXZpb3VzWWVhcjogJ0VkZWxsaW5lbiB2dW9zaSAoQ29udHJvbCArIGxlZnQpJyxcbiAgbmV4dFllYXI6ICdTZXVyYWF2YSB2dW9zaSAoQ29udHJvbCArIHJpZ2h0KScsXG4gIHByZXZpb3VzRGVjYWRlOiAnRWRlbGxpbmVuIHZ1b3Npa3ltbWVuJyxcbiAgbmV4dERlY2FkZTogJ1NldXJhYXZhIHZ1b3Npa3ltbWVuJyxcbiAgcHJldmlvdXNDZW50dXJ5OiAnRWRlbGxpbmVuIHZ1b3Npc2F0YScsXG4gIG5leHRDZW50dXJ5OiAnU2V1cmFhdmEgdnVvc2lzYXRhJyxcbn07XG4iLCJjb25zdCBsb2NhbGUgPSB7XG4gIHBsYWNlaG9sZGVyOiAnVmFsaXRzZSBhaWthJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTtcbiIsImltcG9ydCBDYWxlbmRhckxvY2FsZSBmcm9tICcuLi9jYWxlbmRhci9maV9GSSc7XG5pbXBvcnQgVGltZVBpY2tlckxvY2FsZSBmcm9tICcuLi90aW1lLXBpY2tlci9maV9GSSc7XG5cbi8vIE1lcmdlIGludG8gYSBsb2NhbGUgb2JqZWN0XG5jb25zdCBsb2NhbGUgPSB7XG4gIGxhbmc6IHtcbiAgICBwbGFjZWhvbGRlcjogJ1ZhbGl0c2UgcMODwqRpdsODwqQnLFxuICAgIHJhbmdlUGxhY2Vob2xkZXI6IFsnQWxrdSBww4PCpGl2w4PCpCcsICdMb3BwdSBww4PCpGl2w4PCpCddLFxuICAgIC4uLkNhbGVuZGFyTG9jYWxlLFxuICB9LFxuICB0aW1lUGlja2VyTG9jYWxlOiB7XG4gICAgLi4uVGltZVBpY2tlckxvY2FsZSxcbiAgfSxcbn07XG5cbi8vIEFsbCBzZXR0aW5ncyBhdDpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vYmxvYi9tYXN0ZXIvY29tcG9uZW50cy9kYXRlLXBpY2tlci9sb2NhbGUvZXhhbXBsZS5qc29uXG5cbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgLy8gT3B0aW9ucy5qc3hcbiAgaXRlbXNfcGVyX3BhZ2U6ICcvIHNpdnUnLFxuICBqdW1wX3RvOiAnTWVuZScsXG4gIGp1bXBfdG9fY29uZmlybTogJ1BvdHZyZGl0ZScsXG4gIHBhZ2U6ICcnLFxuXG4gIC8vIFBhZ2luYXRpb24uanN4XG4gIHByZXZfcGFnZTogJ0VkZWxsaW5lbiBzaXZ1JyxcbiAgbmV4dF9wYWdlOiAnU2V1cmFhdmEgc2l2dScsXG4gIHByZXZfNTogJ0VkZWxsaXNldCA1IHNpdnVhJyxcbiAgbmV4dF81OiAnU2V1cmFhdmF0IDUgc2l2dWEnLFxuICBwcmV2XzM6ICdFZGVsbGlzZXQgMyBzaXZ1YScsXG4gIG5leHRfMzogJ1NldXJhYXZhdCAzIHNpdnVhJyxcbn07XG4iLCJpbXBvcnQgQ2FsZW5kYXIgZnJvbSAnLi9jYWxlbmRhci9maV9GSSc7XG5pbXBvcnQgRGF0ZVBpY2tlciBmcm9tICcuL2RhdGUtcGlja2VyL2ZpX0ZJJztcbmltcG9ydCBQYWdpbmF0aW9uIGZyb20gJy4vcGFnaW5hdGlvbi9maV9GSSc7XG5pbXBvcnQgVGltZVBpY2tlciBmcm9tICcuL3RpbWUtcGlja2VyL2ZpX0ZJJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBsb2NhbGU6ICdmaScsXG4gIFBhZ2luYXRpb24sXG4gIERhdGVQaWNrZXIsXG4gIFRpbWVQaWNrZXIsXG4gIENhbGVuZGFyLFxuICBUYWJsZToge1xuICAgIGZpbHRlclRpdGxlOiAnU3VvZGF0dXMgdmFsaWtrbycsXG4gICAgZmlsdGVyQ29uZmlybTogJ09LJyxcbiAgICBmaWx0ZXJSZXNldDogJ1R5aGplbm7Dg8KkJyxcbiAgICBlbXB0eVRleHQ6ICdFaSBrb2h0ZWl0YScsXG4gICAgc2VsZWN0QWxsOiAnVmFsaXRzZSBrYWlra2knLFxuICAgIHNlbGVjdEludmVydDogJ1ZhbGl0c2UgcMODwqRpbnZhc3RvaW4nLFxuICB9LFxuICBNb2RhbDoge1xuICAgIG9rVGV4dDogJ09LJyxcbiAgICBjYW5jZWxUZXh0OiAnUGVydXV0YScsXG4gICAganVzdE9rVGV4dDogJ09LJyxcbiAgfSxcbiAgUG9wY29uZmlybToge1xuICAgIG9rVGV4dDogJ09LJyxcbiAgICBjYW5jZWxUZXh0OiAnUGVydXV0YScsXG4gIH0sXG4gIFRyYW5zZmVyOiB7XG4gICAgbm90Rm91bmRDb250ZW50OiAnRWkgbMODwrZ5dHlueXQnLFxuICAgIHNlYXJjaFBsYWNlaG9sZGVyOiAnRXRzaSB0w4PCpMODwqRsdMODwqQnLFxuICAgIGl0ZW1Vbml0OiAna29oZGUnLFxuICAgIGl0ZW1zVW5pdDogJ2tvaGRldHRhJyxcbiAgfSxcbiAgU2VsZWN0OiB7XG4gICAgbm90Rm91bmRDb250ZW50OiAnRWkgbMODwrZ5dHlueXQnLFxuICB9LFxuICBVcGxvYWQ6IHtcbiAgICB1cGxvYWRpbmc6ICdMw4PCpGhldGV0w4PCpMODwqRuLi4uJyxcbiAgICByZW1vdmVGaWxlOiAnUG9pc3RhIHRpZWRvc3RvJyxcbiAgICB1cGxvYWRFcnJvcjogJ1ZpcmhlIGzDg8KkaGV0eWtzZXNzw4PCpCcsXG4gICAgcHJldmlld0ZpbGU6ICdFc2lrYXRzZWxlIHRpZWRvc3RvYScsXG4gIH0sXG59O1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICB0b2RheTogJ0F1am91cmRcXCdodWknLFxuICBub3c6ICdNYWludGVuYW50JyxcbiAgYmFja1RvVG9kYXk6ICdBdWpvdXJkXFwnaHVpJyxcbiAgb2s6ICdPaycsXG4gIGNsZWFyOiAnUsODwql0YWJsaXInLFxuICBtb250aDogJ01vaXMnLFxuICB5ZWFyOiAnQW5uw4PCqWUnLFxuICB0aW1lU2VsZWN0OiAnU8ODwqlsZWN0aW9ubmVyIGxcXCdoZXVyZScsXG4gIGRhdGVTZWxlY3Q6ICdTw4PCqWxlY3Rpb25uZXIgbFxcJ2hldXJlJyxcbiAgbW9udGhTZWxlY3Q6ICdDaG9pc2lzc2V6IHVuIG1vaXMnLFxuICB5ZWFyU2VsZWN0OiAnQ2hvaXNpc3NleiB1bmUgYW5uw4PCqWUnLFxuICBkZWNhZGVTZWxlY3Q6ICdDaG9pc2lzc2V6IHVuZSBkw4PCqWNlbm5pZScsXG4gIHllYXJGb3JtYXQ6ICdZWVlZJyxcbiAgZGF0ZUZvcm1hdDogJ0QvTS9ZWVlZJyxcbiAgZGF5Rm9ybWF0OiAnRCcsXG4gIGRhdGVUaW1lRm9ybWF0OiAnRC9NL1lZWVkgSEg6bW06c3MnLFxuICBtb250aEJlZm9yZVllYXI6IHRydWUsXG4gIHByZXZpb3VzTW9udGg6ICdNb2lzIHByw4PCqWPDg8KpZGVudCAoUGFnZVVwKScsXG4gIG5leHRNb250aDogJ01vaXMgc3VpdmFudCAoUGFnZURvd24pJyxcbiAgcHJldmlvdXNZZWFyOiAnQW5uw4PCqWUgcHLDg8KpY8ODwqlkZW50ZSAoQ3RybCArIGdhdWNoZSknLFxuICBuZXh0WWVhcjogJ0FubsODwqllIHByb2NoYWluZSAoQ3RybCArIGRyb2l0ZSknLFxuICBwcmV2aW91c0RlY2FkZTogJ0TDg8KpY2VubmllIHByw4PCqWPDg8KpZGVudGUnLFxuICBuZXh0RGVjYWRlOiAnRMODwqljZW5uaWUgc3VpdmFudGUnLFxuICBwcmV2aW91c0NlbnR1cnk6ICdTacODwqhjbGUgcHLDg8KpY8ODwqlkZW50JyxcbiAgbmV4dENlbnR1cnk6ICdTacODwqhjbGUgc3VpdmFudCcsXG59O1xuIiwiY29uc3QgbG9jYWxlID0ge1xuICBwbGFjZWhvbGRlcjogJ1PDg8KpbGVjdGlvbm5lciBsXFwnaGV1cmUnLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgbG9jYWxlO1xuIiwiaW1wb3J0IENhbGVuZGFyTG9jYWxlIGZyb20gJy4uL2NhbGVuZGFyL2ZyX0JFJztcbmltcG9ydCBUaW1lUGlja2VyTG9jYWxlIGZyb20gJy4uL3RpbWUtcGlja2VyL2ZyX0JFJztcblxuLy8gTWVyZ2UgaW50byBhIGxvY2FsZSBvYmplY3RcbmNvbnN0IGxvY2FsZSA9IHtcbiAgbGFuZzoge1xuICAgIHBsYWNlaG9sZGVyOiAnU8ODwqlsZWN0aW9ubmVyIHVuZSBkYXRlJyxcbiAgICByYW5nZVBsYWNlaG9sZGVyOiBbJ0RhdGUgZGUgZMODwqlidXQnLCAnRGF0ZSBkZSBmaW4nXSxcbiAgICAuLi5DYWxlbmRhckxvY2FsZSxcbiAgfSxcbiAgdGltZVBpY2tlckxvY2FsZToge1xuICAgIC4uLlRpbWVQaWNrZXJMb2NhbGUsXG4gIH0sXG59O1xuXG4vLyBBbGwgc2V0dGluZ3MgYXQ6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy80MjRcblxuZXhwb3J0IGRlZmF1bHQgbG9jYWxlO1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICAvLyBPcHRpb25zLmpzeFxuICBpdGVtc19wZXJfcGFnZTogJy8gcGFnZScsXG4gIGp1bXBfdG86ICdBbGxlciDDg8KgJyxcbiAganVtcF90b19jb25maXJtOiAnY29uZmlybWVyJyxcbiAgcGFnZTogJycsXG5cbiAgLy8gUGFnaW5hdGlvbi5qc3hcbiAgcHJldl9wYWdlOiAnUGFnZSBwcsODwqljw4PCqWRlbnRlJyxcbiAgbmV4dF9wYWdlOiAnUGFnZSBzdWl2YW50ZScsXG4gIHByZXZfNTogJzUgUGFnZXMgcHLDg8KpY8ODwqlkZW50ZXMnLFxuICBuZXh0XzU6ICc1IFBhZ2VzIHN1aXZhbnRlcycsXG4gIHByZXZfMzogJzMgUGFnZXMgcHLDg8KpY8ODwqlkZW50ZXMnLFxuICBuZXh0XzM6ICczIFBhZ2VzIHN1aXZhbnRlcycsXG59O1xuIiwiaW1wb3J0IENhbGVuZGFyIGZyb20gJy4vY2FsZW5kYXIvZnJfQkUnO1xuaW1wb3J0IERhdGVQaWNrZXIgZnJvbSAnLi9kYXRlLXBpY2tlci9mcl9CRSc7XG5pbXBvcnQgUGFnaW5hdGlvbiBmcm9tICcuL3BhZ2luYXRpb24vZnJfQkUnO1xuaW1wb3J0IFRpbWVQaWNrZXIgZnJvbSAnLi90aW1lLXBpY2tlci9mcl9CRSc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbG9jYWxlOiAnZnInLFxuICBQYWdpbmF0aW9uLFxuICBEYXRlUGlja2VyLFxuICBUaW1lUGlja2VyLFxuICBDYWxlbmRhcixcbiAgVGFibGU6IHtcbiAgICBmaWx0ZXJUaXRsZTogJ0ZpbHRyZXInLFxuICAgIGZpbHRlckNvbmZpcm06ICdPSycsXG4gICAgZmlsdGVyUmVzZXQ6ICdSw4PCqWluaXRpYWxpc2VyJyxcbiAgICBlbXB0eVRleHQ6ICdBdWN1bmUgZG9ubsODwqllJyxcbiAgfSxcbiAgTW9kYWw6IHtcbiAgICBva1RleHQ6ICdPSycsXG4gICAgY2FuY2VsVGV4dDogJ0FubnVsZXInLFxuICAgIGp1c3RPa1RleHQ6ICdPSycsXG4gIH0sXG4gIFBvcGNvbmZpcm06IHtcbiAgICBva1RleHQ6ICdPSycsXG4gICAgY2FuY2VsVGV4dDogJ0FubnVsZXInLFxuICB9LFxuICBUcmFuc2Zlcjoge1xuICAgIG5vdEZvdW5kQ29udGVudDogJ1BhcyBkZSByw4PCqXN1bHRhdCcsXG4gICAgc2VhcmNoUGxhY2Vob2xkZXI6ICdSZWNoZXJjaGUnLFxuICAgIGl0ZW1Vbml0OiAnw4PCqWzDg8KpbWVudCcsXG4gICAgaXRlbXNVbml0OiAnw4PCqWzDg8KpbWVudHMnLFxuICB9LFxuICBTZWxlY3Q6IHtcbiAgICBub3RGb3VuZENvbnRlbnQ6ICdQYXMgZGUgcsODwqlzdWx0YXQnLFxuICB9LFxufTtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgdG9kYXk6ICdBdWpvdXJkXFwnaHVpJyxcbiAgbm93OiAnTWFpbnRlbmFudCcsXG4gIGJhY2tUb1RvZGF5OiAnQXVqb3VyZFxcJ2h1aScsXG4gIG9rOiAnT2snLFxuICBjbGVhcjogJ1LDg8KpdGFibGlyJyxcbiAgbW9udGg6ICdNb2lzJyxcbiAgeWVhcjogJ0FubsODwqllJyxcbiAgdGltZVNlbGVjdDogJ1PDg8KpbGVjdGlvbm5lciBsXFwnaGV1cmUnLFxuICBkYXRlU2VsZWN0OiAnU8ODwqlsZWN0aW9ubmVyIGxcXCdoZXVyZScsXG4gIG1vbnRoU2VsZWN0OiAnQ2hvaXNpc3NleiB1biBtb2lzJyxcbiAgeWVhclNlbGVjdDogJ0Nob2lzaXNzZXogdW5lIGFubsODwqllJyxcbiAgZGVjYWRlU2VsZWN0OiAnQ2hvaXNpc3NleiB1bmUgZMODwqljZW5uaWUnLFxuICB5ZWFyRm9ybWF0OiAnWVlZWScsXG4gIGRhdGVGb3JtYXQ6ICdERC9NTS9ZWVlZJyxcbiAgZGF5Rm9ybWF0OiAnREQnLFxuICBkYXRlVGltZUZvcm1hdDogJ0REL01NL1lZWVkgSEg6bW06c3MnLFxuICBtb250aEJlZm9yZVllYXI6IHRydWUsXG4gIHByZXZpb3VzTW9udGg6ICdNb2lzIHByw4PCqWPDg8KpZGVudCAoUGFnZVVwKScsXG4gIG5leHRNb250aDogJ01vaXMgc3VpdmFudCAoUGFnZURvd24pJyxcbiAgcHJldmlvdXNZZWFyOiAnQW5uw4PCqWUgcHLDg8KpY8ODwqlkZW50ZSAoQ3RybCArIGdhdWNoZSknLFxuICBuZXh0WWVhcjogJ0FubsODwqllIHByb2NoYWluZSAoQ3RybCArIGRyb2l0ZSknLFxuICBwcmV2aW91c0RlY2FkZTogJ0TDg8KpY2VubmllIHByw4PCqWPDg8KpZGVudGUnLFxuICBuZXh0RGVjYWRlOiAnRMODwqljZW5uaWUgc3VpdmFudGUnLFxuICBwcmV2aW91c0NlbnR1cnk6ICdTacODwqhjbGUgcHLDg8KpY8ODwqlkZW50JyxcbiAgbmV4dENlbnR1cnk6ICdTacODwqhjbGUgc3VpdmFudCcsXG59O1xuIiwiY29uc3QgbG9jYWxlID0ge1xuICBwbGFjZWhvbGRlcjogJ1PDg8KpbGVjdGlvbm5lciBsXFwnaGV1cmUnLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgbG9jYWxlO1xuIiwiaW1wb3J0IENhbGVuZGFyTG9jYWxlIGZyb20gJy4uL2NhbGVuZGFyL2ZyX0ZSJztcbmltcG9ydCBUaW1lUGlja2VyTG9jYWxlIGZyb20gJy4uL3RpbWUtcGlja2VyL2ZyX0ZSJztcblxuLy8gTWVyZ2UgaW50byBhIGxvY2FsZSBvYmplY3RcbmNvbnN0IGxvY2FsZSA9IHtcbiAgbGFuZzoge1xuICAgIHBsYWNlaG9sZGVyOiAnU8ODwqlsZWN0aW9ubmVyIHVuZSBkYXRlJyxcbiAgICByYW5nZVBsYWNlaG9sZGVyOiBbJ0RhdGUgZGUgZMODwqlidXQnLCAnRGF0ZSBkZSBmaW4nXSxcbiAgICAuLi5DYWxlbmRhckxvY2FsZSxcbiAgfSxcbiAgdGltZVBpY2tlckxvY2FsZToge1xuICAgIC4uLlRpbWVQaWNrZXJMb2NhbGUsXG4gIH0sXG59O1xuXG4vLyBBbGwgc2V0dGluZ3MgYXQ6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy80MjRcblxuZXhwb3J0IGRlZmF1bHQgbG9jYWxlO1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICAvLyBPcHRpb25zLmpzeFxuICBpdGVtc19wZXJfcGFnZTogJy8gcGFnZScsXG4gIGp1bXBfdG86ICdBbGxlciDDg8KgJyxcbiAganVtcF90b19jb25maXJtOiAnY29uZmlybWVyJyxcbiAgcGFnZTogJycsXG5cbiAgLy8gUGFnaW5hdGlvbi5qc3hcbiAgcHJldl9wYWdlOiAnUGFnZSBwcsODwqljw4PCqWRlbnRlJyxcbiAgbmV4dF9wYWdlOiAnUGFnZSBzdWl2YW50ZScsXG4gIHByZXZfNTogJzUgUGFnZXMgcHLDg8KpY8ODwqlkZW50ZXMnLFxuICBuZXh0XzU6ICc1IFBhZ2VzIHN1aXZhbnRlcycsXG4gIHByZXZfMzogJzMgUGFnZXMgcHLDg8KpY8ODwqlkZW50ZXMnLFxuICBuZXh0XzM6ICczIFBhZ2VzIHN1aXZhbnRlcycsXG59O1xuIiwiaW1wb3J0IENhbGVuZGFyIGZyb20gJy4vY2FsZW5kYXIvZnJfRlInO1xuaW1wb3J0IERhdGVQaWNrZXIgZnJvbSAnLi9kYXRlLXBpY2tlci9mcl9GUic7XG5pbXBvcnQgUGFnaW5hdGlvbiBmcm9tICcuL3BhZ2luYXRpb24vZnJfRlInO1xuaW1wb3J0IFRpbWVQaWNrZXIgZnJvbSAnLi90aW1lLXBpY2tlci9mcl9GUic7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbG9jYWxlOiAnZnInLFxuICBQYWdpbmF0aW9uLFxuICBEYXRlUGlja2VyLFxuICBUaW1lUGlja2VyLFxuICBDYWxlbmRhcixcbiAgVGFibGU6IHtcbiAgICBmaWx0ZXJUaXRsZTogJ0ZpbHRyZXInLFxuICAgIGZpbHRlckNvbmZpcm06ICdPSycsXG4gICAgZmlsdGVyUmVzZXQ6ICdSw4PCqWluaXRpYWxpc2VyJyxcbiAgICBlbXB0eVRleHQ6ICdBdWN1bmUgZG9ubsODwqllJyxcbiAgfSxcbiAgTW9kYWw6IHtcbiAgICBva1RleHQ6ICdPSycsXG4gICAgY2FuY2VsVGV4dDogJ0FubnVsZXInLFxuICAgIGp1c3RPa1RleHQ6ICdPSycsXG4gIH0sXG4gIFBvcGNvbmZpcm06IHtcbiAgICBva1RleHQ6ICdPSycsXG4gICAgY2FuY2VsVGV4dDogJ0FubnVsZXInLFxuICB9LFxuICBUcmFuc2Zlcjoge1xuICAgIG5vdEZvdW5kQ29udGVudDogJ1BhcyBkZSByw4PCqXN1bHRhdCcsXG4gICAgc2VhcmNoUGxhY2Vob2xkZXI6ICdSZWNoZXJjaGUnLFxuICAgIGl0ZW1Vbml0OiAnw4PCqWzDg8KpbWVudCcsXG4gICAgaXRlbXNVbml0OiAnw4PCqWzDg8KpbWVudHMnLFxuICB9LFxuICBTZWxlY3Q6IHtcbiAgICBub3RGb3VuZENvbnRlbnQ6ICdQYXMgZGUgcsODwqlzdWx0YXQnLFxuICB9LFxufTtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgdG9kYXk6ICfDg8KNIGRhZycsXG4gIG5vdzogJ07Dg8K6bmEnLFxuICBiYWNrVG9Ub2RheTogJ1RpbCBiYWthIHRpbCBkYWdzaW5zIMODwq0gZGFnJyxcbiAgb2s6ICfDg8KNIGxhZ2knLFxuICBjbGVhcjogJ0hyZWluc2EnLFxuICBtb250aDogJ03Dg8KhbnXDg8KwdXInLFxuICB5ZWFyOiAnw4PCgXInLFxuICB0aW1lU2VsZWN0OiAnVmVsamEgdMODwq1tYScsXG4gIGRhdGVTZWxlY3Q6ICdWZWxqYSBkYWcnLFxuICBtb250aFNlbGVjdDogJ1ZlbGphIG3Dg8KhbnXDg8KwJyxcbiAgeWVhclNlbGVjdDogJ1ZlbGphIMODwqFyJyxcbiAgZGVjYWRlU2VsZWN0OiAnVmVsamEgw4PCoXJhdHVnJyxcbiAgeWVhckZvcm1hdDogJ1lZWVknLFxuICBkYXRlRm9ybWF0OiAnRC9NL1lZWVknLFxuICBkYXlGb3JtYXQ6ICdEJyxcbiAgZGF0ZVRpbWVGb3JtYXQ6ICdEL00vWVlZWSBISDptbTpzcycsXG4gIG1vbnRoQmVmb3JlWWVhcjogdHJ1ZSxcbiAgcHJldmlvdXNNb250aDogJ0Z5cnJpIG3Dg8KhbnXDg8KwdXIgKFBhZ2VVcCknLFxuICBuZXh0TW9udGg6ICdOw4PCpnN0aSBtw4PCoW51w4PCsHVyIChQYWdlRG93biknLFxuICBwcmV2aW91c1llYXI6ICdGeXJyYSDDg8KhciAoQ29udHJvbCArIGxlZnQpJyxcbiAgbmV4dFllYXI6ICdOw4PCpnN0YSDDg8KhciAoQ29udHJvbCArIHJpZ2h0KScsXG4gIHByZXZpb3VzRGVjYWRlOiAnRnlycmkgw4PCoXJhdHVndXInLFxuICBuZXh0RGVjYWRlOiAnTsODwqZzdGkgw4PCoXJhdHVndXInLFxuICBwcmV2aW91c0NlbnR1cnk6ICdGeXJyaSDDg8K2bGQnLFxuICBuZXh0Q2VudHVyeTogJ07Dg8Kmc3RhIMODwrZsZCcsXG59O1xuIiwiY29uc3QgbG9jYWxlID0ge1xuICBwbGFjZWhvbGRlcjogJ1ZlbGphIHTDg8KtbWEnLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgbG9jYWxlO1xuIiwiaW1wb3J0IENhbGVuZGFyTG9jYWxlIGZyb20gJy4uL2NhbGVuZGFyL2lzX0lTJztcbmltcG9ydCBUaW1lUGlja2VyTG9jYWxlIGZyb20gJy4uL3RpbWUtcGlja2VyL2lzX0lTJztcblxuLy8gTWVyZ2UgaW50byBhIGxvY2FsZSBvYmplY3RcbmNvbnN0IGxvY2FsZSA9IHtcbiAgbGFuZzoge1xuICAgIHBsYWNlaG9sZGVyOiAnVmVsZHUgZGFnJyxcbiAgICByYW5nZVBsYWNlaG9sZGVyOiBbJ1VwcGhhZnNkYWd1cicsICdMb2thZGFndXInXSxcbiAgICAuLi5DYWxlbmRhckxvY2FsZSxcbiAgfSxcbiAgdGltZVBpY2tlckxvY2FsZToge1xuICAgIC4uLlRpbWVQaWNrZXJMb2NhbGUsXG4gIH0sXG59O1xuXG4vLyBBbGwgc2V0dGluZ3MgYXQ6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2Jsb2IvbWFzdGVyL2NvbXBvbmVudHMvZGF0ZS1waWNrZXIvbG9jYWxlL2V4YW1wbGUuanNvblxuXG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIC8vIE9wdGlvbnMuanN4XG4gIGl0ZW1zX3Blcl9wYWdlOiAnLyBzw4PCrcODwrB1JyxcbiAganVtcF90bzogJ1PDg8Ktw4PCsGEnLFxuICBqdW1wX3RvX2NvbmZpcm06ICdzdGHDg8KwZmVzdCcsXG4gIHBhZ2U6ICcnLFxuXG4gIC8vIFBhZ2luYXRpb24uanN4XG4gIHByZXZfcGFnZTogJ0Z5cnJpIHPDg8Ktw4PCsGEnLFxuICBuZXh0X3BhZ2U6ICdOw4PCpnN0YSBzw4PCrcODwrBhJyxcbiAgcHJldl81OiAnVGlsIGJha2EgNSBzw4PCrcODwrB1cicsXG4gIG5leHRfNTogJ8ODwoFmcmFtIDUgc8ODwq3Dg8KwdXInLFxuICBwcmV2XzM6ICdUaWwgYmFrYSAzIHPDg8Ktw4PCsHVyJyxcbiAgbmV4dF8zOiAnw4PCgWZyYW0gMyBzw4PCrcODwrB1cicsXG59O1xuIiwiaW1wb3J0IENhbGVuZGFyIGZyb20gJy4vY2FsZW5kYXIvaXNfSVMnO1xuaW1wb3J0IERhdGVQaWNrZXIgZnJvbSAnLi9kYXRlLXBpY2tlci9pc19JUyc7XG5pbXBvcnQgUGFnaW5hdGlvbiBmcm9tICcuL3BhZ2luYXRpb24vaXNfSVMnO1xuaW1wb3J0IFRpbWVQaWNrZXIgZnJvbSAnLi90aW1lLXBpY2tlci9pc19JUyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbG9jYWxlOiAnaXMnLFxuICBQYWdpbmF0aW9uLFxuICBEYXRlUGlja2VyLFxuICBUaW1lUGlja2VyLFxuICBDYWxlbmRhcixcbiAgVGFibGU6IHtcbiAgICBmaWx0ZXJUaXRsZTogJ0FmbWFya2FuaXInLFxuICAgIGZpbHRlckNvbmZpcm06ICdTdGHDg8KwZmVzdGEnLFxuICAgIGZpbHRlclJlc2V0OiAnTsODwrpsbHN0aWxsYScsXG4gICAgZW1wdHlUZXh0OiAnRW5naW4gZ8ODwrZnbicsXG4gICAgc2VsZWN0QWxsOiAnVmVsamEgYWxsdCcsXG4gICAgc2VsZWN0SW52ZXJ0OiAnVmnDg8Kwc27Dg8K6YSB2YWxpJyxcbiAgfSxcbiAgTW9kYWw6IHtcbiAgICBva1RleHQ6ICfDg8KBZnJhbScsXG4gICAgY2FuY2VsVGV4dDogJ0jDg8KmdHRhIHZpw4PCsCcsXG4gICAganVzdE9rVGV4dDogJ8ODwo0gbGFnaScsXG4gIH0sXG4gIFBvcGNvbmZpcm06IHtcbiAgICBva1RleHQ6ICfDg8KBZnJhbScsXG4gICAgY2FuY2VsVGV4dDogJ0jDg8KmdHRhIHZpw4PCsCcsXG4gIH0sXG4gIFRyYW5zZmVyOiB7XG4gICAgbm90Rm91bmRDb250ZW50OiAnRW5nYXIgZsODwqZyc2x1cicsXG4gICAgc2VhcmNoUGxhY2Vob2xkZXI6ICdMZWl0YSBow4PCqXInLFxuICAgIGl0ZW1Vbml0OiAnZsODwqZyc2xhJyxcbiAgICBpdGVtc1VuaXQ6ICdmw4PCpnJzbHVyJyxcbiAgfSxcbiAgU2VsZWN0OiB7XG4gICAgbm90Rm91bmRDb250ZW50OiAnRWtrZXJ0IGZpbm5zdCcsXG4gIH0sXG4gIFVwbG9hZDoge1xuICAgIHVwbG9hZGluZzogJ0hsZcODwrAgdXBwLi4uJyxcbiAgICByZW1vdmVGaWxlOiAnRmphcmzDg8KmZ2phIHNrcsODwqEnLFxuICAgIHVwbG9hZEVycm9yOiAnVmlsbGEgdmnDg8KwIGHDg8KwIGhsYcODwrBhIHVwcCcsXG4gICAgcHJldmlld0ZpbGU6ICdGb3Jza2/Dg8KwYSBza3LDg8KhJyxcbiAgfSxcbn07XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIHRvZGF5OiAnT2dnaScsXG4gIG5vdzogJ2FkZXNzbycsXG4gIGJhY2tUb1RvZGF5OiAnVG9ybmEgYWQgb2dnaScsXG4gIG9rOiAnT2snLFxuICBjbGVhcjogJ0NoaWFybycsXG4gIG1vbnRoOiAnTWVzZScsXG4gIHllYXI6ICdBbm5vJyxcbiAgdGltZVNlbGVjdDogJ1NlbGV6aW9uYSBpbCB0ZW1wbycsXG4gIGRhdGVTZWxlY3Q6ICdTZWxlY3QgZGF0ZScsXG4gIG1vbnRoU2VsZWN0OiAnU2VsZXppb25hIGxhIGRhdGEnLFxuICB5ZWFyU2VsZWN0OiAnU2NlZ2xpIHVuIGFubm8nLFxuICBkZWNhZGVTZWxlY3Q6ICdTY2VnbGkgdW4gZGVjZW5uaW8nLFxuICB5ZWFyRm9ybWF0OiAnWVlZWScsXG4gIGRhdGVGb3JtYXQ6ICdEL00vWVlZWScsXG4gIGRheUZvcm1hdDogJ0QnLFxuICBkYXRlVGltZUZvcm1hdDogJ0QvTS9ZWVlZIEhIOm1tOnNzJyxcbiAgbW9udGhCZWZvcmVZZWFyOiB0cnVlLFxuICBwcmV2aW91c01vbnRoOiAnSWwgbWVzZSBzY29yc28gKFBhZ2VVcCknLFxuICBuZXh0TW9udGg6ICdJbCBwcm9zc2ltbyBtZXNlIChQYWdlRG93biknLFxuICBwcmV2aW91c1llYXI6ICdMXFwnYW5ubyBzY29yc28gKENvbnRyb2wgKyBzaW5pc3RyYSknLFxuICBuZXh0WWVhcjogJ0xcXCdhbm5vIHByb3NzaW1vIChDb250cm9sICsgZGVzdHJhKScsXG4gIHByZXZpb3VzRGVjYWRlOiAnVWx0aW1vIGRlY2VubmlvJyxcbiAgbmV4dERlY2FkZTogJ1Byb3NzaW1vIGRlY2VubmlvJyxcbiAgcHJldmlvdXNDZW50dXJ5OiAnU2Vjb2xvIHByZWNlZGVudGUnLFxuICBuZXh0Q2VudHVyeTogJ1Byb3NzaW1vIHNlY29sbycsXG59O1xuIiwiY29uc3QgbG9jYWxlID0ge1xuICBwbGFjZWhvbGRlcjogJ1NlbGV6aW9uYXJlIGlsIHRlbXBvJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTtcbiIsImltcG9ydCBDYWxlbmRhckxvY2FsZSBmcm9tICcuLi9jYWxlbmRhci9pdF9JVCc7XG5pbXBvcnQgVGltZVBpY2tlckxvY2FsZSBmcm9tICcuLi90aW1lLXBpY2tlci9pdF9JVCc7XG5cbi8vIE1lcmdlIGludG8gYSBsb2NhbGUgb2JqZWN0XG5jb25zdCBsb2NhbGUgPSB7XG4gIGxhbmc6IHtcbiAgICBwbGFjZWhvbGRlcjogJ1NlbGV6aW9uYXJlIGxhIGRhdGEnLFxuICAgIHJhbmdlUGxhY2Vob2xkZXI6IFsnRGF0YSBkXFwnaW5pemlvJywgJ0RhdGEgZGkgZmluZSddLFxuICAgIC4uLkNhbGVuZGFyTG9jYWxlLFxuICB9LFxuICB0aW1lUGlja2VyTG9jYWxlOiB7XG4gICAgLi4uVGltZVBpY2tlckxvY2FsZSxcbiAgfSxcbn07XG5cbi8vIEFsbCBzZXR0aW5ncyBhdDpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vaXNzdWVzLzQyNFxuXG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIC8vIE9wdGlvbnMuanN4XG4gIGl0ZW1zX3Blcl9wYWdlOiAnLyBwYWdpbmEnLFxuICBqdW1wX3RvOiAndmFpIGEnLFxuICBqdW1wX3RvX2NvbmZpcm06ICdDb25mZXJtYScsXG4gIHBhZ2U6ICcnLFxuXG4gIC8vIFBhZ2luYXRpb24uanN4XG4gIHByZXZfcGFnZTogJ1BhZ2luYSBwcmVjZWRlbnRlJyxcbiAgbmV4dF9wYWdlOiAnUGFnaW5hIHN1Y2Nlc3NpdmEnLFxuICBwcmV2XzU6ICdQcmVjZWRlbnRlIDUgcGFnaW5lJyxcbiAgbmV4dF81OiAnUHJvc3NpbWUgNSBwYWdpbmUnLFxuICBwcmV2XzM6ICdQcmVjZWRlbnRlIDMgcGFnaW5lJyxcbiAgbmV4dF8zOiAnUHJvc3NpbWUgMyBwYWdpbmUnLFxufTtcbiIsImltcG9ydCBDYWxlbmRhciBmcm9tICcuL2NhbGVuZGFyL2l0X0lUJztcbmltcG9ydCBEYXRlUGlja2VyIGZyb20gJy4vZGF0ZS1waWNrZXIvaXRfSVQnO1xuaW1wb3J0IFBhZ2luYXRpb24gZnJvbSAnLi9wYWdpbmF0aW9uL2l0X0lUJztcbmltcG9ydCBUaW1lUGlja2VyIGZyb20gJy4vdGltZS1waWNrZXIvaXRfSVQnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGxvY2FsZTogJ2l0JyxcbiAgUGFnaW5hdGlvbixcbiAgRGF0ZVBpY2tlcixcbiAgVGltZVBpY2tlcixcbiAgQ2FsZW5kYXIsXG4gIFRhYmxlOiB7XG4gICAgZmlsdGVyVGl0bGU6ICdNZW51IEZpbHRybycsXG4gICAgZmlsdGVyQ29uZmlybTogJ09LJyxcbiAgICBmaWx0ZXJSZXNldDogJ1Jlc2V0JyxcbiAgICBlbXB0eVRleHQ6ICdOZXNzdW4gZGF0bycsXG4gICAgc2VsZWN0QWxsOiAnU2VsZXppb25hIHBhZ2luYSBjb3JyZW50ZScsXG4gICAgc2VsZWN0SW52ZXJ0OiAnU2VsZXppb25hcmUgSW52ZXJ0aScsXG4gIH0sXG4gIE1vZGFsOiB7XG4gICAgb2tUZXh0OiAnT0snLFxuICAgIGNhbmNlbFRleHQ6ICdBbm51bGxhJyxcbiAgICBqdXN0T2tUZXh0OiAnT0snLFxuICB9LFxuICBQb3Bjb25maXJtOiB7XG4gICAgb2tUZXh0OiAnT0snLFxuICAgIGNhbmNlbFRleHQ6ICdBbm51bGxhJyxcbiAgfSxcbiAgVHJhbnNmZXI6IHtcbiAgICBub3RGb3VuZENvbnRlbnQ6ICdOb24gdHJvdmF0bycsXG4gICAgc2VhcmNoUGxhY2Vob2xkZXI6ICdDZXJjYSBxdWknLFxuICAgIGl0ZW1Vbml0OiAnYXJ0aWNvbG8nLFxuICAgIGl0ZW1zVW5pdDogJ2VsZW1lbnRpJyxcbiAgfSxcbiAgU2VsZWN0OiB7XG4gICAgbm90Rm91bmRDb250ZW50OiAnTm9uIHRyb3ZhdG8nLFxuICB9LFxuICBVcGxvYWQ6IHtcbiAgICB1cGxvYWRpbmc6ICdDYXJpY2FtZW50by4uLicsXG4gICAgcmVtb3ZlRmlsZTogJ1JpbXVvdmkgaWwgZmlsZScsXG4gICAgdXBsb2FkRXJyb3I6ICdFcnJvcmUgZGkgY2FyaWNhbWVudG8nLFxuICAgIHByZXZpZXdGaWxlOiAnQW50ZXByaW1hIGZpbGUnLFxuICB9LFxufTtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgdG9kYXk6ICfDpMK7worDpsKXwqUnLFxuICBub3c6ICfDp8KPwr7DpcKcwqjDpsKZwoLDpcKIwrsnLFxuICBiYWNrVG9Ub2RheTogJ8OkwrvCisOmwpfCpcOjwoHCq8OmwojCu8OjwoLCiycsXG4gIG9rOiAnw6bCscK6w6XCrsKaJyxcbiAgdGltZVNlbGVjdDogJ8OmwpnCgsOpwpbCk8OjwoLCksOpwoHCuMOmworCnicsXG4gIGRhdGVTZWxlY3Q6ICfDpsKXwqXDpsKZwoLDo8KCwpLDqcKBwrjDpsKKwp4nLFxuICBjbGVhcjogJ8OjwoLCr8OjwoPCqsOjwoLCoicsXG4gIG1vbnRoOiAnw6bCnMKIJyxcbiAgeWVhcjogJ8OlwrnCtCcsXG4gIHByZXZpb3VzTW9udGg6ICfDpcKJwo3DpsKcwoggKMOjwoPCmsOjwoPCvMOjwoLCuMOjwoLCosOjwoPCg8OjwoPCl8OjwoLCrcOjwoPCvCknLFxuICBuZXh0TW9udGg6ICfDp8K/wozDpsKcwoggKMOjwoPCmsOjwoPCvMOjwoLCuMOjwoPCgMOjwoLCpsOjwoPCs8OjwoLCrcOjwoPCvCknLFxuICBtb250aFNlbGVjdDogJ8OmwpzCiMOjwoLCksOpwoHCuMOmworCnicsXG4gIHllYXJTZWxlY3Q6ICfDpcK5wrTDo8KCwpLDqcKBwrjDpsKKwp4nLFxuICBkZWNhZGVTZWxlY3Q6ICfDpcK5wrTDpMK7wqPDo8KCwpLDqcKBwrjDpsKKwp4nLFxuICB5ZWFyRm9ybWF0OiAnWVlZWcOlwrnCtCcsXG4gIGRheUZvcm1hdDogJ0TDpsKXwqUnLFxuICBkYXRlRm9ybWF0OiAnWVlZWcOlwrnCtE3DpsKcwohEw6bCl8KlJyxcbiAgZGF0ZVRpbWVGb3JtYXQ6ICdZWVlZw6XCucK0TcOmwpzCiETDpsKXwqUgSEjDpsKZwoJtbcOlwojChnNzw6fCp8KSJyxcbiAgcHJldmlvdXNZZWFyOiAnw6XCicKNw6XCucK0IChDb250cm9sw6PCgsKSw6bCisK8w6PCgcKXw6PCgcKqw6PCgcKMw6PCgsKJw6XCt8Kmw6PCgsKtw6PCg8K8KScsXG4gIG5leHRZZWFyOiAnw6fCv8KMw6XCucK0IChDb250cm9sw6PCgsKSw6bCisK8w6PCgcKXw6PCgcKqw6PCgcKMw6PCgsKJw6XCj8Kzw6PCgsKtw6PCg8K8KScsXG4gIHByZXZpb3VzRGVjYWRlOiAnw6XCicKNw6PCgcKuw6XCucK0w6TCu8KjJyxcbiAgbmV4dERlY2FkZTogJ8OmwqzCocOjwoHCrsOlwrnCtMOkwrvCoycsXG4gIHByZXZpb3VzQ2VudHVyeTogJ8OlwonCjcOjwoHCrsOkwrjClsOnwrTCgCcsXG4gIG5leHRDZW50dXJ5OiAnw6bCrMKhw6PCgcKuw6TCuMKWw6fCtMKAJyxcbn07XG4iLCJjb25zdCBsb2NhbGUgPSB7XG4gIHBsYWNlaG9sZGVyOiAnw6bCmcKCw6XCiMK7w6PCgsKSw6nCgcK4w6bCisKeJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTtcbiIsImltcG9ydCBDYWxlbmRhckxvY2FsZSBmcm9tICcuLi9jYWxlbmRhci9qYV9KUCc7XG5pbXBvcnQgVGltZVBpY2tlckxvY2FsZSBmcm9tICcuLi90aW1lLXBpY2tlci9qYV9KUCc7XG5cbmNvbnN0IGxvY2FsZSA9IHtcbiAgbGFuZzoge1xuICAgIHBsYWNlaG9sZGVyOiAnw6bCl8Klw6TCu8KYw6PCgsKSw6nCgcK4w6bCisKeJyxcbiAgICByYW5nZVBsYWNlaG9sZGVyOiBbJ8OpwpbCi8OlwqfCi8OmwpfCpcOkwrvCmCcsICfDp8K1woLDpMK6wobDpsKXwqXDpMK7wpgnXSxcbiAgICAuLi5DYWxlbmRhckxvY2FsZSxcbiAgfSxcbiAgdGltZVBpY2tlckxvY2FsZToge1xuICAgIC4uLlRpbWVQaWNrZXJMb2NhbGUsXG4gIH0sXG59O1xuXG4vLyBBbGwgc2V0dGluZ3MgYXQ6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2Jsb2IvbWFzdGVyL2NvbXBvbmVudHMvZGF0ZS1waWNrZXIvbG9jYWxlL2V4YW1wbGUuanNvblxuXG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIC8vIE9wdGlvbnMuanN4XG4gIGl0ZW1zX3Blcl9wYWdlOiAnLyDDo8KDwprDo8KDwrzDo8KCwrgnLFxuICBqdW1wX3RvOiAnw6fCp8K7w6XCi8KVJyxcbiAganVtcF90b19jb25maXJtOiAnw6fCosK6w6jCqsKNw6PCgcKZw6PCgsKLJyxcbiAgcGFnZTogJ8OjwoPCmsOjwoPCvMOjwoLCuCcsXG5cbiAgLy8gUGFnaW5hdGlvbi5qc3hcbiAgcHJldl9wYWdlOiAnw6XCicKNw6PCgcKuw6PCg8Kaw6PCg8K8w6PCgsK4JyxcbiAgbmV4dF9wYWdlOiAnw6bCrMKhw6PCgcKuw6PCg8Kaw6PCg8K8w6PCgsK4JyxcbiAgcHJldl81OiAnw6XCicKNIDXDo8KDwprDo8KDwrzDo8KCwrgnLFxuICBuZXh0XzU6ICfDpsKswqEgNcOjwoPCmsOjwoPCvMOjwoLCuCcsXG4gIHByZXZfMzogJ8OlwonCjSAzw6PCg8Kaw6PCg8K8w6PCgsK4JyxcbiAgbmV4dF8zOiAnw6bCrMKhIDPDo8KDwprDo8KDwrzDo8KCwrgnLFxufTtcbiIsImltcG9ydCBDYWxlbmRhciBmcm9tICcuL2NhbGVuZGFyL2phX0pQJztcbmltcG9ydCBEYXRlUGlja2VyIGZyb20gJy4vZGF0ZS1waWNrZXIvamFfSlAnO1xuaW1wb3J0IFBhZ2luYXRpb24gZnJvbSAnLi9wYWdpbmF0aW9uL2phX0pQJztcbmltcG9ydCBUaW1lUGlja2VyIGZyb20gJy4vdGltZS1waWNrZXIvamFfSlAnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGxvY2FsZTogJ2phJyxcbiAgUGFnaW5hdGlvbixcbiAgRGF0ZVBpY2tlcixcbiAgVGltZVBpY2tlcixcbiAgQ2FsZW5kYXIsXG4gIFRhYmxlOiB7XG4gICAgZmlsdGVyVGl0bGU6ICfDo8KDwqHDo8KDwovDo8KDwqXDo8KDwrzDo8KCwpLDo8KDwpXDo8KCwqPDo8KDwqvDo8KCwr/Do8KDwrwnLFxuICAgIGZpbHRlckNvbmZpcm06ICdPSycsXG4gICAgZmlsdGVyUmVzZXQ6ICfDo8KDwqrDo8KCwrvDo8KDwoPDo8KDwognLFxuICAgIGVtcHR5VGV4dDogJ8OjwoPCh8OjwoPCvMOjwoLCv8OjwoHCjMOjwoHCgsOjwoLCisOjwoHCvsOjwoHCm8OjwoLCkycsXG4gICAgc2VsZWN0QWxsOiAnw6PCgcKZw6PCgcK5w6PCgcKmw6PCgsKSw6nCgcK4w6bCisKeJyxcbiAgICBzZWxlY3RJbnZlcnQ6ICfDqcKBwrjDpsKKwp7Do8KCwpLDpcKPwo3DqMK7wqInLFxuICB9LFxuICBNb2RhbDoge1xuICAgIG9rVGV4dDogJ09LJyxcbiAgICBjYW5jZWxUZXh0OiAnw6PCgsKtw6PCg8Kjw6PCg8Kzw6PCgsK7w6PCg8KrJyxcbiAgICBqdXN0T2tUZXh0OiAnT0snLFxuICB9LFxuICBQb3Bjb25maXJtOiB7XG4gICAgb2tUZXh0OiAnT0snLFxuICAgIGNhbmNlbFRleHQ6ICfDo8KCwq3Do8KDwqPDo8KDwrPDo8KCwrvDo8KDwqsnLFxuICB9LFxuICBUcmFuc2Zlcjoge1xuICAgIG5vdEZvdW5kQ29udGVudDogJ8OnwrXCkMOmwp7CnMOjwoHCr8OjwoHCgsOjwoLCisOjwoHCvsOjwoHCm8OjwoLCkycsXG4gICAgc2VhcmNoUGxhY2Vob2xkZXI6ICfDo8KBwpPDo8KBwpPDo8KCwpLDpsKkwpzDp8K0wqInLFxuICAgIGl0ZW1Vbml0OiAnw6PCgsKiw6PCgsKkw6PCg8KGw6PCg8KgJyxcbiAgICBpdGVtc1VuaXQ6ICfDo8KCwqLDo8KCwqTDo8KDwobDo8KDwqAnLFxuICB9LFxuICBTZWxlY3Q6IHtcbiAgICBub3RGb3VuZENvbnRlbnQ6ICfDp8K1wpDDpsKewpzDo8KBwq/Do8KBwoLDo8KCworDo8KBwr7Do8KBwpvDo8KCwpMnLFxuICB9LFxuICBVcGxvYWQ6IHtcbiAgICB1cGxvYWRpbmc6ICfDo8KCwqLDo8KDwoPDo8KDwpfDo8KDwq3Do8KDwrzDo8KDwonDpMK4wq0uLi4nLFxuICAgIHJlbW92ZUZpbGU6ICfDo8KDwpXDo8KCwqHDo8KCwqTDo8KDwqvDo8KCwpLDpcKJworDqcKZwqQnLFxuICAgIHVwbG9hZEVycm9yOiAnw6PCgsKiw6PCg8KDw6PCg8KXw6PCg8Ktw6PCg8K8w6PCg8KJw6PCgsKow6PCg8Kpw6PCg8K8JyxcbiAgICBwcmV2aWV3RmlsZTogJ8OjwoPClcOjwoLCocOjwoLCpMOjwoPCq8OjwoLCksOjwoPCl8OjwoPCrMOjwoPCk8OjwoPCpcOjwoPCvCcsXG4gIH0sXG59O1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICB0b2RheTogJ8OswpjCpMOrworCmCcsXG4gIG5vdzogJ8OtwpjChMOswp7CrCDDrMKLwpzDqsKwwoEnLFxuICBiYWNrVG9Ub2RheTogJ8OswpjCpMOrworCmMOrwqHCnCDDq8KPwozDrMKVwoTDqsKwwoDDqsK4wrAnLFxuICBvazogJ8OtwpnClcOswp3CuCcsXG4gIGNsZWFyOiAnw6zCp8KAw6zCmsKww6rCuMKwJyxcbiAgbW9udGg6ICfDrMKbwpQnLFxuICB5ZWFyOiAnw6vChcKEJyxcbiAgdGltZVNlbGVjdDogJ8OswovCnMOqwrDChCDDrMKEwqDDrcKDwp0nLFxuICBkYXRlU2VsZWN0OiAnw6vCgsKgw6zCp8KcIMOswoTCoMOtwoPCnScsXG4gIG1vbnRoU2VsZWN0OiAnw6vCi8KsIMOswoTCoMOtwoPCnScsXG4gIHllYXJTZWxlY3Q6ICfDrMKXwrAgw6zChMKgw63Cg8KdJyxcbiAgZGVjYWRlU2VsZWN0OiAnw6zCl8Kww6vCjMKAIMOswoTCoMOtwoPCnScsXG4gIHllYXJGb3JtYXQ6ICdZWVlZw6vChcKEJyxcbiAgZGF0ZUZvcm1hdDogJ1lZWVktTU0tREQnLFxuICBkYXlGb3JtYXQ6ICdEbycsXG4gIGRhdGVUaW1lRm9ybWF0OiAnWVlZWS1NTS1ERCBISDptbTpzcycsXG4gIG1vbnRoQmVmb3JlWWVhcjogZmFsc2UsXG4gIHByZXZpb3VzTW9udGg6ICfDrMKdwrTDrMKgwoQgw6vCi8KsIChQYWdlVXApJyxcbiAgbmV4dE1vbnRoOiAnw6vCi8Kkw6zCncKMIMOrwovCrCAoUGFnZURvd24pJyxcbiAgcHJldmlvdXNZZWFyOiAnw6zCncK0w6zCoMKEIMOtwpXCtCAoQ29udHJvbCArIGxlZnQpJyxcbiAgbmV4dFllYXI6ICfDq8KLwqTDrMKdwowgw63ClcK0IChDb250cm9sICsgcmlnaHQpJyxcbiAgcHJldmlvdXNEZWNhZGU6ICfDrMKdwrTDrMKgwoQgw6zCl8Kww6vCjMKAJyxcbiAgbmV4dERlY2FkZTogJ8OrwovCpMOswp3CjCDDrMKXwrDDq8KMwoAnLFxuICBwcmV2aW91c0NlbnR1cnk6ICfDrMKdwrTDrMKgwoQgw6zChMK4w6rCuMKwJyxcbiAgbmV4dENlbnR1cnk6ICfDq8KLwqTDrMKdwowgw6zChMK4w6rCuMKwJyxcbn07XG4iLCJjb25zdCBsb2NhbGUgPSB7XG4gIHBsYWNlaG9sZGVyOiAnw6vCgsKgw6zCp8KcIMOswoTCoMOtwoPCnScsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7XG4iLCJpbXBvcnQgQ2FsZW5kYXJMb2NhbGUgZnJvbSAnLi4vY2FsZW5kYXIva29fS1InO1xuaW1wb3J0IFRpbWVQaWNrZXJMb2NhbGUgZnJvbSAnLi4vdGltZS1waWNrZXIva29fS1InO1xuXG4vLyBNZXJnZSBpbnRvIGEgbG9jYWxlIG9iamVjdFxuY29uc3QgbG9jYWxlID0ge1xuICBsYW5nOiB7XG4gICAgcGxhY2Vob2xkZXI6ICfDq8KCwqDDrMKnwpwgw6zChMKgw63Cg8KdJyxcbiAgICByYW5nZVBsYWNlaG9sZGVyOiBbJ8OswovCnMOswp7CkcOswp3CvCcsICfDrMKiwoXDq8KjwozDrMKdwrwnXSxcbiAgICAuLi5DYWxlbmRhckxvY2FsZSxcbiAgfSxcbiAgdGltZVBpY2tlckxvY2FsZToge1xuICAgIC4uLlRpbWVQaWNrZXJMb2NhbGUsXG4gIH0sXG59O1xuXG4vLyBBbGwgc2V0dGluZ3MgYXQ6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2Jsb2IvbWFzdGVyL2NvbXBvbmVudHMvZGF0ZS1waWNrZXIvbG9jYWxlL2V4YW1wbGUuanNvblxuXG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIC8vIE9wdGlvbnMuanN4XG4gIGl0ZW1zX3Blcl9wYWdlOiAnLyDDrMKqwr0nLFxuICBqdW1wX3RvOiAnw6zCncK0w6vCj8KZw63ClcKYw6rCuMKwJyxcbiAganVtcF90b19jb25maXJtOiAnw63CmcKVw6zCncK4w63ClcKYw6vCi8KkJyxcbiAgcGFnZTogJycsXG5cbiAgLy8gUGFnaW5hdGlvbi5qc3hcbiAgcHJldl9wYWdlOiAnw6zCncK0w6zCoMKEIMOtwo7CmMOswp3CtMOswqfCgCcsXG4gIG5leHRfcGFnZTogJ8OrwovCpMOswp3CjCDDrcKOwpjDrMKdwrTDrMKnwoAnLFxuICBwcmV2XzU6ICfDrMKdwrTDrMKgwoQgNSDDrcKOwpjDrMKdwrTDrMKnwoAnLFxuICBuZXh0XzU6ICfDq8KLwqTDrMKdwowgNSDDrcKOwpjDrMKdwrTDrMKnwoAnLFxuICBwcmV2XzM6ICfDrMKdwrTDrMKgwoQgMyDDrcKOwpjDrMKdwrTDrMKnwoAnLFxuICBuZXh0XzM6ICfDq8KLwqTDrMKdwowgMyDDrcKOwpjDrMKdwrTDrMKnwoAnLFxufTtcbiIsImltcG9ydCBDYWxlbmRhciBmcm9tICcuL2NhbGVuZGFyL2tvX0tSJztcbmltcG9ydCBEYXRlUGlja2VyIGZyb20gJy4vZGF0ZS1waWNrZXIva29fS1InO1xuaW1wb3J0IFBhZ2luYXRpb24gZnJvbSAnLi9wYWdpbmF0aW9uL2tvX0tSJztcbmltcG9ydCBUaW1lUGlja2VyIGZyb20gJy4vdGltZS1waWNrZXIva29fS1InO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGxvY2FsZTogJ2tvJyxcbiAgUGFnaW5hdGlvbixcbiAgRGF0ZVBpY2tlcixcbiAgVGltZVBpY2tlcixcbiAgQ2FsZW5kYXIsXG4gIFRhYmxlOiB7XG4gICAgZmlsdGVyVGl0bGU6ICfDrcKVwoTDrcKEwrAgw6vCqcKUw6vCicK0JyxcbiAgICBmaWx0ZXJDb25maXJtOiAnw63CmcKVw6zCncK4JyxcbiAgICBmaWx0ZXJSZXNldDogJ8OswrTCiMOqwrjCsMOtwpnClCcsXG4gICAgZW1wdHlUZXh0OiAnw6vCjcKww6zCncK0w63ChMKwIMOswpfChsOswp3CjCcsXG4gICAgc2VsZWN0QWxsOiAnw6zCoMKEw6zCssK0IMOswoTCoMOtwoPCnScsXG4gICAgc2VsZWN0SW52ZXJ0OiAnw6zChMKgw63Cg8KdIMOtwobCoMOqwrjCgCcsXG4gIH0sXG4gIE1vZGFsOiB7XG4gICAgb2tUZXh0OiAnw63CmcKVw6zCncK4JyxcbiAgICBjYW5jZWxUZXh0OiAnw6zCt8Kow6zChsKMJyxcbiAgICBqdXN0T2tUZXh0OiAnw63CmcKVw6zCncK4JyxcbiAgfSxcbiAgUG9wY29uZmlybToge1xuICAgIG9rVGV4dDogJ8OtwpnClcOswp3CuCcsXG4gICAgY2FuY2VsVGV4dDogJ8OswrfCqMOswobCjCcsXG4gIH0sXG4gIFRyYW5zZmVyOiB7XG4gICAgbm90Rm91bmRDb250ZW50OiAnw6vCjcKww6zCncK0w63ChMKwIMOswpfChsOswp3CjCcsXG4gICAgc2VhcmNoUGxhY2Vob2xkZXI6ICfDrMKXwqzDqsK4wrDDrMKXwpAgw6rCssKAw6zCg8KJw63ClcKYw6zChMK4w6zCmsKUJyxcbiAgICBpdGVtVW5pdDogJ8OqwrDCnCcsXG4gICAgaXRlbXNVbml0OiAnw6rCsMKcJyxcbiAgfSxcbiAgU2VsZWN0OiB7XG4gICAgbm90Rm91bmRDb250ZW50OiAnw6vCjcKww6zCncK0w63ChMKwIMOswpfChsOswp3CjCcsXG4gIH0sXG4gIFVwbG9hZDoge1xuICAgIHVwbG9hZGluZzogJ8OswpfChcOrwqHCnMOrwpPCnCDDrMKkwpEuLi4nLFxuICAgIHJlbW92ZUZpbGU6ICfDrcKMwozDrMKdwrwgw6zCgsKtw6zCoMKcJyxcbiAgICB1cGxvYWRFcnJvcjogJ8OswpfChcOrwqHCnMOrwpPCnCDDrMKLwqTDrcKMwqgnLFxuICAgIHByZXZpZXdGaWxlOiAnw63CjMKMw6zCncK8IMOrwq/CuMOrwqbCrMOrwrPCtMOqwrjCsCcsXG4gIH0sXG59O1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICB0b2RheTogJ0kgZGFnJyxcbiAgbm93OiAnTsODwqUnLFxuICBiYWNrVG9Ub2RheTogJ0fDg8KlIHRpbCBpIGRhZycsXG4gIG9rOiAnT2snLFxuICBjbGVhcjogJ0FubnVsbGVyJyxcbiAgbW9udGg6ICdNw4PCpW5lZCcsXG4gIHllYXI6ICfDg8KFcicsXG4gIHRpbWVTZWxlY3Q6ICdWZWxnIHRpZHNwdW5rdCcsXG4gIGRhdGVTZWxlY3Q6ICdWZWxnIGRhdG8nLFxuICBtb250aFNlbGVjdDogJ1ZlbGcgbcODwqVuZWQnLFxuICB5ZWFyU2VsZWN0OiAnVmVsZyDDg8KlcicsXG4gIGRlY2FkZVNlbGVjdDogJ1ZlbGcgw4PCpXJ0aScsXG4gIHllYXJGb3JtYXQ6ICdZWVlZJyxcbiAgZGF0ZUZvcm1hdDogJ0RELk1NLllZWVknLFxuICBkYXlGb3JtYXQ6ICdERCcsXG4gIGRhdGVUaW1lRm9ybWF0OiAnREQuTU0uWVlZWSBISDptbTpzcycsXG4gIG1vbnRoQmVmb3JlWWVhcjogdHJ1ZSxcbiAgcHJldmlvdXNNb250aDogJ0ZvcnJpZ2UgbcODwqVuZWQoUGFnZVVwKScsXG4gIG5leHRNb250aDogJ05lc3RlIG3Dg8KlbmVkIChQYWdlRG93biknLFxuICBwcmV2aW91c1llYXI6ICdGb3JyaWdlIMODwqVyIChDb250cm9sICsgbGVmdCknLFxuICBuZXh0WWVhcjogJ05lc3RlIMODwqVyIChDb250cm9sICsgcmlnaHQpJyxcbiAgcHJldmlvdXNEZWNhZGU6ICdGb3JyaWdlIHRpw4PCpXInLFxuICBuZXh0RGVjYWRlOiAnTmVzdGUgdGnDg8KlcicsXG4gIHByZXZpb3VzQ2VudHVyeTogJ0ZvcnJpZ2Ugw4PCpXJodW5kcmUnLFxuICBuZXh0Q2VudHVyeTogJ05lc3RlIMODwqVyaHVuZHJlJyxcbn07XG4iLCJjb25zdCBsb2NhbGUgPSB7XG4gIHBsYWNlaG9sZGVyOiAnVmVsZyB0aWQnLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgbG9jYWxlO1xuIiwiaW1wb3J0IENhbGVuZGFyTG9jYWxlIGZyb20gJy4uL2NhbGVuZGFyL25iX05PJztcbmltcG9ydCBUaW1lUGlja2VyTG9jYWxlIGZyb20gJy4uL3RpbWUtcGlja2VyL25iX05PJztcblxuLy8gTWVyZ2UgaW50byBhIGxvY2FsZSBvYmplY3RcbmNvbnN0IGxvY2FsZSA9IHtcbiAgbGFuZzoge1xuICAgIHBsYWNlaG9sZGVyOiAnVmVsZyBkYXRvJyxcbiAgICByYW5nZVBsYWNlaG9sZGVyOiBbJ1N0YXJ0ZGF0bycsICdTbHV0dGRhdG8nXSxcbiAgICAuLi5DYWxlbmRhckxvY2FsZSxcbiAgfSxcbiAgdGltZVBpY2tlckxvY2FsZToge1xuICAgIC4uLlRpbWVQaWNrZXJMb2NhbGUsXG4gIH0sXG59O1xuXG4vLyBBbGwgc2V0dGluZ3MgYXQ6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2Jsb2IvbWFzdGVyL2NvbXBvbmVudHMvZGF0ZS1waWNrZXIvbG9jYWxlL2V4YW1wbGUuanNvblxuXG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIC8vIE9wdGlvbnMuanN4XG4gIGl0ZW1zX3Blcl9wYWdlOiAnLyBzaWRlJyxcbiAganVtcF90bzogJ0fDg8KlIHRpbCBzaWRlJyxcbiAgcGFnZTogJycsXG5cbiAgLy8gUGFnaW5hdGlvbi5qc3hcbiAgcHJldl9wYWdlOiAnRm9ycmlnZSBzaWRlJyxcbiAgbmV4dF9wYWdlOiAnTmVzdGUgc2lkZScsXG4gIHByZXZfNTogJzUgZm9ycmlnZScsXG4gIG5leHRfNTogJzUgbmVzdGUnLFxuICBwcmV2XzM6ICczIGZvcnJpZ2UnLFxuICBuZXh0XzM6ICczIG5lc3RlJyxcbn07XG4iLCJpbXBvcnQgQ2FsZW5kYXIgZnJvbSAnLi9jYWxlbmRhci9uYl9OTyc7XG5pbXBvcnQgRGF0ZVBpY2tlciBmcm9tICcuL2RhdGUtcGlja2VyL25iX05PJztcbmltcG9ydCBQYWdpbmF0aW9uIGZyb20gJy4vcGFnaW5hdGlvbi9uYl9OTyc7XG5pbXBvcnQgVGltZVBpY2tlciBmcm9tICcuL3RpbWUtcGlja2VyL25iX05PJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBsb2NhbGU6ICduYicsXG4gIERhdGVQaWNrZXIsXG4gIFRpbWVQaWNrZXIsXG4gIENhbGVuZGFyLFxuICBQYWdpbmF0aW9uLFxuICBUYWJsZToge1xuICAgIGZpbHRlclRpdGxlOiAnRmlsdGVybWVueScsXG4gICAgZmlsdGVyQ29uZmlybTogJ09LJyxcbiAgICBmaWx0ZXJSZXNldDogJ051bGxzdGlsbCcsXG4gICAgZW1wdHlUZXh0OiAnSW5nZW4gZGF0YScsXG4gICAgc2VsZWN0QWxsOiAnVmVsZyBhbGxlJyxcbiAgICBzZWxlY3RJbnZlcnQ6ICdJbnZlcnRlciB2YWxnJyxcbiAgfSxcbiAgTW9kYWw6IHtcbiAgICBva1RleHQ6ICdPSycsXG4gICAgY2FuY2VsVGV4dDogJ0F2YnJ5dCcsXG4gICAganVzdE9rVGV4dDogJ09LJyxcbiAgfSxcbiAgUG9wY29uZmlybToge1xuICAgIG9rVGV4dDogJ09LJyxcbiAgICBjYW5jZWxUZXh0OiAnQXZicnl0JyxcbiAgfSxcbiAgVHJhbnNmZXI6IHtcbiAgICBub3RGb3VuZENvbnRlbnQ6ICdJbmdlbiB0cmVmZicsXG4gICAgc2VhcmNoUGxhY2Vob2xkZXI6ICdTw4PCuGsgaGVyJyxcbiAgICBpdGVtVW5pdDogJ2VsZW1lbnQnLFxuICAgIGl0ZW1zVW5pdDogJ2VsZW1lbnRlcicsXG4gIH0sXG4gIFNlbGVjdDoge1xuICAgIG5vdEZvdW5kQ29udGVudDogJ0luZ2VuIHRyZWZmJyxcbiAgfSxcbiAgVXBsb2FkOiB7XG4gICAgdXBsb2FkaW5nOiAnTGFzdGVyIG9wcC4uLicsXG4gICAgcmVtb3ZlRmlsZTogJ0ZqZXJuIGZpbCcsXG4gICAgdXBsb2FkRXJyb3I6ICdGZWlsIHZlZCBvcHBsYXN0bmluZycsXG4gICAgcHJldmlld0ZpbGU6ICdGb3Jow4PCpW5kc3Zpc25pbmcnLFxuICB9LFxufTtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgdG9kYXk6ICdWYW5kYWFnJyxcbiAgbm93OiAnTnUnLFxuICBiYWNrVG9Ub2RheTogJ1RlcnVnIG5hYXIgdmFuZGFhZycsXG4gIG9rOiAnT2snLFxuICBjbGVhcjogJ1Jlc2V0JyxcbiAgbW9udGg6ICdNYWFuZCcsXG4gIHllYXI6ICdKYWFyJyxcbiAgdGltZVNlbGVjdDogJ1NlbGVjdGVlciB0aWpkJyxcbiAgZGF0ZVNlbGVjdDogJ1NlbGVjdGVlciBkYXR1bScsXG4gIG1vbnRoU2VsZWN0OiAnS2llcyBlZW4gbWFhbmQnLFxuICB5ZWFyU2VsZWN0OiAnS2llcyBlZW4gamFhcicsXG4gIGRlY2FkZVNlbGVjdDogJ0tpZXMgZWVuIGRlY2Vubml1bScsXG4gIHllYXJGb3JtYXQ6ICdZWVlZJyxcbiAgZGF0ZUZvcm1hdDogJ0QtTS1ZWVlZJyxcbiAgZGF5Rm9ybWF0OiAnRCcsXG4gIGRhdGVUaW1lRm9ybWF0OiAnRC1NLVlZWVkgSEg6bW06c3MnLFxuICBtb250aEJlZm9yZVllYXI6IHRydWUsXG4gIHByZXZpb3VzTW9udGg6ICdWb3JpZ2UgbWFhbmQgKFBhZ2VVcCknLFxuICBuZXh0TW9udGg6ICdWb2xnZW5kZSBtYWFuZCAoUGFnZURvd24pJyxcbiAgcHJldmlvdXNZZWFyOiAnVm9yaWcgamFhciAoQ29udHJvbCArIGxlZnQpJyxcbiAgbmV4dFllYXI6ICdWb2xnZW5kIGphYXIgKENvbnRyb2wgKyByaWdodCknLFxuICBwcmV2aW91c0RlY2FkZTogJ1ZvcmlnIGRlY2Vubml1bScsXG4gIG5leHREZWNhZGU6ICdWb2xnZW5kIGRlY2Vubml1bScsXG4gIHByZXZpb3VzQ2VudHVyeTogJ1ZvcmlnZSBlZXV3JyxcbiAgbmV4dENlbnR1cnk6ICdWb2xnZW5kZSBlZXV3Jyxcbn07XG4iLCJjb25zdCBsb2NhbGUgPSB7XG4gIHBsYWNlaG9sZGVyOiAnU2VsZWN0ZWVyIHRpamQnLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgbG9jYWxlO1xuIiwiaW1wb3J0IENhbGVuZGFyTG9jYWxlIGZyb20gJy4uL2NhbGVuZGFyL25sX0JFJztcbmltcG9ydCBUaW1lUGlja2VyTG9jYWxlIGZyb20gJy4uL3RpbWUtcGlja2VyL25sX0JFJztcblxuLy8gTWVyZ2UgaW50byBhIGxvY2FsZSBvYmplY3RcbmNvbnN0IGxvY2FsZSA9IHtcbiAgbGFuZzoge1xuICAgIHBsYWNlaG9sZGVyOiAnU2VsZWN0ZWVyIGRhdHVtJyxcbiAgICByYW5nZVBsYWNlaG9sZGVyOiBbJ0JlZ2luIGRhdHVtJywgJ0VpbmQgZGF0dW0nXSxcbiAgICAuLi5DYWxlbmRhckxvY2FsZSxcbiAgfSxcbiAgdGltZVBpY2tlckxvY2FsZToge1xuICAgIC4uLlRpbWVQaWNrZXJMb2NhbGUsXG4gIH0sXG59O1xuXG4vLyBBbGwgc2V0dGluZ3MgYXQ6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy80MjRcblxuZXhwb3J0IGRlZmF1bHQgbG9jYWxlO1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICAvLyBPcHRpb25zLmpzeFxuICBpdGVtc19wZXJfcGFnZTogJy8gcGFnaW5hJyxcbiAganVtcF90bzogJ0dhIG5hYXInLFxuICBqdW1wX3RvX2NvbmZpcm06ICdiZXZlc3RpZ2VuJyxcbiAgcGFnZTogJycsXG5cbiAgLy8gUGFnaW5hdGlvbi5qc3hcbiAgcHJldl9wYWdlOiAnVm9yaWdlIHBhZ2luYScsXG4gIG5leHRfcGFnZTogJ1ZvbGdlbmRlIHBhZ2luYScsXG4gIHByZXZfNTogJ1ZvcmlnZSA1IHBhZ2luYVxcJ3MnLFxuICBuZXh0XzU6ICdWb2xnZW5kZSA1IHBhZ2luYVxcJ3MnLFxuICBwcmV2XzM6ICdWb3JpZ2UgMyBwYWdpbmFcXCdzJyxcbiAgbmV4dF8zOiAnVm9sZ2VuZGUgMyBwYWdpbmFcXCdzJyxcbn07XG4iLCJpbXBvcnQgQ2FsZW5kYXIgZnJvbSAnLi9jYWxlbmRhci9ubF9CRSc7XG5pbXBvcnQgRGF0ZVBpY2tlciBmcm9tICcuL2RhdGUtcGlja2VyL25sX0JFJztcbmltcG9ydCBQYWdpbmF0aW9uIGZyb20gJy4vcGFnaW5hdGlvbi9ubF9CRSc7XG5pbXBvcnQgVGltZVBpY2tlciBmcm9tICcuL3RpbWUtcGlja2VyL25sX0JFJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBsb2NhbGU6ICdubC1iZScsXG4gIFBhZ2luYXRpb24sXG4gIERhdGVQaWNrZXIsXG4gIFRpbWVQaWNrZXIsXG4gIENhbGVuZGFyLFxuICBUYWJsZToge1xuICAgIGZpbHRlclRpdGxlOiAnRmlsdGVyTWVudScsXG4gICAgZmlsdGVyQ29uZmlybTogJ09LJyxcbiAgICBmaWx0ZXJSZXNldDogJ1Jlc2V0JyxcbiAgICBlbXB0eVRleHQ6ICdHZWVuIGdlZ2V2ZW5zJyxcbiAgICBzZWxlY3RBbGw6ICdTZWxlY3RlZXIgaHVpZGlnZSBwYWdpbmEnLFxuICAgIHNlbGVjdEludmVydDogJ1NlbGVjdGVlciBodWlkaWdlIHBhZ2luYScsXG4gIH0sXG4gIE1vZGFsOiB7XG4gICAgb2tUZXh0OiAnT0snLFxuICAgIGNhbmNlbFRleHQ6ICdBbm51bGVlcicsXG4gICAganVzdE9rVGV4dDogJ09LJyxcbiAgfSxcbiAgUG9wY29uZmlybToge1xuICAgIG9rVGV4dDogJ09LJyxcbiAgICBjYW5jZWxUZXh0OiAnQW5udWxlZXInLFxuICB9LFxuICBUcmFuc2Zlcjoge1xuICAgIG5vdEZvdW5kQ29udGVudDogJ05pZXQgZ2V2b25kZW4nLFxuICAgIHNlYXJjaFBsYWNlaG9sZGVyOiAnWm9layBoaWVyJyxcbiAgICBpdGVtVW5pdDogJ2l0ZW0nLFxuICAgIGl0ZW1zVW5pdDogJ2l0ZW1zJyxcbiAgfSxcbiAgU2VsZWN0OiB7XG4gICAgbm90Rm91bmRDb250ZW50OiAnTmlldCBnZXZvbmRlbicsXG4gIH0sXG4gIFVwbG9hZDoge1xuICAgIHVwbG9hZGluZzogJ1VwbG9hZGVuLi4uJyxcbiAgICByZW1vdmVGaWxlOiAnQmVzdGFuZCB2ZXJ3aWpkZXJlbicsXG4gICAgdXBsb2FkRXJyb3I6ICdVcGxvYWQgZm91dCcsXG4gICAgcHJldmlld0ZpbGU6ICdQcmV2aWV3IGJlc3RhbmQnLFxuICB9LFxufTtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgdG9kYXk6ICdWYW5kYWFnJyxcbiAgbm93OiAnTnUnLFxuICBiYWNrVG9Ub2RheTogJ1RlcnVnIG5hYXIgdmFuZGFhZycsXG4gIG9rOiAnT2snLFxuICBjbGVhcjogJ1Jlc2V0JyxcbiAgbW9udGg6ICdNYWFuZCcsXG4gIHllYXI6ICdKYWFyJyxcbiAgdGltZVNlbGVjdDogJ1NlbGVjdGVlciB0aWpkJyxcbiAgZGF0ZVNlbGVjdDogJ1NlbGVjdGVlciBkYXR1bScsXG4gIG1vbnRoU2VsZWN0OiAnS2llcyBlZW4gbWFhbmQnLFxuICB5ZWFyU2VsZWN0OiAnS2llcyBlZW4gamFhcicsXG4gIGRlY2FkZVNlbGVjdDogJ0tpZXMgZWVuIGRlY2Vubml1bScsXG4gIHllYXJGb3JtYXQ6ICdZWVlZJyxcbiAgZGF0ZUZvcm1hdDogJ0QtTS1ZWVlZJyxcbiAgZGF5Rm9ybWF0OiAnRCcsXG4gIGRhdGVUaW1lRm9ybWF0OiAnRC1NLVlZWVkgSEg6bW06c3MnLFxuICBtb250aEJlZm9yZVllYXI6IHRydWUsXG4gIHByZXZpb3VzTW9udGg6ICdWb3JpZ2UgbWFhbmQgKFBhZ2VVcCknLFxuICBuZXh0TW9udGg6ICdWb2xnZW5kZSBtYWFuZCAoUGFnZURvd24pJyxcbiAgcHJldmlvdXNZZWFyOiAnVm9yaWcgamFhciAoQ29udHJvbCArIGxlZnQpJyxcbiAgbmV4dFllYXI6ICdWb2xnZW5kIGphYXIgKENvbnRyb2wgKyByaWdodCknLFxuICBwcmV2aW91c0RlY2FkZTogJ1ZvcmlnIGRlY2Vubml1bScsXG4gIG5leHREZWNhZGU6ICdWb2xnZW5kIGRlY2Vubml1bScsXG4gIHByZXZpb3VzQ2VudHVyeTogJ1ZvcmlnZSBlZXV3JyxcbiAgbmV4dENlbnR1cnk6ICdWb2xnZW5kZSBlZXV3Jyxcbn07XG4iLCJjb25zdCBsb2NhbGUgPSB7XG4gIHBsYWNlaG9sZGVyOiAnU2VsZWN0ZWVyIHRpamQnLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgbG9jYWxlO1xuIiwiaW1wb3J0IENhbGVuZGFyTG9jYWxlIGZyb20gJy4uL2NhbGVuZGFyL25sX05MJztcbmltcG9ydCBUaW1lUGlja2VyTG9jYWxlIGZyb20gJy4uL3RpbWUtcGlja2VyL25sX05MJztcblxuLy8gTWVyZ2UgaW50byBhIGxvY2FsZSBvYmplY3RcbmNvbnN0IGxvY2FsZSA9IHtcbiAgbGFuZzoge1xuICAgIHBsYWNlaG9sZGVyOiAnU2VsZWN0ZWVyIGRhdHVtJyxcbiAgICByYW5nZVBsYWNlaG9sZGVyOiBbJ0JlZ2luIGRhdHVtJywgJ0VpbmQgZGF0dW0nXSxcbiAgICAuLi5DYWxlbmRhckxvY2FsZSxcbiAgfSxcbiAgdGltZVBpY2tlckxvY2FsZToge1xuICAgIC4uLlRpbWVQaWNrZXJMb2NhbGUsXG4gIH0sXG59O1xuXG4vLyBBbGwgc2V0dGluZ3MgYXQ6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy80MjRcblxuZXhwb3J0IGRlZmF1bHQgbG9jYWxlO1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICAvLyBPcHRpb25zLmpzeFxuICBpdGVtc19wZXJfcGFnZTogJy8gcGFnaW5hJyxcbiAganVtcF90bzogJ0dhIG5hYXInLFxuICBqdW1wX3RvX2NvbmZpcm06ICdiZXZlc3RpZ2VuJyxcbiAgcGFnZTogJycsXG5cbiAgLy8gUGFnaW5hdGlvbi5qc3hcbiAgcHJldl9wYWdlOiAnVm9yaWdlIHBhZ2luYScsXG4gIG5leHRfcGFnZTogJ1ZvbGdlbmRlIHBhZ2luYScsXG4gIHByZXZfNTogJ1ZvcmlnZSA1IHBhZ2luYVxcJ3MnLFxuICBuZXh0XzU6ICdWb2xnZW5kZSA1IHBhZ2luYVxcJ3MnLFxuICBwcmV2XzM6ICdWb3JpZ2UgMyBwYWdpbmFcXCdzJyxcbiAgbmV4dF8zOiAnVm9sZ2VuZGUgMyBwYWdpbmFcXCdzJyxcbn07XG4iLCJpbXBvcnQgQ2FsZW5kYXIgZnJvbSAnLi9jYWxlbmRhci9ubF9OTCc7XG5pbXBvcnQgRGF0ZVBpY2tlciBmcm9tICcuL2RhdGUtcGlja2VyL25sX05MJztcbmltcG9ydCBQYWdpbmF0aW9uIGZyb20gJy4vcGFnaW5hdGlvbi9ubF9OTCc7XG5pbXBvcnQgVGltZVBpY2tlciBmcm9tICcuL3RpbWUtcGlja2VyL25sX05MJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBsb2NhbGU6ICdubCcsXG4gIFBhZ2luYXRpb24sXG4gIERhdGVQaWNrZXIsXG4gIFRpbWVQaWNrZXIsXG4gIENhbGVuZGFyLFxuICBUYWJsZToge1xuICAgIGZpbHRlclRpdGxlOiAnRmlsdGVyZW4nLFxuICAgIGZpbHRlckNvbmZpcm06ICdPSycsXG4gICAgZmlsdGVyUmVzZXQ6ICdSZXNldCcsXG4gICAgZW1wdHlUZXh0OiAnR2VlbiBnZWdldmVucycsXG4gICAgc2VsZWN0QWxsOiAnU2VsZWN0ZWVyIGh1aWRpZ2UgcGFnaW5hJyxcbiAgICBzZWxlY3RJbnZlcnQ6ICdEZXNlbGVjdGVlciBodWlkaWdlIHBhZ2luYScsXG4gIH0sXG4gIE1vZGFsOiB7XG4gICAgb2tUZXh0OiAnT0snLFxuICAgIGNhbmNlbFRleHQ6ICdBbm51bGVyZW4nLFxuICAgIGp1c3RPa1RleHQ6ICdPSycsXG4gIH0sXG4gIFBvcGNvbmZpcm06IHtcbiAgICBva1RleHQ6ICdPSycsXG4gICAgY2FuY2VsVGV4dDogJ0FubnVsZXJlbicsXG4gIH0sXG4gIFRyYW5zZmVyOiB7XG4gICAgbm90Rm91bmRDb250ZW50OiAnTmlldCBnZXZvbmRlbicsXG4gICAgc2VhcmNoUGxhY2Vob2xkZXI6ICdab2VrZW4nLFxuICAgIGl0ZW1Vbml0OiAnaXRlbScsXG4gICAgaXRlbXNVbml0OiAnaXRlbXMnLFxuICB9LFxuICBTZWxlY3Q6IHtcbiAgICBub3RGb3VuZENvbnRlbnQ6ICdOaWV0IGdldm9uZGVuJyxcbiAgfSxcbiAgVXBsb2FkOiB7XG4gICAgdXBsb2FkaW5nOiAnVXBsb2FkZW4uLi4nLFxuICAgIHJlbW92ZUZpbGU6ICdWZXJ3aWpkZXIgYmVzdGFuZCcsXG4gICAgdXBsb2FkRXJyb3I6ICdGb3V0IHRpamRlbnMgdXBsb2FkZW4nLFxuICAgIHByZXZpZXdGaWxlOiAnQmVraWprIGJlc3RhbmQnLFxuICB9LFxufTtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgdG9kYXk6ICdEemlzaWFqJyxcbiAgbm93OiAnVGVyYXonLFxuICBiYWNrVG9Ub2RheTogJ1VzdGF3IGR6aXNpYWonLFxuICBvazogJ09rJyxcbiAgY2xlYXI6ICdXeWN6ecOFwpvDhMKHJyxcbiAgbW9udGg6ICdNaWVzacOEwoVjJyxcbiAgeWVhcjogJ1JvaycsXG4gIHRpbWVTZWxlY3Q6ICdVc3RhdyBjemFzJyxcbiAgZGF0ZVNlbGVjdDogJ1VzdGF3IGRhdMOEwpknLFxuICBtb250aFNlbGVjdDogJ1d5YmllcnogbWllc2nDhMKFYycsXG4gIHllYXJTZWxlY3Q6ICdXeWJpZXJ6IHJvaycsXG4gIGRlY2FkZVNlbGVjdDogJ1d5YmllcnogZGVrYWTDhMKZJyxcbiAgeWVhckZvcm1hdDogJ1lZWVknLFxuICBkYXRlRm9ybWF0OiAnRC9NL1lZWVknLFxuICBkYXlGb3JtYXQ6ICdEJyxcbiAgZGF0ZVRpbWVGb3JtYXQ6ICdEL00vWVlZWSBISDptbTpzcycsXG4gIG1vbnRoQmVmb3JlWWVhcjogdHJ1ZSxcbiAgcHJldmlvdXNNb250aDogJ1BvcHJ6ZWRuaSBtaWVzacOEwoVjIChQYWdlVXApJyxcbiAgbmV4dE1vbnRoOiAnTmFzdMOEwplwbnkgbWllc2nDhMKFYyAoUGFnZURvd24pJyxcbiAgcHJldmlvdXNZZWFyOiAnT3N0YXRuaSByb2sgKEN0cmwgKyBsZWZ0KScsXG4gIG5leHRZZWFyOiAnTmFzdMOEwplwbnkgcm9rIChDdHJsICsgcmlnaHQpJyxcbiAgcHJldmlvdXNEZWNhZGU6ICdPc3RhdG5pYSBkZWthZGEnLFxuICBuZXh0RGVjYWRlOiAnTmFzdMOEwplwbmEgZGVrYWRhJyxcbiAgcHJldmlvdXNDZW50dXJ5OiAnT3N0YXRuaSB3aWVrJyxcbiAgbmV4dENlbnR1cnk6ICdOYXN0w4TCmXBueSB3aWVrJyxcbn07XG4iLCJjb25zdCBsb2NhbGUgPSB7XG4gIHBsYWNlaG9sZGVyOiAnV3liaWVyeiBnb2R6aW7DhMKZJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTtcbiIsImltcG9ydCBDYWxlbmRhckxvY2FsZSBmcm9tICcuLi9jYWxlbmRhci9wbF9QTCc7XG5pbXBvcnQgVGltZVBpY2tlckxvY2FsZSBmcm9tICcuLi90aW1lLXBpY2tlci9wbF9QTCc7XG5cbi8vIE1lcmdlIGludG8gYSBsb2NhbGUgb2JqZWN0XG5jb25zdCBsb2NhbGUgPSB7XG4gIGxhbmc6IHtcbiAgICBwbGFjZWhvbGRlcjogJ1d5YmllcnogZGF0w4TCmScsXG4gICAgcmFuZ2VQbGFjZWhvbGRlcjogWydEYXRhIHBvY3rDhMKFdGtvd2EnLCAnRGF0YSBrb8OFwoRjb3dhJ10sXG4gICAgLi4uQ2FsZW5kYXJMb2NhbGUsXG4gIH0sXG4gIHRpbWVQaWNrZXJMb2NhbGU6IHtcbiAgICAuLi5UaW1lUGlja2VyTG9jYWxlLFxuICB9LFxufTtcblxuLy8gQWxsIHNldHRpbmdzIGF0OlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9ibG9iL21hc3Rlci9jb21wb25lbnRzL2RhdGUtcGlja2VyL2xvY2FsZS9leGFtcGxlLmpzb25cblxuZXhwb3J0IGRlZmF1bHQgbG9jYWxlO1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICAvLyBPcHRpb25zLmpzeFxuICBpdGVtc19wZXJfcGFnZTogJy8gc3Ryb27DhMKZJyxcbiAganVtcF90bzogJ0lkw4XCuiBkbycsXG4gIGp1bXBfdG9fY29uZmlybTogJ3BvdHdpZXJkemHDhMKHJyxcbiAgcGFnZTogJycsXG5cbiAgLy8gUGFnaW5hdGlvbi5qc3hcbiAgcHJldl9wYWdlOiAnUG9wcnplZG5pYSBzdHJvbmEnLFxuICBuZXh0X3BhZ2U6ICdOYXN0w4TCmXBuYSBzdHJvbmEnLFxuICBwcmV2XzU6ICdQb3ByemVkbmllIDUgc3Ryb24nLFxuICBuZXh0XzU6ICdOYXN0w4TCmXBuZSA1IHN0cm9uJyxcbiAgcHJldl8zOiAnUG9wcnplZG5pZSAzIHN0cm9ueScsXG4gIG5leHRfMzogJ05hc3TDhMKZcG5lIDMgc3Ryb255Jyxcbn07XG4iLCJpbXBvcnQgQ2FsZW5kYXIgZnJvbSAnLi9jYWxlbmRhci9wbF9QTCc7XG5pbXBvcnQgRGF0ZVBpY2tlciBmcm9tICcuL2RhdGUtcGlja2VyL3BsX1BMJztcbmltcG9ydCBQYWdpbmF0aW9uIGZyb20gJy4vcGFnaW5hdGlvbi9wbF9QTCc7XG5pbXBvcnQgVGltZVBpY2tlciBmcm9tICcuL3RpbWUtcGlja2VyL3BsX1BMJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBsb2NhbGU6ICdwbCcsXG4gIFBhZ2luYXRpb24sXG4gIERhdGVQaWNrZXIsXG4gIFRpbWVQaWNrZXIsXG4gIENhbGVuZGFyLFxuICBUYWJsZToge1xuICAgIGZpbHRlclRpdGxlOiAnTWVudSBmaWx0cmEnLFxuICAgIGZpbHRlckNvbmZpcm06ICdPSycsXG4gICAgZmlsdGVyUmVzZXQ6ICdXeWN6ecOFwpvDhMKHJyxcbiAgICBlbXB0eVRleHQ6ICdCcmFrIGRhbnljaCcsXG4gICAgc2VsZWN0QWxsOiAnWmF6bmFjeiBiaWXDhcK8w4TChWPDhMKFIHN0cm9uw4TCmScsXG4gICAgc2VsZWN0SW52ZXJ0OiAnT2R3csODwrPDhMKHIHphem5hY3plbmllJyxcbiAgfSxcbiAgTW9kYWw6IHtcbiAgICBva1RleHQ6ICdPSycsXG4gICAgY2FuY2VsVGV4dDogJ0FudWx1aicsXG4gICAganVzdE9rVGV4dDogJ09LJyxcbiAgfSxcbiAgUG9wY29uZmlybToge1xuICAgIG9rVGV4dDogJ09LJyxcbiAgICBjYW5jZWxUZXh0OiAnQW51bHVqJyxcbiAgfSxcbiAgVHJhbnNmZXI6IHtcbiAgICBub3RGb3VuZENvbnRlbnQ6ICdOaWUgem5hbGV6aW9ubycsXG4gICAgc2VhcmNoUGxhY2Vob2xkZXI6ICdTenVrYWonLFxuICAgIGl0ZW1Vbml0OiAnb2JpZWt0JyxcbiAgICBpdGVtc1VuaXQ6ICdvYmlla3R5JyxcbiAgfSxcbiAgU2VsZWN0OiB7XG4gICAgbm90Rm91bmRDb250ZW50OiAnTmllIHpuYWxlemlvbm8nLFxuICB9LFxuICBVcGxvYWQ6IHtcbiAgICB1cGxvYWRpbmc6ICdXeXN5w4XCgmFuaWUuLi4nLFxuICAgIHJlbW92ZUZpbGU6ICdVc3XDhcKEIHBsaWsnLFxuICAgIHVwbG9hZEVycm9yOiAnQsOFwoLDhMKFZCB3eXN5w4XCgmFuaWEnLFxuICAgIHByZXZpZXdGaWxlOiAnUG9kZWpyenlqIHBsaWsnLFxuICB9LFxufTtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgdG9kYXk6ICdIb2plJyxcbiAgbm93OiAnQWdvcmEnLFxuICBiYWNrVG9Ub2RheTogJ1ZvbHRhciBwYXJhIGhvamUnLFxuICBvazogJ09rJyxcbiAgY2xlYXI6ICdMaW1wYXInLFxuICBtb250aDogJ03Dg8KqcycsXG4gIHllYXI6ICdBbm8nLFxuICB0aW1lU2VsZWN0OiAnU2VsZWNpb25hciB0ZW1wbycsXG4gIGRhdGVTZWxlY3Q6ICdTZWxlY2lvbmFyIGRhdGEnLFxuICBtb250aFNlbGVjdDogJ0VzY29saGVyIG3Dg8KqcycsXG4gIHllYXJTZWxlY3Q6ICdFc2NvbGhlciBhbm8nLFxuICBkZWNhZGVTZWxlY3Q6ICdFc2NvbGhlciBkw4PCqWNhZGEnLFxuICB5ZWFyRm9ybWF0OiAnWVlZWScsXG4gIGRhdGVGb3JtYXQ6ICdEL00vWVlZWScsXG4gIGRheUZvcm1hdDogJ0QnLFxuICBkYXRlVGltZUZvcm1hdDogJ0QvTS9ZWVlZIEhIOm1tOnNzJyxcbiAgbW9udGhCZWZvcmVZZWFyOiBmYWxzZSxcbiAgcHJldmlvdXNNb250aDogJ03Dg8KqcyBhbnRlcmlvciAoUGFnZVVwKScsXG4gIG5leHRNb250aDogJ1Byw4PCs3hpbW8gbcODwqpzIChQYWdlRG93biknLFxuICBwcmV2aW91c1llYXI6ICdBbm8gYW50ZXJpb3IgKENvbnRyb2wgKyBlc3F1ZXJkYSknLFxuICBuZXh0WWVhcjogJ1Byw4PCs3hpbW8gYW5vIChDb250cm9sICsgZGlyZWl0YSknLFxuICBwcmV2aW91c0RlY2FkZTogJ0TDg8KpY2FkYSBhbnRlcmlvcicsXG4gIG5leHREZWNhZGU6ICdQcsODwrN4aW1hIGTDg8KpY2FkYScsXG4gIHByZXZpb3VzQ2VudHVyeTogJ1PDg8KpY3VsbyBhbnRlcmlvcicsXG4gIG5leHRDZW50dXJ5OiAnUHLDg8KzeGltbyBzw4PCqWN1bG8nLFxufTtcbiIsImNvbnN0IGxvY2FsZSA9IHtcbiAgcGxhY2Vob2xkZXI6ICdIb3JhJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTtcbiIsImltcG9ydCBDYWxlbmRhckxvY2FsZSBmcm9tICcuLi9jYWxlbmRhci9wdF9CUic7XG5pbXBvcnQgVGltZVBpY2tlckxvY2FsZSBmcm9tICcuLi90aW1lLXBpY2tlci9wdF9CUic7XG5cbi8vIE1lcmdlIGludG8gYSBsb2NhbGUgb2JqZWN0XG5jb25zdCBsb2NhbGUgPSB7XG4gIGxhbmc6IHtcbiAgICBwbGFjZWhvbGRlcjogJ1NlbGVjaW9uYXIgZGF0YScsXG4gICAgcmFuZ2VQbGFjZWhvbGRlcjogWydEYXRhIGRlIGluw4PCrWNpbycsICdEYXRhIGRlIGZpbSddLFxuICAgIC4uLkNhbGVuZGFyTG9jYWxlLFxuICB9LFxuICB0aW1lUGlja2VyTG9jYWxlOiB7XG4gICAgLi4uVGltZVBpY2tlckxvY2FsZSxcbiAgfSxcbn07XG5cbi8vIEFsbCBzZXR0aW5ncyBhdDpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vYmxvYi9tYXN0ZXIvY29tcG9uZW50cy9kYXRlLXBpY2tlci9sb2NhbGUvZXhhbXBsZS5qc29uXG5cbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgLy8gT3B0aW9ucy5qc3hcbiAgaXRlbXNfcGVyX3BhZ2U6ICcvIHDDg8KhZ2luYXMnLFxuICBqdW1wX3RvOiAnVsODwqEgYXTDg8KpJyxcbiAganVtcF90b19jb25maXJtOiAnY29uZmlybWUnLFxuICBwYWdlOiAnJyxcblxuICAvLyBQYWdpbmF0aW9uLmpzeFxuICBwcmV2X3BhZ2U6ICdQw4PCoWdpbmEgYW50ZXJpb3InLFxuICBuZXh0X3BhZ2U6ICdQcsODwrN4aW1hIHDDg8KhZ2luYScsXG4gIHByZXZfNTogJzUgcMODwqFnaW5hcyBhbnRlcmlvcmVzJyxcbiAgbmV4dF81OiAnNSBwcsODwrN4aW1hcyBww4PCoWdpbmFzJyxcbiAgcHJldl8zOiAnMyBww4PCoWdpbmFzIGFudGVyaW9yZXMnLFxuICBuZXh0XzM6ICczIHByw4PCs3hpbWFzIHDDg8KhZ2luYXMnLFxufTtcbiIsImltcG9ydCBDYWxlbmRhciBmcm9tICcuL2NhbGVuZGFyL3B0X0JSJztcbmltcG9ydCBEYXRlUGlja2VyIGZyb20gJy4vZGF0ZS1waWNrZXIvcHRfQlInO1xuaW1wb3J0IFBhZ2luYXRpb24gZnJvbSAnLi9wYWdpbmF0aW9uL3B0X0JSJztcbmltcG9ydCBUaW1lUGlja2VyIGZyb20gJy4vdGltZS1waWNrZXIvcHRfQlInO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGxvY2FsZTogJ3B0LWJyJyxcbiAgUGFnaW5hdGlvbixcbiAgRGF0ZVBpY2tlcixcbiAgVGltZVBpY2tlcixcbiAgQ2FsZW5kYXIsXG4gIFRhYmxlOiB7XG4gICAgZmlsdGVyVGl0bGU6ICdGaWx0cm8nLFxuICAgIGZpbHRlckNvbmZpcm06ICdPSycsXG4gICAgZmlsdGVyUmVzZXQ6ICdSZXNldGFyJyxcbiAgICBlbXB0eVRleHQ6ICdOw4PCo28gaMODwqEgZGFkb3MnLFxuICAgIHNlbGVjdEFsbDogJ1NlbGVjaW9uYXIgcMODwqFnaW5hIGF0dWFsJyxcbiAgICBzZWxlY3RJbnZlcnQ6ICdJbnZlcnRlciBzZWxlw4PCp8ODwqNvJyxcbiAgfSxcbiAgTW9kYWw6IHtcbiAgICBva1RleHQ6ICdPSycsXG4gICAgY2FuY2VsVGV4dDogJ0NhbmNlbGFyJyxcbiAgICBqdXN0T2tUZXh0OiAnT0snLFxuICB9LFxuICBQb3Bjb25maXJtOiB7XG4gICAgb2tUZXh0OiAnT0snLFxuICAgIGNhbmNlbFRleHQ6ICdDYW5jZWxhcicsXG4gIH0sXG4gIFRyYW5zZmVyOiB7XG4gICAgbm90Rm91bmRDb250ZW50OiAnTsODwqNvIGVuY29udHJhZG8nLFxuICAgIHNlYXJjaFBsYWNlaG9sZGVyOiAnUHJvY3VyYXInLFxuICAgIGl0ZW1Vbml0OiAnaXRlbScsXG4gICAgaXRlbXNVbml0OiAnaXRlbXMnLFxuICB9LFxuICBTZWxlY3Q6IHtcbiAgICBub3RGb3VuZENvbnRlbnQ6ICdOw4PCo28gZW5jb250cmFkbycsXG4gIH0sXG4gIFVwbG9hZDoge1xuICAgIHVwbG9hZGluZzogJ0VudmlhbmRvLi4uJyxcbiAgICByZW1vdmVGaWxlOiAnUmVtb3ZlciBhcnF1aXZvJyxcbiAgICB1cGxvYWRFcnJvcjogJ0Vycm8gbm8gZW52aW8nLFxuICAgIHByZXZpZXdGaWxlOiAnVmlzdWFsaXphciBhcnF1aXZvJyxcbiAgfSxcbn07XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIHRvZGF5OiAnSG9qZScsXG4gIG5vdzogJ0Fnb3JhJyxcbiAgYmFja1RvVG9kYXk6ICdIb2plJyxcbiAgb2s6ICdPaycsXG4gIGNsZWFyOiAnTGltcGFyJyxcbiAgbW9udGg6ICdNw4PCqnMnLFxuICB5ZWFyOiAnQW5vJyxcbiAgdGltZVNlbGVjdDogJ1NlbGVjaW9uYXIgaG9yYScsXG4gIGRhdGVTZWxlY3Q6ICdTZWxlY2lvbmFyIGRhdGEnLFxuICBtb250aFNlbGVjdDogJ1NlbGVjaW9uYXIgbcODwqpzJyxcbiAgeWVhclNlbGVjdDogJ1NlbGVjaW9uYXIgYW5vJyxcbiAgZGVjYWRlU2VsZWN0OiAnU2VsZWNpb25hciBkw4PCqWNhZGEnLFxuICB5ZWFyRm9ybWF0OiAnWVlZWScsXG4gIGRhdGVGb3JtYXQ6ICdEL00vWVlZWScsXG4gIGRheUZvcm1hdDogJ0QnLFxuICBkYXRlVGltZUZvcm1hdDogJ0QvTS9ZWVlZIEhIOm1tOnNzJyxcbiAgbW9udGhCZWZvcmVZZWFyOiB0cnVlLFxuICBwcmV2aW91c01vbnRoOiAnTcODwqpzIGFudGVyaW9yIChQYWdlVXApJyxcbiAgbmV4dE1vbnRoOiAnTcODwqpzIHNlZ3VpbnRlIChQYWdlRG93biknLFxuICBwcmV2aW91c1llYXI6ICdBbm8gYW50ZXJpb3IgKENvbnRyb2wgKyBsZWZ0KScsXG4gIG5leHRZZWFyOiAnQW5vIHNlZ3VpbnRlIChDb250cm9sICsgcmlnaHQpJyxcbiAgcHJldmlvdXNEZWNhZGU6ICdEw4PCqWNhZGEgYW50ZXJpb3InLFxuICBuZXh0RGVjYWRlOiAnRMODwqljYWRhIHNlZ3VpbnRlJyxcbiAgcHJldmlvdXNDZW50dXJ5OiAnU8ODwqljdWxvIGFudGVyaW9yJyxcbiAgbmV4dENlbnR1cnk6ICdTw4PCqWN1bG8gc2VndWludGUnLFxufTtcbiIsImNvbnN0IGxvY2FsZSA9IHtcbiAgcGxhY2Vob2xkZXI6ICdIb3JhJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTtcbiIsImltcG9ydCBDYWxlbmRhckxvY2FsZSBmcm9tICcuLi9jYWxlbmRhci9wdF9QVCc7XG5pbXBvcnQgVGltZVBpY2tlckxvY2FsZSBmcm9tICcuLi90aW1lLXBpY2tlci9wdF9QVCc7XG5cbi8vIE1lcmdlIGludG8gYSBsb2NhbGUgb2JqZWN0XG5jb25zdCBsb2NhbGUgPSB7XG4gIGxhbmc6IHtcbiAgICAuLi5DYWxlbmRhckxvY2FsZSxcbiAgICBwbGFjZWhvbGRlcjogJ0RhdGEnLFxuICAgIHJhbmdlUGxhY2Vob2xkZXI6IFsnRGF0YSBpbmljaWFsJywgJ0RhdGEgZmluYWwnXSxcbiAgICB0b2RheTogJ0hvamUnLFxuICAgIG5vdzogJ0Fnb3JhJyxcbiAgICBiYWNrVG9Ub2RheTogJ0hvamUnLFxuICAgIG9rOiAnT2snLFxuICAgIGNsZWFyOiAnTGltcGFyJyxcbiAgICBtb250aDogJ03Dg8KqcycsXG4gICAgeWVhcjogJ0FubycsXG4gICAgdGltZVNlbGVjdDogJ0hvcmEnLFxuICAgIGRhdGVTZWxlY3Q6ICdTZWxlY2lvbmFyIGRhdGEnLFxuICAgIG1vbnRoU2VsZWN0OiAnU2VsZWNpb25hciBtw4PCqnMnLFxuICAgIHllYXJTZWxlY3Q6ICdTZWxlY2lvbmFyIGFubycsXG4gICAgZGVjYWRlU2VsZWN0OiAnU2VsZWNpb25hciBkw4PCqWNhZGEnLFxuICAgIHllYXJGb3JtYXQ6ICdZWVlZJyxcbiAgICBkYXRlRm9ybWF0OiAnRC9NL1lZWVknLFxuICAgIGRheUZvcm1hdDogJ0QnLFxuICAgIGRhdGVUaW1lRm9ybWF0OiAnRC9NL1lZWVkgSEg6bW06c3MnLFxuICAgIG1vbnRoRm9ybWF0OiAnTU1NTScsXG4gICAgbW9udGhCZWZvcmVZZWFyOiBmYWxzZSxcbiAgICBwcmV2aW91c01vbnRoOiAnTcODwqpzIGFudGVyaW9yIChQYWdlVXApJyxcbiAgICBuZXh0TW9udGg6ICdNw4PCqnMgc2VndWludGUgKFBhZ2VEb3duKScsXG4gICAgcHJldmlvdXNZZWFyOiAnQW5vIGFudGVyaW9yIChDb250cm9sICsgbGVmdCknLFxuICAgIG5leHRZZWFyOiAnQW5vIHNlZ3VpbnRlIChDb250cm9sICsgcmlnaHQpJyxcbiAgICBwcmV2aW91c0RlY2FkZTogJ8ODwppsdGltYSBkw4PCqWNhZGEnLFxuICAgIG5leHREZWNhZGU6ICdQcsODwrN4aW1hIGTDg8KpY2FkYScsXG4gICAgcHJldmlvdXNDZW50dXJ5OiAnw4PCmmx0aW1vIHPDg8KpY3VsbycsXG4gICAgbmV4dENlbnR1cnk6ICdQcsODwrN4aW1vIHPDg8KpY3VsbycsXG4gIH0sXG4gIHRpbWVQaWNrZXJMb2NhbGU6IHtcbiAgICAuLi5UaW1lUGlja2VyTG9jYWxlLFxuICAgIHBsYWNlaG9sZGVyOiAnSG9yYScsXG4gIH0sXG59O1xuXG4vLyBBbGwgc2V0dGluZ3MgYXQ6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2Jsb2IvbWFzdGVyL2NvbXBvbmVudHMvZGF0ZS1waWNrZXIvbG9jYWxlL2V4YW1wbGUuanNvblxuXG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIC8vIE9wdGlvbnMuanN4XG4gIGl0ZW1zX3Blcl9wYWdlOiAnLyBww4PCoWdpbmEnLFxuICBqdW1wX3RvOiAnU2FsdGFyJyxcbiAganVtcF90b19jb25maXJtOiAnY29uZmlybWFyJyxcbiAgcGFnZTogJycsXG5cbiAgLy8gUGFnaW5hdGlvbi5qc3hcbiAgcHJldl9wYWdlOiAnUMODwqFnaW5hIEFudGVyaW9yJyxcbiAgbmV4dF9wYWdlOiAnUMODwqFnaW5hIFNlZ3VpbnRlJyxcbiAgcHJldl81OiAnUmVjdWFyIDUgUMODwqFnaW5hcycsXG4gIG5leHRfNTogJ0F2YW7Dg8KnYXIgNSBQw4PCoWdpbmFzJyxcbiAgcHJldl8zOiAnUmVjdWFyIDMgUMODwqFnaW5hcycsXG4gIG5leHRfMzogJ0F2YW7Dg8KnYXIgMyBQw4PCoWdpbmFzJyxcbn07XG4iLCJpbXBvcnQgQ2FsZW5kYXIgZnJvbSAnLi9jYWxlbmRhci9wdF9QVCc7XG5pbXBvcnQgRGF0ZVBpY2tlciBmcm9tICcuL2RhdGUtcGlja2VyL3B0X1BUJztcbmltcG9ydCBQYWdpbmF0aW9uIGZyb20gJy4vcGFnaW5hdGlvbi9wdF9QVCc7XG5pbXBvcnQgVGltZVBpY2tlciBmcm9tICcuL3RpbWUtcGlja2VyL3B0X1BUJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBsb2NhbGU6ICdwdCcsXG4gIFBhZ2luYXRpb24sXG4gIERhdGVQaWNrZXIsXG4gIFRpbWVQaWNrZXIsXG4gIENhbGVuZGFyLFxuICBUYWJsZToge1xuICAgIGZpbHRlclRpdGxlOiAnRmlsdHJvJyxcbiAgICBmaWx0ZXJDb25maXJtOiAnQXBsaWNhcicsXG4gICAgZmlsdGVyUmVzZXQ6ICdSZWluaWNpYXInLFxuICAgIGVtcHR5VGV4dDogJ1NlbSByZXN1bHRhZG9zJyxcbiAgICBzZWxlY3RBbGw6ICdTZWxlY2lvbmFyIHDDg8KhZ2luYSBhdHVhbCcsXG4gICAgc2VsZWN0SW52ZXJ0OiAnSW52ZXJ0ZXIgc2VsZcODwqfDg8KjbycsXG4gIH0sXG4gIE1vZGFsOiB7XG4gICAgb2tUZXh0OiAnT0snLFxuICAgIGNhbmNlbFRleHQ6ICdDYW5jZWxhcicsXG4gICAganVzdE9rVGV4dDogJ09LJyxcbiAgfSxcbiAgUG9wY29uZmlybToge1xuICAgIG9rVGV4dDogJ09LJyxcbiAgICBjYW5jZWxUZXh0OiAnQ2FuY2VsYXInLFxuICB9LFxuICBUcmFuc2Zlcjoge1xuICAgIG5vdEZvdW5kQ29udGVudDogJ1NlbSByZXN1bHRhZG9zJyxcbiAgICBzZWFyY2hQbGFjZWhvbGRlcjogJ1Byb2N1cmFyLi4uJyxcbiAgICBpdGVtVW5pdDogJ2l0ZW0nLFxuICAgIGl0ZW1zVW5pdDogJ2l0ZW5zJyxcbiAgfSxcbiAgU2VsZWN0OiB7XG4gICAgbm90Rm91bmRDb250ZW50OiAnU2VtIHJlc3VsdGFkb3MnLFxuICB9LFxuICBVcGxvYWQ6IHtcbiAgICB1cGxvYWRpbmc6ICdBIGNhcnJlZ2FyLi4uJyxcbiAgICByZW1vdmVGaWxlOiAnUmVtb3ZlcicsXG4gICAgdXBsb2FkRXJyb3I6ICdFcnJvIGFvIGNhcnJlZ2FyJyxcbiAgICBwcmV2aWV3RmlsZTogJ1Byw4PCqS12aXN1YWxpemFyJyxcbiAgfSxcbn07XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIHRvZGF5OiAnw5DCocOQwrXDkMKzw5DCvsOQwrTDkMK9w5HCjycsXG4gIG5vdzogJ8OQwqHDkMK1w5DCucORwofDkMKww5HCgScsXG4gIGJhY2tUb1RvZGF5OiAnw5DCosOQwrXDkMK6w5HCg8ORwonDkMKww5HCjyDDkMK0w5DCsMORwoLDkMKwJyxcbiAgb2s6ICdPaycsXG4gIGNsZWFyOiAnw5DCnsORwofDkMK4w5HCgcORwoLDkMK4w5HCgsORwownLFxuICBtb250aDogJ8OQwpzDkMK1w5HCgcORwo/DkcKGJyxcbiAgeWVhcjogJ8OQwpPDkMK+w5DCtCcsXG4gIHRpbWVTZWxlY3Q6ICfDkMKSw5HCi8OQwrHDkcKAw5DCsMORwoLDkcKMIMOQwrLDkcKAw5DCtcOQwrzDkcKPJyxcbiAgZGF0ZVNlbGVjdDogJ8OQwpLDkcKLw5DCscORwoDDkMKww5HCgsORwowgw5DCtMOQwrDDkcKCw5HCgycsXG4gIG1vbnRoU2VsZWN0OiAnw5DCksORwovDkMKxw5HCgMOQwrDDkcKCw5HCjCDDkMK8w5DCtcORwoHDkcKPw5HChicsXG4gIHllYXJTZWxlY3Q6ICfDkMKSw5HCi8OQwrHDkcKAw5DCsMORwoLDkcKMIMOQwrPDkMK+w5DCtCcsXG4gIGRlY2FkZVNlbGVjdDogJ8OQwpLDkcKLw5DCscORwoDDkMKww5HCgsORwowgw5DCtMOQwrXDkcKBw5HCj8ORwoLDkMK4w5DCu8OQwrXDkcKCw5DCuMOQwrUnLFxuICB5ZWFyRm9ybWF0OiAnWVlZWScsXG4gIGRhdGVGb3JtYXQ6ICdELU0tWVlZWScsXG4gIGRheUZvcm1hdDogJ0QnLFxuICBkYXRlVGltZUZvcm1hdDogJ0QtTS1ZWVlZIEhIOm1tOnNzJyxcbiAgbW9udGhCZWZvcmVZZWFyOiB0cnVlLFxuICBwcmV2aW91c01vbnRoOiAnw5DCn8ORwoDDkMK1w5DCtMORwovDkMK0w5HCg8ORwonDkMK4w5DCuSDDkMK8w5DCtcORwoHDkcKPw5HChiAoUGFnZVVwKScsXG4gIG5leHRNb250aDogJ8OQwqHDkMK7w5DCtcOQwrTDkcKDw5HCjsORwonDkMK4w5DCuSDDkMK8w5DCtcORwoHDkcKPw5HChiAoUGFnZURvd24pJyxcbiAgcHJldmlvdXNZZWFyOiAnw5DCn8ORwoDDkMK1w5DCtMORwovDkMK0w5HCg8ORwonDkMK4w5DCuSDDkMKzw5DCvsOQwrQgKENvbnRyb2wgKyBsZWZ0KScsXG4gIG5leHRZZWFyOiAnw5DCocOQwrvDkMK1w5DCtMORwoPDkcKOw5HCicOQwrjDkMK5IMOQwrPDkMK+w5DCtCAoQ29udHJvbCArIHJpZ2h0KScsXG4gIHByZXZpb3VzRGVjYWRlOiAnw5DCn8ORwoDDkMK1w5DCtMORwovDkMK0w5HCg8ORwonDkMK1w5DCtSDDkMK0w5DCtcORwoHDkcKPw5HCgsOQwrjDkMK7w5DCtcORwoLDkMK4w5DCtScsXG4gIG5leHREZWNhZGU6ICfDkMKhw5DCu8OQwrXDkMK0w5HCg8ORwonDkMK1w5DCtSDDkMK0w5DCtcORwoHDkcKPw5HCgsOQwrjDkMK7w5DCtcORwoLDkMK4w5DCtScsXG4gIHByZXZpb3VzQ2VudHVyeTogJ8OQwp/DkcKAw5DCtcOQwrTDkcKLw5DCtMORwoPDkcKJw5DCuMOQwrkgw5DCssOQwrXDkMK6JyxcbiAgbmV4dENlbnR1cnk6ICfDkMKhw5DCu8OQwrXDkMK0w5HCg8ORwo7DkcKJw5DCuMOQwrkgw5DCssOQwrXDkMK6Jyxcbn07XG4iLCIvKipcbiAqIENyZWF0ZWQgYnkgQW5kcmV5IEdheXZvcm9uc2t5IG9uIDEzLzA0LzE2LlxuICovXG5jb25zdCBsb2NhbGUgPSB7XG4gIHBsYWNlaG9sZGVyOiAnw5DCksORwovDkMKxw5DCtcORwoDDkMK4w5HCgsOQwrUgw5DCssORwoDDkMK1w5DCvMORwo8nLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgbG9jYWxlO1xuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IEFuZHJleSBHYXl2b3JvbnNreSBvbiAxMy8wNC8xNi5cbiAqL1xuXG5pbXBvcnQgQ2FsZW5kYXJMb2NhbGUgZnJvbSAnLi4vY2FsZW5kYXIvcnVfUlUnO1xuaW1wb3J0IFRpbWVQaWNrZXJMb2NhbGUgZnJvbSAnLi4vdGltZS1waWNrZXIvcnVfUlUnO1xuXG5jb25zdCBsb2NhbGUgPSB7XG4gIGxhbmc6IHtcbiAgICBwbGFjZWhvbGRlcjogJ8OQwpLDkcKLw5DCscOQwrXDkcKAw5DCuMORwoLDkMK1IMOQwrTDkMKww5HCgsORwoMnLFxuICAgIHJhbmdlUGxhY2Vob2xkZXI6IFsnw5DCncOQwrDDkcKHw5DCsMOQwrvDkcKMw5DCvcOQwrDDkcKPIMOQwrTDkMKww5HCgsOQwrAnLCAnw5DCmsOQwr7DkMK9w5DCtcORwofDkMK9w5DCsMORwo8gw5DCtMOQwrDDkcKCw5DCsCddLFxuICAgIC4uLkNhbGVuZGFyTG9jYWxlLFxuICB9LFxuICB0aW1lUGlja2VyTG9jYWxlOiB7XG4gICAgLi4uVGltZVBpY2tlckxvY2FsZSxcbiAgfSxcbn07XG5cbi8vIEFsbCBzZXR0aW5ncyBhdDpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vYmxvYi9tYXN0ZXIvY29tcG9uZW50cy9kYXRlLXBpY2tlci9sb2NhbGUvZXhhbXBsZS5qc29uXG5cbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgLy8gT3B0aW9ucy5qc3hcbiAgaXRlbXNfcGVyX3BhZ2U6ICcvw5HCgcORwoLDkcKAw5DCsMOQwr3DkMK4w5HChsOQwrUnLFxuICBqdW1wX3RvOiAnw5DCn8OQwrXDkcKAw5DCtcOQwrnDkcKCw5DCuCcsXG4gIGp1bXBfdG9fY29uZmlybTogJ8OQwr/DkMK+w5DCtMORwoLDkMKyw5DCtcORwoDDkMK0w5DCuMORwoLDkcKMJyxcbiAgcGFnZTogJycsXG5cbiAgLy8gUGFnaW5hdGlvbi5qc3hcbiAgcHJldl9wYWdlOiAnw5DCncOQwrDDkMK3w5DCsMOQwrQnLFxuICBuZXh0X3BhZ2U6ICfDkMKSw5DCv8OQwrXDkcKAw5DCtcOQwrQnLFxuICBwcmV2XzU6ICfDkMKfw5HCgMOQwrXDkMK0w5HCi8OQwrTDkcKDw5HCicOQwrjDkMK1IDUnLFxuICBuZXh0XzU6ICfDkMKhw5DCu8OQwrXDkMK0w5HCg8ORwo7DkcKJw5DCuMOQwrUgNScsXG4gIHByZXZfMzogJ8OQwp/DkcKAw5DCtcOQwrTDkcKLw5DCtMORwoPDkcKJw5DCuMOQwrUgMycsXG4gIG5leHRfMzogJ8OQwqHDkMK7w5DCtcOQwrTDkcKDw5HCjsORwonDkMK4w5DCtSAzJyxcbn07XG4iLCJpbXBvcnQgQ2FsZW5kYXIgZnJvbSAnLi9jYWxlbmRhci9ydV9SVSc7XG5pbXBvcnQgRGF0ZVBpY2tlciBmcm9tICcuL2RhdGUtcGlja2VyL3J1X1JVJztcbmltcG9ydCBQYWdpbmF0aW9uIGZyb20gJy4vcGFnaW5hdGlvbi9ydV9SVSc7XG5pbXBvcnQgVGltZVBpY2tlciBmcm9tICcuL3RpbWUtcGlja2VyL3J1X1JVJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBsb2NhbGU6ICdydScsXG4gIFBhZ2luYXRpb24sXG4gIERhdGVQaWNrZXIsXG4gIFRpbWVQaWNrZXIsXG4gIENhbGVuZGFyLFxuICBUYWJsZToge1xuICAgIGZpbHRlclRpdGxlOiAnw5DCpMOQwrjDkMK7w5HCjMORwoLDkcKAJyxcbiAgICBmaWx0ZXJDb25maXJtOiAnT0snLFxuICAgIGZpbHRlclJlc2V0OiAnw5DCocOQwrHDkcKAw5DCvsORwoHDkMK4w5HCgsORwownLFxuICAgIGVtcHR5VGV4dDogJ8OQwp3DkMK1w5HCgiDDkMK0w5DCsMOQwr3DkMK9w5HCi8ORwoUnLFxuICAgIHNlbGVjdEFsbDogJ8OQwpLDkcKLw5DCscORwoDDkMKww5HCgsORwowgw5DCssORwoHDkcKRJyxcbiAgICBzZWxlY3RJbnZlcnQ6ICfDkMKYw5DCvcOQwrLDkMK1w5HCgMORwoLDkMK4w5HCgMOQwr7DkMKyw5DCsMORwoLDkcKMIMOQwrLDkcKLw5DCscOQwr7DkcKAJyxcbiAgfSxcbiAgTW9kYWw6IHtcbiAgICBva1RleHQ6ICdPSycsXG4gICAgY2FuY2VsVGV4dDogJ8OQwp7DkcKCw5DCvMOQwrXDkMK9w5DCsCcsXG4gICAganVzdE9rVGV4dDogJ09LJyxcbiAgfSxcbiAgUG9wY29uZmlybToge1xuICAgIG9rVGV4dDogJ09LJyxcbiAgICBjYW5jZWxUZXh0OiAnw5DCnsORwoLDkMK8w5DCtcOQwr3DkMKwJyxcbiAgfSxcbiAgVHJhbnNmZXI6IHtcbiAgICBub3RGb3VuZENvbnRlbnQ6ICfDkMKdw5DCuMORwofDkMK1w5DCs8OQwr4gw5DCvcOQwrUgw5DCvcOQwrDDkMK5w5DCtMOQwrXDkMK9w5DCvicsXG4gICAgc2VhcmNoUGxhY2Vob2xkZXI6ICfDkMKSw5DCssOQwrXDkMK0w5DCuMORwoLDkMK1IMOQwr3DkMKww5DCt8OQwrLDkMKww5DCvcOQwrjDkMK1IMOQwrTDkMK7w5HCjyDDkMK/w5DCvsOQwrjDkcKBw5DCusOQwrAnLFxuICAgIGl0ZW1Vbml0OiAnaXRlbScsXG4gICAgaXRlbXNVbml0OiAnaXRlbXMnLFxuICB9LFxuICBTZWxlY3Q6IHtcbiAgICBub3RGb3VuZENvbnRlbnQ6ICfDkMKdw5DCuMORwofDkMK1w5DCs8OQwr4gw5DCvcOQwrUgw5DCvcOQwrDDkMK5w5DCtMOQwrXDkMK9w5DCvicsXG4gIH0sXG4gIFVwbG9hZDoge1xuICAgIHVwbG9hZGluZzogJ8OQwpfDkMKww5DCusOQwrDDkcKHw5DCuMOQwrLDkMKww5HCji4uLicsXG4gICAgcmVtb3ZlRmlsZTogJ8OQwqPDkMK0w5DCsMOQwrvDkMK4w5HCgsORwowgw5HChMOQwrDDkMK5w5DCuycsXG4gICAgdXBsb2FkRXJyb3I6ICfDkMKew5HCiMOQwrjDkMKxw5DCusOQwrAgw5DCv8ORwoDDkMK4IMOQwrfDkMKww5DCusOQwrDDkcKHw5DCusOQwrUnLFxuICAgIHByZXZpZXdGaWxlOiAnw5DCn8ORwoDDkMK1w5DCtMOQwr/DkcKAw5DCvsORwoHDkMK8w5DCvsORwoLDkcKAIMORwoTDkMKww5DCucOQwrvDkMKwJyxcbiAgfSxcbn07XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIHRvZGF5OiAnRG5lcycsXG4gIG5vdzogJ1RlcmF6JyxcbiAgYmFja1RvVG9kYXk6ICdTcMODwqTDhcKlIG5hIGRuZXMnLFxuICBvazogJ09rJyxcbiAgY2xlYXI6ICdWeW1hemHDhcKlJyxcbiAgbW9udGg6ICdNZXNpYWMnLFxuICB5ZWFyOiAnUm9rJyxcbiAgdGltZVNlbGVjdDogJ1Z5YnJhw4XCpSDDhMKNYXMnLFxuICBkYXRlU2VsZWN0OiAnVnlicmHDhcKlIGTDg8KhdHVtJyxcbiAgbW9udGhTZWxlY3Q6ICdWeWJyYcOFwqUgbWVzaWFjJyxcbiAgeWVhclNlbGVjdDogJ1Z5YnJhw4XCpSByb2snLFxuICBkZWNhZGVTZWxlY3Q6ICdWeWJyYcOFwqUgZGVrw4PCoWR1JyxcbiAgeWVhckZvcm1hdDogJ1lZWVknLFxuICBkYXRlRm9ybWF0OiAnRC5NLllZWVknLFxuICBkYXlGb3JtYXQ6ICdEJyxcbiAgZGF0ZVRpbWVGb3JtYXQ6ICdELk0uWVlZWSBISDptbTpzcycsXG4gIG1vbnRoQmVmb3JlWWVhcjogdHJ1ZSxcbiAgcHJldmlvdXNNb250aDogJ1ByZWRjaMODwqFkemFqw4PCumNpIG1lc2lhYyAoUGFnZVVwKScsXG4gIG5leHRNb250aDogJ05hc2xlZHVqw4PCumNpIG1lc2lhYyAoUGFnZURvd24pJyxcbiAgcHJldmlvdXNZZWFyOiAnUHJlZGNow4PCoWR6YWrDg8K6Y2kgcm9rIChDb250cm9sICsgbGVmdCknLFxuICBuZXh0WWVhcjogJ05hc2xlZHVqw4PCumNpIHJvayAoQ29udHJvbCArIHJpZ2h0KScsXG4gIHByZXZpb3VzRGVjYWRlOiAnUHJlZGNow4PCoWR6YWrDg8K6Y2EgZGVrw4PCoWRhJyxcbiAgbmV4dERlY2FkZTogJ05hc2xlZHVqw4PCumNhIGRla8ODwqFkYScsXG4gIHByZXZpb3VzQ2VudHVyeTogJ1ByZWRjaMODwqFkemFqw4PCumNlIHN0b3Jvw4TCjWllJyxcbiAgbmV4dENlbnR1cnk6ICdOYXNsZWR1asODwrpjZSBzdG9yb8OEwo1pZScsXG59O1xuIiwiY29uc3QgbG9jYWxlID0ge1xuICBwbGFjZWhvbGRlcjogJ1Z5YnJhw4XCpSDDhMKNYXMnLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgbG9jYWxlO1xuIiwiaW1wb3J0IENhbGVuZGFyTG9jYWxlIGZyb20gJy4uL2NhbGVuZGFyL3NrX1NLJztcbmltcG9ydCBUaW1lUGlja2VyTG9jYWxlIGZyb20gJy4uL3RpbWUtcGlja2VyL3NrX1NLJztcblxuLy8gw6fCu8Kfw6TCuMKAw6XCkMKIw6XCucK2w6TCuMK6w6XCrsKMw6bClcK0w6fCmsKEIExvY2FsZVxuY29uc3QgbG9jYWxlID0ge1xuICBsYW5nOiB7XG4gICAgcGxhY2Vob2xkZXI6ICdWeWJyYcOFwqUgZMODwqF0dW0nLFxuICAgIHJhbmdlUGxhY2Vob2xkZXI6IFsnT2QnLCAnRG8nXSxcbiAgICAuLi5DYWxlbmRhckxvY2FsZSxcbiAgfSxcbiAgdGltZVBpY2tlckxvY2FsZToge1xuICAgIC4uLlRpbWVQaWNrZXJMb2NhbGUsXG4gIH0sXG59O1xuXG4vLyBBbGwgc2V0dGluZ3MgYXQ6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2Jsb2IvbWFzdGVyL2NvbXBvbmVudHMvZGF0ZS1waWNrZXIvbG9jYWxlL2V4YW1wbGUuanNvblxuXG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIC8vIE9wdGlvbnMuanN4XG4gIGl0ZW1zX3Blcl9wYWdlOiAnLyBzdHJhbmEnLFxuICBqdW1wX3RvOiAnQ2hvw4TCjyBuYScsXG4gIGp1bXBfdG9fY29uZmlybTogJ3BvdHZyZGl0JyxcbiAgcGFnZTogJycsXG5cbiAgLy8gUGFnaW5hdGlvbi5qc3hcbiAgcHJldl9wYWdlOiAnUHJlZGNow4PCoWR6YWrDg8K6Y2Egc3RyYW5hJyxcbiAgbmV4dF9wYWdlOiAnTmFzbGVkdWrDg8K6Y2Egc3RyYW5hJyxcbiAgcHJldl81OiAnUHJlZGNow4PCoWR6YWrDg8K6Y2ljaCA1IHN0csODwqFuJyxcbiAgbmV4dF81OiAnTmFzbGVkdWrDg8K6Y2ljaCA1IHN0csODwqFuJyxcbiAgcHJldl8zOiAnUHJlZGNow4PCoWR6YWrDg8K6Y2UgMyBzdHJhbnknLFxuICBuZXh0XzM6ICdOYXNsZWR1asODwrpjZSAzIHN0cmFueScsXG59O1xuIiwiaW1wb3J0IENhbGVuZGFyIGZyb20gJy4vY2FsZW5kYXIvc2tfU0snO1xuaW1wb3J0IERhdGVQaWNrZXIgZnJvbSAnLi9kYXRlLXBpY2tlci9za19TSyc7XG5pbXBvcnQgUGFnaW5hdGlvbiBmcm9tICcuL3BhZ2luYXRpb24vc2tfU0snO1xuaW1wb3J0IFRpbWVQaWNrZXIgZnJvbSAnLi90aW1lLXBpY2tlci9za19TSyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbG9jYWxlOiAnc2snLFxuICBQYWdpbmF0aW9uLFxuICBEYXRlUGlja2VyLFxuICBUaW1lUGlja2VyLFxuICBDYWxlbmRhcixcbiAgVGFibGU6IHtcbiAgICBmaWx0ZXJUaXRsZTogJ0ZpbHRlcicsXG4gICAgZmlsdGVyQ29uZmlybTogJ09LJyxcbiAgICBmaWx0ZXJSZXNldDogJ09ibm92acOFwqUnLFxuICAgIGVtcHR5VGV4dDogJ8OFwr1pYWRuZSBkw4PCoXRhJyxcbiAgICBzZWxlY3RBbGw6ICdWeWJyYcOFwqUgdsOFwqFldGtvJyxcbiAgICBzZWxlY3RJbnZlcnQ6ICdWeWJyYcOFwqUgb3Bhw4TCjW7Dg8KpJyxcbiAgfSxcbiAgTW9kYWw6IHtcbiAgICBva1RleHQ6ICdPSycsXG4gICAgY2FuY2VsVGV4dDogJ1pydcOFwqFpw4XCpScsXG4gICAganVzdE9rVGV4dDogJ09LJyxcbiAgfSxcbiAgUG9wY29uZmlybToge1xuICAgIG9rVGV4dDogJ09LJyxcbiAgICBjYW5jZWxUZXh0OiAnWnJ1w4XCoWnDhcKlJyxcbiAgfSxcbiAgVHJhbnNmZXI6IHtcbiAgICBub3RGb3VuZENvbnRlbnQ6ICdOZW7Dg8KhamRlbsODwqknLFxuICAgIHNlYXJjaFBsYWNlaG9sZGVyOiAnVnlow4TCvmFkw4PCoXZhbmllJyxcbiAgICBpdGVtVW5pdDogJ3BvbG/DhcK+a2EnLFxuICAgIGl0ZW1zVW5pdDogJ3BvbG/DhcK+aWVrJyxcbiAgfSxcbiAgU2VsZWN0OiB7XG4gICAgbm90Rm91bmRDb250ZW50OiAnTmVuw4PCoWpkZW7Dg8KpJyxcbiAgfSxcbiAgVXBsb2FkOiB7XG4gICAgdXBsb2FkaW5nOiAnTmFocsODwqF2YW5pZS4uLicsXG4gICAgcmVtb3ZlRmlsZTogJ09kc3Ryw4PCoW5pw4XCpSBzw4PCumJvcicsXG4gICAgdXBsb2FkRXJyb3I6ICdDaHliYSBwcmkgbmFocsODwqF2YW7Dg8KtJyxcbiAgICBwcmV2aWV3RmlsZTogJ1pvYnJhemnDhcKlIHPDg8K6Ym9yJyxcbiAgfSxcbn07XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIHRvZGF5OiAnRGFuYXMnLFxuICBub3c6ICdTYWRhJyxcbiAgYmFja1RvVG9kYXk6ICdWcmF0aSBzZSBuYSBkYW5hcycsXG4gIG9rOiAnVSByZWR1JyxcbiAgY2xlYXI6ICdPYnJpw4XCoWknLFxuICBtb250aDogJ01lc2VjJyxcbiAgeWVhcjogJ0dvZGluYScsXG4gIHRpbWVTZWxlY3Q6ICdJemFiZXJpIHZyZW1lJyxcbiAgZGF0ZVNlbGVjdDogJ0l6YWJlcmkgZGF0dW0nLFxuICBtb250aFNlbGVjdDogJ0l6YWJlcmkgbWVzZWMnLFxuICB5ZWFyU2VsZWN0OiAnSXphYmVyaSBnb2RpbnUnLFxuICBkZWNhZGVTZWxlY3Q6ICdJemFiZXJpIGRlY2VuaWp1JyxcbiAgeWVhckZvcm1hdDogJ1lZWVknLFxuICBkYXRlRm9ybWF0OiAnREQuTU0uWVlZWScsXG4gIGRheUZvcm1hdDogJ0QnLFxuICBkYXRlVGltZUZvcm1hdDogJ0RELk1NLllZWVkgSEg6bW06c3MnLFxuICBtb250aEJlZm9yZVllYXI6IHRydWUsXG4gIHByZXZpb3VzTW9udGg6ICdQcmV0aG9kbmkgbWVzZWMgKFBhZ2VVcCknLFxuICBuZXh0TW9udGg6ICdTbGVkZcOEwodpIG1lc2VjIChQYWdlRG93biknLFxuICBwcmV2aW91c1llYXI6ICdQcmV0aG9kbmEgZ29kaW5hIChDb250cm9sICsgbGVmdCknLFxuICBuZXh0WWVhcjogJ1NsZWRlw4TCh2EgZ29kaW5hIChDb250cm9sICsgcmlnaHQpJyxcbiAgcHJldmlvdXNEZWNhZGU6ICdQcmV0aG9kbmEgZGVjZW5pamEnLFxuICBuZXh0RGVjYWRlOiAnU2xlZGXDhMKHYSBkZWNlbmlqYScsXG4gIHByZXZpb3VzQ2VudHVyeTogJ1ByZXRob2RuaSB2ZWsnLFxuICBuZXh0Q2VudHVyeTogJ1NsZWRlw4TCh2kgdmVrJyxcbn07XG4iLCJjb25zdCBsb2NhbGUgPSB7XG4gIHBsYWNlaG9sZGVyOiAnSXphYmVyaXRlIHZyZW1lJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTtcbiIsImltcG9ydCBDYWxlbmRhckxvY2FsZSBmcm9tICcuLi9jYWxlbmRhci9zcl9SUyc7XG5pbXBvcnQgVGltZVBpY2tlckxvY2FsZSBmcm9tICcuLi90aW1lLXBpY2tlci9zcl9SUyc7XG5cbi8vIE1lcmdlIGludG8gYSBsb2NhbGUgb2JqZWN0XG5jb25zdCBsb2NhbGUgPSB7XG4gIGxhbmc6IHtcbiAgICBwbGFjZWhvbGRlcjogJ0l6YWJlcml0ZSBkYXR1bScsXG4gICAgcmFuZ2VQbGFjZWhvbGRlcjogWydQb8OEwo1ldG5pIGRhdHVtJywgJ0tyYWpuamkgZGF0dW0nXSxcbiAgICAuLi5DYWxlbmRhckxvY2FsZSxcbiAgfSxcbiAgdGltZVBpY2tlckxvY2FsZToge1xuICAgIC4uLlRpbWVQaWNrZXJMb2NhbGUsXG4gIH0sXG59O1xuXG4vLyBBbGwgc2V0dGluZ3MgYXQ6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2Jsb2IvbWFzdGVyL2NvbXBvbmVudHMvZGF0ZS1waWNrZXIvbG9jYWxlL2V4YW1wbGUuanNvblxuXG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIC8vIE9wdGlvbnMuanN4XG4gIGl0ZW1zX3Blcl9wYWdlOiAnLyBzdHJhbmknLFxuICBqdW1wX3RvOiAnSWRpIG5hJyxcbiAgcGFnZTogJycsXG5cbiAgLy8gUGFnaW5hdGlvbi5qc3hcbiAgcHJldl9wYWdlOiAnUHJldGhvZG5hIHN0cmFuYScsXG4gIG5leHRfcGFnZTogJ1NsZWRlw4TCh2Egc3RyYW5hJyxcbiAgcHJldl81OiAnUHJldGhvZG5paCA1IFN0cmFuYScsXG4gIG5leHRfNTogJ1NsZWRlw4TCh2loIDUgU3RyYW5hJyxcbiAgcHJldl8zOiAnUHJldGhvZG5paCAzIFN0cmFuZScsXG4gIG5leHRfMzogJ1NsZWRlw4TCh2loIDMgU3RyYW5lJyxcbn07XG4iLCJpbXBvcnQgQ2FsZW5kYXIgZnJvbSAnLi9jYWxlbmRhci9zcl9SUyc7XG5pbXBvcnQgRGF0ZVBpY2tlciBmcm9tICcuL2RhdGUtcGlja2VyL3NyX1JTJztcbmltcG9ydCBQYWdpbmF0aW9uIGZyb20gJy4vcGFnaW5hdGlvbi9zcl9SUyc7XG5pbXBvcnQgVGltZVBpY2tlciBmcm9tICcuL3RpbWUtcGlja2VyL3NyX1JTJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBsb2NhbGU6ICdzcicsXG4gIFBhZ2luYXRpb24sXG4gIERhdGVQaWNrZXIsXG4gIFRpbWVQaWNrZXIsXG4gIENhbGVuZGFyLFxuICBUYWJsZToge1xuICAgIGZpbHRlclRpdGxlOiAnRmlsdGVyJyxcbiAgICBmaWx0ZXJDb25maXJtOiAnUHJpbWVuaSBmaWx0ZXInLFxuICAgIGZpbHRlclJlc2V0OiAnUmVzZXR1aiBmaWx0ZXInLFxuICAgIGVtcHR5VGV4dDogJ05lbWEgcG9kYXRha2EnLFxuICAgIHNlbGVjdEFsbDogJ09iZWxlw4XCvmkgc3ZlIG5hIHRyZW51dG5vaiBzdHJhbmknLFxuICAgIHNlbGVjdEludmVydDogJ09icm5pIHNlbGVrY2lqdSBuYSB0cmVudXRub2ogc3RyYW5pY2knLFxuICB9LFxuICBNb2RhbDoge1xuICAgIG9rVGV4dDogJ1UgcmVkdScsXG4gICAgY2FuY2VsVGV4dDogJ090a2HDhcK+aScsXG4gICAganVzdE9rVGV4dDogJ1UgcmVkdScsXG4gIH0sXG4gIFBvcGNvbmZpcm06IHtcbiAgICBva1RleHQ6ICdVIHJlZHUnLFxuICAgIGNhbmNlbFRleHQ6ICdPdGthw4XCvmknLFxuICB9LFxuICBUcmFuc2Zlcjoge1xuICAgIG5vdEZvdW5kQ29udGVudDogJ05pc3UgcHJvbmHDhMKRZW5pIHJlenVsdGF0aSBwcmV0cmFnZScsXG4gICAgc2VhcmNoUGxhY2Vob2xkZXI6ICdQcmV0cmHDhcK+aXRlIG92ZGUnLFxuICAgIGl0ZW1Vbml0OiAnc3RhdmthJyxcbiAgICBpdGVtc1VuaXQ6ICdzdGF2a2knLFxuICB9LFxuICBTZWxlY3Q6IHtcbiAgICBub3RGb3VuZENvbnRlbnQ6ICdOaWplIHByb25hw4TCkWVubycsXG4gIH0sXG4gIFVwbG9hZDoge1xuICAgIHVwbG9hZGluZzogJ1NsYW5qZS4uLicsXG4gICAgcmVtb3ZlRmlsZTogJ1VrbG9uaSBmYWpsJyxcbiAgICB1cGxvYWRFcnJvcjogJ0dyZcOFwqFrYSBwcmlsaWtvbSBzbGFuamEnLFxuICAgIHByZXZpZXdGaWxlOiAnUG9nbGVkYWogZmFqbCcsXG4gIH0sXG59O1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICB0b2RheTogJ0kgZGFnJyxcbiAgbm93OiAnTnUnLFxuICBiYWNrVG9Ub2RheTogJ1RpbGwgaWRhZycsXG4gIG9rOiAnT2snLFxuICBjbGVhcjogJ0F2YnJ5dCcsXG4gIG1vbnRoOiAnTcODwqVuYWQnLFxuICB5ZWFyOiAnw4PChXInLFxuICB0aW1lU2VsZWN0OiAnVsODwqRsaiB0aWRwdW5rdCcsXG4gIGRhdGVTZWxlY3Q6ICdWw4PCpGxqIGRhdHVtJyxcbiAgbW9udGhTZWxlY3Q6ICdWw4PCpGxqIG3Dg8KlbmFkJyxcbiAgeWVhclNlbGVjdDogJ1bDg8KkbGogw4PCpXInLFxuICBkZWNhZGVTZWxlY3Q6ICdWw4PCpGxqIMODwqVydGlvbmRlJyxcbiAgeWVhckZvcm1hdDogJ1lZWVknLFxuICBkYXRlRm9ybWF0OiAnWVlZWS1NTS1ERCcsXG4gIGRheUZvcm1hdDogJ0QnLFxuICBkYXRlVGltZUZvcm1hdDogJ1lZWVktTU0tREQgSDptbTpzcycsXG4gIG1vbnRoQmVmb3JlWWVhcjogdHJ1ZSxcbiAgcHJldmlvdXNNb250aDogJ0bDg8K2cnJhIG3Dg8KlbmFkZW4gKFBhZ2VVcCknLFxuICBuZXh0TW9udGg6ICdOw4PCpHN0YSBtw4PCpW5hZCAoUGFnZURvd24pJyxcbiAgcHJldmlvdXNZZWFyOiAnRsODwrZyZWcgw4PCpXIgKENvbnRyb2wgKyBsZWZ0KScsXG4gIG5leHRZZWFyOiAnTsODwqRzdGEgw4PCpXIgKENvbnRyb2wgKyByaWdodCknLFxuICBwcmV2aW91c0RlY2FkZTogJ0bDg8K2cmVnIMODwqVydGlvbmRlJyxcbiAgbmV4dERlY2FkZTogJ07Dg8Kkc3RhIMODwqVydGlvbmRlJyxcbiAgcHJldmlvdXNDZW50dXJ5OiAnRsODwrZyZWcgw4PCpXJodW5kcmFkZScsXG4gIG5leHRDZW50dXJ5OiAnTsODwqRzdGEgw4PCpXJodW5kcmFkZScsXG59O1xuIiwiY29uc3QgbG9jYWxlID0ge1xuICBwbGFjZWhvbGRlcjogJ1bDg8KkbGogdGlkJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTtcbiIsImltcG9ydCBDYWxlbmRhckxvY2FsZSBmcm9tICcuLi9jYWxlbmRhci9zdl9TRSc7XG5pbXBvcnQgVGltZVBpY2tlckxvY2FsZSBmcm9tICcuLi90aW1lLXBpY2tlci9zdl9TRSc7XG5cbmNvbnN0IGxvY2FsZSA9IHtcbiAgbGFuZzoge1xuICAgIHBsYWNlaG9sZGVyOiAnVsODwqRsaiBkYXR1bScsXG4gICAgcmFuZ2VQbGFjZWhvbGRlcjogWydTdGFydGRhdHVtJywgJ1NsdXRkYXR1bSddLFxuICAgIC4uLkNhbGVuZGFyTG9jYWxlLFxuICB9LFxuICB0aW1lUGlja2VyTG9jYWxlOiB7XG4gICAgLi4uVGltZVBpY2tlckxvY2FsZSxcbiAgfSxcbn07XG5cbi8vIEFsbCBzZXR0aW5ncyBhdDpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vYmxvYi9tYXN0ZXIvY29tcG9uZW50cy9kYXRlLXBpY2tlci9sb2NhbGUvZXhhbXBsZS5qc29uXG5cbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgLy8gT3B0aW9ucy5qc3hcbiAgaXRlbXNfcGVyX3BhZ2U6ICcvIHNpZGEnLFxuICBqdW1wX3RvOiAnR8ODwqUgdGlsbCcsXG4gIGp1bXBfdG9fY29uZmlybTogJ2Jla3LDg8KkZnRhJyxcbiAgcGFnZTogJycsXG5cbiAgLy8gUGFnaW5hdGlvbi5qc3hcbiAgcHJldl9wYWdlOiAnRsODwrZyZWcgc2lkYScsXG4gIG5leHRfcGFnZTogJ07Dg8Kkc3RhIHNpZGEnLFxuICBwcmV2XzU6ICdGw4PCtnJlZyA1IHNpZG9yJyxcbiAgbmV4dF81OiAnTsODwqRzdGEgNSBzaWRvcicsXG4gIHByZXZfMzogJ0bDg8K2cmVnIDMgc2lkb3InLFxuICBuZXh0XzM6ICdOw4PCpHN0YSAzIHNpZG9yJyxcbn07XG4iLCJpbXBvcnQgQ2FsZW5kYXIgZnJvbSAnLi9jYWxlbmRhci9zdl9TRSc7XG5pbXBvcnQgRGF0ZVBpY2tlciBmcm9tICcuL2RhdGUtcGlja2VyL3N2X1NFJztcbmltcG9ydCBQYWdpbmF0aW9uIGZyb20gJy4vcGFnaW5hdGlvbi9zdl9TRSc7XG5pbXBvcnQgVGltZVBpY2tlciBmcm9tICcuL3RpbWUtcGlja2VyL3N2X1NFJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBsb2NhbGU6ICdzdicsXG4gIFBhZ2luYXRpb24sXG4gIERhdGVQaWNrZXIsXG4gIFRpbWVQaWNrZXIsXG4gIENhbGVuZGFyLFxuICBUYWJsZToge1xuICAgIGZpbHRlclRpdGxlOiAnRmlsdGVybWVueScsXG4gICAgZmlsdGVyQ29uZmlybTogJ09LJyxcbiAgICBmaWx0ZXJSZXNldDogJ1JlbnNhJyxcbiAgICBlbXB0eVRleHQ6ICdJbmdlbiBpbmZvcm1hdGlvbicsXG4gIH0sXG4gIE1vZGFsOiB7XG4gICAgb2tUZXh0OiAnT0snLFxuICAgIGNhbmNlbFRleHQ6ICdBdmJyeXQnLFxuICAgIGp1c3RPa1RleHQ6ICdPSycsXG4gIH0sXG4gIFBvcGNvbmZpcm06IHtcbiAgICBva1RleHQ6ICdPSycsXG4gICAgY2FuY2VsVGV4dDogJ0F2YnJ5dCcsXG4gIH0sXG4gIFRyYW5zZmVyOiB7XG4gICAgbm90Rm91bmRDb250ZW50OiAnSW5mbyBzYWtuYXMnLFxuICAgIHNlYXJjaFBsYWNlaG9sZGVyOiAnU8ODwrZrJyxcbiAgICBpdGVtVW5pdDogJ2VsZW1lbnQnLFxuICAgIGl0ZW1zVW5pdDogJ2VsZW1lbnQnLFxuICB9LFxuICBTZWxlY3Q6IHtcbiAgICBub3RGb3VuZENvbnRlbnQ6ICdJbmZvIHNha25hcycsXG4gIH0sXG59O1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICB0b2RheTogJ8OgwrjCp8OgwrjCscOgwrjCmcOgwrjCmcOgwrjCtcOgwrnCiScsXG4gIG5vdzogJ8OgwrjClcOgwrjCrcOgwrjCmcOgwrjCmcOgwrjCtcOgwrnCiScsXG4gIGJhY2tUb1RvZGF5OiAnw6DCuMKBw6DCuMKlw6DCuMKxw6DCuMKaw6DCucKEw6DCuMKbw6DCuMKiw6DCuMKxw6DCuMKHw6DCuMKnw6DCuMKxw6DCuMKZw6DCuMKZw6DCuMK1w6DCucKJJyxcbiAgb2s6ICfDoMK4wpXDoMK4woHDoMK4wqXDoMK4wocnLFxuICBjbGVhcjogJ8OgwrjCpcOgwrjCmsOgwrjCpcOgwrnCicOgwrjCssOgwrjChycsXG4gIG1vbnRoOiAnw6DCucKAw6DCuMKUw6DCuMK3w6DCuMKtw6DCuMKZJyxcbiAgeWVhcjogJ8OgwrjCm8OgwrjCtScsXG4gIHRpbWVTZWxlY3Q6ICfDoMK5woDDoMK4wqXDoMK4wrfDoMK4wq3DoMK4woHDoMK5woDDoMK4wqfDoMK4wqXDoMK4wrInLFxuICBkYXRlU2VsZWN0OiAnw6DCucKAw6DCuMKlw6DCuMK3w6DCuMKtw6DCuMKBw6DCuMKnw6DCuMKxw6DCuMKZJyxcbiAgbW9udGhTZWxlY3Q6ICfDoMK5woDDoMK4wqXDoMK4wrfDoMK4wq3DoMK4woHDoMK5woDDoMK4wpTDoMK4wrfDoMK4wq3DoMK4wpknLFxuICB5ZWFyU2VsZWN0OiAnw6DCucKAw6DCuMKlw6DCuMK3w6DCuMKtw6DCuMKBw6DCuMKbw6DCuMK1JyxcbiAgZGVjYWRlU2VsZWN0OiAnw6DCucKAw6DCuMKlw6DCuMK3w6DCuMKtw6DCuMKBw6DCuMKXw6DCuMKow6DCuMKnw6DCuMKjw6DCuMKjw6DCuMKpJyxcbiAgeWVhckZvcm1hdDogJ1lZWVknLFxuICBkYXRlRm9ybWF0OiAnRC9NL1lZWVknLFxuICBkYXlGb3JtYXQ6ICdEJyxcbiAgZGF0ZVRpbWVGb3JtYXQ6ICdEL00vWVlZWSBISDptbTpzcycsXG4gIG1vbnRoQmVmb3JlWWVhcjogdHJ1ZSxcbiAgcHJldmlvdXNNb250aDogJ8OgwrnCgMOgwrjClMOgwrjCt8OgwrjCrcOgwrjCmcOgwrjCgcOgwrnCiMOgwrjCrcOgwrjCmcOgwrjCq8OgwrjCmcOgwrnCicOgwrjCsiAoUGFnZVVwKScsXG4gIG5leHRNb250aDogJ8OgwrnCgMOgwrjClMOgwrjCt8OgwrjCrcOgwrjCmcOgwrjClsOgwrjCscOgwrjClMOgwrnChMOgwrjCmyAoUGFnZURvd24pJyxcbiAgcHJldmlvdXNZZWFyOiAnw6DCuMKbw6DCuMK1w6DCuMKBw6DCucKIw6DCuMKtw6DCuMKZw6DCuMKrw6DCuMKZw6DCucKJw6DCuMKyIChDb250cm9sICsgbGVmdCknLFxuICBuZXh0WWVhcjogJ8OgwrjCm8OgwrjCtcOgwrjClsOgwrjCscOgwrjClMOgwrnChMOgwrjCmyAoQ29udHJvbCArIHJpZ2h0KScsXG4gIHByZXZpb3VzRGVjYWRlOiAnw6DCuMKXw6DCuMKow6DCuMKnw6DCuMKjw6DCuMKjw6DCuMKpw6DCuMKBw6DCucKIw6DCuMKtw6DCuMKZw6DCuMKrw6DCuMKZw6DCucKJw6DCuMKyJyxcbiAgbmV4dERlY2FkZTogJ8OgwrjCl8OgwrjCqMOgwrjCp8OgwrjCo8OgwrjCo8OgwrjCqcOgwrjClsOgwrjCscOgwrjClMOgwrnChMOgwrjCmycsXG4gIHByZXZpb3VzQ2VudHVyeTogJ8OgwrjCqMOgwrjClcOgwrjCp8OgwrjCo8OgwrjCo8OgwrjCqcOgwrjCgcOgwrnCiMOgwrjCrcOgwrjCmcOgwrjCq8OgwrjCmcOgwrnCicOgwrjCsicsXG4gIG5leHRDZW50dXJ5OiAnw6DCuMKow6DCuMKVw6DCuMKnw6DCuMKjw6DCuMKjw6DCuMKpw6DCuMKWw6DCuMKxw6DCuMKUw6DCucKEw6DCuMKbJyxcbn07XG4iLCJjb25zdCBsb2NhbGUgPSB7XG4gIHBsYWNlaG9sZGVyOiAnw6DCucKAw6DCuMKlw6DCuMK3w6DCuMKtw6DCuMKBw6DCucKAw6DCuMKnw6DCuMKlw6DCuMKyJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTtcbiIsImltcG9ydCBDYWxlbmRhckxvY2FsZSBmcm9tICcuLi9jYWxlbmRhci90aF9USCc7XG5pbXBvcnQgVGltZVBpY2tlckxvY2FsZSBmcm9tICcuLi90aW1lLXBpY2tlci90aF9USCc7XG5cbi8vIE1lcmdlIGludG8gYSBsb2NhbGUgb2JqZWN0XG5jb25zdCBsb2NhbGUgPSB7XG4gIGxhbmcgICAgICAgICAgICA6IHtcbiAgICBwbGFjZWhvbGRlciAgICAgOiAnw6DCucKAw6DCuMKlw6DCuMK3w6DCuMKtw6DCuMKBw6DCuMKnw6DCuMKxw6DCuMKZw6DCuMKXw6DCuMK1w6DCucKIJyxcbiAgICByYW5nZVBsYWNlaG9sZGVyOiBbICfDoMK4wqfDoMK4wrHDoMK4wpnDoMK5woDDoMK4wqPDoMK4wrTDoMK5wojDoMK4wqHDoMK4wpXDoMK5wonDoMK4wpknLCAnw6DCuMKnw6DCuMKxw6DCuMKZw6DCuMKqw6DCuMK0w6DCucKJw6DCuMKZw6DCuMKqw6DCuMK4w6DCuMKUJyBdLFxuICAgIC4uLkNhbGVuZGFyTG9jYWxlXG4gIH0sXG4gIHRpbWVQaWNrZXJMb2NhbGU6IHsgLi4uVGltZVBpY2tlckxvY2FsZSB9XG59O1xuXG4vLyBBbGwgc2V0dGluZ3MgYXQ6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2Jsb2IvbWFzdGVyL2NvbXBvbmVudHMvZGF0ZS1waWNrZXIvbG9jYWxlL2V4YW1wbGUuanNvblxuXG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIC8vIE9wdGlvbnMuanN4XG4gIGl0ZW1zX3Blcl9wYWdlOiAnLyDDoMK4wqvDoMK4wpnDoMK5wonDoMK4wrInLFxuICBqdW1wX3RvOiAnw6DCucKEw6DCuMKbw6DCuMKiw6DCuMKxw6DCuMKHJyxcbiAganVtcF90b19jb25maXJtOiAnw6DCuMKiw6DCuMK3w6DCuMKZw6DCuMKiw6DCuMKxw6DCuMKZJyxcbiAgcGFnZTogJycsXG5cbiAgLy8gUGFnaW5hdGlvbi5qc3hcbiAgcHJldl9wYWdlOiAnw6DCuMKrw6DCuMKZw6DCucKJw6DCuMKyw6DCuMKBw6DCucKIw6DCuMKtw6DCuMKZw6DCuMKrw6DCuMKZw6DCucKJw6DCuMKyJyxcbiAgbmV4dF9wYWdlOiAnw6DCuMKrw6DCuMKZw6DCucKJw6DCuMKyw6DCuMKWw6DCuMKxw6DCuMKUw6DCucKEw6DCuMKbJyxcbiAgcHJldl81OiAnw6DCuMKiw6DCucKJw6DCuMKtw6DCuMKZw6DCuMKBw6DCuMKlw6DCuMKxw6DCuMKaIDUgw6DCuMKrw6DCuMKZw6DCucKJw6DCuMKyJyxcbiAgbmV4dF81OiAnw6DCuMKWw6DCuMKxw6DCuMKUw6DCucKEw6DCuMKbIDUgw6DCuMKrw6DCuMKZw6DCucKJw6DCuMKyJyxcbiAgcHJldl8zOiAnw6DCuMKiw6DCucKJw6DCuMKtw6DCuMKZw6DCuMKBw6DCuMKlw6DCuMKxw6DCuMKaIDMgw6DCuMKrw6DCuMKZw6DCucKJw6DCuMKyJyxcbiAgbmV4dF8zOiAnw6DCuMKWw6DCuMKxw6DCuMKUw6DCucKEw6DCuMKbIDMgw6DCuMKrw6DCuMKZw6DCucKJw6DCuMKyJyxcbn07XG4iLCJpbXBvcnQgQ2FsZW5kYXIgZnJvbSAnLi9jYWxlbmRhci90aF9USCc7XG5pbXBvcnQgRGF0ZVBpY2tlciBmcm9tICcuL2RhdGUtcGlja2VyL3RoX1RIJztcbmltcG9ydCBQYWdpbmF0aW9uIGZyb20gJy4vcGFnaW5hdGlvbi90aF9USCc7XG5pbXBvcnQgVGltZVBpY2tlciBmcm9tICcuL3RpbWUtcGlja2VyL3RoX1RIJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBsb2NhbGU6ICd0aCcsXG4gIFBhZ2luYXRpb24sXG4gIERhdGVQaWNrZXIsXG4gIFRpbWVQaWNrZXIsXG4gIENhbGVuZGFyLFxuICBUYWJsZToge1xuICAgIGZpbHRlclRpdGxlOiAnw6DCuMKVw6DCuMKxw6DCuMKnw6DCuMKBw6DCuMKjw6DCuMKtw6DCuMKHJyxcbiAgICBmaWx0ZXJDb25maXJtOiAnw6DCuMKiw6DCuMK3w6DCuMKZw6DCuMKiw6DCuMKxw6DCuMKZJyxcbiAgICBmaWx0ZXJSZXNldDogJ8OgwrjCo8OgwrjCtcOgwrnCgMOgwrjCi8OgwrnCh8OgwrjClScsXG4gICAgZW1wdHlUZXh0OiAnw6DCucKEw6DCuMKhw6DCucKIw6DCuMKhw6DCuMK1w6DCuMKCw6DCucKJw6DCuMKtw6DCuMKhw6DCuMK5w6DCuMKlJyxcbiAgICBzZWxlY3RBbGw6ICfDoMK5woDDoMK4wqXDoMK4wrfDoMK4wq3DoMK4woHDoMK4wpfDoMK4wrHDoMK5wonDoMK4wofDoMK4wqvDoMK4wqHDoMK4wpTDoMK5woPDoMK4wpnDoMK4wqvDoMK4wpnDoMK5wonDoMK4wrLDoMK4wpnDoMK4wrXDoMK5woknLFxuICAgIHNlbGVjdEludmVydDogJ8OgwrnCgMOgwrjCpcOgwrjCt8OgwrjCrcOgwrjCgcOgwrjCqsOgwrjClsOgwrjCssOgwrjCmcOgwrjCsMOgwrjClcOgwrjCo8OgwrjCh8OgwrjCgcOgwrjCscOgwrjCmcOgwrjCgsOgwrnCicOgwrjCssOgwrjCoScsXG4gIH0sXG4gIE1vZGFsOiB7XG4gICAgb2tUZXh0OiAnw6DCuMKVw6DCuMKBw6DCuMKlw6DCuMKHJyxcbiAgICBjYW5jZWxUZXh0OiAnw6DCuMKiw6DCuMKBw6DCucKAw6DCuMKlw6DCuMK0w6DCuMKBJyxcbiAgICBqdXN0T2tUZXh0OiAnw6DCuMKVw6DCuMKBw6DCuMKlw6DCuMKHJyxcbiAgfSxcbiAgUG9wY29uZmlybToge1xuICAgIG9rVGV4dDogJ8OgwrjClcOgwrjCgcOgwrjCpcOgwrjChycsXG4gICAgY2FuY2VsVGV4dDogJ8OgwrjCosOgwrjCgcOgwrnCgMOgwrjCpcOgwrjCtMOgwrjCgScsXG4gIH0sXG4gIFRyYW5zZmVyOiB7XG4gICAgbm90Rm91bmRDb250ZW50OiAnw6DCucKEw6DCuMKhw6DCucKIw6DCuMKew6DCuMKaw6DCuMKCw6DCucKJw6DCuMKtw6DCuMKhw6DCuMK5w6DCuMKlJyxcbiAgICBzZWFyY2hQbGFjZWhvbGRlcjogJ8OgwrjChMOgwrnCicOgwrjCmcOgwrjCq8OgwrjCsicsXG4gICAgaXRlbVVuaXQ6ICfDoMK4worDoMK4wrTDoMK5wonDoMK4wpknLFxuICAgIGl0ZW1zVW5pdDogJ8OgwrjCisOgwrjCtMOgwrnCicOgwrjCmScsXG4gIH0sXG4gIFNlbGVjdDoge1xuICAgIG5vdEZvdW5kQ29udGVudDogJ8OgwrnChMOgwrjCocOgwrnCiMOgwrjCnsOgwrjCmsOgwrjCgsOgwrnCicOgwrjCrcOgwrjCocOgwrjCucOgwrjCpScsXG4gIH0sXG4gIFVwbG9hZDoge1xuICAgIHVwbG9hZGluZzogJ8OgwrjCgcOgwrjCs8OgwrjCpcOgwrjCscOgwrjCh8OgwrjCrcOgwrjCscOgwrjCm8OgwrnCgsOgwrjCq8OgwrjCpcOgwrjClC4uLicsXG4gICAgcmVtb3ZlRmlsZTogJ8OgwrjCpcOgwrjCmsOgwrnChMOgwrjCn8OgwrjCpcOgwrnCjCcsXG4gICAgdXBsb2FkRXJyb3I6ICfDoMK5woDDoMK4woHDoMK4wrTDoMK4wpTDoMK4woLDoMK5wonDoMK4wq3DoMK4wpzDoMK4wrTDoMK4wpTDoMK4wp7DoMK4wqXDoMK4wrLDoMK4wpTDoMK5woPDoMK4wpnDoMK4woHDoMK4wrLDoMK4wqPDoMK4wq3DoMK4wrHDoMK4wpvDoMK5woLDoMK4wqvDoMK4wqXDoMK4wpQnLFxuICAgIHByZXZpZXdGaWxlOiAnw6DCuMKUw6DCuMK5w6DCuMKVw6DCuMKxw6DCuMKnw6DCuMKtw6DCuMKiw6DCucKIw6DCuMKyw6DCuMKHw6DCucKEw6DCuMKfw6DCuMKlw6DCucKMJyxcbiAgfSxcbn07XG4iLCJjb25zdCBsb2NhbGUgPSB7XG4gIHBsYWNlaG9sZGVyOiAnWmFtYW4gU2XDg8KnJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTtcbiIsImltcG9ydCBDYWxlbmRhckxvY2FsZSBmcm9tICcuLi9jYWxlbmRhci9lbl9VUyc7XG5pbXBvcnQgVGltZVBpY2tlckxvY2FsZSBmcm9tICcuLi90aW1lLXBpY2tlci90cl9UUic7XG5cbi8vIE1lcmdlIGludG8gYSBsb2NhbGUgb2JqZWN0XG5jb25zdCBsb2NhbGUgPSB7XG4gIGxhbmc6IHtcbiAgICBwbGFjZWhvbGRlcjogJ1RhcmloIFNlw4PCpycsXG4gICAgcmFuZ2VQbGFjZWhvbGRlcjogWydCYcOFwp9sYW5nw4TCscODwqcgVGFyaWhpJywgJ0JpdGnDhcKfIFRhcmloaSddLFxuICAgIC4uLkNhbGVuZGFyTG9jYWxlLFxuICB9LFxuICB0aW1lUGlja2VyTG9jYWxlOiB7XG4gICAgLi4uVGltZVBpY2tlckxvY2FsZSxcbiAgfSxcbn07XG5cbi8vIEFsbCBzZXR0aW5ncyBhdDpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vYmxvYi9tYXN0ZXIvY29tcG9uZW50cy9kYXRlLXBpY2tlci9sb2NhbGUvZXhhbXBsZS5qc29uXG5cbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTtcbiIsImltcG9ydCBDYWxlbmRhciBmcm9tICcuL2NhbGVuZGFyL2VuX1VTJztcbmltcG9ydCBEYXRlUGlja2VyIGZyb20gJy4vZGF0ZS1waWNrZXIvdHJfVFInO1xuaW1wb3J0IFBhZ2luYXRpb24gZnJvbSAnLi9wYWdpbmF0aW9uL2VuX1VTJztcbmltcG9ydCBUaW1lUGlja2VyIGZyb20gJy4vdGltZS1waWNrZXIvdHJfVFInO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGxvY2FsZTogJ3RyJyxcbiAgUGFnaW5hdGlvbixcbiAgRGF0ZVBpY2tlcixcbiAgVGltZVBpY2tlcixcbiAgQ2FsZW5kYXIsXG4gIFRhYmxlOiB7XG4gICAgZmlsdGVyVGl0bGU6ICdNZW7Dg8K8IEZpbHRyZWxlJyxcbiAgICBmaWx0ZXJDb25maXJtOiAnVGFtYW0nLFxuICAgIGZpbHRlclJlc2V0OiAnU8OEwrFmw4TCsXJsYScsXG4gICAgZW1wdHlUZXh0OiAnVmVyaSBZb2snLFxuICAgIHNlbGVjdEFsbDogJ0hlcHNpbmkgU2XDg8KnJyxcbiAgICBzZWxlY3RJbnZlcnQ6ICdUZXJzaW5pIFNlw4PCpycsXG4gIH0sXG4gIE1vZGFsOiB7XG4gICAgb2tUZXh0OiAnVGFtYW0nLFxuICAgIGNhbmNlbFRleHQ6ICfDhMKwcHRhbCcsXG4gICAganVzdE9rVGV4dDogJ1RhbWFtJyxcbiAgfSxcbiAgUG9wY29uZmlybToge1xuICAgIG9rVGV4dDogJ1RhbWFtJyxcbiAgICBjYW5jZWxUZXh0OiAnw4TCsHB0YWwnLFxuICB9LFxuICBUcmFuc2Zlcjoge1xuICAgIG5vdEZvdW5kQ29udGVudDogJ0J1bHVuYW1hZMOEwrEnLFxuICAgIHNlYXJjaFBsYWNlaG9sZGVyOiAnQXJhbWEnLFxuICAgIGl0ZW1Vbml0OiAnw4PClsOEwp9lJyxcbiAgICBpdGVtc1VuaXQ6ICfDg8KWw4TCn2VsZXInLFxuICB9LFxuICBTZWxlY3Q6IHtcbiAgICBub3RGb3VuZENvbnRlbnQ6ICdCdWx1bmFtYWTDhMKxJyxcbiAgfSxcbiAgVXBsb2FkOiB7XG4gICAgdXBsb2FkaW5nOiAnWcODwrxrbGVuaXlvci4uLicsXG4gICAgcmVtb3ZlRmlsZTogYERvc3lhecOEwrEga2FsZMOEwrFyYCxcbiAgICB1cGxvYWRFcnJvcjogJ1nDg8K8a2xlbWUgSGF0YXPDhMKxJyxcbiAgICBwcmV2aWV3RmlsZTogYERvc3lhecOEwrEgw4PClm5pemxlYCxcbiAgfSxcbn07XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIHRvZGF5OiAnw5DCocORwozDkMK+w5DCs8OQwr7DkMK0w5DCvcORwpYnLFxuICBub3c6ICfDkMKXw5DCsMORwoDDkMKww5DCtycsXG4gIGJhY2tUb1RvZGF5OiAnw5DCn8OQwr7DkcKCw5DCvsORwofDkMK9w5DCsCDDkMK0w5DCsMORwoLDkMKwJyxcbiAgb2s6ICdPaycsXG4gIGNsZWFyOiAnw5DCnsORwofDkMK4w5HCgcORwoLDkMK4w5HCgsOQwrgnLFxuICBtb250aDogJ8OQwpzDkcKWw5HCgcORwo/DkcKGw5HCjCcsXG4gIHllYXI6ICfDkMKgw5HClsOQwronLFxuICB0aW1lU2VsZWN0OiAnw5DCnsOQwrHDkcKAw5DCsMORwoLDkMK4IMORwofDkMKww5HCgScsXG4gIGRhdGVTZWxlY3Q6ICfDkMKew5DCscORwoDDkMKww5HCgsOQwrggw5DCtMOQwrDDkcKCw5HCgycsXG4gIG1vbnRoU2VsZWN0OiAnw5DCnsOQwrHDkcKAw5DCsMORwoLDkMK4IMOQwrzDkcKWw5HCgcORwo/DkcKGw5HCjCcsXG4gIHllYXJTZWxlY3Q6ICfDkMKew5DCscORwoDDkMKww5HCgsOQwrggw5HCgMORwpbDkMK6JyxcbiAgZGVjYWRlU2VsZWN0OiAnw5DCnsOQwrHDkcKAw5DCsMORwoLDkMK4IMOQwrTDkMK1w5HCgcORwo/DkcKCw5DCuMORwoDDkcKWw5HCh8ORwofDkcKPJyxcbiAgeWVhckZvcm1hdDogJ1lZWVknLFxuICBkYXRlRm9ybWF0OiAnRC1NLVlZWVknLFxuICBkYXlGb3JtYXQ6ICdEJyxcbiAgZGF0ZVRpbWVGb3JtYXQ6ICdELU0tWVlZWSBISDptbTpzcycsXG4gIG1vbnRoQmVmb3JlWWVhcjogdHJ1ZSxcbiAgcHJldmlvdXNNb250aDogJ8OQwp/DkMK+w5DCv8OQwrXDkcKAw5DCtcOQwrTDkMK9w5HClsOQwrkgw5DCvMORwpbDkcKBw5HCj8ORwobDkcKMIChQYWdlVXApJyxcbiAgbmV4dE1vbnRoOiAnw5DCncOQwrDDkcKBw5HCgsORwoPDkMK/w5DCvcOQwrjDkMK5IMOQwrzDkcKWw5HCgcORwo/DkcKGw5HCjCAoUGFnZURvd24pJyxcbiAgcHJldmlvdXNZZWFyOiAnw5DCn8OQwr7DkMK/w5DCtcORwoDDkMK1w5DCtMOQwr3DkcKWw5DCuSDDkcKAw5HClsOQwrogKENvbnRyb2wgKyBsZWZ0KScsXG4gIG5leHRZZWFyOiAnw5DCncOQwrDDkcKBw5HCgsORwoPDkMK/w5DCvcOQwrjDkMK5IMORwoDDkcKWw5DCuiAoQ29udHJvbCArIHJpZ2h0KScsXG4gIHByZXZpb3VzRGVjYWRlOiAnw5DCn8OQwr7DkMK/w5DCtcORwoDDkMK1w5DCtMOQwr3DkcKUIMOQwrTDkMK1w5HCgcORwo/DkcKCw5DCuMORwoDDkcKWw5HCh8ORwofDkcKPJyxcbiAgbmV4dERlY2FkZTogJ8OQwp3DkMKww5HCgcORwoLDkcKDw5DCv8OQwr3DkMK1IMOQwrTDkMK1w5HCgcORwo/DkcKCw5DCuMORwoDDkcKWw5HCh8ORwofDkcKPJyxcbiAgcHJldmlvdXNDZW50dXJ5OiAnw5DCn8OQwr7DkMK/w5DCtcORwoDDkMK1w5DCtMOQwr3DkcKUIMORwoHDkcKCw5DCvsOQwrvDkcKWw5HCgsORwoLDkcKPJyxcbiAgbmV4dENlbnR1cnk6ICfDkMKdw5DCsMORwoHDkcKCw5HCg8OQwr/DkMK9w5DCtSDDkcKBw5HCgsOQwr7DkMK7w5HClsORwoLDkcKCw5HCjycsXG59O1xuIiwiY29uc3QgbG9jYWxlID0ge1xuICBwbGFjZWhvbGRlcjogJ8OQwp7DkMKxw5DCtcORwoDDkcKWw5HCgsORwowgw5HCh8OQwrDDkcKBJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTtcbiIsImltcG9ydCBDYWxlbmRhckxvY2FsZSBmcm9tICcuLi9jYWxlbmRhci91a19VQSc7XG5pbXBvcnQgVGltZVBpY2tlckxvY2FsZSBmcm9tICcuLi90aW1lLXBpY2tlci91a19VQSc7XG5cbmNvbnN0IGxvY2FsZSA9IHtcbiAgbGFuZzoge1xuICAgIHBsYWNlaG9sZGVyOiAnw5DCnsOQwrHDkMK1w5HCgMORwpbDkcKCw5HCjCDDkMK0w5DCsMORwoLDkcKDJyxcbiAgICByYW5nZVBsYWNlaG9sZGVyOiBbJ8OQwp/DkMK+w5HCh8OQwrDDkcKCw5DCusOQwr7DkMKyw5DCsCDDkMK0w5DCsMORwoLDkMKwJywgJ8OQwprDkcKWw5DCvcORwobDkMK1w5DCssOQwrAgw5DCtMOQwrDDkcKCw5DCsCddLFxuICAgIC4uLkNhbGVuZGFyTG9jYWxlLFxuICB9LFxuICB0aW1lUGlja2VyTG9jYWxlOiB7XG4gICAgLi4uVGltZVBpY2tlckxvY2FsZSxcbiAgfSxcbn07XG5cbi8vIEFsbCBzZXR0aW5ncyBhdDpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vYmxvYi9tYXN0ZXIvY29tcG9uZW50cy9kYXRlLXBpY2tlci9sb2NhbGUvZXhhbXBsZS5qc29uXG5cbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgLy8gT3B0aW9ucy5qc3hcbiAgaXRlbXNfcGVyX3BhZ2U6ICcvIMORwoHDkcKCw5DCvsORwoDDkcKWw5DCvcORwobDkcKWJyxcbiAganVtcF90bzogJ8OQwp/DkMK1w5HCgMOQwrXDkMK5w5HCgsOQwrgnLFxuICBqdW1wX3RvX2NvbmZpcm06ICfDkMK/w5HClsOQwrTDkcKCw5DCssOQwrXDkcKAw5DCtMOQwrjDkcKCw5DCuCcsXG4gIHBhZ2U6ICcnLFxuXG4gIC8vIFBhZ2luYXRpb24uanN4XG4gIHByZXZfcGFnZTogJ8OQwp/DkMK+w5DCv8OQwrXDkcKAw5DCtcOQwrTDkMK9w5HCjyDDkcKBw5HCgsOQwr7DkcKAw5HClsOQwr3DkMK6w5DCsCcsXG4gIG5leHRfcGFnZTogJ8OQwp3DkMKww5HCgcORwoLDkcKDw5DCv8OQwr3DkMKwIMORwoHDkcKCw5DCvsORwoDDkcKWw5DCvcOQwrrDkMKwJyxcbiAgcHJldl81OiAnw5DCn8OQwr7DkMK/w5DCtcORwoDDkMK1w5DCtMOQwr3DkcKWIDUgw5HCgcORwoLDkMK+w5HCgMORwpbDkMK9w5DCvsOQwronLFxuICBuZXh0XzU6ICfDkMKdw5DCsMORwoHDkcKCw5HCg8OQwr/DkMK9w5HCliA1IMORwoHDkcKCw5DCvsORwoDDkcKWw5DCvcOQwr7DkMK6JyxcbiAgcHJldl8zOiAnw5DCn8OQwr7DkMK/w5DCtcORwoDDkMK1w5DCtMOQwr3DkcKWIDMgw5HCgcORwoLDkMK+w5HCgMORwpbDkMK9w5DCusOQwrgnLFxuICBuZXh0XzM6ICfDkMKdw5DCsMORwoHDkcKCw5HCg8OQwr/DkMK9w5HCliAzIMORwoHDkcKCw5DCvsORwoDDkcKWw5DCvcOQwrrDkMK4Jyxcbn07XG4iLCJpbXBvcnQgQ2FsZW5kYXIgZnJvbSAnLi9jYWxlbmRhci91a19VQSc7XG5pbXBvcnQgRGF0ZVBpY2tlciBmcm9tICcuL2RhdGUtcGlja2VyL3VrX1VBJztcbmltcG9ydCBQYWdpbmF0aW9uIGZyb20gJy4vcGFnaW5hdGlvbi91a19VQSc7XG5pbXBvcnQgVGltZVBpY2tlciBmcm9tICcuL3RpbWUtcGlja2VyL3VrX1VBJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBsb2NhbGU6ICd1aycsXG4gIFBhZ2luYXRpb24sXG4gIERhdGVQaWNrZXIsXG4gIFRpbWVQaWNrZXIsXG4gIENhbGVuZGFyLFxuICBUYWJsZToge1xuICAgIGZpbHRlclRpdGxlOiAnw5DCpMORwpbDkMK7w5HCjMORwoLDkcKAw5HCg8OQwrLDkMKww5HCgsOQwrgnLFxuICAgIGZpbHRlckNvbmZpcm06ICdPSycsXG4gICAgZmlsdGVyUmVzZXQ6ICfDkMKhw5DCusOQwrjDkMK9w5HCg8ORwoLDkMK4JyxcbiAgICBlbXB0eVRleHQ6ICfDkMKUw5DCsMOQwr3DkMK4w5HChSDDkMK9w5DCtcOQwrzDkMKww5HClCcsXG4gICAgc2VsZWN0QWxsOiAnw5DCnsOQwrHDkcKAw5DCsMORwoLDkMK4IMOQwrLDkcKBw5HClicsXG4gICAgc2VsZWN0SW52ZXJ0OiAnw5DChsOQwr3DkMKyw5DCtcORwoDDkcKCw5HCg8OQwrLDkMKww5HCgsOQwrggw5DCssOQwrjDkMKxw5HClsORwoAnLFxuICB9LFxuICBNb2RhbDoge1xuICAgIG9rVGV4dDogJ8OQwpPDkMKww5HCgMOQwrDDkMK3w5DCtCcsXG4gICAgY2FuY2VsVGV4dDogJ8OQwqHDkMK6w5DCsMORwoHDkcKDw5DCssOQwrDDkcKCw5DCuCcsXG4gICAganVzdE9rVGV4dDogJ8OQwpPDkMKww5HCgMOQwrDDkMK3w5DCtCcsXG4gIH0sXG4gIFBvcGNvbmZpcm06IHtcbiAgICBva1RleHQ6ICfDkMKTw5DCsMORwoDDkMKww5DCt8OQwrQnLFxuICAgIGNhbmNlbFRleHQ6ICfDkMKhw5DCusOQwrDDkcKBw5HCg8OQwrLDkMKww5HCgsOQwrgnLFxuICB9LFxuICBUcmFuc2Zlcjoge1xuICAgIG5vdEZvdW5kQ29udGVudDogJ8OQwp3DkcKWw5HCh8OQwr7DkMKzw5DCviDDkMK9w5DCtSDDkMK3w5DCvcOQwrDDkMK5w5DCtMOQwrXDkMK9w5DCvicsXG4gICAgc2VhcmNoUGxhY2Vob2xkZXI6ICfDkMKSw5DCssOQwrXDkMK0w5HClsORwoLDkcKMIMORwoLDkMK1w5DCusORwoHDkcKCIMOQwrTDkMK7w5HCjyDDkMK/w5DCvsORwojDkcKDw5DCusORwoMnLFxuICAgIGl0ZW1Vbml0OiAnaXRlbScsXG4gICAgaXRlbXNVbml0OiAnaXRlbXMnLFxuICB9LFxuICBTZWxlY3Q6IHtcbiAgICBub3RGb3VuZENvbnRlbnQ6ICfDkMKdw5HClsORwofDkMK+w5DCs8OQwr4gw5DCvcOQwrUgw5DCt8OQwr3DkMKww5DCucOQwrTDkMK1w5DCvcOQwr4nLFxuICB9LFxuICBVcGxvYWQ6IHtcbiAgICB1cGxvYWRpbmc6ICfDkMKXw5DCsMOQwrLDkMKww5DCvcORwoLDkMKww5DCtsOQwrXDkMK9w5DCvcORwo8gLi4uJyxcbiAgICByZW1vdmVGaWxlOiAnw5DCksOQwrjDkMK0w5DCsMOQwrvDkMK4w5HCgsOQwrggw5HChMOQwrDDkMK5w5DCuycsXG4gICAgdXBsb2FkRXJyb3I6ICfDkMKfw5DCvsOQwrzDkMK4w5DCu8OQwrrDkMKwIMOQwrfDkMKww5DCssOQwrDDkMK9w5HCgsOQwrDDkMK2w5DCtcOQwr3DkMK9w5HCjycsXG4gICAgcHJldmlld0ZpbGU6ICfDkMKfw5DCvsOQwr/DkMK1w5HCgMOQwrXDkMK0w5DCvcORwpbDkMK5IMOQwr/DkMK1w5HCgMOQwrXDkMKzw5DCu8ORwo/DkMK0IMORwoTDkMKww5DCucOQwrvDkcKDJyxcbiAgfSxcbn07XG4iLCJpbXBvcnQgQ2FsZW5kYXJMb2NhbGUgZnJvbSAnLi4vY2FsZW5kYXIvZW5fVVMnO1xuaW1wb3J0IFRpbWVQaWNrZXJMb2NhbGUgZnJvbSAnLi4vdGltZS1waWNrZXIvZW5fVVMnO1xuXG4vLyBNZXJnZSBpbnRvIGEgbG9jYWxlIG9iamVjdFxuY29uc3QgbG9jYWxlID0ge1xuICBsYW5nOiB7XG4gICAgcGxhY2Vob2xkZXI6ICdDaMOhwrvCjW4gdGjDocK7wp1pIMOEwpFpw6HCu8KDbScsXG4gICAgcmFuZ2VQbGFjZWhvbGRlcjogWydOZ8ODwqB5IGLDocK6wq90IMOEwpHDocK6wqd1JywgJ05nw4PCoHkga8OhwrrCv3QgdGjDg8K6YyddLFxuICAgIC4uLkNhbGVuZGFyTG9jYWxlLFxuICB9LFxuICB0aW1lUGlja2VyTG9jYWxlOiB7XG4gICAgLi4uVGltZVBpY2tlckxvY2FsZSxcbiAgfSxcbn07XG5cbi8vIEFsbCBzZXR0aW5ncyBhdDpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vYmxvYi9tYXN0ZXIvY29tcG9uZW50cy9kYXRlLXBpY2tlci9sb2NhbGUvZXhhbXBsZS5qc29uXG5cbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgLy8gT3B0aW9ucy5qc3hcbiAgaXRlbXNfcGVyX3BhZ2U6ICcvIHRyYW5nJyxcbiAganVtcF90bzogJ8OEwpDDocK6wr9uJyxcbiAganVtcF90b19jb25maXJtOiAneMODwqFjIG5ow6HCusKtbicsXG4gIHBhZ2U6ICcnLFxuXG4gIC8vIFBhZ2luYXRpb24uanN4XG4gIHByZXZfcGFnZTogJ1RyYW5nIFRyw4bCsMOhwrvCm2MnLFxuICBuZXh0X3BhZ2U6ICdUcmFuZyBLw6HCusK/JyxcbiAgcHJldl81OiAnVsOhwrvCgSA1IFRyYW5nIFRyw4bCsMOhwrvCm2MnLFxuICBuZXh0XzU6ICfDhMKQw6HCusK/biA1IFRyYW5nIEvDocK6wr8nLFxuICBwcmV2XzM6ICdWw6HCu8KBIDMgVHJhbmcgVHLDhsKww6HCu8KbYycsXG4gIG5leHRfMzogJ8OEwpDDocK6wr9uIDMgVHJhbmcgS8OhwrrCvycsXG59O1xuIiwiY29uc3QgbG9jYWxlID0ge1xuICBwbGFjZWhvbGRlcjogJ0Now6HCu8KNbiB0aMOhwrvCnWkgZ2lhbicsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7XG4iLCJpbXBvcnQgQ2FsZW5kYXIgZnJvbSAnLi9jYWxlbmRhci92aV9WTic7XG5pbXBvcnQgRGF0ZVBpY2tlciBmcm9tICcuL2RhdGUtcGlja2VyL3ZpX1ZOJztcbmltcG9ydCBQYWdpbmF0aW9uIGZyb20gJy4vcGFnaW5hdGlvbi92aV9WTic7XG5pbXBvcnQgVGltZVBpY2tlciBmcm9tICcuL3RpbWUtcGlja2VyL3ZpX1ZOJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBsb2NhbGU6ICd2aScsXG4gIFBhZ2luYXRpb24sXG4gIERhdGVQaWNrZXIsXG4gIFRpbWVQaWNrZXIsXG4gIENhbGVuZGFyLFxuICBUYWJsZToge1xuICAgIGZpbHRlclRpdGxlOiAnQsOhwrvCmSAnLFxuICAgIGZpbHRlckNvbmZpcm06ICdPSycsXG4gICAgZmlsdGVyUmVzZXQ6ICdUw6HCusKhbyBMw6HCusKhaScsXG4gICAgZW1wdHlUZXh0OiAnVHLDocK7wpFuZycsXG4gICAgc2VsZWN0QWxsOiAnQ2jDocK7wo1uIFTDocK6wqV0IEPDocK6wqMnLFxuICAgIHNlbGVjdEludmVydDogJ0Now6HCu8KNbiBOZ8OGwrDDocK7wqNjIEzDocK6wqFpJyxcbiAgfSxcbiAgTW9kYWw6IHtcbiAgICBva1RleHQ6ICdPSycsXG4gICAgY2FuY2VsVGV4dDogJ0h1w6HCu8K3JyxcbiAgICBqdXN0T2tUZXh0OiAnT0snLFxuICB9LFxuICBQb3Bjb25maXJtOiB7XG4gICAgb2tUZXh0OiAnT0snLFxuICAgIGNhbmNlbFRleHQ6ICdIdcOhwrvCtycsXG4gIH0sXG4gIFRyYW5zZmVyOiB7XG4gICAgbm90Rm91bmRDb250ZW50OiAnS2jDg8K0bmcgVMODwqxtIFRow6HCusKleScsXG4gICAgc2VhcmNoUGxhY2Vob2xkZXI6ICdUw4PCrG0gw6HCu8KfIMOEwpHDg8KieScsXG4gICAgaXRlbVVuaXQ6ICdtw6HCu8KlYycsXG4gICAgaXRlbXNVbml0OiAnbcOhwrvCpWMnLFxuICB9LFxuICBTZWxlY3Q6IHtcbiAgICBub3RGb3VuZENvbnRlbnQ6ICdLaMODwrRuZyBUw4PCrG0gVGjDocK6wqV5JyxcbiAgfSxcbiAgVXBsb2FkOiB7XG4gICAgdXBsb2FkaW5nOiAnw4TCkGFuZyB0w6HCusKjaSBsw4PCqm4uLi4nLFxuICAgIHJlbW92ZUZpbGU6ICdHw6HCu8KhIGLDocK7wo8gdMOhwrrCrXAgdGluJyxcbiAgICB1cGxvYWRFcnJvcjogJ0zDocK7wpdpIHTDocK6wqNpIGzDg8KqbicsXG4gICAgcHJldmlld0ZpbGU6ICdYZW0gdGjDocK7wq0gdMOhwrrCrXAgdGluJyxcbiAgfSxcbn07XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIHRvZGF5OiAnw6TCu8KKw6XCpMKpJyxcbiAgbm93OiAnw6bCrcKkw6XCiMK7JyxcbiAgYmFja1RvVG9kYXk6ICfDqMK/wpTDpcKbwp7DpMK7worDpcKkwqknLFxuICBvazogJ8OnwqLCusOlwq7CmicsXG4gIHRpbWVTZWxlY3Q6ICfDqcKBwrjDpsKTwofDpsKZwoLDqcKWwpMnLFxuICBkYXRlU2VsZWN0OiAnw6nCgcK4w6bCk8KHw6bCl8Klw6bCnMKfJyxcbiAgY2xlYXI6ICfDpsK4woXDqcKZwqQnLFxuICBtb250aDogJ8OmwpzCiCcsXG4gIHllYXI6ICfDpcK5wrQnLFxuICBwcmV2aW91c01vbnRoOiAnw6TCuMKKw6XCgMKLw6bCnMKIICjDp8K/wrvDqcKgwoHDpMK4worDqcKNwrUpJyxcbiAgbmV4dE1vbnRoOiAnw6TCuMKLw6XCgMKLw6bCnMKIICjDp8K/wrvDqcKgwoHDpMK4wovDqcKNwrUpJyxcbiAgbW9udGhTZWxlY3Q6ICfDqcKBwrjDpsKTwofDpsKcwojDpMK7wr0nLFxuICB5ZWFyU2VsZWN0OiAnw6nCgcK4w6bCk8KHw6XCucK0w6TCu8K9JyxcbiAgZGVjYWRlU2VsZWN0OiAnw6nCgcK4w6bCk8KHw6XCucK0w6TCu8KjJyxcbiAgeWVhckZvcm1hdDogJ1lZWVnDpcK5wrQnLFxuICBkYXlGb3JtYXQ6ICdEw6bCl8KlJyxcbiAgZGF0ZUZvcm1hdDogJ1lZWVnDpcK5wrRNw6bCnMKIRMOmwpfCpScsXG4gIGRhdGVUaW1lRm9ybWF0OiAnWVlZWcOlwrnCtE3DpsKcwohEw6bCl8KlIEhIw6bCmcKCbW3DpcKIwoZzc8OnwqfCkicsXG4gIHByZXZpb3VzWWVhcjogJ8OkwrjCisOkwrjCgMOlwrnCtCAoQ29udHJvbMOpwo3CtcOlworCoMOlwrfCpsOmwpbCucOlwpDCkcOpwo3CtSknLFxuICBuZXh0WWVhcjogJ8OkwrjCi8OkwrjCgMOlwrnCtCAoQ29udHJvbMOpwo3CtcOlworCoMOlwo/Cs8OmwpbCucOlwpDCkcOpwo3CtSknLFxuICBwcmV2aW91c0RlY2FkZTogJ8OkwrjCisOkwrjCgMOlwrnCtMOkwrvCoycsXG4gIG5leHREZWNhZGU6ICfDpMK4wovDpMK4woDDpcK5wrTDpMK7wqMnLFxuICBwcmV2aW91c0NlbnR1cnk6ICfDpMK4worDpMK4woDDpMK4wpbDp8K0woAnLFxuICBuZXh0Q2VudHVyeTogJ8OkwrjCi8OkwrjCgMOkwrjClsOnwrTCgCcsXG59O1xuIiwiY29uc3QgbG9jYWxlID0ge1xuICBwbGFjZWhvbGRlcjogJ8OowqvCi8OpwoHCuMOmwpPCh8OmwpnCgsOpwpbCkycsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7XG4iLCJpbXBvcnQgQ2FsZW5kYXJMb2NhbGUgZnJvbSAnLi4vY2FsZW5kYXIvemhfVFcnO1xuaW1wb3J0IFRpbWVQaWNrZXJMb2NhbGUgZnJvbSAnLi4vdGltZS1waWNrZXIvemhfVFcnO1xuXG5jb25zdCBsb2NhbGUgPSB7XG4gIGxhbmc6IHtcbiAgICBwbGFjZWhvbGRlcjogJ8OowqvCi8OpwoHCuMOmwpPCh8OmwpfCpcOmwpzCnycsXG4gICAgcmFuZ2VQbGFjZWhvbGRlcjogWyfDqcKWwovDpcKnwovDpsKXwqXDpsKcwp8nLCAnw6fCtcKQw6bCncKfw6bCl8Klw6bCnMKfJ10sXG4gICAgLi4uQ2FsZW5kYXJMb2NhbGUsXG4gIH0sXG4gIHRpbWVQaWNrZXJMb2NhbGU6IHtcbiAgICAuLi5UaW1lUGlja2VyTG9jYWxlLFxuICB9LFxufTtcblxubG9jYWxlLmxhbmcub2sgPSAnw6fCosK6IMOlwq7Cmic7XG5cbi8vIEFsbCBzZXR0aW5ncyBhdDpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vYmxvYi9tYXN0ZXIvY29tcG9uZW50cy9kYXRlLXBpY2tlci9sb2NhbGUvZXhhbXBsZS5qc29uXG5cbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgLy8gT3B0aW9ucy5qc3hcbiAgaXRlbXNfcGVyX3BhZ2U6ICfDpsKiwp0vw6nCoMKBJyxcbiAganVtcF90bzogJ8OowrfCs8OowofCsycsXG4gIGp1bXBfdG9fY29uZmlybTogJ8OnwqLCusOlwq7CmicsXG4gIHBhZ2U6ICfDqcKgwoEnLFxuXG4gIC8vIFBhZ2luYXRpb24uanN4XG4gIHByZXZfcGFnZTogJ8OkwrjCisOkwrjCgMOpwqDCgScsXG4gIG5leHRfcGFnZTogJ8OkwrjCi8OkwrjCgMOpwqDCgScsXG4gIHByZXZfNTogJ8OlwpDCkcOlwonCjSA1IMOpwqDCgScsXG4gIG5leHRfNTogJ8OlwpDCkcOlwr7CjCA1IMOpwqDCgScsXG4gIHByZXZfMzogJ8OlwpDCkcOlwonCjSAzIMOpwqDCgScsXG4gIG5leHRfMzogJ8OlwpDCkcOlwr7CjCAzIMOpwqDCgScsXG59O1xuIiwiaW1wb3J0IENhbGVuZGFyIGZyb20gJy4vY2FsZW5kYXIvemhfVFcnO1xuaW1wb3J0IERhdGVQaWNrZXIgZnJvbSAnLi9kYXRlLXBpY2tlci96aF9UVyc7XG5pbXBvcnQgUGFnaW5hdGlvbiBmcm9tICcuL3BhZ2luYXRpb24vemhfVFcnO1xuaW1wb3J0IFRpbWVQaWNrZXIgZnJvbSAnLi90aW1lLXBpY2tlci96aF9UVyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbG9jYWxlOiAnemgtdHcnLFxuICBQYWdpbmF0aW9uLFxuICBEYXRlUGlja2VyLFxuICBUaW1lUGlja2VyLFxuICBDYWxlbmRhcixcbiAgVGFibGU6IHtcbiAgICBmaWx0ZXJUaXRsZTogJ8Onwq/CqcOpwoHCuMOlwpnCqCcsXG4gICAgZmlsdGVyQ29uZmlybTogJ8OnwqLCuiDDpcKuwponLFxuICAgIGZpbHRlclJlc2V0OiAnw6nCh8KNIMOnwr3CricsXG4gICAgZW1wdHlUZXh0OiAnw6fCm8Kuw6XCicKNw6XCsMKaw6fChMKhw6jCs8KHw6bClsKZJyxcbiAgICBzZWxlY3RBbGw6ICfDpcKFwqjDqcKDwqjDqcKBwrjDpcKPwpYnLFxuICAgIHNlbGVjdEludmVydDogJ8Olwo/CjcOlwpDCkcOpwoHCuMOlwo/ClicsXG4gIH0sXG4gIE1vZGFsOiB7XG4gICAgb2tUZXh0OiAnw6fCosK6IMOlwq7CmicsXG4gICAgY2FuY2VsVGV4dDogJ8Olwo/CliDDpsK2wognLFxuICAgIGp1c3RPa1RleHQ6ICdPSycsXG4gIH0sXG4gIFBvcGNvbmZpcm06IHtcbiAgICBva1RleHQ6ICfDp8Kiwrogw6XCrsKaJyxcbiAgICBjYW5jZWxUZXh0OiAnw6XCj8KWIMOmwrbCiCcsXG4gIH0sXG4gIFRyYW5zZmVyOiB7XG4gICAgbm90Rm91bmRDb250ZW50OiAnw6bCn8Klw6fChMKhw6bCrcKkw6jCs8KHw6bClsKZJyxcbiAgICBzZWFyY2hQbGFjZWhvbGRlcjogJ8OmwpDCnMOlwrDCi8OowrPCh8OmwpbCmScsXG4gICAgaXRlbVVuaXQ6ICfDqcKgwoXDp8Kbwq4nLFxuICAgIGl0ZW1zVW5pdDogJ8OpwqDChcOnwpvCricsXG4gIH0sXG4gIFNlbGVjdDoge1xuICAgIG5vdEZvdW5kQ29udGVudDogJ8Omwp/CpcOnwoTCocOmwq3CpMOowrPCh8OmwpbCmScsXG4gIH0sXG4gIFVwbG9hZDoge1xuICAgIHVwbG9hZGluZzogJ8Omwq3Co8OlwpzCqMOkwrjCisOlwoLCsy4uLicsXG4gICAgcmVtb3ZlRmlsZTogJ8OlwojCqsOpwpnCpMOmwqrClMOmwqHCiCcsXG4gICAgdXBsb2FkRXJyb3I6ICfDpMK4worDpcKCwrPDpcKkwrHDpsKVwpcnLFxuICAgIHByZXZpZXdGaWxlOiAnw6bCqsKUw6bCocKIw6nCoMKQw6jCpsK9JyxcbiAgfSxcbn07XG4iLCJpbXBvcnQgeyBWZXJzaW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCBjb25zdCBWRVJTSU9OID0gbmV3IFZlcnNpb24oJzAuMC4wLVBMQUNFSE9MREVSJyk7XG4iLCJpbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBQb3NpdGlvbiB7XG4gIHg6IG51bWJlcjtcbiAgeTogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgTnpHbG9iYWxNb25pdG9yU2VydmljZSB7XG4gIGNvdW50ZXIgPSAwO1xuICBsYXN0Q2xpY2tQb3M6IFBvc2l0aW9uID0ge1xuICAgIHg6IDAsXG4gICAgeTogMFxuICB9O1xuXG4gIF9uYXZJdGVtU291cmNlOiBFdmVudEVtaXR0ZXI8c3RyaW5nPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBnZXRHbG9iYWxDb3VudCgpOiBudW1iZXIge1xuICAgIHJldHVybiArK3RoaXMuY291bnRlcjtcbiAgfVxuXG4gIHNldERvY3VtZW50T3ZlcmZsb3dIaWRkZW4oc3RhdHVzOiBib29sZWFuKTogdm9pZCB7XG4gICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9IHN0YXR1cyA/ICdoaWRkZW4nIDogJyc7XG4gIH1cblxuICBfb2JzZXJ2ZUdsb2JhbEV2ZW50cygpOiB2b2lkIHtcbiAgICAvLyDDp8KbwpHDpcKQwqxkb2N1bWVudMOnwprChMOnwoLCucOlwofCu8OkwrrCi8OkwrvCtsOvwrzCjMOowq7CsMOlwr3ClcOnwoLCucOlwofCu8Olwp3CkMOmwqDCh8OvwrzCjMOlwrnCtsOmworCm8OlwofCuiBkb2N1bWVudENsaWNrIMOkwrrCi8OkwrvCtlxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgIHRoaXMubGFzdENsaWNrUG9zID0ge1xuICAgICAgICB4OiBlLmNsaWVudFgsXG4gICAgICAgIHk6IGUuY2xpZW50WVxuICAgICAgfTtcbiAgICAgIHRoaXMuX25hdkl0ZW1Tb3VyY2UuZW1pdCgnZG9jdW1lbnRDbGljaycpO1xuICAgIH0pO1xuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fb2JzZXJ2ZUdsb2JhbEV2ZW50cygpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBOekdsb2JhbE1vbml0b3JTZXJ2aWNlKCk7XG4iLCJpbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBOekFmZml4TW9kdWxlIH0gZnJvbSAnLi9hZmZpeC9uei1hZmZpeC5tb2R1bGUnO1xuaW1wb3J0IHsgTnpBbGVydE1vZHVsZSB9IGZyb20gJy4vYWxlcnQvbnotYWxlcnQubW9kdWxlJztcbmltcG9ydCB7IE56QW5jaG9yTW9kdWxlIH0gZnJvbSAnLi9hbmNob3IvbnotYW5jaG9yLm1vZHVsZSc7XG5pbXBvcnQgeyBOekF1dG9jb21wbGV0ZU1vZHVsZSB9IGZyb20gJy4vYXV0by1jb21wbGV0ZS9uei1hdXRvY29tcGxldGUubW9kdWxlJztcbmltcG9ydCB7IE56QXZhdGFyTW9kdWxlIH0gZnJvbSAnLi9hdmF0YXIvbnotYXZhdGFyLm1vZHVsZSc7XG5pbXBvcnQgeyBOekJhY2tUb3BNb2R1bGUgfSBmcm9tICcuL2JhY2stdG9wL256LWJhY2stdG9wLm1vZHVsZSc7XG5pbXBvcnQgeyBOekJhZGdlTW9kdWxlIH0gZnJvbSAnLi9iYWRnZS9uei1iYWRnZS5tb2R1bGUnO1xuaW1wb3J0IHsgTnpCcmVhZENydW1iTW9kdWxlIH0gZnJvbSAnLi9icmVhZGNydW1iL256LWJyZWFkY3J1bWIubW9kdWxlJztcbmltcG9ydCB7IE56QnV0dG9uTW9kdWxlIH0gZnJvbSAnLi9idXR0b24vbnotYnV0dG9uLm1vZHVsZSc7XG5pbXBvcnQgeyBOekNhbGVuZGFyTW9kdWxlIH0gZnJvbSAnLi9jYWxlbmRhci9uei1jYWxlbmRhci5tb2R1bGUnO1xuaW1wb3J0IHsgTnpDYXJkTW9kdWxlIH0gZnJvbSAnLi9jYXJkL256LWNhcmQubW9kdWxlJztcbmltcG9ydCB7IE56Q2Fyb3VzZWxNb2R1bGUgfSBmcm9tICcuL2Nhcm91c2VsL256LWNhcm91c2VsLm1vZHVsZSc7XG5pbXBvcnQgeyBOekNhc2NhZGVyTW9kdWxlIH0gZnJvbSAnLi9jYXNjYWRlci9uei1jYXNjYWRlci5tb2R1bGUnO1xuaW1wb3J0IHsgTnpDaGVja2JveE1vZHVsZSB9IGZyb20gJy4vY2hlY2tib3gvbnotY2hlY2tib3gubW9kdWxlJztcbmltcG9ydCB7IE56Q29sbGFwc2VNb2R1bGUgfSBmcm9tICcuL2NvbGxhcHNlL256LWNvbGxhcHNlLm1vZHVsZSc7XG5pbXBvcnQgeyBOeldhdmVNb2R1bGUgfSBmcm9tICcuL2NvcmUvd2F2ZS9uei13YXZlLm1vZHVsZSc7XG5pbXBvcnQgeyBOekRhdGVQaWNrZXJNb2R1bGUgfSBmcm9tICcuL2RhdGUtcGlja2VyL2RhdGUtcGlja2VyLm1vZHVsZSc7XG5pbXBvcnQgeyBOekRpdmlkZXJNb2R1bGUgfSBmcm9tICcuL2RpdmlkZXIvbnotZGl2aWRlci5tb2R1bGUnO1xuaW1wb3J0IHsgTnpEcmF3ZXJNb2R1bGUgfSBmcm9tICcuL2RyYXdlci9uei1kcmF3ZXIubW9kdWxlJztcbmltcG9ydCB7IE56RHJvcERvd25Nb2R1bGUgfSBmcm9tICcuL2Ryb3Bkb3duL256LWRyb3Bkb3duLm1vZHVsZSc7XG5pbXBvcnQgeyBOekZvcm1Nb2R1bGUgfSBmcm9tICcuL2Zvcm0vbnotZm9ybS5tb2R1bGUnO1xuaW1wb3J0IHsgTnpHcmlkTW9kdWxlIH0gZnJvbSAnLi9ncmlkL256LWdyaWQubW9kdWxlJztcbmltcG9ydCB7IE56STE4bk1vZHVsZSB9IGZyb20gJy4vaTE4bi9uei1pMThuLm1vZHVsZSc7XG5pbXBvcnQgeyBOekljb25Nb2R1bGUgfSBmcm9tICcuL2ljb24vbnotaWNvbi5tb2R1bGUnO1xuaW1wb3J0IHsgTnpJbnB1dE51bWJlck1vZHVsZSB9IGZyb20gJy4vaW5wdXQtbnVtYmVyL256LWlucHV0LW51bWJlci5tb2R1bGUnO1xuaW1wb3J0IHsgTnpJbnB1dE1vZHVsZSB9IGZyb20gJy4vaW5wdXQvbnotaW5wdXQubW9kdWxlJztcbmltcG9ydCB7IE56TGF5b3V0TW9kdWxlIH0gZnJvbSAnLi9sYXlvdXQvbnotbGF5b3V0Lm1vZHVsZSc7XG5pbXBvcnQgeyBOekxpc3RNb2R1bGUgfSBmcm9tICcuL2xpc3QvbnotbGlzdC5tb2R1bGUnO1xuaW1wb3J0IHsgTnpNZW50aW9uTW9kdWxlIH0gZnJvbSAnLi9tZW50aW9uL21lbnRpb24ubW9kdWxlJztcbmltcG9ydCB7IE56TWVudU1vZHVsZSB9IGZyb20gJy4vbWVudS9uei1tZW51Lm1vZHVsZSc7XG5pbXBvcnQgeyBOek1lc3NhZ2VNb2R1bGUgfSBmcm9tICcuL21lc3NhZ2UvbnotbWVzc2FnZS5tb2R1bGUnO1xuaW1wb3J0IHsgTnpNb2RhbE1vZHVsZSB9IGZyb20gJy4vbW9kYWwvbnotbW9kYWwubW9kdWxlJztcbmltcG9ydCB7IE56Tm90aWZpY2F0aW9uTW9kdWxlIH0gZnJvbSAnLi9ub3RpZmljYXRpb24vbnotbm90aWZpY2F0aW9uLm1vZHVsZSc7XG5pbXBvcnQgeyBOelBhZ2luYXRpb25Nb2R1bGUgfSBmcm9tICcuL3BhZ2luYXRpb24vbnotcGFnaW5hdGlvbi5tb2R1bGUnO1xuaW1wb3J0IHsgTnpQb3Bjb25maXJtTW9kdWxlIH0gZnJvbSAnLi9wb3Bjb25maXJtL256LXBvcGNvbmZpcm0ubW9kdWxlJztcbmltcG9ydCB7IE56UG9wb3Zlck1vZHVsZSB9IGZyb20gJy4vcG9wb3Zlci9uei1wb3BvdmVyLm1vZHVsZSc7XG5pbXBvcnQgeyBOelByb2dyZXNzTW9kdWxlIH0gZnJvbSAnLi9wcm9ncmVzcy9uei1wcm9ncmVzcy5tb2R1bGUnO1xuaW1wb3J0IHsgTnpSYWRpb01vZHVsZSB9IGZyb20gJy4vcmFkaW8vbnotcmFkaW8ubW9kdWxlJztcbmltcG9ydCB7IE56UmF0ZU1vZHVsZSB9IGZyb20gJy4vcmF0ZS9uei1yYXRlLm1vZHVsZSc7XG5pbXBvcnQgeyBOelNlbGVjdE1vZHVsZSB9IGZyb20gJy4vc2VsZWN0L256LXNlbGVjdC5tb2R1bGUnO1xuaW1wb3J0IHsgTnpTa2VsZXRvbk1vZHVsZSB9IGZyb20gJy4vc2tlbGV0b24vbnotc2tlbGV0b24ubW9kdWxlJztcbmltcG9ydCB7IE56U2xpZGVyTW9kdWxlIH0gZnJvbSAnLi9zbGlkZXIvbnotc2xpZGVyLm1vZHVsZSc7XG5pbXBvcnQgeyBOelNwaW5Nb2R1bGUgfSBmcm9tICcuL3NwaW4vbnotc3Bpbi5tb2R1bGUnO1xuaW1wb3J0IHsgTnpTdGVwc01vZHVsZSB9IGZyb20gJy4vc3RlcHMvbnotc3RlcHMubW9kdWxlJztcbmltcG9ydCB7IE56U3dpdGNoTW9kdWxlIH0gZnJvbSAnLi9zd2l0Y2gvbnotc3dpdGNoLm1vZHVsZSc7XG5pbXBvcnQgeyBOelRhYmxlTW9kdWxlIH0gZnJvbSAnLi90YWJsZS9uei10YWJsZS5tb2R1bGUnO1xuaW1wb3J0IHsgTnpUYWJzTW9kdWxlIH0gZnJvbSAnLi90YWJzL256LXRhYnMubW9kdWxlJztcbmltcG9ydCB7IE56VGFnTW9kdWxlIH0gZnJvbSAnLi90YWcvbnotdGFnLm1vZHVsZSc7XG5pbXBvcnQgeyBOelRpbWVQaWNrZXJNb2R1bGUgfSBmcm9tICcuL3RpbWUtcGlja2VyL256LXRpbWUtcGlja2VyLm1vZHVsZSc7XG5pbXBvcnQgeyBOelRpbWVsaW5lTW9kdWxlIH0gZnJvbSAnLi90aW1lbGluZS9uei10aW1lbGluZS5tb2R1bGUnO1xuaW1wb3J0IHsgTnpUb29sVGlwTW9kdWxlIH0gZnJvbSAnLi90b29sdGlwL256LXRvb2x0aXAubW9kdWxlJztcbmltcG9ydCB7IE56VHJhbnNmZXJNb2R1bGUgfSBmcm9tICcuL3RyYW5zZmVyL256LXRyYW5zZmVyLm1vZHVsZSc7XG5pbXBvcnQgeyBOelRyZWVTZWxlY3RNb2R1bGUgfSBmcm9tICcuL3RyZWUtc2VsZWN0L256LXRyZWUtc2VsZWN0Lm1vZHVsZSc7XG5pbXBvcnQgeyBOelRyZWVNb2R1bGUgfSBmcm9tICcuL3RyZWUvbnotdHJlZS5tb2R1bGUnO1xuaW1wb3J0IHsgTnpVcGxvYWRNb2R1bGUgfSBmcm9tICcuL3VwbG9hZC9uei11cGxvYWQubW9kdWxlJztcblxuZXhwb3J0ICogZnJvbSAnLi9hZmZpeCc7XG5leHBvcnQgKiBmcm9tICcuL2FsZXJ0JztcbmV4cG9ydCAqIGZyb20gJy4vYW5jaG9yJztcbmV4cG9ydCAqIGZyb20gJy4vYXZhdGFyJztcbmV4cG9ydCAqIGZyb20gJy4vYmFjay10b3AnO1xuZXhwb3J0ICogZnJvbSAnLi9iYWRnZSc7XG5leHBvcnQgKiBmcm9tICcuL2JyZWFkY3J1bWInO1xuZXhwb3J0ICogZnJvbSAnLi9idXR0b24nO1xuZXhwb3J0ICogZnJvbSAnLi9jYWxlbmRhcic7XG5leHBvcnQgKiBmcm9tICcuL2NhcmQnO1xuZXhwb3J0ICogZnJvbSAnLi9jYXJvdXNlbCc7XG5leHBvcnQgKiBmcm9tICcuL2NoZWNrYm94JztcbmV4cG9ydCAqIGZyb20gJy4vY29sbGFwc2UnO1xuZXhwb3J0ICogZnJvbSAnLi9kYXRlLXBpY2tlcic7XG5leHBvcnQgKiBmcm9tICcuL2RpdmlkZXInO1xuZXhwb3J0ICogZnJvbSAnLi9kcmF3ZXInO1xuZXhwb3J0ICogZnJvbSAnLi9kcm9wZG93bic7XG5leHBvcnQgKiBmcm9tICcuL2RyYXdlcic7XG5leHBvcnQgKiBmcm9tICcuL2Zvcm0nO1xuZXhwb3J0ICogZnJvbSAnLi9ncmlkJztcbmV4cG9ydCAqIGZyb20gJy4vaTE4bic7XG5leHBvcnQgKiBmcm9tICcuL2ljb24nO1xuZXhwb3J0ICogZnJvbSAnLi9pbnB1dCc7XG5leHBvcnQgKiBmcm9tICcuL2lucHV0LW51bWJlcic7XG5leHBvcnQgKiBmcm9tICcuL2xheW91dCc7XG5leHBvcnQgKiBmcm9tICcuL2xpc3QnO1xuZXhwb3J0ICogZnJvbSAnLi9tZW50aW9uJztcbmV4cG9ydCAqIGZyb20gJy4vbWVudSc7XG5leHBvcnQgKiBmcm9tICcuL3BhZ2luYXRpb24nO1xuZXhwb3J0ICogZnJvbSAnLi9wcm9ncmVzcyc7XG5leHBvcnQgKiBmcm9tICcuL3JhZGlvJztcbmV4cG9ydCAqIGZyb20gJy4vcmF0ZSc7XG5leHBvcnQgKiBmcm9tICcuL3NlbGVjdCc7XG5leHBvcnQgKiBmcm9tICcuL3NwaW4nO1xuZXhwb3J0ICogZnJvbSAnLi9zdGVwcyc7XG5leHBvcnQgKiBmcm9tICcuL3N3aXRjaCc7XG5leHBvcnQgKiBmcm9tICcuL3RhYmxlJztcbmV4cG9ydCAqIGZyb20gJy4vdGFicyc7XG5leHBvcnQgKiBmcm9tICcuL3RpbWVsaW5lJztcbmV4cG9ydCAqIGZyb20gJy4vdHJhbnNmZXInO1xuZXhwb3J0ICogZnJvbSAnLi91cGxvYWQnO1xuZXhwb3J0ICogZnJvbSAnLi90YWcnO1xuZXhwb3J0ICogZnJvbSAnLi9hdXRvLWNvbXBsZXRlJztcbmV4cG9ydCAqIGZyb20gJy4vbWVzc2FnZSc7XG5leHBvcnQgKiBmcm9tICcuL3RpbWUtcGlja2VyJztcbmV4cG9ydCAqIGZyb20gJy4vdG9vbHRpcCc7XG5leHBvcnQgKiBmcm9tICcuL3NrZWxldG9uJztcbmV4cG9ydCAqIGZyb20gJy4vc2xpZGVyJztcbmV4cG9ydCAqIGZyb20gJy4vcG9wb3Zlcic7XG5leHBvcnQgKiBmcm9tICcuL25vdGlmaWNhdGlvbic7XG5leHBvcnQgKiBmcm9tICcuL3BvcGNvbmZpcm0nO1xuZXhwb3J0ICogZnJvbSAnLi9tb2RhbCc7XG5leHBvcnQgKiBmcm9tICcuL2Nhc2NhZGVyJztcbmV4cG9ydCAqIGZyb20gJy4vdHJlZSc7XG5leHBvcnQgKiBmcm9tICcuL3RyZWUtc2VsZWN0JztcbmV4cG9ydCAqIGZyb20gJy4vdGltZS1waWNrZXInO1xuZXhwb3J0ICogZnJvbSAnLi92ZXJzaW9uJztcbmV4cG9ydCAqIGZyb20gJy4vY29yZS93YXZlJztcbmV4cG9ydCAqIGZyb20gJy4vY29yZS91dGlsJztcblxuQE5nTW9kdWxlKHtcbiAgZXhwb3J0czogW1xuICAgIE56QnV0dG9uTW9kdWxlLFxuICAgIE56Q2FsZW5kYXJNb2R1bGUsXG4gICAgTnpHcmlkTW9kdWxlLFxuICAgIE56U3dpdGNoTW9kdWxlLFxuICAgIE56U2VsZWN0TW9kdWxlLFxuICAgIE56TWVudU1vZHVsZSxcbiAgICBOek1lbnRpb25Nb2R1bGUsXG4gICAgTnpBbmNob3JNb2R1bGUsXG4gICAgTnpBZmZpeE1vZHVsZSxcbiAgICBOekRyb3BEb3duTW9kdWxlLFxuICAgIE56TGF5b3V0TW9kdWxlLFxuICAgIE56QnJlYWRDcnVtYk1vZHVsZSxcbiAgICBOelBhZ2luYXRpb25Nb2R1bGUsXG4gICAgTnpTdGVwc01vZHVsZSxcbiAgICBOeklucHV0TW9kdWxlLFxuICAgIE56Q2hlY2tib3hNb2R1bGUsXG4gICAgTnpJbnB1dE51bWJlck1vZHVsZSxcbiAgICBOelNsaWRlck1vZHVsZSxcbiAgICBOelJhdGVNb2R1bGUsXG4gICAgTnpCYWRnZU1vZHVsZSxcbiAgICBOelJhZGlvTW9kdWxlLFxuICAgIE56QWxlcnRNb2R1bGUsXG4gICAgTnpTcGluTW9kdWxlLFxuICAgIE56UHJvZ3Jlc3NNb2R1bGUsXG4gICAgTnpUYWJzTW9kdWxlLFxuICAgIE56SWNvbk1vZHVsZSxcbiAgICBOekNhcmRNb2R1bGUsXG4gICAgTnpBdmF0YXJNb2R1bGUsXG4gICAgTnpUaW1lbGluZU1vZHVsZSxcbiAgICBOelRyYW5zZmVyTW9kdWxlLFxuICAgIE56Q2Fyb3VzZWxNb2R1bGUsXG4gICAgTnpDb2xsYXBzZU1vZHVsZSxcbiAgICBOelRhYmxlTW9kdWxlLFxuICAgIE56RGF0ZVBpY2tlck1vZHVsZSxcbiAgICBOekRpdmlkZXJNb2R1bGUsXG4gICAgTnpEcmF3ZXJNb2R1bGUsXG4gICAgTnpGb3JtTW9kdWxlLFxuICAgIE56TGlzdE1vZHVsZSxcbiAgICBOekkxOG5Nb2R1bGUsXG4gICAgTnpVcGxvYWRNb2R1bGUsXG4gICAgTnpBdXRvY29tcGxldGVNb2R1bGUsXG4gICAgTnpUYWdNb2R1bGUsXG4gICAgTnpNZXNzYWdlTW9kdWxlLFxuICAgIE56Tm90aWZpY2F0aW9uTW9kdWxlLFxuICAgIE56UG9wb3Zlck1vZHVsZSxcbiAgICBOelRvb2xUaXBNb2R1bGUsXG4gICAgTnpQb3Bjb25maXJtTW9kdWxlLFxuICAgIE56TW9kYWxNb2R1bGUsXG4gICAgTnpCYWNrVG9wTW9kdWxlLFxuICAgIE56Q2FzY2FkZXJNb2R1bGUsXG4gICAgTnpUcmVlTW9kdWxlLFxuICAgIE56VHJlZVNlbGVjdE1vZHVsZSxcbiAgICBOelRpbWVQaWNrZXJNb2R1bGUsXG4gICAgTnpXYXZlTW9kdWxlLFxuICAgIE56U2tlbGV0b25Nb2R1bGVcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBOZ1pvcnJvQW50ZE1vZHVsZSB7XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgYE5nWm9ycm9BbnRkTW9kdWxlYCBpbnN0ZWFkLlxuICAgKi9cbiAgc3RhdGljIGZvclJvb3QoKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBOZ1pvcnJvQW50ZE1vZHVsZVxuICAgIH07XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJOWl9JQ09OUyIsIk5aX0lDT05fREVGQVVMVF9UV09UT05FX0NPTE9SIiwiREVGQVVMVF9UV09UT05FX0NPTE9SIiwidHNsaWJfMS5fX2V4dGVuZHMiLCJOekljb25TZXJ2aWNlIiwidHNsaWJfMS5fX3ZhbHVlcyIsImRlbGF5IiwibG9jYWxlIiwiVGltZVBpY2tlckxvY2FsZSIsIkkxOG4iLCJEYXRlQ2VsbCIsIkRhdGVGdWxsQ2VsbCIsIk1vbnRoQ2VsbCIsIk1vbnRoRnVsbENlbGwiLCJzdHlsZSIsImZpbHRlciIsIlVwZGF0ZUNscyIsIk1BWF9ST1ciLCJNQVhfQ09MIiwiRHJhd2VyQnVpbGRlckZvclNlcnZpY2UiLCJOekRyYXdlclNlcnZpY2UiLCJOek1lc3NhZ2VCYXNlU2VydmljZSIsIk56TWVzc2FnZVNlcnZpY2UiLCJ0cmlnZ2VyIiwic3RhdGUiLCJNb2RhbFV0aWwiLCJOek5vdGlmaWNhdGlvblNlcnZpY2UiLCJvYnNlcnZhYmxlT2YiLCJ0c2xpYl8xLl9fc3ByZWFkIiwiTnpEcm9wZG93blNlcnZpY2UiLCJDYWxlbmRhckxvY2FsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EsSUFBTSxnQkFBZ0IsR0FBRyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7Ozs7QUFFakQ7O0lBQ0UsSUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFDO0lBQ2pCLE9BQU8sVUFBVSxRQUE4Qjs7UUFDN0MsSUFBTSxRQUFRLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQzs7UUFDdEMsSUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxJQUFJLFFBQVEsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDOztRQUMzRCxJQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLGNBQVEsUUFBUSxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUMsQ0FBQyxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDckYsUUFBUSxHQUFHLFFBQVEsR0FBRyxVQUFVLENBQUM7UUFDakMsT0FBTyxFQUFFLENBQUM7S0FDWCxDQUFDO0NBQ0g7Ozs7QUFFRDtJQUNFLElBQUksT0FBTyxNQUFNLEtBQUssV0FBVyxFQUFFO1FBQ2pDLE9BQU8sY0FBTSxPQUFBLElBQUksR0FBQSxDQUFDO0tBQ25CO0lBQ0QsSUFBSSxNQUFNLENBQUMscUJBQXFCLEVBQUU7O1FBRWhDLE9BQU8sTUFBTSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FB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RUFBRSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7NEJBQ3ZILElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxLQUFLLENBQUMsV0FBVyxFQUFFLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLEtBQUssQ0FBQyxRQUFRLEVBQUUsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7NEJBQy9KLElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxLQUFLLENBQUMsV0FBVyxFQUFFLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLEtBQUssQ0FBQyxRQUFRLEVBQUUsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsS0FBSyxLQUFLLENBQUMsUUFBUSxFQUFFLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRSxHQUFHLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQzs0QkFDM00sSUFBSSxDQUFDLFdBQVcsRUFBRSxLQUFLLEtBQUssQ0FBQyxXQUFXLEVBQUUsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLEtBQUssS0FBSyxDQUFDLFFBQVEsRUFBRSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLEtBQUssQ0FBQyxRQUFRLEVBQUUsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFLEtBQUssS0FBSyxDQUFDLFVBQVUsRUFBRSxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUUsR0FBRyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQzthQUNqUTtTQUNGO1FBQ0QsT0FBTyxLQUFLLENBQUM7S0FDZDs7Ozs7O0lBRUQsNEJBQVE7Ozs7O0lBQVIsVUFB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QyxFQUFFO29CQUMvRSxZQUFZLENBQUssS0FBSSxDQUFDLFNBQVMsU0FBSSxRQUFRLFNBQUksS0FBSSxDQUFFLElBQUksQ0FBSSxDQUFFLEdBQUcsSUFBSSxDQUFDO2lCQUN4RTtxQkFBTTtvQkFDTCxZQUFZLENBQUssS0FBSSxDQUFDLFNBQVMsU0FBSSxRQUFRLFNBQUksS0FBSSxDQUFFLElBQUksQ0FBRSxDQUFDLElBQU0sQ0FBRSxHQUFHLEtBQUksQ0FBRSxJQUFJLENBQUUsSUFBSSxRQUFRLENBQUMsS0FBSSxDQUFFLElBQUksQ0FBRSxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUNuSCxZQUFZLENBQUssS0FBSSxDQUFDLFNBQVMsU0FBSSxRQUFRLGNBQVMsS0FBSSxDQUFFLElBQUksQ0FBRSxDQUFDLElBQU0sQ0FBRSxHQUFHLEtBQUksQ0FBRSxJQUFJLENBQUUsSUFBSSxRQUFRLENBQUMsS0FBSSxDQUFFLElBQUksQ0FBRSxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUN4SCxZQUFZLENBQUssS0FBSSxDQUFDLFNBQVMsU0FBSSxRQUFRLGNBQVMsS0FBSSxDQUFFLElBQUksQ0FBRSxDQUFDLElBQU0sQ0FBRSxHQUFHLEtBQUksQ0FBRSxJQUFJLENBQUUsSUFBSSxRQUFRLENBQUMsS0FBSSxDQUFFLElBQUksQ0FBRSxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUN4SCxZQUFZLENBQUssS0FBSSxDQUFDLFNBQVMsU0FBSSxRQUFRLGdCQUFXLEtBQUksQ0FBRSxJQUFJLENBQUUsQ0FBQyxNQUFRLENBQUUsR0FBRyxLQUFJLENBQUUsSUFBSSxDQUFFLElBQUksUUFBUSxDQUFDLEtBQUksQ0FBRSxJQUFJLENBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztvQkFDOUgsWUFBWSxDQUFLLEtBQUksQ0FBQyxTQUFTLFNBQUksUUFBUSxlQUFVLEtBQUksQ0FBRSxJQUFJLENBQUUsQ0FBQyxLQUFPLENBQUUsR0FBRyxLQUFJLENBQUUsSUFBSSxDQUFFLElBQUksUUFBUSxDQUFDLEtBQUksQ0FBRSxJQUFJLENBQUUsQ0FB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\n",null]}